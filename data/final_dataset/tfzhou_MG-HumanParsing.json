{"home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.None.setup.NumpyIncludePath.__str__": [[18, 22], ["numpy.get_include"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "__str__", "(", ")", ":", "\n", "        ", "import", "numpy", "\n", "return", "numpy", ".", "get_include", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.__init__": [[67, 72], ["logs.Plots.read_log", "lf.replace"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.read_log"], ["    ", "def", "__init__", "(", "self", ",", "log_files", ",", "labels", "=", "None", ",", "output_prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "log_files", "=", "log_files", "\n", "self", ".", "datas", "=", "[", "self", ".", "read_log", "(", "f", ")", "for", "f", "in", "log_files", "]", "\n", "self", ".", "labels", "=", "labels", "or", "[", "lf", ".", "replace", "(", "'outputs/'", ",", "''", ")", "for", "lf", "in", "log_files", "]", "\n", "self", ".", "output_prefix", "=", "output_prefix", "or", "log_files", "[", "-", "1", "]", "+", "'.'", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.read_log": [[73, 81], ["pysparkling.Context", "pysparkling.Context.textFile().filter().map().groupBy().collectAsMap", "pysparkling.Context.textFile().filter().map().groupBy", "pysparkling.Context.textFile().filter().map", "data.get", "pysparkling.Context.textFile().filter", "json.loads", "line.strip", "pysparkling.Context.textFile", "line.startswith", "line.endswith"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "@", "staticmethod", "\n", "def", "read_log", "(", "path", ")", ":", "\n", "        ", "sc", "=", "pysparkling", ".", "Context", "(", ")", "\n", "return", "(", "sc", "\n", ".", "textFile", "(", "path", ")", "\n", ".", "filter", "(", "lambda", "line", ":", "line", ".", "startswith", "(", "(", "'{'", ",", "'json:'", ")", ")", "and", "line", ".", "endswith", "(", "'}'", ")", ")", "\n", ".", "map", "(", "lambda", "line", ":", "json", ".", "loads", "(", "line", ".", "strip", "(", "'json:'", ")", ")", ")", "\n", ".", "groupBy", "(", "lambda", "data", ":", "data", ".", "get", "(", "'type'", ")", ")", "\n", ".", "collectAsMap", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.process": [[83, 86], ["zip"], "methods", ["None"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "return", "{", "label", ":", "data", "[", "'process'", "]", "\n", "for", "data", ",", "label", "in", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.field_names": [[87, 91], ["range", "zip"], "methods", ["None"], ["", "def", "field_names", "(", "self", ")", ":", "\n", "        ", "placeholder", "=", "[", "'field {}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "6", ")", "]", "\n", "return", "{", "label", ":", "data", "[", "'config'", "]", "[", "0", "]", "[", "'field_names'", "]", "if", "'config'", "in", "data", "else", "placeholder", "\n", "for", "data", ",", "label", "in", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.process_arguments": [[92, 95], ["zip"], "methods", ["None"], ["", "def", "process_arguments", "(", "self", ")", ":", "\n", "        ", "return", "{", "label", ":", "data", "[", "'process'", "]", "[", "0", "]", "[", "'argv'", "]", "[", "1", ":", "]", "\n", "for", "data", ",", "label", "in", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time": [[96, 111], ["enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.legend", "zip", "matplotlib.cm.get_cmap", "numpy.array", "ax.plot", "datetime.datetime.strptime", "row.get", "row.get", "row.get", "row.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "time", "(", "self", ",", "ax", ")", ":", "\n", "        ", "for", "color_i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "\n", "if", "'train'", "in", "data", ":", "\n", "                ", "x", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'epoch'", ")", "+", "row", ".", "get", "(", "'batch'", ")", "/", "row", ".", "get", "(", "'n_batches'", ")", "\n", "for", "row", "in", "data", "[", "'train'", "]", "]", ")", "\n", "y", "=", "[", "datetime", ".", "datetime", ".", "strptime", "(", "row", ".", "get", "(", "'asctime'", ")", "[", ":", "-", "4", "]", ",", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "for", "row", "in", "data", "[", "'train'", "]", "]", "\n", "y", "=", "[", "(", "yi", "-", "y", "[", "0", "]", ")", ".", "total_seconds", "(", ")", "/", "3600.0", "for", "yi", "in", "y", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "color", ",", "label", "=", "label", ")", "\n", "\n", "", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "set_ylabel", "(", "'time [h]'", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.epoch_time": [[112, 135], ["enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.legend", "zip", "matplotlib.cm.get_cmap", "datetime.datetime.strptime", "ax.plot", "row.get", "datetime.datetime.strptime", "row.get", "zip", "row.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "epoch_time", "(", "self", ",", "ax", ")", ":", "\n", "        ", "for", "color_i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "\n", "y0", "=", "None", "\n", "if", "'train'", "in", "data", ":", "\n", "                ", "row", "=", "data", "[", "'train'", "]", "[", "0", "]", "\n", "y0", "=", "datetime", ".", "datetime", ".", "strptime", "(", "row", ".", "get", "(", "'asctime'", ")", "[", ":", "-", "4", "]", ",", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "", "if", "'train-epoch'", "in", "data", ":", "\n", "                ", "x", "=", "[", "row", ".", "get", "(", "'epoch'", ")", "for", "row", "in", "data", "[", "'train-epoch'", "]", "]", "\n", "y", "=", "[", "datetime", ".", "datetime", ".", "strptime", "(", "row", ".", "get", "(", "'asctime'", ")", "[", ":", "-", "4", "]", ",", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "for", "row", "in", "data", "[", "'train-epoch'", "]", "]", "\n", "if", "y0", "is", "not", "None", ":", "\n", "                    ", "x", "=", "[", "0", "]", "+", "x", "\n", "y", "=", "[", "y0", "]", "+", "y", "\n", "", "y", "=", "[", "(", "yi", "-", "prev_yi", ")", ".", "total_seconds", "(", ")", "/", "60.0", "\n", "for", "prev_yi", ",", "yi", "in", "zip", "(", "y", "[", ":", "-", "1", "]", ",", "y", "[", "1", ":", "]", ")", "]", "\n", "ax", ".", "plot", "(", "x", "[", "1", ":", "]", ",", "y", ",", "color", "=", "color", ",", "label", "=", "label", ")", "\n", "\n", "", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "set_ylabel", "(", "'epoch-time [min]'", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.lr": [[136, 150], ["enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_yscale", "ax.legend", "zip", "matplotlib.cm.get_cmap", "ax.plot", "row.get", "row.get", "row.get", "row.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "lr", "(", "self", ",", "ax", ")", ":", "\n", "        ", "for", "color_i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "\n", "if", "'train'", "in", "data", ":", "\n", "                ", "x", "=", "[", "row", ".", "get", "(", "'epoch'", ")", "+", "row", ".", "get", "(", "'batch'", ")", "/", "row", ".", "get", "(", "'n_batches'", ")", "\n", "for", "row", "in", "data", "[", "'train'", "]", "]", "\n", "y", "=", "[", "row", ".", "get", "(", "'lr'", ")", "for", "row", "in", "data", "[", "'train'", "]", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "color", ",", "label", "=", "label", ")", "\n", "\n", "", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "set_ylabel", "(", "'learning rate'", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ",", "nonposy", "=", "'clip'", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.epoch_loss": [[151, 173], ["enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.grid", "ax.legend", "zip", "matplotlib.cm.get_cmap", "numpy.array", "numpy.array", "ax.plot", "numpy.array", "numpy.array", "ax.plot", "row.get", "row.get", "row.get", "row.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "epoch_loss", "(", "self", ",", "ax", ")", ":", "\n", "        ", "for", "color_i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "\n", "if", "'val-epoch'", "in", "data", ":", "\n", "                ", "x", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'epoch'", ")", "for", "row", "in", "data", "[", "'val-epoch'", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'loss'", ")", "for", "row", "in", "data", "[", "'val-epoch'", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "'o-'", ",", "color", "=", "color", ",", "markersize", "=", "2", ",", "label", "=", "label", ")", "\n", "\n", "", "if", "'train-epoch'", "in", "data", ":", "\n", "                ", "x", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'epoch'", ")", "for", "row", "in", "data", "[", "'train-epoch'", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'loss'", ")", "for", "row", "in", "data", "[", "'train-epoch'", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "m", "=", "x", ">", "0", "\n", "ax", ".", "plot", "(", "x", "[", "m", "]", ",", "y", "[", "m", "]", ",", "'x-'", ",", "color", "=", "color", ",", "linestyle", "=", "'dotted'", ",", "markersize", "=", "2", ")", "\n", "\n", "", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "set_ylabel", "(", "'loss'", ")", "\n", "# ax.set_ylim(0.0, 4.0)", "\n", "# if min(y) > -0.1:", "\n", "#     ax.set_yscale('log', nonposy='clip')", "\n", "ax", ".", "grid", "(", "linestyle", "=", "'dotted'", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.epoch_head": [[174, 211], ["logs.Plots.field_names", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "numpy.concatenate", "ax.grid", "zip", "field_names[].index", "ax.set_ylim", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "numpy.array", "numpy.array", "numpy.logical_not", "ax.plot", "numpy.concatenate.append", "numpy.array", "numpy.array", "numpy.logical_not", "ax.plot", "numpy.concatenate.append", "numpy.min", "numpy.max", "numpy.isnan", "numpy.isnan", "row.get", "row.get", "row.get", "row.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.field_names", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "epoch_head", "(", "self", ",", "ax", ",", "field_name", ")", ":", "\n", "        ", "field_names", "=", "self", ".", "field_names", "(", ")", "\n", "last_five_y", "=", "[", "]", "\n", "for", "color_i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "if", "field_name", "not", "in", "field_names", "[", "label", "]", ":", "\n", "                ", "continue", "\n", "", "field_i", "=", "field_names", "[", "label", "]", ".", "index", "(", "field_name", ")", "\n", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "\n", "if", "'val-epoch'", "in", "data", ":", "\n", "                ", "x", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'epoch'", ")", "for", "row", "in", "data", "[", "'val-epoch'", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'head_losses'", ")", "[", "field_i", "]", "\n", "for", "row", "in", "data", "[", "'val-epoch'", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "m", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "ax", ".", "plot", "(", "x", "[", "m", "]", ",", "y", "[", "m", "]", ",", "'o-'", ",", "color", "=", "color", ",", "markersize", "=", "2", ",", "label", "=", "label", ")", "\n", "last_five_y", ".", "append", "(", "y", "[", "m", "]", "[", "-", "5", ":", "]", ")", "\n", "\n", "", "if", "'train-epoch'", "in", "data", ":", "\n", "                ", "x", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'epoch'", ")", "for", "row", "in", "data", "[", "'train-epoch'", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'head_losses'", ")", "[", "field_i", "]", "\n", "for", "row", "in", "data", "[", "'train-epoch'", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "m", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "ax", ".", "plot", "(", "x", "[", "m", "]", ",", "y", "[", "m", "]", ",", "'x-'", ",", "color", "=", "color", ",", "linestyle", "=", "'dotted'", ",", "markersize", "=", "2", ")", "\n", "last_five_y", ".", "append", "(", "y", "[", "m", "]", "[", "-", "5", ":", "]", ")", "\n", "\n", "", "", "if", "not", "last_five_y", ":", "\n", "            ", "return", "\n", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "set_ylabel", "(", "field_name", ")", "\n", "last_five_y", "=", "np", ".", "concatenate", "(", "last_five_y", ")", "\n", "if", "last_five_y", ".", "shape", "[", "0", "]", ":", "\n", "            ", "ax", ".", "set_ylim", "(", "np", ".", "min", "(", "last_five_y", ")", ",", "np", ".", "max", "(", "last_five_y", ")", ")", "\n", "# ax.set_ylim(0.0, 1.0)", "\n", "# if min(y) > -0.1:", "\n", "#     ax.set_yscale('log', nonposy='clip')", "\n", "", "ax", ".", "grid", "(", "linestyle", "=", "'dotted'", ")", "\n", "# ax.legend(loc='upper right')", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.preprocess_time": [[213, 238], ["enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.legend", "zip", "matplotlib.cm.get_cmap", "numpy.array", "numpy.array", "int", "numpy.array", "numpy.stack", "numpy.mean", "numpy.min", "numpy.max", "ax.plot", "ax.fill_between", "ax.plot", "row.get", "len", "len", "row.get", "row.get", "row.get", "row.get", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "preprocess_time", "(", "self", ",", "ax", ")", ":", "\n", "        ", "for", "color_i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "\n", "if", "'train'", "in", "data", ":", "\n", "                ", "x", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'epoch'", ")", "+", "row", ".", "get", "(", "'batch'", ")", "/", "row", ".", "get", "(", "'n_batches'", ")", "\n", "for", "row", "in", "data", "[", "'train'", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'data_time'", ")", "/", "row", ".", "get", "(", "'time'", ")", "*", "100.0", "\n", "for", "row", "in", "data", "[", "'train'", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "stride", "=", "int", "(", "len", "(", "x", ")", "/", "(", "x", "[", "-", "1", "]", "-", "x", "[", "0", "]", ")", "/", "30.0", ")", "# 30 per epoch", "\n", "if", "stride", ">", "5", "and", "len", "(", "x", ")", "/", "stride", ">", "2", ":", "\n", "                    ", "x_binned", "=", "np", ".", "array", "(", "[", "x", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "x", ")", ",", "stride", ")", "]", "[", ":", "-", "1", "]", ")", "\n", "y_binned", "=", "np", ".", "stack", "(", "[", "y", "[", "i", ":", "i", "+", "stride", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "x", ")", ",", "stride", ")", "]", "[", ":", "-", "1", "]", ")", "\n", "y_mean", "=", "np", ".", "mean", "(", "y_binned", ",", "axis", "=", "1", ")", "\n", "y_min", "=", "np", ".", "min", "(", "y_binned", ",", "axis", "=", "1", ")", "\n", "y_max", "=", "np", ".", "max", "(", "y_binned", ",", "axis", "=", "1", ")", "\n", "ax", ".", "plot", "(", "x_binned", ",", "y_mean", ",", "color", "=", "color", ",", "label", "=", "label", ")", "\n", "ax", ".", "fill_between", "(", "x_binned", ",", "y_min", ",", "y_max", ",", "alpha", "=", "0.2", ",", "facecolor", "=", "color", ")", "\n", "", "else", ":", "\n", "                    ", "ax", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "color", ",", "label", "=", "label", ")", "\n", "\n", "", "", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "set_ylabel", "(", "'data preprocessing time [%]'", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "100", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.train": [[239, 269], ["enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.grid", "ax.legend", "zip", "ax.set_yscale", "matplotlib.cm.get_cmap", "collections.defaultdict", "collections.defaultdict.items", "xy_all[].append", "numpy.array", "numpy.array", "min", "logs.optionally_shaded", "numpy.min", "row.get", "row.get", "row.get", "row.get", "row.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.optionally_shaded", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "train", "(", "self", ",", "ax", ")", ":", "\n", "        ", "miny", "=", "0.0", "\n", "for", "color_i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "if", "'train'", "in", "data", ":", "\n", "                ", "xy_all", "=", "defaultdict", "(", "list", ")", "\n", "for", "row", "in", "data", "[", "'train'", "]", ":", "\n", "                    ", "xy_all", "[", "row", ".", "get", "(", "'loss_index'", ",", "0", ")", "]", ".", "append", "(", "\n", "(", "row", ".", "get", "(", "'epoch'", ")", "+", "row", ".", "get", "(", "'batch'", ")", "/", "row", ".", "get", "(", "'n_batches'", ")", ",", "\n", "row", ".", "get", "(", "'loss'", ")", ")", "\n", ")", "\n", "", "for", "loss_index", ",", "xy", "in", "xy_all", ".", "items", "(", ")", ":", "\n", "                    ", "x", "=", "np", ".", "array", "(", "[", "x", "for", "x", ",", "_", "in", "xy", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "y", "for", "_", ",", "y", "in", "xy", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "miny", "=", "min", "(", "miny", ",", "np", ".", "min", "(", "y", ")", ")", "\n", "\n", "kwargs", "=", "{", "}", "\n", "this_label", "=", "label", "\n", "if", "loss_index", "!=", "0", ":", "\n", "                        ", "kwargs", "[", "'alpha'", "]", "=", "0.5", "\n", "this_label", "=", "'{} ({})'", ".", "format", "(", "label", ",", "loss_index", ")", "\n", "", "optionally_shaded", "(", "ax", ",", "x", ",", "y", ",", "color", "=", "color", ",", "label", "=", "this_label", ",", "**", "kwargs", ")", "\n", "\n", "", "", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "set_ylabel", "(", "'training loss'", ")", "\n", "# ax.set_ylim(0, 8)", "\n", "if", "miny", ">", "-", "0.1", ":", "\n", "            ", "ax", ".", "set_yscale", "(", "'log'", ",", "nonposy", "=", "'clip'", ")", "\n", "", "ax", ".", "grid", "(", "linestyle", "=", "'dotted'", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.train_head": [[270, 292], ["logs.Plots.field_names", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.grid", "zip", "field_names[].index", "format", "min", "ax.set_yscale", "matplotlib.cm.get_cmap", "numpy.array", "numpy.array", "numpy.logical_not", "logs.optionally_shaded", "numpy.isnan", "row.get", "row.get", "row.get", "row.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.field_names", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.optionally_shaded", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "train_head", "(", "self", ",", "ax", ",", "field_name", ")", ":", "\n", "        ", "field_names", "=", "self", ".", "field_names", "(", ")", "\n", "for", "color_i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "if", "field_name", "not", "in", "field_names", "[", "label", "]", ":", "\n", "                ", "continue", "\n", "", "field_i", "=", "field_names", "[", "label", "]", ".", "index", "(", "field_name", ")", "\n", "\n", "if", "'train'", "in", "data", ":", "\n", "                ", "x", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'epoch'", ")", "+", "row", ".", "get", "(", "'batch'", ")", "/", "row", ".", "get", "(", "'n_batches'", ")", "\n", "for", "row", "in", "data", "[", "'train'", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'head_losses'", ")", "[", "field_i", "]", "\n", "for", "row", "in", "data", "[", "'train'", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "m", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "optionally_shaded", "(", "ax", ",", "x", "[", "m", "]", ",", "y", "[", "m", "]", ",", "color", "=", "color", ",", "label", "=", "label", ")", "\n", "\n", "", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "set_ylabel", "(", "format", "(", "field_name", ")", ")", "\n", "ax", ".", "set_ylim", "(", "3e-3", ",", "3.0", ")", "\n", "if", "min", "(", "y", ")", ">", "-", "0.1", ":", "\n", "            ", "ax", ".", "set_yscale", "(", "'log'", ",", "nonposy", "=", "'clip'", ")", "\n", "", "ax", ".", "grid", "(", "linestyle", "=", "'dotted'", ")", "\n", "# ax.legend(loc='upper right')", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.mtl_sigma": [[294, 317], ["logs.Plots.field_names", "enumerate", "ax.set_xlabel", "ax.set_ylabel", "ax.set_ylim", "ax.grid", "zip", "field_names[].index", "min", "ax.set_ylim", "ax.set_yscale", "matplotlib.cm.get_cmap", "numpy.array", "numpy.array", "numpy.logical_not", "logs.optionally_shaded", "numpy.isnan", "row.get", "row.get", "row.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.field_names", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.optionally_shaded", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "mtl_sigma", "(", "self", ",", "ax", ",", "field_name", ")", ":", "\n", "        ", "field_names", "=", "self", ".", "field_names", "(", ")", "\n", "for", "color_i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab10'", ")", "(", "(", "color_i", "%", "10", "+", "0.05", ")", "/", "10", ")", "\n", "if", "field_name", "not", "in", "field_names", "[", "label", "]", ":", "\n", "                ", "continue", "\n", "", "field_i", "=", "field_names", "[", "label", "]", ".", "index", "(", "field_name", ")", "\n", "\n", "if", "'train'", "in", "data", ":", "\n", "                ", "x", "=", "np", ".", "array", "(", "[", "row", ".", "get", "(", "'epoch'", ")", "+", "row", ".", "get", "(", "'batch'", ")", "/", "row", ".", "get", "(", "'n_batches'", ")", "\n", "for", "row", "in", "data", "[", "'train'", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "row", "[", "'mtl_sigmas'", "]", "[", "field_i", "]", "if", "'mtl_sigmas'", "in", "row", "else", "np", ".", "nan", "\n", "for", "row", "in", "data", "[", "'train'", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "m", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "optionally_shaded", "(", "ax", ",", "x", "[", "m", "]", ",", "y", "[", "m", "]", ",", "color", "=", "color", ",", "label", "=", "label", ")", "\n", "\n", "", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "set_ylabel", "(", "field_name", ")", "\n", "ax", ".", "set_ylim", "(", "-", "0.1", ",", "1.1", ")", "\n", "if", "min", "(", "y", ")", ">", "-", "0.1", ":", "\n", "            ", "ax", ".", "set_ylim", "(", "3e-3", ",", "3.0", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ",", "nonposy", "=", "'clip'", ")", "\n", "", "ax", ".", "grid", "(", "linestyle", "=", "'dotted'", ")", "\n", "# ax.legend(loc='upper right')", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.print_last_line": [[319, 323], ["zip", "print"], "methods", ["None"], ["", "def", "print_last_line", "(", "self", ")", ":", "\n", "        ", "for", "data", ",", "label", "in", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ":", "\n", "            ", "if", "'train'", "in", "data", ":", "\n", "                ", "print", "(", "'{}: {}'", ".", "format", "(", "label", ",", "data", "[", "'train'", "]", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.show_all": [[324, 381], ["pprint.pprint.pprint", "collections.defaultdict", "logs.Plots.field_names().values", "len", "max", "logs.Plots.print_last_line", "logs.Plots.process_arguments", "show.canvas", "logs.Plots.time", "show.canvas", "logs.Plots.epoch_time", "show.canvas", "logs.Plots.lr", "show.canvas", "enumerate", "show.canvas", "logs.Plots.epoch_loss", "show.canvas", "logs.Plots.preprocess_time", "show.canvas", "enumerate", "show.canvas", "logs.Plots.train", "logs.Plots.field_names", "len", "collections.defaultdict.values", "enumerate", "collections.defaultdict.values", "enumerate", "show.canvas", "enumerate", "f.partition", "rows[].append", "collections.defaultdict.values", "logs.Plots.epoch_head", "logs.Plots.train_head", "collections.defaultdict.values", "enumerate", "logs.Plots.mtl_sigma"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.print_last_line", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.process_arguments", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.epoch_time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.lr", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.epoch_loss", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.preprocess_time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.train", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.field_names", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.epoch_head", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.train_head", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.mtl_sigma"], ["", "", "", "def", "show_all", "(", "self", ",", "*", ",", "share_y", "=", "True", ",", "show_mtl_sigmas", "=", "False", ")", ":", "\n", "        ", "pprint", "(", "self", ".", "process_arguments", "(", ")", ")", "\n", "\n", "rows", "=", "defaultdict", "(", "list", ")", "\n", "for", "field_names", "in", "self", ".", "field_names", "(", ")", ".", "values", "(", ")", ":", "\n", "            ", "for", "f", "in", "field_names", ":", "\n", "                ", "row_name", ",", "_", ",", "_", "=", "f", ".", "partition", "(", "'.'", ")", "if", "'.'", "in", "f", "else", "(", "'default'", ",", "None", ",", "None", ")", "\n", "if", "f", "not", "in", "rows", "[", "row_name", "]", ":", "\n", "                    ", "rows", "[", "row_name", "]", ".", "append", "(", "f", ")", "\n", "", "", "", "n_rows", "=", "len", "(", "rows", ")", "\n", "n_cols", "=", "max", "(", "len", "(", "r", ")", "for", "r", "in", "rows", ".", "values", "(", ")", ")", "\n", "multi_figsize", "=", "(", "5", "*", "n_cols", ",", "2.5", "*", "n_rows", ")", "\n", "# if multi_figsize[0] > 40.0:", "\n", "#     multi_figsize = (40.0, multi_figsize[1] / multi_figsize[0] * 40.0)", "\n", "\n", "with", "show", ".", "canvas", "(", ")", "as", "ax", ":", "\n", "            ", "self", ".", "time", "(", "ax", ")", "\n", "\n", "", "with", "show", ".", "canvas", "(", ")", "as", "ax", ":", "\n", "            ", "self", ".", "epoch_time", "(", "ax", ")", "\n", "\n", "", "with", "show", ".", "canvas", "(", ")", "as", "ax", ":", "\n", "            ", "self", ".", "lr", "(", "ax", ")", "\n", "\n", "", "with", "show", ".", "canvas", "(", "nrows", "=", "n_rows", ",", "ncols", "=", "n_cols", ",", "squeeze", "=", "False", ",", "\n", "dpi", "=", "75", ",", "\n", "figsize", "=", "multi_figsize", ",", "\n", "sharey", "=", "share_y", ",", "sharex", "=", "True", ")", "as", "axs", ":", "\n", "            ", "for", "row_i", ",", "row", "in", "enumerate", "(", "rows", ".", "values", "(", ")", ")", ":", "\n", "                ", "for", "col_i", ",", "field_name", "in", "enumerate", "(", "row", ")", ":", "\n", "                    ", "self", ".", "epoch_head", "(", "axs", "[", "row_i", ",", "col_i", "]", ",", "field_name", ")", "\n", "\n", "", "", "", "with", "show", ".", "canvas", "(", ")", "as", "ax", ":", "\n", "            ", "self", ".", "epoch_loss", "(", "ax", ")", "\n", "\n", "", "with", "show", ".", "canvas", "(", ")", "as", "ax", ":", "\n", "            ", "self", ".", "preprocess_time", "(", "ax", ")", "\n", "\n", "", "with", "show", ".", "canvas", "(", "nrows", "=", "n_rows", ",", "ncols", "=", "n_cols", ",", "squeeze", "=", "False", ",", "\n", "figsize", "=", "multi_figsize", ",", "\n", "sharey", "=", "share_y", ",", "sharex", "=", "True", ")", "as", "axs", ":", "\n", "            ", "for", "row_i", ",", "row", "in", "enumerate", "(", "rows", ".", "values", "(", ")", ")", ":", "\n", "                ", "for", "col_i", ",", "field_name", "in", "enumerate", "(", "row", ")", ":", "\n", "                    ", "self", ".", "train_head", "(", "axs", "[", "row_i", ",", "col_i", "]", ",", "field_name", ")", "\n", "\n", "", "", "", "if", "show_mtl_sigmas", ":", "\n", "            ", "with", "show", ".", "canvas", "(", "nrows", "=", "n_rows", ",", "ncols", "=", "n_cols", ",", "squeeze", "=", "False", ",", "\n", "figsize", "=", "multi_figsize", ",", "\n", "sharey", "=", "share_y", ",", "sharex", "=", "True", ")", "as", "axs", ":", "\n", "                ", "for", "row_i", ",", "row", "in", "enumerate", "(", "rows", ".", "values", "(", ")", ")", ":", "\n", "                    ", "for", "col_i", ",", "field_name", "in", "enumerate", "(", "row", ")", ":", "\n", "                        ", "self", ".", "mtl_sigma", "(", "axs", "[", "row_i", ",", "col_i", "]", ",", "field_name", ")", "\n", "\n", "", "", "", "", "with", "show", ".", "canvas", "(", ")", "as", "ax", ":", "\n", "            ", "self", ".", "train", "(", "ax", ")", "\n", "\n", "", "self", ".", "print_last_line", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.__init__": [[384, 395], ["logs.EvalPlots.read_log", "lf.replace"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.read_log"], ["    ", "def", "__init__", "(", "self", ",", "log_files", ",", "labels", "=", "None", ",", "output_prefix", "=", "None", ",", "\n", "edge", "=", "321", ",", "decoder", "=", "0", ",", "legend_last_ap", "=", "True", ",", "\n", "modifiers", "=", "''", ")", ":", "\n", "        ", "self", ".", "edge", "=", "edge", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "legend_last_ap", "=", "legend_last_ap", "\n", "self", ".", "modifiers", "=", "modifiers", "\n", "\n", "self", ".", "datas", "=", "[", "self", ".", "read_log", "(", "f", ")", "for", "f", "in", "log_files", "]", "\n", "self", ".", "labels", "=", "labels", "or", "[", "lf", ".", "replace", "(", "'outputs/'", ",", "''", ")", "for", "lf", "in", "log_files", "]", "\n", "self", ".", "output_prefix", "=", "output_prefix", "or", "log_files", "[", "-", "1", "]", "+", "'.'", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.read_log": [[396, 420], ["pysparkling.Context", "path.split", "pysparkling.Context.wholeTextFiles().map().filter().sortByKey().collect", "filename.find", "int", "pysparkling.Context.wholeTextFiles().map().filter().sortByKey", "pysparkling.Context.wholeTextFiles().map().filter", "pysparkling.Context.wholeTextFiles().map", "len", "pysparkling.Context.wholeTextFiles", "logs.EvalPlots.read_log.epoch_from_filename"], "methods", ["None"], ["", "def", "read_log", "(", "self", ",", "path", ")", ":", "\n", "        ", "sc", "=", "pysparkling", ".", "Context", "(", ")", "\n", "\n", "# modify individual file names and comma-seperated filenames", "\n", "files", "=", "path", ".", "split", "(", "','", ")", "\n", "files", "=", "','", ".", "join", "(", "\n", "[", "\n", "'{}.epoch???.evalcoco-edge{}{}.stats.json'", "\n", "''", ".", "format", "(", "f", "[", ":", "-", "4", "]", ",", "self", ".", "edge", ",", "self", ".", "modifiers", ")", "\n", "for", "f", "in", "files", "\n", "]", "\n", ")", "\n", "\n", "def", "epoch_from_filename", "(", "filename", ")", ":", "\n", "            ", "i", "=", "filename", ".", "find", "(", "'epoch'", ")", "\n", "return", "int", "(", "filename", "[", "i", "+", "5", ":", "i", "+", "8", "]", ")", "\n", "\n", "", "return", "(", "sc", "\n", ".", "wholeTextFiles", "(", "files", ")", "\n", ".", "map", "(", "lambda", "k_c", ":", "(", "\n", "epoch_from_filename", "(", "k_c", "[", "0", "]", ")", ",", "\n", "json", ".", "loads", "(", "k_c", "[", "1", "]", ")", ",", "\n", ")", ")", "\n", ".", "filter", "(", "lambda", "k_c", ":", "len", "(", "k_c", "[", "1", "]", "[", "'stats'", "]", ")", "==", "10", ")", "\n", ".", "sortByKey", "(", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats": [[423, 436], ["zip", "ax.set_xlabel", "ax.grid", "numpy.array", "numpy.array", "ax.plot"], "methods", ["None"], ["", "def", "frame_stats", "(", "self", ",", "ax", ",", "entry", ")", ":", "\n", "        ", "for", "data", ",", "label", "in", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ":", "\n", "            ", "if", "not", "data", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "legend_last_ap", ":", "\n", "                ", "last_ap", "=", "data", "[", "-", "1", "]", "[", "1", "]", "[", "'stats'", "]", "[", "0", "]", "\n", "label", "=", "'{} (AP={:.1%})'", ".", "format", "(", "label", ",", "last_ap", ")", "\n", "", "x", "=", "np", ".", "array", "(", "[", "e", "for", "e", ",", "_", "in", "data", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "d", "[", "'stats'", "]", "[", "entry", "]", "for", "_", ",", "d", "in", "data", "]", ")", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "'o-'", ",", "label", "=", "label", ",", "markersize", "=", "2", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'epoch'", ")", "\n", "ax", ".", "grid", "(", "linestyle", "=", "'dotted'", ")", "\n", "# ax.legend(loc='upper right')", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_ops": [[438, 463], ["zip", "ax.set_ylim", "ax.set_xlabel", "ax.set_ylabel", "ax.grid", "ax.plot", "ax.annotate", "numpy.array", "numpy.array", "len", "label.split", "d.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "frame_ops", "(", "self", ",", "ax", ",", "entry", ")", ":", "\n", "        ", "assert", "entry", "in", "(", "0", ",", "1", ")", "\n", "\n", "s", "=", "1e9", "if", "entry", "==", "0", "else", "1e6", "\n", "for", "data", ",", "label", "in", "zip", "(", "self", ".", "datas", ",", "self", ".", "labels", ")", ":", "\n", "            ", "if", "not", "data", ":", "\n", "                ", "continue", "\n", "", "x", "=", "np", ".", "array", "(", "[", "d", ".", "get", "(", "'count_ops'", ",", "[", "0", ",", "0", "]", ")", "[", "entry", "]", "/", "s", "for", "_", ",", "d", "in", "data", "]", ")", "[", "-", "1", "]", "\n", "if", "x", "==", "0.0", ":", "\n", "                ", "continue", "\n", "", "y", "=", "np", ".", "array", "(", "[", "d", "[", "'stats'", "]", "[", "0", "]", "for", "_", ",", "d", "in", "data", "]", ")", "[", "-", "1", "]", "\n", "ax", ".", "plot", "(", "[", "x", "]", ",", "[", "y", "]", ",", "'o'", ",", "label", "=", "label", ",", "markersize", "=", "10", ")", "\n", "ax", ".", "annotate", "(", "\n", "label", "if", "len", "(", "label", ")", "<", "20", "else", "label", ".", "split", "(", "'-'", ")", "[", "0", "]", ",", "\n", "(", "x", ",", "y", ")", ",", "\n", "xytext", "=", "(", "0.0", ",", "-", "5.0", ")", ",", "\n", "textcoords", "=", "'offset points'", ",", "\n", "rotation", "=", "90", ",", "\n", "horizontalalignment", "=", "'center'", ",", "verticalalignment", "=", "'top'", ",", "\n", ")", "\n", "\n", "", "ax", ".", "set_ylim", "(", "bottom", "=", "0.56", ")", "\n", "ax", ".", "set_xlabel", "(", "'GMACs'", "if", "entry", "==", "0", "else", "'million parameters'", ")", "\n", "ax", ".", "set_ylabel", "(", "'AP'", ")", "\n", "ax", ".", "grid", "(", "linestyle", "=", "'dotted'", ")", "\n", "# ax.legend(loc='lower right')", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.ap": [[465, 468], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "ap", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "0", ")", "\n", "ax", ".", "set_ylabel", "(", "'AP'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.ap050": [[469, 472], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "ap050", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "1", ")", "\n", "ax", ".", "set_ylabel", "(", "'AP$^{0.50}$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.ap075": [[473, 476], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "ap075", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "2", ")", "\n", "ax", ".", "set_ylabel", "(", "'AP$^{0.75}$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.apm": [[477, 480], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "apm", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "3", ")", "\n", "ax", ".", "set_ylabel", "(", "'AP$^{M}$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.apl": [[481, 484], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "apl", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "4", ")", "\n", "ax", ".", "set_ylabel", "(", "'AP$^{L}$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.ar": [[485, 488], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "ar", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "5", ")", "\n", "ax", ".", "set_ylabel", "(", "'AR'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.ar050": [[489, 492], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "ar050", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "6", ")", "\n", "ax", ".", "set_ylabel", "(", "'AR$^{0.50}$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.ar075": [[493, 496], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "ar075", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "7", ")", "\n", "ax", ".", "set_ylabel", "(", "'AR$^{0.75}$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.arm": [[497, 500], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "arm", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "8", ")", "\n", "ax", ".", "set_ylabel", "(", "'AR$^{M}$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.arl": [[501, 504], ["logs.EvalPlots.frame_stats", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_stats"], ["", "def", "arl", "(", "self", ",", "ax", ")", ":", "\n", "        ", "self", ".", "frame_stats", "(", "ax", ",", "entry", "=", "9", ")", "\n", "ax", ".", "set_ylabel", "(", "'AR$^{L}$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.fill_all": [[505, 513], ["zip", "zip", "f", "f"], "methods", ["None"], ["", "def", "fill_all", "(", "self", ",", "axs", ")", ":", "\n", "        ", "for", "f", ",", "ax", "in", "zip", "(", "(", "self", ".", "ap", ",", "self", ".", "ap050", ",", "self", ".", "ap075", ",", "self", ".", "apm", ",", "self", ".", "apl", ")", ",", "axs", "[", "0", "]", ")", ":", "\n", "            ", "f", "(", "ax", ")", "\n", "\n", "", "for", "f", ",", "ax", "in", "zip", "(", "(", "self", ".", "ar", ",", "self", ".", "ar050", ",", "self", ".", "ar075", ",", "self", ".", "arm", ",", "self", ".", "arl", ")", ",", "axs", "[", "1", "]", ")", ":", "\n", "            ", "f", "(", "ax", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.show_all": [[514, 524], ["show.canvas", "logs.EvalPlots.fill_all", "axs[].legend", "show.canvas", "logs.EvalPlots.frame_ops", "logs.EvalPlots.frame_ops"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.fill_all", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_ops", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.frame_ops"], ["", "def", "show_all", "(", "self", ",", "*", ",", "share_y", "=", "True", ")", ":", "\n", "        ", "with", "show", ".", "canvas", "(", "nrows", "=", "2", ",", "ncols", "=", "5", ",", "figsize", "=", "(", "20", ",", "10", ")", ",", "\n", "sharex", "=", "True", ",", "sharey", "=", "share_y", ")", "as", "axs", ":", "\n", "            ", "self", ".", "fill_all", "(", "axs", ")", "\n", "axs", "[", "0", ",", "4", "]", ".", "legend", "(", "fontsize", "=", "5", ",", "loc", "=", "'lower right'", ")", "\n", "\n", "", "with", "show", ".", "canvas", "(", "nrows", "=", "1", ",", "ncols", "=", "2", ",", "figsize", "=", "(", "10", ",", "5", ")", ",", "\n", "sharey", "=", "share_y", ")", "as", "axs", ":", "\n", "            ", "self", ".", "frame_ops", "(", "axs", "[", "0", "]", ",", "0", ")", "\n", "self", ".", "frame_ops", "(", "axs", "[", "1", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.cli": [[25, 29], ["parser.add_argument_group", "parser.add_argument_group.add_argument"], "function", ["None"], ["def", "cli", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.configure": [[31, 50], ["logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.basicConfig", "logging.getLogger().setLevel", "LOG.info", "jsonlogger.JsonFormatter", "logging.getLogger", "vars", "socket.gethostname"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "configure", "(", "args", ")", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "    ", "from", "pythonjsonlogger", "import", "jsonlogger", "\n", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "args", ".", "output", "+", "'.log'", ",", "mode", "=", "'w'", ")", "\n", "file_handler", ".", "setFormatter", "(", "\n", "jsonlogger", ".", "JsonFormatter", "(", "'(message) (levelname) (name) (asctime)'", ")", ")", "\n", "stdout_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stdout_handler", ",", "file_handler", "]", ")", "\n", "log_level", "=", "logging", ".", "INFO", "if", "not", "args", ".", "debug", "else", "logging", ".", "DEBUG", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "LOG", ".", "info", "(", "{", "\n", "'type'", ":", "'process'", ",", "\n", "'argv'", ":", "sys", ".", "argv", ",", "\n", "'args'", ":", "vars", "(", "args", ")", ",", "\n", "'version'", ":", "__version__", ",", "\n", "'hostname'", ":", "socket", ".", "gethostname", "(", ")", ",", "\n", "}", ")", "\n", "return", "log_level", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.optionally_shaded": [[52, 64], ["int", "numpy.array", "numpy.stack", "numpy.mean", "numpy.min", "numpy.max", "ax.plot", "ax.fill_between", "ax.plot", "len", "len", "len", "range", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "optionally_shaded", "(", "ax", ",", "x", ",", "y", ",", "*", ",", "color", ",", "label", ",", "**", "kwargs", ")", ":", "\n", "    ", "stride", "=", "int", "(", "len", "(", "x", ")", "/", "(", "x", "[", "-", "1", "]", "-", "x", "[", "0", "]", ")", "/", "30.0", ")", "if", "len", "(", "x", ")", ">", "30", "else", "1", "# 30 per epoch", "\n", "if", "stride", ">", "5", "and", "len", "(", "x", ")", "/", "stride", ">", "2", ":", "\n", "        ", "x_binned", "=", "np", ".", "array", "(", "[", "x", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "x", ")", ",", "stride", ")", "]", "[", ":", "-", "1", "]", ")", "\n", "y_binned", "=", "np", ".", "stack", "(", "[", "y", "[", "i", ":", "i", "+", "stride", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "x", ")", ",", "stride", ")", "]", "[", ":", "-", "1", "]", ")", "\n", "y_mean", "=", "np", ".", "mean", "(", "y_binned", ",", "axis", "=", "1", ")", "\n", "y_min", "=", "np", ".", "min", "(", "y_binned", ",", "axis", "=", "1", ")", "\n", "y_max", "=", "np", ".", "max", "(", "y_binned", ",", "axis", "=", "1", ")", "\n", "ax", ".", "plot", "(", "x_binned", ",", "y_mean", ",", "color", "=", "color", ",", "label", "=", "label", ",", "**", "kwargs", ")", "\n", "ax", ".", "fill_between", "(", "x_binned", ",", "y_min", ",", "y_max", ",", "alpha", "=", "0.2", ",", "facecolor", "=", "color", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "color", ",", "label", "=", "label", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.main": [[526, 558], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logs.EvalPlots.show_all", "logs.EvalPlots.show_all", "logs.Plots.show_all", "logs.EvalPlots", "logs.EvalPlots", "logs.Plots"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.show_all", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.show_all", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.EvalPlots.show_all"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.logs'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'log_file'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'path to log file'", ")", "\n", "parser", ".", "add_argument", "(", "'--label'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'labels in the same order as files'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-edge'", ",", "default", "=", "593", ",", "type", "=", "int", ",", "\n", "help", "=", "'side length during eval'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-share-y'", ",", "dest", "=", "'share_y'", ",", "\n", "default", "=", "True", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'dont share y access'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output prefix (default is log_file + .)'", ")", "\n", "parser", ".", "add_argument", "(", "'--show-mtl-sigmas'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "args", ".", "output", "=", "args", ".", "log_file", "[", "-", "1", "]", "+", "'.'", "\n", "\n", "", "EvalPlots", "(", "args", ".", "log_file", ",", "args", ".", "label", ",", "args", ".", "output", ",", "\n", "edge", "=", "args", ".", "eval_edge", ")", ".", "show_all", "(", "share_y", "=", "args", ".", "share_y", ")", "\n", "EvalPlots", "(", "args", ".", "log_file", ",", "args", ".", "label", ",", "args", ".", "output", ",", "\n", "edge", "=", "args", ".", "eval_edge", ",", "modifiers", "=", "'-os'", ")", ".", "show_all", "(", "share_y", "=", "args", ".", "share_y", ")", "\n", "Plots", "(", "args", ".", "log_file", ",", "args", ".", "label", ",", "args", ".", "output", ")", ".", "show_all", "(", "\n", "share_y", "=", "args", ".", "share_y", ",", "show_mtl_sigmas", "=", "args", ".", "show_mtl_sigmas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.GetPif.forward": [[30, 32], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "heads", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "return", "heads", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.GetPifC.forward": [[35, 37], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "heads", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "return", "heads", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply": [[39, 74], ["torch.randn", "torch.onnx.export"], "function", ["None"], ["", "", "def", "apply", "(", "model", ",", "outfile", ",", "verbose", "=", "True", ")", ":", "\n", "# dummy_input = torch.randn(1, 3, 193, 257)", "\n", "    ", "dummy_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "97", ",", "129", ")", "\n", "# model = torch.nn.Sequential(model, GetPifC())", "\n", "\n", "# Providing input and output names sets the display names for values", "\n", "# within the model's graph. Setting these does not change the semantics", "\n", "# of the graph; it is only for readability.", "\n", "#", "\n", "# The inputs to the network consist of the flat list of inputs (i.e.", "\n", "# the values you would pass to the forward() method) followed by the", "\n", "# flat list of parameters. You can partially specify names, i.e. provide", "\n", "# a list here shorter than the number of inputs to the model, and we will", "\n", "# only set that subset of names, starting from the beginning.", "\n", "input_names", "=", "[", "'input_batch'", "]", "\n", "# output_names = [", "\n", "#     'pif_c',", "\n", "#     'pif_r',", "\n", "#     'pif_b',", "\n", "#     'pif_s',", "\n", "#     'paf_c',", "\n", "#     'paf_r1',", "\n", "#     'paf_r2',", "\n", "#     'paf_b1',", "\n", "#     'paf_b2',", "\n", "# ]", "\n", "output_names", "=", "[", "'cif'", ",", "'caf'", "]", "\n", "\n", "torch", ".", "onnx", ".", "export", "(", "\n", "model", ",", "dummy_input", ",", "outfile", ",", "verbose", "=", "verbose", ",", "\n", "input_names", "=", "input_names", ",", "output_names", "=", "output_names", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "# opset_version=10,", "\n", "do_constant_folding", "=", "True", ",", "\n", "export_params", "=", "True", ",", "\n", "# dynamic_axes={  # TODO: gives warnings", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.optimize": [[90, 100], ["onnx.load", "onnx.optimizer.optimize", "onnx.save", "infile.replace.endswith", "infile.replace.replace", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.optimize"], ["", "def", "optimize", "(", "infile", ",", "outfile", "=", "None", ")", ":", "\n", "    ", "if", "outfile", "is", "None", ":", "\n", "        ", "assert", "infile", ".", "endswith", "(", "'.onnx'", ")", "\n", "outfile", "=", "infile", "\n", "infile", "=", "infile", ".", "replace", "(", "'.onnx'", ",", "'.unoptimized.onnx'", ")", "\n", "shutil", ".", "copyfile", "(", "outfile", ",", "infile", ")", "\n", "\n", "", "model", "=", "onnx", ".", "load", "(", "infile", ")", "\n", "optimized_model", "=", "onnx", ".", "optimizer", ".", "optimize", "(", "model", ")", "\n", "onnx", ".", "save", "(", "optimized_model", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.check": [[102, 105], ["onnx.load", "onnx.checker.check_model"], "function", ["None"], ["", "def", "check", "(", "modelfile", ")", ":", "\n", "    ", "model", "=", "onnx", ".", "load", "(", "modelfile", ")", "\n", "onnx", ".", "checker", ".", "check_model", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.polish": [[107, 117], ["onnx.load", "onnx.utils.polish_model", "onnx.save", "infile.replace.endswith", "infile.replace.replace", "shutil.copyfile"], "function", ["None"], ["", "def", "polish", "(", "infile", ",", "outfile", "=", "None", ")", ":", "\n", "    ", "if", "outfile", "is", "None", ":", "\n", "        ", "assert", "infile", ".", "endswith", "(", "'.onnx'", ")", "\n", "outfile", "=", "infile", "\n", "infile", "=", "infile", ".", "replace", "(", "'.onnx'", ",", "'.unpolished.onnx'", ")", "\n", "shutil", ".", "copyfile", "(", "outfile", ",", "infile", ")", "\n", "\n", "", "model", "=", "onnx", ".", "load", "(", "infile", ")", "\n", "polished_model", "=", "onnx", ".", "utils", ".", "polish_model", "(", "model", ")", "\n", "onnx", ".", "save", "(", "polished_model", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.simplify": [[119, 129], ["onnxsim.simplify", "onnx.save", "infile.replace.endswith", "infile.replace.replace", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.simplify"], ["", "def", "simplify", "(", "infile", ",", "outfile", "=", "None", ")", ":", "\n", "    ", "if", "outfile", "is", "None", ":", "\n", "        ", "assert", "infile", ".", "endswith", "(", "'.onnx'", ")", "\n", "outfile", "=", "infile", "\n", "infile", "=", "infile", ".", "replace", "(", "'.onnx'", ",", "'.unsimplified.onnx'", ")", "\n", "shutil", ".", "copyfile", "(", "outfile", ",", "infile", ")", "\n", "\n", "", "simplified_model", ",", "check_ok", "=", "onnxsim", ".", "simplify", "(", "infile", ",", "check_n", "=", "3", ",", "perform_optimization", "=", "False", ")", "\n", "assert", "check_ok", "\n", "onnx", ".", "save", "(", "simplified_model", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.main": [[136, 164], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "openpifpaf.network.factory", "export_onnx.apply", "export_onnx.simplify", "export_onnx.optimize", "export_onnx.polish", "export_onnx.check"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.simplify", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.optimize", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.polish", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.check"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.export_onnx'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "openpifpaf", ".", "__version__", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "default", "=", "'resnet50'", ")", "\n", "parser", ".", "add_argument", "(", "'--outfile'", ",", "default", "=", "'openpifpaf-resnet50.onnx'", ")", "\n", "parser", ".", "add_argument", "(", "'--simplify'", ",", "dest", "=", "'simplify'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--polish'", ",", "dest", "=", "'polish'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'runs checker, optimizer and shape inference'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimize'", ",", "dest", "=", "'optimize'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--check'", ",", "dest", "=", "'check'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "model", ",", "_", "=", "openpifpaf", ".", "network", ".", "factory", "(", "checkpoint", "=", "args", ".", "checkpoint", ")", "\n", "apply", "(", "model", ",", "args", ".", "outfile", ")", "\n", "if", "args", ".", "simplify", ":", "\n", "        ", "simplify", "(", "args", ".", "outfile", ")", "\n", "", "if", "args", ".", "optimize", ":", "\n", "        ", "optimize", "(", "args", ".", "outfile", ")", "\n", "", "if", "args", ".", "polish", ":", "\n", "        ", "polish", "(", "args", ".", "outfile", ")", "\n", "", "if", "args", ".", "check", ":", "\n", "        ", "check", "(", "args", ".", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.get_keywords": [[22, 33], ["None"], "function", ["None"], ["def", "get_keywords", "(", ")", ":", "\n", "    ", "\"\"\"Get the keywords needed to look up the version information.\"\"\"", "\n", "# these strings will be replaced by git during git-archive.", "\n", "# setup.py/versioneer.py will grep for the variable names, so they must", "\n", "# each be defined on a line of their own. _version.py will just call", "\n", "# get_keywords().", "\n", "git_refnames", "=", "\"$Format:%d$\"", "\n", "git_full", "=", "\"$Format:%H$\"", "\n", "git_date", "=", "\"$Format:%ci$\"", "\n", "keywords", "=", "{", "\"refnames\"", ":", "git_refnames", ",", "\"full\"", ":", "git_full", ",", "\"date\"", ":", "git_date", "}", "\n", "return", "keywords", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.get_config": [[39, 51], ["_version.VersioneerConfig"], "function", ["None"], ["", "def", "get_config", "(", ")", ":", "\n", "    ", "\"\"\"Create, populate and return the VersioneerConfig() object.\"\"\"", "\n", "# these strings are filled in when 'setup.py versioneer' creates", "\n", "# _version.py", "\n", "cfg", "=", "VersioneerConfig", "(", ")", "\n", "cfg", ".", "VCS", "=", "\"git\"", "\n", "cfg", ".", "style", "=", "\"pep440\"", "\n", "cfg", ".", "tag_prefix", "=", "\"v\"", "\n", "cfg", ".", "parentdir_prefix", "=", "\"None\"", "\n", "cfg", ".", "versionfile_source", "=", "\"openpifpaf/_version.py\"", "\n", "cfg", ".", "verbose", "=", "False", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.register_vcs_handler": [[61, 70], ["None"], "function", ["None"], ["def", "register_vcs_handler", "(", "vcs", ",", "method", ")", ":", "# decorator", "\n", "    ", "\"\"\"Decorator to mark a method as the handler for a particular VCS.\"\"\"", "\n", "def", "decorate", "(", "f", ")", ":", "\n", "        ", "\"\"\"Store f in HANDLERS[vcs][method].\"\"\"", "\n", "if", "vcs", "not", "in", "HANDLERS", ":", "\n", "            ", "HANDLERS", "[", "vcs", "]", "=", "{", "}", "\n", "", "HANDLERS", "[", "vcs", "]", "[", "method", "]", "=", "f", "\n", "return", "f", "\n", "", "return", "decorate", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.run_command": [[72, 107], ["isinstance", "[].strip", "stdout.decode.decode", "str", "subprocess.Popen", "print", "print", "print", "subprocess.Popen.communicate", "sys.exc_info", "print", "print"], "function", ["None"], ["", "def", "run_command", "(", "commands", ",", "args", ",", "cwd", "=", "None", ",", "verbose", "=", "False", ",", "hide_stderr", "=", "False", ",", "\n", "env", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call the given command(s).\"\"\"", "\n", "assert", "isinstance", "(", "commands", ",", "list", ")", "\n", "p", "=", "None", "\n", "for", "c", "in", "commands", ":", "\n", "        ", "try", ":", "\n", "            ", "dispcmd", "=", "str", "(", "[", "c", "]", "+", "args", ")", "\n", "# remember shell=False, so use git.cmd on windows, not just git", "\n", "p", "=", "subprocess", ".", "Popen", "(", "[", "c", "]", "+", "args", ",", "cwd", "=", "cwd", ",", "env", "=", "env", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ",", "\n", "stderr", "=", "(", "subprocess", ".", "PIPE", "if", "hide_stderr", "\n", "else", "None", ")", ")", "\n", "break", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "e", "=", "sys", ".", "exc_info", "(", ")", "[", "1", "]", "\n", "if", "e", ".", "errno", "==", "errno", ".", "ENOENT", ":", "\n", "                ", "continue", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "\"unable to run %s\"", "%", "dispcmd", ")", "\n", "print", "(", "e", ")", "\n", "", "return", "None", ",", "None", "\n", "", "", "else", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"unable to find command, tried %s\"", "%", "(", "commands", ",", ")", ")", "\n", "", "return", "None", ",", "None", "\n", "", "stdout", "=", "p", ".", "communicate", "(", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", ">=", "3", ":", "\n", "        ", "stdout", "=", "stdout", ".", "decode", "(", ")", "\n", "", "if", "p", ".", "returncode", "!=", "0", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"unable to run %s (error)\"", "%", "dispcmd", ")", "\n", "print", "(", "\"stdout was %s\"", "%", "stdout", ")", "\n", "", "return", "None", ",", "p", ".", "returncode", "\n", "", "return", "stdout", ",", "p", ".", "returncode", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.versions_from_parentdir": [[109, 132], ["range", "_version.NotThisMethod", "os.path.basename", "os.path.basename.startswith", "print", "rootdirs.append", "os.path.dirname", "str", "len"], "function", ["None"], ["", "def", "versions_from_parentdir", "(", "parentdir_prefix", ",", "root", ",", "verbose", ")", ":", "\n", "    ", "\"\"\"Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    \"\"\"", "\n", "rootdirs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "basename", "(", "root", ")", "\n", "if", "dirname", ".", "startswith", "(", "parentdir_prefix", ")", ":", "\n", "            ", "return", "{", "\"version\"", ":", "dirname", "[", "len", "(", "parentdir_prefix", ")", ":", "]", ",", "\n", "\"full-revisionid\"", ":", "None", ",", "\n", "\"dirty\"", ":", "False", ",", "\"error\"", ":", "None", ",", "\"date\"", ":", "None", "}", "\n", "", "else", ":", "\n", "            ", "rootdirs", ".", "append", "(", "root", ")", "\n", "root", "=", "os", ".", "path", ".", "dirname", "(", "root", ")", "# up a level", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Tried directories %s but none started with prefix %s\"", "%", "\n", "(", "str", "(", "rootdirs", ")", ",", "parentdir_prefix", ")", ")", "\n", "", "raise", "NotThisMethod", "(", "\"rootdir doesn't start with parentdir_prefix\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.git_get_keywords": [[134, 161], ["_version.register_vcs_handler", "open", "open.readlines", "open.close", "line.strip().startswith", "line.strip().startswith", "line.strip().startswith", "re.search", "re.search", "re.search", "line.strip", "re.search.group", "line.strip", "re.search.group", "line.strip", "re.search.group"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.register_vcs_handler"], ["", "@", "register_vcs_handler", "(", "\"git\"", ",", "\"get_keywords\"", ")", "\n", "def", "git_get_keywords", "(", "versionfile_abs", ")", ":", "\n", "    ", "\"\"\"Extract version information from the given file.\"\"\"", "\n", "# the code embedded in _version.py can just fetch the value of these", "\n", "# keywords. When used from setup.py, we don't want to import _version.py,", "\n", "# so we do it with a regexp instead. This function is not used from", "\n", "# _version.py.", "\n", "keywords", "=", "{", "}", "\n", "try", ":", "\n", "        ", "f", "=", "open", "(", "versionfile_abs", ",", "\"r\"", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "line", ".", "strip", "(", ")", ".", "startswith", "(", "\"git_refnames =\"", ")", ":", "\n", "                ", "mo", "=", "re", ".", "search", "(", "r'=\\s*\"(.*)\"'", ",", "line", ")", "\n", "if", "mo", ":", "\n", "                    ", "keywords", "[", "\"refnames\"", "]", "=", "mo", ".", "group", "(", "1", ")", "\n", "", "", "if", "line", ".", "strip", "(", ")", ".", "startswith", "(", "\"git_full =\"", ")", ":", "\n", "                ", "mo", "=", "re", ".", "search", "(", "r'=\\s*\"(.*)\"'", ",", "line", ")", "\n", "if", "mo", ":", "\n", "                    ", "keywords", "[", "\"full\"", "]", "=", "mo", ".", "group", "(", "1", ")", "\n", "", "", "if", "line", ".", "strip", "(", ")", ".", "startswith", "(", "\"git_date =\"", ")", ":", "\n", "                ", "mo", "=", "re", ".", "search", "(", "r'=\\s*\"(.*)\"'", ",", "line", ")", "\n", "if", "mo", ":", "\n", "                    ", "keywords", "[", "\"date\"", "]", "=", "mo", ".", "group", "(", "1", ")", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "        ", "pass", "\n", "", "return", "keywords", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.git_versions_from_keywords": [[163, 216], ["_version.register_vcs_handler", "keywords.get", "keywords[].strip", "keywords[].strip.startswith", "set", "set", "sorted", "_version.NotThisMethod", "date.strip().replace().replace.strip().replace().replace", "_version.NotThisMethod", "set", "print", "ref.startswith", "print", "keywords[].strip", "print", "r.strip", "print", "date.strip().replace().replace.strip().replace", "keywords[].strip.strip().split", "r.startswith", "print", "keywords[].strip", "len", "re.search", "sorted", "len", "date.strip().replace().replace.strip", "keywords[].strip.strip"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.register_vcs_handler", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["", "@", "register_vcs_handler", "(", "\"git\"", ",", "\"keywords\"", ")", "\n", "def", "git_versions_from_keywords", "(", "keywords", ",", "tag_prefix", ",", "verbose", ")", ":", "\n", "    ", "\"\"\"Get version information from git keywords.\"\"\"", "\n", "if", "not", "keywords", ":", "\n", "        ", "raise", "NotThisMethod", "(", "\"no keywords at all, weird\"", ")", "\n", "", "date", "=", "keywords", ".", "get", "(", "\"date\"", ")", "\n", "if", "date", "is", "not", "None", ":", "\n", "# git-2.2.0 added \"%cI\", which expands to an ISO-8601 -compliant", "\n", "# datestamp. However we prefer \"%ci\" (which expands to an \"ISO-8601", "\n", "# -like\" string, which we must then edit to make compliant), because", "\n", "# it's been around since git-1.5.3, and it's too difficult to", "\n", "# discover which version we're using, or to work around using an", "\n", "# older one.", "\n", "        ", "date", "=", "date", ".", "strip", "(", ")", ".", "replace", "(", "\" \"", ",", "\"T\"", ",", "1", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ",", "1", ")", "\n", "", "refnames", "=", "keywords", "[", "\"refnames\"", "]", ".", "strip", "(", ")", "\n", "if", "refnames", ".", "startswith", "(", "\"$Format\"", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"keywords are unexpanded, not using\"", ")", "\n", "", "raise", "NotThisMethod", "(", "\"unexpanded keywords, not a git-archive tarball\"", ")", "\n", "", "refs", "=", "set", "(", "[", "r", ".", "strip", "(", ")", "for", "r", "in", "refnames", ".", "strip", "(", "\"()\"", ")", ".", "split", "(", "\",\"", ")", "]", ")", "\n", "# starting in git-1.8.3, tags are listed as \"tag: foo-1.0\" instead of", "\n", "# just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.", "\n", "TAG", "=", "\"tag: \"", "\n", "tags", "=", "set", "(", "[", "r", "[", "len", "(", "TAG", ")", ":", "]", "for", "r", "in", "refs", "if", "r", ".", "startswith", "(", "TAG", ")", "]", ")", "\n", "if", "not", "tags", ":", "\n", "# Either we're using git < 1.8.3, or there really are no tags. We use", "\n", "# a heuristic: assume all version tags have a digit. The old git %d", "\n", "# expansion behaves like git log --decorate=short and strips out the", "\n", "# refs/heads/ and refs/tags/ prefixes that would let us distinguish", "\n", "# between branches and tags. By ignoring refnames without digits, we", "\n", "# filter out many common branch names like \"release\" and", "\n", "# \"stabilization\", as well as \"HEAD\" and \"master\".", "\n", "        ", "tags", "=", "set", "(", "[", "r", "for", "r", "in", "refs", "if", "re", ".", "search", "(", "r'\\d'", ",", "r", ")", "]", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"discarding '%s', no digits\"", "%", "\",\"", ".", "join", "(", "refs", "-", "tags", ")", ")", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"likely tags: %s\"", "%", "\",\"", ".", "join", "(", "sorted", "(", "tags", ")", ")", ")", "\n", "", "for", "ref", "in", "sorted", "(", "tags", ")", ":", "\n", "# sorting will prefer e.g. \"2.0\" over \"2.0rc1\"", "\n", "        ", "if", "ref", ".", "startswith", "(", "tag_prefix", ")", ":", "\n", "            ", "r", "=", "ref", "[", "len", "(", "tag_prefix", ")", ":", "]", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"picking %s\"", "%", "r", ")", "\n", "", "return", "{", "\"version\"", ":", "r", ",", "\n", "\"full-revisionid\"", ":", "keywords", "[", "\"full\"", "]", ".", "strip", "(", ")", ",", "\n", "\"dirty\"", ":", "False", ",", "\"error\"", ":", "None", ",", "\n", "\"date\"", ":", "date", "}", "\n", "# no suitable tags, so version is \"0+unknown\", but full hex is still there", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"no suitable tags, using unknown + full revision id\"", ")", "\n", "", "return", "{", "\"version\"", ":", "\"0+unknown\"", ",", "\n", "\"full-revisionid\"", ":", "keywords", "[", "\"full\"", "]", ".", "strip", "(", ")", ",", "\n", "\"dirty\"", ":", "False", ",", "\"error\"", ":", "\"no suitable tags\"", ",", "\"date\"", ":", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.git_pieces_from_vcs": [[218, 308], ["_version.register_vcs_handler", "_version.run_command", "_version.run_command", "describe_out.strip.strip", "_version.run_command", "full_out.strip.strip", "git_describe.endswith", "[].strip", "[].strip.strip().replace().replace", "_version.NotThisMethod", "_version.NotThisMethod", "_version.NotThisMethod", "re.search", "re.search.group", "int", "re.search.group", "_version.run_command", "int", "print", "mo.group.startswith", "re.search.group", "[].strip.strip().replace", "git_describe.rindex", "print", "len", "_version.run_command", "[].strip.strip"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.register_vcs_handler", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.run_command", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.run_command", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.run_command", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.run_command", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.run_command"], ["", "@", "register_vcs_handler", "(", "\"git\"", ",", "\"pieces_from_vcs\"", ")", "\n", "def", "git_pieces_from_vcs", "(", "tag_prefix", ",", "root", ",", "verbose", ",", "run_command", "=", "run_command", ")", ":", "\n", "    ", "\"\"\"Get version from 'git describe' in the root of the source tree.\n\n    This only gets called if the git-archive 'subst' keywords were *not*\n    expanded, and _version.py hasn't already been rewritten with a short\n    version string, meaning we're inside a checked out source tree.\n    \"\"\"", "\n", "GITS", "=", "[", "\"git\"", "]", "\n", "if", "sys", ".", "platform", "==", "\"win32\"", ":", "\n", "        ", "GITS", "=", "[", "\"git.cmd\"", ",", "\"git.exe\"", "]", "\n", "\n", "", "out", ",", "rc", "=", "run_command", "(", "GITS", ",", "[", "\"rev-parse\"", ",", "\"--git-dir\"", "]", ",", "cwd", "=", "root", ",", "\n", "hide_stderr", "=", "True", ")", "\n", "if", "rc", "!=", "0", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Directory %s not under git control\"", "%", "root", ")", "\n", "", "raise", "NotThisMethod", "(", "\"'git rev-parse --git-dir' returned error\"", ")", "\n", "\n", "# if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]", "\n", "# if there isn't one, this yields HEX[-dirty] (no NUM)", "\n", "", "describe_out", ",", "rc", "=", "run_command", "(", "GITS", ",", "[", "\"describe\"", ",", "\"--tags\"", ",", "\"--dirty\"", ",", "\n", "\"--always\"", ",", "\"--long\"", ",", "\n", "\"--match\"", ",", "\"%s*\"", "%", "tag_prefix", "]", ",", "\n", "cwd", "=", "root", ")", "\n", "# --long was added in git-1.5.5", "\n", "if", "describe_out", "is", "None", ":", "\n", "        ", "raise", "NotThisMethod", "(", "\"'git describe' failed\"", ")", "\n", "", "describe_out", "=", "describe_out", ".", "strip", "(", ")", "\n", "full_out", ",", "rc", "=", "run_command", "(", "GITS", ",", "[", "\"rev-parse\"", ",", "\"HEAD\"", "]", ",", "cwd", "=", "root", ")", "\n", "if", "full_out", "is", "None", ":", "\n", "        ", "raise", "NotThisMethod", "(", "\"'git rev-parse' failed\"", ")", "\n", "", "full_out", "=", "full_out", ".", "strip", "(", ")", "\n", "\n", "pieces", "=", "{", "}", "\n", "pieces", "[", "\"long\"", "]", "=", "full_out", "\n", "pieces", "[", "\"short\"", "]", "=", "full_out", "[", ":", "7", "]", "# maybe improved later", "\n", "pieces", "[", "\"error\"", "]", "=", "None", "\n", "\n", "# parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]", "\n", "# TAG might have hyphens.", "\n", "git_describe", "=", "describe_out", "\n", "\n", "# look for -dirty suffix", "\n", "dirty", "=", "git_describe", ".", "endswith", "(", "\"-dirty\"", ")", "\n", "pieces", "[", "\"dirty\"", "]", "=", "dirty", "\n", "if", "dirty", ":", "\n", "        ", "git_describe", "=", "git_describe", "[", ":", "git_describe", ".", "rindex", "(", "\"-dirty\"", ")", "]", "\n", "\n", "# now we have TAG-NUM-gHEX or HEX", "\n", "\n", "", "if", "\"-\"", "in", "git_describe", ":", "\n", "# TAG-NUM-gHEX", "\n", "        ", "mo", "=", "re", ".", "search", "(", "r'^(.+)-(\\d+)-g([0-9a-f]+)$'", ",", "git_describe", ")", "\n", "if", "not", "mo", ":", "\n", "# unparseable. Maybe git-describe is misbehaving?", "\n", "            ", "pieces", "[", "\"error\"", "]", "=", "(", "\"unable to parse git-describe output: '%s'\"", "\n", "%", "describe_out", ")", "\n", "return", "pieces", "\n", "\n", "# tag", "\n", "", "full_tag", "=", "mo", ".", "group", "(", "1", ")", "\n", "if", "not", "full_tag", ".", "startswith", "(", "tag_prefix", ")", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "fmt", "=", "\"tag '%s' doesn't start with prefix '%s'\"", "\n", "print", "(", "fmt", "%", "(", "full_tag", ",", "tag_prefix", ")", ")", "\n", "", "pieces", "[", "\"error\"", "]", "=", "(", "\"tag '%s' doesn't start with prefix '%s'\"", "\n", "%", "(", "full_tag", ",", "tag_prefix", ")", ")", "\n", "return", "pieces", "\n", "", "pieces", "[", "\"closest-tag\"", "]", "=", "full_tag", "[", "len", "(", "tag_prefix", ")", ":", "]", "\n", "\n", "# distance: number of commits since tag", "\n", "pieces", "[", "\"distance\"", "]", "=", "int", "(", "mo", ".", "group", "(", "2", ")", ")", "\n", "\n", "# commit: short hex revision ID", "\n", "pieces", "[", "\"short\"", "]", "=", "mo", ".", "group", "(", "3", ")", "\n", "\n", "", "else", ":", "\n", "# HEX: no tags", "\n", "        ", "pieces", "[", "\"closest-tag\"", "]", "=", "None", "\n", "count_out", ",", "rc", "=", "run_command", "(", "GITS", ",", "[", "\"rev-list\"", ",", "\"HEAD\"", ",", "\"--count\"", "]", ",", "\n", "cwd", "=", "root", ")", "\n", "pieces", "[", "\"distance\"", "]", "=", "int", "(", "count_out", ")", "# total number of commits", "\n", "\n", "# commit date: see ISO-8601 comment in git_versions_from_keywords()", "\n", "", "date", "=", "run_command", "(", "GITS", ",", "[", "\"show\"", ",", "\"-s\"", ",", "\"--format=%ci\"", ",", "\"HEAD\"", "]", ",", "\n", "cwd", "=", "root", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "pieces", "[", "\"date\"", "]", "=", "date", ".", "strip", "(", ")", ".", "replace", "(", "\" \"", ",", "\"T\"", ",", "1", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ",", "1", ")", "\n", "\n", "return", "pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.plus_or_dot": [[310, 315], ["pieces.get"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "plus_or_dot", "(", "pieces", ")", ":", "\n", "    ", "\"\"\"Return a + if we don't already have one, else return a .\"\"\"", "\n", "if", "\"+\"", "in", "pieces", ".", "get", "(", "\"closest-tag\"", ",", "\"\"", ")", ":", "\n", "        ", "return", "\".\"", "\n", "", "return", "\"+\"", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_pep440": [[317, 340], ["_version.plus_or_dot"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.plus_or_dot"], ["", "def", "render_pep440", "(", "pieces", ")", ":", "\n", "    ", "\"\"\"Build up version string, with post-release \"local version identifier\".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    \"\"\"", "\n", "if", "pieces", "[", "\"closest-tag\"", "]", ":", "\n", "        ", "rendered", "=", "pieces", "[", "\"closest-tag\"", "]", "\n", "if", "pieces", "[", "\"distance\"", "]", "or", "pieces", "[", "\"dirty\"", "]", ":", "\n", "            ", "rendered", "+=", "plus_or_dot", "(", "pieces", ")", "\n", "rendered", "+=", "\"%d.g%s\"", "%", "(", "pieces", "[", "\"distance\"", "]", ",", "pieces", "[", "\"short\"", "]", ")", "\n", "if", "pieces", "[", "\"dirty\"", "]", ":", "\n", "                ", "rendered", "+=", "\".dirty\"", "\n", "", "", "", "else", ":", "\n", "# exception #1", "\n", "        ", "rendered", "=", "\"0+untagged.%d.g%s\"", "%", "(", "pieces", "[", "\"distance\"", "]", ",", "\n", "pieces", "[", "\"short\"", "]", ")", "\n", "if", "pieces", "[", "\"dirty\"", "]", ":", "\n", "            ", "rendered", "+=", "\".dirty\"", "\n", "", "", "return", "rendered", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_pep440_pre": [[342, 356], ["None"], "function", ["None"], ["", "def", "render_pep440_pre", "(", "pieces", ")", ":", "\n", "    ", "\"\"\"TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    \"\"\"", "\n", "if", "pieces", "[", "\"closest-tag\"", "]", ":", "\n", "        ", "rendered", "=", "pieces", "[", "\"closest-tag\"", "]", "\n", "if", "pieces", "[", "\"distance\"", "]", ":", "\n", "            ", "rendered", "+=", "\".post.dev%d\"", "%", "pieces", "[", "\"distance\"", "]", "\n", "", "", "else", ":", "\n", "# exception #1", "\n", "        ", "rendered", "=", "\"0.post.dev%d\"", "%", "pieces", "[", "\"distance\"", "]", "\n", "", "return", "rendered", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_pep440_post": [[358, 383], ["_version.plus_or_dot"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.plus_or_dot"], ["", "def", "render_pep440_post", "(", "pieces", ")", ":", "\n", "    ", "\"\"\"TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The \".dev0\" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear \"older\" than the corresponding clean one),\n    but you shouldn't be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"", "\n", "if", "pieces", "[", "\"closest-tag\"", "]", ":", "\n", "        ", "rendered", "=", "pieces", "[", "\"closest-tag\"", "]", "\n", "if", "pieces", "[", "\"distance\"", "]", "or", "pieces", "[", "\"dirty\"", "]", ":", "\n", "            ", "rendered", "+=", "\".post%d\"", "%", "pieces", "[", "\"distance\"", "]", "\n", "if", "pieces", "[", "\"dirty\"", "]", ":", "\n", "                ", "rendered", "+=", "\".dev0\"", "\n", "", "rendered", "+=", "plus_or_dot", "(", "pieces", ")", "\n", "rendered", "+=", "\"g%s\"", "%", "pieces", "[", "\"short\"", "]", "\n", "", "", "else", ":", "\n", "# exception #1", "\n", "        ", "rendered", "=", "\"0.post%d\"", "%", "pieces", "[", "\"distance\"", "]", "\n", "if", "pieces", "[", "\"dirty\"", "]", ":", "\n", "            ", "rendered", "+=", "\".dev0\"", "\n", "", "rendered", "+=", "\"+g%s\"", "%", "pieces", "[", "\"short\"", "]", "\n", "", "return", "rendered", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_pep440_old": [[385, 405], ["None"], "function", ["None"], ["", "def", "render_pep440_old", "(", "pieces", ")", ":", "\n", "    ", "\"\"\"TAG[.postDISTANCE[.dev0]] .\n\n    The \".dev0\" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    \"\"\"", "\n", "if", "pieces", "[", "\"closest-tag\"", "]", ":", "\n", "        ", "rendered", "=", "pieces", "[", "\"closest-tag\"", "]", "\n", "if", "pieces", "[", "\"distance\"", "]", "or", "pieces", "[", "\"dirty\"", "]", ":", "\n", "            ", "rendered", "+=", "\".post%d\"", "%", "pieces", "[", "\"distance\"", "]", "\n", "if", "pieces", "[", "\"dirty\"", "]", ":", "\n", "                ", "rendered", "+=", "\".dev0\"", "\n", "", "", "", "else", ":", "\n", "# exception #1", "\n", "        ", "rendered", "=", "\"0.post%d\"", "%", "pieces", "[", "\"distance\"", "]", "\n", "if", "pieces", "[", "\"dirty\"", "]", ":", "\n", "            ", "rendered", "+=", "\".dev0\"", "\n", "", "", "return", "rendered", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_git_describe": [[407, 425], ["None"], "function", ["None"], ["", "def", "render_git_describe", "(", "pieces", ")", ":", "\n", "    ", "\"\"\"TAG[-DISTANCE-gHEX][-dirty].\n\n    Like 'git describe --tags --dirty --always'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"", "\n", "if", "pieces", "[", "\"closest-tag\"", "]", ":", "\n", "        ", "rendered", "=", "pieces", "[", "\"closest-tag\"", "]", "\n", "if", "pieces", "[", "\"distance\"", "]", ":", "\n", "            ", "rendered", "+=", "\"-%d-g%s\"", "%", "(", "pieces", "[", "\"distance\"", "]", ",", "pieces", "[", "\"short\"", "]", ")", "\n", "", "", "else", ":", "\n", "# exception #1", "\n", "        ", "rendered", "=", "pieces", "[", "\"short\"", "]", "\n", "", "if", "pieces", "[", "\"dirty\"", "]", ":", "\n", "        ", "rendered", "+=", "\"-dirty\"", "\n", "", "return", "rendered", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_git_describe_long": [[427, 445], ["None"], "function", ["None"], ["", "def", "render_git_describe_long", "(", "pieces", ")", ":", "\n", "    ", "\"\"\"TAG-DISTANCE-gHEX[-dirty].\n\n    Like 'git describe --tags --dirty --always -long'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no 'g' prefix)\n    \"\"\"", "\n", "if", "pieces", "[", "\"closest-tag\"", "]", ":", "\n", "        ", "rendered", "=", "pieces", "[", "\"closest-tag\"", "]", "\n", "rendered", "+=", "\"-%d-g%s\"", "%", "(", "pieces", "[", "\"distance\"", "]", ",", "pieces", "[", "\"short\"", "]", ")", "\n", "", "else", ":", "\n", "# exception #1", "\n", "        ", "rendered", "=", "pieces", "[", "\"short\"", "]", "\n", "", "if", "pieces", "[", "\"dirty\"", "]", ":", "\n", "        ", "rendered", "+=", "\"-dirty\"", "\n", "", "return", "rendered", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render": [[447, 477], ["_version.render_pep440", "pieces.get", "pieces.get", "_version.render_pep440_pre", "_version.render_pep440_post", "_version.render_pep440_old", "_version.render_git_describe", "_version.render_git_describe_long", "ValueError"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_pep440", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_pep440_pre", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_pep440_post", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_pep440_old", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_git_describe", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render_git_describe_long"], ["", "def", "render", "(", "pieces", ",", "style", ")", ":", "\n", "    ", "\"\"\"Render the given version pieces into the requested style.\"\"\"", "\n", "if", "pieces", "[", "\"error\"", "]", ":", "\n", "        ", "return", "{", "\"version\"", ":", "\"unknown\"", ",", "\n", "\"full-revisionid\"", ":", "pieces", ".", "get", "(", "\"long\"", ")", ",", "\n", "\"dirty\"", ":", "None", ",", "\n", "\"error\"", ":", "pieces", "[", "\"error\"", "]", ",", "\n", "\"date\"", ":", "None", "}", "\n", "\n", "", "if", "not", "style", "or", "style", "==", "\"default\"", ":", "\n", "        ", "style", "=", "\"pep440\"", "# the default", "\n", "\n", "", "if", "style", "==", "\"pep440\"", ":", "\n", "        ", "rendered", "=", "render_pep440", "(", "pieces", ")", "\n", "", "elif", "style", "==", "\"pep440-pre\"", ":", "\n", "        ", "rendered", "=", "render_pep440_pre", "(", "pieces", ")", "\n", "", "elif", "style", "==", "\"pep440-post\"", ":", "\n", "        ", "rendered", "=", "render_pep440_post", "(", "pieces", ")", "\n", "", "elif", "style", "==", "\"pep440-old\"", ":", "\n", "        ", "rendered", "=", "render_pep440_old", "(", "pieces", ")", "\n", "", "elif", "style", "==", "\"git-describe\"", ":", "\n", "        ", "rendered", "=", "render_git_describe", "(", "pieces", ")", "\n", "", "elif", "style", "==", "\"git-describe-long\"", ":", "\n", "        ", "rendered", "=", "render_git_describe_long", "(", "pieces", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown style '%s'\"", "%", "style", ")", "\n", "\n", "", "return", "{", "\"version\"", ":", "rendered", ",", "\"full-revisionid\"", ":", "pieces", "[", "\"long\"", "]", ",", "\n", "\"dirty\"", ":", "pieces", "[", "\"dirty\"", "]", ",", "\"error\"", ":", "None", ",", "\n", "\"date\"", ":", "pieces", ".", "get", "(", "\"date\"", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.get_versions": [[479, 523], ["_version.get_config", "_version.git_versions_from_keywords", "os.path.realpath", "get_config.versionfile_source.split", "_version.git_pieces_from_vcs", "_version.render", "_version.get_keywords", "os.path.dirname", "_version.versions_from_parentdir"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.get_config", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.git_versions_from_keywords", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.git_pieces_from_vcs", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.render", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.get_keywords", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib._version.versions_from_parentdir"], ["", "def", "get_versions", "(", ")", ":", "\n", "    ", "\"\"\"Get version information or return default if unable to do so.\"\"\"", "\n", "# I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have", "\n", "# __file__, we can work backwards from there to the root. Some", "\n", "# py2exe/bbfreeze/non-CPython implementations don't do __file__, in which", "\n", "# case we can only use expanded keywords.", "\n", "\n", "cfg", "=", "get_config", "(", ")", "\n", "verbose", "=", "cfg", ".", "verbose", "\n", "\n", "try", ":", "\n", "        ", "return", "git_versions_from_keywords", "(", "get_keywords", "(", ")", ",", "cfg", ".", "tag_prefix", ",", "\n", "verbose", ")", "\n", "", "except", "NotThisMethod", ":", "\n", "        ", "pass", "\n", "\n", "", "try", ":", "\n", "        ", "root", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")", "\n", "# versionfile_source is the relative path from the top of the source", "\n", "# tree (where the .git directory might live) to this file. Invert", "\n", "# this to find the root from __file__.", "\n", "for", "i", "in", "cfg", ".", "versionfile_source", ".", "split", "(", "'/'", ")", ":", "\n", "            ", "root", "=", "os", ".", "path", ".", "dirname", "(", "root", ")", "\n", "", "", "except", "NameError", ":", "\n", "        ", "return", "{", "\"version\"", ":", "\"0+unknown\"", ",", "\"full-revisionid\"", ":", "None", ",", "\n", "\"dirty\"", ":", "None", ",", "\n", "\"error\"", ":", "\"unable to find root of source tree\"", ",", "\n", "\"date\"", ":", "None", "}", "\n", "\n", "", "try", ":", "\n", "        ", "pieces", "=", "git_pieces_from_vcs", "(", "cfg", ".", "tag_prefix", ",", "root", ",", "verbose", ")", "\n", "return", "render", "(", "pieces", ",", "cfg", ".", "style", ")", "\n", "", "except", "NotThisMethod", ":", "\n", "        ", "pass", "\n", "\n", "", "try", ":", "\n", "        ", "if", "cfg", ".", "parentdir_prefix", ":", "\n", "            ", "return", "versions_from_parentdir", "(", "cfg", ".", "parentdir_prefix", ",", "root", ",", "verbose", ")", "\n", "", "", "except", "NotThisMethod", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "{", "\"version\"", ":", "\"0+unknown\"", ",", "\"full-revisionid\"", ":", "None", ",", "\n", "\"dirty\"", ":", "None", ",", "\n", "\"error\"", ":", "\"unable to compute version\"", ",", "\"date\"", ":", "None", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.migrate.main": [[11, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "network.cli", "argparse.ArgumentParser.parse_args", "network.configure", "logging.basicConfig", "torch.load", "network.factory_from_args", "new_model.load_state_dict", "torch.save", "Exception", "checkpoint[].state_dict"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.migrate'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ")", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "network", ".", "configure", "(", "args", ")", "\n", "\n", "if", "args", ".", "checkpoint", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "'checkpoint must be provided for old model to migrate from'", ")", "\n", "\n", "", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "args", ".", "output", "=", "args", ".", "checkpoint", "+", "'.out.pkl'", "\n", "\n", "", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", "if", "not", "args", ".", "debug", "else", "logging", ".", "DEBUG", ")", "\n", "\n", "# load old model", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "\n", "# create a new model", "\n", "args", ".", "checkpoint", "=", "None", "\n", "new_model", ",", "_", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "\n", "# transfer state from old to new model", "\n", "new_model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ".", "state_dict", "(", ")", ")", "\n", "checkpoint", "[", "'model'", "]", "=", "new_model", "\n", "torch", ".", "save", "(", "checkpoint", ",", "args", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.__init__": [[10, 30], ["numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.sum", "len", "len", "len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["    ", "def", "__init__", "(", "self", ",", "keypoints", ",", "skeleton", ",", "*", ",", "category_id", "=", "1", ",", "suppress_score_index", "=", "None", ")", ":", "\n", "        ", "self", ".", "keypoints", "=", "keypoints", "\n", "self", ".", "skeleton", "=", "skeleton", "\n", "self", ".", "category_id", "=", "category_id", "\n", "self", ".", "suppress_score_index", "=", "suppress_score_index", "\n", "\n", "self", ".", "data", "=", "np", ".", "zeros", "(", "(", "len", "(", "keypoints", ")", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "joint_scales", "=", "np", ".", "zeros", "(", "(", "len", "(", "keypoints", ")", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fixed_score", "=", "NOTSET", "\n", "self", ".", "fixed_bbox", "=", "NOTSET", "\n", "self", ".", "decoding_order", "=", "[", "]", "\n", "self", ".", "frontier_order", "=", "[", "]", "\n", "\n", "self", ".", "skeleton_m1", "=", "(", "np", ".", "asarray", "(", "skeleton", ")", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "score_weights", "=", "np", ".", "ones", "(", "(", "len", "(", "keypoints", ")", ",", ")", ")", "\n", "if", "self", ".", "suppress_score_index", ":", "\n", "            ", "self", ".", "score_weights", "[", "-", "1", "]", "=", "0.0", "\n", "", "self", ".", "score_weights", "[", ":", "3", "]", "=", "3.0", "\n", "self", ".", "score_weights", "/=", "np", ".", "sum", "(", "self", ".", "score_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.add": [[31, 34], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "joint_i", ",", "xyv", ")", ":", "\n", "        ", "self", ".", "data", "[", "joint_i", "]", "=", "xyv", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.set": [[35, 44], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "data", ",", "joint_scales", "=", "None", ",", "*", ",", "fixed_score", "=", "NOTSET", ",", "fixed_bbox", "=", "NOTSET", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "if", "joint_scales", "is", "not", "None", ":", "\n", "            ", "self", ".", "joint_scales", "=", "joint_scales", "\n", "", "else", ":", "\n", "            ", "self", ".", "joint_scales", "[", ":", "]", "=", "0.0", "\n", "", "self", ".", "fixed_score", "=", "fixed_score", "\n", "self", ".", "fixed_bbox", "=", "fixed_bbox", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.rescale": [[45, 53], ["None"], "methods", ["None"], ["", "def", "rescale", "(", "self", ",", "scale_factor", ")", ":", "\n", "        ", "self", ".", "data", "[", ":", ",", "0", ":", "2", "]", "*=", "scale_factor", "\n", "if", "self", ".", "joint_scales", "is", "not", "None", ":", "\n", "            ", "self", ".", "joint_scales", "*=", "scale_factor", "\n", "", "for", "_", ",", "__", ",", "c1", ",", "c2", "in", "self", ".", "decoding_order", ":", "\n", "            ", "c1", "[", ":", "2", "]", "*=", "scale_factor", "\n", "c2", "[", ":", "2", "]", "*=", "scale_factor", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.fill_joint_scales": [[54, 61], ["numpy.zeros", "enumerate", "functional.scalar_value_clipped"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "fill_joint_scales", "(", "self", ",", "scales", ",", "hr_scale", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "joint_scales", "=", "np", ".", "zeros", "(", "(", "self", ".", "data", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "for", "xyv_i", ",", "xyv", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "if", "xyv", "[", "2", "]", "==", "0.0", ":", "\n", "                ", "continue", "\n", "", "scale", "=", "scalar_value_clipped", "(", "scales", "[", "xyv_i", "]", ",", "xyv", "[", "0", "]", "*", "hr_scale", ",", "xyv", "[", "1", "]", "*", "hr_scale", ")", "\n", "self", ".", "joint_scales", "[", "xyv_i", "]", "=", "scale", "/", "hr_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score": [[62, 74], ["numpy.sum", "numpy.copy", "numpy.sort"], "methods", ["None"], ["", "", "def", "score", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "fixed_score", "!=", "NOTSET", ":", "\n", "            ", "return", "self", ".", "fixed_score", "\n", "\n", "", "v", "=", "self", ".", "data", "[", ":", ",", "2", "]", "\n", "if", "self", ".", "suppress_score_index", "is", "not", "None", ":", "\n", "            ", "v", "=", "np", ".", "copy", "(", "v", ")", "\n", "v", "[", "self", ".", "suppress_score_index", "]", "=", "0.0", "\n", "# return 0.1 * np.max(v) + 0.9 * np.mean(np.square(v))", "\n", "# return np.mean(np.square(v))", "\n", "# return np.sum(self.score_weights * np.sort(np.square(v))[::-1])", "\n", "", "return", "np", ".", "sum", "(", "self", ".", "score_weights", "*", "np", ".", "sort", "(", "v", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.scale": [[75, 82], ["max", "numpy.any", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "methods", ["None"], ["", "def", "scale", "(", "self", ",", "v_th", "=", "0.5", ")", ":", "\n", "        ", "m", "=", "self", ".", "data", "[", ":", ",", "2", "]", ">", "v_th", "\n", "if", "not", "np", ".", "any", "(", "m", ")", ":", "\n", "            ", "return", "0.0", "\n", "", "return", "max", "(", "\n", "np", ".", "max", "(", "self", ".", "data", "[", "m", ",", "0", "]", ")", "-", "np", ".", "min", "(", "self", ".", "data", "[", "m", ",", "0", "]", ")", ",", "\n", "np", ".", "max", "(", "self", ".", "data", "[", "m", ",", "1", "]", ")", "-", "np", ".", "min", "(", "self", ".", "data", "[", "m", ",", "1", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.json_data": [[84, 107], ["numpy.copy", "numpy.maximum", "numpy.around", "getattr", "numpy.around.astype", "numpy.around.reshape().tolist", "max", "round", "round", "numpy.around.reshape", "float", "annotation.Annotation.bbox", "annotation.Annotation.score"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.bbox", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score"], ["", "def", "json_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Data ready for json dump.\"\"\"", "\n", "\n", "# avoid visible keypoints becoming invisible due to rounding", "\n", "v_mask", "=", "self", ".", "data", "[", ":", ",", "2", "]", ">", "0.0", "\n", "keypoints", "=", "np", ".", "copy", "(", "self", ".", "data", ")", "\n", "keypoints", "[", "v_mask", ",", "2", "]", "=", "np", ".", "maximum", "(", "0.01", ",", "keypoints", "[", "v_mask", ",", "2", "]", ")", "\n", "keypoints", "=", "np", ".", "around", "(", "keypoints", ".", "astype", "(", "np", ".", "float64", ")", ",", "2", ")", "\n", "\n", "# convert to float64 before rounding because otherwise extra digits", "\n", "# will be added when converting to Python type", "\n", "data", "=", "{", "\n", "'keypoints'", ":", "keypoints", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'bbox'", ":", "[", "round", "(", "float", "(", "c", ")", ",", "2", ")", "for", "c", "in", "self", ".", "bbox", "(", ")", "]", ",", "\n", "'score'", ":", "max", "(", "0.001", ",", "round", "(", "self", ".", "score", "(", ")", ",", "3", ")", ")", ",", "\n", "'category_id'", ":", "self", ".", "category_id", ",", "\n", "}", "\n", "\n", "id_", "=", "getattr", "(", "self", ",", "'id_'", ",", "None", ")", "\n", "if", "id_", ":", "\n", "            ", "data", "[", "'id_'", "]", "=", "id_", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.bbox": [[108, 112], ["annotation.Annotation.bbox_from_keypoints"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.bbox_from_keypoints"], ["", "def", "bbox", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "fixed_bbox", "!=", "NOTSET", ":", "\n", "            ", "return", "self", ".", "fixed_bbox", "\n", "", "return", "self", ".", "bbox_from_keypoints", "(", "self", ".", "data", ",", "self", ".", "joint_scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.bbox_from_keypoints": [[113, 124], ["numpy.min", "numpy.min", "numpy.any", "numpy.max", "numpy.max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "bbox_from_keypoints", "(", "kps", ",", "joint_scales", ")", ":", "\n", "        ", "m", "=", "kps", "[", ":", ",", "2", "]", ">", "0", "\n", "if", "not", "np", ".", "any", "(", "m", ")", ":", "\n", "            ", "return", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "", "x", "=", "np", ".", "min", "(", "kps", "[", ":", ",", "0", "]", "[", "m", "]", "-", "joint_scales", "[", "m", "]", ")", "\n", "y", "=", "np", ".", "min", "(", "kps", "[", ":", ",", "1", "]", "[", "m", "]", "-", "joint_scales", "[", "m", "]", ")", "\n", "w", "=", "np", ".", "max", "(", "kps", "[", ":", ",", "0", "]", "[", "m", "]", "+", "joint_scales", "[", "m", "]", ")", "-", "x", "\n", "h", "=", "np", ".", "max", "(", "kps", "[", ":", ",", "1", "]", "[", "m", "]", "+", "joint_scales", "[", "m", "]", ")", "-", "y", "\n", "return", "[", "x", ",", "y", ",", "w", ",", "h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.__init__": [[127, 132], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "categories", ")", ":", "\n", "        ", "self", ".", "categories", "=", "categories", "\n", "self", ".", "field_i", "=", "None", "\n", "self", ".", "score", "=", "None", "\n", "self", ".", "bbox", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.set": [[133, 139], ["numpy.asarray"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "field_i", ",", "score", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"Set score to None for a ground truth annotation.\"\"\"", "\n", "self", ".", "field_i", "=", "field_i", "\n", "self", ".", "score", "=", "score", "\n", "self", ".", "bbox", "=", "np", ".", "asarray", "(", "bbox", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.category": [[140, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "category", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "categories", "[", "self", ".", "field_i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.json_data": [[144, 150], ["max", "round", "round", "float", "float"], "methods", ["None"], ["", "def", "json_data", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'category_id'", ":", "self", ".", "field_i", "+", "1", ",", "\n", "'category'", ":", "self", ".", "category", ",", "\n", "'score'", ":", "max", "(", "0.001", ",", "round", "(", "float", "(", "self", ".", "score", ")", ",", "3", ")", ")", ",", "\n", "'bbox'", ":", "[", "round", "(", "float", "(", "c", ")", ",", "2", ")", "for", "c", "in", "self", ".", "bbox", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.predict.cli": [[17, 99], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "network.cli", "decoder.cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logging.getLogger().setLevel", "LOG.setLevel", "network.configure", "show.configure", "visualizer.configure", "torch.device", "LOG.debug", "glob.glob", "Exception", "torch.cuda.is_available", "torch.device", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["def", "cli", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.predict'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "decoder", ".", "cli", "(", "parser", ",", "force_complete_pose", "=", "False", ",", "instance_threshold", "=", "0.1", ",", "seed_threshold", "=", "0.5", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'images'", ",", "nargs", "=", "'*'", ",", "\n", "help", "=", "'input images'", ")", "\n", "parser", ".", "add_argument", "(", "'--glob'", ",", "\n", "help", "=", "'glob expression for input images (for many images)'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'show image of output overlay'", ")", "\n", "parser", ".", "add_argument", "(", "'--image-output'", ",", "default", "=", "None", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "\n", "help", "=", "'image output file or directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--json-output'", ",", "default", "=", "None", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "\n", "help", "=", "'json output file or directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'processing batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--long-edge'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'apply preprocessing to batch images'", ")", "\n", "parser", ".", "add_argument", "(", "'--loader-workers'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of workers for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "parser", ".", "add_argument", "(", "'--line-width'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "\n", "help", "=", "'line width for skeleton'", ")", "\n", "parser", ".", "add_argument", "(", "'--monocolor-connections'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--figure-width'", ",", "default", "=", "10.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'figure width'", ")", "\n", "parser", ".", "add_argument", "(", "'--dpi-factor'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'increase dpi of output image by this factor'", ")", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'-q'", ",", "'--quiet'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'only show warning messages or above'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "group", ".", "add_argument", "(", "'--debug-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages and enable all debug images'", ")", "\n", "group", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'cocokp'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug_images", ":", "\n", "        ", "args", ".", "debug", "=", "True", "\n", "\n", "", "log_level", "=", "logging", ".", "INFO", "\n", "if", "args", ".", "quiet", ":", "\n", "        ", "log_level", "=", "logging", ".", "WARNING", "\n", "", "if", "args", ".", "debug", ":", "\n", "        ", "log_level", "=", "logging", ".", "DEBUG", "\n", "", "logging", ".", "basicConfig", "(", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "network", ".", "configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "\n", "if", "args", ".", "loader_workers", "is", "None", ":", "\n", "        ", "args", ".", "loader_workers", "=", "args", ".", "batch_size", "\n", "\n", "# glob", "\n", "", "if", "args", ".", "glob", ":", "\n", "        ", "args", ".", "images", "+=", "glob", ".", "glob", "(", "args", ".", "glob", ")", "\n", "", "if", "not", "args", ".", "images", ":", "\n", "        ", "raise", "Exception", "(", "\"no image files given\"", ")", "\n", "\n", "# add args.device", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "args", ".", "pin_memory", "=", "False", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "args", ".", "pin_memory", "=", "True", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.predict.processor_factory": [[101, 112], ["network.factory_from_args", "model_cpu.to", "decoder.factory_from_args", "LOG.info", "torch.nn.DataParallel", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "processor_factory", "(", "args", ")", ":", "\n", "# load model", "\n", "    ", "model_cpu", ",", "_", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "model", "=", "model_cpu", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "LOG", ".", "info", "(", "'Using multiple GPUs: %d'", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "base_net", "=", "model_cpu", ".", "base_net", "\n", "model", ".", "head_nets", "=", "model_cpu", ".", "head_nets", "\n", "", "processor", "=", "decoder", ".", "factory_from_args", "(", "args", ",", "model", ")", "\n", "return", "processor", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.predict.preprocess_factory": [[114, 124], ["transforms.Compose", "transforms.NormalizeAnnotations", "preprocess.append", "preprocess.append", "preprocess.append", "transforms.RescaleAbsolute", "transforms.CenterPad", "transforms.CenterPadTight"], "function", ["None"], ["", "def", "preprocess_factory", "(", "args", ")", ":", "\n", "    ", "preprocess", "=", "[", "transforms", ".", "NormalizeAnnotations", "(", ")", "]", "\n", "if", "args", ".", "long_edge", ":", "\n", "        ", "preprocess", ".", "append", "(", "transforms", ".", "RescaleAbsolute", "(", "args", ".", "long_edge", ")", ")", "\n", "", "if", "args", ".", "batch_size", ">", "1", ":", "\n", "        ", "assert", "args", ".", "long_edge", ",", "'--long-edge must be provided for batch size > 1'", "\n", "preprocess", ".", "append", "(", "transforms", ".", "CenterPad", "(", "args", ".", "long_edge", ")", ")", "\n", "", "else", ":", "\n", "        ", "preprocess", ".", "append", "(", "transforms", ".", "CenterPadTight", "(", "16", ")", ")", "\n", "", "return", "transforms", ".", "Compose", "(", "preprocess", "+", "[", "transforms", ".", "EVAL_TRANSFORM", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.predict.out_name": [[126, 149], ["os.path.isdir", "os.path.join", "os.path.basename"], "function", ["None"], ["", "def", "out_name", "(", "arg", ",", "in_name", ",", "default_extension", ")", ":", "\n", "    ", "\"\"\"Determine an output name from args, input name and extension.\n\n    arg can be:\n    - none: return none (e.g. show image but don't store it)\n    - True: activate this output and determine a default name\n    - string:\n        - not a directory: use this as the output file name\n        - is a directory: use directory name and input name to form an output\n    \"\"\"", "\n", "if", "arg", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "arg", "is", "True", ":", "\n", "        ", "return", "in_name", "+", "default_extension", "\n", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "arg", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "\n", "arg", ",", "\n", "os", ".", "path", ".", "basename", "(", "in_name", ")", "\n", ")", "+", "default_extension", "\n", "\n", "", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.predict.main": [[151, 210], ["predict.cli", "predict.processor_factory", "predict.preprocess_factory", "datasets.ImageList", "torch.utils.data.DataLoader", "show.KeypointPainter", "show.AnnotationPainter", "enumerate", "processor.batch", "zip", "LOG.info", "visualizer.BaseVisualizer.image", "preprocess_factory.annotations_inverse", "predict.out_name", "LOG.debug", "predict.out_name", "LOG.debug", "open", "PIL.Image.open().convert", "open", "json.dump", "show.image_canvas", "show.AnnotationPainter.annotations", "PIL.Image.open", "ann.json_data"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.video.processor_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.preprocess_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.predict.out_name", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.predict.out_name", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.json_data"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "\n", "processor", ",", "model", "=", "processor_factory", "(", "args", ")", "\n", "preprocess", "=", "preprocess_factory", "(", "args", ")", "\n", "\n", "# data", "\n", "data", "=", "datasets", ".", "ImageList", "(", "args", ".", "images", ",", "preprocess", "=", "preprocess", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "args", ".", "pin_memory", ",", "num_workers", "=", "args", ".", "loader_workers", ",", "\n", "collate_fn", "=", "datasets", ".", "collate_images_anns_meta", ")", "\n", "\n", "# visualizers", "\n", "keypoint_painter", "=", "show", ".", "KeypointPainter", "(", "\n", "color_connections", "=", "not", "args", ".", "monocolor_connections", ",", "\n", "linewidth", "=", "args", ".", "line_width", ",", "\n", ")", "\n", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n", "visualizer", ".", "Cif", ".", "show_regressions", "=", "True", "\n", "visualizer", ".", "Caf", ".", "show_regressions", "=", "True", "\n", "visualizer", ".", "BaseVisualizer", ".", "all_indices", "=", "[", "(", "'cif'", ",", "5", ")", ",", "(", "'caf'", ",", "5", ")", "]", "\n", "for", "batch_i", ",", "(", "image_tensors_batch", ",", "_", ",", "meta_batch", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "pred_batch", "=", "processor", ".", "batch", "(", "model", ",", "image_tensors_batch", ",", "device", "=", "args", ".", "device", ")", "\n", "#pred_batch = pred_batch[0]", "\n", "\n", "# unbatch", "\n", "pred_batch", "=", "pred_batch", "[", "'pose'", "]", "\n", "for", "pred", ",", "meta", "in", "zip", "(", "pred_batch", ",", "meta_batch", ")", ":", "\n", "            ", "LOG", ".", "info", "(", "'batch %d: %s'", ",", "batch_i", ",", "meta", "[", "'file_name'", "]", ")", "\n", "\n", "# load the original image if necessary", "\n", "cpu_image", "=", "None", "\n", "if", "args", ".", "debug", "or", "args", ".", "show", "or", "args", ".", "image_output", "is", "not", "None", ":", "\n", "                ", "with", "open", "(", "meta", "[", "'file_name'", "]", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "", "visualizer", ".", "BaseVisualizer", ".", "image", "(", "cpu_image", ")", "\n", "if", "preprocess", "is", "not", "None", ":", "\n", "                ", "pred", "=", "preprocess", ".", "annotations_inverse", "(", "pred", ",", "meta", ")", "\n", "\n", "", "if", "args", ".", "json_output", "is", "not", "None", ":", "\n", "                ", "json_out_name", "=", "out_name", "(", "\n", "args", ".", "json_output", ",", "meta", "[", "'file_name'", "]", ",", "'.predictions.json'", ")", "\n", "LOG", ".", "debug", "(", "'json output = %s'", ",", "json_out_name", ")", "\n", "with", "open", "(", "json_out_name", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "json", ".", "dump", "(", "[", "ann", ".", "json_data", "(", ")", "for", "ann", "in", "pred", "]", ",", "f", ")", "\n", "\n", "", "", "if", "args", ".", "show", "or", "args", ".", "image_output", "is", "not", "None", ":", "\n", "                ", "image_out_name", "=", "out_name", "(", "\n", "args", ".", "image_output", ",", "meta", "[", "'file_name'", "]", ",", "'.predictions.png'", ")", "\n", "LOG", ".", "debug", "(", "'image output = %s'", ",", "image_out_name", ")", "\n", "with", "show", ".", "image_canvas", "(", "cpu_image", ",", "\n", "image_out_name", ",", "\n", "show", "=", "args", ".", "show", ",", "\n", "fig_width", "=", "args", ".", "figure_width", ",", "\n", "dpi_factor", "=", "args", ".", "dpi_factor", ")", "as", "ax", ":", "\n", "                    ", "annotation_painter", ".", "annotations", "(", "ax", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_Conv2d_madd": [[4, 24], ["isinstance", "inp.size", "out.size", "len", "len", "len", "inp.size", "inp.size", "out.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["def", "compute_Conv2d_madd", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "\n", "assert", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "4", "and", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "len", "(", "out", ".", "size", "(", ")", ")", "\n", "\n", "in_c", "=", "inp", ".", "size", "(", ")", "[", "1", "]", "\n", "k_h", ",", "k_w", "=", "module", ".", "kernel_size", "\n", "out_c", ",", "out_h", ",", "out_w", "=", "out", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "groups", "=", "module", ".", "groups", "\n", "\n", "# ops per output element", "\n", "kernel_mul", "=", "k_h", "*", "k_w", "*", "(", "in_c", "//", "groups", ")", "\n", "kernel_add", "=", "kernel_mul", "-", "1", "+", "(", "0", "if", "module", ".", "bias", "is", "None", "else", "1", ")", "\n", "\n", "kernel_mul_group", "=", "kernel_mul", "*", "out_h", "*", "out_w", "*", "(", "out_c", "//", "groups", ")", "\n", "kernel_add_group", "=", "kernel_add", "*", "out_h", "*", "out_w", "*", "(", "out_c", "//", "groups", ")", "\n", "\n", "total_mul", "=", "kernel_mul_group", "*", "groups", "\n", "total_add", "=", "kernel_add_group", "*", "groups", "\n", "\n", "return", "total_mul", "+", "total_add", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_ConvTranspose2d_madd": [[26, 45], ["isinstance", "inp.size", "out.size", "len", "len", "len", "inp.size", "inp.size", "out.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "compute_ConvTranspose2d_madd", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "ConvTranspose2d", ")", "\n", "assert", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "4", "and", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "len", "(", "out", ".", "size", "(", ")", ")", "\n", "\n", "in_c", ",", "in_h", ",", "in_w", "=", "inp", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "k_h", ",", "k_w", "=", "module", ".", "kernel_size", "\n", "out_c", ",", "out_h", ",", "out_w", "=", "out", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "groups", "=", "module", ".", "groups", "\n", "\n", "kernel_mul", "=", "k_h", "*", "k_w", "*", "(", "in_c", "//", "groups", ")", "\n", "kernel_add", "=", "kernel_mul", "-", "1", "+", "(", "0", "if", "module", ".", "bias", "is", "None", "else", "1", ")", "\n", "\n", "kernel_mul_group", "=", "kernel_mul", "*", "in_h", "*", "in_w", "*", "(", "out_c", "//", "groups", ")", "\n", "kernel_add_group", "=", "kernel_add", "*", "in_h", "*", "in_w", "*", "(", "out_c", "//", "groups", ")", "\n", "\n", "total_mul", "=", "kernel_mul_group", "*", "groups", "\n", "total_add", "=", "kernel_add_group", "*", "groups", "\n", "\n", "return", "total_mul", "+", "total_add", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_BatchNorm2d_madd": [[47, 58], ["isinstance", "inp.size", "len", "len", "len", "inp.size", "inp.size", "out.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "compute_BatchNorm2d_madd", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", "\n", "assert", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "4", "and", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "len", "(", "out", ".", "size", "(", ")", ")", "\n", "\n", "in_c", ",", "in_h", ",", "in_w", "=", "inp", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "\n", "# 1. sub mean", "\n", "# 2. div standard deviation", "\n", "# 3. mul alpha", "\n", "# 4. add beta", "\n", "return", "4", "*", "in_c", "*", "in_h", "*", "in_w", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_MaxPool2d_madd": [[60, 71], ["isinstance", "isinstance", "out.size", "len", "len", "len", "inp.size", "inp.size", "out.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "compute_MaxPool2d_madd", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "MaxPool2d", ")", "\n", "assert", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "4", "and", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "len", "(", "out", ".", "size", "(", ")", ")", "\n", "\n", "if", "isinstance", "(", "module", ".", "kernel_size", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "k_h", ",", "k_w", "=", "module", ".", "kernel_size", "\n", "", "else", ":", "\n", "        ", "k_h", ",", "k_w", "=", "module", ".", "kernel_size", ",", "module", ".", "kernel_size", "\n", "", "out_c", ",", "out_h", ",", "out_w", "=", "out", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "\n", "return", "(", "k_h", "*", "k_w", "-", "1", ")", "*", "out_h", "*", "out_w", "*", "out_c", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_AvgPool2d_madd": [[73, 87], ["isinstance", "isinstance", "out.size", "len", "len", "len", "inp.size", "inp.size", "out.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "compute_AvgPool2d_madd", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "AvgPool2d", ")", "\n", "assert", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "4", "and", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "len", "(", "out", ".", "size", "(", ")", ")", "\n", "\n", "if", "isinstance", "(", "module", ".", "kernel_size", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "k_h", ",", "k_w", "=", "module", ".", "kernel_size", "\n", "", "else", ":", "\n", "        ", "k_h", ",", "k_w", "=", "module", ".", "kernel_size", ",", "module", ".", "kernel_size", "\n", "", "out_c", ",", "out_h", ",", "out_w", "=", "out", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "\n", "kernel_add", "=", "k_h", "*", "k_w", "-", "1", "\n", "kernel_avg", "=", "1", "\n", "\n", "return", "(", "kernel_add", "+", "kernel_avg", ")", "*", "(", "out_h", "*", "out_w", ")", "*", "out_c", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_ReLU_madd": [[89, 96], ["isinstance", "inp.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "compute_ReLU_madd", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "(", "nn", ".", "ReLU", ",", "nn", ".", "ReLU6", ")", ")", "\n", "\n", "count", "=", "1", "\n", "for", "i", "in", "inp", ".", "size", "(", ")", "[", "1", ":", "]", ":", "\n", "        ", "count", "*=", "i", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_Softmax_madd": [[98, 109], ["isinstance", "len", "inp.size", "inp.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "compute_Softmax_madd", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Softmax", ")", "\n", "assert", "len", "(", "inp", ".", "size", "(", ")", ")", ">", "1", "\n", "\n", "count", "=", "1", "\n", "for", "s", "in", "inp", ".", "size", "(", ")", "[", "1", ":", "]", ":", "\n", "        ", "count", "*=", "s", "\n", "", "exp", "=", "count", "\n", "add", "=", "count", "-", "1", "\n", "div", "=", "count", "\n", "return", "exp", "+", "add", "+", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_Linear_madd": [[111, 121], ["isinstance", "inp.size", "out.size", "len", "len", "inp.size", "out.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "compute_Linear_madd", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "\n", "assert", "len", "(", "inp", ".", "size", "(", ")", ")", "==", "2", "and", "len", "(", "out", ".", "size", "(", ")", ")", "==", "2", "\n", "\n", "num_in_features", "=", "inp", ".", "size", "(", ")", "[", "1", "]", "\n", "num_out_features", "=", "out", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "mul", "=", "num_in_features", "\n", "add", "=", "num_in_features", "-", "1", "\n", "return", "num_out_features", "*", "(", "mul", "+", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_Bilinear_madd": [[123, 134], ["isinstance", "inp1.size", "inp2.size", "out.size", "len", "len", "len", "inp1.size", "inp2.size", "out.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "compute_Bilinear_madd", "(", "module", ",", "inp1", ",", "inp2", ",", "out", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Bilinear", ")", "\n", "assert", "len", "(", "inp1", ".", "size", "(", ")", ")", "==", "2", "and", "len", "(", "inp2", ".", "size", "(", ")", ")", "==", "2", "and", "len", "(", "out", ".", "size", "(", ")", ")", "==", "2", "\n", "\n", "num_in_features_1", "=", "inp1", ".", "size", "(", ")", "[", "1", "]", "\n", "num_in_features_2", "=", "inp2", ".", "size", "(", ")", "[", "1", "]", "\n", "num_out_features", "=", "out", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "mul", "=", "num_in_features_1", "*", "num_in_features_2", "+", "num_in_features_2", "\n", "add", "=", "num_in_features_1", "*", "num_in_features_2", "+", "num_in_features_2", "-", "1", "\n", "return", "num_out_features", "*", "(", "mul", "+", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_module_madd": [[136, 158], ["isinstance", "compute_madd.compute_Conv2d_madd", "isinstance", "compute_madd.compute_ConvTranspose2d_madd", "isinstance", "compute_madd.compute_BatchNorm2d_madd", "isinstance", "compute_madd.compute_MaxPool2d_madd", "isinstance", "compute_madd.compute_AvgPool2d_madd", "isinstance", "compute_madd.compute_ReLU_madd", "isinstance", "compute_madd.compute_Softmax_madd", "isinstance", "compute_madd.compute_Linear_madd", "isinstance", "compute_madd.compute_Bilinear_madd", "print", "type"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_Conv2d_madd", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_ConvTranspose2d_madd", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_BatchNorm2d_madd", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_MaxPool2d_madd", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_AvgPool2d_madd", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_ReLU_madd", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_Softmax_madd", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_Linear_madd", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.compute_Bilinear_madd"], ["", "def", "compute_module_madd", "(", "module", ",", "inp", ",", "out", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "return", "compute_Conv2d_madd", "(", "module", ",", "inp", ",", "out", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "return", "compute_ConvTranspose2d_madd", "(", "module", ",", "inp", ",", "out", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "return", "compute_BatchNorm2d_madd", "(", "module", ",", "inp", ",", "out", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "        ", "return", "compute_MaxPool2d_madd", "(", "module", ",", "inp", ",", "out", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "AvgPool2d", ")", ":", "\n", "        ", "return", "compute_AvgPool2d_madd", "(", "module", ",", "inp", ",", "out", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "ReLU", ",", "nn", ".", "ReLU6", ")", ")", ":", "\n", "        ", "return", "compute_ReLU_madd", "(", "module", ",", "inp", ",", "out", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Softmax", ")", ":", "\n", "        ", "return", "compute_Softmax_madd", "(", "module", ",", "inp", ",", "out", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "return", "compute_Linear_madd", "(", "module", ",", "inp", ",", "out", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Bilinear", ")", ":", "\n", "        ", "return", "compute_Bilinear_madd", "(", "module", ",", "inp", "[", "0", "]", ",", "inp", "[", "1", "]", ",", "out", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"{type(module).__name__} is unsupported!\"", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.compute_madd.main": [[160, 162], ["None"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "pass", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance.__init__": [[170, 184], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "categories", ")", ":", "\n", "        ", "self", ".", "offset_vis", "=", "{", "}", "\n", "self", ".", "bbox_vis", "=", "{", "}", "\n", "self", ".", "human_vis", "=", "{", "}", "\n", "self", ".", "instance_vis", "=", "{", "}", "\n", "self", ".", "confs_vis", "=", "{", "}", "\n", "self", ".", "gt_instance_vis", "=", "{", "}", "\n", "self", ".", "gt_confs_vis", "=", "{", "}", "\n", "self", ".", "superpixel_vis", "=", "{", "}", "\n", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "categories", "=", "categories", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance.from_predictions": [[185, 226], ["int", "eval_densepose_crf.EvalInstance._restore_offset_size", "eval_densepose_crf.EvalInstance._filter_annotations", "eval_densepose_crf.EvalInstance._group_pixels", "eval_densepose_crf.get_instance", "eval_densepose_crf.compute_confidence", "eval_densepose_crf.get_instance", "eval_densepose_crf.compute_gt_confidence", "show.flow_vis.flow_compute_color"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_offset_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._filter_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._group_pixels", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_confidence", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_gt_confidence", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_compute_color"], ["", "def", "from_predictions", "(", "self", ",", "offset", ",", "semantic", ",", "semantic_scores", ",", "pose", ",", "edge", ",", "\n", "input_size", ",", "meta", ",", "gt_semantic", ",", "gt_human", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "\n", "target_size", "=", "semantic", ".", "shape", "\n", "offset", "=", "self", ".", "_restore_offset_size", "(", "offset", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "\n", "pose", "=", "self", ".", "_filter_annotations", "(", "pose", ")", "\n", "\n", "human", ",", "joint_score_map", ",", "skeleton_score_map", ",", "offset", "=", "self", ".", "_group_pixels", "(", "offset", ",", "semantic", ",", "pose", ",", "edge", ")", "\n", "\n", "\n", "#human = self.do_crf(human, (joint_score_map + skeleton_score_map)/2)", "\n", "\n", "#filename = os.path.join(IMAGE_DIR_VAL, '0'*(12-len(str(image_id))) + str(image_id) + '.jpg')", "\n", "#human = self._do_superpixel_refinement(filename, human)", "\n", "\n", "# process predictions", "\n", "instance", ",", "class_map", "=", "get_instance", "(", "semantic", ",", "human", ")", "\n", "\n", "confs", "=", "compute_confidence", "(", "semantic_scores", ",", "class_map", ",", "instance", ",", "\n", "joint_score_map", ",", "skeleton_score_map", ")", "\n", "self", ".", "confs_vis", "[", "image_id", "]", "=", "confs", "\n", "\n", "# process ground-truths", "\n", "gt_instance", ",", "gt_class_map", "=", "get_instance", "(", "gt_semantic", ",", "gt_human", ")", "\n", "gt_confs", "=", "compute_gt_confidence", "(", "gt_instance", ",", "gt_class_map", ")", "\n", "self", ".", "gt_confs_vis", "[", "image_id", "]", "=", "gt_confs", "\n", "\n", "# cache for debug", "\n", "if", "offset", "is", "not", "None", ":", "\n", "            ", "offset_vis", "=", "flow_compute_color", "(", "offset", "[", ":", ",", ":", ",", "1", "]", ",", "offset", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "offset_vis", "=", "None", "\n", "", "self", ".", "human_vis", "[", "image_id", "]", "=", "human", "\n", "self", ".", "instance_vis", "[", "image_id", "]", "=", "instance", "\n", "self", ".", "gt_instance_vis", "[", "image_id", "]", "=", "gt_instance", "\n", "self", ".", "offset_vis", "[", "image_id", "]", "=", "offset_vis", "\n", "self", ".", "bbox_vis", "[", "image_id", "]", "=", "[", "x", "[", "'bbox'", "]", "for", "x", "in", "pose", "if", "x", "[", "'score'", "]", ">", "0.1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance._do_superpixel_refinement": [[229, 254], ["skimage.segmentation.slic", "numpy.unique().tolist", "numpy.where", "copy.deepcopy", "cv2.imread", "numpy.where", "instance_ids.tolist.tolist.tolist", "max", "numpy.unique", "set", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["", "def", "_do_superpixel_refinement", "(", "self", ",", "filename", ",", "instance", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "filename", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "if", "instance", "is", "None", ":", "\n", "            ", "return", "instance", "\n", "\n", "", "segments", "=", "slic", "(", "im", ",", "n_segments", "=", "1150", ")", "\n", "self", ".", "superpixel_vis", "[", "os", ".", "path", ".", "basename", "(", "filename", ")", "[", ":", "-", "4", "]", "]", "=", "[", "im", ",", "segments", "]", "\n", "segment_ids", "=", "np", ".", "unique", "(", "segments", ")", ".", "tolist", "(", ")", "\n", "\n", "mask", "=", "np", ".", "where", "(", "instance", ">", "0", ",", "1", ",", "0", ")", "\n", "\n", "new_instance", "=", "copy", ".", "deepcopy", "(", "instance", ")", "\n", "for", "sid", "in", "segment_ids", ":", "\n", "            ", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "segments", "==", "sid", ")", "\n", "instance_ids", "=", "instance", "[", "y_index", ",", "x_index", "]", "\n", "instance_ids", "=", "instance_ids", ".", "tolist", "(", ")", "\n", "\n", "max_id", "=", "max", "(", "set", "(", "instance_ids", ")", ",", "key", "=", "instance_ids", ".", "count", ")", "\n", "if", "max_id", "==", "0", ":", "\n", "                ", "continue", "\n", "", "new_instance", "[", "y_index", ",", "x_index", "]", "=", "max_id", "\n", "", "new_instance", "=", "new_instance", "*", "mask", "\n", "\n", "return", "new_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance._skeleton_distance": [[257, 301], ["enumerate", "numpy.reshape", "numpy.ones", "range", "numpy.mean", "skeleton_distance.append", "matplotlib.figure", "matplotlib.imshow", "range", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "matplotlib.plot", "numpy.ones_like().astype", "numpy.ma.masked_array", "skfmm.distance", "int", "int", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "_skeleton_distance", "(", "self", ",", "pose", ",", "edge", ")", ":", "\n", "        ", "skeleton_distance", "=", "[", "]", "\n", "for", "pid", ",", "ann", "in", "enumerate", "(", "pose", ")", ":", "\n", "            ", "kps", "=", "ann", "[", "'keypoints'", "]", "\n", "kps", "=", "np", ".", "reshape", "(", "kps", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "all_dt", "=", "np", ".", "ones", "(", "(", "edge", ".", "shape", "[", "0", "]", ",", "edge", ".", "shape", "[", "1", "]", ",", "17", ")", ")", "\n", "for", "ii", "in", "range", "(", "17", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "score", "=", "kps", "[", "ii", ",", "2", "]", "\n", "if", "score", "<", "0.1", ":", "\n", "                        ", "continue", "\n", "\n", "", "x", ",", "y", "=", "int", "(", "kps", "[", "ii", "]", "[", "0", "]", ")", ",", "int", "(", "kps", "[", "ii", "]", "[", "1", "]", ")", "\n", "m", "=", "np", ".", "ones_like", "(", "edge", ")", ".", "astype", "(", "float", ")", "\n", "m", "[", "y", ",", "x", "]", "=", "0", "\n", "\n", "r_edge", "=", "edge", ">", "0.2", "\n", "m", "=", "np", ".", "ma", ".", "masked_array", "(", "m", ",", "r_edge", ")", "\n", "dt", "=", "skfmm", ".", "distance", "(", "m", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "\n", "", "all_dt", "[", ":", ",", ":", ",", "ii", "]", "=", "dt", "\n", "\n", "", "mean_dt", "=", "np", ".", "mean", "(", "all_dt", ",", "axis", "=", "-", "1", ")", "\n", "\n", "skeleton_distance", ".", "append", "(", "mean_dt", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "mean_dt", ")", "\n", "for", "ii", "in", "range", "(", "17", ")", ":", "\n", "                ", "if", "kps", "[", "ii", "]", "[", "2", "]", "<", "0.1", ":", "\n", "                    ", "continue", "\n", "", "plt", ".", "plot", "(", "kps", "[", "ii", "]", "[", "0", "]", ",", "kps", "[", "ii", "]", "[", "1", "]", ",", "'r+'", ")", "\n", "", "plt", ".", "savefig", "(", "'{}.jpg'", ".", "format", "(", "pid", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "edge", ">", "0.2", ")", "\n", "plt", ".", "savefig", "(", "'edge.jpg'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "return", "skeleton_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance._group_pixels": [[302, 365], ["numpy.where", "numpy.where", "eval_densepose_crf.EvalInstance._prepare_sparse_instance", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.min", "numpy.argmin", "numpy.array", "numpy.where", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "len", "eval_densepose_crf.EvalInstance._skeleton_distance", "len", "numpy.zeros_like", "range", "numpy.array", "numpy.array", "numpy.stack", "zip", "numpy.reshape", "min"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._prepare_sparse_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._skeleton_distance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "def", "_group_pixels", "(", "self", ",", "offset", ",", "semantic", ",", "pose", ",", "edge", ")", ":", "\n", "        ", "h", ",", "w", "=", "semantic", ".", "shape", "\n", "person_mask", "=", "np", ".", "where", "(", "semantic", ">", "0", ",", "1", ",", "0", ")", "\n", "offset", "[", ":", ",", ":", ",", "0", "]", "*=", "person_mask", "\n", "offset", "[", ":", ",", ":", ",", "1", "]", "*=", "person_mask", "\n", "\n", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "semantic", ">", "0", ")", "\n", "offset_vector", "=", "offset", "[", "y_index", ",", "x_index", ",", "0", ":", "2", "]", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "xy_offset", "=", "offset_vector", "+", "np", ".", "stack", "(", "(", "x_index", ",", "y_index", ")", ")", ".", "T", "\n", "\n", "xy_list", ",", "id_list", ",", "joint_score_list", ",", "person_score_list", ",", "scale_list", "=", "self", ".", "_prepare_sparse_instance", "(", "pose", ")", "\n", "\n", "if", "len", "(", "xy_list", ")", "==", "0", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "xy_list", "=", "np", ".", "concatenate", "(", "xy_list", ",", "axis", "=", "0", ")", "\n", "xy_pose", "=", "np", ".", "array", "(", "xy_list", ")", "\n", "\n", "xy_offset", "=", "xy_offset", "[", "None", ",", "...", "]", "# 1 * N * 2", "\n", "xy_pose", "=", "xy_pose", "[", ":", ",", "None", ",", "...", "]", "# K * 1 * 2", "\n", "\n", "# joint distance (local metric)", "\n", "score_list", "=", "[", "s1", "+", "s2", "for", "s1", ",", "s2", "in", "zip", "(", "joint_score_list", ",", "person_score_list", ")", "]", "\n", "score", "=", "np", ".", "array", "(", "score_list", ")", "\n", "joint_distance", "=", "np", ".", "linalg", ".", "norm", "(", "xy_pose", "-", "xy_offset", ",", "axis", "=", "-", "1", ")", "# K * N", "\n", "#joint_distance = joint_distance.T / (score + 1e-6)", "\n", "#distance = joint_distance.T", "\n", "distance", "=", "joint_distance", "\n", "\n", "if", "0", ":", "\n", "# skeleton distance (global metric)", "\n", "            ", "skeleton_distance", "=", "self", ".", "_skeleton_distance", "(", "pose", ",", "edge", ")", "\n", "skeleton_num", "=", "len", "(", "skeleton_distance", ")", "\n", "\n", "assert", "skeleton_num", "==", "joint_distance", ".", "shape", "[", "0", "]", "//", "17", "\n", "\n", "distance", "=", "np", ".", "zeros_like", "(", "joint_distance", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ii", "in", "range", "(", "skeleton_num", ")", ":", "\n", "                ", "jnt_dist", "=", "joint_distance", "[", "ii", "*", "17", ":", "(", "ii", "+", "1", ")", "*", "17", ",", ":", "]", "# 17 x N", "\n", "skl_dist", "=", "skeleton_distance", "[", "ii", "]", "[", "y_index", ",", "x_index", "]", "# 1 x N", "\n", "skl_dist", "=", "np", ".", "reshape", "(", "skl_dist", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "distance", "[", "ii", "*", "17", ":", "(", "ii", "+", "1", ")", "*", "17", ",", ":", "]", "=", "jnt_dist", "*", "skl_dist", "\n", "\n", "", "", "min_dist", "=", "np", ".", "min", "(", "distance", ",", "axis", "=", "0", ")", "\n", "index", "=", "np", ".", "argmin", "(", "distance", ",", "axis", "=", "0", ")", "\n", "instance_list", "=", "np", ".", "array", "(", "id_list", ")", "\n", "instance_id", "=", "instance_list", "[", "index", "]", "+", "1", "\n", "\n", "remote_pixel_indexs", "=", "np", ".", "where", "(", "min_dist", ">", "0.01", "*", "min", "(", "h", ",", "w", ")", ")", "\n", "instance_id", "[", "remote_pixel_indexs", "]", "=", "0", "\n", "\n", "instance", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "instance", "[", "y_index", ",", "x_index", "]", "=", "instance_id", "\n", "\n", "joint_score_map", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "float", ")", "\n", "joint_score_map", "[", "y_index", ",", "x_index", "]", "=", "np", ".", "array", "(", "joint_score_list", ")", "[", "index", "]", "\n", "\n", "skeleton_score_map", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "float", ")", "\n", "skeleton_score_map", "[", "y_index", ",", "x_index", "]", "=", "np", ".", "array", "(", "person_score_list", ")", "[", "index", "]", "\n", "\n", "return", "instance", ",", "joint_score_map", ",", "skeleton_score_map", ",", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance._filter_annotations": [[366, 379], ["numpy.reshape", "keypoints[].tolist", "len", "new_annotations.append"], "methods", ["None"], ["", "def", "_filter_annotations", "(", "self", ",", "annotations", ",", "th_skl", "=", "0.3", ",", "th_joint", "=", "0.1", ")", ":", "\n", "        ", "annotations", "=", "[", "ann", "for", "ann", "in", "annotations", "if", "ann", "[", "'score'", "]", ">=", "th_skl", "]", "\n", "\n", "new_annotations", "=", "[", "]", "\n", "for", "ann", "in", "annotations", ":", "\n", "            ", "keypoints", "=", "ann", "[", "'keypoints'", "]", "\n", "keypoints", "=", "np", ".", "reshape", "(", "keypoints", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "scores", "=", "keypoints", "[", ":", ",", "-", "1", "]", ".", "tolist", "(", ")", "\n", "size", "=", "len", "(", "[", "s", "for", "s", "in", "scores", "if", "s", ">", "th_joint", "]", ")", "\n", "if", "size", ">", "4", ":", "\n", "                ", "new_annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "return", "new_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance._prepare_sparse_instance": [[380, 402], ["enumerate", "numpy.reshape", "xy_list.append", "id_list.extend", "joint_score_list.extend", "math.sqrt", "scale_list.append", "person_score_list.extend", "kps[].tolist"], "methods", ["None"], ["", "def", "_prepare_sparse_instance", "(", "self", ",", "annotations", ")", ":", "\n", "        ", "xy_list", "=", "[", "]", "\n", "id_list", "=", "[", "]", "\n", "scale_list", "=", "[", "]", "\n", "joint_score_list", "=", "[", "]", "\n", "person_score_list", "=", "[", "]", "\n", "\n", "for", "pid", ",", "ann", "in", "enumerate", "(", "annotations", ")", ":", "\n", "            ", "kps", "=", "ann", "[", "'keypoints'", "]", "\n", "kps", "=", "np", ".", "reshape", "(", "kps", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "xy_list", ".", "append", "(", "kps", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "id_list", ".", "extend", "(", "[", "pid", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "joint_score_list", ".", "extend", "(", "kps", "[", ":", ",", "-", "1", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "bbox", "=", "ann", "[", "'bbox'", "]", "\n", "scale", "=", "math", ".", "sqrt", "(", "bbox", "[", "2", "]", "*", "bbox", "[", "3", "]", ")", "\n", "scale_list", ".", "append", "(", "scale", ")", "\n", "\n", "person_score_list", ".", "extend", "(", "[", "ann", "[", "'score'", "]", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "return", "xy_list", ",", "id_list", ",", "joint_score_list", ",", "person_score_list", ",", "scale_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance._restore_offset_size": [[403, 415], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.interpolate", "torch.interpolate", "offset_rescale[].permute().cpu().numpy", "transforms.Preprocess.offset_annotation_inverse", "offset_rescale[].permute().cpu", "offset_rescale[].permute"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.offset_annotation_inverse"], ["", "def", "_restore_offset_size", "(", "self", ",", "offset", ",", "meta", ",", "input_size", ",", "target_size", ")", ":", "\n", "        ", "offset", "=", "torch", ".", "tensor", "(", "offset", ")", "\n", "offset_rescale", "=", "F", ".", "interpolate", "(", "input", "=", "offset", ",", "size", "=", "input_size", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scale", "=", "(", "input_size", "[", "0", "]", "-", "1", ")", "//", "(", "offset", ".", "shape", "[", "2", "]", "-", "1", ")", "\n", "offset_rescale", "*=", "scale", "\n", "offset_rescale", "=", "offset_rescale", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "offset", "=", "transforms", ".", "Preprocess", ".", "offset_annotation_inverse", "(", "offset_rescale", ",", "\n", "target_size", ",", "\n", "meta", ")", "\n", "return", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance.summary": [[416, 426], ["evaluation.metrics.InstanceMetrics", "evaluation.metrics.InstanceMetrics.compute_AP", "print", "print", "numpy.nanmean", "numpy.array", "list", "evaluation.metrics.InstanceMetrics.compute_AP.values"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics.compute_AP", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "metric", "=", "InstanceMetrics", "(", "self", ".", "ins_output_dir", ",", "self", ".", "gt_ins_output_dir", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "categories", "=", "self", ".", "categories", ")", "\n", "\n", "AP_map", "=", "metric", ".", "compute_AP", "(", ")", "\n", "print", "(", "'Mean AP^r: {}'", ".", "format", "(", "\n", "np", ".", "nanmean", "(", "np", ".", "array", "(", "list", "(", "AP_map", ".", "values", "(", ")", ")", ")", ")", "\n", ")", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalInstance.write_predictions": [[427, 513], ["os.makedirs", "LOG.info", "eval_densepose_crf.EvalInstance.offset_vis.items", "os.makedirs", "LOG.info", "eval_densepose_crf.EvalInstance.human_vis.items", "os.makedirs", "LOG.info", "eval_densepose_crf.EvalInstance.instance_vis.items", "os.makedirs", "LOG.info", "eval_densepose_crf.EvalInstance.gt_instance_vis.items", "os.makedirs", "LOG.info", "eval_densepose_crf.EvalInstance.superpixel_vis.items", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "open", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "open", "os.path.join", "skimage.segmentation.mark_boundaries", "cv2.imwrite", "cv2.rectangle", "os.path.join", "open.write", "os.path.join", "open.write", "[].astype", "str", "int", "int", "str", "str", "str", "str", "int", "int", "int", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "write_predictions", "(", "self", ",", "output", ")", ":", "\n", "        ", "output_dir", "=", "output", "+", "'.offset'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting offset predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "offset_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "for", "bbox", "in", "self", ".", "bbox_vis", "[", "key", "]", ":", "\n", "                ", "pt1", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", ")", "\n", "pt2", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", "+", "int", "(", "bbox", "[", "2", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", "+", "int", "(", "bbox", "[", "3", "]", ")", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "image", ",", "pt1", ",", "pt2", ",", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "\n", "", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.human'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting human segmentation predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "human_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "ins_output_dir", "=", "output", "+", "'.instance'", "\n", "os", ".", "makedirs", "(", "ins_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting instance parsing predictions to {}'", ".", "format", "(", "ins_output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "instance_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "ins_output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "# save confidence", "\n", "conf_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "ins_output_dir", ",", "str", "(", "key", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "confs", "=", "self", ".", "confs_vis", "[", "key", "]", "\n", "for", "conf", "in", "confs", ":", "\n", "                ", "conf_file", ".", "write", "(", "'{} {}\\n'", ".", "format", "(", "conf", "[", "0", "]", ",", "conf", "[", "1", "]", ")", ")", "\n", "\n", "", "", "gt_ins_output_dir", "=", "output", "+", "'.instance.gt'", "\n", "os", ".", "makedirs", "(", "gt_ins_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting instance parsing predictions to {}'", ".", "format", "(", "gt_ins_output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "gt_instance_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "gt_ins_output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "# save confidence", "\n", "conf_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "gt_ins_output_dir", ",", "str", "(", "key", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "confs", "=", "self", ".", "gt_confs_vis", "[", "key", "]", "\n", "for", "conf", "in", "confs", ":", "\n", "                ", "conf_file", ".", "write", "(", "'{} {} {}\\n'", ".", "format", "(", "conf", "[", "0", "]", ",", "conf", "[", "1", "]", ",", "conf", "[", "2", "]", ")", ")", "\n", "\n", "", "", "output_dir", "=", "output", "+", "'.superpixel'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting superpixel predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "superpixel_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "mark_boundaries", "(", "value", "[", "0", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float", ")", ",", "value", "[", "1", "]", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "filename", ",", "pred", ")", "\n", "\n", "", "self", ".", "ins_output_dir", "=", "ins_output_dir", "\n", "self", ".", "gt_ins_output_dir", "=", "gt_ins_output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalSemantic.__init__": [[516, 527], ["numpy.zeros", "eval_densepose_crf.get_palette"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_palette"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "15", ")", ":", "\n", "        ", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "self", ".", "palette", "=", "get_palette", "(", "num_classes", ")", "\n", "\n", "self", ".", "segm_preds", "=", "{", "}", "\n", "self", ".", "edge_preds", "=", "{", "}", "\n", "self", ".", "vote_preds", "=", "{", "}", "\n", "self", ".", "segm_gts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalSemantic.from_predictions": [[528, 574], ["eval_densepose_crf.EvalSemantic.get_mask", "int", "eval_densepose_crf.EvalSemantic.image_ids.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().numpy", "numpy.asarray", "transforms.Preprocess.semantic_annotation_inverse", "eval_densepose_crf.get_confusion_matrix", "numpy.argmax", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().squeeze().numpy", "transforms.Preprocess.semantic_annotation_inverse", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().squeeze().numpy", "transforms.Preprocess.semantic_annotation_inverse", "torch.interpolate.squeeze", "torch.interpolate.squeeze().squeeze", "torch.interpolate.squeeze().squeeze", "torch.interpolate.squeeze", "torch.interpolate.squeeze"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalSemantic.get_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_confusion_matrix", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "from_predictions", "(", "self", ",", "pred_segm", ",", "input_size", ",", "meta", ",", "\n", "gt", "=", "None", ",", "pred_edge", "=", "None", ",", "pred_vote", "=", "None", ")", ":", "\n", "        ", "gt_semantic", ",", "gt_human", "=", "self", ".", "get_mask", "(", "gt", ")", "\n", "target_size", "=", "gt_semantic", ".", "shape", "\n", "segm_pred", "=", "None", "\n", "if", "gt_semantic", "is", "not", "None", ":", "\n", "            ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "segm_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_segm", ")", "\n", "segm_pred_tensor", "=", "F", ".", "interpolate", "(", "segm_pred_tensor", ",", "input_size", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "segm_pred_scores", "=", "segm_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "segm_pred", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "segm_pred_scores", ",", "axis", "=", "0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "segm_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "segm_pred", ",", "target_size", ",", "meta", ")", "\n", "self", ".", "segm_preds", "[", "image_id", "]", "=", "segm_pred", "\n", "\n", "if", "pred_vote", "is", "not", "None", ":", "\n", "                ", "vote_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_vote", ")", "\n", "vote_pred_tensor", "=", "F", ".", "interpolate", "(", "vote_pred_tensor", ",", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "vote_pred", "=", "vote_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "vote_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "vote_pred", ",", "target_size", ",", "meta", "\n", ")", "\n", "self", ".", "vote_preds", "[", "image_id", "]", "=", "vote_pred", "\n", "\n", "", "if", "pred_edge", "is", "not", "None", ":", "\n", "                ", "edge_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_edge", ")", "\n", "edge_pred_tensor", "=", "F", ".", "interpolate", "(", "edge_pred_tensor", ",", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "edge_pred", "=", "edge_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "edge_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "edge_pred", ",", "target_size", ",", "meta", "\n", ")", "\n", "self", ".", "edge_preds", "[", "image_id", "]", "=", "edge_pred", "\n", "\n", "", "ignore_index", "=", "gt_semantic", "!=", "255", "\n", "seg_gt_", "=", "gt_semantic", "[", "ignore_index", "]", "\n", "seg_pred_", "=", "segm_pred", "[", "ignore_index", "]", "\n", "\n", "self", ".", "confusion_matrix", "+=", "get_confusion_matrix", "(", "seg_gt_", ",", "seg_pred_", ",", "\n", "self", ".", "num_classes", ")", "\n", "", "if", "pred_edge", "is", "not", "None", ":", "\n", "            ", "return", "segm_pred", ",", "segm_pred_scores", ",", "gt_semantic", ",", "gt_human", ",", "edge_pred", "\n", "", "return", "segm_pred", ",", "segm_pred_scores", ",", "gt_semantic", ",", "gt_human", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalSemantic.summary": [[575, 586], ["eval_densepose_crf.EvalSemantic.confusion_matrix.sum", "eval_densepose_crf.EvalSemantic.confusion_matrix.sum", "numpy.diag", "IU_array.mean", "LOG.info", "numpy.diag.sum", "eval_densepose_crf.EvalSemantic.sum", "numpy.maximum", "numpy.maximum"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "pos", "=", "self", ".", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "self", ".", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "\n", "\n", "pixel_accuracy", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_accuracy", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IU", "=", "IU_array", ".", "mean", "(", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nMean IoU: {}, PixelAcc: {}, Mean Acc: {}'", ".", "format", "(", "mean_IU", ",", "pixel_accuracy", ",", "mean_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalSemantic.write_predictions": [[587, 627], ["os.makedirs", "LOG.info", "eval_densepose_crf.EvalSemantic.segm_preds.items", "os.makedirs", "LOG.info", "eval_densepose_crf.EvalSemantic.segm_gts.items", "os.makedirs", "LOG.info", "eval_densepose_crf.EvalSemantic.edge_preds.items", "os.makedirs", "LOG.info", "eval_densepose_crf.EvalSemantic.vote_preds.items", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.save", "str", "str", "str", "PIL.Image.fromarray", "str", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "write_predictions", "(", "self", ",", "output", ")", ":", "\n", "        ", "output_dir", "=", "output", "+", "'.global-parsing'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "segm_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", ")", "\n", "pred", ".", "putpalette", "(", "self", ".", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.global-parsing.gt'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing ground-truths to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "segm_gts", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", ")", "\n", "pred", ".", "putpalette", "(", "self", ".", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.edge'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "edge_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", "*", "255", ")", ".", "convert", "(", "'L'", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.vote'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting voting predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "vote_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", "*", "255", ")", ".", "convert", "(", "'L'", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalSemantic.get_mask": [[628, 644], ["enumerate", "numpy.copy", "numpy.where", "numpy.zeros_like", "numpy.zeros_like"], "methods", ["None"], ["", "", "def", "get_mask", "(", "self", ",", "anns", ")", ":", "\n", "        ", "gt_mask", "=", "None", "\n", "gt_human", "=", "None", "\n", "for", "ii", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "if", "'parsing_original'", "in", "ann", ":", "\n", "                ", "single_mask", "=", "np", ".", "copy", "(", "ann", "[", "'parsing_original'", "]", ")", "\n", "if", "gt_mask", "is", "None", ":", "\n", "                    ", "gt_mask", "=", "np", ".", "zeros_like", "(", "single_mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "gt_human", "is", "None", ":", "\n", "                    ", "gt_human", "=", "np", ".", "zeros_like", "(", "single_mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "single_mask_bool", "=", "np", ".", "where", "(", "single_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "gt_mask", "[", "single_mask_bool", ">", "0", "]", "=", "single_mask", "[", "single_mask_bool", ">", "0", "]", "\n", "gt_human", "[", "single_mask_bool", ">", "0", "]", "=", "ii", "+", "1", "\n", "\n", "", "", "return", "gt_mask", ",", "gt_human", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalCoco.__init__": [[647, 672], ["LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "coco", ",", "processor", ",", "*", ",", "\n", "max_per_image", "=", "20", ",", "\n", "category_ids", "=", "None", ",", "\n", "iou_type", "=", "'keypoints'", ",", "\n", "small_threshold", "=", "0.0", ")", ":", "\n", "        ", "if", "category_ids", "is", "None", ":", "\n", "            ", "category_ids", "=", "[", "1", "]", "\n", "\n", "", "self", ".", "coco", "=", "coco", "\n", "self", ".", "processor", "=", "processor", "\n", "self", ".", "max_per_image", "=", "max_per_image", "\n", "self", ".", "category_ids", "=", "category_ids", "\n", "self", ".", "iou_type", "=", "iou_type", "\n", "self", ".", "small_threshold", "=", "small_threshold", "\n", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "eval", "=", "None", "\n", "self", ".", "decoder_time", "=", "0.0", "\n", "self", ".", "nn_time", "=", "0.0", "\n", "\n", "self", ".", "pose_vis", "=", "{", "}", "\n", "\n", "LOG", ".", "debug", "(", "'max = %d, category ids = %s, iou_type = %s'", ",", "\n", "self", ".", "max_per_image", ",", "self", ".", "category_ids", ",", "self", ".", "iou_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalCoco.stats": [[673, 694], ["eval_densepose_crf.EvalCoco.coco.loadRes", "COCOeval", "LOG.info", "eval_densepose_crf.EvalCoco.eval.evaluate", "eval_densepose_crf.EvalCoco.eval.accumulate", "eval_densepose_crf.EvalCoco.eval.summarize", "print"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifDetHr.accumulate"], ["", "def", "stats", "(", "self", ",", "predictions", "=", "None", ",", "image_ids", "=", "None", ")", ":", "\n", "# from pycocotools.cocoeval import COCOeval", "\n", "        ", "if", "predictions", "is", "None", ":", "\n", "            ", "predictions", "=", "self", ".", "predictions", "\n", "", "if", "image_ids", "is", "None", ":", "\n", "            ", "image_ids", "=", "self", ".", "image_ids", "\n", "\n", "", "coco_eval", "=", "self", ".", "coco", ".", "loadRes", "(", "predictions", ")", "\n", "\n", "self", ".", "eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_eval", ",", "iouType", "=", "self", ".", "iou_type", ")", "\n", "LOG", ".", "info", "(", "'cat_ids: %s'", ",", "self", ".", "category_ids", ")", "\n", "if", "self", ".", "category_ids", ":", "\n", "            ", "self", ".", "eval", ".", "params", ".", "catIds", "=", "self", ".", "category_ids", "\n", "\n", "", "if", "image_ids", "is", "not", "None", ":", "\n", "            ", "print", "(", "'image ids'", ",", "image_ids", ")", "\n", "self", ".", "eval", ".", "params", ".", "imgIds", "=", "image_ids", "\n", "", "self", ".", "eval", ".", "evaluate", "(", ")", "\n", "self", ".", "eval", ".", "accumulate", "(", ")", "\n", "self", ".", "eval", ".", "summarize", "(", ")", "\n", "return", "self", ".", "eval", ".", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalCoco.count_ops": [[695, 702], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "thop.profile", "LOG.info", "next", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "@", "staticmethod", "\n", "def", "count_ops", "(", "model", ",", "height", "=", "641", ",", "width", "=", "641", ")", ":", "\n", "        ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "dummy_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "height", ",", "width", ",", "device", "=", "device", ")", "\n", "gmacs", ",", "params", "=", "thop", ".", "profile", "(", "model", ",", "inputs", "=", "(", "dummy_input", ",", ")", ")", "\n", "LOG", ".", "info", "(", "'GMACs = {0:.2f}, million params = {1:.2f}'", ".", "format", "(", "gmacs", "/", "1e9", ",", "params", "/", "1e6", ")", ")", "\n", "return", "gmacs", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalCoco.view_annotations": [[703, 717], ["show.AnnotationPainter", "open", "PIL.Image.open().convert", "show.image_canvas", "show.AnnotationPainter.annotations", "os.path.join", "show.image_canvas", "show.white_screen", "show.AnnotationPainter.annotations", "show.AnnotationPainter.annotations", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "@", "staticmethod", "\n", "def", "view_annotations", "(", "meta", ",", "predictions", ",", "ground_truth", ")", ":", "\n", "        ", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "IMAGE_DIR_VAL", ",", "meta", "[", "'file_name'", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "            ", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n", "", "if", "ground_truth", ":", "\n", "            ", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "                ", "show", ".", "white_screen", "(", "ax", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "ground_truth", ",", "color", "=", "'grey'", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalCoco.from_predictions": [[718, 772], ["int", "eval_densepose_crf.EvalCoco.image_ids.append", "transforms.Preprocess.annotations_inverse", "len", "transforms.Preprocess.annotations_inverse", "eval_densepose_crf.EvalCoco.view_annotations", "pred.json_data", "image_annotations.append", "image_annotations.append", "eval_densepose_crf.EvalCoco.stats", "LOG.debug", "transforms.Preprocess.annotations_inverse.append", "transforms.Preprocess.annotations_inverse.append", "pred.json_data.items", "numpy.zeros().tolist", "pred.scale", "annotation.AnnotationDet().set", "annotation.Annotation().set", "numpy.zeros", "annotation.AnnotationDet", "annotation.Annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.view_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.json_data", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "", "", "def", "from_predictions", "(", "self", ",", "predictions", ",", "meta", ",", "debug", "=", "False", ",", "gt", "=", "None", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "predictions", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "predictions", ",", "meta", ")", "\n", "if", "self", ".", "small_threshold", ":", "\n", "            ", "predictions", "=", "[", "pred", "for", "pred", "in", "predictions", "\n", "if", "pred", ".", "scale", "(", "v_th", "=", "0.01", ")", ">=", "self", ".", "small_threshold", "]", "\n", "", "if", "len", "(", "predictions", ")", ">", "self", ".", "max_per_image", ":", "\n", "            ", "predictions", "=", "predictions", "[", ":", "self", ".", "max_per_image", "]", "\n", "\n", "", "self", ".", "pose_vis", "[", "meta", "[", "'file_name'", "]", "]", "=", "predictions", "\n", "\n", "if", "debug", ":", "\n", "            ", "gt_anns", "=", "[", "]", "\n", "for", "g", "in", "gt", ":", "\n", "                ", "if", "'bbox'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "AnnotationDet", "(", "COCO_CATEGORIES", ")", ".", "set", "(", "g", "[", "'category_id'", "]", "-", "1", ",", "None", ",", "g", "[", "'bbox'", "]", ")", "\n", ")", "\n", "", "if", "'keypoints'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "Annotation", "(", "COCO_KEYPOINTS", ",", "COCO_PERSON_SKELETON", ")", "\n", ".", "set", "(", "g", "[", "'keypoints'", "]", ",", "fixed_score", "=", "None", ")", "\n", ")", "\n", "", "", "gt_anns", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "gt_anns", ",", "meta", ")", "\n", "self", ".", "view_annotations", "(", "meta", ",", "predictions", ",", "gt_anns", ")", "\n", "\n", "", "image_annotations", "=", "[", "]", "\n", "for", "pred", "in", "predictions", ":", "\n", "            ", "pred_data", "=", "pred", ".", "json_data", "(", ")", "\n", "pred_data", "[", "'image_id'", "]", "=", "image_id", "\n", "pred_data", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "pred_data", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'category_id'", ",", "'score'", ",", "'keypoints'", ",", "'bbox'", ",", "'image_id'", ")", "\n", "}", "\n", "image_annotations", ".", "append", "(", "pred_data", ")", "\n", "\n", "# force at least one annotation per image (for pycocotools)", "\n", "", "if", "not", "image_annotations", ":", "\n", "            ", "image_annotations", ".", "append", "(", "{", "\n", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "1", ",", "\n", "'keypoints'", ":", "np", ".", "zeros", "(", "(", "17", "*", "3", ",", ")", ")", ".", "tolist", "(", ")", ",", "\n", "'bbox'", ":", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "'score'", ":", "0.001", ",", "\n", "}", ")", "\n", "\n", "", "if", "debug", ":", "\n", "            ", "self", ".", "stats", "(", "image_annotations", ",", "[", "image_id", "]", ")", "\n", "LOG", ".", "debug", "(", "meta", ")", "\n", "\n", "", "self", ".", "predictions", "+=", "image_annotations", "\n", "return", "image_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.EvalCoco.write_predictions": [[773, 814], ["LOG.info", "LOG.info", "show.KeypointPainter", "show.AnnotationPainter", "os.makedirs", "LOG.info", "eval_densepose_crf.EvalCoco.pose_vis.items", "open", "json.dump", "zipfile.ZipFile", "myzip.write", "os.path.join", "os.path.join", "LOG.debug", "open", "PIL.Image.open().convert", "show.image_canvas", "show.AnnotationPainter.annotations", "annotation.items", "str", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "def", "write_predictions", "(", "self", ",", "filename", ")", ":", "\n", "        ", "predictions", "=", "[", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "annotation", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'image_id'", ",", "'category_id'", ",", "'keypoints'", ",", "'score'", ")", "}", "\n", "for", "annotation", "in", "self", ".", "predictions", "\n", "]", "\n", "with", "open", "(", "filename", "+", "'.pred.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "predictions", ",", "f", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.pred.json'", ",", "filename", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "filename", "+", "'.zip'", ",", "'w'", ")", "as", "myzip", ":", "\n", "            ", "myzip", ".", "write", "(", "filename", "+", "'.pred.json'", ",", "arcname", "=", "'predictions.json'", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.zip'", ",", "filename", ")", "\n", "\n", "# debug", "\n", "# visualizers", "\n", "keypoint_painter", "=", "show", ".", "KeypointPainter", "(", "\n", "color_connections", "=", "True", ",", "\n", "linewidth", "=", "6", ",", "\n", ")", "\n", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", "\n", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n", "output_dir", "=", "filename", "+", "'.pose'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting pose predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "pose_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "imagefile", "=", "os", ".", "path", ".", "join", "(", "IMAGE_DIR_VAL", ",", "key", ")", "\n", "with", "open", "(", "imagefile", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "image_out_name", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "LOG", ".", "debug", "(", "'image output = %s'", ",", "image_out_name", ")", "\n", "with", "show", ".", "image_canvas", "(", "cpu_image", ",", "\n", "image_out_name", ",", "\n", "show", "=", "False", ",", "\n", "fig_width", "=", "10.0", ",", "\n", "dpi_factor", "=", "1.0", ")", "as", "ax", ":", "\n", "                ", "annotation_painter", ".", "annotations", "(", "ax", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.get_palette": [[47, 63], ["range"], "function", ["None"], ["def", "get_palette", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "            ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.get_confusion_matrix": [[68, 86], ["numpy.bincount", "numpy.zeros", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "get_confusion_matrix", "(", "gt_label", ",", "pred_label", ",", "class_num", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the confusion matrix by given label and pred\n        :param gt_label: the ground truth label\n        :param pred_label: the pred label\n        :param class_num: the nunber of class\n    \"\"\"", "\n", "index", "=", "(", "gt_label", "*", "class_num", "+", "pred_label", ")", ".", "astype", "(", "'int32'", ")", "\n", "label_count", "=", "np", ".", "bincount", "(", "index", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "class_num", ",", "class_num", ")", ")", "\n", "\n", "for", "i_label", "in", "range", "(", "class_num", ")", ":", "\n", "        ", "for", "i_pred_label", "in", "range", "(", "class_num", ")", ":", "\n", "            ", "cur_index", "=", "i_label", "*", "class_num", "+", "i_pred_label", "\n", "if", "cur_index", "<", "len", "(", "label_count", ")", ":", "\n", "                ", "confusion_matrix", "[", "i_label", ",", "i_pred_label", "]", "=", "label_count", "[", "cur_index", "]", "\n", "\n", "", "", "", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.compute_gt_confidence": [[88, 95], ["class_map.keys", "confs.append"], "function", ["None"], ["", "def", "compute_gt_confidence", "(", "gt_instance", ",", "class_map", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "label", "in", "class_map", ".", "keys", "(", ")", ":", "\n", "        ", "cls", "=", "class_map", "[", "label", "]", "\n", "confs", ".", "append", "(", "[", "label", ",", "cls", ",", "1", "]", ")", "\n", "\n", "", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.compute_confidence": [[97, 121], ["class_map.keys", "pow", "confs.append", "semantic_scores[].reshape", "confidence.sum", "len", "joint_score_map.reshape", "confidence.sum", "len", "skeleton_score_map.reshape", "confidence.sum", "len", "numpy.where", "numpy.where", "numpy.where", "instance_label.reshape", "instance_label.reshape", "instance_label.reshape"], "function", ["None"], ["", "def", "compute_confidence", "(", "semantic_scores", ",", "class_map", ",", "instance_label", ",", "\n", "joint_score_map", ",", "skeleton_score_map", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "label", "in", "class_map", ".", "keys", "(", ")", ":", "\n", "        ", "cls", "=", "class_map", "[", "label", "]", "\n", "confidence", "=", "semantic_scores", "[", "cls", ",", ":", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_semantic", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "confidence", "=", "joint_score_map", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_joint", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "confidence", "=", "skeleton_score_map", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_skeleton", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "conf_final", "=", "pow", "(", "conf_semantic", "*", "conf_joint", "*", "conf_skeleton", ",", "-", "3", ")", "\n", "confs", ".", "append", "(", "[", "cls", ",", "conf_final", "]", ")", "\n", "\n", "", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.get_instance": [[123, 167], ["numpy.zeros_like", "numpy.unique", "len", "range", "numpy.unique", "numpy.unique", "range", "np.zeros_like.max", "print", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "get_instance", "(", "cat_gt", ",", "human_gt", ")", ":", "\n", "    ", "instance_gt", "=", "np", ".", "zeros_like", "(", "cat_gt", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "human_ids", "=", "np", ".", "unique", "(", "human_gt", ")", "[", "1", ":", "]", "\n", "class_map", "=", "{", "}", "\n", "\n", "total_part_num", "=", "0", "\n", "for", "id", "in", "human_ids", ":", "\n", "        ", "human_part_label", "=", "(", "np", ".", "where", "(", "human_gt", "==", "id", ",", "1", ",", "0", ")", "*", "cat_gt", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "part_classes", "=", "np", ".", "unique", "(", "human_part_label", ")", "\n", "\n", "exceed", "=", "False", "\n", "for", "part_id", "in", "part_classes", ":", "\n", "            ", "if", "part_id", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "total_part_num", "+=", "1", "\n", "\n", "if", "total_part_num", ">", "255", ":", "\n", "                ", "print", "(", "\n", "\"total_part_num exceed, return current instance map: {}\"", ".", "format", "(", "\n", "total_part_num", ")", "\n", ")", "\n", "exceed", "=", "True", "\n", "break", "\n", "\n", "", "class_map", "[", "total_part_num", "]", "=", "part_id", "\n", "instance_gt", "[", "np", ".", "where", "(", "human_part_label", "==", "part_id", ")", "]", "=", "total_part_num", "\n", "", "if", "exceed", ":", "\n", "            ", "break", "\n", "\n", "# Make instance id continous.", "\n", "", "", "ori_cur_labels", "=", "np", ".", "unique", "(", "instance_gt", ")", "\n", "total_num_label", "=", "len", "(", "ori_cur_labels", ")", "\n", "if", "instance_gt", ".", "max", "(", ")", "+", "1", "!=", "total_num_label", ":", "\n", "        ", "for", "label", "in", "range", "(", "1", ",", "total_num_label", ")", ":", "\n", "            ", "instance_gt", "[", "instance_gt", "==", "ori_cur_labels", "[", "label", "]", "]", "=", "label", "\n", "\n", "", "", "final_class_map", "=", "{", "}", "\n", "for", "label", "in", "range", "(", "1", ",", "total_num_label", ")", ":", "\n", "        ", "if", "label", ">=", "1", ":", "\n", "            ", "final_class_map", "[", "label", "]", "=", "class_map", "[", "ori_cur_labels", "[", "label", "]", "]", "\n", "\n", "", "", "return", "instance_gt", ",", "final_class_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.default_output_name": [[816, 840], ["None"], "function", ["None"], ["", "", "", "", "def", "default_output_name", "(", "args", ")", ":", "\n", "    ", "output", "=", "'{}.evalcoco-{}edge{}'", ".", "format", "(", "\n", "args", ".", "checkpoint", ",", "\n", "'{}-'", ".", "format", "(", "args", ".", "dataset", ")", "if", "args", ".", "dataset", "!=", "'val'", "else", "''", ",", "\n", "args", ".", "long_edge", ",", "\n", ")", "\n", "if", "args", ".", "n", ":", "\n", "        ", "output", "+=", "'-samples{}'", ".", "format", "(", "args", ".", "n", ")", "\n", "", "if", "not", "args", ".", "force_complete_pose", ":", "\n", "        ", "output", "+=", "'-noforcecompletepose'", "\n", "", "if", "args", ".", "orientation_invariant", "or", "args", ".", "extended_scale", ":", "\n", "        ", "output", "+=", "'-'", "\n", "if", "args", ".", "orientation_invariant", ":", "\n", "            ", "output", "+=", "'o'", "\n", "", "if", "args", ".", "extended_scale", ":", "\n", "            ", "output", "+=", "'s'", "\n", "", "", "if", "args", ".", "two_scale", ":", "\n", "        ", "output", "+=", "'-twoscale'", "\n", "", "if", "args", ".", "multi_scale", ":", "\n", "        ", "output", "+=", "'-multiscale'", "\n", "if", "args", ".", "multi_scale_hflip", ":", "\n", "            ", "output", "+=", "'whflip'", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.cli": [[847, 954], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "network.cli", "decoder.cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "network.configure", "show.configure", "visualizer.configure", "torch.device", "torch.device", "LOG.debug", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.basicConfig", "logging.getLogger().setLevel", "logging.getLogger().setLevel", "LOG.setLevel", "logging.basicConfig", "logging.getLogger().setLevel", "LOG.setLevel", "max", "Exception", "Exception", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "eval_densepose_crf.default_output_name", "jsonlogger.JsonFormatter", "logging.getLogger", "logging.getLogger", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.default_output_name"], ["", "def", "cli", "(", ")", ":", "# pylint: disable=too-many-statements,too-many-branches", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.eval_coco'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "decoder", ".", "cli", "(", "parser", ",", "force_complete_pose", "=", "True", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output filename without file extension'", ")", "\n", "parser", ".", "add_argument", "(", "'--detection-annotations'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'skip n batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "choices", "=", "(", "'val'", ",", "'test'", ",", "'test-dev'", ")", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'dataset to evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-ann'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'minimum number of truth annotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--long-edge'", ",", "default", "=", "641", ",", "type", "=", "int", ",", "\n", "help", "=", "'long edge of input images. Setting to zero deactivates scaling.'", ")", "\n", "parser", ".", "add_argument", "(", "'--loader-workers'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of workers for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--orientation-invariant'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--extended-scale'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-existing'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'skip if output eval file exists already'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "parser", ".", "add_argument", "(", "'--write-predictions'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'write a json and a zip file of the predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--all-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'run over all images irrespective of catIds'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use-superpixel'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-pose'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-semantic'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-instance'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "group", ".", "add_argument", "(", "'--debug-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages and enable all debug images'", ")", "\n", "group", ".", "add_argument", "(", "'--log-stats'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable stats logging'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug_images", ":", "\n", "        ", "args", ".", "debug", "=", "True", "\n", "\n", "", "log_level", "=", "logging", ".", "INFO", "if", "not", "args", ".", "debug", "else", "logging", ".", "DEBUG", "\n", "if", "args", ".", "log_stats", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "        ", "from", "pythonjsonlogger", "import", "jsonlogger", "\n", "stdout_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "stdout_handler", ".", "setFormatter", "(", "\n", "jsonlogger", ".", "JsonFormatter", "(", "'(message) (levelname) (name)'", ")", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stdout_handler", "]", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf.stats'", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "", "network", ".", "configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "\n", "if", "args", ".", "loader_workers", "is", "None", ":", "\n", "        ", "args", ".", "loader_workers", "=", "max", "(", "2", ",", "args", ".", "batch_size", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'val'", "and", "not", "args", ".", "detection_annotations", ":", "\n", "        ", "args", ".", "image_dir", "=", "IMAGE_DIR_VAL", "\n", "args", ".", "annotation_file", "=", "ANNOTATIONS_VAL", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "\n", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "write_predictions", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --write-predictions for this dataset'", ")", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "all_images", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --all-images for this dataset'", ")", "\n", "\n", "# add args.device", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "args", ".", "pin_memory", "=", "False", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "args", ".", "pin_memory", "=", "True", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "# generate a default output filename", "\n", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "args", ".", "output", "=", "default_output_name", "(", "args", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.write_evaluations": [[956, 986], ["len", "print", "print", "print", "print", "eval_coco.write_predictions", "eval_coco.stats", "numpy.savetxt", "print", "open", "json.dump", "eval_coco.stats.tolist"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats"], ["", "def", "write_evaluations", "(", "eval_coco", ",", "filename", ",", "args", ",", "total_time", ",", "count_ops", ",", "file_size", ")", ":", "\n", "    ", "if", "args", ".", "write_predictions", ":", "\n", "        ", "eval_coco", ".", "write_predictions", "(", "filename", ")", "\n", "\n", "", "n_images", "=", "len", "(", "eval_coco", ".", "image_ids", ")", "\n", "\n", "if", "args", ".", "dataset", "not", "in", "(", "'test'", ",", "'test-dev'", ")", ":", "\n", "        ", "stats", "=", "eval_coco", ".", "stats", "(", ")", "\n", "np", ".", "savetxt", "(", "filename", "+", "'.txt'", ",", "stats", ")", "\n", "with", "open", "(", "filename", "+", "'.stats.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "'stats'", ":", "stats", ".", "tolist", "(", ")", ",", "\n", "'n_images'", ":", "n_images", ",", "\n", "'decoder_time'", ":", "eval_coco", ".", "decoder_time", ",", "\n", "'nn_time'", ":", "eval_coco", ".", "nn_time", ",", "\n", "'total_time'", ":", "total_time", ",", "\n", "'checkpoint'", ":", "args", ".", "checkpoint", ",", "\n", "'count_ops'", ":", "count_ops", ",", "\n", "'file_size'", ":", "file_size", ",", "\n", "}", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'given dataset does not have ground truth, so no stats summary'", ")", "\n", "\n", "", "print", "(", "'n images = {}'", ".", "format", "(", "n_images", ")", ")", "\n", "print", "(", "'decoder time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "decoder_time", ",", "1000", "*", "eval_coco", ".", "decoder_time", "/", "n_images", ")", ")", "\n", "print", "(", "'nn time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "nn_time", ",", "1000", "*", "eval_coco", ".", "nn_time", "/", "n_images", ")", ")", "\n", "print", "(", "'total time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "total_time", ",", "1000", "*", "total_time", "/", "n_images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.preprocess_factory": [[988, 1026], ["transforms.Compose", "transforms.NormalizeAnnotations", "transforms.DeterministicEqualChoice", "transforms.CenterPadTight", "transforms.CenterPad", "transforms.DeterministicEqualChoice", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RotateBy90", "transforms.RotateBy90", "transforms.RotateBy90"], "function", ["None"], ["", "def", "preprocess_factory", "(", "\n", "long_edge", ",", "\n", "*", ",", "\n", "tight_padding", "=", "False", ",", "\n", "extended_scale", "=", "False", ",", "\n", "orientation_invariant", "=", "False", ",", "\n", ")", ":", "\n", "    ", "preprocess", "=", "[", "transforms", ".", "NormalizeAnnotations", "(", ")", "]", "\n", "\n", "if", "extended_scale", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", ",", "\n", "transforms", ".", "RescaleAbsolute", "(", "(", "long_edge", "-", "1", ")", "//", "2", "+", "1", ")", ",", "\n", "]", ",", "salt", "=", "1", ")", "\n", "]", "\n", "", "elif", "long_edge", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "tight_padding", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "CenterPadTight", "(", "16", ")", "]", "\n", "", "else", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "transforms", ".", "CenterPad", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "orientation_invariant", ":", "\n", "        ", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "None", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "90", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "180", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "270", ")", ",", "\n", "]", ",", "salt", "=", "3", ")", "\n", "]", "\n", "\n", "", "preprocess", "+=", "[", "transforms", ".", "EVAL_TRANSFORM", "]", "\n", "return", "transforms", ".", "Compose", "(", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.dataloader_from_args": [[1028, 1048], ["eval_densepose_crf.preprocess_factory", "datasets.DensePose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.preprocess_factory"], ["", "def", "dataloader_from_args", "(", "args", ")", ":", "\n", "    ", "preprocess", "=", "preprocess_factory", "(", "\n", "args", ".", "long_edge", ",", "\n", "tight_padding", "=", "args", ".", "batch_size", "==", "1", "and", "not", "args", ".", "multi_scale", ",", "\n", "extended_scale", "=", "args", ".", "extended_scale", ",", "\n", "orientation_invariant", "=", "args", ".", "orientation_invariant", ",", "\n", ")", "\n", "data", "=", "datasets", ".", "DensePose", "(", "\n", "image_dir", "=", "args", ".", "image_dir", ",", "\n", "ann_file", "=", "args", ".", "annotation_file", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "image_filter", "=", "'all'", "if", "args", ".", "all_images", "else", "'annotated'", ",", "\n", "category_ids", "=", "[", "]", "if", "args", ".", "detection_annotations", "else", "[", "1", "]", ",", "\n", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "num_workers", "=", "args", ".", "loader_workers", ",", "\n", "collate_fn", "=", "datasets", ".", "collate_images_anns_meta", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_crf.main": [[1050, 1177], ["eval_densepose_crf.cli", "eval_densepose_crf.dataloader_from_args", "network.factory_from_args", "model_cpu.to", "decoder.factory_from_args", "pycocotools.coco.COCO", "eval_densepose_crf.EvalCoco", "eval_densepose_crf.EvalSemantic", "eval_densepose_crf.EvalInstance", "time.time", "time.time", "enumerate", "list", "network.local_checkpoint_path", "os.path.exists", "print", "LOG.info", "torch.nn.DataParallel", "torch.nn.DataParallel", "LOG.info", "time.time", "decoder.factory_from_args.batch", "isinstance", "time.time", "eval_densepose_crf.EvalCoco.count_ops", "os.path.getsize", "eval_densepose_crf.write_evaluations", "eval_densepose_crf.EvalCoco.write_predictions", "eval_densepose_crf.EvalSemantic.summary", "eval_densepose_crf.EvalSemantic.write_predictions", "eval_densepose_crf.EvalInstance.write_predictions", "eval_densepose_crf.EvalInstance.summary", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len", "len", "len", "len", "len", "len", "eval_densepose_crf.EvalCoco.from_predictions", "eval_densepose_crf.EvalSemantic.from_predictions", "eval_densepose_crf.EvalInstance.from_predictions", "time.time", "max", "time.time", "numpy.any"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.dataloader_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.local_checkpoint_path", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.count_ops", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.write_evaluations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.summary", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.summary", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "\n", "# skip existing?", "\n", "if", "args", ".", "skip_existing", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "output", "+", "'.stats.json'", ")", ":", "\n", "            ", "print", "(", "'Output file {} exists already. Exiting.'", "\n", "''", ".", "format", "(", "args", ".", "output", "+", "'.stats.json'", ")", ")", "\n", "return", "\n", "", "print", "(", "'Processing: {}'", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "", "data_loader", "=", "dataloader_from_args", "(", "args", ")", "\n", "model_cpu", ",", "_", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "model", "=", "model_cpu", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "LOG", ".", "info", "(", "'Using multiple GPUs: %d'", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "base_net", "=", "model_cpu", ".", "base_net", "\n", "model", ".", "pose_head_nets", "=", "model_cpu", ".", "pose_head_nets", "\n", "model", ".", "segm_head_nets", "=", "model_cpu", ".", "segm_head_nets", "\n", "model", ".", "head_nets", "=", "model_cpu", ".", "head_nets", "\n", "\n", "", "processor", "=", "decoder", ".", "factory_from_args", "(", "args", ",", "model", ")", "\n", "coco", "=", "pycocotools", ".", "coco", ".", "COCO", "(", "args", ".", "annotation_file", ")", "\n", "eval_coco", "=", "EvalCoco", "(", "\n", "coco", ",", "\n", "processor", ",", "\n", "max_per_image", "=", "100", "if", "args", ".", "detection_annotations", "else", "20", ",", "\n", "category_ids", "=", "[", "]", "if", "args", ".", "detection_annotations", "else", "[", "1", "]", ",", "\n", "iou_type", "=", "'bbox'", "if", "args", ".", "detection_annotations", "else", "'keypoints'", ",", "\n", ")", "\n", "eval_segm", "=", "EvalSemantic", "(", ")", "\n", "eval_inst", "=", "EvalInstance", "(", "num_classes", "=", "15", ",", "categories", "=", "DENSEPOSE_CATEGORIES", ")", "\n", "\n", "total_start", "=", "time", ".", "time", "(", ")", "\n", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_i", ",", "(", "image_tensors", ",", "anns_batch", ",", "meta_batch", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'batch %d, last loop: %.3fs, batches per second=%.1f'", ",", "\n", "batch_i", ",", "time", ".", "time", "(", ")", "-", "loop_start", ",", "\n", "batch_i", "/", "max", "(", "1", ",", "(", "time", ".", "time", "(", ")", "-", "total_start", ")", ")", ")", "\n", "if", "batch_i", "<", "args", ".", "skip_n", ":", "\n", "            ", "continue", "\n", "", "if", "args", ".", "n", "and", "batch_i", ">=", "args", ".", "n", ":", "\n", "            ", "break", "\n", "\n", "#if meta_batch[0]['image_id'] != 32901:", "\n", "#    continue", "\n", "\n", "", "im_h", ",", "im_w", "=", "image_tensors", ".", "shape", "[", "2", "]", ",", "image_tensors", ".", "shape", "[", "3", "]", "\n", "\n", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "len", "(", "[", "a", "\n", "for", "anns", "in", "anns_batch", "\n", "for", "a", "in", "anns", "\n", "if", "np", ".", "any", "(", "a", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ")", "]", ")", "<", "args", ".", "min_ann", ":", "\n", "            ", "continue", "\n", "\n", "", "pred_batch", "=", "processor", ".", "batch", "(", "model", ",", "image_tensors", ",", "device", "=", "args", ".", "device", ")", "\n", "eval_coco", ".", "decoder_time", "+=", "processor", ".", "last_decoder_time", "\n", "eval_coco", ".", "nn_time", "+=", "processor", ".", "last_nn_time", "\n", "\n", "pred_pose", ",", "pred_segm", ",", "pred_offset", ",", "pred_edge", ",", "pred_vote", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "isinstance", "(", "pred_batch", ",", "dict", ")", ":", "\n", "            ", "if", "'semantic'", "in", "pred_batch", ":", "\n", "                ", "pred_segm", "=", "pred_batch", "[", "'semantic'", "]", "\n", "", "if", "'offset'", "in", "pred_batch", ":", "\n", "                ", "pred_offset", "=", "pred_batch", "[", "'offset'", "]", "\n", "", "if", "'pose'", "in", "pred_batch", ":", "\n", "                ", "pred_pose", "=", "pred_batch", "[", "'pose'", "]", "\n", "", "if", "'edge'", "in", "pred_batch", ":", "\n", "                ", "pred_edge", "=", "pred_batch", "[", "'edge'", "]", "\n", "", "if", "'vote'", "in", "pred_batch", ":", "\n", "                ", "pred_vote", "=", "pred_batch", "[", "'vote'", "]", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "\n", "", "", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "anns_batch", ")", "\n", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "meta_batch", ")", "\n", "assert", "len", "(", "image_tensors", ")", "==", "1", ",", "'only support batch size = 1'", "\n", "\n", "# process pose predictions", "\n", "if", "pred_pose", "is", "not", "None", "and", "args", ".", "eval_pose", "is", "True", ":", "\n", "            ", "pred_pose", "=", "eval_coco", ".", "from_predictions", "(", "pred_pose", "[", "0", "]", ",", "meta_batch", "[", "0", "]", ",", "\n", "debug", "=", "args", ".", "debug", ",", "gt", "=", "anns_batch", "[", "0", "]", ")", "\n", "\n", "# process semantic segmentation predictions", "\n", "", "if", "pred_segm", "is", "not", "None", "and", "args", ".", "eval_semantic", "is", "True", ":", "\n", "            ", "pred_segm", ",", "pred_segm_scores", ",", "gt_semantic", ",", "gt_human", ",", "pred_edge", "=", "eval_segm", ".", "from_predictions", "(", "pred_segm", ",", "(", "im_h", ",", "im_w", ")", ",", "\n", "pred_edge", "=", "pred_edge", ",", "\n", "meta", "=", "meta_batch", "[", "0", "]", ",", "\n", "gt", "=", "anns_batch", "[", "0", "]", ",", "\n", "pred_vote", "=", "pred_vote", ")", "\n", "\n", "# process offset predictions", "\n", "", "if", "pred_offset", "is", "not", "None", "and", "args", ".", "eval_instance", "is", "True", ":", "\n", "            ", "eval_inst", ".", "from_predictions", "(", "pred_offset", ",", "pred_segm", ",", "\n", "pred_segm_scores", ",", "\n", "pred_pose", ",", "pred_edge", ",", "\n", "input_size", "=", "(", "im_h", ",", "im_w", ")", ",", "\n", "meta", "=", "meta_batch", "[", "0", "]", ",", "\n", "gt_semantic", "=", "gt_semantic", ",", "\n", "gt_human", "=", "gt_human", ")", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "total_start", "\n", "\n", "# model stats", "\n", "count_ops", "=", "list", "(", "eval_coco", ".", "count_ops", "(", "model_cpu", ")", ")", "\n", "local_checkpoint", "=", "network", ".", "local_checkpoint_path", "(", "args", ".", "checkpoint", ")", "\n", "file_size", "=", "os", ".", "path", ".", "getsize", "(", "local_checkpoint", ")", "if", "local_checkpoint", "else", "-", "1.0", "\n", "\n", "# write coco", "\n", "\n", "# write", "\n", "if", "args", ".", "eval_pose", "is", "True", ":", "\n", "        ", "write_evaluations", "(", "eval_coco", ",", "args", ".", "output", ",", "args", ",", "total_time", ",", "count_ops", ",", "\n", "file_size", ")", "\n", "eval_coco", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "\n", "# write semantic parsing", "\n", "", "if", "args", ".", "eval_semantic", "is", "True", ":", "\n", "        ", "eval_segm", ".", "summary", "(", ")", "\n", "eval_segm", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "\n", "# write instance parsing", "\n", "", "if", "args", ".", "eval_instance", "is", "True", ":", "\n", "        ", "eval_inst", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "eval_inst", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.count_ops.count": [[22, 26], ["torch.randn", "openpifpaf.network.factory", "thop.profile"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory"], ["", "def", "count", "(", "checkpoint", ")", ":", "\n", "    ", "dummy_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "641", ",", "641", ")", "\n", "model", ",", "_", "=", "openpifpaf", ".", "network", ".", "factory", "(", "checkpoint", "=", "checkpoint", ")", "\n", "return", "thop", ".", "profile", "(", "model", ",", "inputs", "=", "(", "dummy_input", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.count_ops.main": [[33, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "count_ops.count", "print"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.count_ops.count"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.count_ops'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "openpifpaf", ".", "__version__", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "gmacs", ",", "params", "=", "count", "(", "args", ".", "checkpoint", ")", "\n", "print", "(", "'GMACs = {0:.2f}, million params = {1:.2f}'", ".", "format", "(", "gmacs", "/", "1e9", ",", "params", "/", "1e6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.test_cihp.cli": [[29, 121], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "network.cli", "decoder.cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "network.configure", "show.configure", "visualizer.configure", "torch.device", "torch.device", "LOG.debug", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.basicConfig", "logging.getLogger().setLevel", "logging.getLogger().setLevel", "LOG.setLevel", "logging.basicConfig", "logging.getLogger().setLevel", "LOG.setLevel", "max", "Exception", "Exception", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "jsonlogger.JsonFormatter", "logging.getLogger", "logging.getLogger", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "cli", "(", ")", ":", "# pylint: disable=too-many-statements,too-many-branches", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.eval_coco'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "decoder", ".", "cli", "(", "parser", ",", "force_complete_pose", "=", "True", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output filename without file extension'", ")", "\n", "parser", ".", "add_argument", "(", "'--detection-annotations'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'skip n batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "choices", "=", "(", "'val'", ",", "'test'", ",", "'test-dev'", ")", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'dataset to evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-ann'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'minimum number of truth annotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--long-edge'", ",", "default", "=", "641", ",", "type", "=", "int", ",", "\n", "help", "=", "'long edge of input images. Setting to zero deactivates scaling.'", ")", "\n", "parser", ".", "add_argument", "(", "'--loader-workers'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of workers for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--orientation-invariant'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--extended-scale'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-existing'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'skip if output eval file exists already'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "parser", ".", "add_argument", "(", "'--write-predictions'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'write a json and a zip file of the predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--all-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'run over all images irrespective of catIds'", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "group", ".", "add_argument", "(", "'--debug-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages and enable all debug images'", ")", "\n", "group", ".", "add_argument", "(", "'--log-stats'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable stats logging'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug_images", ":", "\n", "        ", "args", ".", "debug", "=", "True", "\n", "\n", "", "log_level", "=", "logging", ".", "INFO", "if", "not", "args", ".", "debug", "else", "logging", ".", "DEBUG", "\n", "if", "args", ".", "log_stats", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "        ", "from", "pythonjsonlogger", "import", "jsonlogger", "\n", "stdout_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "stdout_handler", ".", "setFormatter", "(", "\n", "jsonlogger", ".", "JsonFormatter", "(", "'(message) (levelname) (name)'", ")", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stdout_handler", "]", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf.stats'", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "", "network", ".", "configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "\n", "if", "args", ".", "loader_workers", "is", "None", ":", "\n", "        ", "args", ".", "loader_workers", "=", "max", "(", "2", ",", "args", ".", "batch_size", ")", "\n", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "write_predictions", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --write-predictions for this dataset'", ")", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "all_images", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --all-images for this dataset'", ")", "\n", "\n", "# add args.device", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "args", ".", "pin_memory", "=", "False", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "args", ".", "pin_memory", "=", "True", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.test_cihp.get_palette": [[123, 139], ["range"], "function", ["None"], ["", "def", "get_palette", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "            ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.test_cihp.dataloader_from_args": [[141, 160], ["os.path.join", "transforms.Compose", "datasets.ValidationLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "transforms.ToTensor", "transforms.Normalize"], "function", ["None"], ["", "def", "dataloader_from_args", "(", "args", ")", ":", "\n", "    ", "root", "=", "'./data/CIHP'", "\n", "val_lst", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'val_id.txt'", ")", "\n", "\n", "from", "torchvision", "import", "transforms", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "\n", "]", ")", "\n", "\n", "val_dataset", "=", "datasets", ".", "ValidationLoader", "(", "root", "=", "root", ",", "list_path", "=", "val_lst", ",", "crop_size", "=", "473", ",", "\n", "test_transforms", "=", "test_transform", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "1", ",", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "num_workers", "=", "args", ".", "loader_workers", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.test_cihp.main": [[162, 225], ["test_cihp.cli", "test_cihp.dataloader_from_args", "network.factory_from_args", "model_cpu.to", "numpy.zeros", "os.makedirs", "enumerate", "np.zeros.sum", "np.zeros.sum", "numpy.diag", "IU_array.mean", "print", "print", "print", "enumerate", "os.path.exists", "print", "print", "ori_size[].numpy", "torch.Upsample", "numpy.mean", "outputs.transpose.transpose", "numpy.asarray", "PIL.Image.fromarray", "Image.fromarray.putpalette", "Image.fromarray.save", "numpy.asarray", "test_cihp.get_confusion_matrix", "np.diag.sum", "confusion_matrix.sum.sum", "numpy.maximum", "print", "print", "len", "torch.no_grad", "torch.no_grad", "image.cuda.cuda", "model_cpu.to.", "nn.Upsample.cpu().data.numpy", "outputs.transpose.append", "numpy.argmax", "test_cihp.get_palette", "os.path.join", "label[].numpy", "numpy.maximum", "numpy.asscalar", "numpy.asscalar", "nn.Upsample.cpu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.dataloader_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_confusion_matrix", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_palette"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "\n", "# skip existing?", "\n", "if", "args", ".", "skip_existing", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "output", "+", "'.stats.json'", ")", ":", "\n", "            ", "print", "(", "'Output file {} exists already. Exiting.'", "\n", "''", ".", "format", "(", "args", ".", "output", "+", "'.stats.json'", ")", ")", "\n", "return", "\n", "", "print", "(", "'Processing: {}'", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "", "data_loader", "=", "dataloader_from_args", "(", "args", ")", "\n", "model_cpu", ",", "_", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "model", "=", "model_cpu", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "20", ",", "20", ")", ")", "\n", "\n", "output_dir", "=", "'cihp_global_parsing'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "for", "batch_i", ",", "(", "image", ",", "label", ",", "ori_size", ",", "names", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "print", "(", "batch_i", ",", "'/'", ",", "len", "(", "data_loader", ")", ")", "\n", "ori_size", "=", "ori_size", "[", "0", "]", ".", "numpy", "(", ")", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "np", ".", "asscalar", "(", "ori_size", "[", "0", "]", ")", ",", "np", ".", "asscalar", "(", "ori_size", "[", "1", "]", ")", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "image", "=", "image", ".", "cuda", "(", ")", "\n", "prediction", "=", "model", "(", "image", ")", "\n", "prediction", "=", "interp", "(", "prediction", "[", "-", "1", "]", "[", "0", "]", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "outputs", ".", "append", "(", "prediction", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "", "outputs", "=", "np", ".", "mean", "(", "outputs", ",", "axis", "=", "0", ")", "\n", "outputs", "=", "outputs", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "seg_pred", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "outputs", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# save", "\n", "seg_pred_out", "=", "Image", ".", "fromarray", "(", "seg_pred", ")", "\n", "seg_pred_out", ".", "putpalette", "(", "get_palette", "(", "20", ")", ")", "\n", "seg_pred_out", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "names", "[", "0", "]", "+", "'.png'", ")", ")", "\n", "\n", "seg_gt", "=", "np", ".", "asarray", "(", "label", "[", "0", "]", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "ignore_index", "=", "seg_gt", "!=", "255", "\n", "seg_gt", "=", "seg_gt", "[", "ignore_index", "]", "\n", "seg_pred", "=", "seg_pred", "[", "ignore_index", "]", "\n", "\n", "confusion_matrix", "+=", "get_confusion_matrix", "(", "seg_gt", ",", "seg_pred", ",", "20", ")", "\n", "\n", "", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "\n", "pixel_accuracy", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_accuracy", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IU", "=", "IU_array", ".", "mean", "(", ")", "\n", "\n", "# get_confusion_matrix_plot()", "\n", "\n", "print", "(", "'Pixel accuracy: %f \\n'", "%", "pixel_accuracy", ")", "\n", "print", "(", "'Mean accuracy: %f \\n'", "%", "mean_accuracy", ")", "\n", "print", "(", "'Mean IU: %f \\n'", "%", "mean_IU", ")", "\n", "for", "index", ",", "IU", "in", "enumerate", "(", "IU_array", ")", ":", "\n", "        ", "print", "(", "'%f '", ",", "IU", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.test_cihp.get_confusion_matrix": [[227, 245], ["numpy.bincount", "numpy.zeros", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "", "def", "get_confusion_matrix", "(", "gt_label", ",", "pred_label", ",", "class_num", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the confusion matrix by given label and pred\n        :param gt_label: the ground truth label\n        :param pred_label: the pred label\n        :param class_num: the nunber of class\n    \"\"\"", "\n", "index", "=", "(", "gt_label", "*", "class_num", "+", "pred_label", ")", ".", "astype", "(", "'int32'", ")", "\n", "label_count", "=", "np", ".", "bincount", "(", "index", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "class_num", ",", "class_num", ")", ")", "\n", "\n", "for", "i_label", "in", "range", "(", "class_num", ")", ":", "\n", "        ", "for", "i_pred_label", "in", "range", "(", "class_num", ")", ":", "\n", "            ", "cur_index", "=", "i_label", "*", "class_num", "+", "i_pred_label", "\n", "if", "cur_index", "<", "len", "(", "label_count", ")", ":", "\n", "                ", "confusion_matrix", "[", "i_label", ",", "i_pred_label", "]", "=", "label_count", "[", "cur_index", "]", "\n", "\n", "", "", "", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.video.cli": [[41, 121], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "network.cli", "decoder.cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logging.getLogger().setLevel", "LOG.setLevel", "network.configure", "show.configure", "visualizer.configure", "torch.device", "LOG.debug", "len", "int", "torch.cuda.is_available", "torch.device", "os.path.exists", "os.path.exists", "logging.getLogger", "os.remove", "os.path.exists", "os.remove", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "cli", "(", ")", ":", "# pylint: disable=too-many-statements,too-many-branches", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.video'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "decoder", ".", "cli", "(", "parser", ",", "force_complete_pose", "=", "False", ",", "instance_threshold", "=", "0.1", ",", "seed_threshold", "=", "0.5", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--source'", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'OpenCV source url. Integer for webcams. Supports rtmp streams.'", ")", "\n", "parser", ".", "add_argument", "(", "'--video-output'", ",", "default", "=", "None", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "\n", "help", "=", "'video output file'", ")", "\n", "parser", ".", "add_argument", "(", "'--video-fps'", ",", "default", "=", "show", ".", "AnimationFrame", ".", "video_fps", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--horizontal-flip'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-colored-connections'", ",", "\n", "dest", "=", "'colored_connections'", ",", "default", "=", "True", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'do not use colored connections to draw poses'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'input image scale factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--start-frame'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-frames'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--max-frames'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--json-output'", ",", "default", "=", "None", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "\n", "help", "=", "'json output file'", ")", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'-q'", ",", "'--quiet'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'only show warning messages or above'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "debug_images", "=", "False", "\n", "\n", "# configure logging", "\n", "log_level", "=", "logging", ".", "INFO", "\n", "if", "args", ".", "quiet", ":", "\n", "        ", "log_level", "=", "logging", ".", "WARNING", "\n", "", "if", "args", ".", "debug", ":", "\n", "        ", "log_level", "=", "logging", ".", "DEBUG", "\n", "", "logging", ".", "basicConfig", "(", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "network", ".", "configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "show", ".", "AnimationFrame", ".", "video_fps", "=", "args", ".", "video_fps", "\n", "\n", "# check whether source should be an int", "\n", "if", "len", "(", "args", ".", "source", ")", "==", "1", ":", "\n", "        ", "args", ".", "source", "=", "int", "(", "args", ".", "source", ")", "\n", "\n", "# add args.device", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "# standard filenames", "\n", "if", "args", ".", "video_output", "is", "True", ":", "\n", "        ", "args", ".", "video_output", "=", "'{}.trackandfield.mp4'", ".", "format", "(", "args", ".", "source", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "video_output", ")", ":", "\n", "            ", "os", ".", "remove", "(", "args", ".", "video_output", ")", "\n", "", "", "assert", "args", ".", "video_output", "is", "None", "or", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "video_output", ")", "\n", "if", "args", ".", "json_output", "is", "True", ":", "\n", "        ", "args", ".", "json_output", "=", "'{}.trackandfield.json'", ".", "format", "(", "args", ".", "source", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "json_output", ")", ":", "\n", "            ", "os", ".", "remove", "(", "args", ".", "json_output", ")", "\n", "", "", "assert", "args", ".", "json_output", "is", "None", "or", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "json_output", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.video.processor_factory": [[123, 128], ["network.factory_from_args", "model.to.to", "decoder.factory_from_args"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args"], ["", "def", "processor_factory", "(", "args", ")", ":", "\n", "    ", "model", ",", "_", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "model", "=", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "processor", "=", "decoder", ".", "factory_from_args", "(", "args", ",", "model", ")", "\n", "return", "processor", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.video.main": [[130, 198], ["video.cli", "video.processor_factory", "show.KeypointPainter", "show.AnnotationPainter", "time.time", "cv2.VideoCapture", "show.AnimationFrame", "enumerate", "show.AnimationFrame.iter", "cv2.VideoCapture.read", "cv2.cvtColor", "visualizer.BaseVisualizer.image", "time.time", "PIL.Image.fromarray", "transforms.EVAL_TRANSFORM", "LOG.debug", "LOG.info", "time.time", "LOG.info", "show.AnimationFrame.skip_frame", "show.AnimationFrame.skip_frame", "cv2.resize", "LOG.debug", "show.AnimationFrame.frame_init", "processor.batch", "ax.imshow", "show.AnnotationPainter.annotations", "time.time", "torch.unsqueeze", "open", "json.dump", "f.write", "time.time", "time.time", "ann.json_data"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.video.processor_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.iter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.skip_frame", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.skip_frame", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.frame_init", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.json_data"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "processor", ",", "model", "=", "processor_factory", "(", "args", ")", "\n", "\n", "# create keypoint painter", "\n", "keypoint_painter", "=", "show", ".", "KeypointPainter", "(", "color_connections", "=", "args", ".", "colored_connections", ",", "linewidth", "=", "6", ")", "\n", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n", "last_loop", "=", "time", ".", "time", "(", ")", "\n", "capture", "=", "cv2", ".", "VideoCapture", "(", "args", ".", "source", ")", "\n", "\n", "animation", "=", "show", ".", "AnimationFrame", "(", "\n", "show", "=", "args", ".", "show", ",", "\n", "video_output", "=", "args", ".", "video_output", ",", "\n", "second_visual", "=", "args", ".", "debug", "or", "args", ".", "debug_indices", ",", "\n", ")", "\n", "for", "frame_i", ",", "(", "ax", ",", "ax_second", ")", "in", "enumerate", "(", "animation", ".", "iter", "(", ")", ")", ":", "\n", "        ", "_", ",", "image", "=", "capture", ".", "read", "(", ")", "\n", "if", "image", "is", "None", ":", "\n", "            ", "LOG", ".", "info", "(", "'no more images captured'", ")", "\n", "break", "\n", "\n", "", "if", "frame_i", "<", "args", ".", "start_frame", ":", "\n", "            ", "animation", ".", "skip_frame", "(", ")", "\n", "continue", "\n", "\n", "", "if", "frame_i", "%", "args", ".", "skip_frames", "!=", "0", ":", "\n", "            ", "animation", ".", "skip_frame", "(", ")", "\n", "continue", "\n", "\n", "", "if", "args", ".", "scale", "!=", "1.0", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "args", ".", "scale", ",", "fy", "=", "args", ".", "scale", ")", "\n", "LOG", ".", "debug", "(", "'resized image size: %s'", ",", "image", ".", "shape", ")", "\n", "", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "if", "args", ".", "horizontal_flip", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "if", "ax", "is", "None", ":", "\n", "            ", "ax", ",", "ax_second", "=", "animation", ".", "frame_init", "(", "image", ")", "\n", "", "visualizer", ".", "BaseVisualizer", ".", "image", "(", "image", ")", "\n", "visualizer", ".", "BaseVisualizer", ".", "common_ax", "=", "ax_second", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "image_pil", "=", "PIL", ".", "Image", ".", "fromarray", "(", "image", ")", "\n", "processed_image", ",", "_", ",", "__", "=", "transforms", ".", "EVAL_TRANSFORM", "(", "image_pil", ",", "[", "]", ",", "None", ")", "\n", "LOG", ".", "debug", "(", "'preprocessing time %.3fs'", ",", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "preds", "=", "processor", ".", "batch", "(", "model", ",", "torch", ".", "unsqueeze", "(", "processed_image", ",", "0", ")", ",", "device", "=", "args", ".", "device", ")", "[", "0", "]", "\n", "\n", "if", "args", ".", "json_output", ":", "\n", "            ", "with", "open", "(", "args", ".", "json_output", ",", "'a+'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "{", "\n", "'frame'", ":", "frame_i", ",", "\n", "'predictions'", ":", "[", "ann", ".", "json_data", "(", ")", "for", "ann", "in", "preds", "]", "\n", "}", ",", "f", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "if", "not", "args", ".", "json_output", "or", "args", ".", "video_output", ":", "\n", "            ", "ax", ".", "imshow", "(", "image", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "preds", ")", "\n", "\n", "", "LOG", ".", "info", "(", "'frame %d, loop time = %.3fs, FPS = %.3f'", ",", "\n", "frame_i", ",", "\n", "time", ".", "time", "(", ")", "-", "last_loop", ",", "\n", "1.0", "/", "(", "time", ".", "time", "(", ")", "-", "last_loop", ")", ")", "\n", "last_loop", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "max_frames", "and", "frame_i", ">=", "args", ".", "start_frame", "+", "args", ".", "max_frames", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train.default_output_file": [[17, 42], ["datetime.datetime.now().strftime", "os.makedirs", "datetime.datetime.now"], "function", ["None"], ["def", "default_output_file", "(", "args", ",", "net_cpu", ")", ":", "\n", "    ", "base_name", "=", "net_cpu", ".", "base_net", ".", "shortname", "\n", "head_names", "=", "[", "hn", ".", "meta", ".", "name", "for", "hn", "in", "net_cpu", ".", "head_nets", "]", "\n", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "out_folder", "=", "'outputs/{}-{}-{}/'", ".", "format", "(", "base_name", ",", "now", ",", "\n", "'-'", ".", "join", "(", "head_names", ")", ")", "\n", "os", ".", "makedirs", "(", "out_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "out", "=", "'{}/{}-{}-{}'", ".", "format", "(", "out_folder", ",", "base_name", ",", "now", ",", "\n", "'-'", ".", "join", "(", "head_names", ")", ")", "\n", "if", "args", ".", "square_edge", "!=", "385", ":", "\n", "        ", "out", "+=", "'-edge{}'", ".", "format", "(", "args", ".", "square_edge", ")", "\n", "", "if", "args", ".", "regression_loss", "!=", "'laplace'", ":", "\n", "        ", "out", "+=", "'-{}'", ".", "format", "(", "args", ".", "regression_loss", ")", "\n", "", "if", "args", ".", "r_smooth", "!=", "0.0", ":", "\n", "        ", "out", "+=", "'-rsmooth{}'", ".", "format", "(", "args", ".", "r_smooth", ")", "\n", "", "if", "args", ".", "orientation_invariant", "or", "args", ".", "extended_scale", ":", "\n", "        ", "out", "+=", "'-'", "\n", "if", "args", ".", "orientation_invariant", ":", "\n", "            ", "out", "+=", "'o{:02.0f}'", ".", "format", "(", "args", ".", "orientation_invariant", "*", "100.0", ")", "\n", "", "if", "args", ".", "extended_scale", ":", "\n", "            ", "out", "+=", "'s'", "\n", "\n", "", "", "return", "out", "+", "'.pkl'", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train.cli": [[44, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "logs.cli", "network.cli", "network.losses.cli", "encoder.cli", "optimize.cli", "datasets.train_cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "network.configure", "network.losses.configure", "encoder.configure", "datasets.train_configure", "show.configure", "visualizer.configure", "torch.device", "LOG.debug", "torch.cuda.is_available", "torch.device"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "cli", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.train'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "logs", ".", "cli", "(", "parser", ")", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "network", ".", "losses", ".", "cli", "(", "parser", ")", "\n", "encoder", ".", "cli", "(", "parser", ")", "\n", "optimize", ".", "cli", "(", "parser", ")", "\n", "datasets", ".", "train_cli", "(", "parser", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output file'", ")", "\n", "parser", ".", "add_argument", "(", "'--stride-apply'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'apply and reset gradients every n batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "75", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--rescale-images'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'overall image rescale factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--update-batchnorm-runningstatistics'", ",", "\n", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'update batch norm running statistics'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema'", ",", "default", "=", "1e-2", ",", "type", "=", "float", ",", "\n", "help", "=", "'ema decay constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'debug'", ")", "\n", "group", ".", "add_argument", "(", "'--profile'", ",", "default", "=", "None", ",", "\n", "help", "=", "'enables profiling. specify path for chrome tracing file'", ")", "\n", "group", ".", "add_argument", "(", "'--log-stats'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable stats logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages and enable all debug images'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug_images", ":", "\n", "        ", "args", ".", "debug", "=", "True", "\n", "\n", "", "network", ".", "configure", "(", "args", ")", "\n", "network", ".", "losses", ".", "configure", "(", "args", ")", "\n", "encoder", ".", "configure", "(", "args", ")", "\n", "datasets", ".", "train_configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "\n", "# add args.device", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "args", ".", "pin_memory", "=", "False", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "args", ".", "pin_memory", "=", "True", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train.main": [[109, 146], ["train.cli", "network.factory_from_args", "logs.configure", "net_cpu.to", "network.losses.factory_from_args", "encoder.factory", "datasets.train_factory", "optimize.factory_optimizer", "optimize.factory_lrscheduler", "network.Trainer", "network.Trainer.loop", "train.default_output_file", "logging.getLogger().setLevel", "print", "torch.nn.DataParallel", "len", "torch.cuda.device_count", "list", "list", "logging.getLogger", "torch.cuda.device_count", "torch.nn.DataParallel.parameters", "network.losses.factory_from_args.parameters", "vars", "socket.gethostname"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.optimize.factory_optimizer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.optimize.factory_lrscheduler", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.loop", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_v2.default_output_file"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "net_cpu", ",", "start_epoch", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "net_cpu", ".", "process_heads", "=", "None", "\n", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "args", ".", "output", "=", "default_output_file", "(", "args", ",", "net_cpu", ")", "\n", "", "logs", ".", "configure", "(", "args", ")", "\n", "if", "args", ".", "log_stats", ":", "\n", "        ", "logging", ".", "getLogger", "(", "'openpifpaf.stats'", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "", "net", "=", "net_cpu", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "print", "(", "'Using multiple GPUs: {}'", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ")", "\n", "\n", "", "loss", "=", "network", ".", "losses", ".", "factory_from_args", "(", "args", ",", "net_cpu", ".", "head_nets", ")", "\n", "target_transforms", "=", "encoder", ".", "factory", "(", "net_cpu", ".", "head_nets", ",", "net_cpu", ".", "base_net", ".", "stride", ")", "\n", "train_loader", ",", "val_loader", "=", "datasets", ".", "train_factory", "(", "args", ",", "target_transforms", ")", "\n", "\n", "optimizer", "=", "optimize", ".", "factory_optimizer", "(", "\n", "args", ",", "list", "(", "net", ".", "parameters", "(", ")", ")", "+", "list", "(", "loss", ".", "parameters", "(", ")", ")", ")", "\n", "lr_scheduler", "=", "optimize", ".", "factory_lrscheduler", "(", "args", ",", "optimizer", ",", "len", "(", "train_loader", ")", ")", "\n", "trainer", "=", "network", ".", "Trainer", "(", "\n", "net", ",", "loss", ",", "optimizer", ",", "args", ".", "output", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "\n", "device", "=", "args", ".", "device", ",", "\n", "fix_batch_norm", "=", "not", "args", ".", "update_batchnorm_runningstatistics", ",", "\n", "stride_apply", "=", "args", ".", "stride_apply", ",", "\n", "ema_decay", "=", "args", ".", "ema", ",", "\n", "train_profile", "=", "args", ".", "profile", ",", "\n", "model_meta_data", "=", "{", "\n", "'args'", ":", "vars", "(", "args", ")", ",", "\n", "'version'", ":", "__version__", ",", "\n", "'hostname'", ":", "socket", ".", "gethostname", "(", ")", ",", "\n", "}", ",", "\n", ")", "\n", "trainer", ".", "loop", "(", "train_loader", ",", "val_loader", ",", "args", ".", "epochs", ",", "start_epoch", "=", "start_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance.__init__": [[170, 187], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "categories", ")", ":", "\n", "        ", "self", ".", "offset_vis", "=", "{", "}", "\n", "self", ".", "bbox_vis", "=", "{", "}", "\n", "self", ".", "human_vis", "=", "{", "}", "\n", "self", ".", "instance_vis", "=", "{", "}", "\n", "self", ".", "confs_vis", "=", "{", "}", "\n", "self", ".", "gt_instance_vis", "=", "{", "}", "\n", "self", ".", "gt_confs_vis", "=", "{", "}", "\n", "self", ".", "superpixel_vis", "=", "{", "}", "\n", "self", ".", "center_vis", "=", "{", "}", "\n", "self", ".", "center_offset_vis", "=", "{", "}", "\n", "self", ".", "offset_to_vis", "=", "{", "}", "\n", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "categories", "=", "categories", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance.from_predictions": [[188, 261], ["int", "eval_densepose_example.EvalInstance._restore_offset_size", "eval_densepose_example.EvalInstance._filter_annotations", "eval_densepose_example.EvalInstance._group_pixels", "eval_densepose_example.get_instance", "eval_densepose_example.compute_confidence", "eval_densepose_example.get_instance", "eval_densepose_example.compute_gt_confidence", "numpy.where", "eval_densepose_example.EvalInstance._restore_offset_size", "eval_densepose_example.EvalInstance._restore_center_size", "show.flow_vis.flow_compute_color", "eval_densepose_example.EvalInstance.copy", "numpy.sum", "numpy.concatenate", "show.flow_vis.flow_compute_color", "numpy.stack", "numpy.max", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_offset_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._filter_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._group_pixels", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_confidence", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_gt_confidence", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_offset_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_center_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_compute_color", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_compute_color", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "def", "from_predictions", "(", "self", ",", "offset", ",", "semantic", ",", "semantic_scores", ",", "pose", ",", "edge", ",", "\n", "input_size", ",", "meta", ",", "gt_semantic", ",", "gt_human", ",", "\n", "pred_center", "=", "None", ",", "pred_center_offset", "=", "None", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "\n", "target_size", "=", "semantic", ".", "shape", "\n", "offset", "=", "self", ".", "_restore_offset_size", "(", "offset", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "\n", "if", "pred_center_offset", "is", "not", "None", ":", "\n", "            ", "pred_center_offset", "=", "self", ".", "_restore_offset_size", "(", "pred_center_offset", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "\n", "", "if", "pred_center", "is", "not", "None", ":", "\n", "            ", "pred_center", "=", "self", ".", "_restore_center_size", "(", "pred_center", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "\n", "", "pose", "=", "self", ".", "_filter_annotations", "(", "pose", ")", "\n", "\n", "human", ",", "joint_score_map", ",", "skeleton_score_map", ",", "offset", "=", "self", ".", "_group_pixels", "(", "offset", ",", "semantic", ",", "pose", ",", "edge", ")", "\n", "\n", "#filename = os.path.join(IMAGE_DIR_VAL, '0'*(12-len(str(image_id))) + str(image_id) + '.jpg')", "\n", "#human = self._do_superpixel_refinement(filename, human)", "\n", "\n", "# process predictions", "\n", "instance", ",", "class_map", "=", "get_instance", "(", "semantic", ",", "human", ")", "\n", "\n", "confs", "=", "compute_confidence", "(", "semantic_scores", ",", "class_map", ",", "instance", ",", "\n", "joint_score_map", ",", "skeleton_score_map", ")", "\n", "self", ".", "confs_vis", "[", "image_id", "]", "=", "confs", "\n", "\n", "# process ground-truths", "\n", "gt_instance", ",", "gt_class_map", "=", "get_instance", "(", "gt_semantic", ",", "gt_human", ")", "\n", "gt_confs", "=", "compute_gt_confidence", "(", "gt_instance", ",", "gt_class_map", ")", "\n", "self", ".", "gt_confs_vis", "[", "image_id", "]", "=", "gt_confs", "\n", "\n", "# cache for debug", "\n", "if", "offset", "is", "not", "None", ":", "\n", "            ", "offset_vis", "=", "flow_compute_color", "(", "offset", "[", ":", ",", ":", ",", "1", "]", ",", "offset", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "offset_vis", "=", "None", "\n", "\n", "###", "\n", "", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "semantic", ">", "0", ")", "\n", "try", ":", "\n", "            ", "offset_vector", "=", "offset", "[", "y_index", ",", "x_index", ",", "0", ":", "2", "]", "\n", "xy_offset", "=", "offset_vector", "+", "np", ".", "stack", "(", "(", "x_index", ",", "y_index", ")", ")", ".", "T", "\n", "offset_copy", "=", "offset", ".", "copy", "(", ")", "\n", "offset_copy", "[", "y_index", ",", "x_index", ",", "0", "]", "=", "xy_offset", "[", ":", ",", "0", "]", "\n", "offset_copy", "[", "y_index", ",", "x_index", ",", "1", "]", "=", "xy_offset", "[", ":", ",", "1", "]", "\n", "b", "=", "np", ".", "sum", "(", "offset_copy", "*", "offset_copy", ",", "axis", "=", "-", "1", ")", "\n", "b", "=", "b", "/", "np", ".", "max", "(", "b", ")", "*", "255", "\n", "r", "=", "offset_copy", "[", ":", ",", ":", ",", "0", "]", "/", "np", ".", "max", "(", "offset_copy", "[", ":", ",", ":", ",", "0", "]", ")", "*", "255", "\n", "g", "=", "offset_copy", "[", ":", ",", ":", ",", "1", "]", "/", "np", ".", "max", "(", "offset_copy", "[", ":", ",", ":", ",", "1", "]", ")", "*", "255", "\n", "r", "=", "r", "[", "...", ",", "None", "]", "\n", "g", "=", "g", "[", "...", ",", "None", "]", "\n", "b", "=", "b", "[", "...", ",", "None", "]", "\n", "embedding", "=", "np", ".", "concatenate", "(", "(", "r", ",", "g", ",", "b", ")", ",", "axis", "=", "2", ")", "\n", "self", ".", "offset_to_vis", "[", "image_id", "]", "=", "embedding", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "human_vis", "[", "image_id", "]", "=", "human", "\n", "self", ".", "instance_vis", "[", "image_id", "]", "=", "instance", "\n", "self", ".", "gt_instance_vis", "[", "image_id", "]", "=", "gt_instance", "\n", "self", ".", "offset_vis", "[", "image_id", "]", "=", "offset_vis", "\n", "self", ".", "bbox_vis", "[", "image_id", "]", "=", "[", "x", "[", "'bbox'", "]", "for", "x", "in", "pose", "if", "x", "[", "'score'", "]", ">", "0.1", "]", "\n", "if", "pred_center", "is", "not", "None", ":", "\n", "            ", "self", ".", "center_vis", "[", "image_id", "]", "=", "pred_center", "*", "255", "\n", "", "if", "pred_center_offset", "is", "not", "None", ":", "\n", "            ", "self", ".", "center_offset_vis", "[", "image_id", "]", "=", "flow_compute_color", "(", "pred_center_offset", "[", ":", ",", ":", ",", "1", "]", ",", "pred_center_offset", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance._do_superpixel_refinement": [[262, 287], ["skimage.segmentation.slic", "numpy.unique().tolist", "numpy.where", "copy.deepcopy", "cv2.imread", "numpy.where", "instance_ids.tolist.tolist.tolist", "max", "numpy.unique", "set", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["", "", "def", "_do_superpixel_refinement", "(", "self", ",", "filename", ",", "instance", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "filename", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "if", "instance", "is", "None", ":", "\n", "            ", "return", "instance", "\n", "\n", "", "segments", "=", "slic", "(", "im", ",", "n_segments", "=", "1150", ")", "\n", "self", ".", "superpixel_vis", "[", "os", ".", "path", ".", "basename", "(", "filename", ")", "[", ":", "-", "4", "]", "]", "=", "[", "im", ",", "segments", "]", "\n", "segment_ids", "=", "np", ".", "unique", "(", "segments", ")", ".", "tolist", "(", ")", "\n", "\n", "mask", "=", "np", ".", "where", "(", "instance", ">", "0", ",", "1", ",", "0", ")", "\n", "\n", "new_instance", "=", "copy", ".", "deepcopy", "(", "instance", ")", "\n", "for", "sid", "in", "segment_ids", ":", "\n", "            ", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "segments", "==", "sid", ")", "\n", "instance_ids", "=", "instance", "[", "y_index", ",", "x_index", "]", "\n", "instance_ids", "=", "instance_ids", ".", "tolist", "(", ")", "\n", "\n", "max_id", "=", "max", "(", "set", "(", "instance_ids", ")", ",", "key", "=", "instance_ids", ".", "count", ")", "\n", "if", "max_id", "==", "0", ":", "\n", "                ", "continue", "\n", "", "new_instance", "[", "y_index", ",", "x_index", "]", "=", "max_id", "\n", "", "new_instance", "=", "new_instance", "*", "mask", "\n", "\n", "return", "new_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance._skeleton_distance": [[289, 333], ["enumerate", "numpy.reshape", "numpy.ones", "range", "numpy.mean", "skeleton_distance.append", "matplotlib.figure", "matplotlib.imshow", "range", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "matplotlib.plot", "numpy.ones_like().astype", "numpy.ma.masked_array", "skfmm.distance", "int", "int", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "_skeleton_distance", "(", "self", ",", "pose", ",", "edge", ")", ":", "\n", "        ", "skeleton_distance", "=", "[", "]", "\n", "for", "pid", ",", "ann", "in", "enumerate", "(", "pose", ")", ":", "\n", "            ", "kps", "=", "ann", "[", "'keypoints'", "]", "\n", "kps", "=", "np", ".", "reshape", "(", "kps", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "all_dt", "=", "np", ".", "ones", "(", "(", "edge", ".", "shape", "[", "0", "]", ",", "edge", ".", "shape", "[", "1", "]", ",", "17", ")", ")", "\n", "for", "ii", "in", "range", "(", "17", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "score", "=", "kps", "[", "ii", ",", "2", "]", "\n", "if", "score", "<", "0.1", ":", "\n", "                        ", "continue", "\n", "\n", "", "x", ",", "y", "=", "int", "(", "kps", "[", "ii", "]", "[", "0", "]", ")", ",", "int", "(", "kps", "[", "ii", "]", "[", "1", "]", ")", "\n", "m", "=", "np", ".", "ones_like", "(", "edge", ")", ".", "astype", "(", "float", ")", "\n", "m", "[", "y", ",", "x", "]", "=", "0", "\n", "\n", "r_edge", "=", "edge", ">", "0.2", "\n", "m", "=", "np", ".", "ma", ".", "masked_array", "(", "m", ",", "r_edge", ")", "\n", "dt", "=", "skfmm", ".", "distance", "(", "m", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "\n", "", "all_dt", "[", ":", ",", ":", ",", "ii", "]", "=", "dt", "\n", "\n", "", "mean_dt", "=", "np", ".", "mean", "(", "all_dt", ",", "axis", "=", "-", "1", ")", "\n", "\n", "skeleton_distance", ".", "append", "(", "mean_dt", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "mean_dt", ")", "\n", "for", "ii", "in", "range", "(", "17", ")", ":", "\n", "                ", "if", "kps", "[", "ii", "]", "[", "2", "]", "<", "0.1", ":", "\n", "                    ", "continue", "\n", "", "plt", ".", "plot", "(", "kps", "[", "ii", "]", "[", "0", "]", ",", "kps", "[", "ii", "]", "[", "1", "]", ",", "'r+'", ")", "\n", "", "plt", ".", "savefig", "(", "'{}.jpg'", ".", "format", "(", "pid", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "edge", ">", "0.2", ")", "\n", "plt", ".", "savefig", "(", "'edge.jpg'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "return", "skeleton_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance._group_pixels": [[334, 403], ["numpy.where", "min", "numpy.where", "eval_densepose_example.EvalInstance._prepare_sparse_instance", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.argmin", "numpy.amin", "numpy.array", "numpy.zeros_like", "instance_id.tolist", "list", "zip", "numpy.zeros_like", "numpy.zeros_like", "len", "eval_densepose_example.EvalInstance._skeleton_distance", "len", "numpy.zeros_like", "range", "set", "instance_id.tolist.count", "numpy.array", "numpy.array", "numpy.stack", "zip", "numpy.array", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._prepare_sparse_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._skeleton_distance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.count_ops.count", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "def", "_group_pixels", "(", "self", ",", "offset", ",", "semantic", ",", "pose", ",", "edge", ")", ":", "\n", "        ", "person_mask", "=", "np", ".", "where", "(", "semantic", ">", "0", ",", "1", ",", "0", ")", "\n", "offset", "[", ":", ",", ":", ",", "0", "]", "*=", "person_mask", "\n", "offset", "[", ":", ",", ":", ",", "1", "]", "*=", "person_mask", "\n", "\n", "im_h", ",", "im_w", "=", "person_mask", ".", "shape", "\n", "min_size", "=", "min", "(", "im_h", ",", "im_w", ")", "\n", "\n", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "semantic", ">", "0", ")", "\n", "offset_vector", "=", "offset", "[", "y_index", ",", "x_index", ",", "0", ":", "2", "]", "\n", "xy_offset", "=", "offset_vector", "[", ":", ",", ":", ":", "-", "1", "]", "+", "np", ".", "stack", "(", "(", "x_index", ",", "y_index", ")", ")", ".", "T", "\n", "\n", "xy_list", ",", "id_list", ",", "joint_score_list", ",", "person_score_list", ",", "scale_list", "=", "self", ".", "_prepare_sparse_instance", "(", "pose", ",", "person_mask", ")", "\n", "\n", "if", "len", "(", "xy_list", ")", "==", "0", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "xy_list", "=", "np", ".", "concatenate", "(", "xy_list", ",", "axis", "=", "0", ")", "\n", "xy_pose", "=", "np", ".", "array", "(", "xy_list", ")", "\n", "\n", "xy_offset", "=", "xy_offset", "[", "None", ",", "...", "]", "# 1 * N * 2", "\n", "xy_pose", "=", "xy_pose", "[", ":", ",", "None", ",", "...", "]", "# K * 1 * 2", "\n", "\n", "# joint distance (local metric)", "\n", "score_list", "=", "[", "s1", "+", "s2", "for", "s1", ",", "s2", "in", "zip", "(", "joint_score_list", ",", "person_score_list", ")", "]", "\n", "score", "=", "np", ".", "array", "(", "score_list", ")", "\n", "joint_distance", "=", "np", ".", "linalg", ".", "norm", "(", "xy_pose", "-", "xy_offset", ",", "axis", "=", "-", "1", ")", "# K * N", "\n", "joint_distance", "=", "joint_distance", ".", "T", "/", "(", "score", "+", "1e-6", ")", "/", "(", "np", ".", "array", "(", "scale_list", ")", "+", "1e-6", ")", "\n", "distance", "=", "joint_distance", ".", "T", "\n", "\n", "if", "0", ":", "\n", "# skeleton distance (global metric)", "\n", "            ", "skeleton_distance", "=", "self", ".", "_skeleton_distance", "(", "pose", ",", "edge", ")", "\n", "skeleton_num", "=", "len", "(", "skeleton_distance", ")", "\n", "\n", "assert", "skeleton_num", "==", "joint_distance", ".", "shape", "[", "0", "]", "//", "17", "\n", "\n", "distance", "=", "np", ".", "zeros_like", "(", "joint_distance", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ii", "in", "range", "(", "skeleton_num", ")", ":", "\n", "                ", "jnt_dist", "=", "joint_distance", "[", "ii", "*", "17", ":", "(", "ii", "+", "1", ")", "*", "17", ",", ":", "]", "# 17 x N", "\n", "skl_dist", "=", "skeleton_distance", "[", "ii", "]", "[", "y_index", ",", "x_index", "]", "# 1 x N", "\n", "skl_dist", "=", "np", ".", "reshape", "(", "skl_dist", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "distance", "[", "ii", "*", "17", ":", "(", "ii", "+", "1", ")", "*", "17", ",", ":", "]", "=", "jnt_dist", "*", "skl_dist", "\n", "\n", "", "", "index", "=", "np", ".", "argmin", "(", "distance", ",", "axis", "=", "0", ")", "\n", "min_dist", "=", "np", ".", "amin", "(", "distance", ",", "axis", "=", "0", ")", "\n", "instance_list", "=", "np", ".", "array", "(", "id_list", ")", "\n", "instance_id", "=", "instance_list", "[", "index", "]", "+", "1", "\n", "\n", "instance", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "instance", "[", "y_index", ",", "x_index", "]", "=", "instance_id", "\n", "\n", "# remove instances with few pixels", "\n", "instance_id_list", "=", "instance_id", ".", "tolist", "(", ")", "\n", "instance_ids", "=", "list", "(", "set", "(", "instance_id_list", ")", ")", "\n", "counts", "=", "[", "instance_id_list", ".", "count", "(", "x", ")", "for", "x", "in", "instance_ids", "]", "\n", "for", "id", ",", "count", "in", "zip", "(", "instance_ids", ",", "counts", ")", ":", "\n", "            ", "if", "count", "<", "min_size", "/", "10.", ":", "\n", "                ", "instance", "[", "instance", "==", "id", "]", "=", "0", "\n", "\n", "", "", "joint_score_map", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "float", ")", "\n", "joint_score_map", "[", "y_index", ",", "x_index", "]", "=", "np", ".", "array", "(", "joint_score_list", ")", "[", "index", "]", "\n", "\n", "skeleton_score_map", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "float", ")", "\n", "skeleton_score_map", "[", "y_index", ",", "x_index", "]", "=", "np", ".", "array", "(", "person_score_list", ")", "[", "index", "]", "\n", "\n", "return", "instance", ",", "joint_score_map", ",", "skeleton_score_map", ",", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance._filter_annotations": [[404, 417], ["numpy.reshape", "keypoints[].tolist", "len", "new_annotations.append"], "methods", ["None"], ["", "def", "_filter_annotations", "(", "self", ",", "annotations", ",", "th_skl", "=", "0.3", ",", "th_joint", "=", "0.1", ")", ":", "\n", "        ", "annotations", "=", "[", "ann", "for", "ann", "in", "annotations", "if", "ann", "[", "'score'", "]", ">=", "th_skl", "]", "\n", "\n", "new_annotations", "=", "[", "]", "\n", "for", "ann", "in", "annotations", ":", "\n", "            ", "keypoints", "=", "ann", "[", "'keypoints'", "]", "\n", "keypoints", "=", "np", ".", "reshape", "(", "keypoints", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "scores", "=", "keypoints", "[", ":", ",", "-", "1", "]", ".", "tolist", "(", ")", "\n", "size", "=", "len", "(", "[", "s", "for", "s", "in", "scores", "if", "s", ">", "th_joint", "]", ")", "\n", "if", "size", ">", "2", ":", "\n", "                ", "new_annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "return", "new_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance._prepare_sparse_instance": [[418, 451], ["enumerate", "numpy.reshape", "xy_list.append", "id_list.extend", "math.sqrt", "scale_list.extend", "joint_score_list.extend", "person_score_list.extend", "kps[].tolist", "numpy.sum"], "methods", ["None"], ["", "def", "_prepare_sparse_instance", "(", "self", ",", "annotations", ",", "fg_mask", "=", "None", ")", ":", "\n", "        ", "xy_list", "=", "[", "]", "\n", "id_list", "=", "[", "]", "\n", "scale_list", "=", "[", "]", "\n", "joint_score_list", "=", "[", "]", "\n", "person_score_list", "=", "[", "]", "\n", "\n", "if", "fg_mask", "is", "not", "None", ":", "\n", "            ", "fg_mask", "[", "fg_mask", ">", "0", "]", "=", "1", "\n", "\n", "", "for", "pid", ",", "ann", "in", "enumerate", "(", "annotations", ")", ":", "\n", "            ", "kps", "=", "ann", "[", "'keypoints'", "]", "\n", "kps", "=", "np", ".", "reshape", "(", "kps", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "\n", "bbox", "=", "ann", "[", "'bbox'", "]", "\n", "\n", "if", "fg_mask", "is", "not", "None", ":", "\n", "                ", "x", ",", "y", ",", "h", ",", "w", "=", "bbox", "[", ":", "4", "]", "\n", "box_size", "=", "h", "*", "w", "\n", "fg_conf", "=", "np", ".", "sum", "(", "fg_mask", ")", "/", "box_size", "\n", "\n", "if", "fg_conf", "<", "0.1", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "xy_list", ".", "append", "(", "kps", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "id_list", ".", "extend", "(", "[", "pid", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "scale", "=", "math", ".", "sqrt", "(", "bbox", "[", "2", "]", "*", "bbox", "[", "3", "]", ")", "\n", "scale_list", ".", "extend", "(", "[", "scale", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "joint_score_list", ".", "extend", "(", "kps", "[", ":", ",", "-", "1", "]", ".", "tolist", "(", ")", ")", "\n", "person_score_list", ".", "extend", "(", "[", "ann", "[", "'score'", "]", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "return", "xy_list", ",", "id_list", ",", "joint_score_list", ",", "person_score_list", ",", "scale_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance._restore_offset_size": [[452, 464], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.interpolate", "torch.interpolate", "offset_rescale[].permute().cpu().numpy", "transforms.Preprocess.semantic_annotation_inverse", "offset_rescale[].permute().cpu", "offset_rescale[].permute"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "_restore_offset_size", "(", "self", ",", "offset", ",", "meta", ",", "input_size", ",", "target_size", ")", ":", "\n", "        ", "offset", "=", "torch", ".", "tensor", "(", "offset", ")", "\n", "offset_rescale", "=", "F", ".", "interpolate", "(", "input", "=", "offset", ",", "size", "=", "input_size", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scale", "=", "(", "input_size", "[", "0", "]", "-", "1", ")", "//", "(", "offset", ".", "shape", "[", "2", "]", "-", "1", ")", "\n", "offset_rescale", "*=", "scale", "\n", "offset_rescale", "=", "offset_rescale", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "offset", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "offset_rescale", ",", "\n", "target_size", ",", "\n", "meta", ")", "\n", "return", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance._restore_center_size": [[465, 475], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.interpolate", "torch.interpolate", "center_rescale[].permute().cpu().numpy", "transforms.Preprocess.semantic_annotation_inverse", "center_rescale[].permute().cpu", "center_rescale[].permute"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "_restore_center_size", "(", "self", ",", "center", ",", "meta", ",", "input_size", ",", "target_size", ")", ":", "\n", "        ", "center", "=", "torch", ".", "tensor", "(", "center", ")", "\n", "center_rescale", "=", "F", ".", "interpolate", "(", "input", "=", "center", ",", "size", "=", "input_size", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "center_rescale", "=", "center_rescale", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "center", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "center_rescale", ",", "\n", "target_size", ",", "\n", "meta", ")", "\n", "return", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance.summary": [[476, 486], ["evaluation.metrics.InstanceMetrics", "evaluation.metrics.InstanceMetrics.compute_AP", "print", "print", "numpy.nanmean", "numpy.array", "list", "evaluation.metrics.InstanceMetrics.compute_AP.values"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics.compute_AP", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "metric", "=", "InstanceMetrics", "(", "self", ".", "ins_output_dir", ",", "self", ".", "gt_ins_output_dir", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "categories", "=", "self", ".", "categories", ")", "\n", "\n", "AP_map", "=", "metric", ".", "compute_AP", "(", ")", "\n", "print", "(", "'Mean AP^r: {}'", ".", "format", "(", "\n", "np", ".", "nanmean", "(", "np", ".", "array", "(", "list", "(", "AP_map", ".", "values", "(", ")", ")", ")", ")", "\n", ")", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalInstance.write_predictions": [[487, 627], ["os.makedirs", "LOG.info", "eval_densepose_example.EvalInstance.offset_vis.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalInstance.offset_to_vis.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalInstance.center_offset_vis.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalInstance.center_vis.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalInstance.human_vis.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalInstance.instance_vis.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalInstance.gt_instance_vis.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalInstance.superpixel_vis.items", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "open", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "open", "os.path.join", "skimage.segmentation.mark_boundaries", "cv2.imwrite", "cv2.rectangle", "cv2.rectangle", "os.path.join", "open.write", "os.path.join", "open.write", "[].astype", "str", "str", "int", "int", "str", "int", "int", "str", "str", "str", "str", "str", "int", "int", "int", "int", "int", "int", "int", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "write_predictions", "(", "self", ",", "output", ")", ":", "\n", "        ", "output_dir", "=", "output", "+", "'.offset'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting offset predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "offset_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "#for bbox in self.bbox_vis[key]:", "\n", "#    pt1 = (int(bbox[0]), int(bbox[1]))", "\n", "#    pt2 = (int(bbox[0]) + int(bbox[2]), int(bbox[1]) + int(bbox[3]))", "\n", "\n", "#    cv2.rectangle(image, pt1, pt2, (0, 0, 255))", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.offset_to'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting offset predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "offset_to_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "for", "bbox", "in", "self", ".", "bbox_vis", "[", "key", "]", ":", "\n", "                ", "pt1", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", ")", "\n", "pt2", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", "+", "int", "(", "bbox", "[", "2", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", "+", "int", "(", "bbox", "[", "3", "]", ")", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "image", ",", "pt1", ",", "pt2", ",", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "\n", "", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.center_offset'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting center_offset predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "center_offset_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "for", "bbox", "in", "self", ".", "bbox_vis", "[", "key", "]", ":", "\n", "                ", "pt1", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", ")", "\n", "pt2", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", "+", "int", "(", "bbox", "[", "2", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", "+", "int", "(", "bbox", "[", "3", "]", ")", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "image", ",", "pt1", ",", "pt2", ",", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "\n", "", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.center'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting center predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "center_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.human'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting human segmentation predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "human_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "ins_output_dir", "=", "output", "+", "'.instance'", "\n", "os", ".", "makedirs", "(", "ins_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting instance parsing predictions to {}'", ".", "format", "(", "ins_output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "instance_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "ins_output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "# save confidence", "\n", "conf_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "ins_output_dir", ",", "str", "(", "key", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "confs", "=", "self", ".", "confs_vis", "[", "key", "]", "\n", "for", "conf", "in", "confs", ":", "\n", "                ", "conf_file", ".", "write", "(", "'{} {}\\n'", ".", "format", "(", "conf", "[", "0", "]", ",", "conf", "[", "1", "]", ")", ")", "\n", "\n", "", "", "gt_ins_output_dir", "=", "output", "+", "'.instance.gt'", "\n", "os", ".", "makedirs", "(", "gt_ins_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting instance parsing predictions to {}'", ".", "format", "(", "gt_ins_output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "gt_instance_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "gt_ins_output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "# save confidence", "\n", "conf_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "gt_ins_output_dir", ",", "str", "(", "key", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "confs", "=", "self", ".", "gt_confs_vis", "[", "key", "]", "\n", "for", "conf", "in", "confs", ":", "\n", "                ", "conf_file", ".", "write", "(", "'{} {} {}\\n'", ".", "format", "(", "conf", "[", "0", "]", ",", "conf", "[", "1", "]", ",", "conf", "[", "2", "]", ")", ")", "\n", "\n", "", "", "output_dir", "=", "output", "+", "'.superpixel'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting superpixel predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "superpixel_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "mark_boundaries", "(", "value", "[", "0", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float", ")", ",", "value", "[", "1", "]", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "filename", ",", "pred", ")", "\n", "\n", "", "self", ".", "ins_output_dir", "=", "ins_output_dir", "\n", "self", ".", "gt_ins_output_dir", "=", "gt_ins_output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalSemantic.__init__": [[630, 641], ["numpy.zeros", "eval_densepose_example.get_palette"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_palette"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "15", ")", ":", "\n", "        ", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "self", ".", "palette", "=", "get_palette", "(", "num_classes", ")", "\n", "\n", "self", ".", "segm_preds", "=", "{", "}", "\n", "self", ".", "edge_preds", "=", "{", "}", "\n", "self", ".", "vote_preds", "=", "{", "}", "\n", "self", ".", "segm_gts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalSemantic.from_predictions": [[642, 688], ["eval_densepose_example.EvalSemantic.get_mask", "int", "eval_densepose_example.EvalSemantic.image_ids.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().numpy", "numpy.asarray", "transforms.Preprocess.semantic_annotation_inverse", "eval_densepose_example.get_confusion_matrix", "numpy.argmax", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().squeeze().numpy", "transforms.Preprocess.semantic_annotation_inverse", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().squeeze().numpy", "transforms.Preprocess.semantic_annotation_inverse", "torch.interpolate.squeeze", "torch.interpolate.squeeze().squeeze", "torch.interpolate.squeeze().squeeze", "torch.interpolate.squeeze", "torch.interpolate.squeeze"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalSemantic.get_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_confusion_matrix", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "from_predictions", "(", "self", ",", "pred_segm", ",", "input_size", ",", "meta", ",", "\n", "gt", "=", "None", ",", "pred_edge", "=", "None", ",", "pred_vote", "=", "None", ")", ":", "\n", "        ", "gt_semantic", ",", "gt_human", "=", "self", ".", "get_mask", "(", "gt", ")", "\n", "target_size", "=", "gt_semantic", ".", "shape", "\n", "segm_pred", "=", "None", "\n", "if", "gt_semantic", "is", "not", "None", ":", "\n", "            ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "segm_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_segm", ")", "\n", "segm_pred_tensor", "=", "F", ".", "interpolate", "(", "segm_pred_tensor", ",", "input_size", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "segm_pred_scores", "=", "segm_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "segm_pred", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "segm_pred_scores", ",", "axis", "=", "0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "segm_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "segm_pred", ",", "target_size", ",", "meta", ")", "\n", "self", ".", "segm_preds", "[", "image_id", "]", "=", "segm_pred", "\n", "\n", "if", "pred_vote", "is", "not", "None", ":", "\n", "                ", "vote_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_vote", ")", "\n", "vote_pred_tensor", "=", "F", ".", "interpolate", "(", "vote_pred_tensor", ",", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "vote_pred", "=", "vote_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "vote_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "vote_pred", ",", "target_size", ",", "meta", "\n", ")", "\n", "self", ".", "vote_preds", "[", "image_id", "]", "=", "vote_pred", "\n", "\n", "", "if", "pred_edge", "is", "not", "None", ":", "\n", "                ", "edge_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_edge", ")", "\n", "edge_pred_tensor", "=", "F", ".", "interpolate", "(", "edge_pred_tensor", ",", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "edge_pred", "=", "edge_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "edge_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "edge_pred", ",", "target_size", ",", "meta", "\n", ")", "\n", "self", ".", "edge_preds", "[", "image_id", "]", "=", "edge_pred", "\n", "\n", "", "ignore_index", "=", "gt_semantic", "!=", "255", "\n", "seg_gt_", "=", "gt_semantic", "[", "ignore_index", "]", "\n", "seg_pred_", "=", "segm_pred", "[", "ignore_index", "]", "\n", "\n", "self", ".", "confusion_matrix", "+=", "get_confusion_matrix", "(", "seg_gt_", ",", "seg_pred_", ",", "\n", "self", ".", "num_classes", ")", "\n", "", "if", "pred_edge", "is", "not", "None", ":", "\n", "            ", "return", "segm_pred", ",", "segm_pred_scores", ",", "gt_semantic", ",", "gt_human", ",", "edge_pred", "\n", "", "return", "segm_pred", ",", "segm_pred_scores", ",", "gt_semantic", ",", "gt_human", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalSemantic.summary": [[689, 700], ["eval_densepose_example.EvalSemantic.confusion_matrix.sum", "eval_densepose_example.EvalSemantic.confusion_matrix.sum", "numpy.diag", "IU_array.mean", "LOG.info", "numpy.diag.sum", "eval_densepose_example.EvalSemantic.sum", "numpy.maximum", "numpy.maximum"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "pos", "=", "self", ".", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "self", ".", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "\n", "\n", "pixel_accuracy", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_accuracy", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IU", "=", "IU_array", ".", "mean", "(", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nMean IoU: {}, PixelAcc: {}, Mean Acc: {}'", ".", "format", "(", "mean_IU", ",", "pixel_accuracy", ",", "mean_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalSemantic.write_predictions": [[701, 741], ["os.makedirs", "LOG.info", "eval_densepose_example.EvalSemantic.segm_preds.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalSemantic.segm_gts.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalSemantic.edge_preds.items", "os.makedirs", "LOG.info", "eval_densepose_example.EvalSemantic.vote_preds.items", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.save", "str", "str", "str", "PIL.Image.fromarray", "str", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "write_predictions", "(", "self", ",", "output", ")", ":", "\n", "        ", "output_dir", "=", "output", "+", "'.global-parsing'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "segm_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", ")", "\n", "pred", ".", "putpalette", "(", "self", ".", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.global-parsing.gt'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing ground-truths to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "segm_gts", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", ")", "\n", "pred", ".", "putpalette", "(", "self", ".", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.edge'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "edge_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", "*", "255", ")", ".", "convert", "(", "'L'", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.vote'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting voting predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "vote_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", "*", "255", ")", ".", "convert", "(", "'L'", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalSemantic.get_mask": [[742, 758], ["enumerate", "numpy.copy", "numpy.where", "numpy.zeros_like", "numpy.zeros_like"], "methods", ["None"], ["", "", "def", "get_mask", "(", "self", ",", "anns", ")", ":", "\n", "        ", "gt_mask", "=", "None", "\n", "gt_human", "=", "None", "\n", "for", "ii", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "if", "'parsing_original'", "in", "ann", ":", "\n", "                ", "single_mask", "=", "np", ".", "copy", "(", "ann", "[", "'parsing_original'", "]", ")", "\n", "if", "gt_mask", "is", "None", ":", "\n", "                    ", "gt_mask", "=", "np", ".", "zeros_like", "(", "single_mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "gt_human", "is", "None", ":", "\n", "                    ", "gt_human", "=", "np", ".", "zeros_like", "(", "single_mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "single_mask_bool", "=", "np", ".", "where", "(", "single_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "gt_mask", "[", "single_mask_bool", ">", "0", "]", "=", "single_mask", "[", "single_mask_bool", ">", "0", "]", "\n", "gt_human", "[", "single_mask_bool", ">", "0", "]", "=", "ii", "+", "1", "\n", "\n", "", "", "return", "gt_mask", ",", "gt_human", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalCoco.__init__": [[761, 786], ["LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "coco", ",", "processor", ",", "*", ",", "\n", "max_per_image", "=", "20", ",", "\n", "category_ids", "=", "None", ",", "\n", "iou_type", "=", "'keypoints'", ",", "\n", "small_threshold", "=", "0.0", ")", ":", "\n", "        ", "if", "category_ids", "is", "None", ":", "\n", "            ", "category_ids", "=", "[", "1", "]", "\n", "\n", "", "self", ".", "coco", "=", "coco", "\n", "self", ".", "processor", "=", "processor", "\n", "self", ".", "max_per_image", "=", "max_per_image", "\n", "self", ".", "category_ids", "=", "category_ids", "\n", "self", ".", "iou_type", "=", "iou_type", "\n", "self", ".", "small_threshold", "=", "small_threshold", "\n", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "eval", "=", "None", "\n", "self", ".", "decoder_time", "=", "0.0", "\n", "self", ".", "nn_time", "=", "0.0", "\n", "\n", "self", ".", "pose_vis", "=", "{", "}", "\n", "\n", "LOG", ".", "debug", "(", "'max = %d, category ids = %s, iou_type = %s'", ",", "\n", "self", ".", "max_per_image", ",", "self", ".", "category_ids", ",", "self", ".", "iou_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalCoco.stats": [[787, 808], ["eval_densepose_example.EvalCoco.coco.loadRes", "COCOeval", "LOG.info", "eval_densepose_example.EvalCoco.eval.evaluate", "eval_densepose_example.EvalCoco.eval.accumulate", "eval_densepose_example.EvalCoco.eval.summarize", "print"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifDetHr.accumulate"], ["", "def", "stats", "(", "self", ",", "predictions", "=", "None", ",", "image_ids", "=", "None", ")", ":", "\n", "# from pycocotools.cocoeval import COCOeval", "\n", "        ", "if", "predictions", "is", "None", ":", "\n", "            ", "predictions", "=", "self", ".", "predictions", "\n", "", "if", "image_ids", "is", "None", ":", "\n", "            ", "image_ids", "=", "self", ".", "image_ids", "\n", "\n", "", "coco_eval", "=", "self", ".", "coco", ".", "loadRes", "(", "predictions", ")", "\n", "\n", "self", ".", "eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_eval", ",", "iouType", "=", "self", ".", "iou_type", ")", "\n", "LOG", ".", "info", "(", "'cat_ids: %s'", ",", "self", ".", "category_ids", ")", "\n", "if", "self", ".", "category_ids", ":", "\n", "            ", "self", ".", "eval", ".", "params", ".", "catIds", "=", "self", ".", "category_ids", "\n", "\n", "", "if", "image_ids", "is", "not", "None", ":", "\n", "            ", "print", "(", "'image ids'", ",", "image_ids", ")", "\n", "self", ".", "eval", ".", "params", ".", "imgIds", "=", "image_ids", "\n", "", "self", ".", "eval", ".", "evaluate", "(", ")", "\n", "self", ".", "eval", ".", "accumulate", "(", ")", "\n", "self", ".", "eval", ".", "summarize", "(", ")", "\n", "return", "self", ".", "eval", ".", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalCoco.count_ops": [[809, 816], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "thop.profile", "LOG.info", "next", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "@", "staticmethod", "\n", "def", "count_ops", "(", "model", ",", "height", "=", "641", ",", "width", "=", "641", ")", ":", "\n", "        ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "dummy_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "height", ",", "width", ",", "device", "=", "device", ")", "\n", "gmacs", ",", "params", "=", "thop", ".", "profile", "(", "model", ",", "inputs", "=", "(", "dummy_input", ",", ")", ")", "\n", "LOG", ".", "info", "(", "'GMACs = {0:.2f}, million params = {1:.2f}'", ".", "format", "(", "gmacs", "/", "1e9", ",", "params", "/", "1e6", ")", ")", "\n", "return", "gmacs", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalCoco.view_annotations": [[817, 831], ["show.AnnotationPainter", "open", "PIL.Image.open().convert", "show.image_canvas", "show.AnnotationPainter.annotations", "os.path.join", "show.image_canvas", "show.white_screen", "show.AnnotationPainter.annotations", "show.AnnotationPainter.annotations", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "@", "staticmethod", "\n", "def", "view_annotations", "(", "meta", ",", "predictions", ",", "ground_truth", ")", ":", "\n", "        ", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "IMAGE_DIR_VAL", ",", "meta", "[", "'file_name'", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "            ", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n", "", "if", "ground_truth", ":", "\n", "            ", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "                ", "show", ".", "white_screen", "(", "ax", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "ground_truth", ",", "color", "=", "'grey'", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalCoco.from_predictions": [[832, 886], ["int", "eval_densepose_example.EvalCoco.image_ids.append", "transforms.Preprocess.annotations_inverse", "len", "transforms.Preprocess.annotations_inverse", "eval_densepose_example.EvalCoco.view_annotations", "pred.json_data", "image_annotations.append", "image_annotations.append", "eval_densepose_example.EvalCoco.stats", "LOG.debug", "transforms.Preprocess.annotations_inverse.append", "transforms.Preprocess.annotations_inverse.append", "pred.json_data.items", "numpy.zeros().tolist", "pred.scale", "annotation.AnnotationDet().set", "annotation.Annotation().set", "numpy.zeros", "annotation.AnnotationDet", "annotation.Annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.view_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.json_data", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "", "", "def", "from_predictions", "(", "self", ",", "predictions", ",", "meta", ",", "debug", "=", "False", ",", "gt", "=", "None", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "predictions", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "predictions", ",", "meta", ")", "\n", "if", "self", ".", "small_threshold", ":", "\n", "            ", "predictions", "=", "[", "pred", "for", "pred", "in", "predictions", "\n", "if", "pred", ".", "scale", "(", "v_th", "=", "0.01", ")", ">=", "self", ".", "small_threshold", "]", "\n", "", "if", "len", "(", "predictions", ")", ">", "self", ".", "max_per_image", ":", "\n", "            ", "predictions", "=", "predictions", "[", ":", "self", ".", "max_per_image", "]", "\n", "\n", "", "self", ".", "pose_vis", "[", "meta", "[", "'file_name'", "]", "]", "=", "predictions", "\n", "\n", "if", "debug", ":", "\n", "            ", "gt_anns", "=", "[", "]", "\n", "for", "g", "in", "gt", ":", "\n", "                ", "if", "'bbox'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "AnnotationDet", "(", "COCO_CATEGORIES", ")", ".", "set", "(", "g", "[", "'category_id'", "]", "-", "1", ",", "None", ",", "g", "[", "'bbox'", "]", ")", "\n", ")", "\n", "", "if", "'keypoints'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "Annotation", "(", "COCO_KEYPOINTS", ",", "COCO_PERSON_SKELETON", ")", "\n", ".", "set", "(", "g", "[", "'keypoints'", "]", ",", "fixed_score", "=", "None", ")", "\n", ")", "\n", "", "", "gt_anns", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "gt_anns", ",", "meta", ")", "\n", "self", ".", "view_annotations", "(", "meta", ",", "predictions", ",", "gt_anns", ")", "\n", "\n", "", "image_annotations", "=", "[", "]", "\n", "for", "pred", "in", "predictions", ":", "\n", "            ", "pred_data", "=", "pred", ".", "json_data", "(", ")", "\n", "pred_data", "[", "'image_id'", "]", "=", "image_id", "\n", "pred_data", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "pred_data", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'category_id'", ",", "'score'", ",", "'keypoints'", ",", "'bbox'", ",", "'image_id'", ")", "\n", "}", "\n", "image_annotations", ".", "append", "(", "pred_data", ")", "\n", "\n", "# force at least one annotation per image (for pycocotools)", "\n", "", "if", "not", "image_annotations", ":", "\n", "            ", "image_annotations", ".", "append", "(", "{", "\n", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "1", ",", "\n", "'keypoints'", ":", "np", ".", "zeros", "(", "(", "17", "*", "3", ",", ")", ")", ".", "tolist", "(", ")", ",", "\n", "'bbox'", ":", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "'score'", ":", "0.001", ",", "\n", "}", ")", "\n", "\n", "", "if", "debug", ":", "\n", "            ", "self", ".", "stats", "(", "image_annotations", ",", "[", "image_id", "]", ")", "\n", "LOG", ".", "debug", "(", "meta", ")", "\n", "\n", "", "self", ".", "predictions", "+=", "image_annotations", "\n", "return", "image_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.EvalCoco.write_predictions": [[887, 928], ["LOG.info", "LOG.info", "show.KeypointPainter", "show.AnnotationPainter", "os.makedirs", "LOG.info", "eval_densepose_example.EvalCoco.pose_vis.items", "open", "json.dump", "zipfile.ZipFile", "myzip.write", "os.path.join", "os.path.join", "LOG.debug", "open", "PIL.Image.open().convert", "show.image_canvas", "show.AnnotationPainter.annotations", "annotation.items", "str", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "def", "write_predictions", "(", "self", ",", "filename", ")", ":", "\n", "        ", "predictions", "=", "[", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "annotation", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'image_id'", ",", "'category_id'", ",", "'keypoints'", ",", "'score'", ")", "}", "\n", "for", "annotation", "in", "self", ".", "predictions", "\n", "]", "\n", "with", "open", "(", "filename", "+", "'.pred.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "predictions", ",", "f", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.pred.json'", ",", "filename", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "filename", "+", "'.zip'", ",", "'w'", ")", "as", "myzip", ":", "\n", "            ", "myzip", ".", "write", "(", "filename", "+", "'.pred.json'", ",", "arcname", "=", "'predictions.json'", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.zip'", ",", "filename", ")", "\n", "\n", "# debug", "\n", "# visualizers", "\n", "keypoint_painter", "=", "show", ".", "KeypointPainter", "(", "\n", "color_connections", "=", "True", ",", "\n", "linewidth", "=", "6", ",", "\n", ")", "\n", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", "\n", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n", "output_dir", "=", "filename", "+", "'.pose'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting pose predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "pose_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "imagefile", "=", "os", ".", "path", ".", "join", "(", "IMAGE_DIR_VAL", ",", "key", ")", "\n", "with", "open", "(", "imagefile", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "image_out_name", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "LOG", ".", "debug", "(", "'image output = %s'", ",", "image_out_name", ")", "\n", "with", "show", ".", "image_canvas", "(", "cpu_image", ",", "\n", "image_out_name", ",", "\n", "show", "=", "False", ",", "\n", "fig_width", "=", "10.0", ",", "\n", "dpi_factor", "=", "1.0", ")", "as", "ax", ":", "\n", "                ", "annotation_painter", ".", "annotations", "(", "ax", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.get_palette": [[47, 63], ["range"], "function", ["None"], ["def", "get_palette", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "            ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.get_confusion_matrix": [[68, 86], ["numpy.bincount", "numpy.zeros", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "get_confusion_matrix", "(", "gt_label", ",", "pred_label", ",", "class_num", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the confusion matrix by given label and pred\n        :param gt_label: the ground truth label\n        :param pred_label: the pred label\n        :param class_num: the nunber of class\n    \"\"\"", "\n", "index", "=", "(", "gt_label", "*", "class_num", "+", "pred_label", ")", ".", "astype", "(", "'int32'", ")", "\n", "label_count", "=", "np", ".", "bincount", "(", "index", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "class_num", ",", "class_num", ")", ")", "\n", "\n", "for", "i_label", "in", "range", "(", "class_num", ")", ":", "\n", "        ", "for", "i_pred_label", "in", "range", "(", "class_num", ")", ":", "\n", "            ", "cur_index", "=", "i_label", "*", "class_num", "+", "i_pred_label", "\n", "if", "cur_index", "<", "len", "(", "label_count", ")", ":", "\n", "                ", "confusion_matrix", "[", "i_label", ",", "i_pred_label", "]", "=", "label_count", "[", "cur_index", "]", "\n", "\n", "", "", "", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.compute_gt_confidence": [[88, 95], ["class_map.keys", "confs.append"], "function", ["None"], ["", "def", "compute_gt_confidence", "(", "gt_instance", ",", "class_map", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "label", "in", "class_map", ".", "keys", "(", ")", ":", "\n", "        ", "cls", "=", "class_map", "[", "label", "]", "\n", "confs", ".", "append", "(", "[", "label", ",", "cls", ",", "1", "]", ")", "\n", "\n", "", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.compute_confidence": [[97, 121], ["class_map.keys", "pow", "confs.append", "semantic_scores[].reshape", "confidence.sum", "len", "joint_score_map.reshape", "confidence.sum", "len", "skeleton_score_map.reshape", "confidence.sum", "len", "numpy.where", "numpy.where", "numpy.where", "instance_label.reshape", "instance_label.reshape", "instance_label.reshape"], "function", ["None"], ["", "def", "compute_confidence", "(", "semantic_scores", ",", "class_map", ",", "instance_label", ",", "\n", "joint_score_map", ",", "skeleton_score_map", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "label", "in", "class_map", ".", "keys", "(", ")", ":", "\n", "        ", "cls", "=", "class_map", "[", "label", "]", "\n", "confidence", "=", "semantic_scores", "[", "cls", ",", ":", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_semantic", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "confidence", "=", "joint_score_map", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_joint", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "confidence", "=", "skeleton_score_map", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_skeleton", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "conf_final", "=", "pow", "(", "conf_semantic", "*", "conf_joint", "*", "conf_skeleton", ",", "-", "3", ")", "\n", "confs", ".", "append", "(", "[", "cls", ",", "conf_final", "]", ")", "\n", "\n", "", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.get_instance": [[123, 167], ["numpy.zeros_like", "numpy.unique", "len", "range", "numpy.unique", "numpy.unique", "range", "np.zeros_like.max", "print", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "get_instance", "(", "cat_gt", ",", "human_gt", ")", ":", "\n", "    ", "instance_gt", "=", "np", ".", "zeros_like", "(", "cat_gt", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "human_ids", "=", "np", ".", "unique", "(", "human_gt", ")", "[", "1", ":", "]", "\n", "class_map", "=", "{", "}", "\n", "\n", "total_part_num", "=", "0", "\n", "for", "id", "in", "human_ids", ":", "\n", "        ", "human_part_label", "=", "(", "np", ".", "where", "(", "human_gt", "==", "id", ",", "1", ",", "0", ")", "*", "cat_gt", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "part_classes", "=", "np", ".", "unique", "(", "human_part_label", ")", "\n", "\n", "exceed", "=", "False", "\n", "for", "part_id", "in", "part_classes", ":", "\n", "            ", "if", "part_id", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "total_part_num", "+=", "1", "\n", "\n", "if", "total_part_num", ">", "255", ":", "\n", "                ", "print", "(", "\n", "\"total_part_num exceed, return current instance map: {}\"", ".", "format", "(", "\n", "total_part_num", ")", "\n", ")", "\n", "exceed", "=", "True", "\n", "break", "\n", "\n", "", "class_map", "[", "total_part_num", "]", "=", "part_id", "\n", "instance_gt", "[", "np", ".", "where", "(", "human_part_label", "==", "part_id", ")", "]", "=", "total_part_num", "\n", "", "if", "exceed", ":", "\n", "            ", "break", "\n", "\n", "# Make instance id continous.", "\n", "", "", "ori_cur_labels", "=", "np", ".", "unique", "(", "instance_gt", ")", "\n", "total_num_label", "=", "len", "(", "ori_cur_labels", ")", "\n", "if", "instance_gt", ".", "max", "(", ")", "+", "1", "!=", "total_num_label", ":", "\n", "        ", "for", "label", "in", "range", "(", "1", ",", "total_num_label", ")", ":", "\n", "            ", "instance_gt", "[", "instance_gt", "==", "ori_cur_labels", "[", "label", "]", "]", "=", "label", "\n", "\n", "", "", "final_class_map", "=", "{", "}", "\n", "for", "label", "in", "range", "(", "1", ",", "total_num_label", ")", ":", "\n", "        ", "if", "label", ">=", "1", ":", "\n", "            ", "final_class_map", "[", "label", "]", "=", "class_map", "[", "ori_cur_labels", "[", "label", "]", "]", "\n", "\n", "", "", "return", "instance_gt", ",", "final_class_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.default_output_name": [[930, 954], ["None"], "function", ["None"], ["", "", "", "", "def", "default_output_name", "(", "args", ")", ":", "\n", "    ", "output", "=", "'{}.evalcoco-{}edge{}'", ".", "format", "(", "\n", "args", ".", "checkpoint", ",", "\n", "'{}-'", ".", "format", "(", "args", ".", "dataset", ")", "if", "args", ".", "dataset", "!=", "'val'", "else", "''", ",", "\n", "args", ".", "long_edge", ",", "\n", ")", "\n", "if", "args", ".", "n", ":", "\n", "        ", "output", "+=", "'-samples{}'", ".", "format", "(", "args", ".", "n", ")", "\n", "", "if", "not", "args", ".", "force_complete_pose", ":", "\n", "        ", "output", "+=", "'-noforcecompletepose'", "\n", "", "if", "args", ".", "orientation_invariant", "or", "args", ".", "extended_scale", ":", "\n", "        ", "output", "+=", "'-'", "\n", "if", "args", ".", "orientation_invariant", ":", "\n", "            ", "output", "+=", "'o'", "\n", "", "if", "args", ".", "extended_scale", ":", "\n", "            ", "output", "+=", "'s'", "\n", "", "", "if", "args", ".", "two_scale", ":", "\n", "        ", "output", "+=", "'-twoscale'", "\n", "", "if", "args", ".", "multi_scale", ":", "\n", "        ", "output", "+=", "'-multiscale'", "\n", "if", "args", ".", "multi_scale_hflip", ":", "\n", "            ", "output", "+=", "'whflip'", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.cli": [[961, 1068], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "network.cli", "decoder.cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "network.configure", "show.configure", "visualizer.configure", "torch.device", "torch.device", "LOG.debug", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.basicConfig", "logging.getLogger().setLevel", "logging.getLogger().setLevel", "LOG.setLevel", "logging.basicConfig", "logging.getLogger().setLevel", "LOG.setLevel", "max", "Exception", "Exception", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "eval_densepose_example.default_output_name", "jsonlogger.JsonFormatter", "logging.getLogger", "logging.getLogger", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.default_output_name"], ["", "def", "cli", "(", ")", ":", "# pylint: disable=too-many-statements,too-many-branches", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.eval_coco'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "decoder", ".", "cli", "(", "parser", ",", "force_complete_pose", "=", "True", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output filename without file extension'", ")", "\n", "parser", ".", "add_argument", "(", "'--detection-annotations'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'skip n batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "choices", "=", "(", "'val'", ",", "'test'", ",", "'test-dev'", ")", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'dataset to evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-ann'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'minimum number of truth annotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--long-edge'", ",", "default", "=", "641", ",", "type", "=", "int", ",", "\n", "help", "=", "'long edge of input images. Setting to zero deactivates scaling.'", ")", "\n", "parser", ".", "add_argument", "(", "'--loader-workers'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of workers for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--orientation-invariant'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--extended-scale'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-existing'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'skip if output eval file exists already'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "parser", ".", "add_argument", "(", "'--write-predictions'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'write a json and a zip file of the predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--all-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'run over all images irrespective of catIds'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use-superpixel'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-pose'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-semantic'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-instance'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "group", ".", "add_argument", "(", "'--debug-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages and enable all debug images'", ")", "\n", "group", ".", "add_argument", "(", "'--log-stats'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable stats logging'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug_images", ":", "\n", "        ", "args", ".", "debug", "=", "True", "\n", "\n", "", "log_level", "=", "logging", ".", "INFO", "if", "not", "args", ".", "debug", "else", "logging", ".", "DEBUG", "\n", "if", "args", ".", "log_stats", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "        ", "from", "pythonjsonlogger", "import", "jsonlogger", "\n", "stdout_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "stdout_handler", ".", "setFormatter", "(", "\n", "jsonlogger", ".", "JsonFormatter", "(", "'(message) (levelname) (name)'", ")", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stdout_handler", "]", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf.stats'", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "", "network", ".", "configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "\n", "if", "args", ".", "loader_workers", "is", "None", ":", "\n", "        ", "args", ".", "loader_workers", "=", "max", "(", "2", ",", "args", ".", "batch_size", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'val'", "and", "not", "args", ".", "detection_annotations", ":", "\n", "        ", "args", ".", "image_dir", "=", "IMAGE_DIR_VAL", "\n", "args", ".", "annotation_file", "=", "ANNOTATIONS_VAL", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "\n", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "write_predictions", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --write-predictions for this dataset'", ")", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "all_images", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --all-images for this dataset'", ")", "\n", "\n", "# add args.device", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "args", ".", "pin_memory", "=", "False", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "args", ".", "pin_memory", "=", "True", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "# generate a default output filename", "\n", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "args", ".", "output", "=", "default_output_name", "(", "args", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.write_evaluations": [[1070, 1100], ["len", "print", "print", "print", "print", "eval_coco.write_predictions", "eval_coco.stats", "numpy.savetxt", "print", "open", "json.dump", "eval_coco.stats.tolist"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats"], ["", "def", "write_evaluations", "(", "eval_coco", ",", "filename", ",", "args", ",", "total_time", ",", "count_ops", ",", "file_size", ")", ":", "\n", "    ", "if", "args", ".", "write_predictions", ":", "\n", "        ", "eval_coco", ".", "write_predictions", "(", "filename", ")", "\n", "\n", "", "n_images", "=", "len", "(", "eval_coco", ".", "image_ids", ")", "\n", "\n", "if", "args", ".", "dataset", "not", "in", "(", "'test'", ",", "'test-dev'", ")", ":", "\n", "        ", "stats", "=", "eval_coco", ".", "stats", "(", ")", "\n", "np", ".", "savetxt", "(", "filename", "+", "'.txt'", ",", "stats", ")", "\n", "with", "open", "(", "filename", "+", "'.stats.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "'stats'", ":", "stats", ".", "tolist", "(", ")", ",", "\n", "'n_images'", ":", "n_images", ",", "\n", "'decoder_time'", ":", "eval_coco", ".", "decoder_time", ",", "\n", "'nn_time'", ":", "eval_coco", ".", "nn_time", ",", "\n", "'total_time'", ":", "total_time", ",", "\n", "'checkpoint'", ":", "args", ".", "checkpoint", ",", "\n", "'count_ops'", ":", "count_ops", ",", "\n", "'file_size'", ":", "file_size", ",", "\n", "}", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'given dataset does not have ground truth, so no stats summary'", ")", "\n", "\n", "", "print", "(", "'n images = {}'", ".", "format", "(", "n_images", ")", ")", "\n", "print", "(", "'decoder time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "decoder_time", ",", "1000", "*", "eval_coco", ".", "decoder_time", "/", "n_images", ")", ")", "\n", "print", "(", "'nn time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "nn_time", ",", "1000", "*", "eval_coco", ".", "nn_time", "/", "n_images", ")", ")", "\n", "print", "(", "'total time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "total_time", ",", "1000", "*", "total_time", "/", "n_images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.preprocess_factory": [[1102, 1140], ["transforms.Compose", "transforms.NormalizeAnnotations", "transforms.DeterministicEqualChoice", "transforms.CenterPadTight", "transforms.CenterPad", "transforms.DeterministicEqualChoice", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RotateBy90", "transforms.RotateBy90", "transforms.RotateBy90"], "function", ["None"], ["", "def", "preprocess_factory", "(", "\n", "long_edge", ",", "\n", "*", ",", "\n", "tight_padding", "=", "False", ",", "\n", "extended_scale", "=", "False", ",", "\n", "orientation_invariant", "=", "False", ",", "\n", ")", ":", "\n", "    ", "preprocess", "=", "[", "transforms", ".", "NormalizeAnnotations", "(", ")", "]", "\n", "\n", "if", "extended_scale", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", ",", "\n", "transforms", ".", "RescaleAbsolute", "(", "(", "long_edge", "-", "1", ")", "//", "2", "+", "1", ")", ",", "\n", "]", ",", "salt", "=", "1", ")", "\n", "]", "\n", "", "elif", "long_edge", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "tight_padding", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "CenterPadTight", "(", "16", ")", "]", "\n", "", "else", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "transforms", ".", "CenterPad", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "orientation_invariant", ":", "\n", "        ", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "None", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "90", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "180", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "270", ")", ",", "\n", "]", ",", "salt", "=", "3", ")", "\n", "]", "\n", "\n", "", "preprocess", "+=", "[", "transforms", ".", "EVAL_TRANSFORM", "]", "\n", "return", "transforms", ".", "Compose", "(", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.dataloader_from_args": [[1142, 1162], ["eval_densepose_example.preprocess_factory", "datasets.DensePose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.preprocess_factory"], ["", "def", "dataloader_from_args", "(", "args", ")", ":", "\n", "    ", "preprocess", "=", "preprocess_factory", "(", "\n", "args", ".", "long_edge", ",", "\n", "tight_padding", "=", "args", ".", "batch_size", "==", "1", "and", "not", "args", ".", "multi_scale", ",", "\n", "extended_scale", "=", "args", ".", "extended_scale", ",", "\n", "orientation_invariant", "=", "args", ".", "orientation_invariant", ",", "\n", ")", "\n", "data", "=", "datasets", ".", "DensePose", "(", "\n", "image_dir", "=", "args", ".", "image_dir", ",", "\n", "ann_file", "=", "args", ".", "annotation_file", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "image_filter", "=", "'all'", "if", "args", ".", "all_images", "else", "'annotated'", ",", "\n", "category_ids", "=", "[", "]", "if", "args", ".", "detection_annotations", "else", "[", "1", "]", ",", "\n", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "num_workers", "=", "args", ".", "loader_workers", ",", "\n", "collate_fn", "=", "datasets", ".", "collate_images_anns_meta", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose_example.main": [[1164, 1305], ["eval_densepose_example.cli", "eval_densepose_example.dataloader_from_args", "network.factory_from_args", "model_cpu.to", "decoder.factory_from_args", "pycocotools.coco.COCO", "eval_densepose_example.EvalCoco", "eval_densepose_example.EvalSemantic", "eval_densepose_example.EvalInstance", "time.time", "time.time", "enumerate", "list", "network.local_checkpoint_path", "os.path.exists", "print", "LOG.info", "torch.nn.DataParallel", "torch.nn.DataParallel", "LOG.info", "print", "time.time", "decoder.factory_from_args.batch", "isinstance", "time.time", "eval_densepose_example.EvalCoco.count_ops", "os.path.getsize", "eval_densepose_example.write_evaluations", "eval_densepose_example.EvalCoco.write_predictions", "eval_densepose_example.EvalSemantic.summary", "eval_densepose_example.EvalSemantic.write_predictions", "eval_densepose_example.EvalInstance.write_predictions", "eval_densepose_example.EvalInstance.summary", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len", "len", "len", "len", "len", "len", "eval_densepose_example.EvalCoco.from_predictions", "eval_densepose_example.EvalSemantic.from_predictions", "eval_densepose_example.EvalInstance.from_predictions", "time.time", "max", "time.time", "numpy.any"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.dataloader_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.local_checkpoint_path", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.count_ops", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.write_evaluations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.summary", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.summary", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "\n", "# skip existing?", "\n", "if", "args", ".", "skip_existing", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "output", "+", "'.stats.json'", ")", ":", "\n", "            ", "print", "(", "'Output file {} exists already. Exiting.'", "\n", "''", ".", "format", "(", "args", ".", "output", "+", "'.stats.json'", ")", ")", "\n", "return", "\n", "", "print", "(", "'Processing: {}'", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "", "data_loader", "=", "dataloader_from_args", "(", "args", ")", "\n", "model_cpu", ",", "_", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "model", "=", "model_cpu", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "LOG", ".", "info", "(", "'Using multiple GPUs: %d'", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "base_net", "=", "model_cpu", ".", "base_net", "\n", "model", ".", "pose_head_nets", "=", "model_cpu", ".", "pose_head_nets", "\n", "model", ".", "segm_head_nets", "=", "model_cpu", ".", "segm_head_nets", "\n", "model", ".", "head_nets", "=", "model_cpu", ".", "head_nets", "\n", "\n", "", "processor", "=", "decoder", ".", "factory_from_args", "(", "args", ",", "model", ")", "\n", "coco", "=", "pycocotools", ".", "coco", ".", "COCO", "(", "args", ".", "annotation_file", ")", "\n", "eval_coco", "=", "EvalCoco", "(", "\n", "coco", ",", "\n", "processor", ",", "\n", "max_per_image", "=", "100", "if", "args", ".", "detection_annotations", "else", "20", ",", "\n", "category_ids", "=", "[", "]", "if", "args", ".", "detection_annotations", "else", "[", "1", "]", ",", "\n", "iou_type", "=", "'bbox'", "if", "args", ".", "detection_annotations", "else", "'keypoints'", ",", "\n", ")", "\n", "eval_segm", "=", "EvalSemantic", "(", ")", "\n", "eval_inst", "=", "EvalInstance", "(", "num_classes", "=", "15", ",", "categories", "=", "DENSEPOSE_CATEGORIES", ")", "\n", "\n", "total_start", "=", "time", ".", "time", "(", ")", "\n", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_i", ",", "(", "image_tensors", ",", "anns_batch", ",", "meta_batch", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'batch %d, last loop: %.3fs, batches per second=%.1f'", ",", "\n", "batch_i", ",", "time", ".", "time", "(", ")", "-", "loop_start", ",", "\n", "batch_i", "/", "max", "(", "1", ",", "(", "time", ".", "time", "(", ")", "-", "total_start", ")", ")", ")", "\n", "if", "batch_i", "<", "args", ".", "skip_n", ":", "\n", "            ", "continue", "\n", "", "if", "args", ".", "n", "and", "batch_i", ">=", "args", ".", "n", ":", "\n", "            ", "break", "\n", "\n", "", "if", "meta_batch", "[", "0", "]", "[", "'file_name'", "]", "!=", "'000000219294.jpg'", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "meta_batch", "[", "0", "]", "[", "'file_name'", "]", ")", "\n", "\n", "#if meta_batch[0]['image_id'] != 32901:", "\n", "#    continue", "\n", "\n", "im_h", ",", "im_w", "=", "image_tensors", ".", "shape", "[", "2", "]", ",", "image_tensors", ".", "shape", "[", "3", "]", "\n", "\n", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "len", "(", "[", "a", "\n", "for", "anns", "in", "anns_batch", "\n", "for", "a", "in", "anns", "\n", "if", "np", ".", "any", "(", "a", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ")", "]", ")", "<", "args", ".", "min_ann", ":", "\n", "            ", "continue", "\n", "\n", "", "pred_batch", "=", "processor", ".", "batch", "(", "model", ",", "image_tensors", ",", "device", "=", "args", ".", "device", ")", "\n", "eval_coco", ".", "decoder_time", "+=", "processor", ".", "last_decoder_time", "\n", "eval_coco", ".", "nn_time", "+=", "processor", ".", "last_nn_time", "\n", "\n", "pred_center", ",", "pred_center_offset", "=", "None", ",", "None", "\n", "pred_pose", ",", "pred_segm", ",", "pred_offset", ",", "pred_edge", ",", "pred_vote", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "isinstance", "(", "pred_batch", ",", "dict", ")", ":", "\n", "            ", "if", "'semantic'", "in", "pred_batch", ":", "\n", "                ", "pred_segm", "=", "pred_batch", "[", "'semantic'", "]", "\n", "", "if", "'offset'", "in", "pred_batch", ":", "\n", "                ", "pred_offset", "=", "pred_batch", "[", "'offset'", "]", "\n", "", "if", "'pose'", "in", "pred_batch", ":", "\n", "                ", "pred_pose", "=", "pred_batch", "[", "'pose'", "]", "\n", "", "if", "'edge'", "in", "pred_batch", ":", "\n", "                ", "pred_edge", "=", "pred_batch", "[", "'edge'", "]", "\n", "", "if", "'vote'", "in", "pred_batch", ":", "\n", "                ", "pred_vote", "=", "pred_batch", "[", "'vote'", "]", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "", "if", "'center'", "in", "pred_batch", ":", "\n", "                ", "pred_center", "=", "pred_batch", "[", "'center'", "]", "\n", "pred_center_offset", "=", "pred_batch", "[", "'center_offset'", "]", "\n", "\n", "", "", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "anns_batch", ")", "\n", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "meta_batch", ")", "\n", "assert", "len", "(", "image_tensors", ")", "==", "1", ",", "'only support batch size = 1'", "\n", "\n", "# process pose predictions", "\n", "if", "pred_pose", "is", "not", "None", "and", "args", ".", "eval_pose", "is", "True", ":", "\n", "            ", "pred_pose", "=", "eval_coco", ".", "from_predictions", "(", "pred_pose", "[", "0", "]", ",", "meta_batch", "[", "0", "]", ",", "\n", "debug", "=", "args", ".", "debug", ",", "gt", "=", "anns_batch", "[", "0", "]", ")", "\n", "\n", "# process semantic segmentation predictions", "\n", "", "if", "pred_segm", "is", "not", "None", "and", "args", ".", "eval_semantic", "is", "True", ":", "\n", "            ", "pred_segm", ",", "pred_segm_scores", ",", "gt_semantic", ",", "gt_human", ",", "pred_edge", "=", "eval_segm", ".", "from_predictions", "(", "pred_segm", ",", "(", "im_h", ",", "im_w", ")", ",", "\n", "pred_edge", "=", "pred_edge", ",", "\n", "meta", "=", "meta_batch", "[", "0", "]", ",", "\n", "gt", "=", "anns_batch", "[", "0", "]", ",", "\n", "pred_vote", "=", "pred_vote", ")", "\n", "\n", "# process offset predictions", "\n", "", "if", "pred_offset", "is", "not", "None", "and", "args", ".", "eval_instance", "is", "True", ":", "\n", "            ", "eval_inst", ".", "from_predictions", "(", "pred_offset", ",", "pred_segm", ",", "\n", "pred_segm_scores", ",", "\n", "pred_pose", ",", "pred_edge", ",", "\n", "pred_center", "=", "pred_center", ",", "\n", "pred_center_offset", "=", "pred_center_offset", ",", "\n", "input_size", "=", "(", "im_h", ",", "im_w", ")", ",", "\n", "meta", "=", "meta_batch", "[", "0", "]", ",", "\n", "gt_semantic", "=", "gt_semantic", ",", "\n", "gt_human", "=", "gt_human", ")", "\n", "\n", "", "if", "meta_batch", "[", "0", "]", "[", "'file_name'", "]", "!=", "'000000219294.jpg'", ":", "\n", "            ", "break", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "total_start", "\n", "\n", "# model stats", "\n", "count_ops", "=", "list", "(", "eval_coco", ".", "count_ops", "(", "model_cpu", ")", ")", "\n", "local_checkpoint", "=", "network", ".", "local_checkpoint_path", "(", "args", ".", "checkpoint", ")", "\n", "file_size", "=", "os", ".", "path", ".", "getsize", "(", "local_checkpoint", ")", "if", "local_checkpoint", "else", "-", "1.0", "\n", "\n", "# write coco", "\n", "\n", "# write", "\n", "if", "args", ".", "eval_pose", "is", "True", ":", "\n", "        ", "write_evaluations", "(", "eval_coco", ",", "args", ".", "output", ",", "args", ",", "total_time", ",", "count_ops", ",", "\n", "file_size", ")", "\n", "eval_coco", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "\n", "# write semantic parsing", "\n", "", "if", "args", ".", "eval_semantic", "is", "True", ":", "\n", "        ", "eval_segm", ".", "summary", "(", ")", "\n", "eval_segm", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "\n", "# write instance parsing", "\n", "", "if", "args", ".", "eval_instance", "is", "True", ":", "\n", "        ", "eval_inst", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "eval_inst", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.plot_training_data": [[14, 31], ["show.canvas", "ax.hist", "ax.hist", "ax.hist", "ax.hist", "ax.legend", "ax.set_xlabel"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas"], ["def", "plot_training_data", "(", "train_data", ",", "val_data", ",", "entry", "=", "0", ",", "entryname", "=", "None", ")", ":", "\n", "    ", "train_x", ",", "train_y", "=", "train_data", "\n", "val_x", ",", "val_y", "=", "val_data", "\n", "with", "show", ".", "canvas", "(", ")", "as", "ax", ":", "\n", "        ", "ax", ".", "hist", "(", "[", "xx", "[", "entry", "]", "for", "xx", "in", "train_x", "[", "train_y", "[", ":", ",", "0", "]", "==", "1", "]", "]", ",", "\n", "bins", "=", "50", ",", "alpha", "=", "0.3", ",", "density", "=", "True", ",", "color", "=", "'navy'", ",", "label", "=", "'train true'", ")", "\n", "ax", ".", "hist", "(", "[", "xx", "[", "entry", "]", "for", "xx", "in", "train_x", "[", "train_y", "[", ":", ",", "0", "]", "==", "0", "]", "]", ",", "\n", "bins", "=", "50", ",", "alpha", "=", "0.3", ",", "density", "=", "True", ",", "color", "=", "'orange'", ",", "label", "=", "'train false'", ")", "\n", "\n", "ax", ".", "hist", "(", "[", "xx", "[", "entry", "]", "for", "xx", "in", "val_x", "[", "val_y", "[", ":", ",", "0", "]", "==", "1", "]", "]", ",", "\n", "histtype", "=", "'step'", ",", "bins", "=", "50", ",", "density", "=", "True", ",", "color", "=", "'navy'", ",", "label", "=", "'val true'", ")", "\n", "ax", ".", "hist", "(", "[", "xx", "[", "entry", "]", "for", "xx", "in", "val_x", "[", "val_y", "[", ":", ",", "0", "]", "==", "0", "]", "]", ",", "\n", "histtype", "=", "'step'", ",", "bins", "=", "50", ",", "density", "=", "True", ",", "color", "=", "'orange'", ",", "label", "=", "'val false'", ")", "\n", "\n", "if", "entryname", ":", "\n", "            ", "ax", ".", "set_xlabel", "(", "entryname", ")", "\n", "", "ax", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.train_val_split_score": [[33, 51], ["data.map().collect", "int", "sum", "sum", "min", "min", "data.map", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.random", "float"], "function", ["None"], ["", "", "def", "train_val_split_score", "(", "data", ",", "train_fraction", "=", "0.6", ",", "balance", "=", "True", ")", ":", "\n", "    ", "xy_list", "=", "data", ".", "map", "(", "lambda", "d", ":", "(", "[", "d", "[", "'score'", "]", "]", ",", "[", "float", "(", "d", "[", "'target'", "]", ")", "]", ")", ")", ".", "collect", "(", ")", "\n", "\n", "if", "balance", ":", "\n", "        ", "n_true", "=", "sum", "(", "1", "for", "x", ",", "y", "in", "xy_list", "if", "y", "[", "0", "]", "==", "1.0", ")", "\n", "n_false", "=", "sum", "(", "1", "for", "x", ",", "y", "in", "xy_list", "if", "y", "[", "0", "]", "==", "0.0", ")", "\n", "p_true", "=", "min", "(", "1.0", ",", "n_false", "/", "n_true", ")", "\n", "p_false", "=", "min", "(", "1.0", ",", "n_true", "/", "n_false", ")", "\n", "xy_list", "=", "[", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "xy_list", "\n", "if", "random", ".", "random", "(", ")", "<", "(", "p_true", "if", "y", "[", "0", "]", "==", "1.0", "else", "p_false", ")", "]", "\n", "\n", "", "n_train", "=", "int", "(", "train_fraction", "*", "len", "(", "xy_list", ")", ")", "\n", "\n", "return", "(", "\n", "(", "torch", ".", "tensor", "(", "[", "x", "for", "x", ",", "_", "in", "xy_list", "[", ":", "n_train", "]", "]", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "y", "for", "_", ",", "y", "in", "xy_list", "[", ":", "n_train", "]", "]", ")", ")", ",", "\n", "(", "torch", ".", "tensor", "(", "[", "x", "for", "x", ",", "_", "in", "xy_list", "[", "n_train", ":", "]", "]", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "y", "for", "_", ",", "y", "in", "xy_list", "[", "n_train", ":", "]", "]", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.train_val_split_keypointscores": [[54, 68], ["data.map().collect", "int", "data.map", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "float"], "function", ["None"], ["", "def", "train_val_split_keypointscores", "(", "data", ",", "train_fraction", "=", "0.6", ")", ":", "\n", "    ", "xy_list", "=", "(", "\n", "data", "\n", ".", "map", "(", "lambda", "d", ":", "(", "[", "d", "[", "'score'", "]", "]", "+", "[", "xyv", "[", "2", "]", "for", "xyv", "in", "d", "[", "'keypoints'", "]", "]", "+", "d", "[", "'joint_scales'", "]", ",", "\n", "[", "float", "(", "d", "[", "'target'", "]", ")", "]", ")", ")", "\n", ".", "collect", "(", ")", "\n", ")", "\n", "n_train", "=", "int", "(", "train_fraction", "*", "len", "(", "xy_list", ")", ")", "\n", "\n", "return", "(", "\n", "(", "torch", ".", "tensor", "(", "[", "x", "for", "x", ",", "_", "in", "xy_list", "[", ":", "n_train", "]", "]", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "y", "for", "_", ",", "y", "in", "xy_list", "[", ":", "n_train", "]", "]", ")", ")", ",", "\n", "(", "torch", ".", "tensor", "(", "[", "x", "for", "x", ",", "_", "in", "xy_list", "[", "n_train", ":", "]", "]", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "y", "for", "_", ",", "y", "in", "xy_list", "[", "n_train", ":", "]", "]", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.train_epoch": [[71, 83], ["optimizer.zero_grad", "model", "torch.nn.functional.binary_cross_entropy", "float", "torch.nn.functional.binary_cross_entropy.backward", "optimizer.step", "len", "torch.nn.functional.binary_cross_entropy.item"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.step"], ["", "def", "train_epoch", "(", "model", ",", "loader", ",", "optimizer", ")", ":", "\n", "    ", "epoch_loss", "=", "0.0", "\n", "for", "x", ",", "y", "in", "loader", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "y_hat", "=", "model", "(", "x", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy", "(", "y_hat", ",", "y", ")", "\n", "epoch_loss", "+=", "float", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "epoch_loss", "/", "len", "(", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.val_epoch": [[84, 93], ["torch.no_grad", "len", "model", "torch.nn.functional.binary_cross_entropy", "float", "torch.nn.functional.binary_cross_entropy.item"], "function", ["None"], ["", "def", "val_epoch", "(", "model", ",", "loader", ")", ":", "\n", "    ", "epoch_loss", "=", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "x", ",", "y", "in", "loader", ":", "\n", "            ", "y_hat", "=", "model", "(", "x", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy", "(", "y_hat", ",", "y", ")", "\n", "epoch_loss", "+=", "float", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "", "return", "epoch_loss", "/", "len", "(", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.main": [[95, 123], ["pysparkling.Context", "pysparkling.Context.textFile().map().cache", "train_instance_scorer.train_val_split_score", "train_instance_scorer.plot_training_data", "train_instance_scorer.train_val_split_keypointscores", "decoder.instance_scorer.InstanceScorer", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.optim.SGD", "range", "train_instance_scorer.plot_training_data", "torch.save", "decoder.instance_scorer.InstanceScorer.parameters", "train_instance_scorer.train_epoch", "train_instance_scorer.val_epoch", "print", "torch.no_grad", "pysparkling.Context.textFile().map", "decoder.instance_scorer.InstanceScorer.", "decoder.instance_scorer.InstanceScorer.", "pysparkling.Context.textFile"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.train_val_split_score", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.plot_training_data", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.train_val_split_keypointscores", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.plot_training_data", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.train_epoch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_instance_scorer.val_epoch"], ["", "def", "main", "(", ")", ":", "\n", "    ", "sc", "=", "pysparkling", ".", "Context", "(", ")", "\n", "data", "=", "sc", ".", "textFile", "(", "DATA_FILE", ")", ".", "map", "(", "json", ".", "loads", ")", ".", "cache", "(", ")", "\n", "\n", "train_data_score", ",", "val_data_score", "=", "train_val_split_score", "(", "data", ")", "\n", "plot_training_data", "(", "train_data_score", ",", "val_data_score", ",", "entryname", "=", "'score'", ")", "\n", "\n", "train_data", ",", "val_data", "=", "train_val_split_keypointscores", "(", "data", ")", "\n", "\n", "model", "=", "InstanceScorer", "(", ")", "\n", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "*", "train_data", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "256", ",", "shuffle", "=", "True", ")", "\n", "\n", "val_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "*", "val_data", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "256", ",", "shuffle", "=", "False", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ",", "momentum", "=", "0.9", ")", "\n", "for", "epoch_i", "in", "range", "(", "100", ")", ":", "\n", "        ", "train_loss", "=", "train_epoch", "(", "model", ",", "train_loader", ",", "optimizer", ")", "\n", "val_loss", "=", "val_epoch", "(", "model", ",", "val_loader", ")", "\n", "print", "(", "epoch_i", ",", "train_loss", ",", "val_loss", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "post_train_data", "=", "(", "model", "(", "train_data", "[", "0", "]", ")", ",", "train_data", "[", "1", "]", ")", "\n", "post_val_data", "=", "(", "model", "(", "val_data", "[", "0", "]", ")", ",", "val_data", "[", "1", "]", ")", "\n", "", "plot_training_data", "(", "post_train_data", ",", "post_val_data", ",", "entryname", "=", "'optimized score'", ")", "\n", "torch", ".", "save", "(", "model", ",", "'instance_scorer.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.benchmark.cli": [[32, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_known_args", "logging.basicConfig", "LOG.info", "eval_args.append", "any", "LOG.info", "eval_args.append", "datetime.datetime.now().strftime", "os.makedirs", "l.startswith", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "cli", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.benchmark'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbones'", ",", "default", "=", "DEFAULT_BACKBONES", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'backbones to evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "'--iccv2019-ablation'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--dense-ablation'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "args", ",", "eval_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", "if", "not", "args", ".", "debug", "else", "logging", ".", "DEBUG", ")", "\n", "\n", "# default eval_args", "\n", "if", "not", "eval_args", ":", "\n", "        ", "eval_args", "=", "[", "'--all-images'", ",", "'--loader-workers=8'", "]", "\n", "\n", "", "if", "'--all-images'", "not", "in", "eval_args", ":", "\n", "        ", "LOG", ".", "info", "(", "'adding \"--all-images\" to the argument list'", ")", "\n", "eval_args", ".", "append", "(", "'--all-images'", ")", "\n", "\n", "", "if", "not", "any", "(", "l", ".", "startswith", "(", "'--loader-workers'", ")", "for", "l", "in", "eval_args", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'adding \"--loader-workers=8\" to the argument list'", ")", "\n", "eval_args", ".", "append", "(", "'--loader-workers=8'", ")", "\n", "\n", "# generate a default output filename", "\n", "", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "args", ".", "output", "=", "'outputs/benchmark-{}/'", ".", "format", "(", "now", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "output", ")", "\n", "\n", "", "return", "args", ",", "eval_args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.benchmark.run_eval_coco": [[75, 92], ["output_name.replace.replace", "os.path.join", "os.path.exists", "LOG.debug", "subprocess.run", "LOG.warning"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "run_eval_coco", "(", "output_folder", ",", "backbone", ",", "eval_args", ",", "output_name", "=", "None", ")", ":", "\n", "    ", "if", "output_name", "is", "None", ":", "\n", "        ", "output_name", "=", "backbone", "\n", "", "output_name", "=", "output_name", ".", "replace", "(", "'/'", ",", "'-'", ")", "\n", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "output_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_file", "+", "'.stats.json'", ")", ":", "\n", "        ", "LOG", ".", "warning", "(", "'Output file %s exists already. Skipping.'", ",", "\n", "out_file", "+", "'.stats.json'", ")", "\n", "return", "\n", "\n", "", "LOG", ".", "debug", "(", "'Launching eval for %s.'", ",", "output_name", ")", "\n", "subprocess", ".", "run", "(", "[", "\n", "'python'", ",", "'-m'", ",", "'openpifpaf.eval_coco'", ",", "\n", "'--output'", ",", "out_file", ",", "\n", "'--checkpoint'", ",", "backbone", ",", "\n", "]", "+", "eval_args", ",", "check", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.benchmark.main": [[94, 163], ["benchmark.cli", "pysparkling.Context", "pysparkling.Context.wholeTextFiles().mapValues().map().collectAsMap", "LOG.debug", "print", "print", "sorted", "zip", "sc.wholeTextFiles().mapValues().map().collectAsMap.items", "print", "len", "benchmark.run_eval_coco", "pysparkling.Context.wholeTextFiles().mapValues().map", "zip", "benchmark.run_eval_coco", "benchmark.run_eval_coco", "pysparkling.Context.wholeTextFiles().mapValues", "d[].replace().replace", "pysparkling.Context.wholeTextFiles", "d[].replace"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.benchmark.run_eval_coco", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.benchmark.run_eval_coco", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.benchmark.run_eval_coco"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", ",", "eval_args", "=", "cli", "(", ")", "\n", "\n", "if", "args", ".", "iccv2019_ablation", ":", "\n", "        ", "assert", "len", "(", "args", ".", "backbones", ")", "==", "1", "\n", "multi_eval_args", "=", "[", "\n", "eval_args", ",", "\n", "eval_args", "+", "[", "'--connection-method=blend'", "]", ",", "\n", "eval_args", "+", "[", "'--connection-method=blend'", ",", "'--long-edge=961'", ",", "'--multi-scale'", ",", "\n", "'--no-multi-scale-hflip'", "]", ",", "\n", "eval_args", "+", "[", "'--connection-method=blend'", ",", "'--long-edge=961'", ",", "'--multi-scale'", "]", ",", "\n", "]", "\n", "names", "=", "[", "\n", "'singlescale-max'", ",", "\n", "'singlescale'", ",", "\n", "'multiscale-nohflip'", ",", "\n", "'multiscale'", ",", "\n", "]", "\n", "for", "eval_args_i", ",", "name_i", "in", "zip", "(", "multi_eval_args", ",", "names", ")", ":", "\n", "            ", "run_eval_coco", "(", "args", ".", "output", ",", "args", ".", "backbones", "[", "0", "]", ",", "eval_args_i", ",", "output_name", "=", "name_i", ")", "\n", "", "", "elif", "args", ".", "dense_ablation", ":", "\n", "        ", "multi_eval_args", "=", "[", "\n", "eval_args", ",", "\n", "eval_args", "+", "[", "'--dense-connections'", ",", "'--dense-coupling=1.0'", "]", ",", "\n", "eval_args", "+", "[", "'--dense-connections'", "]", ",", "\n", "]", "\n", "for", "backbone", "in", "args", ".", "backbones", ":", "\n", "            ", "names", "=", "[", "\n", "backbone", ",", "\n", "'{}.wdense'", ".", "format", "(", "backbone", ")", ",", "\n", "'{}.wdense.whierarchy'", ".", "format", "(", "backbone", ")", ",", "\n", "]", "\n", "for", "eval_args_i", ",", "name_i", "in", "zip", "(", "multi_eval_args", ",", "names", ")", ":", "\n", "                ", "run_eval_coco", "(", "args", ".", "output", ",", "backbone", ",", "eval_args_i", ",", "output_name", "=", "name_i", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "backbone", "in", "args", ".", "backbones", ":", "\n", "            ", "run_eval_coco", "(", "args", ".", "output", ",", "backbone", ",", "eval_args", ")", "\n", "\n", "", "", "sc", "=", "pysparkling", ".", "Context", "(", ")", "\n", "stats", "=", "(", "\n", "sc", "\n", ".", "wholeTextFiles", "(", "args", ".", "output", "+", "'*.stats.json'", ")", "\n", ".", "mapValues", "(", "json", ".", "loads", ")", "\n", ".", "map", "(", "lambda", "d", ":", "(", "d", "[", "0", "]", ".", "replace", "(", "'.stats.json'", ",", "''", ")", ".", "replace", "(", "args", ".", "output", ",", "''", ")", ",", "d", "[", "1", "]", ")", ")", "\n", ".", "collectAsMap", "(", ")", "\n", ")", "\n", "LOG", ".", "debug", "(", "'all data: %s'", ",", "stats", ")", "\n", "\n", "# pretty printing", "\n", "# pylint: disable=line-too-long", "\n", "print", "(", "'| Backbone                  | AP       | APM      | APL      | t_{total} [ms]  | t_{dec} [ms] |     size |'", ")", "\n", "print", "(", "'|--------------------------:|:--------:|:--------:|:--------:|:---------------:|:------------:|---------:|'", ")", "\n", "for", "backbone", ",", "data", "in", "sorted", "(", "stats", ".", "items", "(", ")", ",", "key", "=", "lambda", "b_d", ":", "b_d", "[", "1", "]", "[", "'stats'", "]", "[", "0", "]", ")", ":", "\n", "        ", "print", "(", "\n", "'| {backbone: <25} '", "\n", "'| __{AP:.1f}__ '", "\n", "'| {APM: <8.1f} '", "\n", "'| {APL: <8.1f} '", "\n", "'| {t: <15.0f} '", "\n", "'| {tdec: <12.0f} '", "\n", "'| {file_size: >6.1f}MB '", "\n", "'|'", ".", "format", "(", "\n", "backbone", "=", "'['", "+", "backbone", "+", "']'", ",", "\n", "AP", "=", "100.0", "*", "data", "[", "'stats'", "]", "[", "0", "]", ",", "\n", "APM", "=", "100.0", "*", "data", "[", "'stats'", "]", "[", "3", "]", ",", "\n", "APL", "=", "100.0", "*", "data", "[", "'stats'", "]", "[", "4", "]", ",", "\n", "t", "=", "1000.0", "*", "data", "[", "'total_time'", "]", "/", "data", "[", "'n_images'", "]", ",", "\n", "tdec", "=", "1000.0", "*", "data", "[", "'decoder_time'", "]", "/", "data", "[", "'n_images'", "]", ",", "\n", "file_size", "=", "data", "[", "'file_size'", "]", "/", "1024", "/", "1024", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance.__init__": [[170, 187], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "categories", ")", ":", "\n", "        ", "self", ".", "offset_vis", "=", "{", "}", "\n", "self", ".", "bbox_vis", "=", "{", "}", "\n", "self", ".", "human_vis", "=", "{", "}", "\n", "self", ".", "instance_vis", "=", "{", "}", "\n", "self", ".", "confs_vis", "=", "{", "}", "\n", "self", ".", "gt_instance_vis", "=", "{", "}", "\n", "self", ".", "gt_confs_vis", "=", "{", "}", "\n", "self", ".", "superpixel_vis", "=", "{", "}", "\n", "self", ".", "center_vis", "=", "{", "}", "\n", "self", ".", "center_offset_vis", "=", "{", "}", "\n", "self", ".", "offset_to_vis", "=", "{", "}", "\n", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "categories", "=", "categories", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance.from_predictions": [[188, 261], ["int", "eval_densepose.EvalInstance._restore_offset_size", "eval_densepose.EvalInstance._filter_annotations", "eval_densepose.EvalInstance._group_pixels", "eval_densepose.get_instance", "eval_densepose.compute_confidence", "eval_densepose.get_instance", "eval_densepose.compute_gt_confidence", "numpy.where", "eval_densepose.EvalInstance._restore_offset_size", "eval_densepose.EvalInstance._restore_center_size", "show.flow_vis.flow_compute_color", "eval_densepose.EvalInstance.copy", "numpy.sum", "numpy.concatenate", "show.flow_vis.flow_compute_color", "numpy.stack", "numpy.max", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_offset_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._filter_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._group_pixels", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_confidence", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_gt_confidence", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_offset_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_center_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_compute_color", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_compute_color", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "def", "from_predictions", "(", "self", ",", "offset", ",", "semantic", ",", "semantic_scores", ",", "pose", ",", "edge", ",", "\n", "input_size", ",", "meta", ",", "gt_semantic", ",", "gt_human", ",", "\n", "pred_center", "=", "None", ",", "pred_center_offset", "=", "None", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "\n", "target_size", "=", "semantic", ".", "shape", "\n", "offset", "=", "self", ".", "_restore_offset_size", "(", "offset", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "\n", "if", "pred_center_offset", "is", "not", "None", ":", "\n", "            ", "pred_center_offset", "=", "self", ".", "_restore_offset_size", "(", "pred_center_offset", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "\n", "", "if", "pred_center", "is", "not", "None", ":", "\n", "            ", "pred_center", "=", "self", ".", "_restore_center_size", "(", "pred_center", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "\n", "", "pose", "=", "self", ".", "_filter_annotations", "(", "pose", ")", "\n", "\n", "human", ",", "joint_score_map", ",", "skeleton_score_map", ",", "offset", "=", "self", ".", "_group_pixels", "(", "offset", ",", "semantic", ",", "pose", ",", "edge", ")", "\n", "\n", "#filename = os.path.join(IMAGE_DIR_VAL, '0'*(12-len(str(image_id))) + str(image_id) + '.jpg')", "\n", "#human = self._do_superpixel_refinement(filename, human)", "\n", "\n", "# process predictions", "\n", "instance", ",", "class_map", "=", "get_instance", "(", "semantic", ",", "human", ")", "\n", "\n", "confs", "=", "compute_confidence", "(", "semantic_scores", ",", "class_map", ",", "instance", ",", "\n", "joint_score_map", ",", "skeleton_score_map", ")", "\n", "self", ".", "confs_vis", "[", "image_id", "]", "=", "confs", "\n", "\n", "# process ground-truths", "\n", "gt_instance", ",", "gt_class_map", "=", "get_instance", "(", "gt_semantic", ",", "gt_human", ")", "\n", "gt_confs", "=", "compute_gt_confidence", "(", "gt_instance", ",", "gt_class_map", ")", "\n", "self", ".", "gt_confs_vis", "[", "image_id", "]", "=", "gt_confs", "\n", "\n", "# cache for debug", "\n", "if", "offset", "is", "not", "None", ":", "\n", "            ", "offset_vis", "=", "flow_compute_color", "(", "offset", "[", ":", ",", ":", ",", "1", "]", ",", "offset", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "offset_vis", "=", "None", "\n", "\n", "###", "\n", "", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "semantic", ">", "0", ")", "\n", "try", ":", "\n", "            ", "offset_vector", "=", "offset", "[", "y_index", ",", "x_index", ",", "0", ":", "2", "]", "\n", "xy_offset", "=", "offset_vector", "+", "np", ".", "stack", "(", "(", "x_index", ",", "y_index", ")", ")", ".", "T", "\n", "offset_copy", "=", "offset", ".", "copy", "(", ")", "\n", "offset_copy", "[", "y_index", ",", "x_index", ",", "0", "]", "=", "xy_offset", "[", ":", ",", "0", "]", "\n", "offset_copy", "[", "y_index", ",", "x_index", ",", "1", "]", "=", "xy_offset", "[", ":", ",", "1", "]", "\n", "b", "=", "np", ".", "sum", "(", "offset_copy", "*", "offset_copy", ",", "axis", "=", "-", "1", ")", "\n", "b", "=", "b", "/", "np", ".", "max", "(", "b", ")", "*", "255", "\n", "r", "=", "offset_copy", "[", ":", ",", ":", ",", "0", "]", "/", "np", ".", "max", "(", "offset_copy", "[", ":", ",", ":", ",", "0", "]", ")", "*", "255", "\n", "g", "=", "offset_copy", "[", ":", ",", ":", ",", "1", "]", "/", "np", ".", "max", "(", "offset_copy", "[", ":", ",", ":", ",", "1", "]", ")", "*", "255", "\n", "r", "=", "r", "[", "...", ",", "None", "]", "\n", "g", "=", "g", "[", "...", ",", "None", "]", "\n", "b", "=", "b", "[", "...", ",", "None", "]", "\n", "embedding", "=", "np", ".", "concatenate", "(", "(", "r", ",", "g", ",", "b", ")", ",", "axis", "=", "2", ")", "\n", "self", ".", "offset_to_vis", "[", "image_id", "]", "=", "embedding", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "human_vis", "[", "image_id", "]", "=", "human", "\n", "self", ".", "instance_vis", "[", "image_id", "]", "=", "instance", "\n", "self", ".", "gt_instance_vis", "[", "image_id", "]", "=", "gt_instance", "\n", "self", ".", "offset_vis", "[", "image_id", "]", "=", "offset_vis", "\n", "self", ".", "bbox_vis", "[", "image_id", "]", "=", "[", "x", "[", "'bbox'", "]", "for", "x", "in", "pose", "if", "x", "[", "'score'", "]", ">", "0.1", "]", "\n", "if", "pred_center", "is", "not", "None", ":", "\n", "            ", "self", ".", "center_vis", "[", "image_id", "]", "=", "pred_center", "*", "255", "\n", "", "if", "pred_center_offset", "is", "not", "None", ":", "\n", "            ", "self", ".", "center_offset_vis", "[", "image_id", "]", "=", "flow_compute_color", "(", "pred_center_offset", "[", ":", ",", ":", ",", "1", "]", ",", "pred_center_offset", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance._do_superpixel_refinement": [[262, 287], ["skimage.segmentation.slic", "numpy.unique().tolist", "numpy.where", "copy.deepcopy", "cv2.imread", "numpy.where", "instance_ids.tolist.tolist.tolist", "max", "numpy.unique", "set", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["", "", "def", "_do_superpixel_refinement", "(", "self", ",", "filename", ",", "instance", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "filename", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "if", "instance", "is", "None", ":", "\n", "            ", "return", "instance", "\n", "\n", "", "segments", "=", "slic", "(", "im", ",", "n_segments", "=", "1150", ")", "\n", "self", ".", "superpixel_vis", "[", "os", ".", "path", ".", "basename", "(", "filename", ")", "[", ":", "-", "4", "]", "]", "=", "[", "im", ",", "segments", "]", "\n", "segment_ids", "=", "np", ".", "unique", "(", "segments", ")", ".", "tolist", "(", ")", "\n", "\n", "mask", "=", "np", ".", "where", "(", "instance", ">", "0", ",", "1", ",", "0", ")", "\n", "\n", "new_instance", "=", "copy", ".", "deepcopy", "(", "instance", ")", "\n", "for", "sid", "in", "segment_ids", ":", "\n", "            ", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "segments", "==", "sid", ")", "\n", "instance_ids", "=", "instance", "[", "y_index", ",", "x_index", "]", "\n", "instance_ids", "=", "instance_ids", ".", "tolist", "(", ")", "\n", "\n", "max_id", "=", "max", "(", "set", "(", "instance_ids", ")", ",", "key", "=", "instance_ids", ".", "count", ")", "\n", "if", "max_id", "==", "0", ":", "\n", "                ", "continue", "\n", "", "new_instance", "[", "y_index", ",", "x_index", "]", "=", "max_id", "\n", "", "new_instance", "=", "new_instance", "*", "mask", "\n", "\n", "return", "new_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance._skeleton_distance": [[289, 333], ["enumerate", "numpy.reshape", "numpy.ones", "range", "numpy.mean", "skeleton_distance.append", "matplotlib.figure", "matplotlib.imshow", "range", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "matplotlib.plot", "numpy.ones_like().astype", "numpy.ma.masked_array", "skfmm.distance", "int", "int", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "_skeleton_distance", "(", "self", ",", "pose", ",", "edge", ")", ":", "\n", "        ", "skeleton_distance", "=", "[", "]", "\n", "for", "pid", ",", "ann", "in", "enumerate", "(", "pose", ")", ":", "\n", "            ", "kps", "=", "ann", "[", "'keypoints'", "]", "\n", "kps", "=", "np", ".", "reshape", "(", "kps", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "all_dt", "=", "np", ".", "ones", "(", "(", "edge", ".", "shape", "[", "0", "]", ",", "edge", ".", "shape", "[", "1", "]", ",", "17", ")", ")", "\n", "for", "ii", "in", "range", "(", "17", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "score", "=", "kps", "[", "ii", ",", "2", "]", "\n", "if", "score", "<", "0.1", ":", "\n", "                        ", "continue", "\n", "\n", "", "x", ",", "y", "=", "int", "(", "kps", "[", "ii", "]", "[", "0", "]", ")", ",", "int", "(", "kps", "[", "ii", "]", "[", "1", "]", ")", "\n", "m", "=", "np", ".", "ones_like", "(", "edge", ")", ".", "astype", "(", "float", ")", "\n", "m", "[", "y", ",", "x", "]", "=", "0", "\n", "\n", "r_edge", "=", "edge", ">", "0.2", "\n", "m", "=", "np", ".", "ma", ".", "masked_array", "(", "m", ",", "r_edge", ")", "\n", "dt", "=", "skfmm", ".", "distance", "(", "m", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "\n", "", "all_dt", "[", ":", ",", ":", ",", "ii", "]", "=", "dt", "\n", "\n", "", "mean_dt", "=", "np", ".", "mean", "(", "all_dt", ",", "axis", "=", "-", "1", ")", "\n", "\n", "skeleton_distance", ".", "append", "(", "mean_dt", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "mean_dt", ")", "\n", "for", "ii", "in", "range", "(", "17", ")", ":", "\n", "                ", "if", "kps", "[", "ii", "]", "[", "2", "]", "<", "0.1", ":", "\n", "                    ", "continue", "\n", "", "plt", ".", "plot", "(", "kps", "[", "ii", "]", "[", "0", "]", ",", "kps", "[", "ii", "]", "[", "1", "]", ",", "'r+'", ")", "\n", "", "plt", ".", "savefig", "(", "'{}.jpg'", ".", "format", "(", "pid", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "edge", ">", "0.2", ")", "\n", "plt", ".", "savefig", "(", "'edge.jpg'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "return", "skeleton_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance._group_pixels": [[334, 403], ["numpy.where", "min", "numpy.where", "eval_densepose.EvalInstance._prepare_sparse_instance", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.argmin", "numpy.amin", "numpy.array", "numpy.zeros_like", "instance_id.tolist", "list", "zip", "numpy.zeros_like", "numpy.zeros_like", "len", "eval_densepose.EvalInstance._skeleton_distance", "len", "numpy.zeros_like", "range", "set", "instance_id.tolist.count", "numpy.array", "numpy.array", "numpy.stack", "zip", "numpy.array", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._prepare_sparse_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._skeleton_distance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.count_ops.count", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "def", "_group_pixels", "(", "self", ",", "offset", ",", "semantic", ",", "pose", ",", "edge", ")", ":", "\n", "        ", "person_mask", "=", "np", ".", "where", "(", "semantic", ">", "0", ",", "1", ",", "0", ")", "\n", "offset", "[", ":", ",", ":", ",", "0", "]", "*=", "person_mask", "\n", "offset", "[", ":", ",", ":", ",", "1", "]", "*=", "person_mask", "\n", "\n", "im_h", ",", "im_w", "=", "person_mask", ".", "shape", "\n", "min_size", "=", "min", "(", "im_h", ",", "im_w", ")", "\n", "\n", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "semantic", ">", "0", ")", "\n", "offset_vector", "=", "offset", "[", "y_index", ",", "x_index", ",", "0", ":", "2", "]", "\n", "xy_offset", "=", "offset_vector", "[", ":", ",", ":", ":", "-", "1", "]", "+", "np", ".", "stack", "(", "(", "x_index", ",", "y_index", ")", ")", ".", "T", "\n", "\n", "xy_list", ",", "id_list", ",", "joint_score_list", ",", "person_score_list", ",", "scale_list", "=", "self", ".", "_prepare_sparse_instance", "(", "pose", ",", "person_mask", ")", "\n", "\n", "if", "len", "(", "xy_list", ")", "==", "0", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "xy_list", "=", "np", ".", "concatenate", "(", "xy_list", ",", "axis", "=", "0", ")", "\n", "xy_pose", "=", "np", ".", "array", "(", "xy_list", ")", "\n", "\n", "xy_offset", "=", "xy_offset", "[", "None", ",", "...", "]", "# 1 * N * 2", "\n", "xy_pose", "=", "xy_pose", "[", ":", ",", "None", ",", "...", "]", "# K * 1 * 2", "\n", "\n", "# joint distance (local metric)", "\n", "score_list", "=", "[", "s1", "+", "s2", "for", "s1", ",", "s2", "in", "zip", "(", "joint_score_list", ",", "person_score_list", ")", "]", "\n", "score", "=", "np", ".", "array", "(", "score_list", ")", "\n", "joint_distance", "=", "np", ".", "linalg", ".", "norm", "(", "xy_pose", "-", "xy_offset", ",", "axis", "=", "-", "1", ")", "# K * N", "\n", "joint_distance", "=", "joint_distance", ".", "T", "/", "(", "score", "+", "1e-6", ")", "/", "(", "np", ".", "array", "(", "scale_list", ")", "+", "1e-6", ")", "\n", "distance", "=", "joint_distance", ".", "T", "\n", "\n", "if", "0", ":", "\n", "# skeleton distance (global metric)", "\n", "            ", "skeleton_distance", "=", "self", ".", "_skeleton_distance", "(", "pose", ",", "edge", ")", "\n", "skeleton_num", "=", "len", "(", "skeleton_distance", ")", "\n", "\n", "assert", "skeleton_num", "==", "joint_distance", ".", "shape", "[", "0", "]", "//", "17", "\n", "\n", "distance", "=", "np", ".", "zeros_like", "(", "joint_distance", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ii", "in", "range", "(", "skeleton_num", ")", ":", "\n", "                ", "jnt_dist", "=", "joint_distance", "[", "ii", "*", "17", ":", "(", "ii", "+", "1", ")", "*", "17", ",", ":", "]", "# 17 x N", "\n", "skl_dist", "=", "skeleton_distance", "[", "ii", "]", "[", "y_index", ",", "x_index", "]", "# 1 x N", "\n", "skl_dist", "=", "np", ".", "reshape", "(", "skl_dist", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "distance", "[", "ii", "*", "17", ":", "(", "ii", "+", "1", ")", "*", "17", ",", ":", "]", "=", "jnt_dist", "*", "skl_dist", "\n", "\n", "", "", "index", "=", "np", ".", "argmin", "(", "distance", ",", "axis", "=", "0", ")", "\n", "min_dist", "=", "np", ".", "amin", "(", "distance", ",", "axis", "=", "0", ")", "\n", "instance_list", "=", "np", ".", "array", "(", "id_list", ")", "\n", "instance_id", "=", "instance_list", "[", "index", "]", "+", "1", "\n", "\n", "instance", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "instance", "[", "y_index", ",", "x_index", "]", "=", "instance_id", "\n", "\n", "# remove instances with few pixels", "\n", "instance_id_list", "=", "instance_id", ".", "tolist", "(", ")", "\n", "instance_ids", "=", "list", "(", "set", "(", "instance_id_list", ")", ")", "\n", "counts", "=", "[", "instance_id_list", ".", "count", "(", "x", ")", "for", "x", "in", "instance_ids", "]", "\n", "for", "id", ",", "count", "in", "zip", "(", "instance_ids", ",", "counts", ")", ":", "\n", "            ", "if", "count", "<", "min_size", "/", "10.", ":", "\n", "                ", "instance", "[", "instance", "==", "id", "]", "=", "0", "\n", "\n", "", "", "joint_score_map", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "float", ")", "\n", "joint_score_map", "[", "y_index", ",", "x_index", "]", "=", "np", ".", "array", "(", "joint_score_list", ")", "[", "index", "]", "\n", "\n", "skeleton_score_map", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "float", ")", "\n", "skeleton_score_map", "[", "y_index", ",", "x_index", "]", "=", "np", ".", "array", "(", "person_score_list", ")", "[", "index", "]", "\n", "\n", "return", "instance", ",", "joint_score_map", ",", "skeleton_score_map", ",", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance._filter_annotations": [[404, 417], ["numpy.reshape", "keypoints[].tolist", "len", "new_annotations.append"], "methods", ["None"], ["", "def", "_filter_annotations", "(", "self", ",", "annotations", ",", "th_skl", "=", "0.3", ",", "th_joint", "=", "0.1", ")", ":", "\n", "        ", "annotations", "=", "[", "ann", "for", "ann", "in", "annotations", "if", "ann", "[", "'score'", "]", ">=", "th_skl", "]", "\n", "\n", "new_annotations", "=", "[", "]", "\n", "for", "ann", "in", "annotations", ":", "\n", "            ", "keypoints", "=", "ann", "[", "'keypoints'", "]", "\n", "keypoints", "=", "np", ".", "reshape", "(", "keypoints", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "scores", "=", "keypoints", "[", ":", ",", "-", "1", "]", ".", "tolist", "(", ")", "\n", "size", "=", "len", "(", "[", "s", "for", "s", "in", "scores", "if", "s", ">", "th_joint", "]", ")", "\n", "if", "size", ">", "2", ":", "\n", "                ", "new_annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "return", "new_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance._prepare_sparse_instance": [[418, 451], ["enumerate", "numpy.reshape", "xy_list.append", "id_list.extend", "math.sqrt", "scale_list.extend", "joint_score_list.extend", "person_score_list.extend", "kps[].tolist", "numpy.sum"], "methods", ["None"], ["", "def", "_prepare_sparse_instance", "(", "self", ",", "annotations", ",", "fg_mask", "=", "None", ")", ":", "\n", "        ", "xy_list", "=", "[", "]", "\n", "id_list", "=", "[", "]", "\n", "scale_list", "=", "[", "]", "\n", "joint_score_list", "=", "[", "]", "\n", "person_score_list", "=", "[", "]", "\n", "\n", "if", "fg_mask", "is", "not", "None", ":", "\n", "            ", "fg_mask", "[", "fg_mask", ">", "0", "]", "=", "1", "\n", "\n", "", "for", "pid", ",", "ann", "in", "enumerate", "(", "annotations", ")", ":", "\n", "            ", "kps", "=", "ann", "[", "'keypoints'", "]", "\n", "kps", "=", "np", ".", "reshape", "(", "kps", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "\n", "bbox", "=", "ann", "[", "'bbox'", "]", "\n", "\n", "if", "fg_mask", "is", "not", "None", ":", "\n", "                ", "x", ",", "y", ",", "h", ",", "w", "=", "bbox", "[", ":", "4", "]", "\n", "box_size", "=", "h", "*", "w", "\n", "fg_conf", "=", "np", ".", "sum", "(", "fg_mask", ")", "/", "box_size", "\n", "\n", "if", "fg_conf", "<", "0.1", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "xy_list", ".", "append", "(", "kps", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "id_list", ".", "extend", "(", "[", "pid", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "scale", "=", "math", ".", "sqrt", "(", "bbox", "[", "2", "]", "*", "bbox", "[", "3", "]", ")", "\n", "scale_list", ".", "extend", "(", "[", "scale", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "joint_score_list", ".", "extend", "(", "kps", "[", ":", ",", "-", "1", "]", ".", "tolist", "(", ")", ")", "\n", "person_score_list", ".", "extend", "(", "[", "ann", "[", "'score'", "]", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "return", "xy_list", ",", "id_list", ",", "joint_score_list", ",", "person_score_list", ",", "scale_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance._restore_offset_size": [[452, 464], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.interpolate", "torch.interpolate", "offset_rescale[].permute().cpu().numpy", "transforms.Preprocess.semantic_annotation_inverse", "offset_rescale[].permute().cpu", "offset_rescale[].permute"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "_restore_offset_size", "(", "self", ",", "offset", ",", "meta", ",", "input_size", ",", "target_size", ")", ":", "\n", "        ", "offset", "=", "torch", ".", "tensor", "(", "offset", ")", "\n", "offset_rescale", "=", "F", ".", "interpolate", "(", "input", "=", "offset", ",", "size", "=", "input_size", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scale", "=", "(", "input_size", "[", "0", "]", "-", "1", ")", "//", "(", "offset", ".", "shape", "[", "2", "]", "-", "1", ")", "\n", "offset_rescale", "*=", "scale", "\n", "offset_rescale", "=", "offset_rescale", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "offset", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "offset_rescale", ",", "\n", "target_size", ",", "\n", "meta", ")", "\n", "return", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance._restore_center_size": [[465, 475], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.interpolate", "torch.interpolate", "center_rescale[].permute().cpu().numpy", "transforms.Preprocess.semantic_annotation_inverse", "center_rescale[].permute().cpu", "center_rescale[].permute"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "_restore_center_size", "(", "self", ",", "center", ",", "meta", ",", "input_size", ",", "target_size", ")", ":", "\n", "        ", "center", "=", "torch", ".", "tensor", "(", "center", ")", "\n", "center_rescale", "=", "F", ".", "interpolate", "(", "input", "=", "center", ",", "size", "=", "input_size", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "center_rescale", "=", "center_rescale", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "center", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "center_rescale", ",", "\n", "target_size", ",", "\n", "meta", ")", "\n", "return", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance.summary": [[476, 486], ["evaluation.metrics.InstanceMetrics", "evaluation.metrics.InstanceMetrics.compute_AP", "print", "print", "numpy.nanmean", "numpy.array", "list", "evaluation.metrics.InstanceMetrics.compute_AP.values"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics.compute_AP", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "metric", "=", "InstanceMetrics", "(", "self", ".", "ins_output_dir", ",", "self", ".", "gt_ins_output_dir", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "categories", "=", "self", ".", "categories", ")", "\n", "\n", "AP_map", "=", "metric", ".", "compute_AP", "(", ")", "\n", "print", "(", "'Mean AP^r: {}'", ".", "format", "(", "\n", "np", ".", "nanmean", "(", "np", ".", "array", "(", "list", "(", "AP_map", ".", "values", "(", ")", ")", ")", ")", "\n", ")", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalInstance.write_predictions": [[487, 627], ["os.makedirs", "LOG.info", "eval_densepose.EvalInstance.offset_vis.items", "os.makedirs", "LOG.info", "eval_densepose.EvalInstance.offset_to_vis.items", "os.makedirs", "LOG.info", "eval_densepose.EvalInstance.center_offset_vis.items", "os.makedirs", "LOG.info", "eval_densepose.EvalInstance.center_vis.items", "os.makedirs", "LOG.info", "eval_densepose.EvalInstance.human_vis.items", "os.makedirs", "LOG.info", "eval_densepose.EvalInstance.instance_vis.items", "os.makedirs", "LOG.info", "eval_densepose.EvalInstance.gt_instance_vis.items", "os.makedirs", "LOG.info", "eval_densepose.EvalInstance.superpixel_vis.items", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "open", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "open", "os.path.join", "skimage.segmentation.mark_boundaries", "cv2.imwrite", "cv2.rectangle", "cv2.rectangle", "os.path.join", "open.write", "os.path.join", "open.write", "[].astype", "str", "str", "int", "int", "str", "int", "int", "str", "str", "str", "str", "str", "int", "int", "int", "int", "int", "int", "int", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "write_predictions", "(", "self", ",", "output", ")", ":", "\n", "        ", "output_dir", "=", "output", "+", "'.offset'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting offset predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "offset_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "#for bbox in self.bbox_vis[key]:", "\n", "#    pt1 = (int(bbox[0]), int(bbox[1]))", "\n", "#    pt2 = (int(bbox[0]) + int(bbox[2]), int(bbox[1]) + int(bbox[3]))", "\n", "\n", "#    cv2.rectangle(image, pt1, pt2, (0, 0, 255))", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.offset_to'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting offset predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "offset_to_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "for", "bbox", "in", "self", ".", "bbox_vis", "[", "key", "]", ":", "\n", "                ", "pt1", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", ")", "\n", "pt2", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", "+", "int", "(", "bbox", "[", "2", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", "+", "int", "(", "bbox", "[", "3", "]", ")", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "image", ",", "pt1", ",", "pt2", ",", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "\n", "", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.center_offset'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting center_offset predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "center_offset_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "for", "bbox", "in", "self", ".", "bbox_vis", "[", "key", "]", ":", "\n", "                ", "pt1", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", ")", "\n", "pt2", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", "+", "int", "(", "bbox", "[", "2", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", "+", "int", "(", "bbox", "[", "3", "]", ")", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "image", ",", "pt1", ",", "pt2", ",", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "\n", "", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.center'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting center predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "center_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.human'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting human segmentation predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "human_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "ins_output_dir", "=", "output", "+", "'.instance'", "\n", "os", ".", "makedirs", "(", "ins_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting instance parsing predictions to {}'", ".", "format", "(", "ins_output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "instance_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "ins_output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "# save confidence", "\n", "conf_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "ins_output_dir", ",", "str", "(", "key", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "confs", "=", "self", ".", "confs_vis", "[", "key", "]", "\n", "for", "conf", "in", "confs", ":", "\n", "                ", "conf_file", ".", "write", "(", "'{} {}\\n'", ".", "format", "(", "conf", "[", "0", "]", ",", "conf", "[", "1", "]", ")", ")", "\n", "\n", "", "", "gt_ins_output_dir", "=", "output", "+", "'.instance.gt'", "\n", "os", ".", "makedirs", "(", "gt_ins_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting instance parsing predictions to {}'", ".", "format", "(", "gt_ins_output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "gt_instance_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "gt_ins_output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "# save confidence", "\n", "conf_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "gt_ins_output_dir", ",", "str", "(", "key", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "confs", "=", "self", ".", "gt_confs_vis", "[", "key", "]", "\n", "for", "conf", "in", "confs", ":", "\n", "                ", "conf_file", ".", "write", "(", "'{} {} {}\\n'", ".", "format", "(", "conf", "[", "0", "]", ",", "conf", "[", "1", "]", ",", "conf", "[", "2", "]", ")", ")", "\n", "\n", "", "", "output_dir", "=", "output", "+", "'.superpixel'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting superpixel predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "superpixel_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "mark_boundaries", "(", "value", "[", "0", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float", ")", ",", "value", "[", "1", "]", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "filename", ",", "pred", ")", "\n", "\n", "", "self", ".", "ins_output_dir", "=", "ins_output_dir", "\n", "self", ".", "gt_ins_output_dir", "=", "gt_ins_output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalSemantic.__init__": [[630, 641], ["numpy.zeros", "eval_densepose.get_palette"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_palette"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "15", ")", ":", "\n", "        ", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "self", ".", "palette", "=", "get_palette", "(", "num_classes", ")", "\n", "\n", "self", ".", "segm_preds", "=", "{", "}", "\n", "self", ".", "edge_preds", "=", "{", "}", "\n", "self", ".", "vote_preds", "=", "{", "}", "\n", "self", ".", "segm_gts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalSemantic.from_predictions": [[642, 688], ["eval_densepose.EvalSemantic.get_mask", "int", "eval_densepose.EvalSemantic.image_ids.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().numpy", "numpy.asarray", "transforms.Preprocess.semantic_annotation_inverse", "eval_densepose.get_confusion_matrix", "numpy.argmax", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().squeeze().numpy", "transforms.Preprocess.semantic_annotation_inverse", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().squeeze().numpy", "transforms.Preprocess.semantic_annotation_inverse", "torch.interpolate.squeeze", "torch.interpolate.squeeze().squeeze", "torch.interpolate.squeeze().squeeze", "torch.interpolate.squeeze", "torch.interpolate.squeeze"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalSemantic.get_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_confusion_matrix", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "from_predictions", "(", "self", ",", "pred_segm", ",", "input_size", ",", "meta", ",", "\n", "gt", "=", "None", ",", "pred_edge", "=", "None", ",", "pred_vote", "=", "None", ")", ":", "\n", "        ", "gt_semantic", ",", "gt_human", "=", "self", ".", "get_mask", "(", "gt", ")", "\n", "target_size", "=", "gt_semantic", ".", "shape", "\n", "segm_pred", "=", "None", "\n", "if", "gt_semantic", "is", "not", "None", ":", "\n", "            ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "segm_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_segm", ")", "\n", "segm_pred_tensor", "=", "F", ".", "interpolate", "(", "segm_pred_tensor", ",", "input_size", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "segm_pred_scores", "=", "segm_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "segm_pred", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "segm_pred_scores", ",", "axis", "=", "0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "segm_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "segm_pred", ",", "target_size", ",", "meta", ")", "\n", "self", ".", "segm_preds", "[", "image_id", "]", "=", "segm_pred", "\n", "\n", "if", "pred_vote", "is", "not", "None", ":", "\n", "                ", "vote_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_vote", ")", "\n", "vote_pred_tensor", "=", "F", ".", "interpolate", "(", "vote_pred_tensor", ",", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "vote_pred", "=", "vote_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "vote_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "vote_pred", ",", "target_size", ",", "meta", "\n", ")", "\n", "self", ".", "vote_preds", "[", "image_id", "]", "=", "vote_pred", "\n", "\n", "", "if", "pred_edge", "is", "not", "None", ":", "\n", "                ", "edge_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_edge", ")", "\n", "edge_pred_tensor", "=", "F", ".", "interpolate", "(", "edge_pred_tensor", ",", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "edge_pred", "=", "edge_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "edge_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "edge_pred", ",", "target_size", ",", "meta", "\n", ")", "\n", "self", ".", "edge_preds", "[", "image_id", "]", "=", "edge_pred", "\n", "\n", "", "ignore_index", "=", "gt_semantic", "!=", "255", "\n", "seg_gt_", "=", "gt_semantic", "[", "ignore_index", "]", "\n", "seg_pred_", "=", "segm_pred", "[", "ignore_index", "]", "\n", "\n", "self", ".", "confusion_matrix", "+=", "get_confusion_matrix", "(", "seg_gt_", ",", "seg_pred_", ",", "\n", "self", ".", "num_classes", ")", "\n", "", "if", "pred_edge", "is", "not", "None", ":", "\n", "            ", "return", "segm_pred", ",", "segm_pred_scores", ",", "gt_semantic", ",", "gt_human", ",", "edge_pred", "\n", "", "return", "segm_pred", ",", "segm_pred_scores", ",", "gt_semantic", ",", "gt_human", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalSemantic.summary": [[689, 700], ["eval_densepose.EvalSemantic.confusion_matrix.sum", "eval_densepose.EvalSemantic.confusion_matrix.sum", "numpy.diag", "IU_array.mean", "LOG.info", "numpy.diag.sum", "eval_densepose.EvalSemantic.sum", "numpy.maximum", "numpy.maximum"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "pos", "=", "self", ".", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "self", ".", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "\n", "\n", "pixel_accuracy", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_accuracy", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IU", "=", "IU_array", ".", "mean", "(", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nMean IoU: {}, PixelAcc: {}, Mean Acc: {}'", ".", "format", "(", "mean_IU", ",", "pixel_accuracy", ",", "mean_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalSemantic.write_predictions": [[701, 741], ["os.makedirs", "LOG.info", "eval_densepose.EvalSemantic.segm_preds.items", "os.makedirs", "LOG.info", "eval_densepose.EvalSemantic.segm_gts.items", "os.makedirs", "LOG.info", "eval_densepose.EvalSemantic.edge_preds.items", "os.makedirs", "LOG.info", "eval_densepose.EvalSemantic.vote_preds.items", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.save", "str", "str", "str", "PIL.Image.fromarray", "str", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "write_predictions", "(", "self", ",", "output", ")", ":", "\n", "        ", "output_dir", "=", "output", "+", "'.global-parsing'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "segm_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", ")", "\n", "pred", ".", "putpalette", "(", "self", ".", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.global-parsing.gt'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing ground-truths to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "segm_gts", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", ")", "\n", "pred", ".", "putpalette", "(", "self", ".", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.edge'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "edge_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", "*", "255", ")", ".", "convert", "(", "'L'", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.vote'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting voting predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "vote_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", "*", "255", ")", ".", "convert", "(", "'L'", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalSemantic.get_mask": [[742, 758], ["enumerate", "numpy.copy", "numpy.where", "numpy.zeros_like", "numpy.zeros_like"], "methods", ["None"], ["", "", "def", "get_mask", "(", "self", ",", "anns", ")", ":", "\n", "        ", "gt_mask", "=", "None", "\n", "gt_human", "=", "None", "\n", "for", "ii", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "if", "'parsing_original'", "in", "ann", ":", "\n", "                ", "single_mask", "=", "np", ".", "copy", "(", "ann", "[", "'parsing_original'", "]", ")", "\n", "if", "gt_mask", "is", "None", ":", "\n", "                    ", "gt_mask", "=", "np", ".", "zeros_like", "(", "single_mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "gt_human", "is", "None", ":", "\n", "                    ", "gt_human", "=", "np", ".", "zeros_like", "(", "single_mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "single_mask_bool", "=", "np", ".", "where", "(", "single_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "gt_mask", "[", "single_mask_bool", ">", "0", "]", "=", "single_mask", "[", "single_mask_bool", ">", "0", "]", "\n", "gt_human", "[", "single_mask_bool", ">", "0", "]", "=", "ii", "+", "1", "\n", "\n", "", "", "return", "gt_mask", ",", "gt_human", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalCoco.__init__": [[761, 786], ["LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "coco", ",", "processor", ",", "*", ",", "\n", "max_per_image", "=", "20", ",", "\n", "category_ids", "=", "None", ",", "\n", "iou_type", "=", "'keypoints'", ",", "\n", "small_threshold", "=", "0.0", ")", ":", "\n", "        ", "if", "category_ids", "is", "None", ":", "\n", "            ", "category_ids", "=", "[", "1", "]", "\n", "\n", "", "self", ".", "coco", "=", "coco", "\n", "self", ".", "processor", "=", "processor", "\n", "self", ".", "max_per_image", "=", "max_per_image", "\n", "self", ".", "category_ids", "=", "category_ids", "\n", "self", ".", "iou_type", "=", "iou_type", "\n", "self", ".", "small_threshold", "=", "small_threshold", "\n", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "eval", "=", "None", "\n", "self", ".", "decoder_time", "=", "0.0", "\n", "self", ".", "nn_time", "=", "0.0", "\n", "\n", "self", ".", "pose_vis", "=", "{", "}", "\n", "\n", "LOG", ".", "debug", "(", "'max = %d, category ids = %s, iou_type = %s'", ",", "\n", "self", ".", "max_per_image", ",", "self", ".", "category_ids", ",", "self", ".", "iou_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalCoco.stats": [[787, 808], ["eval_densepose.EvalCoco.coco.loadRes", "COCOeval", "LOG.info", "eval_densepose.EvalCoco.eval.evaluate", "eval_densepose.EvalCoco.eval.accumulate", "eval_densepose.EvalCoco.eval.summarize", "print"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifDetHr.accumulate"], ["", "def", "stats", "(", "self", ",", "predictions", "=", "None", ",", "image_ids", "=", "None", ")", ":", "\n", "# from pycocotools.cocoeval import COCOeval", "\n", "        ", "if", "predictions", "is", "None", ":", "\n", "            ", "predictions", "=", "self", ".", "predictions", "\n", "", "if", "image_ids", "is", "None", ":", "\n", "            ", "image_ids", "=", "self", ".", "image_ids", "\n", "\n", "", "coco_eval", "=", "self", ".", "coco", ".", "loadRes", "(", "predictions", ")", "\n", "\n", "self", ".", "eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_eval", ",", "iouType", "=", "self", ".", "iou_type", ")", "\n", "LOG", ".", "info", "(", "'cat_ids: %s'", ",", "self", ".", "category_ids", ")", "\n", "if", "self", ".", "category_ids", ":", "\n", "            ", "self", ".", "eval", ".", "params", ".", "catIds", "=", "self", ".", "category_ids", "\n", "\n", "", "if", "image_ids", "is", "not", "None", ":", "\n", "            ", "print", "(", "'image ids'", ",", "image_ids", ")", "\n", "self", ".", "eval", ".", "params", ".", "imgIds", "=", "image_ids", "\n", "", "self", ".", "eval", ".", "evaluate", "(", ")", "\n", "self", ".", "eval", ".", "accumulate", "(", ")", "\n", "self", ".", "eval", ".", "summarize", "(", ")", "\n", "return", "self", ".", "eval", ".", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalCoco.count_ops": [[809, 816], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "thop.profile", "LOG.info", "next", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "@", "staticmethod", "\n", "def", "count_ops", "(", "model", ",", "height", "=", "641", ",", "width", "=", "641", ")", ":", "\n", "        ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "dummy_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "height", ",", "width", ",", "device", "=", "device", ")", "\n", "gmacs", ",", "params", "=", "thop", ".", "profile", "(", "model", ",", "inputs", "=", "(", "dummy_input", ",", ")", ")", "\n", "LOG", ".", "info", "(", "'GMACs = {0:.2f}, million params = {1:.2f}'", ".", "format", "(", "gmacs", "/", "1e9", ",", "params", "/", "1e6", ")", ")", "\n", "return", "gmacs", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalCoco.view_annotations": [[817, 831], ["show.AnnotationPainter", "open", "PIL.Image.open().convert", "show.image_canvas", "show.AnnotationPainter.annotations", "os.path.join", "show.image_canvas", "show.white_screen", "show.AnnotationPainter.annotations", "show.AnnotationPainter.annotations", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "@", "staticmethod", "\n", "def", "view_annotations", "(", "meta", ",", "predictions", ",", "ground_truth", ")", ":", "\n", "        ", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "IMAGE_DIR_VAL", ",", "meta", "[", "'file_name'", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "            ", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n", "", "if", "ground_truth", ":", "\n", "            ", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "                ", "show", ".", "white_screen", "(", "ax", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "ground_truth", ",", "color", "=", "'grey'", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalCoco.from_predictions": [[832, 886], ["int", "eval_densepose.EvalCoco.image_ids.append", "transforms.Preprocess.annotations_inverse", "len", "transforms.Preprocess.annotations_inverse", "eval_densepose.EvalCoco.view_annotations", "pred.json_data", "image_annotations.append", "image_annotations.append", "eval_densepose.EvalCoco.stats", "LOG.debug", "transforms.Preprocess.annotations_inverse.append", "transforms.Preprocess.annotations_inverse.append", "pred.json_data.items", "numpy.zeros().tolist", "pred.scale", "annotation.AnnotationDet().set", "annotation.Annotation().set", "numpy.zeros", "annotation.AnnotationDet", "annotation.Annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.view_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.json_data", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "", "", "def", "from_predictions", "(", "self", ",", "predictions", ",", "meta", ",", "debug", "=", "False", ",", "gt", "=", "None", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "predictions", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "predictions", ",", "meta", ")", "\n", "if", "self", ".", "small_threshold", ":", "\n", "            ", "predictions", "=", "[", "pred", "for", "pred", "in", "predictions", "\n", "if", "pred", ".", "scale", "(", "v_th", "=", "0.01", ")", ">=", "self", ".", "small_threshold", "]", "\n", "", "if", "len", "(", "predictions", ")", ">", "self", ".", "max_per_image", ":", "\n", "            ", "predictions", "=", "predictions", "[", ":", "self", ".", "max_per_image", "]", "\n", "\n", "", "self", ".", "pose_vis", "[", "meta", "[", "'file_name'", "]", "]", "=", "predictions", "\n", "\n", "if", "debug", ":", "\n", "            ", "gt_anns", "=", "[", "]", "\n", "for", "g", "in", "gt", ":", "\n", "                ", "if", "'bbox'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "AnnotationDet", "(", "COCO_CATEGORIES", ")", ".", "set", "(", "g", "[", "'category_id'", "]", "-", "1", ",", "None", ",", "g", "[", "'bbox'", "]", ")", "\n", ")", "\n", "", "if", "'keypoints'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "Annotation", "(", "COCO_KEYPOINTS", ",", "COCO_PERSON_SKELETON", ")", "\n", ".", "set", "(", "g", "[", "'keypoints'", "]", ",", "fixed_score", "=", "None", ")", "\n", ")", "\n", "", "", "gt_anns", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "gt_anns", ",", "meta", ")", "\n", "self", ".", "view_annotations", "(", "meta", ",", "predictions", ",", "gt_anns", ")", "\n", "\n", "", "image_annotations", "=", "[", "]", "\n", "for", "pred", "in", "predictions", ":", "\n", "            ", "pred_data", "=", "pred", ".", "json_data", "(", ")", "\n", "pred_data", "[", "'image_id'", "]", "=", "image_id", "\n", "pred_data", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "pred_data", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'category_id'", ",", "'score'", ",", "'keypoints'", ",", "'bbox'", ",", "'image_id'", ")", "\n", "}", "\n", "image_annotations", ".", "append", "(", "pred_data", ")", "\n", "\n", "# force at least one annotation per image (for pycocotools)", "\n", "", "if", "not", "image_annotations", ":", "\n", "            ", "image_annotations", ".", "append", "(", "{", "\n", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "1", ",", "\n", "'keypoints'", ":", "np", ".", "zeros", "(", "(", "17", "*", "3", ",", ")", ")", ".", "tolist", "(", ")", ",", "\n", "'bbox'", ":", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "'score'", ":", "0.001", ",", "\n", "}", ")", "\n", "\n", "", "if", "debug", ":", "\n", "            ", "self", ".", "stats", "(", "image_annotations", ",", "[", "image_id", "]", ")", "\n", "LOG", ".", "debug", "(", "meta", ")", "\n", "\n", "", "self", ".", "predictions", "+=", "image_annotations", "\n", "return", "image_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.EvalCoco.write_predictions": [[887, 928], ["LOG.info", "LOG.info", "show.KeypointPainter", "show.AnnotationPainter", "os.makedirs", "LOG.info", "eval_densepose.EvalCoco.pose_vis.items", "open", "json.dump", "zipfile.ZipFile", "myzip.write", "os.path.join", "os.path.join", "LOG.debug", "open", "PIL.Image.open().convert", "show.image_canvas", "show.AnnotationPainter.annotations", "annotation.items", "str", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "def", "write_predictions", "(", "self", ",", "filename", ")", ":", "\n", "        ", "predictions", "=", "[", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "annotation", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'image_id'", ",", "'category_id'", ",", "'keypoints'", ",", "'score'", ")", "}", "\n", "for", "annotation", "in", "self", ".", "predictions", "\n", "]", "\n", "with", "open", "(", "filename", "+", "'.pred.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "predictions", ",", "f", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.pred.json'", ",", "filename", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "filename", "+", "'.zip'", ",", "'w'", ")", "as", "myzip", ":", "\n", "            ", "myzip", ".", "write", "(", "filename", "+", "'.pred.json'", ",", "arcname", "=", "'predictions.json'", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.zip'", ",", "filename", ")", "\n", "\n", "# debug", "\n", "# visualizers", "\n", "keypoint_painter", "=", "show", ".", "KeypointPainter", "(", "\n", "color_connections", "=", "True", ",", "\n", "linewidth", "=", "6", ",", "\n", ")", "\n", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", "\n", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n", "output_dir", "=", "filename", "+", "'.pose'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting pose predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "pose_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "imagefile", "=", "os", ".", "path", ".", "join", "(", "IMAGE_DIR_VAL", ",", "key", ")", "\n", "with", "open", "(", "imagefile", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "image_out_name", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "LOG", ".", "debug", "(", "'image output = %s'", ",", "image_out_name", ")", "\n", "with", "show", ".", "image_canvas", "(", "cpu_image", ",", "\n", "image_out_name", ",", "\n", "show", "=", "False", ",", "\n", "fig_width", "=", "10.0", ",", "\n", "dpi_factor", "=", "1.0", ")", "as", "ax", ":", "\n", "                ", "annotation_painter", ".", "annotations", "(", "ax", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.get_palette": [[47, 63], ["range"], "function", ["None"], ["def", "get_palette", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "            ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.get_confusion_matrix": [[68, 86], ["numpy.bincount", "numpy.zeros", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "get_confusion_matrix", "(", "gt_label", ",", "pred_label", ",", "class_num", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the confusion matrix by given label and pred\n        :param gt_label: the ground truth label\n        :param pred_label: the pred label\n        :param class_num: the nunber of class\n    \"\"\"", "\n", "index", "=", "(", "gt_label", "*", "class_num", "+", "pred_label", ")", ".", "astype", "(", "'int32'", ")", "\n", "label_count", "=", "np", ".", "bincount", "(", "index", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "class_num", ",", "class_num", ")", ")", "\n", "\n", "for", "i_label", "in", "range", "(", "class_num", ")", ":", "\n", "        ", "for", "i_pred_label", "in", "range", "(", "class_num", ")", ":", "\n", "            ", "cur_index", "=", "i_label", "*", "class_num", "+", "i_pred_label", "\n", "if", "cur_index", "<", "len", "(", "label_count", ")", ":", "\n", "                ", "confusion_matrix", "[", "i_label", ",", "i_pred_label", "]", "=", "label_count", "[", "cur_index", "]", "\n", "\n", "", "", "", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.compute_gt_confidence": [[88, 95], ["class_map.keys", "confs.append"], "function", ["None"], ["", "def", "compute_gt_confidence", "(", "gt_instance", ",", "class_map", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "label", "in", "class_map", ".", "keys", "(", ")", ":", "\n", "        ", "cls", "=", "class_map", "[", "label", "]", "\n", "confs", ".", "append", "(", "[", "label", ",", "cls", ",", "1", "]", ")", "\n", "\n", "", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.compute_confidence": [[97, 121], ["class_map.keys", "pow", "confs.append", "semantic_scores[].reshape", "confidence.sum", "len", "joint_score_map.reshape", "confidence.sum", "len", "skeleton_score_map.reshape", "confidence.sum", "len", "numpy.where", "numpy.where", "numpy.where", "instance_label.reshape", "instance_label.reshape", "instance_label.reshape"], "function", ["None"], ["", "def", "compute_confidence", "(", "semantic_scores", ",", "class_map", ",", "instance_label", ",", "\n", "joint_score_map", ",", "skeleton_score_map", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "label", "in", "class_map", ".", "keys", "(", ")", ":", "\n", "        ", "cls", "=", "class_map", "[", "label", "]", "\n", "confidence", "=", "semantic_scores", "[", "cls", ",", ":", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_semantic", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "confidence", "=", "joint_score_map", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_joint", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "confidence", "=", "skeleton_score_map", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_skeleton", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "conf_final", "=", "pow", "(", "conf_semantic", "*", "conf_joint", "*", "conf_skeleton", ",", "-", "3", ")", "\n", "confs", ".", "append", "(", "[", "cls", ",", "conf_final", "]", ")", "\n", "\n", "", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.get_instance": [[123, 167], ["numpy.zeros_like", "numpy.unique", "len", "range", "numpy.unique", "numpy.unique", "range", "np.zeros_like.max", "print", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "get_instance", "(", "cat_gt", ",", "human_gt", ")", ":", "\n", "    ", "instance_gt", "=", "np", ".", "zeros_like", "(", "cat_gt", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "human_ids", "=", "np", ".", "unique", "(", "human_gt", ")", "[", "1", ":", "]", "\n", "class_map", "=", "{", "}", "\n", "\n", "total_part_num", "=", "0", "\n", "for", "id", "in", "human_ids", ":", "\n", "        ", "human_part_label", "=", "(", "np", ".", "where", "(", "human_gt", "==", "id", ",", "1", ",", "0", ")", "*", "cat_gt", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "part_classes", "=", "np", ".", "unique", "(", "human_part_label", ")", "\n", "\n", "exceed", "=", "False", "\n", "for", "part_id", "in", "part_classes", ":", "\n", "            ", "if", "part_id", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "total_part_num", "+=", "1", "\n", "\n", "if", "total_part_num", ">", "255", ":", "\n", "                ", "print", "(", "\n", "\"total_part_num exceed, return current instance map: {}\"", ".", "format", "(", "\n", "total_part_num", ")", "\n", ")", "\n", "exceed", "=", "True", "\n", "break", "\n", "\n", "", "class_map", "[", "total_part_num", "]", "=", "part_id", "\n", "instance_gt", "[", "np", ".", "where", "(", "human_part_label", "==", "part_id", ")", "]", "=", "total_part_num", "\n", "", "if", "exceed", ":", "\n", "            ", "break", "\n", "\n", "# Make instance id continous.", "\n", "", "", "ori_cur_labels", "=", "np", ".", "unique", "(", "instance_gt", ")", "\n", "total_num_label", "=", "len", "(", "ori_cur_labels", ")", "\n", "if", "instance_gt", ".", "max", "(", ")", "+", "1", "!=", "total_num_label", ":", "\n", "        ", "for", "label", "in", "range", "(", "1", ",", "total_num_label", ")", ":", "\n", "            ", "instance_gt", "[", "instance_gt", "==", "ori_cur_labels", "[", "label", "]", "]", "=", "label", "\n", "\n", "", "", "final_class_map", "=", "{", "}", "\n", "for", "label", "in", "range", "(", "1", ",", "total_num_label", ")", ":", "\n", "        ", "if", "label", ">=", "1", ":", "\n", "            ", "final_class_map", "[", "label", "]", "=", "class_map", "[", "ori_cur_labels", "[", "label", "]", "]", "\n", "\n", "", "", "return", "instance_gt", ",", "final_class_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.default_output_name": [[930, 954], ["None"], "function", ["None"], ["", "", "", "", "def", "default_output_name", "(", "args", ")", ":", "\n", "    ", "output", "=", "'{}.evalcoco-{}edge{}'", ".", "format", "(", "\n", "args", ".", "checkpoint", ",", "\n", "'{}-'", ".", "format", "(", "args", ".", "dataset", ")", "if", "args", ".", "dataset", "!=", "'val'", "else", "''", ",", "\n", "args", ".", "long_edge", ",", "\n", ")", "\n", "if", "args", ".", "n", ":", "\n", "        ", "output", "+=", "'-samples{}'", ".", "format", "(", "args", ".", "n", ")", "\n", "", "if", "not", "args", ".", "force_complete_pose", ":", "\n", "        ", "output", "+=", "'-noforcecompletepose'", "\n", "", "if", "args", ".", "orientation_invariant", "or", "args", ".", "extended_scale", ":", "\n", "        ", "output", "+=", "'-'", "\n", "if", "args", ".", "orientation_invariant", ":", "\n", "            ", "output", "+=", "'o'", "\n", "", "if", "args", ".", "extended_scale", ":", "\n", "            ", "output", "+=", "'s'", "\n", "", "", "if", "args", ".", "two_scale", ":", "\n", "        ", "output", "+=", "'-twoscale'", "\n", "", "if", "args", ".", "multi_scale", ":", "\n", "        ", "output", "+=", "'-multiscale'", "\n", "if", "args", ".", "multi_scale_hflip", ":", "\n", "            ", "output", "+=", "'whflip'", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.cli": [[961, 1068], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "network.cli", "decoder.cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "network.configure", "show.configure", "visualizer.configure", "torch.device", "torch.device", "LOG.debug", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.basicConfig", "logging.getLogger().setLevel", "logging.getLogger().setLevel", "LOG.setLevel", "logging.basicConfig", "logging.getLogger().setLevel", "LOG.setLevel", "max", "Exception", "Exception", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "eval_densepose.default_output_name", "jsonlogger.JsonFormatter", "logging.getLogger", "logging.getLogger", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.default_output_name"], ["", "def", "cli", "(", ")", ":", "# pylint: disable=too-many-statements,too-many-branches", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.eval_coco'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "decoder", ".", "cli", "(", "parser", ",", "force_complete_pose", "=", "True", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output filename without file extension'", ")", "\n", "parser", ".", "add_argument", "(", "'--detection-annotations'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'skip n batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "choices", "=", "(", "'val'", ",", "'test'", ",", "'test-dev'", ")", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'dataset to evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-ann'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'minimum number of truth annotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--long-edge'", ",", "default", "=", "641", ",", "type", "=", "int", ",", "\n", "help", "=", "'long edge of input images. Setting to zero deactivates scaling.'", ")", "\n", "parser", ".", "add_argument", "(", "'--loader-workers'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of workers for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--orientation-invariant'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--extended-scale'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-existing'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'skip if output eval file exists already'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "parser", ".", "add_argument", "(", "'--write-predictions'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'write a json and a zip file of the predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--all-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'run over all images irrespective of catIds'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use-superpixel'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-pose'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-semantic'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-instance'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "group", ".", "add_argument", "(", "'--debug-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages and enable all debug images'", ")", "\n", "group", ".", "add_argument", "(", "'--log-stats'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable stats logging'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug_images", ":", "\n", "        ", "args", ".", "debug", "=", "True", "\n", "\n", "", "log_level", "=", "logging", ".", "INFO", "if", "not", "args", ".", "debug", "else", "logging", ".", "DEBUG", "\n", "if", "args", ".", "log_stats", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "        ", "from", "pythonjsonlogger", "import", "jsonlogger", "\n", "stdout_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "stdout_handler", ".", "setFormatter", "(", "\n", "jsonlogger", ".", "JsonFormatter", "(", "'(message) (levelname) (name)'", ")", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stdout_handler", "]", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf.stats'", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "", "network", ".", "configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "\n", "if", "args", ".", "loader_workers", "is", "None", ":", "\n", "        ", "args", ".", "loader_workers", "=", "max", "(", "2", ",", "args", ".", "batch_size", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'val'", "and", "not", "args", ".", "detection_annotations", ":", "\n", "        ", "args", ".", "image_dir", "=", "IMAGE_DIR_VAL", "\n", "args", ".", "annotation_file", "=", "ANNOTATIONS_VAL", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "\n", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "write_predictions", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --write-predictions for this dataset'", ")", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "all_images", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --all-images for this dataset'", ")", "\n", "\n", "# add args.device", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "args", ".", "pin_memory", "=", "False", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "args", ".", "pin_memory", "=", "True", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "# generate a default output filename", "\n", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "args", ".", "output", "=", "default_output_name", "(", "args", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.write_evaluations": [[1070, 1100], ["len", "print", "print", "print", "print", "eval_coco.write_predictions", "eval_coco.stats", "numpy.savetxt", "print", "open", "json.dump", "eval_coco.stats.tolist"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats"], ["", "def", "write_evaluations", "(", "eval_coco", ",", "filename", ",", "args", ",", "total_time", ",", "count_ops", ",", "file_size", ")", ":", "\n", "    ", "if", "args", ".", "write_predictions", ":", "\n", "        ", "eval_coco", ".", "write_predictions", "(", "filename", ")", "\n", "\n", "", "n_images", "=", "len", "(", "eval_coco", ".", "image_ids", ")", "\n", "\n", "if", "args", ".", "dataset", "not", "in", "(", "'test'", ",", "'test-dev'", ")", ":", "\n", "        ", "stats", "=", "eval_coco", ".", "stats", "(", ")", "\n", "np", ".", "savetxt", "(", "filename", "+", "'.txt'", ",", "stats", ")", "\n", "with", "open", "(", "filename", "+", "'.stats.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "'stats'", ":", "stats", ".", "tolist", "(", ")", ",", "\n", "'n_images'", ":", "n_images", ",", "\n", "'decoder_time'", ":", "eval_coco", ".", "decoder_time", ",", "\n", "'nn_time'", ":", "eval_coco", ".", "nn_time", ",", "\n", "'total_time'", ":", "total_time", ",", "\n", "'checkpoint'", ":", "args", ".", "checkpoint", ",", "\n", "'count_ops'", ":", "count_ops", ",", "\n", "'file_size'", ":", "file_size", ",", "\n", "}", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'given dataset does not have ground truth, so no stats summary'", ")", "\n", "\n", "", "print", "(", "'n images = {}'", ".", "format", "(", "n_images", ")", ")", "\n", "print", "(", "'decoder time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "decoder_time", ",", "1000", "*", "eval_coco", ".", "decoder_time", "/", "n_images", ")", ")", "\n", "print", "(", "'nn time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "nn_time", ",", "1000", "*", "eval_coco", ".", "nn_time", "/", "n_images", ")", ")", "\n", "print", "(", "'total time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "total_time", ",", "1000", "*", "total_time", "/", "n_images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.preprocess_factory": [[1102, 1140], ["transforms.Compose", "transforms.NormalizeAnnotations", "transforms.DeterministicEqualChoice", "transforms.CenterPadTight", "transforms.CenterPad", "transforms.DeterministicEqualChoice", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RotateBy90", "transforms.RotateBy90", "transforms.RotateBy90"], "function", ["None"], ["", "def", "preprocess_factory", "(", "\n", "long_edge", ",", "\n", "*", ",", "\n", "tight_padding", "=", "False", ",", "\n", "extended_scale", "=", "False", ",", "\n", "orientation_invariant", "=", "False", ",", "\n", ")", ":", "\n", "    ", "preprocess", "=", "[", "transforms", ".", "NormalizeAnnotations", "(", ")", "]", "\n", "\n", "if", "extended_scale", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", ",", "\n", "transforms", ".", "RescaleAbsolute", "(", "(", "long_edge", "-", "1", ")", "//", "2", "+", "1", ")", ",", "\n", "]", ",", "salt", "=", "1", ")", "\n", "]", "\n", "", "elif", "long_edge", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "tight_padding", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "CenterPadTight", "(", "16", ")", "]", "\n", "", "else", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "transforms", ".", "CenterPad", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "orientation_invariant", ":", "\n", "        ", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "None", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "90", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "180", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "270", ")", ",", "\n", "]", ",", "salt", "=", "3", ")", "\n", "]", "\n", "\n", "", "preprocess", "+=", "[", "transforms", ".", "EVAL_TRANSFORM", "]", "\n", "return", "transforms", ".", "Compose", "(", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.dataloader_from_args": [[1142, 1162], ["eval_densepose.preprocess_factory", "datasets.DensePose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.preprocess_factory"], ["", "def", "dataloader_from_args", "(", "args", ")", ":", "\n", "    ", "preprocess", "=", "preprocess_factory", "(", "\n", "args", ".", "long_edge", ",", "\n", "tight_padding", "=", "args", ".", "batch_size", "==", "1", "and", "not", "args", ".", "multi_scale", ",", "\n", "extended_scale", "=", "args", ".", "extended_scale", ",", "\n", "orientation_invariant", "=", "args", ".", "orientation_invariant", ",", "\n", ")", "\n", "data", "=", "datasets", ".", "DensePose", "(", "\n", "image_dir", "=", "args", ".", "image_dir", ",", "\n", "ann_file", "=", "args", ".", "annotation_file", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "image_filter", "=", "'all'", "if", "args", ".", "all_images", "else", "'annotated'", ",", "\n", "category_ids", "=", "[", "]", "if", "args", ".", "detection_annotations", "else", "[", "1", "]", ",", "\n", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "num_workers", "=", "args", ".", "loader_workers", ",", "\n", "collate_fn", "=", "datasets", ".", "collate_images_anns_meta", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_densepose.main": [[1164, 1297], ["eval_densepose.cli", "eval_densepose.dataloader_from_args", "network.factory_from_args", "model_cpu.to", "decoder.factory_from_args", "pycocotools.coco.COCO", "eval_densepose.EvalCoco", "eval_densepose.EvalSemantic", "eval_densepose.EvalInstance", "time.time", "time.time", "enumerate", "list", "network.local_checkpoint_path", "os.path.exists", "print", "LOG.info", "torch.nn.DataParallel", "torch.nn.DataParallel", "LOG.info", "time.time", "decoder.factory_from_args.batch", "isinstance", "time.time", "eval_densepose.EvalCoco.count_ops", "os.path.getsize", "eval_densepose.write_evaluations", "eval_densepose.EvalCoco.write_predictions", "eval_densepose.EvalSemantic.summary", "eval_densepose.EvalSemantic.write_predictions", "eval_densepose.EvalInstance.write_predictions", "eval_densepose.EvalInstance.summary", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len", "len", "len", "len", "len", "len", "eval_densepose.EvalCoco.from_predictions", "eval_densepose.EvalSemantic.from_predictions", "eval_densepose.EvalInstance.from_predictions", "time.time", "max", "time.time", "numpy.any"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.dataloader_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.local_checkpoint_path", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.count_ops", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.write_evaluations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.summary", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.summary", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "\n", "# skip existing?", "\n", "if", "args", ".", "skip_existing", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "output", "+", "'.stats.json'", ")", ":", "\n", "            ", "print", "(", "'Output file {} exists already. Exiting.'", "\n", "''", ".", "format", "(", "args", ".", "output", "+", "'.stats.json'", ")", ")", "\n", "return", "\n", "", "print", "(", "'Processing: {}'", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "", "data_loader", "=", "dataloader_from_args", "(", "args", ")", "\n", "model_cpu", ",", "_", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "model", "=", "model_cpu", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "LOG", ".", "info", "(", "'Using multiple GPUs: %d'", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "base_net", "=", "model_cpu", ".", "base_net", "\n", "model", ".", "pose_head_nets", "=", "model_cpu", ".", "pose_head_nets", "\n", "model", ".", "segm_head_nets", "=", "model_cpu", ".", "segm_head_nets", "\n", "model", ".", "head_nets", "=", "model_cpu", ".", "head_nets", "\n", "\n", "", "processor", "=", "decoder", ".", "factory_from_args", "(", "args", ",", "model", ")", "\n", "coco", "=", "pycocotools", ".", "coco", ".", "COCO", "(", "args", ".", "annotation_file", ")", "\n", "eval_coco", "=", "EvalCoco", "(", "\n", "coco", ",", "\n", "processor", ",", "\n", "max_per_image", "=", "100", "if", "args", ".", "detection_annotations", "else", "20", ",", "\n", "category_ids", "=", "[", "]", "if", "args", ".", "detection_annotations", "else", "[", "1", "]", ",", "\n", "iou_type", "=", "'bbox'", "if", "args", ".", "detection_annotations", "else", "'keypoints'", ",", "\n", ")", "\n", "eval_segm", "=", "EvalSemantic", "(", ")", "\n", "eval_inst", "=", "EvalInstance", "(", "num_classes", "=", "15", ",", "categories", "=", "DENSEPOSE_CATEGORIES", ")", "\n", "\n", "total_start", "=", "time", ".", "time", "(", ")", "\n", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_i", ",", "(", "image_tensors", ",", "anns_batch", ",", "meta_batch", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'batch %d, last loop: %.3fs, batches per second=%.1f'", ",", "\n", "batch_i", ",", "time", ".", "time", "(", ")", "-", "loop_start", ",", "\n", "batch_i", "/", "max", "(", "1", ",", "(", "time", ".", "time", "(", ")", "-", "total_start", ")", ")", ")", "\n", "if", "batch_i", "<", "args", ".", "skip_n", ":", "\n", "            ", "continue", "\n", "", "if", "args", ".", "n", "and", "batch_i", ">=", "args", ".", "n", ":", "\n", "            ", "break", "\n", "\n", "#if meta_batch[0]['image_id'] != 32901:", "\n", "#    continue", "\n", "\n", "", "im_h", ",", "im_w", "=", "image_tensors", ".", "shape", "[", "2", "]", ",", "image_tensors", ".", "shape", "[", "3", "]", "\n", "\n", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "len", "(", "[", "a", "\n", "for", "anns", "in", "anns_batch", "\n", "for", "a", "in", "anns", "\n", "if", "np", ".", "any", "(", "a", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ")", "]", ")", "<", "args", ".", "min_ann", ":", "\n", "            ", "continue", "\n", "\n", "", "pred_batch", "=", "processor", ".", "batch", "(", "model", ",", "image_tensors", ",", "device", "=", "args", ".", "device", ")", "\n", "eval_coco", ".", "decoder_time", "+=", "processor", ".", "last_decoder_time", "\n", "eval_coco", ".", "nn_time", "+=", "processor", ".", "last_nn_time", "\n", "\n", "pred_center", ",", "pred_center_offset", "=", "None", ",", "None", "\n", "pred_pose", ",", "pred_segm", ",", "pred_offset", ",", "pred_edge", ",", "pred_vote", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "isinstance", "(", "pred_batch", ",", "dict", ")", ":", "\n", "            ", "if", "'semantic'", "in", "pred_batch", ":", "\n", "                ", "pred_segm", "=", "pred_batch", "[", "'semantic'", "]", "\n", "", "if", "'offset'", "in", "pred_batch", ":", "\n", "                ", "pred_offset", "=", "pred_batch", "[", "'offset'", "]", "\n", "", "if", "'pose'", "in", "pred_batch", ":", "\n", "                ", "pred_pose", "=", "pred_batch", "[", "'pose'", "]", "\n", "", "if", "'edge'", "in", "pred_batch", ":", "\n", "                ", "pred_edge", "=", "pred_batch", "[", "'edge'", "]", "\n", "", "if", "'vote'", "in", "pred_batch", ":", "\n", "                ", "pred_vote", "=", "pred_batch", "[", "'vote'", "]", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "", "if", "'center'", "in", "pred_batch", ":", "\n", "                ", "pred_center", "=", "pred_batch", "[", "'center'", "]", "\n", "pred_center_offset", "=", "pred_batch", "[", "'center_offset'", "]", "\n", "\n", "", "", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "anns_batch", ")", "\n", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "meta_batch", ")", "\n", "assert", "len", "(", "image_tensors", ")", "==", "1", ",", "'only support batch size = 1'", "\n", "\n", "# process pose predictions", "\n", "if", "pred_pose", "is", "not", "None", "and", "args", ".", "eval_pose", "is", "True", ":", "\n", "            ", "pred_pose", "=", "eval_coco", ".", "from_predictions", "(", "pred_pose", "[", "0", "]", ",", "meta_batch", "[", "0", "]", ",", "\n", "debug", "=", "args", ".", "debug", ",", "gt", "=", "anns_batch", "[", "0", "]", ")", "\n", "\n", "# process semantic segmentation predictions", "\n", "", "if", "pred_segm", "is", "not", "None", "and", "args", ".", "eval_semantic", "is", "True", ":", "\n", "            ", "pred_segm", ",", "pred_segm_scores", ",", "gt_semantic", ",", "gt_human", ",", "pred_edge", "=", "eval_segm", ".", "from_predictions", "(", "pred_segm", ",", "(", "im_h", ",", "im_w", ")", ",", "\n", "pred_edge", "=", "pred_edge", ",", "\n", "meta", "=", "meta_batch", "[", "0", "]", ",", "\n", "gt", "=", "anns_batch", "[", "0", "]", ",", "\n", "pred_vote", "=", "pred_vote", ")", "\n", "\n", "# process offset predictions", "\n", "", "if", "pred_offset", "is", "not", "None", "and", "args", ".", "eval_instance", "is", "True", ":", "\n", "            ", "eval_inst", ".", "from_predictions", "(", "pred_offset", ",", "pred_segm", ",", "\n", "pred_segm_scores", ",", "\n", "pred_pose", ",", "pred_edge", ",", "\n", "pred_center", "=", "pred_center", ",", "\n", "pred_center_offset", "=", "pred_center_offset", ",", "\n", "input_size", "=", "(", "im_h", ",", "im_w", ")", ",", "\n", "meta", "=", "meta_batch", "[", "0", "]", ",", "\n", "gt_semantic", "=", "gt_semantic", ",", "\n", "gt_human", "=", "gt_human", ")", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "total_start", "\n", "\n", "# model stats", "\n", "count_ops", "=", "list", "(", "eval_coco", ".", "count_ops", "(", "model_cpu", ")", ")", "\n", "local_checkpoint", "=", "network", ".", "local_checkpoint_path", "(", "args", ".", "checkpoint", ")", "\n", "file_size", "=", "os", ".", "path", ".", "getsize", "(", "local_checkpoint", ")", "if", "local_checkpoint", "else", "-", "1.0", "\n", "\n", "# write coco", "\n", "\n", "# write", "\n", "if", "args", ".", "eval_pose", "is", "True", ":", "\n", "        ", "write_evaluations", "(", "eval_coco", ",", "args", ".", "output", ",", "args", ",", "total_time", ",", "count_ops", ",", "\n", "file_size", ")", "\n", "eval_coco", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "\n", "# write semantic parsing", "\n", "", "if", "args", ".", "eval_semantic", "is", "True", ":", "\n", "        ", "eval_segm", ".", "summary", "(", ")", "\n", "eval_segm", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "\n", "# write instance parsing", "\n", "", "if", "args", ".", "eval_instance", "is", "True", ":", "\n", "        ", "eval_inst", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "eval_inst", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.metric.batch_pix_accuracy": [[5, 19], ["torch.max", "predict.cpu().numpy.cpu().numpy", "target.cpu().numpy.cpu().numpy", "numpy.sum", "numpy.sum", "predict.cpu().numpy.cpu", "target.cpu().numpy.cpu"], "function", ["None"], ["def", "batch_pix_accuracy", "(", "predict", ",", "target", ")", ":", "\n", "    ", "\"\"\"Batch Pixel Accuracy\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor\n    \"\"\"", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "predict", ",", "1", ")", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "target", "!=", "255", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "(", "target", "!=", "255", ")", ")", "\n", "assert", "pixel_correct", "<=", "pixel_labeled", ",", "\"Correct area should be smaller than Labeled\"", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.metric.batch_intersection_union": [[21, 45], ["torch.max", "predict.cpu().numpy.cpu().numpy", "target.cpu().numpy.cpu().numpy", "numpy.histogram", "numpy.histogram", "numpy.histogram", "predict.cpu().numpy.cpu", "target.cpu().numpy.cpu"], "function", ["None"], ["", "def", "batch_intersection_union", "(", "predict", ",", "target", ",", "nclass", ")", ":", "\n", "    ", "\"\"\"Batch Intersection of Union\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor\n        nclass: number of categories (int)\n    \"\"\"", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "predict", ",", "1", ")", "\n", "mini", "=", "1", "\n", "maxi", "=", "nclass", "\n", "nbins", "=", "nclass", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "predict", "=", "predict", "*", "(", "target", "!=", "255", ")", ".", "astype", "(", "predict", ".", "dtype", ")", "\n", "intersection", "=", "predict", "*", "(", "predict", "==", "target", ")", "\n", "# areas of intersection and union", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "predict", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "target", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "assert", "(", "area_inter", "<=", "area_union", ")", ".", "all", "(", ")", ",", "\"Intersection area should be smaller than Union area\"", "\n", "return", "area_inter", ",", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.metric.fast_hist": [[47, 54], ["torch.max", "predict.cpu().numpy", "label.cpu().numpy.cpu().numpy", "numpy.bincount().reshape", "predict.cpu", "label.cpu().numpy.cpu", "numpy.bincount", "label[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "pred", ",", "label", ",", "n", ")", ":", "\n", "    ", "_", ",", "predict", "=", "torch", ".", "max", "(", "pred", ",", "1", ")", "\n", "pred", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "k", "=", "(", "label", ">=", "0", ")", "&", "(", "label", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "\n", "n", "*", "label", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "pred", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.metric.per_class_iu": [[56, 58], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.EvalCoco.__init__": [[39, 62], ["LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "coco", ",", "processor", ",", "*", ",", "\n", "max_per_image", "=", "20", ",", "\n", "category_ids", "=", "None", ",", "\n", "iou_type", "=", "'keypoints'", ",", "\n", "small_threshold", "=", "0.0", ")", ":", "\n", "        ", "if", "category_ids", "is", "None", ":", "\n", "            ", "category_ids", "=", "[", "1", "]", "\n", "\n", "", "self", ".", "coco", "=", "coco", "\n", "self", ".", "processor", "=", "processor", "\n", "self", ".", "max_per_image", "=", "max_per_image", "\n", "self", ".", "category_ids", "=", "category_ids", "\n", "self", ".", "iou_type", "=", "iou_type", "\n", "self", ".", "small_threshold", "=", "small_threshold", "\n", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "eval", "=", "None", "\n", "self", ".", "decoder_time", "=", "0.0", "\n", "self", ".", "nn_time", "=", "0.0", "\n", "\n", "LOG", ".", "debug", "(", "'max = %d, category ids = %s, iou_type = %s'", ",", "\n", "self", ".", "max_per_image", ",", "self", ".", "category_ids", ",", "self", ".", "iou_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.EvalCoco.stats": [[63, 84], ["eval_coco.EvalCoco.coco.loadRes", "COCOeval", "LOG.info", "eval_coco.EvalCoco.eval.evaluate", "eval_coco.EvalCoco.eval.accumulate", "eval_coco.EvalCoco.eval.summarize", "print"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifDetHr.accumulate"], ["", "def", "stats", "(", "self", ",", "predictions", "=", "None", ",", "image_ids", "=", "None", ")", ":", "\n", "# from pycocotools.cocoeval import COCOeval", "\n", "        ", "if", "predictions", "is", "None", ":", "\n", "            ", "predictions", "=", "self", ".", "predictions", "\n", "", "if", "image_ids", "is", "None", ":", "\n", "            ", "image_ids", "=", "self", ".", "image_ids", "\n", "\n", "", "coco_eval", "=", "self", ".", "coco", ".", "loadRes", "(", "predictions", ")", "\n", "\n", "self", ".", "eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_eval", ",", "iouType", "=", "self", ".", "iou_type", ")", "\n", "LOG", ".", "info", "(", "'cat_ids: %s'", ",", "self", ".", "category_ids", ")", "\n", "if", "self", ".", "category_ids", ":", "\n", "            ", "self", ".", "eval", ".", "params", ".", "catIds", "=", "self", ".", "category_ids", "\n", "\n", "", "if", "image_ids", "is", "not", "None", ":", "\n", "            ", "print", "(", "'image ids'", ",", "image_ids", ")", "\n", "self", ".", "eval", ".", "params", ".", "imgIds", "=", "image_ids", "\n", "", "self", ".", "eval", ".", "evaluate", "(", ")", "\n", "self", ".", "eval", ".", "accumulate", "(", ")", "\n", "self", ".", "eval", ".", "summarize", "(", ")", "\n", "return", "self", ".", "eval", ".", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.EvalCoco.count_ops": [[85, 92], ["torch.randn", "thop.profile", "LOG.info", "next", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "@", "staticmethod", "\n", "def", "count_ops", "(", "model", ",", "height", "=", "641", ",", "width", "=", "641", ")", ":", "\n", "        ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "dummy_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "height", ",", "width", ",", "device", "=", "device", ")", "\n", "gmacs", ",", "params", "=", "thop", ".", "profile", "(", "model", ",", "inputs", "=", "(", "dummy_input", ",", ")", ")", "\n", "LOG", ".", "info", "(", "'GMACs = {0:.2f}, million params = {1:.2f}'", ".", "format", "(", "gmacs", "/", "1e9", ",", "params", "/", "1e6", ")", ")", "\n", "return", "gmacs", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.EvalCoco.view_annotations": [[93, 107], ["show.AnnotationPainter", "open", "PIL.Image.open().convert", "show.image_canvas", "show.AnnotationPainter.annotations", "os.path.join", "show.image_canvas", "show.white_screen", "show.AnnotationPainter.annotations", "show.AnnotationPainter.annotations", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "@", "staticmethod", "\n", "def", "view_annotations", "(", "meta", ",", "predictions", ",", "ground_truth", ")", ":", "\n", "        ", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "IMAGE_DIR_VAL", ",", "meta", "[", "'file_name'", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "            ", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n", "", "if", "ground_truth", ":", "\n", "            ", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "                ", "show", ".", "white_screen", "(", "ax", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "ground_truth", ",", "color", "=", "'grey'", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.EvalCoco.from_predictions": [[108, 159], ["int", "eval_coco.EvalCoco.image_ids.append", "transforms.Preprocess.annotations_inverse", "len", "transforms.Preprocess.annotations_inverse", "eval_coco.EvalCoco.view_annotations", "pred.json_data", "image_annotations.append", "image_annotations.append", "eval_coco.EvalCoco.stats", "LOG.debug", "transforms.Preprocess.annotations_inverse.append", "transforms.Preprocess.annotations_inverse.append", "pred.json_data.items", "numpy.zeros().tolist", "pred.scale", "annotation.AnnotationDet().set", "annotation.Annotation().set", "numpy.zeros", "annotation.AnnotationDet", "annotation.Annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.view_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.json_data", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "", "", "def", "from_predictions", "(", "self", ",", "predictions", ",", "meta", ",", "debug", "=", "False", ",", "gt", "=", "None", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "predictions", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "predictions", ",", "meta", ")", "\n", "if", "self", ".", "small_threshold", ":", "\n", "            ", "predictions", "=", "[", "pred", "for", "pred", "in", "predictions", "\n", "if", "pred", ".", "scale", "(", "v_th", "=", "0.01", ")", ">=", "self", ".", "small_threshold", "]", "\n", "", "if", "len", "(", "predictions", ")", ">", "self", ".", "max_per_image", ":", "\n", "            ", "predictions", "=", "predictions", "[", ":", "self", ".", "max_per_image", "]", "\n", "\n", "", "if", "debug", ":", "\n", "            ", "gt_anns", "=", "[", "]", "\n", "for", "g", "in", "gt", ":", "\n", "                ", "if", "'bbox'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "AnnotationDet", "(", "COCO_CATEGORIES", ")", ".", "set", "(", "g", "[", "'category_id'", "]", "-", "1", ",", "None", ",", "g", "[", "'bbox'", "]", ")", "\n", ")", "\n", "", "if", "'keypoints'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "Annotation", "(", "COCO_KEYPOINTS", ",", "COCO_PERSON_SKELETON", ")", "\n", ".", "set", "(", "g", "[", "'keypoints'", "]", ",", "fixed_score", "=", "None", ")", "\n", ")", "\n", "", "", "gt_anns", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "gt_anns", ",", "meta", ")", "\n", "self", ".", "view_annotations", "(", "meta", ",", "predictions", ",", "gt_anns", ")", "\n", "\n", "", "image_annotations", "=", "[", "]", "\n", "for", "pred", "in", "predictions", ":", "\n", "            ", "pred_data", "=", "pred", ".", "json_data", "(", ")", "\n", "pred_data", "[", "'image_id'", "]", "=", "image_id", "\n", "pred_data", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "pred_data", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'category_id'", ",", "'score'", ",", "'keypoints'", ",", "'bbox'", ",", "'image_id'", ")", "\n", "}", "\n", "image_annotations", ".", "append", "(", "pred_data", ")", "\n", "\n", "# force at least one annotation per image (for pycocotools)", "\n", "", "if", "not", "image_annotations", ":", "\n", "            ", "image_annotations", ".", "append", "(", "{", "\n", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "1", ",", "\n", "'keypoints'", ":", "np", ".", "zeros", "(", "(", "17", "*", "3", ",", ")", ")", ".", "tolist", "(", ")", ",", "\n", "'bbox'", ":", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "'score'", ":", "0.001", ",", "\n", "}", ")", "\n", "\n", "", "if", "debug", ":", "\n", "            ", "self", ".", "stats", "(", "image_annotations", ",", "[", "image_id", "]", ")", "\n", "LOG", ".", "debug", "(", "meta", ")", "\n", "\n", "", "self", ".", "predictions", "+=", "image_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.EvalCoco.write_predictions": [[160, 172], ["LOG.info", "LOG.info", "open", "json.dump", "zipfile.ZipFile", "myzip.write", "annotation.items"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "write_predictions", "(", "self", ",", "filename", ")", ":", "\n", "        ", "predictions", "=", "[", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "annotation", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'image_id'", ",", "'category_id'", ",", "'keypoints'", ",", "'score'", ")", "}", "\n", "for", "annotation", "in", "self", ".", "predictions", "\n", "]", "\n", "with", "open", "(", "filename", "+", "'.pred.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "predictions", ",", "f", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.pred.json'", ",", "filename", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "filename", "+", "'.zip'", ",", "'w'", ")", "as", "myzip", ":", "\n", "            ", "myzip", ".", "write", "(", "filename", "+", "'.pred.json'", ",", "arcname", "=", "'predictions.json'", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.zip'", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.default_output_name": [[174, 198], ["None"], "function", ["None"], ["", "", "def", "default_output_name", "(", "args", ")", ":", "\n", "    ", "output", "=", "'{}.evalcoco-{}edge{}'", ".", "format", "(", "\n", "args", ".", "checkpoint", ",", "\n", "'{}-'", ".", "format", "(", "args", ".", "dataset", ")", "if", "args", ".", "dataset", "!=", "'val'", "else", "''", ",", "\n", "args", ".", "long_edge", ",", "\n", ")", "\n", "if", "args", ".", "n", ":", "\n", "        ", "output", "+=", "'-samples{}'", ".", "format", "(", "args", ".", "n", ")", "\n", "", "if", "not", "args", ".", "force_complete_pose", ":", "\n", "        ", "output", "+=", "'-noforcecompletepose'", "\n", "", "if", "args", ".", "orientation_invariant", "or", "args", ".", "extended_scale", ":", "\n", "        ", "output", "+=", "'-'", "\n", "if", "args", ".", "orientation_invariant", ":", "\n", "            ", "output", "+=", "'o'", "\n", "", "if", "args", ".", "extended_scale", ":", "\n", "            ", "output", "+=", "'s'", "\n", "", "", "if", "args", ".", "two_scale", ":", "\n", "        ", "output", "+=", "'-twoscale'", "\n", "", "if", "args", ".", "multi_scale", ":", "\n", "        ", "output", "+=", "'-multiscale'", "\n", "if", "args", ".", "multi_scale_hflip", ":", "\n", "            ", "output", "+=", "'whflip'", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.cli": [[205, 316], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "network.cli", "decoder.cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "network.configure", "show.configure", "visualizer.configure", "torch.device", "LOG.debug", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.basicConfig", "logging.getLogger().setLevel", "logging.getLogger().setLevel", "LOG.setLevel", "logging.basicConfig", "logging.getLogger().setLevel", "LOG.setLevel", "max", "Exception", "Exception", "torch.cuda.is_available", "torch.device", "eval_coco.default_output_name", "jsonlogger.JsonFormatter", "logging.getLogger", "logging.getLogger", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.default_output_name"], ["", "def", "cli", "(", ")", ":", "# pylint: disable=too-many-statements,too-many-branches", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.eval_coco'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "decoder", ".", "cli", "(", "parser", ",", "force_complete_pose", "=", "True", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output filename without file extension'", ")", "\n", "parser", ".", "add_argument", "(", "'--detection-annotations'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'skip n batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "choices", "=", "(", "'val'", ",", "'test'", ",", "'test-dev'", ")", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'dataset to evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-ann'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'minimum number of truth annotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--long-edge'", ",", "default", "=", "641", ",", "type", "=", "int", ",", "\n", "help", "=", "'long edge of input images. Setting to zero deactivates scaling.'", ")", "\n", "parser", ".", "add_argument", "(", "'--loader-workers'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of workers for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--orientation-invariant'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--extended-scale'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-existing'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'skip if output eval file exists already'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "parser", ".", "add_argument", "(", "'--write-predictions'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'write a json and a zip file of the predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--all-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'run over all images irrespective of catIds'", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "group", ".", "add_argument", "(", "'--debug-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages and enable all debug images'", ")", "\n", "group", ".", "add_argument", "(", "'--log-stats'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable stats logging'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug_images", ":", "\n", "        ", "args", ".", "debug", "=", "True", "\n", "\n", "", "log_level", "=", "logging", ".", "INFO", "if", "not", "args", ".", "debug", "else", "logging", ".", "DEBUG", "\n", "if", "args", ".", "log_stats", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "        ", "from", "pythonjsonlogger", "import", "jsonlogger", "\n", "stdout_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "stdout_handler", ".", "setFormatter", "(", "\n", "jsonlogger", ".", "JsonFormatter", "(", "'(message) (levelname) (name)'", ")", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stdout_handler", "]", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf.stats'", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "", "network", ".", "configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "\n", "if", "args", ".", "loader_workers", "is", "None", ":", "\n", "        ", "args", ".", "loader_workers", "=", "max", "(", "2", ",", "args", ".", "batch_size", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'val'", "and", "not", "args", ".", "detection_annotations", ":", "\n", "        ", "args", ".", "image_dir", "=", "IMAGE_DIR_VAL", "\n", "args", ".", "annotation_file", "=", "ANNOTATIONS_VAL", "\n", "", "elif", "args", ".", "dataset", "==", "'val'", "and", "args", ".", "detection_annotations", ":", "\n", "        ", "args", ".", "image_dir", "=", "IMAGE_DIR_VAL", "\n", "args", ".", "annotation_file", "=", "DET_ANNOTATIONS_VAL", "\n", "", "elif", "args", ".", "dataset", "==", "'test'", ":", "\n", "        ", "args", ".", "image_dir", "=", "IMAGE_DIR_TEST", "\n", "args", ".", "annotation_file", "=", "ANNOTATIONS_TEST", "\n", "", "elif", "args", ".", "dataset", "==", "'test-dev'", ":", "\n", "        ", "args", ".", "image_dir", "=", "IMAGE_DIR_TEST", "\n", "args", ".", "annotation_file", "=", "ANNOTATIONS_TESTDEV", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "\n", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "write_predictions", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --write-predictions for this dataset'", ")", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "all_images", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --all-images for this dataset'", ")", "\n", "\n", "# add args.device", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "args", ".", "pin_memory", "=", "False", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "args", ".", "pin_memory", "=", "True", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "# generate a default output filename", "\n", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "args", ".", "output", "=", "default_output_name", "(", "args", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.write_evaluations": [[318, 348], ["len", "print", "print", "print", "print", "eval_coco.write_predictions", "eval_coco.stats", "numpy.savetxt", "print", "open", "json.dump", "eval_coco.stats.tolist"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats"], ["", "def", "write_evaluations", "(", "eval_coco", ",", "filename", ",", "args", ",", "total_time", ",", "count_ops", ",", "file_size", ")", ":", "\n", "    ", "if", "args", ".", "write_predictions", ":", "\n", "        ", "eval_coco", ".", "write_predictions", "(", "filename", ")", "\n", "\n", "", "n_images", "=", "len", "(", "eval_coco", ".", "image_ids", ")", "\n", "\n", "if", "args", ".", "dataset", "not", "in", "(", "'test'", ",", "'test-dev'", ")", ":", "\n", "        ", "stats", "=", "eval_coco", ".", "stats", "(", ")", "\n", "np", ".", "savetxt", "(", "filename", "+", "'.txt'", ",", "stats", ")", "\n", "with", "open", "(", "filename", "+", "'.stats.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "'stats'", ":", "stats", ".", "tolist", "(", ")", ",", "\n", "'n_images'", ":", "n_images", ",", "\n", "'decoder_time'", ":", "eval_coco", ".", "decoder_time", ",", "\n", "'nn_time'", ":", "eval_coco", ".", "nn_time", ",", "\n", "'total_time'", ":", "total_time", ",", "\n", "'checkpoint'", ":", "args", ".", "checkpoint", ",", "\n", "'count_ops'", ":", "count_ops", ",", "\n", "'file_size'", ":", "file_size", ",", "\n", "}", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'given dataset does not have ground truth, so no stats summary'", ")", "\n", "\n", "", "print", "(", "'n images = {}'", ".", "format", "(", "n_images", ")", ")", "\n", "print", "(", "'decoder time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "decoder_time", ",", "1000", "*", "eval_coco", ".", "decoder_time", "/", "n_images", ")", ")", "\n", "print", "(", "'nn time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "nn_time", ",", "1000", "*", "eval_coco", ".", "nn_time", "/", "n_images", ")", ")", "\n", "print", "(", "'total time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "total_time", ",", "1000", "*", "total_time", "/", "n_images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.preprocess_factory": [[350, 388], ["transforms.Compose", "transforms.NormalizeAnnotations", "transforms.DeterministicEqualChoice", "transforms.CenterPadTight", "transforms.CenterPad", "transforms.DeterministicEqualChoice", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RotateBy90", "transforms.RotateBy90", "transforms.RotateBy90"], "function", ["None"], ["", "def", "preprocess_factory", "(", "\n", "long_edge", ",", "\n", "*", ",", "\n", "tight_padding", "=", "False", ",", "\n", "extended_scale", "=", "False", ",", "\n", "orientation_invariant", "=", "False", ",", "\n", ")", ":", "\n", "    ", "preprocess", "=", "[", "transforms", ".", "NormalizeAnnotations", "(", ")", "]", "\n", "\n", "if", "extended_scale", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", ",", "\n", "transforms", ".", "RescaleAbsolute", "(", "(", "long_edge", "-", "1", ")", "//", "2", "+", "1", ")", ",", "\n", "]", ",", "salt", "=", "1", ")", "\n", "]", "\n", "", "elif", "long_edge", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "tight_padding", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "CenterPadTight", "(", "16", ")", "]", "\n", "", "else", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "transforms", ".", "CenterPad", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "orientation_invariant", ":", "\n", "        ", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "None", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "90", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "180", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "270", ")", ",", "\n", "]", ",", "salt", "=", "3", ")", "\n", "]", "\n", "\n", "", "preprocess", "+=", "[", "transforms", ".", "EVAL_TRANSFORM", "]", "\n", "return", "transforms", ".", "Compose", "(", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.dataloader_from_args": [[390, 410], ["eval_coco.preprocess_factory", "datasets.Coco", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.preprocess_factory"], ["", "def", "dataloader_from_args", "(", "args", ")", ":", "\n", "    ", "preprocess", "=", "preprocess_factory", "(", "\n", "args", ".", "long_edge", ",", "\n", "tight_padding", "=", "args", ".", "batch_size", "==", "1", "and", "not", "args", ".", "multi_scale", ",", "\n", "extended_scale", "=", "args", ".", "extended_scale", ",", "\n", "orientation_invariant", "=", "args", ".", "orientation_invariant", ",", "\n", ")", "\n", "data", "=", "datasets", ".", "Coco", "(", "\n", "image_dir", "=", "args", ".", "image_dir", ",", "\n", "ann_file", "=", "args", ".", "annotation_file", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "image_filter", "=", "'all'", "if", "args", ".", "all_images", "else", "'annotated'", ",", "\n", "category_ids", "=", "[", "]", "if", "args", ".", "detection_annotations", "else", "[", "1", "]", ",", "\n", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "num_workers", "=", "args", ".", "loader_workers", ",", "\n", "collate_fn", "=", "datasets", ".", "collate_images_anns_meta", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_coco.main": [[412, 487], ["eval_coco.cli", "eval_coco.dataloader_from_args", "network.factory_from_args", "model_cpu.to", "decoder.factory_from_args", "pycocotools.coco.COCO", "eval_coco.EvalCoco", "time.time", "time.time", "enumerate", "list", "network.local_checkpoint_path", "eval_coco.write_evaluations", "os.path.exists", "print", "LOG.info", "torch.nn.DataParallel", "LOG.info", "time.time", "decoder.factory_from_args.batch", "isinstance", "zip", "time.time", "eval_coco.EvalCoco.count_ops", "os.path.getsize", "print", "torch.cuda.device_count", "torch.cuda.device_count", "len", "len", "len", "len", "len", "eval_coco.EvalCoco.from_predictions", "time.time", "max", "time.time", "numpy.any"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.dataloader_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.local_checkpoint_path", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.write_evaluations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.count_ops", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "\n", "# skip existing?", "\n", "if", "args", ".", "skip_existing", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "output", "+", "'.stats.json'", ")", ":", "\n", "            ", "print", "(", "'Output file {} exists already. Exiting.'", "\n", "''", ".", "format", "(", "args", ".", "output", "+", "'.stats.json'", ")", ")", "\n", "return", "\n", "", "print", "(", "'Processing: {}'", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "", "data_loader", "=", "dataloader_from_args", "(", "args", ")", "\n", "model_cpu", ",", "_", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "model", "=", "model_cpu", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "LOG", ".", "info", "(", "'Using multiple GPUs: %d'", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "base_net", "=", "model_cpu", ".", "base_net", "\n", "model", ".", "head_nets", "=", "model_cpu", ".", "head_nets", "\n", "\n", "", "processor", "=", "decoder", ".", "factory_from_args", "(", "args", ",", "model", ")", "\n", "# processor.instance_scorer = decocder.instance_scorer.InstanceScoreRecorder()", "\n", "# processor.instance_scorer = torch.load('instance_scorer.pkl')", "\n", "\n", "coco", "=", "pycocotools", ".", "coco", ".", "COCO", "(", "args", ".", "annotation_file", ")", "\n", "eval_coco", "=", "EvalCoco", "(", "\n", "coco", ",", "\n", "processor", ",", "\n", "max_per_image", "=", "100", "if", "args", ".", "detection_annotations", "else", "20", ",", "\n", "category_ids", "=", "[", "]", "if", "args", ".", "detection_annotations", "else", "[", "1", "]", ",", "\n", "iou_type", "=", "'bbox'", "if", "args", ".", "detection_annotations", "else", "'keypoints'", ",", "\n", ")", "\n", "total_start", "=", "time", ".", "time", "(", ")", "\n", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_i", ",", "(", "image_tensors", ",", "anns_batch", ",", "meta_batch", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'batch %d, last loop: %.3fs, batches per second=%.1f'", ",", "\n", "batch_i", ",", "time", ".", "time", "(", ")", "-", "loop_start", ",", "\n", "batch_i", "/", "max", "(", "1", ",", "(", "time", ".", "time", "(", ")", "-", "total_start", ")", ")", ")", "\n", "if", "batch_i", "<", "args", ".", "skip_n", ":", "\n", "            ", "continue", "\n", "", "if", "args", ".", "n", "and", "batch_i", ">=", "args", ".", "n", ":", "\n", "            ", "break", "\n", "\n", "", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "len", "(", "[", "a", "\n", "for", "anns", "in", "anns_batch", "\n", "for", "a", "in", "anns", "\n", "if", "np", ".", "any", "(", "a", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ")", "]", ")", "<", "args", ".", "min_ann", ":", "\n", "            ", "continue", "\n", "\n", "", "pred_batch", "=", "processor", ".", "batch", "(", "model", ",", "image_tensors", ",", "device", "=", "args", ".", "device", ")", "\n", "eval_coco", ".", "decoder_time", "+=", "processor", ".", "last_decoder_time", "\n", "eval_coco", ".", "nn_time", "+=", "processor", ".", "last_nn_time", "\n", "\n", "if", "isinstance", "(", "pred_batch", ",", "dict", ")", ":", "\n", "            ", "assert", "'pose'", "in", "pred_batch", "\n", "pred_batch", "=", "pred_batch", "[", "'pose'", "]", "\n", "\n", "# loop over batch", "\n", "", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "anns_batch", ")", "\n", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "meta_batch", ")", "\n", "for", "pred", ",", "anns", ",", "meta", "in", "zip", "(", "pred_batch", ",", "anns_batch", ",", "meta_batch", ")", ":", "\n", "            ", "eval_coco", ".", "from_predictions", "(", "pred", ",", "meta", ",", "debug", "=", "args", ".", "debug", ",", "gt", "=", "anns", ")", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "total_start", "\n", "\n", "# processor.instance_scorer.write_data('instance_score_data.json')", "\n", "\n", "# model stats", "\n", "count_ops", "=", "list", "(", "eval_coco", ".", "count_ops", "(", "model_cpu", ")", ")", "\n", "local_checkpoint", "=", "network", ".", "local_checkpoint_path", "(", "args", ".", "checkpoint", ")", "\n", "file_size", "=", "os", ".", "path", ".", "getsize", "(", "local_checkpoint", ")", "if", "local_checkpoint", "else", "-", "1.0", "\n", "\n", "# write", "\n", "write_evaluations", "(", "eval_coco", ",", "args", ".", "output", ",", "args", ",", "total_time", ",", "count_ops", ",", "file_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.optimize.LearningRateLambda.__init__": [[53, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "decay_schedule", ",", "*", ",", "\n", "decay_factor", "=", "0.1", ",", "\n", "decay_epochs", "=", "1.0", ",", "\n", "warm_up_start_epoch", "=", "0", ",", "\n", "warm_up_epochs", "=", "2.0", ",", "\n", "warm_up_factor", "=", "0.01", ",", "\n", "warm_restart_schedule", "=", "None", ",", "\n", "warm_restart_duration", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "decay_schedule", "=", "decay_schedule", "\n", "self", ".", "decay_factor", "=", "decay_factor", "\n", "self", ".", "decay_epochs", "=", "decay_epochs", "\n", "self", ".", "warm_up_start_epoch", "=", "warm_up_start_epoch", "\n", "self", ".", "warm_up_epochs", "=", "warm_up_epochs", "\n", "self", ".", "warm_up_factor", "=", "warm_up_factor", "\n", "self", ".", "warm_restart_schedule", "=", "warm_restart_schedule", "\n", "self", ".", "warm_restart_duration", "=", "warm_restart_duration", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.optimize.LearningRateLambda.__call__": [[70, 96], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "step_i", ")", ":", "\n", "        ", "lambda_", "=", "1.0", "\n", "\n", "if", "step_i", "<=", "self", ".", "warm_up_start_epoch", ":", "\n", "            ", "lambda_", "*=", "self", ".", "warm_up_factor", "\n", "\n", "", "if", "self", ".", "warm_up_start_epoch", "<", "step_i", "<", "self", ".", "warm_up_start_epoch", "+", "self", ".", "warm_up_epochs", ":", "\n", "            ", "lambda_", "*=", "self", ".", "warm_up_factor", "**", "(", "\n", "1.0", "-", "(", "step_i", "-", "self", ".", "warm_up_start_epoch", ")", "/", "self", ".", "warm_up_epochs", "\n", ")", "\n", "\n", "", "for", "d", "in", "self", ".", "decay_schedule", ":", "\n", "            ", "if", "step_i", ">=", "d", "+", "self", ".", "decay_epochs", ":", "\n", "                ", "lambda_", "*=", "self", ".", "decay_factor", "\n", "", "elif", "step_i", ">", "d", ":", "\n", "                ", "lambda_", "*=", "self", ".", "decay_factor", "**", "(", "\n", "(", "step_i", "-", "d", ")", "/", "self", ".", "decay_epochs", "\n", ")", "\n", "\n", "", "", "for", "r", "in", "self", ".", "warm_restart_schedule", ":", "\n", "            ", "if", "r", "<=", "step_i", "<", "r", "+", "self", ".", "warm_restart_duration", ":", "\n", "                ", "lambda_", "=", "lambda_", "**", "(", "\n", "(", "step_i", "-", "r", ")", "/", "self", ".", "warm_restart_duration", "\n", ")", "\n", "\n", "", "", "return", "lambda_", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.optimize.cli": [[7, 50], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["def", "cli", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'optimizer'", ")", "\n", "group", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'SGD momentum, beta1 in Adam'", ")", "\n", "group", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "\n", "help", "=", "'beta2 for Adam/AMSGrad'", ")", "\n", "group", ".", "add_argument", "(", "'--adam-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ",", "\n", "help", "=", "'eps value for Adam/AMSGrad'", ")", "\n", "group", ".", "add_argument", "(", "'--no-nesterov'", ",", "dest", "=", "'nesterov'", ",", "default", "=", "True", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'do not use Nesterov momentum for SGD update'", ")", "\n", "group", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "'SGD/Adam/AMSGrad weight decay'", ")", "\n", "group", ".", "add_argument", "(", "'--adam'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use Adam optimizer'", ")", "\n", "group", ".", "add_argument", "(", "'--adamw'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use AdamW optimizer'", ")", "\n", "group", ".", "add_argument", "(", "'--amsgrad'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use Adam optimizer with AMSGrad option'", ")", "\n", "\n", "group", ".", "add_argument", "(", "'--lambdalr'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use LambdaLR'", ")", "\n", "group", ".", "add_argument", "(", "'--onecycle'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use OneCycle'", ")", "\n", "\n", "group_s", "=", "parser", ".", "add_argument_group", "(", "'learning rate scheduler'", ")", "\n", "group_s", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "group_s", ".", "add_argument", "(", "'--lr-decay'", ",", "default", "=", "[", "]", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "\n", "help", "=", "'epochs at which to decay the learning rate'", ")", "\n", "group_s", ".", "add_argument", "(", "'--lr-decay-factor'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'learning rate decay factor'", ")", "\n", "group_s", ".", "add_argument", "(", "'--lr-decay-epochs'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'learning rate decay duration in epochs'", ")", "\n", "group_s", ".", "add_argument", "(", "'--lr-warm-up-start-epoch'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "\n", "help", "=", "'starting epoch for warm-up'", ")", "\n", "group_s", ".", "add_argument", "(", "'--lr-warm-up-epochs'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "\n", "help", "=", "'number of epochs at the beginning with lower learning rate'", ")", "\n", "group_s", ".", "add_argument", "(", "'--lr-warm-up-factor'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "\n", "help", "=", "'learning pre-factor during warm-up'", ")", "\n", "group_s", ".", "add_argument", "(", "'--lr-warm-restarts'", ",", "default", "=", "[", "]", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "\n", "help", "=", "'list of epochs to do a warm restart'", ")", "\n", "group_s", ".", "add_argument", "(", "'--lr-warm-restart-duration'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "\n", "help", "=", "'duration of a warm restart'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.optimize.factory_optimizer": [[98, 123], ["LOG.info", "torch.optim.Adam", "LOG.info", "torch.optim.AdamW", "LOG.info", "torch.optim.SGD"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "", "def", "factory_optimizer", "(", "args", ",", "parameters", ")", ":", "\n", "    ", "if", "args", ".", "amsgrad", ":", "\n", "        ", "args", ".", "adam", "=", "True", "\n", "\n", "", "if", "args", ".", "adam", ":", "\n", "        ", "LOG", ".", "info", "(", "'Adam optimizer'", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "(", "p", "for", "p", "in", "parameters", "if", "p", ".", "requires_grad", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "momentum", ",", "args", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "eps", "=", "args", ".", "adam_eps", ",", "amsgrad", "=", "args", ".", "amsgrad", ")", "\n", "", "elif", "args", ".", "adamw", ":", "\n", "        ", "LOG", ".", "info", "(", "'AdamW optimizer'", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "\n", "(", "p", "for", "p", "in", "parameters", "if", "p", ".", "requires_grad", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "momentum", ",", "args", ".", "beta2", ")", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "eps", "=", "args", ".", "adam_eps", ",", "\n", "amsgrad", "=", "args", ".", "amsgrad", ")", "\n", "", "else", ":", "\n", "        ", "LOG", ".", "info", "(", "'SGD optimizer'", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "(", "p", "for", "p", "in", "parameters", "if", "p", ".", "requires_grad", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.optimize.factory_lrscheduler": [[125, 152], ["LOG.info", "torch.optim.lr_scheduler.LambdaLR", "LOG.info", "torch.optim.lr_scheduler.OneCycleLR", "optimize.LearningRateLambda"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "factory_lrscheduler", "(", "args", ",", "optimizer", ",", "training_batches_per_epoch", ")", ":", "\n", "    ", "if", "args", ".", "lambdalr", ":", "\n", "        ", "LOG", ".", "info", "(", "'LambdaLR scheduler'", ")", "\n", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", ",", "\n", "[", "\n", "LearningRateLambda", "(", "\n", "[", "s", "*", "training_batches_per_epoch", "for", "s", "in", "args", ".", "lr_decay", "]", ",", "\n", "decay_factor", "=", "args", ".", "lr_decay_factor", ",", "\n", "decay_epochs", "=", "args", ".", "lr_decay_epochs", "*", "training_batches_per_epoch", ",", "\n", "warm_up_start_epoch", "=", "args", ".", "lr_warm_up_start_epoch", "*", "training_batches_per_epoch", ",", "\n", "warm_up_epochs", "=", "args", ".", "lr_warm_up_epochs", "*", "training_batches_per_epoch", ",", "\n", "warm_up_factor", "=", "args", ".", "lr_warm_up_factor", ",", "\n", "warm_restart_schedule", "=", "[", "r", "*", "training_batches_per_epoch", "\n", "for", "r", "in", "args", ".", "lr_warm_restarts", "]", ",", "\n", "warm_restart_duration", "=", "args", ".", "lr_warm_restart_duration", "*", "training_batches_per_epoch", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "", "elif", "args", ".", "onecycle", ":", "\n", "        ", "LOG", ".", "info", "(", "'OneCycleLR scheduler'", ")", "\n", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "OneCycleLR", "(", "\n", "optimizer", ",", "\n", "args", ".", "lr", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "steps_per_epoch", "=", "training_batches_per_epoch", ",", "\n", "pct_start", "=", "0.3", ",", "cycle_momentum", "=", "False", ",", "anneal_strategy", "=", "'cos'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalSemantic.__init__": [[87, 98], ["numpy.zeros", "eval_mhp.get_palette"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_palette"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "59", ")", ":", "\n", "        ", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "self", ".", "palette", "=", "get_palette", "(", "num_classes", ")", "\n", "\n", "self", ".", "segm_preds", "=", "{", "}", "\n", "self", ".", "edge_preds", "=", "{", "}", "\n", "self", ".", "vote_preds", "=", "{", "}", "\n", "self", ".", "segm_gts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalSemantic.from_predictions": [[99, 148], ["eval_mhp.EvalSemantic.get_mask", "int", "eval_mhp.EvalSemantic.image_ids.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().numpy", "numpy.asarray", "transforms.Preprocess.semantic_annotation_inverse", "transforms.Preprocess.semantic_scores_inverse", "eval_mhp.get_confusion_matrix", "numpy.argmax", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().squeeze().numpy", "transforms.Preprocess.semantic_annotation_inverse", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.interpolate", "torch.interpolate", "torch.interpolate.squeeze().squeeze().numpy", "transforms.Preprocess.semantic_annotation_inverse", "torch.interpolate.squeeze", "torch.interpolate.squeeze().squeeze", "torch.interpolate.squeeze().squeeze", "torch.interpolate.squeeze", "torch.interpolate.squeeze"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalSemantic.get_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_scores_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_confusion_matrix", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "from_predictions", "(", "self", ",", "pred_segm", ",", "input_size", ",", "meta", ",", "\n", "gt", "=", "None", ",", "pred_edge", "=", "None", ",", "pred_vote", "=", "None", ")", ":", "\n", "        ", "gt_semantic", ",", "gt_human", "=", "self", ".", "get_mask", "(", "gt", ")", "\n", "target_size", "=", "gt_semantic", ".", "shape", "\n", "segm_pred", "=", "None", "\n", "if", "gt_semantic", "is", "not", "None", ":", "\n", "            ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "segm_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_segm", ")", "\n", "segm_pred_tensor", "=", "F", ".", "interpolate", "(", "segm_pred_tensor", ",", "input_size", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "segm_pred_scores", "=", "segm_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "segm_pred", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "segm_pred_scores", ",", "axis", "=", "0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "segm_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "segm_pred", ",", "target_size", ",", "meta", ")", "\n", "segm_pred_scores", "=", "transforms", ".", "Preprocess", ".", "semantic_scores_inverse", "(", "\n", "segm_pred_scores", ",", "target_size", ",", "meta", ")", "\n", "self", ".", "segm_preds", "[", "image_id", "]", "=", "segm_pred", "\n", "self", ".", "segm_gts", "[", "image_id", "]", "=", "gt_semantic", "\n", "\n", "if", "pred_vote", "is", "not", "None", ":", "\n", "                ", "vote_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_vote", ")", "\n", "vote_pred_tensor", "=", "F", ".", "interpolate", "(", "vote_pred_tensor", ",", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "vote_pred", "=", "vote_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "vote_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "vote_pred", ",", "target_size", ",", "meta", "\n", ")", "\n", "self", ".", "vote_preds", "[", "image_id", "]", "=", "vote_pred", "\n", "\n", "", "if", "pred_edge", "is", "not", "None", ":", "\n", "                ", "edge_pred_tensor", "=", "torch", ".", "from_numpy", "(", "pred_edge", ")", "\n", "edge_pred_tensor", "=", "F", ".", "interpolate", "(", "edge_pred_tensor", ",", "input_size", ",", "mode", "=", "'bilinear'", ")", "\n", "edge_pred", "=", "edge_pred_tensor", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "numpy", "(", ")", "\n", "edge_pred", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "\n", "edge_pred", ",", "target_size", ",", "meta", "\n", ")", "\n", "self", ".", "edge_preds", "[", "image_id", "]", "=", "edge_pred", "\n", "\n", "", "ignore_index", "=", "gt_semantic", "!=", "255", "\n", "seg_gt_", "=", "gt_semantic", "[", "ignore_index", "]", "\n", "seg_pred_", "=", "segm_pred", "[", "ignore_index", "]", "\n", "\n", "self", ".", "confusion_matrix", "+=", "get_confusion_matrix", "(", "seg_gt_", ",", "seg_pred_", ",", "\n", "self", ".", "num_classes", ")", "\n", "", "if", "pred_edge", "is", "not", "None", ":", "\n", "            ", "return", "segm_pred", ",", "segm_pred_scores", ",", "gt_semantic", ",", "gt_human", ",", "edge_pred", "\n", "", "return", "segm_pred", ",", "segm_pred_scores", ",", "gt_semantic", ",", "gt_human", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalSemantic.summary": [[149, 160], ["eval_mhp.EvalSemantic.confusion_matrix.sum", "eval_mhp.EvalSemantic.confusion_matrix.sum", "numpy.diag", "IU_array.mean", "LOG.info", "numpy.diag.sum", "eval_mhp.EvalSemantic.sum", "numpy.maximum", "numpy.maximum"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "pos", "=", "self", ".", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "self", ".", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "\n", "\n", "pixel_accuracy", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_accuracy", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IU", "=", "IU_array", ".", "mean", "(", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nMean IoU: {}, PixelAcc: {}, Mean Acc: {}'", ".", "format", "(", "mean_IU", ",", "pixel_accuracy", ",", "mean_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalSemantic.write_predictions": [[161, 202], ["os.makedirs", "LOG.info", "eval_mhp.EvalSemantic.segm_preds.items", "os.makedirs", "LOG.info", "eval_mhp.EvalSemantic.segm_gts.items", "os.makedirs", "LOG.info", "eval_mhp.EvalSemantic.edge_preds.items", "os.makedirs", "LOG.info", "eval_mhp.EvalSemantic.vote_preds.items", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.save", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.save", "str", "str", "str", "PIL.Image.fromarray", "str", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "write_predictions", "(", "self", ",", "output", ")", ":", "\n", "        ", "output_dir", "=", "output", "+", "'.global-parsing'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "segm_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", ")", "\n", "pred", ".", "putpalette", "(", "self", ".", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.global-parsing.gt'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting semantic parsing ground-truths to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "segm_gts", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", ")", "\n", "pred", ".", "putpalette", "(", "self", ".", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.edge'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting edge predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "edge_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", "*", "255", ")", ".", "convert", "(", "'L'", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.vote'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting voting predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "vote_preds", ".", "items", "(", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "value", "*", "255", ")", ".", "convert", "(", "'L'", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalSemantic.get_mask": [[203, 219], ["enumerate", "numpy.copy", "numpy.where", "numpy.zeros_like", "numpy.zeros_like"], "methods", ["None"], ["", "", "def", "get_mask", "(", "self", ",", "anns", ")", ":", "\n", "        ", "gt_mask", "=", "None", "\n", "gt_human", "=", "None", "\n", "for", "ii", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "if", "'parsing_original'", "in", "ann", ":", "\n", "                ", "single_mask", "=", "np", ".", "copy", "(", "ann", "[", "'parsing_original'", "]", ")", "\n", "if", "gt_mask", "is", "None", ":", "\n", "                    ", "gt_mask", "=", "np", ".", "zeros_like", "(", "single_mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "gt_human", "is", "None", ":", "\n", "                    ", "gt_human", "=", "np", ".", "zeros_like", "(", "single_mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "single_mask_bool", "=", "np", ".", "where", "(", "single_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "gt_mask", "[", "single_mask_bool", ">", "0", "]", "=", "single_mask", "[", "single_mask_bool", ">", "0", "]", "\n", "gt_human", "[", "single_mask_bool", ">", "0", "]", "=", "ii", "+", "1", "\n", "\n", "", "", "return", "gt_mask", ",", "gt_human", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.__init__": [[303, 319], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "categories", ")", ":", "\n", "        ", "self", ".", "offset_vis", "=", "{", "}", "\n", "self", ".", "bbox_vis", "=", "{", "}", "\n", "self", ".", "human_vis", "=", "{", "}", "\n", "self", ".", "instance_vis", "=", "{", "}", "\n", "self", ".", "confs_vis", "=", "{", "}", "\n", "self", ".", "gt_instance_vis", "=", "{", "}", "\n", "self", ".", "gt_confs_vis", "=", "{", "}", "\n", "self", ".", "superpixel_vis", "=", "{", "}", "\n", "self", ".", "center_vis", "=", "{", "}", "\n", "self", ".", "center_offset_vis", "=", "{", "}", "\n", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "categories", "=", "categories", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.from_predictions": [[320, 368], ["int", "eval_mhp.EvalInstance._restore_offset_size", "eval_mhp.EvalInstance._restore_offset_size", "eval_mhp.EvalInstance._restore_center_size", "eval_mhp.EvalInstance._filter_annotations", "eval_mhp.EvalInstance._group_pixels", "eval_mhp.get_instance", "eval_mhp.compute_confidence", "eval_mhp.get_instance", "eval_mhp.compute_gt_confidence", "show.flow_vis.flow_compute_color"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_offset_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_offset_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_center_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._filter_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._group_pixels", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_confidence", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_gt_confidence", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_compute_color"], ["", "def", "from_predictions", "(", "self", ",", "offset", ",", "semantic", ",", "semantic_scores", ",", "pose", ",", "edge", ",", "\n", "input_size", ",", "meta", ",", "gt_semantic", ",", "gt_human", ",", "\n", "pred_center", "=", "None", ",", "pred_center_offset", "=", "None", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "\n", "target_size", "=", "semantic", ".", "shape", "\n", "offset", "=", "self", ".", "_restore_offset_size", "(", "offset", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "offset", "=", "offset", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n", "pred_center_offset", "=", "self", ".", "_restore_offset_size", "(", "pred_center_offset", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "\n", "pred_center", "=", "self", ".", "_restore_center_size", "(", "pred_center", ",", "meta", ",", "\n", "input_size", ",", "target_size", ")", "\n", "\n", "pose", "=", "self", ".", "_filter_annotations", "(", "pose", ")", "\n", "\n", "human", ",", "joint_score_map", ",", "skeleton_score_map", ",", "offset", "=", "self", ".", "_group_pixels", "(", "offset", ",", "semantic", ",", "pose", ",", "edge", ")", "\n", "\n", "#filename = os.path.join(IMAGE_DIR_VAL, '0'*(12-len(str(image_id))) + str(image_id) + '.jpg')", "\n", "#human = self._do_superpixel_refinement(filename, human)", "\n", "\n", "# process predictions", "\n", "instance", ",", "class_map", "=", "get_instance", "(", "semantic", ",", "human", ")", "\n", "\n", "confs", "=", "compute_confidence", "(", "semantic_scores", ",", "class_map", ",", "instance", ",", "\n", "joint_score_map", ",", "skeleton_score_map", ")", "\n", "self", ".", "confs_vis", "[", "image_id", "]", "=", "confs", "\n", "\n", "# process ground-truths", "\n", "gt_instance", ",", "gt_class_map", "=", "get_instance", "(", "gt_semantic", ",", "gt_human", ")", "\n", "gt_confs", "=", "compute_gt_confidence", "(", "gt_instance", ",", "gt_class_map", ")", "\n", "self", ".", "gt_confs_vis", "[", "image_id", "]", "=", "gt_confs", "\n", "\n", "# cache for debug", "\n", "if", "offset", "is", "not", "None", ":", "\n", "            ", "offset_vis", "=", "flow_compute_color", "(", "offset", "[", ":", ",", ":", ",", "1", "]", ",", "offset", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "offset_vis", "=", "None", "\n", "", "self", ".", "human_vis", "[", "image_id", "]", "=", "human", "\n", "self", ".", "instance_vis", "[", "image_id", "]", "=", "instance", "\n", "self", ".", "gt_instance_vis", "[", "image_id", "]", "=", "gt_instance", "\n", "self", ".", "offset_vis", "[", "image_id", "]", "=", "offset_vis", "\n", "self", ".", "bbox_vis", "[", "image_id", "]", "=", "[", "x", "[", "'bbox'", "]", "for", "x", "in", "pose", "if", "x", "[", "'score'", "]", ">", "0.1", "]", "\n", "self", ".", "center_vis", "[", "image_id", "]", "=", "pred_center", "*", "255", "\n", "self", ".", "center_offset_vis", "[", "image_id", "]", "=", "pred_center_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._do_superpixel_refinement": [[369, 394], ["skimage.segmentation.slic", "numpy.unique().tolist", "numpy.where", "copy.deepcopy", "cv2.imread", "numpy.where", "instance_ids.tolist.tolist.tolist", "max", "numpy.unique", "set", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["", "def", "_do_superpixel_refinement", "(", "self", ",", "filename", ",", "instance", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "filename", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "if", "instance", "is", "None", ":", "\n", "            ", "return", "instance", "\n", "\n", "", "segments", "=", "slic", "(", "im", ",", "n_segments", "=", "1150", ")", "\n", "self", ".", "superpixel_vis", "[", "os", ".", "path", ".", "basename", "(", "filename", ")", "[", ":", "-", "4", "]", "]", "=", "[", "im", ",", "segments", "]", "\n", "segment_ids", "=", "np", ".", "unique", "(", "segments", ")", ".", "tolist", "(", ")", "\n", "\n", "mask", "=", "np", ".", "where", "(", "instance", ">", "0", ",", "1", ",", "0", ")", "\n", "\n", "new_instance", "=", "copy", ".", "deepcopy", "(", "instance", ")", "\n", "for", "sid", "in", "segment_ids", ":", "\n", "            ", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "segments", "==", "sid", ")", "\n", "instance_ids", "=", "instance", "[", "y_index", ",", "x_index", "]", "\n", "instance_ids", "=", "instance_ids", ".", "tolist", "(", ")", "\n", "\n", "max_id", "=", "max", "(", "set", "(", "instance_ids", ")", ",", "key", "=", "instance_ids", ".", "count", ")", "\n", "if", "max_id", "==", "0", ":", "\n", "                ", "continue", "\n", "", "new_instance", "[", "y_index", ",", "x_index", "]", "=", "max_id", "\n", "", "new_instance", "=", "new_instance", "*", "mask", "\n", "\n", "return", "new_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._skeleton_distance": [[397, 441], ["enumerate", "numpy.reshape", "numpy.ones", "range", "numpy.mean", "skeleton_distance.append", "matplotlib.figure", "matplotlib.imshow", "range", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "matplotlib.plot", "len", "numpy.ones_like().astype", "numpy.ma.masked_array", "skfmm.distance", "int", "int", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "_skeleton_distance", "(", "self", ",", "pose", ",", "edge", ")", ":", "\n", "        ", "skeleton_distance", "=", "[", "]", "\n", "for", "pid", ",", "ann", "in", "enumerate", "(", "pose", ")", ":", "\n", "            ", "kps", "=", "ann", "[", "'keypoints'", "]", "\n", "kps", "=", "np", ".", "reshape", "(", "kps", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "all_dt", "=", "np", ".", "ones", "(", "(", "edge", ".", "shape", "[", "0", "]", ",", "edge", ".", "shape", "[", "1", "]", ",", "len", "(", "MHP_KEYPOINTS", ")", ")", ")", "\n", "for", "ii", "in", "range", "(", "17", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "score", "=", "kps", "[", "ii", ",", "2", "]", "\n", "if", "score", "<", "0.1", ":", "\n", "                        ", "continue", "\n", "\n", "", "x", ",", "y", "=", "int", "(", "kps", "[", "ii", "]", "[", "0", "]", ")", ",", "int", "(", "kps", "[", "ii", "]", "[", "1", "]", ")", "\n", "m", "=", "np", ".", "ones_like", "(", "edge", ")", ".", "astype", "(", "float", ")", "\n", "m", "[", "y", ",", "x", "]", "=", "0", "\n", "\n", "r_edge", "=", "edge", ">", "0.2", "\n", "m", "=", "np", ".", "ma", ".", "masked_array", "(", "m", ",", "r_edge", ")", "\n", "dt", "=", "skfmm", ".", "distance", "(", "m", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "\n", "", "all_dt", "[", ":", ",", ":", ",", "ii", "]", "=", "dt", "\n", "\n", "", "mean_dt", "=", "np", ".", "mean", "(", "all_dt", ",", "axis", "=", "-", "1", ")", "\n", "\n", "skeleton_distance", ".", "append", "(", "mean_dt", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "mean_dt", ")", "\n", "for", "ii", "in", "range", "(", "17", ")", ":", "\n", "                ", "if", "kps", "[", "ii", "]", "[", "2", "]", "<", "0.1", ":", "\n", "                    ", "continue", "\n", "", "plt", ".", "plot", "(", "kps", "[", "ii", "]", "[", "0", "]", ",", "kps", "[", "ii", "]", "[", "1", "]", ",", "'r+'", ")", "\n", "", "plt", ".", "savefig", "(", "'{}.jpg'", ".", "format", "(", "pid", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "edge", ">", "0.2", ")", "\n", "plt", ".", "savefig", "(", "'edge.jpg'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "return", "skeleton_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._group_pixels": [[442, 499], ["numpy.where", "numpy.where", "eval_mhp.EvalInstance._prepare_sparse_instance", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.argmin", "numpy.array", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "len", "eval_mhp.EvalInstance._skeleton_distance", "len", "numpy.zeros_like", "range", "numpy.array", "numpy.array", "numpy.stack", "zip", "numpy.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._prepare_sparse_instance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._skeleton_distance", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "def", "_group_pixels", "(", "self", ",", "offset", ",", "semantic", ",", "pose", ",", "edge", ")", ":", "\n", "        ", "person_mask", "=", "np", ".", "where", "(", "semantic", ">", "0", ",", "1", ",", "0", ")", "\n", "offset", "[", ":", ",", ":", ",", "0", "]", "*=", "person_mask", "\n", "offset", "[", ":", ",", ":", ",", "1", "]", "*=", "person_mask", "\n", "\n", "y_index", ",", "x_index", "=", "np", ".", "where", "(", "semantic", ">", "0", ")", "\n", "offset_vector", "=", "offset", "[", "y_index", ",", "x_index", ",", "0", ":", "2", "]", "\n", "xy_offset", "=", "offset_vector", "+", "np", ".", "stack", "(", "(", "x_index", ",", "y_index", ")", ")", ".", "T", "\n", "\n", "xy_list", ",", "id_list", ",", "joint_score_list", ",", "person_score_list", ",", "scale_list", "=", "self", ".", "_prepare_sparse_instance", "(", "pose", ")", "\n", "\n", "if", "len", "(", "xy_list", ")", "==", "0", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "xy_list", "=", "np", ".", "concatenate", "(", "xy_list", ",", "axis", "=", "0", ")", "\n", "xy_pose", "=", "np", ".", "array", "(", "xy_list", ")", "\n", "\n", "xy_offset", "=", "xy_offset", "[", "None", ",", "...", "]", "# 1 * N * 2", "\n", "xy_pose", "=", "xy_pose", "[", ":", ",", "None", ",", "...", "]", "# K * 1 * 2", "\n", "\n", "# joint distance (local metric)", "\n", "score_list", "=", "[", "s1", "+", "s2", "for", "s1", ",", "s2", "in", "zip", "(", "joint_score_list", ",", "person_score_list", ")", "]", "\n", "score", "=", "np", ".", "array", "(", "score_list", ")", "\n", "joint_distance", "=", "np", ".", "linalg", ".", "norm", "(", "xy_pose", "-", "xy_offset", ",", "axis", "=", "-", "1", ")", "# K * N", "\n", "joint_distance", "=", "joint_distance", ".", "T", "/", "(", "score", "+", "1e-6", ")", "\n", "distance", "=", "joint_distance", ".", "T", "\n", "\n", "if", "0", ":", "\n", "# skeleton distance (global metric)", "\n", "            ", "skeleton_distance", "=", "self", ".", "_skeleton_distance", "(", "pose", ",", "edge", ")", "\n", "skeleton_num", "=", "len", "(", "skeleton_distance", ")", "\n", "\n", "assert", "skeleton_num", "==", "joint_distance", ".", "shape", "[", "0", "]", "//", "len", "(", "MHP_KEYPOINTS", ")", "\n", "\n", "distance", "=", "np", ".", "zeros_like", "(", "joint_distance", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ii", "in", "range", "(", "skeleton_num", ")", ":", "\n", "                ", "jnt_dist", "=", "joint_distance", "[", "ii", "*", "17", ":", "(", "ii", "+", "1", ")", "*", "17", ",", ":", "]", "# 17 x N", "\n", "skl_dist", "=", "skeleton_distance", "[", "ii", "]", "[", "y_index", ",", "x_index", "]", "# 1 x N", "\n", "skl_dist", "=", "np", ".", "reshape", "(", "skl_dist", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "distance", "[", "ii", "*", "17", ":", "(", "ii", "+", "1", ")", "*", "17", ",", ":", "]", "=", "jnt_dist", "*", "skl_dist", "\n", "\n", "", "", "index", "=", "np", ".", "argmin", "(", "distance", ",", "axis", "=", "0", ")", "\n", "instance_list", "=", "np", ".", "array", "(", "id_list", ")", "\n", "instance_id", "=", "instance_list", "[", "index", "]", "+", "1", "\n", "\n", "instance", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "instance", "[", "y_index", ",", "x_index", "]", "=", "instance_id", "\n", "\n", "joint_score_map", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "float", ")", "\n", "joint_score_map", "[", "y_index", ",", "x_index", "]", "=", "np", ".", "array", "(", "joint_score_list", ")", "[", "index", "]", "\n", "\n", "skeleton_score_map", "=", "np", ".", "zeros_like", "(", "semantic", ",", "dtype", "=", "np", ".", "float", ")", "\n", "skeleton_score_map", "[", "y_index", ",", "x_index", "]", "=", "np", ".", "array", "(", "person_score_list", ")", "[", "index", "]", "\n", "\n", "return", "instance", ",", "joint_score_map", ",", "skeleton_score_map", ",", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._filter_annotations": [[500, 513], ["numpy.reshape", "keypoints[].tolist", "len", "new_annotations.append"], "methods", ["None"], ["", "def", "_filter_annotations", "(", "self", ",", "annotations", ",", "th_skl", "=", "0.3", ",", "th_joint", "=", "0.1", ")", ":", "\n", "        ", "annotations", "=", "[", "ann", "for", "ann", "in", "annotations", "if", "ann", "[", "'score'", "]", ">=", "th_skl", "]", "\n", "\n", "new_annotations", "=", "[", "]", "\n", "for", "ann", "in", "annotations", ":", "\n", "            ", "keypoints", "=", "ann", "[", "'keypoints'", "]", "\n", "keypoints", "=", "np", ".", "reshape", "(", "keypoints", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "scores", "=", "keypoints", "[", ":", ",", "-", "1", "]", ".", "tolist", "(", ")", "\n", "size", "=", "len", "(", "[", "s", "for", "s", "in", "scores", "if", "s", ">", "th_joint", "]", ")", "\n", "if", "size", ">", "2", ":", "\n", "                ", "new_annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "return", "new_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._prepare_sparse_instance": [[514, 536], ["enumerate", "numpy.reshape", "xy_list.append", "id_list.extend", "joint_score_list.extend", "math.sqrt", "scale_list.append", "person_score_list.extend", "kps[].tolist"], "methods", ["None"], ["", "def", "_prepare_sparse_instance", "(", "self", ",", "annotations", ")", ":", "\n", "        ", "xy_list", "=", "[", "]", "\n", "id_list", "=", "[", "]", "\n", "scale_list", "=", "[", "]", "\n", "joint_score_list", "=", "[", "]", "\n", "person_score_list", "=", "[", "]", "\n", "\n", "for", "pid", ",", "ann", "in", "enumerate", "(", "annotations", ")", ":", "\n", "            ", "kps", "=", "ann", "[", "'keypoints'", "]", "\n", "kps", "=", "np", ".", "reshape", "(", "kps", ",", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "xy_list", ".", "append", "(", "kps", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "id_list", ".", "extend", "(", "[", "pid", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "joint_score_list", ".", "extend", "(", "kps", "[", ":", ",", "-", "1", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "bbox", "=", "ann", "[", "'bbox'", "]", "\n", "scale", "=", "math", ".", "sqrt", "(", "bbox", "[", "2", "]", "*", "bbox", "[", "3", "]", ")", "\n", "scale_list", ".", "append", "(", "scale", ")", "\n", "\n", "person_score_list", ".", "extend", "(", "[", "ann", "[", "'score'", "]", "]", "*", "kps", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "return", "xy_list", ",", "id_list", ",", "joint_score_list", ",", "person_score_list", ",", "scale_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_offset_size": [[537, 549], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.interpolate", "torch.interpolate", "offset_rescale[].permute().cpu().numpy", "transforms.Preprocess.semantic_annotation_inverse", "offset_rescale[].permute().cpu", "offset_rescale[].permute"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "_restore_offset_size", "(", "self", ",", "offset", ",", "meta", ",", "input_size", ",", "target_size", ")", ":", "\n", "        ", "offset", "=", "torch", ".", "tensor", "(", "offset", ")", "\n", "offset_rescale", "=", "F", ".", "interpolate", "(", "input", "=", "offset", ",", "size", "=", "input_size", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scale", "=", "(", "input_size", "[", "0", "]", "-", "1", ")", "//", "(", "offset", ".", "shape", "[", "2", "]", "-", "1", ")", "\n", "offset_rescale", "*=", "scale", "\n", "offset_rescale", "=", "offset_rescale", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "offset", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "offset_rescale", ",", "\n", "target_size", ",", "\n", "meta", ")", "\n", "return", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance._restore_center_size": [[550, 560], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.interpolate", "torch.interpolate", "center_rescale[].permute().cpu().numpy", "transforms.Preprocess.semantic_annotation_inverse", "center_rescale[].permute().cpu", "center_rescale[].permute"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse"], ["", "def", "_restore_center_size", "(", "self", ",", "center", ",", "meta", ",", "input_size", ",", "target_size", ")", ":", "\n", "        ", "center", "=", "torch", ".", "tensor", "(", "center", ")", "\n", "center_rescale", "=", "F", ".", "interpolate", "(", "input", "=", "center", ",", "size", "=", "input_size", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "center_rescale", "=", "center_rescale", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "center", "=", "transforms", ".", "Preprocess", ".", "semantic_annotation_inverse", "(", "center_rescale", ",", "\n", "target_size", ",", "\n", "meta", ")", "\n", "return", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.summary": [[561, 571], ["evaluation.metrics.InstanceMetrics", "evaluation.metrics.InstanceMetrics.compute_AP", "print", "print", "numpy.nanmean", "numpy.array", "list", "evaluation.metrics.InstanceMetrics.compute_AP.values"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics.compute_AP", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "metric", "=", "InstanceMetrics", "(", "self", ".", "ins_output_dir", ",", "self", ".", "gt_ins_output_dir", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "categories", "=", "self", ".", "categories", ")", "\n", "\n", "AP_map", "=", "metric", ".", "compute_AP", "(", ")", "\n", "print", "(", "'Mean AP^r: {}'", ".", "format", "(", "\n", "np", ".", "nanmean", "(", "np", ".", "array", "(", "list", "(", "AP_map", ".", "values", "(", ")", ")", ")", ")", "\n", ")", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.write_predictions": [[572, 692], ["os.makedirs", "LOG.info", "eval_mhp.EvalInstance.offset_vis.items", "os.makedirs", "LOG.info", "eval_mhp.EvalInstance.center_offset_vis.items", "os.makedirs", "LOG.info", "eval_mhp.EvalInstance.center_vis.items", "os.makedirs", "LOG.info", "eval_mhp.EvalInstance.human_vis.items", "os.makedirs", "LOG.info", "eval_mhp.EvalInstance.instance_vis.items", "os.makedirs", "LOG.info", "eval_mhp.EvalInstance.gt_instance_vis.items", "os.makedirs", "LOG.info", "eval_mhp.EvalInstance.superpixel_vis.items", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "open", "os.path.join", "value.astype", "PIL.Image.fromarray", "skimage.segmentation.mark_boundaries.putpalette", "skimage.segmentation.mark_boundaries.save", "open", "os.path.join", "skimage.segmentation.mark_boundaries", "cv2.imwrite", "cv2.rectangle", "cv2.rectangle", "os.path.join", "open.write", "os.path.join", "open.write", "[].astype", "str", "int", "int", "str", "int", "int", "str", "str", "str", "str", "str", "int", "int", "int", "int", "int", "int", "int", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "write_predictions", "(", "self", ",", "output", ")", ":", "\n", "        ", "output_dir", "=", "output", "+", "'.offset'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting offset predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "offset_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "for", "bbox", "in", "self", ".", "bbox_vis", "[", "key", "]", ":", "\n", "                ", "pt1", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", ")", "\n", "pt2", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", "+", "int", "(", "bbox", "[", "2", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", "+", "int", "(", "bbox", "[", "3", "]", ")", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "image", ",", "pt1", ",", "pt2", ",", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "\n", "", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.center_offset'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting center_offset predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "center_offset_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "for", "bbox", "in", "self", ".", "bbox_vis", "[", "key", "]", ":", "\n", "                ", "pt1", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", ")", "\n", "pt2", "=", "(", "int", "(", "bbox", "[", "0", "]", ")", "+", "int", "(", "bbox", "[", "2", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", "+", "int", "(", "bbox", "[", "3", "]", ")", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "image", ",", "pt1", ",", "pt2", ",", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "\n", "", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.center'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "LOG", ".", "info", "(", "'\\nWriting center predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "center_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "output_dir", "=", "output", "+", "'.human'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting human segmentation predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "human_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "", "ins_output_dir", "=", "output", "+", "'.instance'", "\n", "os", ".", "makedirs", "(", "ins_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting instance parsing predictions to {}'", ".", "format", "(", "ins_output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "instance_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "ins_output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "# save confidence", "\n", "conf_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "ins_output_dir", ",", "str", "(", "key", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "confs", "=", "self", ".", "confs_vis", "[", "key", "]", "\n", "for", "conf", "in", "confs", ":", "\n", "                ", "conf_file", ".", "write", "(", "'{} {}\\n'", ".", "format", "(", "conf", "[", "0", "]", ",", "conf", "[", "1", "]", ")", ")", "\n", "\n", "", "", "gt_ins_output_dir", "=", "output", "+", "'.instance.gt'", "\n", "os", ".", "makedirs", "(", "gt_ins_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting instance parsing predictions to {}'", ".", "format", "(", "gt_ins_output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "gt_instance_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "gt_ins_output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "image", "=", "value", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "pred", ".", "putpalette", "(", "palette", ")", "\n", "pred", ".", "save", "(", "filename", ")", "\n", "\n", "# save confidence", "\n", "conf_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "gt_ins_output_dir", ",", "str", "(", "key", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "confs", "=", "self", ".", "gt_confs_vis", "[", "key", "]", "\n", "for", "conf", "in", "confs", ":", "\n", "                ", "conf_file", ".", "write", "(", "'{} {} {}\\n'", ".", "format", "(", "conf", "[", "0", "]", ",", "conf", "[", "1", "]", ",", "conf", "[", "2", "]", ")", ")", "\n", "\n", "", "", "output_dir", "=", "output", "+", "'.superpixel'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting superpixel predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "superpixel_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.png'", ")", "\n", "\n", "pred", "=", "mark_boundaries", "(", "value", "[", "0", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float", ")", ",", "value", "[", "1", "]", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "filename", ",", "pred", ")", "\n", "\n", "", "self", ".", "ins_output_dir", "=", "ins_output_dir", "\n", "self", ".", "gt_ins_output_dir", "=", "gt_ins_output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.__init__": [[695, 720], ["LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "coco", ",", "processor", ",", "*", ",", "\n", "max_per_image", "=", "20", ",", "\n", "category_ids", "=", "None", ",", "\n", "iou_type", "=", "'keypoints'", ",", "\n", "small_threshold", "=", "0.0", ")", ":", "\n", "        ", "if", "category_ids", "is", "None", ":", "\n", "            ", "category_ids", "=", "[", "1", "]", "\n", "\n", "", "self", ".", "coco", "=", "coco", "\n", "self", ".", "processor", "=", "processor", "\n", "self", ".", "max_per_image", "=", "max_per_image", "\n", "self", ".", "category_ids", "=", "category_ids", "\n", "self", ".", "iou_type", "=", "iou_type", "\n", "self", ".", "small_threshold", "=", "small_threshold", "\n", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "self", ".", "image_ids", "=", "[", "]", "\n", "self", ".", "eval", "=", "None", "\n", "self", ".", "decoder_time", "=", "0.0", "\n", "self", ".", "nn_time", "=", "0.0", "\n", "\n", "self", ".", "pose_vis", "=", "{", "}", "\n", "\n", "LOG", ".", "debug", "(", "'max = %d, category ids = %s, iou_type = %s'", ",", "\n", "self", ".", "max_per_image", ",", "self", ".", "category_ids", ",", "self", ".", "iou_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats": [[721, 742], ["eval_mhp.EvalCoco.coco.loadRes", "COCOeval", "LOG.info", "print"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "stats", "(", "self", ",", "predictions", "=", "None", ",", "image_ids", "=", "None", ")", ":", "\n", "# from pycocotools.cocoeval import COCOeval", "\n", "        ", "if", "predictions", "is", "None", ":", "\n", "            ", "predictions", "=", "self", ".", "predictions", "\n", "", "if", "image_ids", "is", "None", ":", "\n", "            ", "image_ids", "=", "self", ".", "image_ids", "\n", "\n", "", "coco_eval", "=", "self", ".", "coco", ".", "loadRes", "(", "predictions", ")", "\n", "\n", "self", ".", "eval", "=", "COCOeval", "(", "self", ".", "coco", ",", "coco_eval", ",", "iouType", "=", "self", ".", "iou_type", ")", "\n", "LOG", ".", "info", "(", "'cat_ids: %s'", ",", "self", ".", "category_ids", ")", "\n", "if", "self", ".", "category_ids", ":", "\n", "            ", "self", ".", "eval", ".", "params", ".", "catIds", "=", "self", ".", "category_ids", "\n", "\n", "", "if", "image_ids", "is", "not", "None", ":", "\n", "            ", "print", "(", "'image ids'", ",", "image_ids", ")", "\n", "self", ".", "eval", ".", "params", ".", "imgIds", "=", "image_ids", "\n", "#self.eval.evaluate()", "\n", "#self.eval.accumulate()", "\n", "#self.eval.summarize()", "\n", "", "return", "self", ".", "eval", ".", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.count_ops": [[743, 750], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "thop.profile", "LOG.info", "next", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "@", "staticmethod", "\n", "def", "count_ops", "(", "model", ",", "height", "=", "641", ",", "width", "=", "641", ")", ":", "\n", "        ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "dummy_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "height", ",", "width", ",", "device", "=", "device", ")", "\n", "gmacs", ",", "params", "=", "thop", ".", "profile", "(", "model", ",", "inputs", "=", "(", "dummy_input", ",", ")", ")", "\n", "LOG", ".", "info", "(", "'GMACs = {0:.2f}, million params = {1:.2f}'", ".", "format", "(", "gmacs", "/", "1e9", ",", "params", "/", "1e6", ")", ")", "\n", "return", "gmacs", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.view_annotations": [[751, 765], ["show.AnnotationPainter", "open", "PIL.Image.open().convert", "show.image_canvas", "show.AnnotationPainter.annotations", "os.path.join", "show.image_canvas", "show.white_screen", "show.AnnotationPainter.annotations", "show.AnnotationPainter.annotations", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "@", "staticmethod", "\n", "def", "view_annotations", "(", "meta", ",", "predictions", ",", "ground_truth", ")", ":", "\n", "        ", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "IMAGE_DIR_VAL", ",", "meta", "[", "'file_name'", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "            ", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n", "", "if", "ground_truth", ":", "\n", "            ", "with", "show", ".", "image_canvas", "(", "cpu_image", ")", "as", "ax", ":", "\n", "                ", "show", ".", "white_screen", "(", "ax", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "ground_truth", ",", "color", "=", "'grey'", ")", "\n", "annotation_painter", ".", "annotations", "(", "ax", ",", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions": [[766, 820], ["int", "eval_mhp.EvalCoco.image_ids.append", "transforms.Preprocess.annotations_inverse", "len", "transforms.Preprocess.annotations_inverse", "eval_mhp.EvalCoco.view_annotations", "pred.json_data", "image_annotations.append", "image_annotations.append", "eval_mhp.EvalCoco.stats", "LOG.debug", "transforms.Preprocess.annotations_inverse.append", "transforms.Preprocess.annotations_inverse.append", "pred.json_data.items", "numpy.zeros().tolist", "pred.scale", "annotation.AnnotationDet().set", "annotation.Annotation().set", "numpy.zeros", "annotation.AnnotationDet", "annotation.Annotation", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.view_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.AnnotationDet.json_data", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "", "", "def", "from_predictions", "(", "self", ",", "predictions", ",", "meta", ",", "debug", "=", "False", ",", "gt", "=", "None", ")", ":", "\n", "        ", "image_id", "=", "int", "(", "meta", "[", "'image_id'", "]", ")", "\n", "self", ".", "image_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "predictions", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "predictions", ",", "meta", ")", "\n", "if", "self", ".", "small_threshold", ":", "\n", "            ", "predictions", "=", "[", "pred", "for", "pred", "in", "predictions", "\n", "if", "pred", ".", "scale", "(", "v_th", "=", "0.01", ")", ">=", "self", ".", "small_threshold", "]", "\n", "", "if", "len", "(", "predictions", ")", ">", "self", ".", "max_per_image", ":", "\n", "            ", "predictions", "=", "predictions", "[", ":", "self", ".", "max_per_image", "]", "\n", "\n", "", "self", ".", "pose_vis", "[", "meta", "[", "'file_name'", "]", "]", "=", "predictions", "\n", "\n", "if", "debug", ":", "\n", "            ", "gt_anns", "=", "[", "]", "\n", "for", "g", "in", "gt", ":", "\n", "                ", "if", "'bbox'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "AnnotationDet", "(", "MHP_CATEGORIES", ")", ".", "set", "(", "g", "[", "'category_id'", "]", "-", "1", ",", "None", ",", "g", "[", "'bbox'", "]", ")", "\n", ")", "\n", "", "if", "'keypoints'", "in", "g", ":", "\n", "                    ", "gt_anns", ".", "append", "(", "\n", "Annotation", "(", "MHP_KEYPOINTS", ",", "MHP_PERSON_SKELETON", ")", "\n", ".", "set", "(", "g", "[", "'keypoints'", "]", ",", "fixed_score", "=", "None", ")", "\n", ")", "\n", "", "", "gt_anns", "=", "transforms", ".", "Preprocess", ".", "annotations_inverse", "(", "gt_anns", ",", "meta", ")", "\n", "self", ".", "view_annotations", "(", "meta", ",", "predictions", ",", "gt_anns", ")", "\n", "\n", "", "image_annotations", "=", "[", "]", "\n", "for", "pred", "in", "predictions", ":", "\n", "            ", "pred_data", "=", "pred", ".", "json_data", "(", ")", "\n", "pred_data", "[", "'image_id'", "]", "=", "image_id", "\n", "pred_data", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "pred_data", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'category_id'", ",", "'score'", ",", "'keypoints'", ",", "'bbox'", ",", "'image_id'", ")", "\n", "}", "\n", "image_annotations", ".", "append", "(", "pred_data", ")", "\n", "\n", "# force at least one annotation per image (for pycocotools)", "\n", "", "if", "not", "image_annotations", ":", "\n", "            ", "image_annotations", ".", "append", "(", "{", "\n", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "1", ",", "\n", "'keypoints'", ":", "np", ".", "zeros", "(", "(", "len", "(", "MHP_KEYPOINTS", ")", "*", "3", ",", ")", ")", ".", "tolist", "(", ")", ",", "\n", "'bbox'", ":", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "'score'", ":", "0.001", ",", "\n", "}", ")", "\n", "\n", "", "if", "debug", ":", "\n", "            ", "self", ".", "stats", "(", "image_annotations", ",", "[", "image_id", "]", ")", "\n", "LOG", ".", "debug", "(", "meta", ")", "\n", "\n", "", "self", ".", "predictions", "+=", "image_annotations", "\n", "return", "image_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions": [[821, 862], ["LOG.info", "LOG.info", "show.KeypointPainter", "show.AnnotationPainter", "os.makedirs", "LOG.info", "eval_mhp.EvalCoco.pose_vis.items", "open", "json.dump", "zipfile.ZipFile", "myzip.write", "os.path.join", "os.path.join", "LOG.debug", "open", "PIL.Image.open().convert", "show.image_canvas", "show.AnnotationPainter.annotations", "annotation.items", "str", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "def", "write_predictions", "(", "self", ",", "filename", ")", ":", "\n", "        ", "predictions", "=", "[", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "annotation", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "'image_id'", ",", "'category_id'", ",", "'keypoints'", ",", "'score'", ")", "}", "\n", "for", "annotation", "in", "self", ".", "predictions", "\n", "]", "\n", "with", "open", "(", "filename", "+", "'.pred.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "predictions", ",", "f", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.pred.json'", ",", "filename", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "filename", "+", "'.zip'", ",", "'w'", ")", "as", "myzip", ":", "\n", "            ", "myzip", ".", "write", "(", "filename", "+", "'.pred.json'", ",", "arcname", "=", "'predictions.json'", ")", "\n", "", "LOG", ".", "info", "(", "'wrote %s.zip'", ",", "filename", ")", "\n", "\n", "# debug", "\n", "# visualizers", "\n", "keypoint_painter", "=", "show", ".", "KeypointPainter", "(", "\n", "color_connections", "=", "True", ",", "\n", "linewidth", "=", "6", ",", "\n", ")", "\n", "annotation_painter", "=", "show", ".", "AnnotationPainter", "(", "\n", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n", "output_dir", "=", "filename", "+", "'.pose'", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "LOG", ".", "info", "(", "'\\nWriting pose predictions to {}'", ".", "format", "(", "output_dir", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "pose_vis", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "imagefile", "=", "os", ".", "path", ".", "join", "(", "IMAGE_DIR_VAL", ",", "key", "+", "'.jpg'", ")", "\n", "with", "open", "(", "imagefile", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "cpu_image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "image_out_name", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "str", "(", "key", ")", "+", "'.jpg'", ")", "\n", "LOG", ".", "debug", "(", "'image output = %s'", ",", "image_out_name", ")", "\n", "with", "show", ".", "image_canvas", "(", "cpu_image", ",", "\n", "image_out_name", ",", "\n", "show", "=", "False", ",", "\n", "fig_width", "=", "10.0", ",", "\n", "dpi_factor", "=", "1.0", ")", "as", "ax", ":", "\n", "                ", "annotation_painter", ".", "annotations", "(", "ax", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_palette": [[45, 61], ["range"], "function", ["None"], ["def", "get_palette", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "            ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_confusion_matrix": [[66, 84], ["numpy.bincount", "numpy.zeros", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "get_confusion_matrix", "(", "gt_label", ",", "pred_label", ",", "class_num", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the confusion matrix by given label and pred\n        :param gt_label: the ground truth label\n        :param pred_label: the pred label\n        :param class_num: the nunber of class\n    \"\"\"", "\n", "index", "=", "(", "gt_label", "*", "class_num", "+", "pred_label", ")", ".", "astype", "(", "'int32'", ")", "\n", "label_count", "=", "np", ".", "bincount", "(", "index", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "class_num", ",", "class_num", ")", ")", "\n", "\n", "for", "i_label", "in", "range", "(", "class_num", ")", ":", "\n", "        ", "for", "i_pred_label", "in", "range", "(", "class_num", ")", ":", "\n", "            ", "cur_index", "=", "i_label", "*", "class_num", "+", "i_pred_label", "\n", "if", "cur_index", "<", "len", "(", "label_count", ")", ":", "\n", "                ", "confusion_matrix", "[", "i_label", ",", "i_pred_label", "]", "=", "label_count", "[", "cur_index", "]", "\n", "\n", "", "", "", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_gt_confidence": [[221, 228], ["class_map.keys", "confs.append"], "function", ["None"], ["", "", "def", "compute_gt_confidence", "(", "gt_instance", ",", "class_map", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "label", "in", "class_map", ".", "keys", "(", ")", ":", "\n", "        ", "cls", "=", "class_map", "[", "label", "]", "\n", "confs", ".", "append", "(", "[", "label", ",", "cls", ",", "1", "]", ")", "\n", "\n", "", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.compute_confidence": [[230, 254], ["class_map.keys", "pow", "confs.append", "semantic_scores[].reshape", "confidence.sum", "len", "joint_score_map.reshape", "confidence.sum", "len", "skeleton_score_map.reshape", "confidence.sum", "len", "numpy.where", "numpy.where", "numpy.where", "instance_label.reshape", "instance_label.reshape", "instance_label.reshape"], "function", ["None"], ["", "def", "compute_confidence", "(", "semantic_scores", ",", "class_map", ",", "instance_label", ",", "\n", "joint_score_map", ",", "skeleton_score_map", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "label", "in", "class_map", ".", "keys", "(", ")", ":", "\n", "        ", "cls", "=", "class_map", "[", "label", "]", "\n", "confidence", "=", "semantic_scores", "[", "cls", ",", ":", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_semantic", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "confidence", "=", "joint_score_map", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_joint", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "confidence", "=", "skeleton_score_map", ".", "reshape", "(", "-", "1", ")", "[", "\n", "np", ".", "where", "(", "instance_label", ".", "reshape", "(", "-", "1", ")", "==", "label", ")", "\n", "]", "\n", "conf_skeleton", "=", "confidence", ".", "sum", "(", ")", "/", "len", "(", "confidence", ")", "\n", "\n", "conf_final", "=", "pow", "(", "conf_semantic", "*", "conf_joint", "*", "conf_skeleton", ",", "-", "3", ")", "\n", "confs", ".", "append", "(", "[", "cls", ",", "conf_final", "]", ")", "\n", "\n", "", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.get_instance": [[256, 300], ["numpy.zeros_like", "numpy.unique", "len", "range", "numpy.unique", "numpy.unique", "range", "np.zeros_like.max", "print", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "get_instance", "(", "cat_gt", ",", "human_gt", ")", ":", "\n", "    ", "instance_gt", "=", "np", ".", "zeros_like", "(", "cat_gt", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "human_ids", "=", "np", ".", "unique", "(", "human_gt", ")", "[", "1", ":", "]", "\n", "class_map", "=", "{", "}", "\n", "\n", "total_part_num", "=", "0", "\n", "for", "id", "in", "human_ids", ":", "\n", "        ", "human_part_label", "=", "(", "np", ".", "where", "(", "human_gt", "==", "id", ",", "1", ",", "0", ")", "*", "cat_gt", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "part_classes", "=", "np", ".", "unique", "(", "human_part_label", ")", "\n", "\n", "exceed", "=", "False", "\n", "for", "part_id", "in", "part_classes", ":", "\n", "            ", "if", "part_id", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "total_part_num", "+=", "1", "\n", "\n", "if", "total_part_num", ">", "255", ":", "\n", "                ", "print", "(", "\n", "\"total_part_num exceed, return current instance map: {}\"", ".", "format", "(", "\n", "total_part_num", ")", "\n", ")", "\n", "exceed", "=", "True", "\n", "break", "\n", "\n", "", "class_map", "[", "total_part_num", "]", "=", "part_id", "\n", "instance_gt", "[", "np", ".", "where", "(", "human_part_label", "==", "part_id", ")", "]", "=", "total_part_num", "\n", "", "if", "exceed", ":", "\n", "            ", "break", "\n", "\n", "# Make instance id continous.", "\n", "", "", "ori_cur_labels", "=", "np", ".", "unique", "(", "instance_gt", ")", "\n", "total_num_label", "=", "len", "(", "ori_cur_labels", ")", "\n", "if", "instance_gt", ".", "max", "(", ")", "+", "1", "!=", "total_num_label", ":", "\n", "        ", "for", "label", "in", "range", "(", "1", ",", "total_num_label", ")", ":", "\n", "            ", "instance_gt", "[", "instance_gt", "==", "ori_cur_labels", "[", "label", "]", "]", "=", "label", "\n", "\n", "", "", "final_class_map", "=", "{", "}", "\n", "for", "label", "in", "range", "(", "1", ",", "total_num_label", ")", ":", "\n", "        ", "if", "label", ">=", "1", ":", "\n", "            ", "final_class_map", "[", "label", "]", "=", "class_map", "[", "ori_cur_labels", "[", "label", "]", "]", "\n", "\n", "", "", "return", "instance_gt", ",", "final_class_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.default_output_name": [[864, 888], ["None"], "function", ["None"], ["", "", "", "", "def", "default_output_name", "(", "args", ")", ":", "\n", "    ", "output", "=", "'{}.evalcoco-{}edge{}'", ".", "format", "(", "\n", "args", ".", "checkpoint", ",", "\n", "'{}-'", ".", "format", "(", "args", ".", "dataset", ")", "if", "args", ".", "dataset", "!=", "'val'", "else", "''", ",", "\n", "args", ".", "long_edge", ",", "\n", ")", "\n", "if", "args", ".", "n", ":", "\n", "        ", "output", "+=", "'-samples{}'", ".", "format", "(", "args", ".", "n", ")", "\n", "", "if", "not", "args", ".", "force_complete_pose", ":", "\n", "        ", "output", "+=", "'-noforcecompletepose'", "\n", "", "if", "args", ".", "orientation_invariant", "or", "args", ".", "extended_scale", ":", "\n", "        ", "output", "+=", "'-'", "\n", "if", "args", ".", "orientation_invariant", ":", "\n", "            ", "output", "+=", "'o'", "\n", "", "if", "args", ".", "extended_scale", ":", "\n", "            ", "output", "+=", "'s'", "\n", "", "", "if", "args", ".", "two_scale", ":", "\n", "        ", "output", "+=", "'-twoscale'", "\n", "", "if", "args", ".", "multi_scale", ":", "\n", "        ", "output", "+=", "'-multiscale'", "\n", "if", "args", ".", "multi_scale_hflip", ":", "\n", "            ", "output", "+=", "'whflip'", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.cli": [[895, 1001], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "network.cli", "decoder.cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "network.configure", "show.configure", "visualizer.configure", "torch.device", "torch.device", "LOG.debug", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.basicConfig", "logging.getLogger().setLevel", "logging.getLogger().setLevel", "LOG.setLevel", "logging.basicConfig", "logging.getLogger().setLevel", "LOG.setLevel", "max", "Exception", "Exception", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "eval_mhp.default_output_name", "jsonlogger.JsonFormatter", "logging.getLogger", "logging.getLogger", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.default_output_name"], ["", "def", "cli", "(", ")", ":", "# pylint: disable=too-many-statements,too-many-branches", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.eval_mhp'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "CustomFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "decoder", ".", "cli", "(", "parser", ",", "force_complete_pose", "=", "True", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output filename without file extension'", ")", "\n", "parser", ".", "add_argument", "(", "'--detection-annotations'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-n'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'skip n batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "choices", "=", "(", "'val'", ",", "'test'", ",", "'test-dev'", ")", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'dataset to evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-ann'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'minimum number of truth annotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--long-edge'", ",", "default", "=", "641", ",", "type", "=", "int", ",", "\n", "help", "=", "'long edge of input images. Setting to zero deactivates scaling.'", ")", "\n", "parser", ".", "add_argument", "(", "'--loader-workers'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of workers for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--orientation-invariant'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--extended-scale'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-existing'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'skip if output eval file exists already'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "parser", ".", "add_argument", "(", "'--write-predictions'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'write a json and a zip file of the predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--all-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'run over all images irrespective of catIds'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use-superpixel'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-pose'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-semantic'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--eval-instance'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages'", ")", "\n", "group", ".", "add_argument", "(", "'--debug-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages and enable all debug images'", ")", "\n", "group", ".", "add_argument", "(", "'--log-stats'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable stats logging'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug_images", ":", "\n", "        ", "args", ".", "debug", "=", "True", "\n", "\n", "", "log_level", "=", "logging", ".", "INFO", "if", "not", "args", ".", "debug", "else", "logging", ".", "DEBUG", "\n", "if", "args", ".", "log_stats", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "        ", "from", "pythonjsonlogger", "import", "jsonlogger", "\n", "stdout_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "stdout_handler", ".", "setFormatter", "(", "\n", "jsonlogger", ".", "JsonFormatter", "(", "'(message) (levelname) (name)'", ")", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stdout_handler", "]", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf.stats'", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", ")", "\n", "logging", ".", "getLogger", "(", "'openpifpaf'", ")", ".", "setLevel", "(", "log_level", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "", "network", ".", "configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "\n", "if", "args", ".", "loader_workers", "is", "None", ":", "\n", "        ", "args", ".", "loader_workers", "=", "max", "(", "2", ",", "args", ".", "batch_size", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'val'", "and", "not", "args", ".", "detection_annotations", ":", "\n", "        ", "args", ".", "annotation_file", "=", "'data/MHP/val.json'", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "\n", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "write_predictions", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --write-predictions for this dataset'", ")", "\n", "", "if", "args", ".", "dataset", "in", "(", "'test'", ",", "'test-dev'", ")", "and", "not", "args", ".", "all_images", "and", "not", "args", ".", "debug", ":", "\n", "        ", "raise", "Exception", "(", "'have to use --all-images for this dataset'", ")", "\n", "\n", "# add args.device", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "args", ".", "pin_memory", "=", "False", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "args", ".", "pin_memory", "=", "True", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "# generate a default output filename", "\n", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "args", ".", "output", "=", "default_output_name", "(", "args", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.write_evaluations": [[1003, 1033], ["len", "print", "print", "print", "print", "eval_coco.write_predictions", "eval_coco.stats", "numpy.savetxt", "print", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.stats"], ["", "def", "write_evaluations", "(", "eval_coco", ",", "filename", ",", "args", ",", "total_time", ",", "count_ops", ",", "file_size", ")", ":", "\n", "    ", "if", "args", ".", "write_predictions", ":", "\n", "        ", "eval_coco", ".", "write_predictions", "(", "filename", ")", "\n", "\n", "", "n_images", "=", "len", "(", "eval_coco", ".", "image_ids", ")", "\n", "\n", "if", "args", ".", "dataset", "not", "in", "(", "'test'", ",", "'test-dev'", ")", ":", "\n", "        ", "stats", "=", "eval_coco", ".", "stats", "(", ")", "\n", "np", ".", "savetxt", "(", "filename", "+", "'.txt'", ",", "stats", ")", "\n", "with", "open", "(", "filename", "+", "'.stats.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "#'stats': stats.tolist(),", "\n", "'n_images'", ":", "n_images", ",", "\n", "'decoder_time'", ":", "eval_coco", ".", "decoder_time", ",", "\n", "'nn_time'", ":", "eval_coco", ".", "nn_time", ",", "\n", "'total_time'", ":", "total_time", ",", "\n", "'checkpoint'", ":", "args", ".", "checkpoint", ",", "\n", "'count_ops'", ":", "count_ops", ",", "\n", "'file_size'", ":", "file_size", ",", "\n", "}", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'given dataset does not have ground truth, so no stats summary'", ")", "\n", "\n", "", "print", "(", "'n images = {}'", ".", "format", "(", "n_images", ")", ")", "\n", "print", "(", "'decoder time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "decoder_time", ",", "1000", "*", "eval_coco", ".", "decoder_time", "/", "n_images", ")", ")", "\n", "print", "(", "'nn time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "eval_coco", ".", "nn_time", ",", "1000", "*", "eval_coco", ".", "nn_time", "/", "n_images", ")", ")", "\n", "print", "(", "'total time = {:.1f}s ({:.0f}ms / image)'", "\n", "''", ".", "format", "(", "total_time", ",", "1000", "*", "total_time", "/", "n_images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.preprocess_factory": [[1035, 1073], ["transforms.Compose", "transforms.NormalizeAnnotations", "transforms.DeterministicEqualChoice", "transforms.CenterPadTight", "transforms.CenterPad", "transforms.DeterministicEqualChoice", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RescaleAbsolute", "transforms.RotateBy90", "transforms.RotateBy90", "transforms.RotateBy90"], "function", ["None"], ["", "def", "preprocess_factory", "(", "\n", "long_edge", ",", "\n", "*", ",", "\n", "tight_padding", "=", "False", ",", "\n", "extended_scale", "=", "False", ",", "\n", "orientation_invariant", "=", "False", ",", "\n", ")", ":", "\n", "    ", "preprocess", "=", "[", "transforms", ".", "NormalizeAnnotations", "(", ")", "]", "\n", "\n", "if", "extended_scale", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", ",", "\n", "transforms", ".", "RescaleAbsolute", "(", "(", "long_edge", "-", "1", ")", "//", "2", "+", "1", ")", ",", "\n", "]", ",", "salt", "=", "1", ")", "\n", "]", "\n", "", "elif", "long_edge", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "RescaleAbsolute", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "tight_padding", ":", "\n", "        ", "preprocess", "+=", "[", "transforms", ".", "CenterPadTight", "(", "16", ")", "]", "\n", "", "else", ":", "\n", "        ", "assert", "long_edge", "\n", "preprocess", "+=", "[", "transforms", ".", "CenterPad", "(", "long_edge", ")", "]", "\n", "\n", "", "if", "orientation_invariant", ":", "\n", "        ", "preprocess", "+=", "[", "\n", "transforms", ".", "DeterministicEqualChoice", "(", "[", "\n", "None", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "90", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "180", ")", ",", "\n", "transforms", ".", "RotateBy90", "(", "fixed_angle", "=", "270", ")", ",", "\n", "]", ",", "salt", "=", "3", ")", "\n", "]", "\n", "\n", "", "preprocess", "+=", "[", "transforms", ".", "EVAL_TRANSFORM", "]", "\n", "return", "transforms", ".", "Compose", "(", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.dataloader_from_args": [[1075, 1089], ["eval_mhp.preprocess_factory", "datasets.MHP", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.preprocess_factory"], ["", "def", "dataloader_from_args", "(", "args", ")", ":", "\n", "    ", "preprocess", "=", "preprocess_factory", "(", "\n", "args", ".", "long_edge", ",", "\n", "tight_padding", "=", "args", ".", "batch_size", "==", "1", "and", "not", "args", ".", "multi_scale", ",", "\n", "extended_scale", "=", "args", ".", "extended_scale", ",", "\n", "orientation_invariant", "=", "args", ".", "orientation_invariant", ",", "\n", ")", "\n", "data", "=", "datasets", ".", "MHP", "(", "train", "=", "False", ",", "preprocess", "=", "preprocess", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "num_workers", "=", "args", ".", "loader_workers", ",", "\n", "collate_fn", "=", "datasets", ".", "collate_images_anns_meta", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.main": [[1091, 1224], ["eval_mhp.cli", "eval_mhp.dataloader_from_args", "network.factory_from_args", "model_cpu.to", "decoder.factory_from_args", "pycocotools.coco.COCO", "eval_mhp.EvalCoco", "eval_mhp.EvalSemantic", "eval_mhp.EvalInstance", "time.time", "time.time", "enumerate", "list", "network.local_checkpoint_path", "os.path.exists", "print", "LOG.info", "torch.nn.DataParallel", "torch.nn.DataParallel", "LOG.info", "time.time", "decoder.factory_from_args.batch", "isinstance", "time.time", "eval_mhp.EvalCoco.count_ops", "os.path.getsize", "eval_mhp.write_evaluations", "eval_mhp.EvalCoco.write_predictions", "eval_mhp.EvalSemantic.summary", "eval_mhp.EvalSemantic.write_predictions", "eval_mhp.EvalInstance.write_predictions", "eval_mhp.EvalInstance.summary", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len", "len", "len", "len", "len", "len", "eval_mhp.EvalCoco.from_predictions", "eval_mhp.EvalSemantic.from_predictions", "eval_mhp.EvalInstance.from_predictions", "time.time", "max", "time.time", "numpy.any"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.dataloader_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.local_checkpoint_path", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.count_ops", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.write_evaluations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.summary", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.write_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalInstance.summary", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.eval_mhp.EvalCoco.from_predictions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "\n", "# skip existing?", "\n", "if", "args", ".", "skip_existing", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "output", "+", "'.stats.json'", ")", ":", "\n", "            ", "print", "(", "'Output file {} exists already. Exiting.'", "\n", "''", ".", "format", "(", "args", ".", "output", "+", "'.stats.json'", ")", ")", "\n", "return", "\n", "", "print", "(", "'Processing: {}'", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "", "data_loader", "=", "dataloader_from_args", "(", "args", ")", "\n", "model_cpu", ",", "_", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "model", "=", "model_cpu", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "LOG", ".", "info", "(", "'Using multiple GPUs: %d'", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "base_net", "=", "model_cpu", ".", "base_net", "\n", "model", ".", "pose_head_nets", "=", "model_cpu", ".", "pose_head_nets", "\n", "model", ".", "segm_head_nets", "=", "model_cpu", ".", "segm_head_nets", "\n", "model", ".", "head_nets", "=", "model_cpu", ".", "head_nets", "\n", "\n", "", "processor", "=", "decoder", ".", "factory_from_args", "(", "args", ",", "model", ")", "\n", "# processor.instance_scorer = decocder.instance_scorer.InstanceScoreRecorder()", "\n", "# processor.instance_scorer = torch.load('instance_scorer.pkl')", "\n", "\n", "coco", "=", "pycocotools", ".", "coco", ".", "COCO", "(", "args", ".", "annotation_file", ")", "\n", "eval_coco", "=", "EvalCoco", "(", "\n", "coco", ",", "\n", "processor", ",", "\n", "max_per_image", "=", "100", "if", "args", ".", "detection_annotations", "else", "20", ",", "\n", "category_ids", "=", "[", "]", "if", "args", ".", "detection_annotations", "else", "[", "1", "]", ",", "\n", "iou_type", "=", "'bbox'", "if", "args", ".", "detection_annotations", "else", "'keypoints'", ",", "\n", ")", "\n", "eval_segm", "=", "EvalSemantic", "(", "num_classes", "=", "59", ")", "\n", "eval_inst", "=", "EvalInstance", "(", "num_classes", "=", "59", ",", "categories", "=", "MHP_CATEGORIES", ")", "\n", "\n", "total_start", "=", "time", ".", "time", "(", ")", "\n", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_i", ",", "(", "image_tensors", ",", "anns_batch", ",", "meta_batch", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'batch %d, last loop: %.3fs, batches per second=%.1f'", ",", "\n", "batch_i", ",", "time", ".", "time", "(", ")", "-", "loop_start", ",", "\n", "batch_i", "/", "max", "(", "1", ",", "(", "time", ".", "time", "(", ")", "-", "total_start", ")", ")", ")", "\n", "if", "batch_i", "<", "args", ".", "skip_n", ":", "\n", "            ", "continue", "\n", "", "if", "args", ".", "n", "and", "batch_i", ">=", "args", ".", "n", ":", "\n", "            ", "break", "\n", "\n", "", "im_h", ",", "im_w", "=", "image_tensors", ".", "shape", "[", "2", "]", ",", "image_tensors", ".", "shape", "[", "3", "]", "\n", "\n", "loop_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "len", "(", "[", "a", "\n", "for", "anns", "in", "anns_batch", "\n", "for", "a", "in", "anns", "\n", "if", "np", ".", "any", "(", "a", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ")", "]", ")", "<", "args", ".", "min_ann", ":", "\n", "            ", "continue", "\n", "\n", "", "pred_batch", "=", "processor", ".", "batch", "(", "model", ",", "image_tensors", ",", "device", "=", "args", ".", "device", ")", "\n", "eval_coco", ".", "decoder_time", "+=", "processor", ".", "last_decoder_time", "\n", "eval_coco", ".", "nn_time", "+=", "processor", ".", "last_nn_time", "\n", "\n", "pred_pose", ",", "pred_segm", ",", "pred_offset", ",", "pred_edge", ",", "pred_vote", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "isinstance", "(", "pred_batch", ",", "dict", ")", ":", "\n", "            ", "if", "'semantic'", "in", "pred_batch", ":", "\n", "                ", "pred_segm", "=", "pred_batch", "[", "'semantic'", "]", "\n", "", "if", "'offset'", "in", "pred_batch", ":", "\n", "                ", "pred_offset", "=", "pred_batch", "[", "'offset'", "]", "\n", "", "if", "'pose'", "in", "pred_batch", ":", "\n", "                ", "pred_pose", "=", "pred_batch", "[", "'pose'", "]", "\n", "", "if", "'edge'", "in", "pred_batch", ":", "\n", "                ", "pred_edge", "=", "pred_batch", "[", "'edge'", "]", "\n", "", "if", "'vote'", "in", "pred_batch", ":", "\n", "                ", "pred_vote", "=", "pred_batch", "[", "'vote'", "]", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "", "if", "'center'", "in", "pred_batch", ":", "\n", "                ", "pred_center", "=", "pred_batch", "[", "'center'", "]", "\n", "pred_center_offset", "=", "pred_batch", "[", "'center_offset'", "]", "\n", "\n", "", "", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "anns_batch", ")", "\n", "assert", "len", "(", "image_tensors", ")", "==", "len", "(", "meta_batch", ")", "\n", "assert", "len", "(", "image_tensors", ")", "==", "1", ",", "'only support batch size = 1'", "\n", "\n", "# process pose predictions", "\n", "if", "pred_pose", "is", "not", "None", "and", "args", ".", "eval_pose", "is", "True", ":", "\n", "            ", "pred_pose", "=", "eval_coco", ".", "from_predictions", "(", "pred_pose", "[", "0", "]", ",", "meta_batch", "[", "0", "]", ",", "\n", "debug", "=", "args", ".", "debug", ",", "\n", "gt", "=", "anns_batch", "[", "0", "]", ")", "\n", "\n", "# process semantic segmentation predictions", "\n", "", "if", "pred_segm", "is", "not", "None", "and", "args", ".", "eval_semantic", "is", "True", ":", "\n", "            ", "pred_segm", ",", "pred_segm_scores", ",", "gt_semantic", ",", "gt_human", "=", "eval_segm", ".", "from_predictions", "(", "pred_segm", ",", "(", "im_h", ",", "im_w", ")", ",", "\n", "pred_edge", "=", "pred_edge", ",", "\n", "pred_vote", "=", "pred_vote", ",", "\n", "meta", "=", "meta_batch", "[", "0", "]", ",", "\n", "gt", "=", "anns_batch", "[", "0", "]", ")", "\n", "\n", "# process offset predictions", "\n", "", "if", "pred_offset", "is", "not", "None", "and", "args", ".", "eval_instance", "is", "True", ":", "\n", "            ", "eval_inst", ".", "from_predictions", "(", "pred_offset", ",", "pred_segm", ",", "\n", "pred_segm_scores", ",", "\n", "pred_pose", ",", "pred_edge", ",", "\n", "pred_center", "=", "pred_center", ",", "\n", "pred_center_offset", "=", "pred_center_offset", ",", "\n", "input_size", "=", "(", "im_h", ",", "im_w", ")", ",", "\n", "meta", "=", "meta_batch", "[", "0", "]", ",", "\n", "gt_semantic", "=", "gt_semantic", ",", "\n", "gt_human", "=", "gt_human", ")", "\n", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "total_start", "\n", "\n", "# processor.instance_scorer.write_data('instance_score_data.json')", "\n", "\n", "# model stats", "\n", "count_ops", "=", "list", "(", "eval_coco", ".", "count_ops", "(", "model_cpu", ")", ")", "\n", "local_checkpoint", "=", "network", ".", "local_checkpoint_path", "(", "args", ".", "checkpoint", ")", "\n", "file_size", "=", "os", ".", "path", ".", "getsize", "(", "local_checkpoint", ")", "if", "local_checkpoint", "else", "-", "1.0", "\n", "\n", "# write", "\n", "if", "args", ".", "eval_pose", "is", "True", ":", "\n", "        ", "write_evaluations", "(", "eval_coco", ",", "args", ".", "output", ",", "args", ",", "total_time", ",", "count_ops", ",", "\n", "file_size", ")", "\n", "eval_coco", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "\n", "# write semantic parsing", "\n", "", "if", "args", ".", "eval_semantic", "is", "True", ":", "\n", "        ", "eval_segm", ".", "summary", "(", ")", "\n", "eval_segm", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "\n", "# write instance parsing", "\n", "", "if", "args", ".", "eval_instance", "is", "True", ":", "\n", "        ", "eval_inst", ".", "write_predictions", "(", "args", ".", "output", ")", "\n", "eval_inst", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.create_sink": [[6, 17], ["functools.lru_cache", "numpy.linspace", "numpy.stack", "numpy.zeros", "np.linspace.reshape().repeat", "np.linspace.reshape().repeat", "np.linspace.reshape", "np.linspace.reshape"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["@", "functools", ".", "lru_cache", "(", "maxsize", "=", "64", ")", "\n", "def", "create_sink", "(", "side", ")", ":", "\n", "    ", "if", "side", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "2", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "sink1d", "=", "np", ".", "linspace", "(", "(", "side", "-", "1.0", ")", "/", "2.0", ",", "-", "(", "side", "-", "1.0", ")", "/", "2.0", ",", "num", "=", "side", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sink", "=", "np", ".", "stack", "(", "(", "\n", "sink1d", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "side", ",", "axis", "=", "0", ")", ",", "\n", "sink1d", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "side", ",", "axis", "=", "1", ")", ",", "\n", ")", ",", "axis", "=", "0", ")", "\n", "return", "sink", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area": [[19, 38], ["int", "int", "math.ceil", "math.ceil", "int", "int"], "function", ["None"], ["", "def", "mask_valid_area", "(", "intensities", ",", "valid_area", ",", "*", ",", "fill_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Mask area.\n\n    Intensities is either a feature map or an image.\n    \"\"\"", "\n", "if", "valid_area", "is", "None", ":", "\n", "        ", "return", "\n", "\n", "", "if", "valid_area", "[", "1", "]", ">=", "1.0", ":", "\n", "        ", "intensities", "[", ":", ",", ":", "int", "(", "valid_area", "[", "1", "]", ")", ",", ":", "]", "=", "fill_value", "\n", "", "if", "valid_area", "[", "0", "]", ">=", "1.0", ":", "\n", "        ", "intensities", "[", ":", ",", ":", ",", ":", "int", "(", "valid_area", "[", "0", "]", ")", "]", "=", "fill_value", "\n", "\n", "", "max_i", "=", "int", "(", "math", ".", "ceil", "(", "valid_area", "[", "1", "]", "+", "valid_area", "[", "3", "]", ")", ")", "+", "1", "\n", "max_j", "=", "int", "(", "math", ".", "ceil", "(", "valid_area", "[", "0", "]", "+", "valid_area", "[", "2", "]", ")", ")", "+", "1", "\n", "if", "0", "<", "max_i", "<", "intensities", ".", "shape", "[", "1", "]", ":", "\n", "        ", "intensities", "[", ":", ",", "max_i", ":", ",", ":", "]", "=", "fill_value", "\n", "", "if", "0", "<", "max_j", "<", "intensities", ".", "shape", "[", "2", "]", ":", "\n", "        ", "intensities", "[", ":", ",", ":", ",", "max_j", ":", "]", "=", "fill_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_v2.default_output_file": [[16, 46], ["datetime.datetime.now().strftime", "os.makedirs", "isinstance", "head_names.extend", "head_names.append", "datetime.datetime.now"], "function", ["None"], ["def", "default_output_file", "(", "args", ",", "net_cpu", ")", ":", "\n", "    ", "base_name", "=", "net_cpu", ".", "base_net", ".", "shortname", "\n", "\n", "head_names", "=", "[", "]", "\n", "for", "hn", "in", "net_cpu", ".", "head_nets", ":", "\n", "        ", "head_meta", "=", "hn", ".", "meta", "\n", "if", "isinstance", "(", "head_meta", ",", "list", ")", ":", "\n", "            ", "head_names", ".", "extend", "(", "[", "meta", ".", "name", "for", "meta", "in", "head_meta", "]", ")", "\n", "", "else", ":", "\n", "            ", "head_names", ".", "append", "(", "head_meta", ".", "name", ")", "\n", "\n", "", "", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "out_folder", "=", "'outputs/{}-{}-{}/'", ".", "format", "(", "base_name", ",", "now", ",", "'-'", ".", "join", "(", "head_names", ")", ")", "\n", "os", ".", "makedirs", "(", "out_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "out", "=", "'{}/{}-{}-{}'", ".", "format", "(", "out_folder", ",", "base_name", ",", "now", ",", "'-'", ".", "join", "(", "head_names", ")", ")", "\n", "if", "args", ".", "square_edge", "!=", "385", ":", "\n", "        ", "out", "+=", "'-edge{}'", ".", "format", "(", "args", ".", "square_edge", ")", "\n", "", "if", "args", ".", "regression_loss", "!=", "'laplace'", ":", "\n", "        ", "out", "+=", "'-{}'", ".", "format", "(", "args", ".", "regression_loss", ")", "\n", "", "if", "args", ".", "r_smooth", "!=", "0.0", ":", "\n", "        ", "out", "+=", "'-rsmooth{}'", ".", "format", "(", "args", ".", "r_smooth", ")", "\n", "", "if", "args", ".", "orientation_invariant", "or", "args", ".", "extended_scale", ":", "\n", "        ", "out", "+=", "'-'", "\n", "if", "args", ".", "orientation_invariant", ":", "\n", "            ", "out", "+=", "'o{:02.0f}'", ".", "format", "(", "args", ".", "orientation_invariant", "*", "100.0", ")", "\n", "", "if", "args", ".", "extended_scale", ":", "\n", "            ", "out", "+=", "'s'", "\n", "\n", "", "", "return", "out", "+", "'.pkl'", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_v2.cli": [[48, 118], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "logs.cli", "network.cli", "network.losses.cli", "encoder.cli", "optimize.cli", "datasets.train_cli", "show.cli", "visualizer.cli", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "network.configure", "network.losses.configure", "encoder.configure", "datasets.train_configure", "show.configure", "visualizer.configure", "torch.device", "LOG.debug", "torch.cuda.is_available", "torch.device"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "cli", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "'python3 -m openpifpaf.train'", ",", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "action", "=", "'version'", ",", "\n", "version", "=", "'OpenPifPaf {version}'", ".", "format", "(", "version", "=", "__version__", ")", ")", "\n", "\n", "logs", ".", "cli", "(", "parser", ")", "\n", "network", ".", "cli", "(", "parser", ")", "\n", "network", ".", "losses", ".", "cli", "(", "parser", ")", "\n", "encoder", ".", "cli", "(", "parser", ")", "\n", "optimize", ".", "cli", "(", "parser", ")", "\n", "datasets", ".", "train_cli", "(", "parser", ")", "\n", "show", ".", "cli", "(", "parser", ")", "\n", "visualizer", ".", "cli", "(", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output'", ",", "default", "=", "None", ",", "\n", "help", "=", "'output file'", ")", "\n", "parser", ".", "add_argument", "(", "'--stride-apply'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'apply and reset gradients every n batches'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "75", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--val-interval'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'validation run every n epochs'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--rescale-images'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'overall image rescale factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--update-batchnorm-runningstatistics'", ",", "\n", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'update batch norm running statistics'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema'", ",", "default", "=", "1e-2", ",", "type", "=", "float", ",", "\n", "help", "=", "'ema decay constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad-norm'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'clip grad norm: specify largest change for single param'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "'log loss every n steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cuda'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable CUDA'", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'debug'", ")", "\n", "group", ".", "add_argument", "(", "'--profile'", ",", "default", "=", "None", ",", "\n", "help", "=", "'enables profiling. specify path for chrome tracing file'", ")", "\n", "group", ".", "add_argument", "(", "'--log-stats'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable stats logging'", ")", "\n", "group", ".", "add_argument", "(", "'--debug-images'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'print debug messages and enable all debug images'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug_images", ":", "\n", "        ", "args", ".", "debug", "=", "True", "\n", "\n", "", "network", ".", "configure", "(", "args", ")", "\n", "network", ".", "losses", ".", "configure", "(", "args", ")", "\n", "encoder", ".", "configure", "(", "args", ")", "\n", "datasets", ".", "train_configure", "(", "args", ")", "\n", "show", ".", "configure", "(", "args", ")", "\n", "visualizer", ".", "configure", "(", "args", ")", "\n", "\n", "# add args.device", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "args", ".", "pin_memory", "=", "False", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "args", ".", "pin_memory", "=", "True", "\n", "", "LOG", ".", "debug", "(", "'neural network device: %s'", ",", "args", ".", "device", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_v2.main": [[120, 172], ["train_v2.cli", "network.factory_from_args", "logs.configure", "LOG.setLevel", "net_cpu.to", "network.losses.factory_from_args", "encoder.factory", "datasets.train_factory", "optimize.factory_optimizer", "optimize.factory_lrscheduler", "network.Trainer", "network.Trainer.loop", "train_v2.default_output_file", "logging.getLogger().setLevel", "print", "torch.nn.DataParallel", "len", "torch.cuda.device_count", "list", "list", "logging.getLogger", "torch.cuda.device_count", "torch.nn.DataParallel.parameters", "network.losses.factory_from_args.parameters", "vars", "socket.gethostname"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.optimize.factory_optimizer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.optimize.factory_lrscheduler", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.loop", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.train_v2.default_output_file"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cli", "(", ")", "\n", "net_cpu", ",", "start_epoch", "=", "network", ".", "factory_from_args", "(", "args", ")", "\n", "net_cpu", ".", "process_heads", "=", "None", "\n", "if", "args", ".", "output", "is", "None", ":", "\n", "        ", "args", ".", "output", "=", "default_output_file", "(", "args", ",", "net_cpu", ")", "\n", "\n", "", "log_level", "=", "logs", ".", "configure", "(", "args", ")", "\n", "LOG", ".", "setLevel", "(", "log_level", ")", "\n", "if", "args", ".", "log_stats", ":", "\n", "        ", "logging", ".", "getLogger", "(", "'openpifpaf.stats'", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "#from torchstat import stat", "\n", "#model = net_cpu.to(torch.device(\"cpu\"))", "\n", "#stat(model, (3, 641, 641))", "\n", "\n", "", "net", "=", "net_cpu", ".", "to", "(", "device", "=", "args", ".", "device", ")", "\n", "\n", "\n", "if", "not", "args", ".", "disable_cuda", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "print", "(", "'Using multiple GPUs: {}'", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ")", "\n", "\n", "#pytorch_total_params = sum(p.numel() for p in net_cpu.parameters())", "\n", "#print('total parameters: ', pytorch_total_params)", "\n", "\n", "", "loss", "=", "network", ".", "losses", ".", "factory_from_args", "(", "args", ",", "net_cpu", ".", "head_nets", ")", "\n", "target_transforms", "=", "encoder", ".", "factory", "(", "net_cpu", ".", "head_nets", ",", "net_cpu", ".", "base_net", ".", "stride", ")", "\n", "train_loader", ",", "val_loader", "=", "datasets", ".", "train_factory", "(", "args", ",", "target_transforms", ")", "\n", "\n", "optimizer", "=", "optimize", ".", "factory_optimizer", "(", "\n", "args", ",", "list", "(", "net", ".", "parameters", "(", ")", ")", "+", "list", "(", "loss", ".", "parameters", "(", ")", ")", ")", "\n", "lr_scheduler", "=", "optimize", ".", "factory_lrscheduler", "(", "args", ",", "optimizer", ",", "len", "(", "train_loader", ")", ")", "\n", "trainer", "=", "network", ".", "Trainer", "(", "\n", "net", ",", "loss", ",", "optimizer", ",", "args", ".", "output", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "\n", "device", "=", "args", ".", "device", ",", "\n", "fix_batch_norm", "=", "not", "args", ".", "update_batchnorm_runningstatistics", ",", "\n", "stride_apply", "=", "args", ".", "stride_apply", ",", "\n", "ema_decay", "=", "args", ".", "ema", ",", "\n", "log_interval", "=", "args", ".", "log_interval", ",", "\n", "train_profile", "=", "args", ".", "profile", ",", "\n", "num_class", "=", "args", ".", "num_classes", ",", "\n", "model_meta_data", "=", "{", "\n", "'args'", ":", "vars", "(", "args", ")", ",", "\n", "'version'", ":", "__version__", ",", "\n", "'hostname'", ":", "socket", ".", "gethostname", "(", ")", ",", "\n", "}", ",", "\n", "val_interval", "=", "args", ".", "val_interval", ",", "\n", "clip_grad_norm", "=", "args", ".", "clip_grad_norm", "\n", ")", "\n", "trainer", ".", "loop", "(", "train_loader", ",", "val_loader", ",", "args", ".", "epochs", ",", "start_epoch", "=", "start_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.pdf.Pdf.__call__": [[10, 12], ["pdf.PdfGenerator"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "PdfGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.pdf.PdfGenerator.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Pdf", ")", ":", "\n", "        ", "self", ".", "n_fields", "=", "config", ".", "n_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.pdf.PdfGenerator.__call__": [[18, 45], ["numpy.zeros", "numpy.zeros", "numpy.where", "numpy.copy", "numpy.where", "numpy.copy", "numpy.where", "torch.from_numpy", "torch.from_numpy", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", "1", ":", "3", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "edge_mask", "=", "np", ".", "zeros", "(", "(", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "flag", "=", "0.", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "'parsing'", "in", "ann", ":", "\n", "                ", "flag", "=", "1.", "\n", "single_mask", "=", "np", ".", "copy", "(", "ann", "[", "'parsing'", "]", ")", "\n", "single_mask_bool", "=", "np", ".", "where", "(", "single_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "mask", "[", "single_mask_bool", ">", "0", "]", "=", "single_mask", "[", "single_mask_bool", ">", "0", "]", "\n", "\n", "if", "'segment_mask'", "in", "ann", ":", "\n", "                    ", "ignore_indexs", "=", "np", ".", "where", "(", "(", "ann", "[", "'segment_mask'", "]", "-", "single_mask_bool", ")", ">", "0", ")", "\n", "mask", "[", "ignore_indexs", "[", "0", "]", ",", "ignore_indexs", "[", "1", "]", "]", "=", "255", "# ignore", "\n", "\n", "", "", "if", "'edge'", "in", "ann", ":", "\n", "                ", "single_mask", "=", "np", ".", "copy", "(", "ann", "[", "'edge'", "]", ")", "\n", "single_mask", "[", "single_mask", "==", "255", "]", "=", "0", "\n", "single_mask_bool", "=", "np", ".", "where", "(", "single_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "edge_mask", "[", "0", ",", "single_mask_bool", ">", "0", "]", "+=", "single_mask", "[", "single_mask_bool", ">", "0", "]", "\n", "\n", "", "", "edge_mask", "=", "np", ".", "where", "(", "edge_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "\n", "return", "{", "'semantic'", ":", "(", "torch", ".", "from_numpy", "(", "mask", ")", ",", "\n", "torch", ".", "from_numpy", "(", "edge_mask", ")", ",", "flag", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.pdf.create_label_colormap": [[47, 78], ["numpy.zeros"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "", "def", "create_label_colormap", "(", ")", ":", "\n", "    ", "\"\"\"\n    Creates a label colormap used in CITYSCAPES segmentation benchmark.\n    Returns:\n        A colormap for visualizing segmentation results.\n    \"\"\"", "\n", "\n", "colormap", "=", "np", ".", "zeros", "(", "(", "256", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "colormap", "[", "0", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "colormap", "[", "1", "]", "=", "[", "128", ",", "0", ",", "0", "]", "\n", "colormap", "[", "2", "]", "=", "[", "255", ",", "0", ",", "0", "]", "\n", "colormap", "[", "3", "]", "=", "[", "0", ",", "85", ",", "0", "]", "\n", "colormap", "[", "4", "]", "=", "[", "170", ",", "0", ",", "51", "]", "\n", "colormap", "[", "5", "]", "=", "[", "255", ",", "85", ",", "0", "]", "\n", "colormap", "[", "6", "]", "=", "[", "0", ",", "0", ",", "85", "]", "\n", "colormap", "[", "7", "]", "=", "[", "0", ",", "119", ",", "221", "]", "\n", "colormap", "[", "8", "]", "=", "[", "85", ",", "85", ",", "0", "]", "\n", "colormap", "[", "9", "]", "=", "[", "0", ",", "85", ",", "85", "]", "\n", "colormap", "[", "10", "]", "=", "[", "85", ",", "51", ",", "0", "]", "\n", "colormap", "[", "11", "]", "=", "[", "52", ",", "86", ",", "128", "]", "\n", "colormap", "[", "12", "]", "=", "[", "0", ",", "128", ",", "0", "]", "\n", "colormap", "[", "13", "]", "=", "[", "0", ",", "0", ",", "255", "]", "\n", "colormap", "[", "14", "]", "=", "[", "51", ",", "170", ",", "221", "]", "\n", "colormap", "[", "15", "]", "=", "[", "0", ",", "255", ",", "255", "]", "\n", "colormap", "[", "16", "]", "=", "[", "85", ",", "255", ",", "170", "]", "\n", "colormap", "[", "17", "]", "=", "[", "170", ",", "255", ",", "85", "]", "\n", "colormap", "[", "18", "]", "=", "[", "255", ",", "255", ",", "0", "]", "\n", "colormap", "[", "19", "]", "=", "[", "255", ",", "170", ",", "0", "]", "\n", "\n", "return", "colormap", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.Caf.__call__": [[34, 36], ["caf.CafGenerator"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "CafGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.__init__": [[39, 60], ["LOG.debug", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Caf", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "skeleton_m1", "=", "np", ".", "asarray", "(", "config", ".", "skeleton", ")", "-", "1", "\n", "self", ".", "sparse_skeleton_m1", "=", "(", "\n", "np", ".", "asarray", "(", "config", ".", "sparse_skeleton", ")", "-", "1", "\n", "if", "config", ".", "sparse_skeleton", "else", "None", ")", "\n", "\n", "if", "self", ".", "config", ".", "fixed_size", ":", "\n", "            ", "assert", "self", ".", "config", ".", "aspect_ratio", "==", "0.0", "\n", "\n", "", "LOG", ".", "debug", "(", "'only_in_field_of_view = %s, paf min size = %d'", ",", "\n", "config", ".", "only_in_field_of_view", ",", "\n", "self", ".", "config", ".", "min_size", ")", "\n", "\n", "self", ".", "headname", "=", "config", ".", "headname", "\n", "self", ".", "intensities", "=", "None", "\n", "self", ".", "fields_reg1", "=", "None", "\n", "self", ".", "fields_reg2", "=", "None", "\n", "self", ".", "fields_scale1", "=", "None", "\n", "self", ".", "fields_scale2", "=", "None", "\n", "self", ".", "fields_reg_l", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.__call__": [[61, 78], ["caf.CafGenerator.config.rescaler.keypoint_sets", "caf.CafGenerator.config.rescaler.bg_mask", "caf.CafGenerator.config.rescaler.valid_area", "LOG.debug", "caf.CafGenerator.init_fields", "caf.CafGenerator.fill", "caf.CafGenerator.fields", "caf.CafGenerator.config.visualizer.processed_image", "caf.CafGenerator.config.visualizer.targets"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.keypoint_sets", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.bg_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.init_fields", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.fields", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.processed_image", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet.targets"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "width_height_original", "=", "image", ".", "shape", "[", "2", ":", "0", ":", "-", "1", "]", "\n", "\n", "keypoint_sets", "=", "self", ".", "config", ".", "rescaler", ".", "keypoint_sets", "(", "anns", ")", "\n", "bg_mask", "=", "self", ".", "config", ".", "rescaler", ".", "bg_mask", "(", "anns", ",", "width_height_original", ",", "\n", "crowd_margin", "=", "(", "self", ".", "config", ".", "min_size", "-", "1", ")", "/", "2", ")", "\n", "valid_area", "=", "self", ".", "config", ".", "rescaler", ".", "valid_area", "(", "meta", ")", "\n", "LOG", ".", "debug", "(", "'valid area: %s\b'", ",", "valid_area", ")", "\n", "\n", "self", ".", "init_fields", "(", "bg_mask", ")", "\n", "self", ".", "fill", "(", "keypoint_sets", ")", "\n", "fields", "=", "self", ".", "fields", "(", "valid_area", ")", "\n", "\n", "self", ".", "config", ".", "visualizer", ".", "processed_image", "(", "image", ")", "\n", "self", ".", "config", ".", "visualizer", ".", "targets", "(", "fields", ",", "keypoint_sets", "=", "keypoint_sets", ")", "\n", "\n", "return", "{", "self", ".", "headname", ":", "fields", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.init_fields": [[79, 96], ["len", "numpy.zeros", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "init_fields", "(", "self", ",", "bg_mask", ")", ":", "\n", "        ", "n_fields", "=", "len", "(", "self", ".", "skeleton_m1", ")", "\n", "field_w", "=", "bg_mask", ".", "shape", "[", "1", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "field_h", "=", "bg_mask", ".", "shape", "[", "0", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "self", ".", "intensities", "=", "np", ".", "zeros", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg1", "=", "np", ".", "full", "(", "(", "n_fields", ",", "6", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg2", "=", "np", ".", "full", "(", "(", "n_fields", ",", "6", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg1", "[", ":", ",", "2", ":", "]", "=", "np", ".", "inf", "\n", "self", ".", "fields_reg2", "[", ":", ",", "2", ":", "]", "=", "np", ".", "inf", "\n", "self", ".", "fields_scale1", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_scale2", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg_l", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "inf", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# bg_mask", "\n", "p", "=", "self", ".", "config", ".", "padding", "\n", "self", ".", "fields_reg_l", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", ":", ",", "bg_mask", "==", "0", "]", "=", "1.0", "\n", "self", ".", "intensities", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", ":", ",", "bg_mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.fill": [[97, 102], ["enumerate", "caf.CafGenerator.fill_keypoints", "enumerate"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.fill_keypoints"], ["", "def", "fill", "(", "self", ",", "keypoint_sets", ")", ":", "\n", "        ", "for", "kps_i", ",", "keypoints", "in", "enumerate", "(", "keypoint_sets", ")", ":", "\n", "            ", "self", ".", "fill_keypoints", "(", "\n", "keypoints", ",", "\n", "[", "kps", "for", "i", ",", "kps", "in", "enumerate", "(", "keypoint_sets", ")", "if", "i", "!=", "kps_i", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.shortest_sparse": [[104, 119], ["numpy.linalg.norm", "min"], "methods", ["None"], ["", "", "def", "shortest_sparse", "(", "self", ",", "joint_i", ",", "keypoints", ")", ":", "\n", "        ", "shortest", "=", "np", ".", "inf", "\n", "for", "joint1i", ",", "joint2i", "in", "self", ".", "sparse_skeleton_m1", ":", "\n", "            ", "if", "joint_i", "not", "in", "(", "joint1i", ",", "joint2i", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "joint1", "=", "keypoints", "[", "joint1i", "]", "\n", "joint2", "=", "keypoints", "[", "joint2i", "]", "\n", "if", "joint1", "[", "2", "]", "<=", "self", ".", "config", ".", "v_threshold", "or", "joint2", "[", "2", "]", "<=", "self", ".", "config", ".", "v_threshold", ":", "\n", "                ", "continue", "\n", "\n", "", "d", "=", "np", ".", "linalg", ".", "norm", "(", "joint1", "[", ":", "2", "]", "-", "joint2", "[", ":", "2", "]", ")", "\n", "shortest", "=", "min", "(", "d", ",", "shortest", ")", "\n", "\n", "", "return", "shortest", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.fill_keypoints": [[120, 165], ["caf.CafGenerator.config.rescaler.scale", "enumerate", "cif.CifGenerator.max_r", "cif.CifGenerator.max_r", "numpy.min", "numpy.min", "caf.CafGenerator.fill_association", "numpy.linalg.norm", "caf.CafGenerator.shortest_sparse", "caf.CafGenerator.shortest_sparse", "numpy.min", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.max_r", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.max_r", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.fill_association", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.shortest_sparse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.shortest_sparse"], ["", "def", "fill_keypoints", "(", "self", ",", "keypoints", ",", "other_keypoints", ")", ":", "\n", "        ", "scale", "=", "self", ".", "config", ".", "rescaler", ".", "scale", "(", "keypoints", ")", "\n", "for", "paf_i", ",", "(", "joint1i", ",", "joint2i", ")", "in", "enumerate", "(", "self", ".", "skeleton_m1", ")", ":", "\n", "            ", "joint1", "=", "keypoints", "[", "joint1i", "]", "\n", "joint2", "=", "keypoints", "[", "joint2i", "]", "\n", "if", "joint1", "[", "2", "]", "<=", "self", ".", "config", ".", "v_threshold", "or", "joint2", "[", "2", "]", "<=", "self", ".", "config", ".", "v_threshold", ":", "\n", "                ", "continue", "\n", "\n", "# check if there are shorter connections in the sparse skeleton", "\n", "", "if", "self", ".", "sparse_skeleton_m1", "is", "not", "None", ":", "\n", "                ", "d", "=", "np", ".", "linalg", ".", "norm", "(", "joint1", "[", ":", "2", "]", "-", "joint2", "[", ":", "2", "]", ")", "/", "self", ".", "config", ".", "dense_to_sparse_radius", "\n", "if", "self", ".", "shortest_sparse", "(", "joint1i", ",", "keypoints", ")", "<", "d", "and", "self", ".", "shortest_sparse", "(", "joint2i", ",", "keypoints", ")", "<", "d", ":", "\n", "                    ", "continue", "\n", "\n", "# if there is no continuous visual connection, endpoints outside", "\n", "# the field of view cannot be inferred", "\n", "", "", "if", "self", ".", "config", ".", "only_in_field_of_view", ":", "\n", "# LOG.debug('fov check: j1 = %s, j2 = %s', joint1, joint2)", "\n", "                ", "if", "joint1", "[", "0", "]", "<", "0", "or", "joint2", "[", "0", "]", "<", "0", "or", "joint1", "[", "0", "]", ">", "self", ".", "intensities", ".", "shape", "[", "2", "]", "-", "1", "-", "2", "*", "self", ".", "config", ".", "padding", "or", "joint2", "[", "0", "]", ">", "self", ".", "intensities", ".", "shape", "[", "2", "]", "-", "1", "-", "2", "*", "self", ".", "config", ".", "padding", ":", "\n", "                    ", "continue", "\n", "", "if", "joint1", "[", "1", "]", "<", "0", "or", "joint2", "[", "1", "]", "<", "0", "or", "joint1", "[", "1", "]", ">", "self", ".", "intensities", ".", "shape", "[", "1", "]", "-", "1", "-", "2", "*", "self", ".", "config", ".", "padding", "or", "joint2", "[", "1", "]", ">", "self", ".", "intensities", ".", "shape", "[", "1", "]", "-", "1", "-", "2", "*", "self", ".", "config", ".", "padding", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "other_j1s", "=", "[", "other_kps", "[", "joint1i", "]", "for", "other_kps", "in", "other_keypoints", "\n", "if", "other_kps", "[", "joint1i", ",", "2", "]", ">", "self", ".", "config", ".", "v_threshold", "]", "\n", "other_j2s", "=", "[", "other_kps", "[", "joint2i", "]", "for", "other_kps", "in", "other_keypoints", "\n", "if", "other_kps", "[", "joint2i", ",", "2", "]", ">", "self", ".", "config", ".", "v_threshold", "]", "\n", "max_r1", "=", "CifGenerator", ".", "max_r", "(", "joint1", ",", "other_j1s", ")", "\n", "max_r2", "=", "CifGenerator", ".", "max_r", "(", "joint2", ",", "other_j2s", ")", "\n", "\n", "if", "self", ".", "config", ".", "sigmas", "is", "None", ":", "\n", "                ", "scale1", ",", "scale2", "=", "scale", ",", "scale", "\n", "", "else", ":", "\n", "                ", "scale1", "=", "scale", "*", "self", ".", "config", ".", "sigmas", "[", "joint1i", "]", "\n", "scale2", "=", "scale", "*", "self", ".", "config", ".", "sigmas", "[", "joint2i", "]", "\n", "", "scale1", "=", "np", ".", "min", "(", "[", "scale1", ",", "np", ".", "min", "(", "max_r1", ")", "*", "0.25", "]", ")", "\n", "scale2", "=", "np", ".", "min", "(", "[", "scale2", ",", "np", ".", "min", "(", "max_r2", ")", "*", "0.25", "]", ")", "\n", "self", ".", "fill_association", "(", "paf_i", ",", "joint1", ",", "joint2", ",", "scale1", ",", "scale2", ",", "max_r1", ",", "max_r2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.fill_association": [[166, 227], ["numpy.linalg.norm", "max", "utils.create_sink", "max", "min", "numpy.linspace", "int", "int", "numpy.ceil", "numpy.round", "int", "int", "numpy.fabs", "numpy.expand_dims", "numpy.expand_dims", "numpy.isnan", "numpy.isnan", "numpy.spacing"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.create_sink", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan"], ["", "", "def", "fill_association", "(", "self", ",", "paf_i", ",", "joint1", ",", "joint2", ",", "scale1", ",", "scale2", ",", "max_r1", ",", "max_r2", ")", ":", "\n", "# offset between joints", "\n", "        ", "offset", "=", "joint2", "[", ":", "2", "]", "-", "joint1", "[", ":", "2", "]", "\n", "offset_d", "=", "np", ".", "linalg", ".", "norm", "(", "offset", ")", "\n", "\n", "# dynamically create s", "\n", "s", "=", "max", "(", "self", ".", "config", ".", "min_size", ",", "int", "(", "offset_d", "*", "self", ".", "config", ".", "aspect_ratio", ")", ")", "\n", "# s = max(s, min(int(scale1), int(scale2)))", "\n", "sink", "=", "create_sink", "(", "s", ")", "\n", "s_offset", "=", "(", "s", "-", "1.0", ")", "/", "2.0", "\n", "\n", "# set fields", "\n", "num", "=", "max", "(", "2", ",", "int", "(", "np", ".", "ceil", "(", "offset_d", ")", ")", ")", "\n", "fmargin", "=", "min", "(", "0.4", ",", "(", "s_offset", "+", "1", ")", "/", "(", "offset_d", "+", "np", ".", "spacing", "(", "1", ")", ")", ")", "\n", "# fmargin = 0.0", "\n", "frange", "=", "np", ".", "linspace", "(", "fmargin", ",", "1.0", "-", "fmargin", ",", "num", "=", "num", ")", "\n", "if", "self", ".", "config", ".", "fixed_size", ":", "\n", "            ", "frange", "=", "[", "0.5", "]", "\n", "", "for", "f", "in", "frange", ":", "\n", "            ", "fij", "=", "np", ".", "round", "(", "joint1", "[", ":", "2", "]", "+", "f", "*", "offset", "-", "s_offset", ")", "+", "self", ".", "config", ".", "padding", "\n", "fminx", ",", "fminy", "=", "int", "(", "fij", "[", "0", "]", ")", ",", "int", "(", "fij", "[", "1", "]", ")", "\n", "fmaxx", ",", "fmaxy", "=", "fminx", "+", "s", ",", "fminy", "+", "s", "\n", "if", "fminx", "<", "0", "or", "fmaxx", ">", "self", ".", "intensities", ".", "shape", "[", "2", "]", "or", "fminy", "<", "0", "or", "fmaxy", ">", "self", ".", "intensities", ".", "shape", "[", "1", "]", ":", "\n", "                ", "continue", "\n", "", "fxy", "=", "fij", "-", "self", ".", "config", ".", "padding", "+", "s_offset", "\n", "\n", "# precise floating point offset of sinks", "\n", "joint1_offset", "=", "(", "joint1", "[", ":", "2", "]", "-", "fxy", ")", ".", "reshape", "(", "2", ",", "1", ",", "1", ")", "\n", "joint2_offset", "=", "(", "joint2", "[", ":", "2", "]", "-", "fxy", ")", ".", "reshape", "(", "2", ",", "1", ",", "1", ")", "\n", "sink1", "=", "sink", "+", "joint1_offset", "\n", "sink2", "=", "sink", "+", "joint2_offset", "\n", "\n", "# mask", "\n", "# perpendicular distance computation:", "\n", "# https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line", "\n", "# Coordinate systems for this computation is such that", "\n", "# joint1 is at (0, 0).", "\n", "sink_l", "=", "np", ".", "fabs", "(", "\n", "offset", "[", "1", "]", "*", "sink1", "[", "0", "]", "\n", "-", "offset", "[", "0", "]", "*", "sink1", "[", "1", "]", "\n", ")", "/", "(", "offset_d", "+", "0.01", ")", "\n", "mask", "=", "sink_l", "<", "self", ".", "fields_reg_l", "[", "paf_i", ",", "fminy", ":", "fmaxy", ",", "fminx", ":", "fmaxx", "]", "\n", "self", ".", "fields_reg_l", "[", "paf_i", ",", "fminy", ":", "fmaxy", ",", "fminx", ":", "fmaxx", "]", "[", "mask", "]", "=", "sink_l", "[", "mask", "]", "\n", "\n", "# update intensity", "\n", "self", ".", "intensities", "[", "paf_i", ",", "fminy", ":", "fmaxy", ",", "fminx", ":", "fmaxx", "]", "[", "mask", "]", "=", "1.0", "\n", "\n", "# update regressions", "\n", "patch1", "=", "self", ".", "fields_reg1", "[", "paf_i", ",", ":", ",", "fminy", ":", "fmaxy", ",", "fminx", ":", "fmaxx", "]", "\n", "patch1", "[", ":", "2", ",", "mask", "]", "=", "sink1", "[", ":", ",", "mask", "]", "\n", "patch1", "[", "2", ":", ",", "mask", "]", "=", "np", ".", "expand_dims", "(", "max_r1", ",", "1", ")", "*", "0.5", "\n", "patch2", "=", "self", ".", "fields_reg2", "[", "paf_i", ",", ":", ",", "fminy", ":", "fmaxy", ",", "fminx", ":", "fmaxx", "]", "\n", "patch2", "[", ":", "2", ",", "mask", "]", "=", "sink2", "[", ":", ",", "mask", "]", "\n", "patch2", "[", "2", ":", ",", "mask", "]", "=", "np", ".", "expand_dims", "(", "max_r2", ",", "1", ")", "*", "0.5", "\n", "\n", "# update scale", "\n", "assert", "np", ".", "isnan", "(", "scale1", ")", "or", "scale1", ">", "0.0", "\n", "self", ".", "fields_scale1", "[", "paf_i", ",", "fminy", ":", "fmaxy", ",", "fminx", ":", "fmaxx", "]", "[", "mask", "]", "=", "scale1", "\n", "assert", "np", ".", "isnan", "(", "scale2", ")", "or", "scale2", ">", "0.0", "\n", "self", ".", "fields_scale2", "[", "paf_i", ",", "fminy", ":", "fmaxy", ",", "fminx", ":", "fmaxx", "]", "[", "mask", "]", "=", "scale2", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.caf.CafGenerator.fields": [[228, 250], ["utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area"], ["", "", "def", "fields", "(", "self", ",", "valid_area", ")", ":", "\n", "        ", "p", "=", "self", ".", "config", ".", "padding", "\n", "intensities", "=", "self", ".", "intensities", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "fields_reg1", "=", "self", ".", "fields_reg1", "[", ":", ",", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "fields_reg2", "=", "self", ".", "fields_reg2", "[", ":", ",", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "fields_scale1", "=", "self", ".", "fields_scale1", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "fields_scale2", "=", "self", ".", "fields_scale2", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "\n", "mask_valid_area", "(", "intensities", ",", "valid_area", ")", "\n", "mask_valid_area", "(", "fields_reg1", "[", ":", ",", "0", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_reg1", "[", ":", ",", "1", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_reg2", "[", ":", ",", "0", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_reg2", "[", ":", ",", "1", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_scale1", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_scale2", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "from_numpy", "(", "intensities", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fields_reg1", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fields_reg2", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fields_scale1", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fields_scale2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.Cif.__call__": [[25, 27], ["cif.CifGenerator"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "CifGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.__init__": [[30, 40], ["utils.create_sink"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.create_sink"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Cif", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "intensities", "=", "None", "\n", "self", ".", "fields_reg", "=", "None", "\n", "self", ".", "fields_scale", "=", "None", "\n", "self", ".", "fields_reg_l", "=", "None", "\n", "\n", "self", ".", "sink", "=", "create_sink", "(", "config", ".", "side_length", ")", "\n", "self", ".", "s_offset", "=", "(", "config", ".", "side_length", "-", "1.0", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.__call__": [[41, 59], ["cif.CifGenerator.config.rescaler.keypoint_sets", "cif.CifGenerator.config.rescaler.bg_mask", "cif.CifGenerator.config.rescaler.valid_area", "LOG.debug", "cif.CifGenerator.init_fields", "cif.CifGenerator.fill", "cif.CifGenerator.fields", "cif.CifGenerator.config.visualizer.processed_image", "cif.CifGenerator.config.visualizer.targets"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.keypoint_sets", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.bg_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.init_fields", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.fields", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.processed_image", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet.targets"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "width_height_original", "=", "image", ".", "shape", "[", "2", ":", "0", ":", "-", "1", "]", "\n", "\n", "keypoint_sets", "=", "self", ".", "config", ".", "rescaler", ".", "keypoint_sets", "(", "anns", ")", "\n", "bg_mask", "=", "self", ".", "config", ".", "rescaler", ".", "bg_mask", "(", "anns", ",", "width_height_original", ",", "\n", "crowd_margin", "=", "(", "self", ".", "config", ".", "side_length", "-", "1", ")", "/", "2", ")", "\n", "valid_area", "=", "self", ".", "config", ".", "rescaler", ".", "valid_area", "(", "meta", ")", "\n", "LOG", ".", "debug", "(", "'valid area: %s\b, pif side length = %d'", ",", "valid_area", ",", "self", ".", "config", ".", "side_length", ")", "\n", "\n", "n_fields", "=", "keypoint_sets", ".", "shape", "[", "1", "]", "\n", "self", ".", "init_fields", "(", "n_fields", ",", "bg_mask", ")", "\n", "self", ".", "fill", "(", "keypoint_sets", ")", "\n", "fields", "=", "self", ".", "fields", "(", "valid_area", ")", "\n", "\n", "self", ".", "config", ".", "visualizer", ".", "processed_image", "(", "image", ")", "\n", "self", ".", "config", ".", "visualizer", ".", "targets", "(", "fields", ",", "annotation_dicts", "=", "anns", ")", "\n", "\n", "return", "{", "'cif'", ":", "fields", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.init_fields": [[60, 73], ["numpy.zeros", "numpy.full", "numpy.full", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "init_fields", "(", "self", ",", "n_fields", ",", "bg_mask", ")", ":", "\n", "        ", "field_w", "=", "bg_mask", ".", "shape", "[", "1", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "field_h", "=", "bg_mask", ".", "shape", "[", "0", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "self", ".", "intensities", "=", "np", ".", "zeros", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg", "=", "np", ".", "full", "(", "(", "n_fields", ",", "6", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg", "[", ":", ",", "2", ":", "]", "=", "np", ".", "inf", "\n", "self", ".", "fields_scale", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg_l", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "inf", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# bg_mask", "\n", "p", "=", "self", ".", "config", ".", "padding", "\n", "self", ".", "fields_reg_l", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", ":", ",", "bg_mask", "==", "0", "]", "=", "1.0", "\n", "self", ".", "intensities", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", ":", ",", "bg_mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.fill": [[74, 79], ["enumerate", "cif.CifGenerator.fill_keypoints", "enumerate"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.fill_keypoints"], ["", "def", "fill", "(", "self", ",", "keypoint_sets", ")", ":", "\n", "        ", "for", "kps_i", ",", "keypoints", "in", "enumerate", "(", "keypoint_sets", ")", ":", "\n", "            ", "self", ".", "fill_keypoints", "(", "\n", "keypoints", ",", "\n", "[", "kps", "for", "i", ",", "kps", "in", "enumerate", "(", "keypoint_sets", ")", "if", "i", "!=", "kps_i", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.quadrant": [[81, 87], ["numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "", "@", "staticmethod", "\n", "def", "quadrant", "(", "xys", ")", ":", "\n", "        ", "q", "=", "np", ".", "zeros", "(", "(", "xys", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "q", "[", "xys", "[", ":", ",", "0", "]", "<", "0.0", "]", "+=", "1", "\n", "q", "[", "xys", "[", ":", ",", "1", "]", "<", "0.0", "]", "+=", "2", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.max_r": [[88, 103], ["numpy.array", "numpy.asarray", "cls.quadrant", "range", "numpy.expand_dims", "numpy.min", "numpy.any", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.quadrant"], ["", "@", "classmethod", "\n", "def", "max_r", "(", "cls", ",", "xyv", ",", "other_xyv", ")", ":", "\n", "        ", "out", "=", "np", ".", "array", "(", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "not", "other_xyv", ":", "\n", "            ", "return", "out", "\n", "\n", "", "other_xyv", "=", "np", ".", "asarray", "(", "other_xyv", ")", "\n", "diffs", "=", "other_xyv", "[", ":", ",", ":", "2", "]", "-", "np", ".", "expand_dims", "(", "xyv", "[", ":", "2", "]", ",", "0", ")", "\n", "qs", "=", "cls", ".", "quadrant", "(", "diffs", ")", "\n", "for", "q", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "not", "np", ".", "any", "(", "qs", "==", "q", ")", ":", "\n", "                ", "continue", "\n", "", "out", "[", "q", "]", "=", "np", ".", "min", "(", "np", ".", "linalg", ".", "norm", "(", "diffs", "[", "qs", "==", "q", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.fill_keypoints": [[104, 118], ["cif.CifGenerator.config.rescaler.scale", "enumerate", "cif.CifGenerator.max_r", "numpy.min", "cif.CifGenerator.fill_coordinate", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.max_r", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.fill_coordinate"], ["", "def", "fill_keypoints", "(", "self", ",", "keypoints", ",", "other_keypoints", ")", ":", "\n", "        ", "scale", "=", "self", ".", "config", ".", "rescaler", ".", "scale", "(", "keypoints", ")", "\n", "for", "f", ",", "xyv", "in", "enumerate", "(", "keypoints", ")", ":", "\n", "            ", "if", "xyv", "[", "2", "]", "<=", "self", ".", "config", ".", "v_threshold", ":", "\n", "                ", "continue", "\n", "\n", "", "other_xyv", "=", "[", "other_kps", "[", "f", "]", "for", "other_kps", "in", "other_keypoints", "\n", "if", "other_kps", "[", "f", ",", "2", "]", ">", "self", ".", "config", ".", "v_threshold", "]", "\n", "max_r", "=", "self", ".", "max_r", "(", "xyv", ",", "other_xyv", ")", "\n", "\n", "joint_scale", "=", "scale", "if", "self", ".", "config", ".", "sigmas", "is", "None", "else", "scale", "*", "self", ".", "config", ".", "sigmas", "[", "f", "]", "\n", "joint_scale", "=", "np", ".", "min", "(", "[", "joint_scale", ",", "np", ".", "min", "(", "max_r", ")", "*", "0.25", "]", ")", "\n", "\n", "self", ".", "fill_coordinate", "(", "f", ",", "xyv", ",", "joint_scale", ",", "max_r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.fill_coordinate": [[119, 147], ["offset.reshape.reshape.reshape", "numpy.linalg.norm", "numpy.round().astype", "int", "int", "numpy.expand_dims", "numpy.isnan", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan"], ["", "", "def", "fill_coordinate", "(", "self", ",", "f", ",", "xyv", ",", "scale", ",", "max_r", ")", ":", "\n", "        ", "ij", "=", "np", ".", "round", "(", "xyv", "[", ":", "2", "]", "-", "self", ".", "s_offset", ")", ".", "astype", "(", "np", ".", "int", ")", "+", "self", ".", "config", ".", "padding", "\n", "minx", ",", "miny", "=", "int", "(", "ij", "[", "0", "]", ")", ",", "int", "(", "ij", "[", "1", "]", ")", "\n", "maxx", ",", "maxy", "=", "minx", "+", "self", ".", "config", ".", "side_length", ",", "miny", "+", "self", ".", "config", ".", "side_length", "\n", "if", "minx", "<", "0", "or", "maxx", ">", "self", ".", "intensities", ".", "shape", "[", "2", "]", "or", "miny", "<", "0", "or", "maxy", ">", "self", ".", "intensities", ".", "shape", "[", "1", "]", ":", "\n", "            ", "return", "\n", "\n", "", "offset", "=", "xyv", "[", ":", "2", "]", "-", "(", "ij", "+", "self", ".", "s_offset", "-", "self", ".", "config", ".", "padding", ")", "\n", "offset", "=", "offset", ".", "reshape", "(", "2", ",", "1", ",", "1", ")", "\n", "\n", "# mask", "\n", "sink_reg", "=", "self", ".", "sink", "+", "offset", "\n", "sink_l", "=", "np", ".", "linalg", ".", "norm", "(", "sink_reg", ",", "axis", "=", "0", ")", "\n", "mask", "=", "sink_l", "<", "self", ".", "fields_reg_l", "[", "f", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "\n", "self", ".", "fields_reg_l", "[", "f", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "[", "mask", "]", "=", "sink_l", "[", "mask", "]", "\n", "\n", "# update intensity", "\n", "self", ".", "intensities", "[", "f", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "[", "mask", "]", "=", "1.0", "\n", "\n", "# update regression", "\n", "patch", "=", "self", ".", "fields_reg", "[", "f", ",", ":", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "\n", "patch", "[", ":", "2", ",", "mask", "]", "=", "sink_reg", "[", ":", ",", "mask", "]", "\n", "patch", "[", "2", ":", ",", "mask", "]", "=", "np", ".", "expand_dims", "(", "max_r", ",", "1", ")", "*", "0.5", "\n", "\n", "# update scale", "\n", "assert", "np", ".", "isnan", "(", "scale", ")", "or", "0.0", "<", "scale", "\n", "self", ".", "fields_scale", "[", "f", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "[", "mask", "]", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cif.CifGenerator.fields": [[148, 163], ["utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area"], ["", "def", "fields", "(", "self", ",", "valid_area", ")", ":", "\n", "        ", "p", "=", "self", ".", "config", ".", "padding", "\n", "intensities", "=", "self", ".", "intensities", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "fields_reg", "=", "self", ".", "fields_reg", "[", ":", ",", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "fields_scale", "=", "self", ".", "fields_scale", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "\n", "mask_valid_area", "(", "intensities", ",", "valid_area", ")", "\n", "mask_valid_area", "(", "fields_reg", "[", ":", ",", "0", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_reg", "[", ":", ",", "1", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_scale", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "from_numpy", "(", "intensities", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fields_reg", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fields_scale", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.pcf.Pcf.__call__": [[17, 19], ["pcf.PcfGenerator"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "PcfGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.pcf.PcfGenerator.__init__": [[22, 31], ["torch.Module.__init__", "numpy.arange", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Pcf", ")", ":", "\n", "        ", "super", "(", "PcfGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sigma", "=", "config", ".", "sigma", "\n", "size", "=", "6", "*", "self", ".", "sigma", "+", "3", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", ",", "y0", "=", "3", "*", "self", ".", "sigma", "+", "1", ",", "3", "*", "self", ".", "sigma", "+", "1", "\n", "self", ".", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.pcf.PcfGenerator.__call__": [[32, 100], ["numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.ones", "show.flow_vis.flow_compute_color", "cv2.imwrite", "numpy.cumsum", "numpy.cumsum", "numpy.copy", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.where", "numpy.maximum", "numpy.mean", "numpy.mean", "int", "int", "int", "int", "int", "int", "max", "max", "max", "min", "max", "min", "numpy.zeros_like", "numpy.ones_like", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "min", "min"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_compute_color", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "height", ",", "width", "=", "image", ".", "shape", "[", "1", ":", "3", "]", "\n", "center", "=", "np", ".", "zeros", "(", "(", "1", ",", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "offset", "=", "np", ".", "zeros", "(", "(", "2", ",", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "weight", "=", "np", ".", "ones", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "y_coord", "=", "np", ".", "ones", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x_coord", "=", "np", ".", "ones", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_coord", "=", "np", ".", "cumsum", "(", "y_coord", ",", "axis", "=", "0", ")", "-", "1", "\n", "x_coord", "=", "np", ".", "cumsum", "(", "x_coord", ",", "axis", "=", "1", ")", "-", "1", "\n", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "'parsing'", "in", "ann", ":", "\n", "                ", "mask", "=", "np", ".", "copy", "(", "ann", "[", "'parsing'", "]", ")", "\n", "\n", "weight", "[", "mask", ">", "0", "]", "=", "1", "\n", "weight", "[", "mask", "==", "255", "]", "=", "0", "\n", "\n", "part_ids", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "part_id", "in", "part_ids", ":", "\n", "                    ", "if", "part_id", "==", "0", "or", "part_id", "==", "255", ":", "\n", "                        ", "continue", "\n", "", "mask_index", "=", "np", ".", "where", "(", "mask", "==", "part_id", ")", "\n", "center_y", ",", "center_x", "=", "np", ".", "mean", "(", "mask_index", "[", "0", "]", ")", ",", "np", ".", "mean", "(", "mask_index", "[", "1", "]", ")", "\n", "\n", "# generate center heatmap", "\n", "y", ",", "x", "=", "int", "(", "center_y", ")", ",", "int", "(", "center_x", ")", "\n", "# outside image boundary", "\n", "if", "x", "<", "0", "or", "y", "<", "0", "or", "x", ">=", "width", "or", "y", ">=", "height", ":", "\n", "                        ", "continue", "\n", "", "sigma", "=", "self", ".", "sigma", "\n", "# upper left", "\n", "ul", "=", "int", "(", "np", ".", "round", "(", "x", "-", "3", "*", "sigma", "-", "1", ")", ")", ",", "int", "(", "\n", "np", ".", "round", "(", "y", "-", "3", "*", "sigma", "-", "1", ")", ")", "\n", "# bottom right", "\n", "br", "=", "int", "(", "np", ".", "round", "(", "x", "+", "3", "*", "sigma", "+", "2", ")", ")", ",", "int", "(", "\n", "np", ".", "round", "(", "y", "+", "3", "*", "sigma", "+", "2", ")", ")", "\n", "\n", "c", ",", "d", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "width", ")", "-", "ul", "[", "0", "]", "\n", "a", ",", "b", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "height", ")", "-", "ul", "[", "1", "]", "\n", "\n", "cc", ",", "dd", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "width", ")", "\n", "aa", ",", "bb", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "height", ")", "\n", "center", "[", "0", ",", "aa", ":", "bb", ",", "cc", ":", "dd", "]", "=", "np", ".", "maximum", "(", "\n", "center", "[", "0", ",", "aa", ":", "bb", ",", "cc", ":", "dd", "]", ",", "self", ".", "g", "[", "a", ":", "b", ",", "c", ":", "d", "]", ")", "\n", "\n", "# generate offset (2, h, w) -> (y-dir, x-dir)", "\n", "offset_y_index", "=", "(", "np", ".", "zeros_like", "(", "mask_index", "[", "0", "]", ")", ",", "mask_index", "[", "0", "]", ",", "mask_index", "[", "1", "]", ")", "\n", "offset_x_index", "=", "(", "np", ".", "ones_like", "(", "mask_index", "[", "0", "]", ")", ",", "mask_index", "[", "0", "]", ",", "mask_index", "[", "1", "]", ")", "\n", "offset", "[", "offset_y_index", "]", "=", "center_y", "-", "y_coord", "[", "mask_index", "]", "\n", "offset", "[", "offset_x_index", "]", "=", "center_x", "-", "x_coord", "[", "mask_index", "]", "\n", "\n", "\n", "#image = image.cpu().numpy()", "\n", "#image = image.transpose((1, 2, 0))", "\n", "\n", "#center = center[0, ...]", "\n", "#cv2.imwrite('1111.jpg', center*255)", "\n", "\n", "#image = flow_compute_color(offset[1, ...], offset[0, ...])", "\n", "#cv2.imwrite('1111.jpg', image)", "\n", "\n", "", "", "", "return", "{", "'center'", ":", "(", "torch", ".", "from_numpy", "(", "center", ")", ",", "torch", ".", "from_numpy", "(", "offset", ")", ",", "\n", "torch", ".", "from_numpy", "(", "weight", ")", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDet.__call__": [[25, 27], ["cifdet.CifDetGenerator"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "CifDetGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.__init__": [[30, 40], ["utils.create_sink"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.create_sink"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "CifDet", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "intensities", "=", "None", "\n", "self", ".", "fields_reg", "=", "None", "\n", "self", ".", "fields_wh", "=", "None", "\n", "self", ".", "fields_reg_l", "=", "None", "\n", "\n", "self", ".", "sink", "=", "create_sink", "(", "config", ".", "side_length", ")", "\n", "self", ".", "s_offset", "=", "(", "config", ".", "side_length", "-", "1.0", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.__call__": [[41, 59], ["cifdet.CifDetGenerator.config.rescaler.detections", "cifdet.CifDetGenerator.config.rescaler.bg_mask", "cifdet.CifDetGenerator.config.rescaler.valid_area", "LOG.debug", "cifdet.CifDetGenerator.init_fields", "cifdet.CifDetGenerator.fill", "cifdet.CifDetGenerator.fields", "cifdet.CifDetGenerator.config.visualizer.processed_image", "cifdet.CifDetGenerator.config.visualizer.targets"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.detections", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.bg_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.init_fields", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.fields", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.processed_image", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet.targets"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "width_height_original", "=", "image", ".", "shape", "[", "2", ":", "0", ":", "-", "1", "]", "\n", "\n", "detections", "=", "self", ".", "config", ".", "rescaler", ".", "detections", "(", "anns", ")", "\n", "bg_mask", "=", "self", ".", "config", ".", "rescaler", ".", "bg_mask", "(", "anns", ",", "width_height_original", ",", "\n", "crowd_margin", "=", "(", "self", ".", "config", ".", "side_length", "-", "1", ")", "/", "2", ")", "\n", "valid_area", "=", "self", ".", "config", ".", "rescaler", ".", "valid_area", "(", "meta", ")", "\n", "LOG", ".", "debug", "(", "'valid area: %s\b, pif side length = %d'", ",", "valid_area", ",", "self", ".", "config", ".", "side_length", ")", "\n", "\n", "n_fields", "=", "self", ".", "config", ".", "n_categories", "\n", "self", ".", "init_fields", "(", "n_fields", ",", "bg_mask", ")", "\n", "self", ".", "fill", "(", "detections", ")", "\n", "fields", "=", "self", ".", "fields", "(", "valid_area", ")", "\n", "\n", "self", ".", "config", ".", "visualizer", ".", "processed_image", "(", "image", ")", "\n", "self", ".", "config", ".", "visualizer", ".", "targets", "(", "fields", ",", "detections", "=", "detections", ")", "\n", "\n", "return", "{", "'cifdet'", ":", "fields", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.init_fields": [[60, 72], ["numpy.zeros", "numpy.full", "numpy.full", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "init_fields", "(", "self", ",", "n_fields", ",", "bg_mask", ")", ":", "\n", "        ", "field_w", "=", "bg_mask", ".", "shape", "[", "-", "1", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "field_h", "=", "bg_mask", ".", "shape", "[", "-", "2", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "self", ".", "intensities", "=", "np", ".", "zeros", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg", "=", "np", ".", "full", "(", "(", "n_fields", ",", "2", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_wh", "=", "np", ".", "full", "(", "(", "n_fields", ",", "2", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg_l", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "inf", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# bg_mask", "\n", "p", "=", "self", ".", "config", ".", "padding", "\n", "self", ".", "fields_reg_l", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", "bg_mask", "==", "0", "]", "=", "1.0", "\n", "self", ".", "intensities", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", "bg_mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.fill": [[73, 78], ["cifdet.CifDetGenerator.fill_detection"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.fill_detection"], ["", "def", "fill", "(", "self", ",", "detections", ")", ":", "\n", "        ", "for", "category_id", ",", "bbox", "in", "detections", ":", "\n", "            ", "xy", "=", "bbox", "[", ":", "2", "]", "+", "0.5", "*", "bbox", "[", "2", ":", "]", "\n", "wh", "=", "bbox", "[", "2", ":", "]", "\n", "self", ".", "fill_detection", "(", "category_id", "-", "1", ",", "xy", ",", "wh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.fill_detection": [[79, 112], ["offset.reshape.reshape.reshape", "numpy.linalg.norm", "numpy.logical_and", "numpy.expand_dims", "numpy.round().astype", "int", "int", "numpy.round"], "methods", ["None"], ["", "", "def", "fill_detection", "(", "self", ",", "f", ",", "xy", ",", "wh", ")", ":", "\n", "        ", "ij", "=", "np", ".", "round", "(", "xy", "-", "self", ".", "s_offset", ")", ".", "astype", "(", "np", ".", "int", ")", "+", "self", ".", "config", ".", "padding", "\n", "minx", ",", "miny", "=", "int", "(", "ij", "[", "0", "]", ")", ",", "int", "(", "ij", "[", "1", "]", ")", "\n", "maxx", ",", "maxy", "=", "minx", "+", "self", ".", "config", ".", "side_length", ",", "miny", "+", "self", ".", "config", ".", "side_length", "\n", "if", "minx", "<", "0", "or", "maxx", ">", "self", ".", "intensities", ".", "shape", "[", "2", "]", "or", "miny", "<", "0", "or", "maxy", ">", "self", ".", "intensities", ".", "shape", "[", "1", "]", ":", "\n", "            ", "return", "\n", "\n", "", "offset", "=", "xy", "-", "(", "ij", "+", "self", ".", "s_offset", "-", "self", ".", "config", ".", "padding", ")", "\n", "offset", "=", "offset", ".", "reshape", "(", "2", ",", "1", ",", "1", ")", "\n", "\n", "# mask", "\n", "sink_reg", "=", "self", ".", "sink", "+", "offset", "\n", "sink_l", "=", "np", ".", "linalg", ".", "norm", "(", "sink_reg", ",", "axis", "=", "0", ")", "\n", "mask", "=", "sink_l", "<", "self", ".", "fields_reg_l", "[", "f", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "\n", "core_radius", "=", "(", "self", ".", "config", ".", "side_length", "-", "1", ")", "/", "2.0", "\n", "mask_fringe", "=", "np", ".", "logical_and", "(", "\n", "sink_l", ">", "core_radius", ",", "\n", "sink_l", "<", "self", ".", "fields_reg_l", "[", "f", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", ",", "\n", ")", "\n", "self", ".", "fields_reg_l", "[", "f", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "[", "mask", "]", "=", "sink_l", "[", "mask", "]", "\n", "\n", "# update intensity", "\n", "self", ".", "intensities", "[", "f", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "[", "mask", "]", "=", "1.0", "\n", "self", ".", "intensities", "[", "f", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "[", "mask_fringe", "]", "=", "np", ".", "nan", "\n", "\n", "# update regression", "\n", "self", ".", "fields_reg", "[", "f", ",", ":", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "[", ":", ",", "mask", "]", "=", "sink_reg", "[", ":", ",", "mask", "]", "\n", "\n", "# update wh", "\n", "assert", "wh", "[", "0", "]", ">", "0.0", "\n", "assert", "wh", "[", "1", "]", ">", "0.0", "\n", "self", ".", "fields_wh", "[", "f", ",", ":", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", "[", ":", ",", "mask", "]", "=", "np", ".", "expand_dims", "(", "wh", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cifdet.CifDetGenerator.fields": [[113, 129], ["utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "utils.mask_valid_area", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area"], ["", "def", "fields", "(", "self", ",", "valid_area", ")", ":", "\n", "        ", "p", "=", "self", ".", "config", ".", "padding", "\n", "intensities", "=", "self", ".", "intensities", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "fields_reg", "=", "self", ".", "fields_reg", "[", ":", ",", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "fields_wh", "=", "self", ".", "fields_wh", "[", ":", ",", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "\n", "\n", "mask_valid_area", "(", "intensities", ",", "valid_area", ")", "\n", "mask_valid_area", "(", "fields_reg", "[", ":", ",", "0", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_reg", "[", ":", ",", "1", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_wh", "[", ":", ",", "0", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "mask_valid_area", "(", "fields_wh", "[", ":", ",", "1", "]", ",", "valid_area", ",", "fill_value", "=", "np", ".", "nan", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "from_numpy", "(", "intensities", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fields_reg", ")", ",", "\n", "torch", ".", "from_numpy", "(", "fields_wh", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.factory.cli": [[16, 28], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["def", "cli", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'CIF encoder'", ")", "\n", "group", ".", "add_argument", "(", "'--cif-side-length'", ",", "default", "=", "Cif", ".", "side_length", ",", "type", "=", "int", ",", "\n", "help", "=", "'side length of the CIF field'", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'CAF encoder'", ")", "\n", "group", ".", "add_argument", "(", "'--caf-min-size'", ",", "default", "=", "Caf", ".", "min_size", ",", "type", "=", "int", ",", "\n", "help", "=", "'min side length of the CAF field'", ")", "\n", "group", ".", "add_argument", "(", "'--caf-fixed-size'", ",", "default", "=", "Caf", ".", "fixed_size", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'fixed caf size'", ")", "\n", "group", ".", "add_argument", "(", "'--caf-aspect-ratio'", ",", "default", "=", "Caf", ".", "aspect_ratio", ",", "type", "=", "float", ",", "\n", "help", "=", "'CAF width relative to its length'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.factory.configure": [[30, 38], ["None"], "function", ["None"], ["", "def", "configure", "(", "args", ")", ":", "\n", "# configure CIF", "\n", "    ", "Cif", ".", "side_length", "=", "args", ".", "cif_side_length", "\n", "\n", "# configure CAF", "\n", "Caf", ".", "min_size", "=", "args", ".", "caf_min_size", "\n", "Caf", ".", "fixed_size", "=", "args", ".", "caf_fixed_size", "\n", "Caf", ".", "aspect_ratio", "=", "args", ".", "caf_aspect_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.factory.factory": [[40, 42], ["factory.factory_head"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.factory.factory_head"], ["", "def", "factory", "(", "headnets", ",", "basenet_stride", ")", ":", "\n", "    ", "return", "[", "factory_head", "(", "head_net", ",", "basenet_stride", ")", "for", "head_net", "in", "headnets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.factory.factory_head": [[44, 100], ["head_net.stride", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "Exception", "len", "LOG.info", "visualizer.CifDet", "cifdet.CifDet", "LOG.info", "visualizer.Cif", "cif.Cif", "len", "LOG.info", "visualizer.Caf", "caf.Caf", "LOG.info", "pdf.Pdf", "LOG.info", "offset.Offset", "LOG.info", "cascade.Cascade", "LOG.info", "pcf.Pcf", "annrescaler.AnnRescalerDet", "annrescaler.AnnRescaler", "annrescaler.AnnRescaler", "len", "annrescaler.AnnRescaler", "annrescaler.AnnRescaler", "len", "len"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.stride", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "factory_head", "(", "head_net", ":", "network", ".", "heads", ".", "CompositeField", ",", "basenet_stride", ")", ":", "\n", "    ", "meta", "=", "head_net", ".", "meta", "\n", "stride", "=", "head_net", ".", "stride", "(", "basenet_stride", ")", "\n", "\n", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "DetectionMeta", ")", ":", "\n", "        ", "n_categories", "=", "len", "(", "meta", ".", "categories", ")", "\n", "LOG", ".", "info", "(", "'selected encoder CIFDET for %s with %d categories'", ",", "meta", ".", "name", ",", "n_categories", ")", "\n", "vis", "=", "visualizer", ".", "CifDet", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "categories", "=", "meta", ".", "categories", ")", "\n", "return", "CifDet", "(", "n_categories", ",", "\n", "AnnRescalerDet", "(", "stride", ",", "n_categories", ")", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "IntensityMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder CIF for %s'", ",", "meta", ".", "name", ")", "\n", "vis", "=", "visualizer", ".", "Cif", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "keypoints", "=", "meta", ".", "keypoints", ",", "skeleton", "=", "meta", ".", "draw_skeleton", ")", "\n", "return", "Cif", "(", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ",", "\n", "sigmas", "=", "meta", ".", "sigmas", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "AssociationMeta", ")", ":", "\n", "        ", "n_keypoints", "=", "len", "(", "meta", ".", "keypoints", ")", "\n", "LOG", ".", "info", "(", "'selected encoder CAF for %s'", ",", "meta", ".", "name", ")", "\n", "vis", "=", "visualizer", ".", "Caf", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "keypoints", "=", "meta", ".", "keypoints", ",", "skeleton", "=", "meta", ".", "skeleton", ")", "\n", "return", "Caf", "(", "AnnRescaler", "(", "stride", ",", "n_keypoints", ",", "meta", ".", "pose", ")", ",", "\n", "headname", "=", "meta", ".", "name", ",", "\n", "skeleton", "=", "meta", ".", "skeleton", ",", "\n", "sigmas", "=", "meta", ".", "sigmas", ",", "\n", "sparse_skeleton", "=", "meta", ".", "sparse_skeleton", ",", "\n", "only_in_field_of_view", "=", "meta", ".", "only_in_field_of_view", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "ParsingMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder PDF for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Pdf", "(", "n_fields", "=", "meta", ".", "n_fields", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "OffsetMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder Offset for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Offset", "(", "\n", "rescaler", "=", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ",", "\n", "n_fields", "=", "meta", ".", "n_fields", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "CascadeMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder cascade for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Cascade", "(", "rescaler", "=", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "CenterMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder center for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Pcf", "(", ")", "\n", "\n", "", "raise", "Exception", "(", "'unknown head to create an encoder: {}'", ".", "format", "(", "meta", ".", "name", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cascade.Cascade.__call__": [[19, 21], ["cascade.CascadeGenerator"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "CascadeGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cascade.CascadeGenerator.__init__": [[30, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Cascade", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "n_fields", "=", "config", ".", "n_fields", "\n", "self", ".", "offset_n_fields", "=", "config", ".", "offset_n_fields", "\n", "self", ".", "stride", "=", "config", ".", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cascade.CascadeGenerator.__call__": [[36, 129], ["numpy.zeros", "numpy.zeros", "numpy.where", "numpy.zeros", "numpy.zeros", "numpy.zeros", "cascade.CascadeGenerator.config.rescaler.keypoint_sets", "cascade.CascadeGenerator.config.rescaler.segmentation", "len", "range", "numpy.where", "enumerate", "numpy.array", "cascade.nearest_neightbor_search", "range", "numpy.copy", "numpy.where", "numpy.copy", "numpy.where", "numpy.dstack", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.where", "numpy.where", "len", "len", "y_index.ravel", "x_index.ravel", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.keypoint_sets", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.segmentation", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.offset.nearest_neightbor_search"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", "1", ":", "3", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "edge_mask", "=", "np", ".", "zeros", "(", "(", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "flag", "=", "0.", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "'parsing'", "in", "ann", ":", "\n", "                ", "flag", "=", "1.", "\n", "single_mask", "=", "np", ".", "copy", "(", "ann", "[", "'parsing'", "]", ")", "\n", "single_mask_bool", "=", "np", ".", "where", "(", "single_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "mask", "[", "single_mask_bool", ">", "0", "]", "=", "single_mask", "[", "single_mask_bool", ">", "0", "]", "\n", "\n", "if", "'segment_mask'", "in", "ann", ":", "\n", "                    ", "ignore_indexs", "=", "np", ".", "where", "(", "(", "ann", "[", "'segment_mask'", "]", "-", "single_mask_bool", ")", ">", "0", ")", "\n", "mask", "[", "ignore_indexs", "[", "0", "]", ",", "ignore_indexs", "[", "1", "]", "]", "=", "255", "# ignore", "\n", "", "", "elif", "'segment_mask'", "in", "ann", ":", "\n", "                ", "ignore_indexs", "=", "np", ".", "where", "(", "ann", "[", "'segment_mask'", "]", ">", "0", ")", "\n", "mask", "[", "ignore_indexs", "[", "0", "]", ",", "ignore_indexs", "[", "1", "]", "]", "=", "255", "# ignore", "\n", "\n", "", "if", "'edge'", "in", "ann", ":", "\n", "                ", "single_mask", "=", "np", ".", "copy", "(", "ann", "[", "'edge'", "]", ")", "\n", "single_mask", "[", "single_mask", "==", "255", "]", "=", "0", "\n", "single_mask_bool", "=", "np", ".", "where", "(", "single_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "edge_mask", "[", "0", ",", "single_mask_bool", ">", "0", "]", "+=", "single_mask", "[", "single_mask_bool", ">", "0", "]", "\n", "\n", "", "", "edge_mask", "=", "np", ".", "where", "(", "edge_mask", ">", "0", ",", "1", ",", "0", ")", "\n", "\n", "### generate offset", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", "1", ":", "3", "]", "\n", "h", ",", "w", "=", "h", "//", "self", ".", "stride", "+", "1", ",", "w", "//", "self", ".", "stride", "+", "1", "\n", "\n", "offset", "=", "np", ".", "zeros", "(", "(", "5", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "weights", "=", "np", ".", "zeros", "(", "(", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "instance", "=", "np", ".", "zeros", "(", "(", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "keypoints", "=", "self", ".", "config", ".", "rescaler", ".", "keypoint_sets", "(", "anns", ")", "\n", "segmentations", "=", "self", ".", "config", ".", "rescaler", ".", "segmentation", "(", "anns", ")", "\n", "\n", "num", "=", "len", "(", "segmentations", ")", "\n", "for", "iid", "in", "range", "(", "num", ")", ":", "\n", "            ", "keypoint", "=", "keypoints", "[", "iid", ",", "...", "]", "\n", "segmentation", "=", "segmentations", "[", "iid", "]", "\n", "if", "segmentation", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "segmentation", "[", "segmentation", "==", "255", "]", "=", "0", "\n", "mask_index", "=", "np", ".", "where", "(", "segmentation", ">", "0", ")", "\n", "y_index", ",", "x_index", "=", "mask_index", "[", "0", "]", ",", "mask_index", "[", "1", "]", "\n", "\n", "if", "len", "(", "y_index", ")", "==", "0", "or", "len", "(", "x_index", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "weights", "[", "0", ",", "y_index", ",", "x_index", "]", "=", "1", "\n", "instance", "[", "0", ",", "y_index", ",", "x_index", "]", "=", "iid", "\n", "\n", "query_points", "=", "np", ".", "dstack", "(", "[", "y_index", ".", "ravel", "(", ")", ",", "x_index", ".", "ravel", "(", ")", "]", ")", "[", "0", "]", "\n", "\n", "key_points", "=", "[", "]", "\n", "for", "ii", ",", "x", "in", "enumerate", "(", "keypoint", ")", ":", "\n", "                ", "if", "x", "[", "0", "]", ">", "0", "and", "x", "[", "1", "]", ">", "0", "and", "x", "[", "2", "]", ">", "0", ":", "\n", "                    ", "if", "ii", "+", "1", "not", "in", "COCO_IGNORE_INDEX", ":", "\n", "                        ", "key_points", ".", "append", "(", "[", "x", "[", "1", "]", ",", "x", "[", "0", "]", "]", ")", "\n", "", "", "", "if", "len", "(", "key_points", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "key_points", "=", "np", ".", "array", "(", "key_points", ")", "\n", "#key_points = np.array(", "\n", "#    [[x[1], x[0]] for x in keypoints if x[-1] > 0 and x[0] > 0 and x[1] > 0])", "\n", "\n", "indexes", "=", "nearest_neightbor_search", "(", "query_points", ",", "key_points", ")", "\n", "\n", "for", "ii", "in", "range", "(", "len", "(", "key_points", ")", ")", ":", "\n", "                ", "points", "=", "query_points", "[", "indexes", "==", "ii", "]", "\n", "yy", ",", "xx", "=", "key_points", "[", "ii", "]", "[", "0", "]", ",", "key_points", "[", "ii", "]", "[", "1", "]", "\n", "x_offset", "=", "xx", "-", "points", "[", ":", ",", "1", "]", "\n", "y_offset", "=", "yy", "-", "points", "[", ":", ",", "0", "]", "\n", "\n", "# offset", "\n", "offset", "[", "0", ",", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "]", "=", "y_offset", "\n", "offset", "[", "1", ",", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "]", "=", "x_offset", "\n", "\n", "# target", "\n", "offset", "[", "2", ",", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "]", "=", "yy", "\n", "offset", "[", "3", ",", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "]", "=", "xx", "\n", "\n", "# label", "\n", "offset", "[", "4", ",", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "]", "=", "ii", "+", "1", "\n", "\n", "", "", "return", "{", "'semantic'", ":", "(", "torch", ".", "from_numpy", "(", "mask", ")", ",", "\n", "torch", ".", "from_numpy", "(", "edge_mask", ")", ",", "flag", ")", ",", "\n", "'offset'", ":", "(", "torch", ".", "from_numpy", "(", "offset", ")", ",", "\n", "torch", ".", "from_numpy", "(", "weights", ")", ",", "\n", "torch", ".", "from_numpy", "(", "instance", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cascade.nearest_neightbor_search": [[23, 27], ["scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query"], "function", ["None"], ["", "", "def", "nearest_neightbor_search", "(", "query_points", ",", "key_points", ")", ":", "\n", "    ", "mytree", "=", "scipy", ".", "spatial", ".", "cKDTree", "(", "key_points", ")", "\n", "_", ",", "indexes", "=", "mytree", ".", "query", "(", "query_points", ")", "\n", "return", "indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.cascade.create_label_colormap": [[131, 162], ["numpy.zeros"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "", "def", "create_label_colormap", "(", ")", ":", "\n", "    ", "\"\"\"\n    Creates a label colormap used in CITYSCAPES segmentation benchmark.\n    Returns:\n        A colormap for visualizing segmentation results.\n    \"\"\"", "\n", "\n", "colormap", "=", "np", ".", "zeros", "(", "(", "256", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "colormap", "[", "0", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "colormap", "[", "1", "]", "=", "[", "128", ",", "0", ",", "0", "]", "\n", "colormap", "[", "2", "]", "=", "[", "255", ",", "0", ",", "0", "]", "\n", "colormap", "[", "3", "]", "=", "[", "0", ",", "85", ",", "0", "]", "\n", "colormap", "[", "4", "]", "=", "[", "170", ",", "0", ",", "51", "]", "\n", "colormap", "[", "5", "]", "=", "[", "255", ",", "85", ",", "0", "]", "\n", "colormap", "[", "6", "]", "=", "[", "0", ",", "0", ",", "85", "]", "\n", "colormap", "[", "7", "]", "=", "[", "0", ",", "119", ",", "221", "]", "\n", "colormap", "[", "8", "]", "=", "[", "85", ",", "85", ",", "0", "]", "\n", "colormap", "[", "9", "]", "=", "[", "0", ",", "85", ",", "85", "]", "\n", "colormap", "[", "10", "]", "=", "[", "85", ",", "51", ",", "0", "]", "\n", "colormap", "[", "11", "]", "=", "[", "52", ",", "86", ",", "128", "]", "\n", "colormap", "[", "12", "]", "=", "[", "0", ",", "128", ",", "0", "]", "\n", "colormap", "[", "13", "]", "=", "[", "0", ",", "0", ",", "255", "]", "\n", "colormap", "[", "14", "]", "=", "[", "51", ",", "170", ",", "221", "]", "\n", "colormap", "[", "15", "]", "=", "[", "0", ",", "255", ",", "255", "]", "\n", "colormap", "[", "16", "]", "=", "[", "85", ",", "255", ",", "170", "]", "\n", "colormap", "[", "17", "]", "=", "[", "170", ",", "255", ",", "85", "]", "\n", "colormap", "[", "18", "]", "=", "[", "255", ",", "255", ",", "0", "]", "\n", "colormap", "[", "19", "]", "=", "[", "255", ",", "170", ",", "0", "]", "\n", "\n", "return", "colormap", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.offset.Offset.__call__": [[19, 21], ["offset.OffsetGenerator"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "OffsetGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.offset.OffsetGenerator.__init__": [[53, 56], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Offset", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "n_fields", "=", "config", ".", "n_fields", "\n", "self", ".", "stride", "=", "config", ".", "stride", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.offset.OffsetGenerator.__call__": [[57, 59], ["offset.OffsetGenerator._generator"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.offset.OffsetGenerator._generator"], ["\n", "", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "self", ".", "_generator", "(", "image", ",", "anns", ",", "meta", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.offset.OffsetGenerator._generator": [[60, 117], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "ann[].copy", "ann[].copy", "numpy.where", "enumerate", "numpy.array", "offset.nearest_neightbor_search", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.dstack", "len", "len", "len", "len", "y_index.ravel", "x_index.ravel", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.offset.nearest_neightbor_search"], ["\n", "", "def", "_generator", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", "1", ":", "3", "]", "\n", "h", ",", "w", "=", "h", "//", "self", ".", "stride", "+", "1", ",", "w", "//", "self", ".", "stride", "+", "1", "\n", "\n", "offset", "=", "np", ".", "zeros", "(", "(", "5", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "weights", "=", "np", ".", "zeros", "(", "(", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "instance", "=", "np", ".", "zeros", "(", "(", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "keypoints", "=", "self", ".", "config", ".", "rescaler", ".", "keypoint_sets", "(", "anns", ")", "\n", "segmentations", "=", "self", ".", "config", ".", "rescaler", ".", "segmentation", "(", "anns", ")", "\n", "\n", "num", "=", "len", "(", "segmentations", ")", "\n", "for", "iid", "in", "range", "(", "num", ")", ":", "\n", "            ", "keypoint", "=", "keypoints", "[", "iid", ",", "...", "]", "\n", "segmentation", "=", "segmentations", "[", "iid", "]", "\n", "if", "segmentation", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "segmentation", "[", "segmentation", "==", "255", "]", "=", "0", "\n", "mask_index", "=", "np", ".", "where", "(", "segmentation", ">", "0", ")", "\n", "y_index", ",", "x_index", "=", "mask_index", "[", "0", "]", ",", "mask_index", "[", "1", "]", "\n", "\n", "if", "len", "(", "y_index", ")", "==", "0", "or", "len", "(", "x_index", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "weights", "[", "0", ",", "y_index", ",", "x_index", "]", "=", "1", "\n", "instance", "[", "0", ",", "y_index", ",", "x_index", "]", "=", "iid", "\n", "\n", "query_points", "=", "np", ".", "dstack", "(", "[", "y_index", ".", "ravel", "(", ")", ",", "x_index", ".", "ravel", "(", ")", "]", ")", "[", "0", "]", "\n", "\n", "key_points", "=", "[", "]", "\n", "for", "ii", ",", "x", "in", "enumerate", "(", "keypoint", ")", ":", "\n", "                ", "if", "x", "[", "0", "]", ">", "0", "and", "x", "[", "1", "]", ">", "0", "and", "x", "[", "2", "]", ">", "0", ":", "\n", "                    ", "if", "ii", "+", "1", "not", "in", "COCO_IGNORE_INDEX", ":", "\n", "                        ", "key_points", ".", "append", "(", "[", "x", "[", "1", "]", ",", "x", "[", "0", "]", "]", ")", "\n", "", "", "", "if", "len", "(", "key_points", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "key_points", "=", "np", ".", "array", "(", "key_points", ")", "\n", "#key_points = np.array(", "\n", "#    [[x[1], x[0]] for x in keypoints if x[-1] > 0 and x[0] > 0 and x[1] > 0])", "\n", "\n", "indexes", "=", "nearest_neightbor_search", "(", "query_points", ",", "key_points", ")", "\n", "\n", "for", "ii", "in", "range", "(", "len", "(", "key_points", ")", ")", ":", "\n", "                ", "points", "=", "query_points", "[", "indexes", "==", "ii", "]", "\n", "yy", ",", "xx", "=", "key_points", "[", "ii", "]", "[", "0", "]", ",", "key_points", "[", "ii", "]", "[", "1", "]", "\n", "x_offset", "=", "xx", "-", "points", "[", ":", ",", "1", "]", "\n", "y_offset", "=", "yy", "-", "points", "[", ":", ",", "0", "]", "\n", "\n", "# offset", "\n", "offset", "[", "0", ",", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "]", "=", "y_offset", "\n", "offset", "[", "1", ",", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "]", "=", "x_offset", "\n", "\n", "# target", "\n", "offset", "[", "2", ",", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "]", "=", "yy", "\n", "offset", "[", "3", ",", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "]", "=", "xx", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.offset.nearest_neightbor_search": [[23, 27], ["scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query"], "function", ["None"], ["", "", "def", "nearest_neightbor_search", "(", "query_points", ",", "key_points", ")", ":", "\n", "    ", "mytree", "=", "scipy", ".", "spatial", ".", "cKDTree", "(", "key_points", ")", "\n", "_", ",", "indexes", "=", "mytree", ".", "query", "(", "query_points", ")", "\n", "return", "indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.offset.nearest_neighbor_search_geodesic_distance": [[29, 50], ["range", "numpy.zeros", "range", "numpy.argmin", "numpy.ones_like().astype", "numpy.ma.masked_array", "skfmm.distance", "int", "int", "mask.astype", "numpy.ones_like", "int", "int"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "nearest_neighbor_search_geodesic_distance", "(", "mask", ",", "query_points", ",", "key_points", ")", ":", "\n", "    ", "n_kp", "=", "key_points", ".", "shape", "[", "0", "]", "\n", "\n", "for", "ii", "in", "range", "(", "n_kp", ")", ":", "\n", "        ", "mask", "[", "int", "(", "key_points", "[", "ii", "]", "[", "0", "]", ")", ",", "int", "(", "key_points", "[", "ii", "]", "[", "1", "]", ")", "]", "=", "1", "\n", "\n", "", "all_dt", "=", "np", ".", "zeros", "(", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "n_kp", ")", ")", "\n", "for", "ii", "in", "range", "(", "n_kp", ")", ":", "\n", "        ", "y", ",", "x", "=", "int", "(", "key_points", "[", "ii", "]", "[", "0", "]", ")", ",", "int", "(", "key_points", "[", "ii", "]", "[", "1", "]", ")", "\n", "r_mask", "=", "~", "mask", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "m", "=", "np", ".", "ones_like", "(", "mask", ")", ".", "astype", "(", "float", ")", "\n", "m", "[", "y", ",", "x", "]", "=", "0", "\n", "m", "=", "np", ".", "ma", ".", "masked_array", "(", "m", ",", "r_mask", ")", "\n", "dt", "=", "skfmm", ".", "distance", "(", "m", ")", "\n", "\n", "all_dt", "[", ":", ",", ":", ",", "ii", "]", "=", "dt", "\n", "\n", "", "indexes", "=", "np", ".", "argmin", "(", "all_dt", ",", "axis", "=", "2", ")", "\n", "indexes", "=", "indexes", "[", "query_points", "[", ":", ",", "0", "]", ",", "query_points", "[", ":", ",", "1", "]", "]", "\n", "return", "indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.__init__": [[9, 26], ["numpy.array", "numpy.copy", "numpy.einsum", "numpy.cos", "numpy.sin", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.deg2rad", "numpy.deg2rad", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stride", ",", "n_keypoints", ",", "pose", ")", ":", "\n", "        ", "self", ".", "stride", "=", "stride", "\n", "self", ".", "n_keypoints", "=", "n_keypoints", "\n", "self", ".", "pose", "=", "pose", "\n", "self", ".", "pose_total_area", "=", "(", "\n", "(", "np", ".", "max", "(", "self", ".", "pose", "[", ":", ",", "0", "]", ")", "-", "np", ".", "min", "(", "self", ".", "pose", "[", ":", ",", "0", "]", ")", ")", "*", "\n", "(", "np", ".", "max", "(", "self", ".", "pose", "[", ":", ",", "1", "]", ")", "-", "np", ".", "min", "(", "self", ".", "pose", "[", ":", ",", "1", "]", ")", ")", "\n", ")", "\n", "\n", "# rotate the davinci pose by 45 degrees", "\n", "c", ",", "s", "=", "np", ".", "cos", "(", "np", ".", "deg2rad", "(", "45", ")", ")", ",", "np", ".", "sin", "(", "np", ".", "deg2rad", "(", "45", ")", ")", "\n", "rotate", "=", "np", ".", "array", "(", "(", "(", "c", ",", "-", "s", ")", ",", "(", "s", ",", "c", ")", ")", ")", "\n", "self", ".", "pose_45", "=", "np", ".", "copy", "(", "pose", ")", "\n", "self", ".", "pose_45", "[", ":", ",", ":", "2", "]", "=", "np", ".", "einsum", "(", "'ij,kj->ki'", ",", "rotate", ",", "self", ".", "pose_45", "[", ":", ",", ":", "2", "]", ")", "\n", "self", ".", "pose_45_total_area", "=", "(", "\n", "(", "np", ".", "max", "(", "self", ".", "pose_45", "[", ":", ",", "0", "]", ")", "-", "np", ".", "min", "(", "self", ".", "pose_45", "[", ":", ",", "0", "]", ")", ")", "*", "\n", "(", "np", ".", "max", "(", "self", ".", "pose_45", "[", ":", ",", "1", "]", ")", "-", "np", ".", "min", "(", "self", ".", "pose_45", "[", ":", ",", "1", "]", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.valid_area": [[28, 37], ["None"], "methods", ["None"], ["", "def", "valid_area", "(", "self", ",", "meta", ")", ":", "\n", "        ", "if", "'valid_area'", "not", "in", "meta", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "(", "\n", "meta", "[", "'valid_area'", "]", "[", "0", "]", "/", "self", ".", "stride", ",", "\n", "meta", "[", "'valid_area'", "]", "[", "1", "]", "/", "self", ".", "stride", ",", "\n", "meta", "[", "'valid_area'", "]", "[", "2", "]", "/", "self", ".", "stride", ",", "\n", "meta", "[", "'valid_area'", "]", "[", "3", "]", "/", "self", ".", "stride", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.keypoint_sets": [[39, 49], ["numpy.stack", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "keypoint_sets", "(", "self", ",", "anns", ")", ":", "\n", "        ", "\"\"\"Ignore annotations of crowds.\"\"\"", "\n", "#keypoint_sets = [ann['keypoints'] for ann in anns if not ann['iscrowd']]", "\n", "keypoint_sets", "=", "[", "ann", "[", "'keypoints'", "]", "for", "ann", "in", "anns", "]", "\n", "if", "not", "keypoint_sets", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "0", ",", "self", ".", "n_keypoints", ",", "3", ")", ")", "\n", "\n", "", "keypoint_sets", "=", "np", ".", "stack", "(", "keypoint_sets", ")", "\n", "keypoint_sets", "[", ":", ",", ":", ",", ":", "2", "]", "/=", "self", ".", "stride", "\n", "return", "keypoint_sets", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.segmentation": [[50, 58], ["masks.append", "masks.append"], "methods", ["None"], ["", "def", "segmentation", "(", "self", ",", "anns", ")", ":", "\n", "        ", "masks", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "'parsing'", "in", "ann", ":", "\n", "                ", "masks", ".", "append", "(", "ann", "[", "'parsing'", "]", "[", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ")", "\n", "", "else", ":", "\n", "                ", "masks", ".", "append", "(", "None", ")", "\n", "", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.bg_mask": [[59, 95], ["numpy.ones", "ann[].copy", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.any", "int", "int", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["", "def", "bg_mask", "(", "self", ",", "anns", ",", "width_height", ",", "*", ",", "crowd_margin", ")", ":", "\n", "        ", "\"\"\"Create background mask taking crowd annotations into account.\"\"\"", "\n", "mask", "=", "np", ".", "ones", "(", "(", "\n", "(", "width_height", "[", "1", "]", "-", "1", ")", "//", "self", ".", "stride", "+", "1", ",", "\n", "(", "width_height", "[", "0", "]", "-", "1", ")", "//", "self", ".", "stride", "+", "1", ",", "\n", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "not", "ann", "[", "'iscrowd'", "]", ":", "\n", "                ", "valid_keypoints", "=", "'keypoints'", "in", "ann", "and", "np", ".", "any", "(", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ")", "\n", "if", "valid_keypoints", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "if", "'mask'", "not", "in", "ann", ":", "\n", "                ", "bb", "=", "ann", "[", "'bbox'", "]", ".", "copy", "(", ")", "\n", "bb", "/=", "self", ".", "stride", "\n", "bb", "[", "2", ":", "]", "+=", "bb", "[", ":", "2", "]", "# convert width and height to x2 and y2", "\n", "\n", "# left top", "\n", "left", "=", "np", ".", "clip", "(", "int", "(", "bb", "[", "0", "]", "-", "crowd_margin", ")", ",", "0", ",", "mask", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "top", "=", "np", ".", "clip", "(", "int", "(", "bb", "[", "1", "]", "-", "crowd_margin", ")", ",", "0", ",", "mask", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "# right bottom", "\n", "# ceil: to round up", "\n", "# +1: because mask upper limit is exclusive", "\n", "right", "=", "np", ".", "clip", "(", "int", "(", "np", ".", "ceil", "(", "bb", "[", "2", "]", "+", "crowd_margin", ")", ")", "+", "1", ",", "\n", "left", "+", "1", ",", "mask", ".", "shape", "[", "1", "]", ")", "\n", "bottom", "=", "np", ".", "clip", "(", "int", "(", "np", ".", "ceil", "(", "bb", "[", "3", "]", "+", "crowd_margin", ")", ")", "+", "1", ",", "\n", "top", "+", "1", ",", "mask", ".", "shape", "[", "0", "]", ")", "\n", "\n", "mask", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "=", "0", "\n", "continue", "\n", "\n", "", "assert", "False", "# because code below is not tested", "\n", "mask", "[", "ann", "[", "'mask'", "]", "[", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", "]", "=", "0", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale": [[96, 129], ["numpy.sqrt", "numpy.isinf", "min", "LOG.debug", "numpy.sum", "min", "numpy.sqrt", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "scale", "(", "self", ",", "keypoints", ")", ":", "\n", "        ", "visible", "=", "keypoints", "[", ":", ",", "2", "]", ">", "0", "\n", "if", "np", ".", "sum", "(", "visible", ")", "<", "3", ":", "\n", "            ", "return", "np", ".", "nan", "\n", "\n", "", "area", "=", "(", "\n", "(", "np", ".", "max", "(", "keypoints", "[", "visible", ",", "0", "]", ")", "-", "np", ".", "min", "(", "keypoints", "[", "visible", ",", "0", "]", ")", ")", "*", "\n", "(", "np", ".", "max", "(", "keypoints", "[", "visible", ",", "1", "]", ")", "-", "np", ".", "min", "(", "keypoints", "[", "visible", ",", "1", "]", ")", ")", "\n", ")", "\n", "area_ref", "=", "(", "\n", "(", "np", ".", "max", "(", "self", ".", "pose", "[", "visible", ",", "0", "]", ")", "-", "np", ".", "min", "(", "self", ".", "pose", "[", "visible", ",", "0", "]", ")", ")", "*", "\n", "(", "np", ".", "max", "(", "self", ".", "pose", "[", "visible", ",", "1", "]", ")", "-", "np", ".", "min", "(", "self", ".", "pose", "[", "visible", ",", "1", "]", ")", ")", "\n", ")", "\n", "area_ref_45", "=", "(", "\n", "(", "np", ".", "max", "(", "self", ".", "pose_45", "[", "visible", ",", "0", "]", ")", "-", "np", ".", "min", "(", "self", ".", "pose_45", "[", "visible", ",", "0", "]", ")", ")", "*", "\n", "(", "np", ".", "max", "(", "self", ".", "pose_45", "[", "visible", ",", "1", "]", ")", "-", "np", ".", "min", "(", "self", ".", "pose_45", "[", "visible", ",", "1", "]", ")", ")", "\n", ")", "\n", "\n", "factor", "=", "np", ".", "sqrt", "(", "min", "(", "\n", "self", ".", "pose_total_area", "/", "area_ref", "if", "area_ref", ">", "0.1", "else", "np", ".", "inf", ",", "\n", "self", ".", "pose_45_total_area", "/", "area_ref_45", "if", "area_ref_45", ">", "0.1", "else", "np", ".", "inf", ",", "\n", ")", ")", "\n", "if", "np", ".", "isinf", "(", "factor", ")", ":", "\n", "            ", "return", "np", ".", "nan", "\n", "\n", "", "factor_clipped", "=", "min", "(", "5.0", ",", "factor", ")", "\n", "scale", "=", "np", ".", "sqrt", "(", "area", ")", "*", "factor_clipped", "\n", "if", "scale", "<", "0.1", ":", "\n", "            ", "scale", "=", "np", ".", "nan", "\n", "\n", "", "LOG", ".", "debug", "(", "'instance scale = %.3f (factor = %.2f, clipped factor = %.2f)'", ",", "\n", "scale", ",", "factor", ",", "factor_clipped", ")", "\n", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.__init__": [[132, 135], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stride", ",", "n_categories", ")", ":", "\n", "        ", "self", ".", "stride", "=", "stride", "\n", "self", ".", "n_categories", "=", "n_categories", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.valid_area": [[136, 145], ["None"], "methods", ["None"], ["", "def", "valid_area", "(", "self", ",", "meta", ")", ":", "\n", "        ", "if", "'valid_area'", "not", "in", "meta", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "(", "\n", "meta", "[", "'valid_area'", "]", "[", "0", "]", "/", "self", ".", "stride", ",", "\n", "meta", "[", "'valid_area'", "]", "[", "1", "]", "/", "self", ".", "stride", ",", "\n", "meta", "[", "'valid_area'", "]", "[", "2", "]", "/", "self", ".", "stride", ",", "\n", "meta", "[", "'valid_area'", "]", "[", "3", "]", "/", "self", ".", "stride", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.detections": [[147, 151], ["None"], "methods", ["None"], ["", "def", "detections", "(", "self", ",", "anns", ")", ":", "\n", "        ", "category_bboxes", "=", "[", "(", "ann", "[", "'category_id'", "]", ",", "ann", "[", "'bbox'", "]", "/", "self", ".", "stride", ")", "\n", "for", "ann", "in", "anns", "if", "not", "ann", "[", "'iscrowd'", "]", "]", "\n", "return", "category_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescalerDet.bg_mask": [[152, 181], ["numpy.ones", "ann[].copy", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "int", "int", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["", "def", "bg_mask", "(", "self", ",", "anns", ",", "width_height", ",", "*", ",", "crowd_margin", ")", ":", "\n", "        ", "\"\"\"Create background mask taking crowd annotations into account.\"\"\"", "\n", "mask", "=", "np", ".", "ones", "(", "(", "\n", "self", ".", "n_categories", ",", "\n", "(", "width_height", "[", "1", "]", "-", "1", ")", "//", "self", ".", "stride", "+", "1", ",", "\n", "(", "width_height", "[", "0", "]", "-", "1", ")", "//", "self", ".", "stride", "+", "1", ",", "\n", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "not", "ann", "[", "'iscrowd'", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "'mask'", "not", "in", "ann", ":", "\n", "                ", "field_i", "=", "ann", "[", "'category_id'", "]", "-", "1", "\n", "bb", "=", "ann", "[", "'bbox'", "]", ".", "copy", "(", ")", "\n", "bb", "/=", "self", ".", "stride", "\n", "bb", "[", "2", ":", "]", "+=", "bb", "[", ":", "2", "]", "# convert width and height to x2 and y2", "\n", "left", "=", "np", ".", "clip", "(", "int", "(", "bb", "[", "0", "]", "-", "crowd_margin", ")", ",", "0", ",", "mask", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "top", "=", "np", ".", "clip", "(", "int", "(", "bb", "[", "1", "]", "-", "crowd_margin", ")", ",", "0", ",", "mask", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "right", "=", "np", ".", "clip", "(", "int", "(", "np", ".", "ceil", "(", "bb", "[", "2", "]", "+", "crowd_margin", ")", ")", "+", "1", ",", "\n", "left", "+", "1", ",", "mask", ".", "shape", "[", "1", "]", ")", "\n", "bottom", "=", "np", ".", "clip", "(", "int", "(", "np", ".", "ceil", "(", "bb", "[", "3", "]", "+", "crowd_margin", ")", ")", "+", "1", ",", "\n", "top", "+", "1", ",", "mask", ".", "shape", "[", "0", "]", ")", "\n", "mask", "[", "field_i", ",", "top", ":", "bottom", ",", "left", ":", "right", "]", "=", "0", "\n", "continue", "\n", "\n", "", "assert", "False", "# because code below is not tested", "\n", "mask", "[", "ann", "[", "'mask'", "]", "[", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", "]", "=", "0", "\n", "\n", "", "return", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.OffsetLossLaplace.__init__": [[58, 61], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OffsetLossLaplace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "field_names", "=", "[", "'offset'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.OffsetLossLaplace.forward": [[62, 99], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "losses.laplace_loss", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.interpolate.sum", "torch.ones_like.sum", "torch.ones_like.sum"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.laplace_loss"], ["", "def", "forward", "(", "self", ",", "preds", ",", "targets", ")", ":", "\n", "        ", "offset_targets", ",", "offset_weights", ",", "instance", "=", "targets", "\n", "\n", "pred_h", ",", "pred_w", "=", "preds", ".", "shape", "[", "2", "]", ",", "preds", ".", "shape", "[", "3", "]", "\n", "h", ",", "w", "=", "offset_targets", ".", "shape", "[", "2", "]", ",", "offset_targets", ".", "shape", "[", "3", "]", "\n", "\n", "#preds = F.interpolate(input=preds, size=(h, w), mode='bilinear',", "\n", "#                      align_corners=True)", "\n", "offset_targets", "=", "F", ".", "interpolate", "(", "input", "=", "offset_targets", ",", "size", "=", "(", "pred_h", ",", "pred_w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "offset_weights", "=", "F", ".", "interpolate", "(", "input", "=", "offset_weights", ",", "size", "=", "(", "pred_h", ",", "pred_w", ")", ",", "\n", "mode", "=", "'nearest'", ")", "\n", "scale", "=", "(", "h", "-", "1", ")", "//", "(", "pred_h", "-", "1", ")", "\n", "\n", "offset_targets", "/=", "scale", "\n", "\n", "pred_y", "=", "preds", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "pred_x", "=", "preds", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "pred_sigma", "=", "preds", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "\n", "#reg_masks = offset_weights.bool()", "\n", "reg_masks", "=", "torch", ".", "ones_like", "(", "offset_weights", ")", "\n", "\n", "loss", "=", "laplace_loss", "(", "\n", "torch", ".", "masked_select", "(", "pred_y", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "pred_x", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "pred_sigma", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "offset_targets", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "offset_targets", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "reg_masks", ")", ",", "\n", ")", "\n", "\n", "if", "offset_weights", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "loss", "=", "loss", "/", "reg_masks", ".", "sum", "(", ")", "/", "10", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss", "*", "0", "\n", "\n", "", "return", "[", "loss", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.OffsetLoss.__init__": [[102, 117], ["super().__init__", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reg_loss_name", "=", "'l1'", ",", "hard_mining", "=", "False", ")", ":", "\n", "        ", "super", "(", "OffsetLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "field_names", "=", "[", "'offset'", "]", "\n", "\n", "if", "reg_loss_name", "==", "'smoothl1'", ":", "\n", "            ", "self", ".", "loss", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "'none'", ")", "\n", "", "elif", "reg_loss_name", "==", "'l2'", "or", "reg_loss_name", "==", "'mse'", ":", "\n", "            ", "self", ".", "loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "", "self", ".", "hard_mining", "=", "hard_mining", "\n", "self", ".", "n_sigma", "=", "1", "\n", "self", ".", "delta", "=", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.OffsetLoss.forward": [[118, 143], ["isinstance", "enumerate", "len", "offset_weights.sum", "torch.interpolate", "torch.interpolate", "losses.OffsetLoss.loss", "loss.sum", "losses.OffsetLoss.loss", "loss.sum", "offset_weights.sum"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "preds", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "offset_targets", ",", "offset_weights", ",", "instance", "=", "targets", "\n", "target_offset", "=", "offset_targets", "[", ":", ",", "0", ":", "2", ",", "...", "]", "\n", "target_h", ",", "target_w", "=", "target_offset", ".", "shape", "[", "2", "]", ",", "target_offset", ".", "shape", "[", "3", "]", "\n", "\n", "if", "isinstance", "(", "preds", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0.", "\n", "for", "ii", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "                ", "pred_h", ",", "pred_w", "=", "pred", ".", "shape", "[", "2", "]", ",", "pred", ".", "shape", "[", "3", "]", "\n", "\n", "pred", "=", "F", ".", "interpolate", "(", "pred", ",", "size", "=", "(", "target_h", ",", "target_w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scale", "=", "(", "target_h", "-", "1", ")", "//", "(", "pred_h", "-", "1", ")", "\n", "pred", "=", "pred", "*", "scale", "\n", "loss", "+=", "self", ".", "loss", "(", "pred", ",", "target_offset", ")", "*", "offset_weights", "\n", "", "loss", "/=", "len", "(", "preds", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "loss", "(", "preds", ",", "target_offset", ")", "*", "offset_weights", "\n", "\n", "", "if", "offset_weights", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "weighted_loss", "=", "loss", ".", "sum", "(", ")", "/", "offset_weights", ".", "sum", "(", ")", "/", "10", "\n", "", "else", ":", "\n", "            ", "weighted_loss", "=", "loss", ".", "sum", "(", ")", "*", "0", "\n", "\n", "", "return", "[", "weighted_loss", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.SemanticParsingLoss.__init__": [[146, 155], ["super().__init__", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "255", ",", "only_present", "=", "True", ")", ":", "\n", "        ", "super", "(", "SemanticParsingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "field_names", "=", "[", "'pdf'", "]", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "only_present", "=", "only_present", "\n", "\n", "self", ".", "ce", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "self", ".", "bce", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.SemanticParsingLoss.forward": [[156, 212], ["segm_targets.size", "segm_targets.size", "len", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "losses.SemanticParsingLoss.ce", "torch.softmax", "torch.softmax", "lovasz_loss.lovasz_softmax_flat", "losses.SemanticParsingLoss.bce", "enumerate", "len", "segm_targets.long", "edge_targets.float", "torch.interpolate", "torch.interpolate", "losses.SemanticParsingLoss.ce", "len", "lovasz_loss.flatten_probas", "segm_targets_.long", "torch.softmax", "torch.softmax", "lovasz_loss.lovasz_softmax_flat", "lovasz_loss.flatten_probas"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_softmax_flat", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.flatten_probas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_softmax_flat", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.flatten_probas"], ["", "def", "forward", "(", "self", ",", "preds", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "segm_targets", ",", "edge_targets", ",", "binary_weights", "=", "targets", "\n", "\n", "h", ",", "w", "=", "segm_targets", ".", "size", "(", "1", ")", ",", "segm_targets", ".", "size", "(", "2", ")", "\n", "if", "len", "(", "preds", ")", "<=", "3", ":", "\n", "            ", "segm_preds", "=", "preds", "[", "0", "]", "\n", "edge_preds", "=", "preds", "[", "1", "]", "if", "len", "(", "preds", ")", ">=", "2", "else", "None", "\n", "\n", "# cross entropy loss", "\n", "segm_preds", "=", "F", ".", "interpolate", "(", "input", "=", "segm_preds", ",", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "edge_preds", "=", "F", ".", "interpolate", "(", "input", "=", "edge_preds", ",", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "# ============= compute semantic segmentation loss ================", "\n", "valid", "=", "binary_weights", ">", "0", "\n", "segm_targets", "=", "segm_targets", "[", "valid", ",", "...", "]", "\n", "segm_preds", "=", "segm_preds", "[", "valid", ",", "...", "]", "\n", "\n", "loss_ce", "=", "self", ".", "ce", "(", "segm_preds", ",", "segm_targets", ".", "long", "(", ")", ")", "\n", "\n", "# lovasz loss", "\n", "segm_preds", "=", "F", ".", "softmax", "(", "input", "=", "segm_preds", ",", "dim", "=", "1", ")", "\n", "loss_lovasz", "=", "lovasz_softmax_flat", "(", "\n", "*", "flatten_probas", "(", "segm_preds", ",", "segm_targets", ",", "self", ".", "ignore_index", ")", ",", "\n", "only_present", "=", "self", ".", "only_present", ")", "\n", "\n", "# ============= compute edge loss ================", "\n", "loss_edge", "=", "self", ".", "bce", "(", "edge_preds", ",", "edge_targets", ".", "float", "(", ")", ")", "\n", "\n", "return", "[", "loss_ce", "+", "loss_lovasz", "+", "loss_edge", "]", "\n", "", "else", ":", "\n", "            ", "loss", "=", "0.", "\n", "for", "ii", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "# cross entropy loss", "\n", "                ", "segm_preds", "=", "F", ".", "interpolate", "(", "input", "=", "pred", ",", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "# ========= compute semantic segmentation loss =============", "\n", "valid", "=", "binary_weights", ">", "0", "\n", "segm_targets_", "=", "segm_targets", "[", "valid", ",", "...", "]", "\n", "segm_preds_", "=", "segm_preds", "[", "valid", ",", "...", "]", "\n", "\n", "loss_ce", "=", "self", ".", "ce", "(", "segm_preds_", ",", "segm_targets_", ".", "long", "(", ")", ")", "\n", "\n", "if", "ii", "==", "0", ":", "\n", "# lovasz loss", "\n", "                    ", "segm_preds_", "=", "F", ".", "softmax", "(", "input", "=", "segm_preds_", ",", "dim", "=", "1", ")", "\n", "loss_lovasz", "=", "lovasz_softmax_flat", "(", "\n", "*", "flatten_probas", "(", "segm_preds_", ",", "segm_targets_", ",", "self", ".", "ignore_index", ")", ",", "\n", "only_present", "=", "self", ".", "only_present", ")", "\n", "loss_ce", "+=", "loss_lovasz", "\n", "\n", "", "loss", "+=", "loss_ce", "\n", "", "loss", "/=", "len", "(", "preds", ")", "\n", "return", "[", "loss", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.SmoothL1Loss.__init__": [[388, 391], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", ",", "scale_required", "=", "True", ")", ":", "\n", "        ", "self", ".", "scale", "=", "None", "\n", "self", ".", "scale_required", "=", "scale_required", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.SmoothL1Loss.__call__": [[392, 416], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x1", ",", "x2", ",", "_", ",", "t1", ",", "t2", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"L1 loss.\n\n        Loss for a single two-dimensional vector (x1, x2)\n        true (t1, t2) vector.\n        \"\"\"", "\n", "if", "self", ".", "scale_required", "and", "self", ".", "scale", "is", "None", ":", "\n", "            ", "raise", "Exception", "\n", "", "if", "self", ".", "scale", "is", "None", ":", "\n", "            ", "self", ".", "scale", "=", "1.0", "\n", "\n", "", "r", "=", "self", ".", "r_smooth", "*", "self", ".", "scale", "\n", "d", "=", "torch", ".", "sqrt", "(", "(", "x1", "-", "t1", ")", "**", "2", "+", "(", "x2", "-", "t2", ")", "**", "2", ")", "\n", "smooth_regime", "=", "d", "<", "r", "\n", "\n", "smooth_loss", "=", "0.5", "/", "r", "[", "smooth_regime", "]", "*", "d", "[", "smooth_regime", "]", "**", "2", "\n", "linear_loss", "=", "d", "[", "smooth_regime", "==", "0", "]", "-", "(", "0.5", "*", "r", "[", "smooth_regime", "==", "0", "]", ")", "\n", "losses", "=", "torch", ".", "cat", "(", "(", "smooth_loss", ",", "linear_loss", ")", ")", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "            ", "losses", "=", "losses", "*", "weight", "\n", "\n", "", "self", ".", "scale", "=", "None", "\n", "return", "torch", ".", "sum", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.MultiHeadLoss.__init__": [[421, 433], ["super().__init__", "all", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "LOG.info"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["def", "__init__", "(", "self", ",", "losses", ",", "lambdas", ")", ":", "\n", "        ", "super", "(", "MultiHeadLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "lambdas", ":", "\n", "            ", "lambdas", "=", "[", "1.0", "for", "l", "in", "losses", "for", "_", "in", "l", ".", "field_names", "]", "\n", "", "assert", "all", "(", "lam", ">=", "0.0", "for", "lam", "in", "lambdas", ")", "\n", "\n", "self", ".", "losses", "=", "torch", ".", "nn", ".", "ModuleList", "(", "losses", ")", "\n", "self", ".", "lambdas", "=", "lambdas", "\n", "\n", "self", ".", "field_names", "=", "[", "n", "for", "l", "in", "self", ".", "losses", "for", "n", "in", "l", ".", "field_names", "]", "\n", "LOG", ".", "info", "(", "'multihead loss: %s, %s'", ",", "self", ".", "field_names", ",", "self", ".", "lambdas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.MultiHeadLoss.forward": [[434, 476], ["isinstance", "isinstance", "len", "len", "len", "len", "len", "len", "sum", "zip", "l", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "head_fields", ",", "head_targets", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "if", "isinstance", "(", "head_fields", ",", "dict", ")", ":", "\n", "            ", "head_fields_", "=", "[", "]", "\n", "if", "'pose'", "in", "head_fields", ":", "\n", "                ", "head_fields_", "+=", "head_fields", "[", "'pose'", "]", "\n", "", "if", "'semantic'", "in", "head_fields", ":", "\n", "                ", "head_fields_", "+=", "[", "head_fields", "[", "'semantic'", "]", "]", "\n", "", "if", "'offset'", "in", "head_fields", ":", "\n", "                ", "head_fields_", "+=", "[", "head_fields", "[", "'offset'", "]", "]", "\n", "", "if", "'center'", "in", "head_fields", ":", "\n", "                ", "head_fields_", "+=", "[", "head_fields", "[", "'center'", "]", "]", "\n", "", "head_fields", "=", "head_fields_", "\n", "", "if", "isinstance", "(", "head_targets", ",", "dict", ")", ":", "\n", "            ", "head_targets_", "=", "[", "]", "\n", "if", "'cif'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'cif'", "]", "]", "\n", "", "if", "'caf'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'caf'", "]", "]", "\n", "", "if", "'caf25'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'caf25'", "]", "]", "\n", "", "if", "'semantic'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'semantic'", "]", "]", "\n", "", "if", "'offset'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'offset'", "]", "]", "\n", "", "if", "'center'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'center'", "]", "]", "\n", "", "head_targets", "=", "head_targets_", "\n", "\n", "", "assert", "len", "(", "self", ".", "losses", ")", "==", "len", "(", "head_fields", ")", "\n", "assert", "len", "(", "self", ".", "losses", ")", "<=", "len", "(", "head_targets", ")", "\n", "assert", "self", ".", "task_sparsity_weight", "==", "0.0", "# TODO implement", "\n", "flat_head_losses", "=", "[", "ll", "\n", "for", "l", ",", "f", ",", "t", "in", "zip", "(", "self", ".", "losses", ",", "head_fields", ",", "head_targets", ")", "\n", "for", "ll", "in", "l", "(", "f", ",", "t", ")", "]", "\n", "\n", "assert", "len", "(", "self", ".", "lambdas", ")", "==", "len", "(", "flat_head_losses", ")", "\n", "loss_values", "=", "[", "lam", "*", "l", "\n", "for", "lam", ",", "l", "in", "zip", "(", "self", ".", "lambdas", ",", "flat_head_losses", ")", "\n", "if", "l", "is", "not", "None", "]", "\n", "total_loss", "=", "sum", "(", "loss_values", ")", "if", "loss_values", "else", "None", "\n", "\n", "return", "total_loss", ",", "flat_head_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.MultiHeadLossAutoTune.__init__": [[481, 511], ["super().__init__", "all", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "LOG.info", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "__init__", "(", "self", ",", "losses", ",", "lambdas", ",", "*", ",", "sparse_task_parameters", "=", "None", ")", ":", "\n", "        ", "\"\"\"Auto-tuning multi-head less.\n\n        Uses idea from \"Multi-Task Learning Using Uncertainty to Weigh Losses\n        for Scene Geometry and Semantics\" by Kendall, Gal and Cipolla.\n\n        In the common setting, use lambdas of zero and one to deactivate and\n        activate the tasks you want to train. Less common, if you have\n        secondary tasks, you can reduce their importance by choosing a\n        lambda value between zero and one.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "lambdas", ":", "\n", "            ", "lambdas", "=", "[", "1.0", "for", "l", "in", "losses", "for", "_", "in", "l", ".", "field_names", "]", "\n", "", "assert", "all", "(", "lam", ">=", "0.0", "for", "lam", "in", "lambdas", ")", "\n", "\n", "self", ".", "losses", "=", "torch", ".", "nn", ".", "ModuleList", "(", "losses", ")", "\n", "self", ".", "lambdas", "=", "lambdas", "\n", "self", ".", "sparse_task_parameters", "=", "sparse_task_parameters", "\n", "\n", "self", ".", "log_sigmas", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "len", "(", "lambdas", ")", ",", ")", ",", "dtype", "=", "torch", ".", "float64", ")", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "field_names", "=", "[", "n", "for", "l", "in", "self", ".", "losses", "for", "n", "in", "l", ".", "field_names", "]", "\n", "LOG", ".", "info", "(", "'multihead loss with autotune: %s'", ",", "self", ".", "field_names", ")", "\n", "assert", "len", "(", "self", ".", "field_names", ")", "==", "len", "(", "self", ".", "lambdas", ")", "\n", "assert", "len", "(", "self", ".", "field_names", ")", "==", "len", "(", "self", ".", "log_sigmas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.MultiHeadLossAutoTune.batch_meta": [[512, 514], ["round", "float", "losses.MultiHeadLossAutoTune.log_sigmas.exp"], "methods", ["None"], ["", "def", "batch_meta", "(", "self", ")", ":", "\n", "        ", "return", "{", "'mtl_sigmas'", ":", "[", "round", "(", "float", "(", "s", ")", ",", "3", ")", "for", "s", "in", "self", ".", "log_sigmas", ".", "exp", "(", ")", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.MultiHeadLossAutoTune.forward": [[515, 573], ["isinstance", "isinstance", "LOG.debug", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "sum", "LOG.debug", "zip", "l", "zip", "zip", "sum", "sum", "[].clamp().sum", "log_sigma.exp", "[].clamp", "param.abs().max", "param.abs"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "head_fields", ",", "head_targets", "=", "args", "\n", "\n", "if", "isinstance", "(", "head_fields", ",", "dict", ")", ":", "\n", "            ", "head_fields_", "=", "[", "]", "\n", "if", "'pose'", "in", "head_fields", ":", "\n", "                ", "head_fields_", "+=", "head_fields", "[", "'pose'", "]", "\n", "", "if", "'semantic'", "in", "head_fields", ":", "\n", "                ", "head_fields_", "+=", "[", "head_fields", "[", "'semantic'", "]", "]", "\n", "", "if", "'offset'", "in", "head_fields", ":", "\n", "                ", "head_fields_", "+=", "[", "head_fields", "[", "'offset'", "]", "]", "\n", "", "if", "'center'", "in", "head_fields", ":", "\n", "                ", "head_fields_", "+=", "[", "head_fields", "[", "'center'", "]", "]", "\n", "", "head_fields", "=", "head_fields_", "\n", "", "if", "isinstance", "(", "head_targets", ",", "dict", ")", ":", "\n", "            ", "head_targets_", "=", "[", "]", "\n", "if", "'cif'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'cif'", "]", "]", "\n", "", "if", "'caf'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'caf'", "]", "]", "\n", "", "if", "'caf25'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'caf25'", "]", "]", "\n", "", "if", "'semantic'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'semantic'", "]", "]", "\n", "", "if", "'offset'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'offset'", "]", "]", "\n", "", "if", "'center'", "in", "head_targets", ":", "\n", "                ", "head_targets_", "+=", "[", "head_targets", "[", "'center'", "]", "]", "\n", "", "head_targets", "=", "head_targets_", "\n", "\n", "", "LOG", ".", "debug", "(", "'losses = %d, fields = %d, targets = %d'", ",", "\n", "len", "(", "self", ".", "losses", ")", ",", "len", "(", "head_fields", ")", ",", "len", "(", "head_targets", ")", ")", "\n", "assert", "len", "(", "self", ".", "losses", ")", "==", "len", "(", "head_fields", ")", ",", "\"{}, {}\"", ".", "format", "(", "len", "(", "self", ".", "losses", ")", ",", "len", "(", "head_fields", ")", ")", "\n", "assert", "len", "(", "self", ".", "losses", ")", "<=", "len", "(", "head_targets", ")", ",", "\"{}, {}\"", ".", "format", "(", "len", "(", "self", ".", "losses", ")", ",", "len", "(", "head_targets", ")", ")", "\n", "flat_head_losses", "=", "[", "ll", "\n", "for", "l", ",", "f", ",", "t", "in", "zip", "(", "self", ".", "losses", ",", "head_fields", ",", "head_targets", ")", "\n", "for", "ll", "in", "l", "(", "f", ",", "t", ")", "]", "\n", "\n", "assert", "len", "(", "self", ".", "lambdas", ")", "==", "len", "(", "flat_head_losses", ")", ",", "'{} {}'", ".", "format", "(", "len", "(", "self", ".", "lambdas", ")", ",", "len", "(", "flat_head_losses", ")", ")", "\n", "assert", "len", "(", "self", ".", "log_sigmas", ")", "==", "len", "(", "flat_head_losses", ")", "\n", "loss_values", "=", "[", "lam", "*", "l", "/", "(", "2.0", "*", "(", "log_sigma", ".", "exp", "(", ")", "**", "2", ")", ")", "\n", "for", "lam", ",", "log_sigma", ",", "l", "in", "zip", "(", "self", ".", "lambdas", ",", "self", ".", "log_sigmas", ",", "flat_head_losses", ")", "\n", "if", "l", "is", "not", "None", "]", "\n", "auto_reg", "=", "[", "lam", "*", "log_sigma", "\n", "for", "lam", ",", "log_sigma", ",", "l", "in", "zip", "(", "self", ".", "lambdas", ",", "self", ".", "log_sigmas", ",", "flat_head_losses", ")", "\n", "if", "l", "is", "not", "None", "]", "\n", "total_loss", "=", "sum", "(", "loss_values", ")", "+", "sum", "(", "auto_reg", ")", "if", "loss_values", "else", "None", "\n", "\n", "if", "self", ".", "task_sparsity_weight", "and", "self", ".", "sparse_task_parameters", "is", "not", "None", ":", "\n", "            ", "head_sparsity_loss", "=", "sum", "(", "\n", "# torch.norm(param, p=1)", "\n", "param", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "clamp", "(", "min", "=", "1e-6", ")", ".", "sum", "(", ")", "\n", "for", "param", "in", "self", ".", "sparse_task_parameters", "\n", ")", "\n", "LOG", ".", "debug", "(", "'l1 head sparsity loss = %f (total = %f)'", ",", "head_sparsity_loss", ",", "total_loss", ")", "\n", "total_loss", "=", "total_loss", "+", "self", ".", "task_sparsity_weight", "*", "head_sparsity_loss", "\n", "\n", "", "return", "total_loss", ",", "flat_head_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss.__init__": [[726, 745], ["super().__init__", "LOG.debug", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["def", "__init__", "(", "self", ",", "head_net", ":", "heads", ".", "CompositeField", ",", "regression_loss", ")", ":", "\n", "        ", "super", "(", "CompositeLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_vectors", "=", "head_net", ".", "meta", ".", "n_vectors", "\n", "self", ".", "n_scales", "=", "head_net", ".", "meta", ".", "n_scales", "\n", "\n", "LOG", ".", "debug", "(", "'%s: n_vectors = %d, n_scales = %d, margin = %s'", ",", "\n", "head_net", ".", "meta", ".", "name", ",", "self", ".", "n_vectors", ",", "self", ".", "n_scales", ",", "self", ".", "margin", ")", "\n", "\n", "self", ".", "regression_loss", "=", "regression_loss", "or", "laplace_loss", "\n", "self", ".", "field_names", "=", "(", "\n", "[", "'{}.c'", ".", "format", "(", "head_net", ".", "meta", ".", "name", ")", "]", "+", "\n", "[", "'{}.vec{}'", ".", "format", "(", "head_net", ".", "meta", ".", "name", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "self", ".", "n_vectors", ")", "]", "+", "\n", "[", "'{}.scales{}'", ".", "format", "(", "head_net", ".", "meta", ".", "name", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "self", ".", "n_scales", ")", "]", "\n", ")", "\n", "if", "self", ".", "margin", ":", "\n", "            ", "self", ".", "field_names", "+=", "[", "'{}.margin{}'", ".", "format", "(", "head_net", ".", "meta", ".", "name", ",", "i", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_vectors", ")", "]", "\n", "\n", "", "self", ".", "bce_blackout", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss._confidence_loss": [[746, 783], ["torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "LOG.debug", "LOG.debug", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.any", "torch.any", "torch.any", "torch.any", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan"], ["", "def", "_confidence_loss", "(", "self", ",", "x_confidence", ",", "target_confidence", ")", ":", "\n", "        ", "bce_masks", "=", "torch", ".", "isnan", "(", "target_confidence", ")", ".", "bitwise_not_", "(", ")", "\n", "if", "not", "torch", ".", "any", "(", "bce_masks", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "# TODO assumes one confidence", "\n", "", "x_confidence", "=", "x_confidence", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "batch_size", "=", "x_confidence", ".", "shape", "[", "0", "]", "\n", "LOG", ".", "debug", "(", "'batch size = %d'", ",", "batch_size", ")", "\n", "\n", "if", "self", ".", "bce_blackout", ":", "\n", "            ", "x_confidence", "=", "x_confidence", "[", ":", ",", "self", ".", "bce_blackout", "]", "\n", "bce_masks", "=", "bce_masks", "[", ":", ",", "self", ".", "bce_blackout", "]", "\n", "target_confidence", "=", "target_confidence", "[", ":", ",", "self", ".", "bce_blackout", "]", "\n", "\n", "", "LOG", ".", "debug", "(", "'BCE: x = %s, target = %s, mask = %s'", ",", "\n", "x_confidence", ".", "shape", ",", "target_confidence", ".", "shape", ",", "bce_masks", ".", "shape", ")", "\n", "bce_target", "=", "torch", ".", "masked_select", "(", "target_confidence", ",", "bce_masks", ")", "\n", "bce_weight", "=", "1.0", "\n", "x_confidence", "=", "torch", ".", "masked_select", "(", "x_confidence", ",", "bce_masks", ")", "\n", "if", "self", ".", "background_weight", "!=", "1.0", ":", "\n", "            ", "bce_weight", "=", "torch", ".", "ones_like", "(", "bce_target", ",", "requires_grad", "=", "False", ")", "\n", "bce_weight", "[", "bce_target", "==", "0", "]", "*=", "self", ".", "background_weight", "\n", "", "elif", "self", ".", "focal_gamma", "!=", "0.0", ":", "\n", "            ", "bce_weight", "=", "torch", ".", "empty_like", "(", "bce_target", ",", "requires_grad", "=", "False", ")", "\n", "bce_weight", "[", "bce_target", "==", "1", "]", "=", "x_confidence", "[", "bce_target", "==", "1", "]", "\n", "bce_weight", "[", "bce_target", "==", "0", "]", "=", "-", "x_confidence", "[", "bce_target", "==", "0", "]", "\n", "bce_weight", "=", "(", "1.0", "+", "torch", ".", "exp", "(", "bce_weight", ")", ")", ".", "pow", "(", "-", "self", ".", "focal_gamma", ")", "\n", "", "ce_loss", "=", "(", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "\n", "x_confidence", ",", "\n", "bce_target", ",", "\n", "# weight=bce_weight,", "\n", "reduction", "=", "'none'", ",", "\n", ")", "*", "bce_weight", ")", ".", "sum", "(", ")", "/", "(", "1000.0", "*", "batch_size", ")", "\n", "\n", "return", "ce_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss._localization_loss": [[784, 804], ["enumerate", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "reg_losses.append", "torch.any", "torch.any", "torch.any", "torch.any", "reg_losses.append", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "losses.CompositeLoss.regression_loss", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan"], ["", "def", "_localization_loss", "(", "self", ",", "x_regs", ",", "x_logbs", ",", "target_regs", ")", ":", "\n", "        ", "batch_size", "=", "target_regs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "reg_losses", "=", "[", "]", "\n", "for", "i", ",", "target_reg", "in", "enumerate", "(", "target_regs", ")", ":", "\n", "            ", "reg_masks", "=", "torch", ".", "isnan", "(", "target_reg", "[", ":", ",", ":", ",", "0", "]", ")", ".", "bitwise_not_", "(", ")", "\n", "if", "not", "torch", ".", "any", "(", "reg_masks", ")", ":", "\n", "                ", "reg_losses", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "reg_losses", ".", "append", "(", "self", ".", "regression_loss", "(", "\n", "torch", ".", "masked_select", "(", "x_regs", "[", ":", ",", ":", ",", "i", ",", "0", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "x_regs", "[", ":", ",", ":", ",", "i", ",", "1", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "x_logbs", "[", ":", ",", ":", ",", "i", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "target_reg", "[", ":", ",", ":", ",", "0", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "target_reg", "[", ":", ",", ":", ",", "1", "]", ",", "reg_masks", ")", ",", "\n", "weight", "=", "0.1", ",", "\n", ")", "/", "(", "100.0", "*", "batch_size", ")", ")", "\n", "\n", "", "return", "reg_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss._scale_losses": [[805, 817], ["len", "losses.logl1_loss", "enumerate", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan().bitwise_not_", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.logl1_loss", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan"], ["", "@", "staticmethod", "\n", "def", "_scale_losses", "(", "x_scales", ",", "target_scales", ")", ":", "\n", "        ", "assert", "x_scales", ".", "shape", "[", "2", "]", "==", "len", "(", "target_scales", ")", "\n", "\n", "batch_size", "=", "x_scales", ".", "shape", "[", "0", "]", "\n", "return", "[", "\n", "logl1_loss", "(", "\n", "torch", ".", "masked_select", "(", "x_scales", "[", ":", ",", ":", ",", "i", "]", ",", "torch", ".", "isnan", "(", "target_scale", ")", ".", "bitwise_not_", "(", ")", ")", ",", "\n", "torch", ".", "masked_select", "(", "target_scale", ",", "torch", ".", "isnan", "(", "target_scale", ")", ".", "bitwise_not_", "(", ")", ")", ",", "\n", "reduction", "=", "'sum'", ",", "\n", ")", "/", "(", "100.0", "*", "batch_size", ")", "\n", "for", "i", ",", "target_scale", "in", "enumerate", "(", "target_scales", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss._margin_losses": [[819, 841], ["zip", "torch.any", "torch.any", "torch.any", "torch.any", "margin_losses.append", "losses.quadrant_margin_loss", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.quadrant_margin_loss"], ["", "def", "_margin_losses", "(", "self", ",", "x_regs", ",", "target_regs", ",", "*", ",", "target_confidence", ")", ":", "\n", "        ", "if", "not", "self", ".", "margin", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "reg_masks", "=", "target_confidence", ">", "0.5", "\n", "if", "not", "torch", ".", "any", "(", "reg_masks", ")", ":", "\n", "            ", "return", "[", "None", "for", "_", "in", "target_regs", "]", "\n", "\n", "", "batch_size", "=", "reg_masks", ".", "shape", "[", "0", "]", "\n", "margin_losses", "=", "[", "]", "\n", "for", "x_reg", ",", "target_reg", "in", "zip", "(", "x_regs", ",", "target_regs", ")", ":", "\n", "            ", "margin_losses", ".", "append", "(", "quadrant_margin_loss", "(", "\n", "torch", ".", "masked_select", "(", "x_reg", "[", ":", ",", ":", ",", "0", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "x_reg", "[", ":", ",", ":", ",", "1", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "target_reg", "[", ":", ",", ":", ",", "0", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "target_reg", "[", ":", ",", ":", ",", "1", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "target_reg", "[", ":", ",", ":", ",", "2", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "target_reg", "[", ":", ",", ":", ",", "3", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "target_reg", "[", ":", ",", ":", ",", "4", "]", ",", "reg_masks", ")", ",", "\n", "torch", ".", "masked_select", "(", "target_reg", "[", ":", ",", ":", ",", "5", "]", ",", "reg_masks", ")", ",", "\n", ")", "/", "(", "100.0", "*", "batch_size", ")", ")", "\n", "", "return", "margin_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss.forward": [[842, 865], ["LOG.debug", "iter", "next", "losses.CompositeLoss._confidence_loss", "losses.CompositeLoss._localization_loss", "losses.CompositeLoss._scale_losses", "losses.CompositeLoss._margin_losses", "xx.double", "tt.double", "len", "next", "next", "range", "range"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.iter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss._confidence_loss", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss._localization_loss", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss._scale_losses", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CompositeLoss._margin_losses"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "LOG", ".", "debug", "(", "'loss for %s'", ",", "self", ".", "field_names", ")", "\n", "\n", "x", ",", "t", "=", "args", "\n", "\n", "x", "=", "[", "xx", ".", "double", "(", ")", "for", "xx", "in", "x", "]", "\n", "t", "=", "[", "tt", ".", "double", "(", ")", "for", "tt", "in", "t", "]", "\n", "\n", "x_confidence", ",", "x_regs", ",", "x_logbs", ",", "x_scales", "=", "x", "\n", "\n", "assert", "len", "(", "t", ")", "==", "1", "+", "self", ".", "n_vectors", "+", "self", ".", "n_scales", "\n", "running_t", "=", "iter", "(", "t", ")", "\n", "target_confidence", "=", "next", "(", "running_t", ")", "\n", "target_regs", "=", "[", "next", "(", "running_t", ")", "for", "_", "in", "range", "(", "self", ".", "n_vectors", ")", "]", "\n", "target_scales", "=", "[", "next", "(", "running_t", ")", "for", "_", "in", "range", "(", "self", ".", "n_scales", ")", "]", "\n", "\n", "ce_loss", "=", "self", ".", "_confidence_loss", "(", "x_confidence", ",", "target_confidence", ")", "\n", "reg_losses", "=", "self", ".", "_localization_loss", "(", "x_regs", ",", "x_logbs", ",", "target_regs", ")", "\n", "scale_losses", "=", "self", ".", "_scale_losses", "(", "x_scales", ",", "target_scales", ")", "\n", "margin_losses", "=", "self", ".", "_margin_losses", "(", "x_regs", ",", "target_regs", ",", "\n", "target_confidence", "=", "target_confidence", ")", "\n", "\n", "return", "[", "ce_loss", "]", "+", "reg_losses", "+", "scale_losses", "+", "margin_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.laplace_loss": [[297, 316], ["torch.sum", "torch.sum", "torch.tanh", "torch.tanh", "torch.exp", "torch.exp", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "", "def", "laplace_loss", "(", "x1", ",", "x2", ",", "logb", ",", "t1", ",", "t2", ",", "weight", "=", "None", ")", ":", "\n", "    ", "\"\"\"Loss based on Laplace Distribution.\n\n    Loss for a single two-dimensional vector (x1, x2) with radial\n    spread b and true (t1, t2) vector.\n    \"\"\"", "\n", "\n", "# left derivative of sqrt at zero is not defined, so prefer torch.norm():", "\n", "# https://github.com/pytorch/pytorch/issues/2421", "\n", "# norm = torch.sqrt((x1 - t1)**2 + (x2 - t2)**2)", "\n", "norm", "=", "(", "torch", ".", "stack", "(", "(", "x1", ",", "x2", ")", ")", "-", "torch", ".", "stack", "(", "(", "t1", ",", "t2", ")", ")", ")", ".", "norm", "(", "dim", "=", "0", ")", "\n", "\n", "# constrain range of logb", "\n", "logb", "=", "3.0", "*", "torch", ".", "tanh", "(", "logb", "/", "3.0", ")", "\n", "\n", "losses", "=", "0.694", "+", "logb", "+", "norm", "*", "torch", ".", "exp", "(", "-", "logb", ")", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "losses", "=", "losses", "*", "weight", "\n", "", "return", "torch", ".", "sum", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.l1_loss": [[318, 328], ["torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "l1_loss", "(", "x1", ",", "x2", ",", "_", ",", "t1", ",", "t2", ",", "weight", "=", "None", ")", ":", "\n", "    ", "\"\"\"L1 loss.\n\n    Loss for a single two-dimensional vector (x1, x2)\n    true (t1, t2) vector.\n    \"\"\"", "\n", "losses", "=", "torch", ".", "sqrt", "(", "(", "x1", "-", "t1", ")", "**", "2", "+", "(", "x2", "-", "t2", ")", "**", "2", ")", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "losses", "=", "losses", "*", "weight", "\n", "", "return", "torch", ".", "sum", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.logl1_loss": [[330, 334], ["torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.l1_loss", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.l1_loss"], ["", "def", "logl1_loss", "(", "logx", ",", "t", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Swap in replacement for functional.l1_loss.\"\"\"", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "\n", "logx", ",", "torch", ".", "log", "(", "t", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.margin_loss": [[336, 355], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.min", "torch.min", "torch.isfinite", "torch.isfinite", "torch.sum", "torch.sum", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "def", "margin_loss", "(", "x1", ",", "x2", ",", "t1", ",", "t2", ",", "max_r1", ",", "max_r2", ",", "max_r3", ",", "max_r4", ")", ":", "\n", "    ", "x", "=", "torch", ".", "stack", "(", "(", "x1", ",", "x2", ")", ")", "\n", "t", "=", "torch", ".", "stack", "(", "(", "t1", ",", "t2", ")", ")", "\n", "\n", "max_r", "=", "torch", ".", "min", "(", "(", "torch", ".", "stack", "(", "max_r1", ",", "max_r2", ",", "max_r3", ",", "max_r4", ")", ")", ",", "axis", "=", "0", ")", "\n", "m0", "=", "torch", ".", "isfinite", "(", "max_r", ")", "\n", "x", "=", "x", "[", ":", ",", "m0", "]", "\n", "t", "=", "t", "[", ":", ",", "m0", "]", "\n", "max_r", "=", "max_r", "[", "m0", "]", "\n", "\n", "# m1 = (x - t).norm(p=1, dim=0) > max_r", "\n", "# x = x[:, m1]", "\n", "# t = t[:, m1]", "\n", "# max_r = max_r[m1]", "\n", "\n", "norm", "=", "(", "x", "-", "t", ")", ".", "norm", "(", "dim", "=", "0", ")", "\n", "m2", "=", "norm", ">", "max_r", "\n", "\n", "return", "torch", ".", "sum", "(", "norm", "[", "m2", "]", "-", "max_r", "[", "m2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.quadrant": [[357, 362], ["torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "quadrant", "(", "xys", ")", ":", "\n", "    ", "q", "=", "torch", ".", "zeros", "(", "(", "xys", ".", "shape", "[", "1", "]", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "q", "[", "xys", "[", "0", ",", ":", "]", "<", "0.0", "]", "+=", "1", "\n", "q", "[", "xys", "[", "1", ",", ":", "]", "<", "0.0", "]", "+=", "2", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.quadrant_margin_loss": [[364, 382], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "losses.quadrant", "diffs.norm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.quadrant"], ["", "def", "quadrant_margin_loss", "(", "x1", ",", "x2", ",", "t1", ",", "t2", ",", "max_r1", ",", "max_r2", ",", "max_r3", ",", "max_r4", ")", ":", "\n", "    ", "x", "=", "torch", ".", "stack", "(", "(", "x1", ",", "x2", ")", ")", "\n", "t", "=", "torch", ".", "stack", "(", "(", "t1", ",", "t2", ")", ")", "\n", "\n", "diffs", "=", "x", "-", "t", "\n", "qs", "=", "quadrant", "(", "diffs", ")", "\n", "norms", "=", "diffs", ".", "norm", "(", "dim", "=", "0", ")", "\n", "\n", "m1", "=", "norms", "[", "qs", "==", "0", "]", ">", "max_r1", "[", "qs", "==", "0", "]", "\n", "m2", "=", "norms", "[", "qs", "==", "1", "]", ">", "max_r2", "[", "qs", "==", "1", "]", "\n", "m3", "=", "norms", "[", "qs", "==", "2", "]", ">", "max_r3", "[", "qs", "==", "2", "]", "\n", "m4", "=", "norms", "[", "qs", "==", "3", "]", ">", "max_r4", "[", "qs", "==", "3", "]", "\n", "\n", "return", "(", "\n", "torch", ".", "sum", "(", "norms", "[", "qs", "==", "0", "]", "[", "m1", "]", "-", "max_r1", "[", "qs", "==", "0", "]", "[", "m1", "]", ")", "+", "\n", "torch", ".", "sum", "(", "norms", "[", "qs", "==", "1", "]", "[", "m2", "]", "-", "max_r2", "[", "qs", "==", "1", "]", "[", "m2", "]", ")", "+", "\n", "torch", ".", "sum", "(", "norms", "[", "qs", "==", "2", "]", "[", "m3", "]", "-", "max_r3", "[", "qs", "==", "2", "]", "[", "m3", "]", ")", "+", "\n", "torch", ".", "sum", "(", "norms", "[", "qs", "==", "3", "]", "[", "m4", "]", "-", "max_r4", "[", "qs", "==", "3", "]", "[", "m4", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.cli": [[867, 894], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "", "def", "cli", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'losses'", ")", "\n", "group", ".", "add_argument", "(", "'--lambdas'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'prefactor for head losses'", ")", "\n", "group", ".", "add_argument", "(", "'--r-smooth'", ",", "type", "=", "float", ",", "default", "=", "SmoothL1Loss", ".", "r_smooth", ",", "\n", "help", "=", "'r_{smooth} for SmoothL1 regressions'", ")", "\n", "group", ".", "add_argument", "(", "'--use-cascade'", ",", "default", "=", "False", ")", "\n", "group", ".", "add_argument", "(", "'--regression-loss'", ",", "default", "=", "'laplace'", ",", "\n", "choices", "=", "[", "'smoothl1'", ",", "'smootherl1'", ",", "'l1'", ",", "'laplace'", "]", ",", "\n", "help", "=", "'type of regression loss'", ")", "\n", "group", ".", "add_argument", "(", "'--offset-regression-loss'", ",", "default", "=", "'l1'", ",", "\n", "choices", "=", "[", "'smoothl1'", ",", "'l1'", ",", "'mse'", ",", "'laplace'", "]", ",", "\n", "help", "=", "'type of offset regression loss'", ")", "\n", "group", ".", "add_argument", "(", "'--background-weight'", ",", "default", "=", "CompositeLoss", ".", "background_weight", ",", "type", "=", "float", ",", "\n", "help", "=", "'BCE weight where ground truth is background'", ")", "\n", "group", ".", "add_argument", "(", "'--focal-gamma'", ",", "default", "=", "CompositeLoss", ".", "focal_gamma", ",", "type", "=", "float", ",", "\n", "help", "=", "'when > 0.0, use focal loss with the given gamma'", ")", "\n", "group", ".", "add_argument", "(", "'--margin-loss'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[experimental]'", ")", "\n", "group", ".", "add_argument", "(", "'--offset-hard-mining'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[experimental]'", ")", "\n", "group", ".", "add_argument", "(", "'--auto-tune-mtl'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use Kendall\\'s prescription for adjusting the multitask weight'", ")", "\n", "assert", "MultiHeadLoss", ".", "task_sparsity_weight", "==", "MultiHeadLossAutoTune", ".", "task_sparsity_weight", "\n", "group", ".", "add_argument", "(", "'--task-sparsity-weight'", ",", "\n", "default", "=", "MultiHeadLoss", ".", "task_sparsity_weight", ",", "type", "=", "float", ",", "\n", "help", "=", "'[experimental]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.configure": [[896, 908], ["None"], "function", ["None"], ["", "def", "configure", "(", "args", ")", ":", "\n", "# apply for CompositeLoss", "\n", "    ", "CompositeLoss", ".", "background_weight", "=", "args", ".", "background_weight", "\n", "CompositeLoss", ".", "focal_gamma", "=", "args", ".", "focal_gamma", "\n", "CompositeLoss", ".", "margin", "=", "args", ".", "margin_loss", "\n", "\n", "# MultiHeadLoss", "\n", "MultiHeadLoss", ".", "task_sparsity_weight", "=", "args", ".", "task_sparsity_weight", "\n", "MultiHeadLossAutoTune", ".", "task_sparsity_weight", "=", "args", ".", "task_sparsity_weight", "\n", "\n", "# SmoothL1", "\n", "SmoothL1Loss", ".", "r_smooth", "=", "args", ".", "r_smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.factory_from_args": [[910, 920], ["losses.factory"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory"], ["", "def", "factory_from_args", "(", "args", ",", "head_nets", ")", ":", "\n", "    ", "return", "factory", "(", "\n", "head_nets", ",", "\n", "args", ".", "lambdas", ",", "\n", "reg_loss_name", "=", "args", ".", "regression_loss", ",", "\n", "offset_reg_loss_name", "=", "args", ".", "offset_regression_loss", ",", "\n", "device", "=", "args", ".", "device", ",", "\n", "auto_tune_mtl", "=", "args", ".", "auto_tune_mtl", ",", "\n", "offset_hard_mining", "=", "args", ".", "offset_hard_mining", ",", "\n", "use_cascade", "=", "args", ".", "use_cascade", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.factory": [[924, 996], ["isinstance", "losses.SemanticParsingLoss", "losses.CenterLoss", "losses.SmoothL1Loss", "losses.OffsetLoss", "losses.OffsetLossLaplace", "isinstance", "losses.MultiHeadLossAutoTune", "losses.MultiHeadLoss", "loss.to.to", "losses.factory", "losses.append", "isinstance", "zip", "getattr", "isinstance", "losses.append", "isinstance", "Exception", "sparse_task_parameters.append", "Exception", "losses.append", "isinstance", "losses.append", "losses.append", "type", "losses.CompositeLoss"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory"], ["", "def", "factory", "(", "head_nets", ",", "lambdas", ",", "*", ",", "\n", "reg_loss_name", "=", "None", ",", "device", "=", "None", ",", "\n", "offset_reg_loss_name", "=", "None", ",", "\n", "auto_tune_mtl", "=", "False", ",", "\n", "offset_hard_mining", "=", "False", ",", "\n", "use_cascade", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "head_nets", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "[", "factory", "(", "hn", ",", "lam", ",", "\n", "reg_loss_name", "=", "reg_loss_name", ",", "\n", "device", "=", "device", ")", "\n", "for", "hn", ",", "lam", "in", "zip", "(", "head_nets", ",", "lambdas", ")", "]", "\n", "\n", "", "if", "reg_loss_name", "==", "'smoothl1'", ":", "\n", "        ", "reg_loss", "=", "SmoothL1Loss", "(", ")", "\n", "", "elif", "reg_loss_name", "==", "'l1'", ":", "\n", "        ", "reg_loss", "=", "l1_loss", "\n", "", "elif", "reg_loss_name", "==", "'laplace'", ":", "\n", "        ", "reg_loss", "=", "laplace_loss", "\n", "", "elif", "reg_loss_name", "is", "None", ":", "\n", "        ", "reg_loss", "=", "laplace_loss", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'unknown regression loss type {}'", ".", "format", "(", "reg_loss_name", ")", ")", "\n", "\n", "#if use_cascade:", "\n", "#    cascade_loss = CascadeLoss()", "\n", "#else:", "\n", "", "sem_loss", "=", "SemanticParsingLoss", "(", ")", "\n", "\n", "center_loss", "=", "CenterLoss", "(", ")", "\n", "\n", "if", "'laplace'", "not", "in", "offset_reg_loss_name", ":", "\n", "        ", "offset_loss", "=", "OffsetLoss", "(", "offset_reg_loss_name", ",", "\n", "hard_mining", "=", "offset_hard_mining", ")", "\n", "", "else", ":", "\n", "        ", "offset_loss", "=", "OffsetLossLaplace", "(", ")", "\n", "\n", "", "sparse_task_parameters", "=", "None", "\n", "if", "MultiHeadLoss", ".", "task_sparsity_weight", ":", "\n", "        ", "sparse_task_parameters", "=", "[", "]", "\n", "for", "head_net", "in", "head_nets", ":", "\n", "            ", "if", "getattr", "(", "head_net", ",", "'sparse_task_parameters'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "sparse_task_parameters", "+=", "head_net", ".", "sparse_task_parameters", "\n", "", "elif", "isinstance", "(", "head_net", ",", "heads", ".", "CompositeFieldFused", ")", ":", "\n", "                ", "sparse_task_parameters", ".", "append", "(", "head_net", ".", "conv", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'unknown l1 parameters for given head: {} ({})'", "\n", "''", ".", "format", "(", "head_net", ".", "meta", ".", "name", ",", "type", "(", "head_net", ")", ")", ")", "\n", "\n", "", "", "", "losses", "=", "[", "]", "\n", "for", "head_net", "in", "head_nets", ":", "\n", "        ", "if", "isinstance", "(", "head_net", ".", "meta", ",", "heads", ".", "ParsingMeta", ")", ":", "\n", "            ", "losses", ".", "append", "(", "sem_loss", ")", "\n", "", "elif", "isinstance", "(", "head_net", ".", "meta", ",", "heads", ".", "OffsetMeta", ")", ":", "\n", "            ", "losses", ".", "append", "(", "offset_loss", ")", "\n", "", "elif", "isinstance", "(", "head_net", ".", "meta", ",", "heads", ".", "CascadeMeta", ")", ":", "\n", "#losses.append(sem_loss)", "\n", "            ", "losses", ".", "append", "(", "offset_loss", ")", "\n", "", "elif", "isinstance", "(", "head_net", ".", "meta", ",", "heads", ".", "CenterMeta", ")", ":", "\n", "            ", "losses", ".", "append", "(", "center_loss", ")", "\n", "", "else", ":", "\n", "            ", "losses", ".", "append", "(", "CompositeLoss", "(", "head_net", ",", "reg_loss", ")", ")", "\n", "\n", "", "", "if", "auto_tune_mtl", ":", "\n", "        ", "loss", "=", "MultiHeadLossAutoTune", "(", "losses", ",", "lambdas", ",", "\n", "sparse_task_parameters", "=", "sparse_task_parameters", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "MultiHeadLoss", "(", "losses", ",", "lambdas", ")", "\n", "\n", "", "if", "device", "is", "not", "None", ":", "\n", "        ", "loss", "=", "loss", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellXception.__init__": [[19, 58], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "decoder.FieldConfig"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_net", ",", "\n", "pose_decoder", ",", "pose_heads", ",", "*", ",", "\n", "semantic_decoder", "=", "None", ",", "semantic_head", "=", "None", ",", "\n", "cascade_head", "=", "None", ",", "\n", "#offset_decoder=None, offset_head=None,", "\n", "center_decoder", "=", "None", ",", "center_head", "=", "None", ",", "\n", "process_heads", "=", "None", ",", "cross_talk", "=", "0.0", ",", "\n", "with_edge", "=", "False", ",", "with_dsn", "=", "False", ")", ":", "\n", "        ", "super", "(", "ShellXception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "head_nets", "=", "pose_heads", "\n", "if", "semantic_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "head_nets", "=", "self", ".", "head_nets", "+", "[", "semantic_head", "]", "\n", "#if offset_head is not None:", "\n", "#    self.head_nets = self.head_nets + [offset_head]", "\n", "", "if", "center_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "head_nets", "=", "self", ".", "head_nets", "+", "[", "center_head", "]", "\n", "", "if", "cascade_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "head_nets", "=", "self", ".", "head_nets", "+", "[", "cascade_head", "]", "\n", "\n", "", "self", ".", "base_net", "=", "base_net", "\n", "self", ".", "pose_decoder", "=", "pose_decoder", "\n", "self", ".", "pose_heads", "=", "nn", ".", "ModuleList", "(", "pose_heads", ")", "\n", "self", ".", "center_head", "=", "center_head", "\n", "self", ".", "center_decoder", "=", "center_decoder", "\n", "self", ".", "semantic_decoder", "=", "semantic_decoder", "\n", "#self.offset_decoder = offset_decoder", "\n", "self", ".", "semantic_head", "=", "semantic_head", "\n", "#self.offset_head = offset_head", "\n", "self", ".", "cascade_head", "=", "cascade_head", "\n", "\n", "self", ".", "cross_talk", "=", "cross_talk", "\n", "self", ".", "with_edge", "=", "with_edge", "\n", "self", ".", "with_dsn", "=", "with_dsn", "\n", "self", ".", "process_heads", "=", "process_heads", "\n", "\n", "self", ".", "config", "=", "FieldConfig", "(", ")", "\n", "self", ".", "accumulated", "=", "None", "\n", "self", ".", "v_threshold", "=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellXception.forward": [[59, 117], ["nets.ShellXception.base_net", "nets.ShellXception.pose_decoder", "nets.ShellXception.semantic_decoder", "nets.ShellXception.semantic_head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hn", "nets.ShellXception.process_heads", "head_outputs[].append", "head_outputs[].append", "nets.ShellXception.cascade_head", "nets.ShellXception.items", "nets.ShellXception.center_decoder", "nets.ShellXception.center_head", "head_outputs[].append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "head_outputs", "=", "{", "}", "\n", "\n", "image_batch", "=", "args", "[", "0", "]", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "cross_talk", ":", "\n", "            ", "rolled_images", "=", "torch", ".", "cat", "(", "(", "image_batch", "[", "-", "1", ":", "]", ",", "image_batch", "[", ":", "-", "1", "]", ")", ")", "\n", "image_batch", "+=", "rolled_images", "*", "self", ".", "cross_talk", "\n", "\n", "", "x", "=", "self", ".", "base_net", "(", "image_batch", ")", "\n", "\n", "assert", "self", ".", "pose_decoder", "is", "not", "None", "\n", "# run pose branch", "\n", "x_pose", "=", "self", ".", "pose_decoder", "(", "x", ")", "\n", "out_pose", "=", "[", "hn", "(", "x_pose", ")", "for", "hn", "in", "self", ".", "pose_heads", "]", "\n", "if", "self", ".", "process_heads", "is", "not", "None", ":", "\n", "            ", "out_pose", "=", "self", ".", "process_heads", "(", "out_pose", ")", "\n", "", "head_outputs", "[", "'pose'", "]", "=", "out_pose", "\n", "\n", "head_outputs", "[", "'semantic'", "]", "=", "[", "]", "\n", "x_semantic", "=", "self", ".", "semantic_decoder", "(", "x", ")", "\n", "out_semantic", "=", "self", ".", "semantic_head", "(", "x_semantic", ")", "\n", "if", "'semantic'", "in", "out_semantic", ":", "\n", "            ", "head_outputs", "[", "'semantic'", "]", ".", "append", "(", "out_semantic", "[", "'semantic'", "]", ")", "\n", "", "if", "'edge'", "in", "out_semantic", ":", "\n", "            ", "head_outputs", "[", "'semantic'", "]", ".", "append", "(", "out_semantic", "[", "'edge'", "]", ")", "\n", "\n", "#x_offset = self.offset_decoder(x)", "\n", "#head_outputs['offset'] = [self.offset_head(x_offset)['offset']]", "\n", "", "if", "self", ".", "cascade_head", "is", "not", "None", ":", "\n", "            ", "out_segm", "=", "self", ".", "cascade_head", "(", "x", ")", "\n", "\n", "head_outputs", "[", "'offset'", "]", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "out_segm", ".", "items", "(", ")", ":", "\n", "                ", "if", "'offset'", "in", "key", ":", "\n", "                    ", "head_outputs", "[", "'offset'", "]", ".", "append", "(", "value", ")", "\n", "\n", "# run segmentation branch", "\n", "#if self.cascade_head is not None:", "\n", "#    out_segm = self.cascade_head(x)", "\n", "\n", "#    head_outputs['semantic'] = []", "\n", "#    head_outputs['offset'] = []", "\n", "\n", "#    out_segm = collections.OrderedDict(sorted(out_segm.items()))", "\n", "#    for key, value in out_segm.items():", "\n", "#        if 'semantic' in key:", "\n", "#            head_outputs['semantic'].append(value)", "\n", "#        if 'offset' in key:", "\n", "#            head_outputs['offset'].append(value)", "\n", "\n", "# run center branch", "\n", "", "", "", "if", "self", ".", "center_decoder", "is", "not", "None", "and", "self", ".", "center_head", "is", "not", "None", ":", "\n", "            ", "x_center", "=", "self", ".", "center_decoder", "(", "x", ")", "\n", "out_center", "=", "self", ".", "center_head", "(", "x_center", ")", "\n", "head_outputs", "[", "'center'", "]", "=", "out_center", "\n", "\n", "", "return", "head_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellXception.get_seeds": [[118, 123], ["zip", "nets.ShellXception.fill_cif"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifDetSeeds.fill_cif"], ["", "def", "get_seeds", "(", "self", ",", "fields", ")", ":", "\n", "        ", "for", "cif_i", ",", "stride", ",", "min_scale", "in", "zip", "(", "self", ".", "config", ".", "cif_indices", ",", "\n", "self", ".", "config", ".", "cif_strides", ",", "\n", "self", ".", "config", ".", "cif_min_scales", ")", ":", "\n", "            ", "self", ".", "fill_cif", "(", "fields", "[", "cif_i", "]", ",", "stride", ",", "min_scale", "=", "min_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellXception.fill_cif": [[124, 126], ["nets.ShellXception.fill_multiple"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifHr.fill_multiple"], ["", "", "def", "fill_cif", "(", "self", ",", "cif", ",", "stride", ",", "min_scale", "=", "0.0", ")", ":", "\n", "        ", "return", "self", ".", "fill_multiple", "(", "[", "cif", "]", ",", "stride", ",", "min_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellXception.fill_multiple": [[127, 147], ["numpy.zeros", "numpy.zeros", "zip", "numpy.maximum", "int", "int", "nets.ShellXception.accumulate", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifDetHr.accumulate"], ["", "def", "fill_multiple", "(", "self", ",", "cifs", ",", "stride", ",", "min_scale", "=", "0.0", ")", ":", "\n", "        ", "if", "self", ".", "accumulated", "is", "None", ":", "\n", "            ", "shape", "=", "(", "\n", "cifs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", "int", "(", "(", "cifs", "[", "0", "]", ".", "shape", "[", "2", "]", "-", "1", ")", "*", "stride", "+", "1", ")", ",", "\n", "int", "(", "(", "cifs", "[", "0", "]", ".", "shape", "[", "3", "]", "-", "1", ")", "*", "stride", "+", "1", ")", ",", "\n", ")", "\n", "ta", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "ta", "=", "np", ".", "zeros", "(", "self", ".", "accumulated", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "for", "cif", "in", "cifs", ":", "\n", "            ", "for", "t", ",", "p", "in", "zip", "(", "ta", ",", "cif", ")", ":", "\n", "                ", "self", ".", "accumulate", "(", "len", "(", "cifs", ")", ",", "t", ",", "p", ",", "stride", ",", "min_scale", ")", "\n", "\n", "", "", "if", "self", ".", "accumulated", "is", "None", ":", "\n", "            ", "self", ".", "accumulated", "=", "ta", "\n", "", "else", ":", "\n", "            ", "self", ".", "accumulated", "=", "np", ".", "maximum", "(", "ta", ",", "self", ".", "accumulated", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellXception.accumulate": [[148, 165], ["numpy.maximum", "functional.scalar_square_add_gauss_with_max"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ",", "len_cifs", ",", "t", ",", "p", ",", "stride", ",", "min_scale", ")", ":", "\n", "        ", "x_confidence", ",", "x_regs", ",", "x_logbs", ",", "x_scales", "=", "p", "\n", "\n", "p", "=", "p", "[", ":", ",", "p", "[", "0", "]", ">", "self", ".", "v_threshold", "]", "\n", "if", "min_scale", ":", "\n", "            ", "p", "=", "p", "[", ":", ",", "p", "[", "4", "]", ">", "min_scale", "/", "stride", "]", "\n", "\n", "", "v", ",", "x", ",", "y", ",", "_", ",", "scale", "=", "p", "\n", "x", "=", "x", "*", "stride", "\n", "y", "=", "y", "*", "stride", "\n", "sigma", "=", "np", ".", "maximum", "(", "1.0", ",", "0.5", "*", "scale", "*", "stride", ")", "\n", "\n", "# Occupancy covers 2sigma.", "\n", "# Restrict this accumulation to 1sigma so that seeds for the same joint", "\n", "# are properly suppressed.", "\n", "scalar_square_add_gauss_with_max", "(", "\n", "t", ",", "x", ",", "y", ",", "sigma", ",", "v", "/", "self", ".", "neighbors", "/", "len_cifs", ",", "truncate", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellHRNet.__init__": [[168, 197], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "decoder.FieldConfig"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_net", ",", "\n", "pose_decoder", ",", "pose_heads", ",", "*", ",", "\n", "cascade_head", "=", "None", ",", "\n", "center_decoder", "=", "None", ",", "center_head", "=", "None", ",", "\n", "process_heads", "=", "None", ",", "cross_talk", "=", "0.0", ",", "\n", "with_edge", "=", "False", ",", "with_dsn", "=", "False", ")", ":", "\n", "        ", "super", "(", "ShellHRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "head_nets", "=", "pose_heads", "\n", "if", "cascade_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "head_nets", "=", "self", ".", "head_nets", "+", "[", "cascade_head", "]", "\n", "", "if", "center_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "head_nets", "=", "self", ".", "head_nets", "+", "[", "center_head", "]", "\n", "\n", "", "self", ".", "base_net", "=", "base_net", "\n", "self", ".", "pose_decoder", "=", "pose_decoder", "\n", "self", ".", "pose_heads", "=", "nn", ".", "ModuleList", "(", "pose_heads", ")", "\n", "self", ".", "cascade_head", "=", "cascade_head", "\n", "self", ".", "center_head", "=", "center_head", "\n", "self", ".", "center_decoder", "=", "center_decoder", "\n", "\n", "self", ".", "cross_talk", "=", "cross_talk", "\n", "self", ".", "with_edge", "=", "with_edge", "\n", "self", ".", "with_dsn", "=", "with_dsn", "\n", "self", ".", "process_heads", "=", "process_heads", "\n", "\n", "self", ".", "config", "=", "FieldConfig", "(", ")", "\n", "self", ".", "accumulated", "=", "None", "\n", "self", ".", "v_threshold", "=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellHRNet.forward": [[198, 238], ["nets.ShellHRNet.base_net", "nets.ShellHRNet.pose_decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hn", "nets.ShellHRNet.process_heads", "nets.ShellHRNet.cascade_head", "collections.OrderedDict", "collections.OrderedDict.items", "nets.ShellHRNet.center_decoder", "nets.ShellHRNet.center_head", "sorted", "collections.OrderedDict.items", "head_outputs[].append", "head_outputs[].append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "head_outputs", "=", "{", "}", "\n", "\n", "image_batch", "=", "args", "[", "0", "]", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "cross_talk", ":", "\n", "            ", "rolled_images", "=", "torch", ".", "cat", "(", "(", "image_batch", "[", "-", "1", ":", "]", ",", "image_batch", "[", ":", "-", "1", "]", ")", ")", "\n", "image_batch", "+=", "rolled_images", "*", "self", ".", "cross_talk", "\n", "\n", "", "x", "=", "self", ".", "base_net", "(", "image_batch", ")", "\n", "\n", "assert", "self", ".", "pose_decoder", "is", "not", "None", "\n", "# run pose branch", "\n", "x_pose", "=", "self", ".", "pose_decoder", "(", "x", ")", "\n", "out_pose", "=", "[", "hn", "(", "x_pose", ")", "for", "hn", "in", "self", ".", "pose_heads", "]", "\n", "if", "self", ".", "process_heads", "is", "not", "None", ":", "\n", "            ", "out_pose", "=", "self", ".", "process_heads", "(", "out_pose", ")", "\n", "", "head_outputs", "[", "'pose'", "]", "=", "out_pose", "\n", "\n", "# run segmentation branch", "\n", "if", "self", ".", "cascade_head", "is", "not", "None", ":", "\n", "            ", "out_segm", "=", "self", ".", "cascade_head", "(", "x", ")", "\n", "\n", "head_outputs", "[", "'semantic'", "]", "=", "[", "]", "\n", "head_outputs", "[", "'offset'", "]", "=", "[", "]", "\n", "\n", "out_segm", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "out_segm", ".", "items", "(", ")", ")", ")", "\n", "for", "key", ",", "value", "in", "out_segm", ".", "items", "(", ")", ":", "\n", "                ", "if", "'semantic'", "in", "key", ":", "\n", "                    ", "head_outputs", "[", "'semantic'", "]", ".", "append", "(", "value", ")", "\n", "", "if", "'offset'", "in", "key", ":", "\n", "                    ", "head_outputs", "[", "'offset'", "]", ".", "append", "(", "value", ")", "\n", "\n", "# run center branch", "\n", "", "", "", "if", "self", ".", "center_decoder", "is", "not", "None", "and", "self", ".", "center_head", "is", "not", "None", ":", "\n", "            ", "x_center", "=", "self", ".", "center_decoder", "(", "x", ")", "\n", "out_center", "=", "self", ".", "center_head", "(", "x_center", ")", "\n", "head_outputs", "[", "'center'", "]", "=", "out_center", "\n", "\n", "", "return", "head_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellHRNet.get_seeds": [[239, 244], ["zip", "nets.ShellHRNet.fill_cif"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifDetSeeds.fill_cif"], ["", "def", "get_seeds", "(", "self", ",", "fields", ")", ":", "\n", "        ", "for", "cif_i", ",", "stride", ",", "min_scale", "in", "zip", "(", "self", ".", "config", ".", "cif_indices", ",", "\n", "self", ".", "config", ".", "cif_strides", ",", "\n", "self", ".", "config", ".", "cif_min_scales", ")", ":", "\n", "            ", "self", ".", "fill_cif", "(", "fields", "[", "cif_i", "]", ",", "stride", ",", "min_scale", "=", "min_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellHRNet.fill_cif": [[245, 247], ["nets.ShellHRNet.fill_multiple"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifHr.fill_multiple"], ["", "", "def", "fill_cif", "(", "self", ",", "cif", ",", "stride", ",", "min_scale", "=", "0.0", ")", ":", "\n", "        ", "return", "self", ".", "fill_multiple", "(", "[", "cif", "]", ",", "stride", ",", "min_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellHRNet.fill_multiple": [[248, 268], ["numpy.zeros", "numpy.zeros", "zip", "numpy.maximum", "int", "int", "nets.ShellHRNet.accumulate", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifDetHr.accumulate"], ["", "def", "fill_multiple", "(", "self", ",", "cifs", ",", "stride", ",", "min_scale", "=", "0.0", ")", ":", "\n", "        ", "if", "self", ".", "accumulated", "is", "None", ":", "\n", "            ", "shape", "=", "(", "\n", "cifs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", "int", "(", "(", "cifs", "[", "0", "]", ".", "shape", "[", "2", "]", "-", "1", ")", "*", "stride", "+", "1", ")", ",", "\n", "int", "(", "(", "cifs", "[", "0", "]", ".", "shape", "[", "3", "]", "-", "1", ")", "*", "stride", "+", "1", ")", ",", "\n", ")", "\n", "ta", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "ta", "=", "np", ".", "zeros", "(", "self", ".", "accumulated", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "for", "cif", "in", "cifs", ":", "\n", "            ", "for", "t", ",", "p", "in", "zip", "(", "ta", ",", "cif", ")", ":", "\n", "                ", "self", ".", "accumulate", "(", "len", "(", "cifs", ")", ",", "t", ",", "p", ",", "stride", ",", "min_scale", ")", "\n", "\n", "", "", "if", "self", ".", "accumulated", "is", "None", ":", "\n", "            ", "self", ".", "accumulated", "=", "ta", "\n", "", "else", ":", "\n", "            ", "self", ".", "accumulated", "=", "np", ".", "maximum", "(", "ta", ",", "self", ".", "accumulated", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellHRNet.accumulate": [[269, 286], ["numpy.maximum", "functional.scalar_square_add_gauss_with_max"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ",", "len_cifs", ",", "t", ",", "p", ",", "stride", ",", "min_scale", ")", ":", "\n", "        ", "x_confidence", ",", "x_regs", ",", "x_logbs", ",", "x_scales", "=", "p", "\n", "\n", "p", "=", "p", "[", ":", ",", "p", "[", "0", "]", ">", "self", ".", "v_threshold", "]", "\n", "if", "min_scale", ":", "\n", "            ", "p", "=", "p", "[", ":", ",", "p", "[", "4", "]", ">", "min_scale", "/", "stride", "]", "\n", "\n", "", "v", ",", "x", ",", "y", ",", "_", ",", "scale", "=", "p", "\n", "x", "=", "x", "*", "stride", "\n", "y", "=", "y", "*", "stride", "\n", "sigma", "=", "np", ".", "maximum", "(", "1.0", ",", "0.5", "*", "scale", "*", "stride", ")", "\n", "\n", "# Occupancy covers 2sigma.", "\n", "# Restrict this accumulation to 1sigma so that seeds for the same joint", "\n", "# are properly suppressed.", "\n", "scalar_square_add_gauss_with_max", "(", "\n", "t", ",", "x", ",", "y", ",", "sigma", ",", "v", "/", "self", ".", "neighbors", "/", "len_cifs", ",", "truncate", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.Shell.__init__": [[290, 316], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_net", ",", "\n", "pose_decoder", ",", "pose_heads", ",", "*", ",", "\n", "segm_decoder", "=", "None", ",", "segm_heads", "=", "None", ",", "\n", "offset_decoder", "=", "None", ",", "offset_heads", "=", "None", ",", "\n", "process_heads", "=", "None", ",", "cross_talk", "=", "0.0", ",", "\n", "with_edge", "=", "False", ",", "with_dsn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Shell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "head_nets", "=", "pose_heads", "\n", "if", "segm_heads", "is", "not", "None", ":", "\n", "            ", "self", ".", "head_nets", "=", "self", ".", "head_nets", "+", "segm_heads", "\n", "", "if", "offset_heads", "is", "not", "None", ":", "\n", "            ", "self", ".", "head_nets", "=", "self", ".", "head_nets", "+", "[", "offset_heads", "]", "\n", "\n", "", "self", ".", "base_net", "=", "base_net", "\n", "self", ".", "pose_decoder", "=", "pose_decoder", "\n", "self", ".", "pose_heads", "=", "nn", ".", "ModuleList", "(", "pose_heads", ")", "\n", "self", ".", "segm_decoder", "=", "segm_decoder", "\n", "self", ".", "segm_heads", "=", "nn", ".", "ModuleList", "(", "segm_heads", ")", "\n", "\n", "self", ".", "offset_decoder", "=", "offset_decoder", "\n", "self", ".", "offset_heads", "=", "offset_heads", "\n", "self", ".", "process_heads", "=", "process_heads", "\n", "self", ".", "cross_talk", "=", "cross_talk", "\n", "self", ".", "with_edge", "=", "with_edge", "\n", "self", ".", "with_dsn", "=", "with_dsn", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.Shell.forward": [[317, 390], ["nets.Shell.base_net", "nets.Shell.segm_decoder", "nets.Shell.voting", "nets.Shell.pose_decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hn", "len", "head_outputs[].append", "len", "hn", "nets.Shell.process_heads", "head_outputs[].append"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.CascadeRefinementHead.voting"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "head_outputs", "=", "{", "}", "\n", "\n", "image_batch", "=", "args", "[", "0", "]", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "cross_talk", ":", "\n", "            ", "rolled_images", "=", "torch", ".", "cat", "(", "(", "image_batch", "[", "-", "1", ":", "]", ",", "image_batch", "[", ":", "-", "1", "]", ")", ")", "\n", "image_batch", "+=", "rolled_images", "*", "self", ".", "cross_talk", "\n", "\n", "", "x", "=", "self", ".", "base_net", "(", "image_batch", ")", "\n", "\n", "assert", "self", ".", "pose_decoder", "is", "not", "None", "\n", "assert", "self", ".", "segm_decoder", "is", "not", "None", "\n", "\n", "# run segmentation branch", "\n", "x_segm", "=", "self", ".", "segm_decoder", "(", "x", ")", "\n", "out_segm", "=", "[", "hn", "(", "x_segm", ")", "for", "hn", "in", "self", ".", "segm_heads", "]", "\n", "\n", "head_outputs", "[", "'semantic'", "]", "=", "[", "]", "\n", "if", "len", "(", "out_segm", ")", ">", "0", ":", "\n", "            ", "head_outputs", "[", "'semantic'", "]", ".", "append", "(", "out_segm", "[", "0", "]", "[", "'semantic'", "]", ")", "\n", "if", "self", ".", "with_edge", ":", "\n", "                ", "head_outputs", "[", "'semantic'", "]", ".", "append", "(", "out_segm", "[", "0", "]", "[", "'edge'", "]", ")", "\n", "", "", "if", "len", "(", "out_segm", ")", ">", "1", ":", "\n", "            ", "head_outputs", "[", "'offset'", "]", "=", "out_segm", "[", "1", "]", "[", "'offset'", "]", "\n", "\n", "", "votemap", "=", "self", ".", "voting", "(", "out_segm", "[", "0", "]", "[", "'semantic'", "]", ",", "out_segm", "[", "1", "]", "[", "'offset'", "]", ")", "\n", "head_outputs", "[", "'vote'", "]", "=", "votemap", "\n", "\n", "# run pose branch", "\n", "x_pose", "=", "self", ".", "pose_decoder", "(", "x", ")", "\n", "\n", "x_pose_attend", "=", "x_pose", "*", "votemap", "+", "x_pose", "\n", "fusion_feat", "=", "[", "x_pose_attend", ",", "votemap", "]", "+", "[", "head_outputs", "[", "'semantic'", "]", "[", "0", "]", "[", ":", ",", "1", ":", ",", "...", "]", "]", "\n", "if", "self", ".", "with_edge", ":", "\n", "            ", "fusion_feat", "+=", "[", "head_outputs", "[", "'semantic'", "]", "[", "1", "]", "]", "\n", "\n", "", "x_pose", "=", "torch", ".", "cat", "(", "fusion_feat", ",", "dim", "=", "1", ")", "\n", "out_pose", "=", "[", "hn", "(", "x_pose", ")", "for", "hn", "in", "self", ".", "pose_heads", "]", "\n", "if", "self", ".", "process_heads", "is", "not", "None", ":", "\n", "            ", "out_pose", "=", "self", ".", "process_heads", "(", "out_pose", ")", "\n", "", "head_outputs", "[", "'pose'", "]", "=", "out_pose", "\n", "\n", "\n", "## run pose", "\n", "#if self.pose_decoder is not None:", "\n", "#    x_pose = self.pose_decoder(x)", "\n", "#    out_pose = [hn(x_pose) for hn in self.pose_heads]", "\n", "#else:", "\n", "#    out_pose = [hn(x) for hn in self.pose_head_nets]", "\n", "#if self.process_heads is not None:", "\n", "#    out_pose = self.process_heads(out_pose)", "\n", "\n", "#head_outputs['pose'] = out_pose", "\n", "\n", "## run segm", "\n", "#if self.segm_decoder is not None:", "\n", "#    x_segm = self.segm_decoder(x)", "\n", "#    out = self.segm_heads(x_segm)", "\n", "\n", "#    if self.with_edge:", "\n", "#        head_outputs['semantic'] = [out['semantic'], out['edge']]", "\n", "#    else:", "\n", "#        head_outputs['semantic'] = [out['semantic']]", "\n", "\n", "#if self.offset_heads is not None:", "\n", "#    x_offset = self.offset_decoder(x)", "\n", "\n", "#    x_offset_feat = torch.cat((x_segm, x_offset, x_pose), dim=1)", "\n", "#    out_offset = self.offset_heads(x_offset_feat)['offset']", "\n", "#    head_outputs['offset'] = out_offset", "\n", "\n", "return", "head_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.Shell.voting": [[391, 427], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "semantic.get_device", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "xx.to", "yy.to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "segm_pred.bool.bool.bool", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "indexs.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.bincount", "numpy.reshape", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "list", "list", "range", "range", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "indexs.cpu().numpy.cpu().numpy.cpu", "numpy.max", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "voting", "(", "self", ",", "semantic", ",", "offset", ")", ":", "\n", "        ", "bs", "=", "semantic", ".", "shape", "[", "0", "]", "\n", "hh", ",", "ww", "=", "semantic", ".", "shape", "[", "2", "]", ",", "semantic", ".", "shape", "[", "3", "]", "\n", "\n", "vote_map", "=", "torch", ".", "zeros_like", "(", "offset", "[", ":", ",", ":", "1", ",", "...", "]", ")", "\n", "\n", "device", "=", "semantic", ".", "get_device", "(", ")", "\n", "xx", ",", "yy", "=", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "ww", ")", ")", ")", ",", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "hh", ")", ")", ")", "\n", "xx", ",", "yy", "=", "xx", ".", "to", "(", "device", ")", ",", "yy", ".", "to", "(", "device", ")", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "meshgrid", "(", "yy", ",", "xx", ")", "\n", "\n", "for", "ii", "in", "range", "(", "bs", ")", ":", "\n", "            ", "segm_pred", "=", "torch", ".", "argmax", "(", "semantic", "[", "ii", ",", "...", "]", ",", "axis", "=", "0", ")", "\n", "segm_pred", "[", "segm_pred", ">", "0", "]", "=", "1", "\n", "segm_pred", "=", "segm_pred", ".", "bool", "(", ")", "\n", "\n", "coord_x", "=", "torch", ".", "masked_select", "(", "grid_x", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "coord_y", "=", "torch", ".", "masked_select", "(", "grid_y", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "\n", "offset_x", "=", "offset", "[", "ii", ",", "1", ",", "coord_y", ",", "coord_x", "]", "\n", "offset_y", "=", "offset", "[", "ii", ",", "0", ",", "coord_y", ",", "coord_x", "]", "\n", "\n", "vote_x", "=", "coord_x", "+", "offset_x", "\n", "vote_y", "=", "coord_y", "+", "offset_y", "\n", "vote_x", "=", "torch", ".", "clamp", "(", "vote_x", ",", "0", ",", "ww", "-", "1", ")", ".", "long", "(", ")", "\n", "vote_y", "=", "torch", ".", "clamp", "(", "vote_y", ",", "0", ",", "hh", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "indexs", "=", "vote_y", "*", "ww", "+", "vote_x", "\n", "indexs", "=", "indexs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "counts", "=", "np", ".", "bincount", "(", "indexs", ",", "minlength", "=", "hh", "*", "ww", ")", "\n", "counts", "=", "counts", "/", "(", "np", ".", "max", "(", "counts", ")", "+", "1e-10", ")", "\n", "counts", "=", "np", ".", "reshape", "(", "counts", ",", "(", "hh", ",", "ww", ")", ")", "\n", "counts", "=", "torch", ".", "from_numpy", "(", "counts", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "vote_map", "[", "ii", ",", "0", ",", "...", "]", "=", "counts", "\n", "\n", "", "return", "vote_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.Shell2Scale.__init__": [[430, 436], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_net", ",", "head_nets", ",", "*", ",", "reduced_stride", "=", "3", ")", ":", "\n", "        ", "super", "(", "Shell2Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_net", "=", "base_net", "\n", "self", ".", "head_nets", "=", "torch", ".", "nn", ".", "ModuleList", "(", "head_nets", ")", "\n", "self", ".", "reduced_stride", "=", "reduced_stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.Shell2Scale.merge_heads": [[437, 468], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "enumerate", "zip", "len", "torch.log", "torch.log", "torch.log", "torch.log", "len", "Exception", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "@", "staticmethod", "\n", "def", "merge_heads", "(", "original_h", ",", "reduced_h", ",", "\n", "logb_component_indices", ",", "\n", "stride", ")", ":", "\n", "        ", "mask", "=", "reduced_h", "[", "0", "]", ">", "original_h", "[", "0", "]", "[", ":", ",", ":", ",", "\n", ":", "stride", "*", "reduced_h", "[", "0", "]", ".", "shape", "[", "2", "]", ":", "stride", ",", "\n", ":", "stride", "*", "reduced_h", "[", "0", "]", ".", "shape", "[", "3", "]", ":", "stride", "]", "\n", "mask_vector", "=", "torch", ".", "stack", "(", "(", "mask", ",", "mask", ")", ",", "dim", "=", "2", ")", "\n", "\n", "for", "ci", ",", "(", "original_c", ",", "reduced_c", ")", "in", "enumerate", "(", "zip", "(", "original_h", ",", "reduced_h", ")", ")", ":", "\n", "            ", "if", "ci", "==", "0", ":", "\n", "# confidence component", "\n", "                ", "reduced_c", "=", "reduced_c", "*", "0.5", "\n", "", "elif", "ci", "in", "logb_component_indices", ":", "\n", "# log(b) components", "\n", "                ", "reduced_c", "=", "torch", ".", "log", "(", "torch", ".", "exp", "(", "reduced_c", ")", "*", "stride", ")", "\n", "", "else", ":", "\n", "# vectorial and scale components", "\n", "                ", "reduced_c", "=", "reduced_c", "*", "stride", "\n", "\n", "", "if", "len", "(", "original_c", ".", "shape", ")", "==", "4", ":", "\n", "                ", "original_c", "[", ":", ",", ":", ",", "\n", ":", "stride", "*", "reduced_c", ".", "shape", "[", "2", "]", ":", "stride", ",", "\n", ":", "stride", "*", "reduced_c", ".", "shape", "[", "3", "]", ":", "stride", "]", "[", "mask", "]", "=", "reduced_c", "[", "mask", "]", "\n", "", "elif", "len", "(", "original_c", ".", "shape", ")", "==", "5", ":", "\n", "                ", "original_c", "[", ":", ",", ":", ",", ":", ",", "\n", ":", "stride", "*", "reduced_c", ".", "shape", "[", "3", "]", ":", "stride", ",", "\n", ":", "stride", "*", "reduced_c", ".", "shape", "[", "4", "]", ":", "stride", "]", "[", "mask_vector", "]", "=", "reduced_c", "[", "mask_vector", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'cannot process component with shape {}'", "\n", "''", ".", "format", "(", "original_c", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.Shell2Scale.forward": [[469, 486], ["nets.Shell2Scale.base_net", "nets.Shell2Scale.base_net", "zip", "hn", "hn", "nets.Shell2Scale.merge_heads"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.Shell2Scale.merge_heads"], ["", "", "", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "original_input", "=", "args", "[", "0", "]", "\n", "original_x", "=", "self", ".", "base_net", "(", "original_input", ")", "\n", "original_heads", "=", "[", "hn", "(", "original_x", ")", "for", "hn", "in", "self", ".", "head_nets", "]", "\n", "\n", "reduced_input", "=", "original_input", "[", ":", ",", ":", ",", ":", ":", "self", ".", "reduced_stride", ",", ":", ":", "self", ".", "reduced_stride", "]", "\n", "reduced_x", "=", "self", ".", "base_net", "(", "reduced_input", ")", "\n", "reduced_heads", "=", "[", "hn", "(", "reduced_x", ")", "for", "hn", "in", "self", ".", "head_nets", "]", "\n", "\n", "logb_component_indices", "=", "[", "(", "2", ",", ")", ",", "(", "3", ",", "4", ")", "]", "\n", "\n", "for", "original_h", ",", "reduced_h", ",", "lci", "in", "zip", "(", "original_heads", ",", "\n", "reduced_heads", ",", "\n", "logb_component_indices", ")", ":", "\n", "            ", "self", ".", "merge_heads", "(", "original_h", ",", "reduced_h", ",", "lci", ",", "self", ".", "reduced_stride", ")", "\n", "\n", "", "return", "original_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellMultiScale.__init__": [[489, 503], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "heads.PifHFlip", "heads.PafHFlip", "heads.PafHFlip"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_net", ",", "head_nets", ",", "*", ",", "\n", "process_heads", "=", "None", ",", "include_hflip", "=", "True", ")", ":", "\n", "        ", "super", "(", "ShellMultiScale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_net", "=", "base_net", "\n", "self", ".", "head_nets", "=", "torch", ".", "nn", ".", "ModuleList", "(", "head_nets", ")", "\n", "self", ".", "pif_hflip", "=", "heads", ".", "PifHFlip", "(", "\n", "head_nets", "[", "0", "]", ".", "meta", ".", "keypoints", ",", "datasets", ".", "constants", ".", "HFLIP", ")", "\n", "self", ".", "paf_hflip", "=", "heads", ".", "PafHFlip", "(", "\n", "head_nets", "[", "1", "]", ".", "meta", ".", "keypoints", ",", "head_nets", "[", "1", "]", ".", "meta", ".", "skeleton", ",", "datasets", ".", "constants", ".", "HFLIP", ")", "\n", "self", ".", "paf_hflip_dense", "=", "heads", ".", "PafHFlip", "(", "\n", "head_nets", "[", "2", "]", ".", "meta", ".", "keypoints", ",", "head_nets", "[", "2", "]", ".", "meta", ".", "skeleton", ",", "datasets", ".", "constants", ".", "HFLIP", ")", "\n", "self", ".", "process_heads", "=", "process_heads", "\n", "self", ".", "include_hflip", "=", "include_hflip", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.ShellMultiScale.forward": [[504, 537], ["range", "nets.ShellMultiScale.process_heads", "nets.ShellMultiScale.base_net", "nets.ShellMultiScale.pif_hflip", "nets.ShellMultiScale.paf_hflip", "nets.ShellMultiScale.paf_hflip_dense", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "hn", "range", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "original_input", "=", "args", "[", "0", "]", "\n", "\n", "head_outputs", "=", "[", "]", "\n", "for", "hflip", "in", "(", "[", "False", ",", "True", "]", "if", "self", ".", "include_hflip", "else", "[", "False", "]", ")", ":", "\n", "            ", "for", "reduction", "in", "[", "1", ",", "1.5", ",", "2", ",", "3", ",", "5", "]", ":", "\n", "                ", "if", "reduction", "==", "1.5", ":", "\n", "                    ", "x_red", "=", "torch", ".", "ByteTensor", "(", "\n", "[", "i", "%", "3", "!=", "2", "for", "i", "in", "range", "(", "original_input", ".", "shape", "[", "3", "]", ")", "]", ")", "\n", "y_red", "=", "torch", ".", "ByteTensor", "(", "\n", "[", "i", "%", "3", "!=", "2", "for", "i", "in", "range", "(", "original_input", ".", "shape", "[", "2", "]", ")", "]", ")", "\n", "reduced_input", "=", "original_input", "[", ":", ",", ":", ",", "y_red", ",", ":", "]", "\n", "reduced_input", "=", "reduced_input", "[", ":", ",", ":", ",", ":", ",", "x_red", "]", "\n", "", "else", ":", "\n", "                    ", "reduced_input", "=", "original_input", "[", ":", ",", ":", ",", ":", ":", "reduction", ",", ":", ":", "reduction", "]", "\n", "\n", "", "if", "hflip", ":", "\n", "                    ", "reduced_input", "=", "torch", ".", "flip", "(", "reduced_input", ",", "dims", "=", "[", "3", "]", ")", "\n", "\n", "", "reduced_x", "=", "self", ".", "base_net", "(", "reduced_input", ")", "\n", "head_outputs", "+=", "[", "hn", "(", "reduced_x", ")", "for", "hn", "in", "self", ".", "head_nets", "]", "\n", "\n", "", "", "if", "self", ".", "include_hflip", ":", "\n", "            ", "for", "mscale_i", "in", "range", "(", "5", ",", "10", ")", ":", "\n", "                ", "head_i", "=", "mscale_i", "*", "3", "\n", "head_outputs", "[", "head_i", "]", "=", "self", ".", "pif_hflip", "(", "*", "head_outputs", "[", "head_i", "]", ")", "\n", "head_outputs", "[", "head_i", "+", "1", "]", "=", "self", ".", "paf_hflip", "(", "*", "head_outputs", "[", "head_i", "+", "1", "]", ")", "\n", "head_outputs", "[", "head_i", "+", "2", "]", "=", "self", ".", "paf_hflip_dense", "(", "*", "head_outputs", "[", "head_i", "+", "2", "]", ")", "\n", "\n", "", "", "if", "self", ".", "process_heads", "is", "not", "None", ":", "\n", "            ", "head_outputs", "=", "self", ".", "process_heads", "(", "*", "head_outputs", ")", "\n", "\n", "", "return", "head_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.model_migration": [[540, 545], ["nets.model_defaults", "hasattr"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.model_defaults"], ["", "", "def", "model_migration", "(", "net_cpu", ")", ":", "\n", "    ", "model_defaults", "(", "net_cpu", ")", "\n", "\n", "if", "not", "hasattr", "(", "net_cpu", ",", "'process_heads'", ")", ":", "\n", "        ", "net_cpu", ".", "process_heads", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.model_defaults": [[547, 559], ["net_cpu.modules", "isinstance"], "function", ["None"], ["", "", "def", "model_defaults", "(", "net_cpu", ")", ":", "\n", "    ", "for", "m", "in", "net_cpu", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "torch", ".", "nn", ".", "BatchNorm1d", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "# avoid numerical instabilities", "\n", "# (only seen sometimes when training with GPU)", "\n", "# Variances in pretrained models can be as low as 1e-17.", "\n", "# m.running_var.clamp_(min=1e-8)", "\n", "            ", "m", ".", "eps", "=", "1e-4", "# tf default is 0.001", "\n", "# m.eps = 1e-5  # pytorch default", "\n", "\n", "# less momentum for variance and expectation", "\n", "m", ".", "momentum", "=", "0.01", "# tf default is 0.99", "\n", "# m.momentum = 0.1  # pytorch default", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.aspp.ASPPConv.__init__": [[13, 20], ["torch.nn.Sequential.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dilation", ")", ":", "\n", "        ", "modules", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "\n", "super", "(", "ASPPConv", ",", "self", ")", ".", "__init__", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.aspp.ASPPPooling.__init__": [[23, 29], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ASPPPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aspp_pooling", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.aspp.ASPPPooling.set_image_pooling": [[31, 33], ["torch.nn.AvgPool2d"], "methods", ["None"], ["", "def", "set_image_pooling", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "aspp_pooling", "[", "0", "]", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "pool_size", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.aspp.ASPPPooling.forward": [[34, 38], ["aspp.ASPPPooling.aspp_pooling", "torch.nn.functional.interpolate"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "x", "=", "self", ".", "aspp_pooling", "(", "x", ")", "\n", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.aspp.ASPP.__init__": [[41, 57], ["torch.nn.Module.__init__", "modules.append", "torch.nn.ModuleList", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "atrous_rates", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# out_channels = 256", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "\n", "#rate1, rate2, rate3 = tuple(atrous_rates)", "\n", "#modules.append(ASPPConv(in_channels, out_channels, rate1))", "\n", "#modules.append(ASPPConv(in_channels, out_channels, rate2))", "\n", "#modules.append(ASPPConv(in_channels, out_channels, rate3))", "\n", "#modules.append(ASPPPooling(in_channels, out_channels))", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.aspp.ASPP.set_image_pooling": [[64, 66], ["aspp.ASPP.convs[].set_image_pooling"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabDecoder.set_image_pooling"], ["", "def", "set_image_pooling", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "convs", "[", "-", "1", "]", ".", "set_image_pooling", "(", "pool_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.aspp.ASPP.forward": [[67, 73], ["torch.cat", "torch.cat.append", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "res", ".", "append", "(", "conv", "(", "x", ")", ")", "\n", "", "res", "=", "torch", ".", "cat", "(", "res", ",", "dim", "=", "1", ")", "\n", "return", "res", "\n", "#return self.project(res)", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.BaseNetwork.__init__": [[11, 22], ["super().__init__", "LOG.info", "LOG.info"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["def", "__init__", "(", "self", ",", "net", ",", "shortname", ",", "stride", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "shortname", "=", "shortname", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "out_features", "=", "out_features", "\n", "\n", "# print(list(net.children()))", "\n", "LOG", ".", "info", "(", "'stride = %d'", ",", "self", ".", "stride", ")", "\n", "LOG", ".", "info", "(", "'output features = %d'", ",", "self", ".", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.BaseNetwork.forward": [[23, 25], ["basenetworks.BaseNetwork.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.__init__": [[28, 31], ["list", "LOG.debug", "resnet.children"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "resnet", ")", ":", "\n", "        ", "self", ".", "modules", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "\n", "LOG", ".", "debug", "(", "'modules = %s'", ",", "self", ".", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.input_block": [[32, 45], ["torch.nn.Sequential", "modules.pop", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair"], ["", "def", "input_block", "(", "self", ",", "use_pool", "=", "False", ",", "conv_stride", "=", "2", ",", "pool_stride", "=", "2", ")", ":", "\n", "        ", "modules", "=", "self", ".", "modules", "[", ":", "4", "]", "\n", "\n", "if", "not", "use_pool", ":", "\n", "            ", "modules", ".", "pop", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "if", "pool_stride", "!=", "2", ":", "\n", "                ", "modules", "[", "3", "]", ".", "stride", "=", "torch", ".", "nn", ".", "modules", ".", "utils", ".", "_pair", "(", "pool_stride", ")", "# pylint: disable=protected-access", "\n", "\n", "", "", "if", "conv_stride", "!=", "2", ":", "\n", "            ", "modules", "[", "0", "]", ".", "stride", "=", "torch", ".", "nn", ".", "modules", ".", "utils", ".", "_pair", "(", "conv_stride", ")", "# pylint: disable=protected-access", "\n", "\n", "", "return", "torch", ".", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.block2": [[46, 48], ["None"], "methods", ["None"], ["", "def", "block2", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "modules", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.block3": [[49, 51], ["None"], "methods", ["None"], ["", "def", "block3", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "modules", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.block4": [[52, 54], ["None"], "methods", ["None"], ["", "def", "block4", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "modules", "[", "6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.block5": [[55, 57], ["None"], "methods", ["None"], ["", "def", "block5", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "modules", "[", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.InvertedResidualK.__init__": [[62, 104], ["super().__init__", "torch.nn.Sequential", "ValueError", "torch.nn.Sequential", "torch.nn.Conv2d", "layer_norm", "torch.nn.ReLU", "basenetworks.InvertedResidualK.depthwise_conv", "layer_norm", "torch.nn.Conv2d", "layer_norm", "torch.nn.ReLU", "basenetworks.InvertedResidualK.depthwise_conv", "layer_norm", "torch.nn.Conv2d", "layer_norm", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.InvertedResidualK.depthwise_conv", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.InvertedResidualK.depthwise_conv"], ["def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "*", ",", "layer_norm", ",", "dilation", "=", "1", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "InvertedResidualK", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "1", "<=", "stride", "<=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'illegal stride value'", ")", "\n", "", "self", ".", "stride", "=", "stride", "\n", "\n", "branch_features", "=", "oup", "//", "2", "\n", "assert", "(", "self", ".", "stride", "!=", "1", ")", "or", "(", "inp", "==", "branch_features", "<<", "1", ")", "\n", "\n", "assert", "dilation", "==", "1", "or", "kernel_size", "==", "3", "\n", "padding", "=", "1", "\n", "if", "dilation", "!=", "1", ":", "\n", "            ", "padding", "=", "dilation", "\n", "", "elif", "kernel_size", "!=", "3", ":", "\n", "            ", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "branch1", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "self", ".", "depthwise_conv", "(", "inp", ",", "inp", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", ",", "\n", "layer_norm", "(", "inp", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "inp", ",", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "layer_norm", "(", "branch_features", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "branch2", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "inp", "if", "(", "self", ".", "stride", ">", "1", ")", "else", "branch_features", ",", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "layer_norm", "(", "branch_features", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "self", ".", "depthwise_conv", "(", "branch_features", ",", "branch_features", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", ",", "\n", "layer_norm", "(", "branch_features", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "branch_features", ",", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "layer_norm", "(", "branch_features", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.InvertedResidualK.depthwise_conv": [[106, 110], ["torch.nn.Conv2d"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "depthwise_conv", "(", "in_f", ",", "out_f", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "Conv2d", "(", "in_f", ",", "out_f", ",", "kernel_size", ",", "stride", ",", "padding", ",", "\n", "bias", "=", "bias", ",", "groups", "=", "in_f", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.InvertedResidualK.forward": [[111, 122], ["torchvision.models.shufflenetv2.channel_shuffle", "x.chunk", "torch.cat", "torch.cat", "basenetworks.InvertedResidualK.branch2", "basenetworks.InvertedResidualK.branch1", "basenetworks.InvertedResidualK.branch2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "x", "=", "args", "[", "0", "]", "\n", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "x1", ",", "x2", "=", "x", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "self", ".", "branch2", "(", "x2", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "self", ".", "branch1", "(", "x", ")", ",", "self", ".", "branch2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "out", "=", "torchvision", ".", "models", ".", "shufflenetv2", ".", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ShuffleNetV2K.__init__": [[127, 163], ["super().__init__", "torch.nn.Sequential", "zip", "torch.nn.Sequential", "len", "ValueError", "len", "ValueError", "torch.nn.Conv2d", "layer_norm", "torch.nn.ReLU", "range", "setattr", "torch.nn.Conv2d", "layer_norm", "torch.nn.ReLU", "basenetworks.InvertedResidualK", "seq.append", "torch.nn.Sequential", "basenetworks.InvertedResidualK"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "stages_repeats", ",", "stages_out_channels", ",", "*", ",", "layer_norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2K", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "layer_norm", "is", "None", ":", "\n", "            ", "layer_norm", "=", "torch", ".", "nn", ".", "BatchNorm2d", "\n", "\n", "", "if", "len", "(", "stages_repeats", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_repeats as list of 3 positive ints'", ")", "\n", "", "if", "len", "(", "stages_out_channels", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_out_channels as list of 5 positive ints'", ")", "\n", "", "self", ".", "_stage_out_channels", "=", "stages_out_channels", "\n", "\n", "input_channels", "=", "3", "\n", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "0", "]", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "layer_norm", "(", "output_channels", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "stage_names", "=", "[", "'stage{}'", ".", "format", "(", "i", ")", "for", "i", "in", "[", "2", ",", "3", ",", "4", "]", "]", "\n", "for", "name", ",", "repeats", ",", "output_channels", "in", "zip", "(", "\n", "stage_names", ",", "stages_repeats", ",", "self", ".", "_stage_out_channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "seq", "=", "[", "InvertedResidualK", "(", "input_channels", ",", "output_channels", ",", "2", ",", "\n", "layer_norm", "=", "layer_norm", ")", "]", "\n", "for", "_", "in", "range", "(", "repeats", "-", "1", ")", ":", "\n", "                ", "seq", ".", "append", "(", "InvertedResidualK", "(", "output_channels", ",", "output_channels", ",", "1", ",", "\n", "kernel_size", "=", "5", ",", "layer_norm", "=", "layer_norm", ")", ")", "\n", "", "setattr", "(", "self", ",", "name", ",", "torch", ".", "nn", ".", "Sequential", "(", "*", "seq", ")", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "-", "1", "]", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "layer_norm", "(", "output_channels", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ShuffleNetV2K.forward": [[165, 173], ["basenetworks.ShuffleNetV2K.conv1", "basenetworks.ShuffleNetV2K.stage2", "basenetworks.ShuffleNetV2K.stage3", "basenetworks.ShuffleNetV2K.stage4", "basenetworks.ShuffleNetV2K.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "x", "=", "args", "[", "0", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.BasicBlock.__init__": [[55, 72], ["torch.Module.__init__", "hrnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "hrnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.BasicBlock.forward": [[73, 90], ["hrnet.BasicBlock.conv1", "hrnet.BasicBlock.bn1", "hrnet.BasicBlock.relu", "hrnet.BasicBlock.conv2", "hrnet.BasicBlock.bn2", "hrnet.BasicBlock.relu", "hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.Bottleneck.__init__": [[96, 112], ["torch.Module.__init__", "hrnet.conv1x1", "norm_layer", "hrnet.conv3x3", "norm_layer", "hrnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.Bottleneck.forward": [[113, 134], ["hrnet.Bottleneck.conv1", "hrnet.Bottleneck.bn1", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.conv2", "hrnet.Bottleneck.bn2", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.conv3", "hrnet.Bottleneck.bn3", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionModule.__init__": [[137, 157], ["torch.Module.__init__", "hrnet.HighResolutionModule._check_branches", "hrnet.HighResolutionModule._make_branches", "hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionModule._check_branches": [[158, 177], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionModule._make_one_branch": [[178, 200], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "hrnet.HighResolutionModule.norm_layer", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "norm_layer", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionModule._make_branches": [[201, 209], ["range", "torch.ModuleList", "torch.ModuleList", "branches.append", "hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionModule._make_fuse_layers": [[210, 253], ["range", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "hrnet.HighResolutionModule.norm_layer", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "hrnet.HighResolutionModule.norm_layer", "torch.Conv2d", "torch.Conv2d", "hrnet.HighResolutionModule.norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "self", ".", "norm_layer", "(", "num_inchannels", "[", "i", "]", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "norm_layer", "(", "num_outchannels_conv3x3", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "norm_layer", "(", "num_outchannels_conv3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionModule.get_num_inchannels": [[254, 256], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionModule.forward": [[257, 284], ["range", "range", "len", "range", "x_fuse.append", "hrnet.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionNet.__init__": [[294, 352], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "hrnet.HighResolutionNet.norm_layer", "torch.Conv2d", "torch.Conv2d", "hrnet.HighResolutionNet.norm_layer", "torch.ReLU", "torch.ReLU", "hrnet.HighResolutionNet._make_layer", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "\n", "cfg", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "norm_layer", "=", "norm_layer", "\n", "# stem network", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "self", ".", "norm_layer", "(", "64", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "self", ".", "norm_layer", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# stage 1", "\n", "self", ".", "stage1_cfg", "=", "cfg", "[", "'STAGE1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "\n", "# stage 2", "\n", "self", ".", "stage2_cfg", "=", "cfg", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 3", "\n", "self", ".", "stage3_cfg", "=", "cfg", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 4", "\n", "self", ".", "stage4_cfg", "=", "cfg", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "#self.incre_modules, self.downsamp_modules, self.final_layer =\\", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionNet._make_head": [[355, 400], ["enumerate", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "hrnet.HighResolutionNet._make_layer", "torch.ModuleList.append", "torch.Sequential", "torch.Sequential", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "len", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_head", "(", "self", ",", "pre_stage_channels", ")", ":", "\n", "        ", "head_block", "=", "Bottleneck", "\n", "head_channels", "=", "[", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "\n", "# Increasing the #channels on each resolution", "\n", "# from C, 2C, 4C, 8C to 128, 256, 512, 1024", "\n", "incre_modules", "=", "[", "]", "\n", "for", "i", ",", "channels", "in", "enumerate", "(", "pre_stage_channels", ")", ":", "\n", "            ", "incre_module", "=", "self", ".", "_make_layer", "(", "head_block", ",", "\n", "channels", ",", "\n", "head_channels", "[", "i", "]", ",", "\n", "1", ")", "\n", "incre_modules", ".", "append", "(", "incre_module", ")", "\n", "", "incre_modules", "=", "nn", ".", "ModuleList", "(", "incre_modules", ")", "\n", "\n", "# downsampling modules", "\n", "downsamp_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pre_stage_channels", ")", "-", "1", ")", ":", "\n", "            ", "in_channels", "=", "head_channels", "[", "i", "]", "*", "head_block", ".", "expansion", "\n", "out_channels", "=", "head_channels", "[", "i", "+", "1", "]", "*", "head_block", ".", "expansion", "\n", "\n", "downsamp_module", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "downsamp_modules", ".", "append", "(", "downsamp_module", ")", "\n", "", "downsamp_modules", "=", "nn", ".", "ModuleList", "(", "downsamp_modules", ")", "\n", "\n", "final_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "head_channels", "[", "3", "]", "*", "head_block", ".", "expansion", ",", "\n", "out_channels", "=", "2048", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "return", "incre_modules", ",", "downsamp_modules", ",", "final_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionNet._make_transition_layer": [[401, 435], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "hrnet.HighResolutionNet.norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "hrnet.HighResolutionNet.norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "self", ".", "norm_layer", "(", "num_channels_cur_layer", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "norm_layer", "(", "outchannels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionNet._make_layer": [[436, 452], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "hrnet.HighResolutionNet.norm_layer", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionNet._make_stage": [[453, 483], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ",", "\n", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.HighResolutionNet.forward": [[484, 544], ["hrnet.HighResolutionNet.conv1", "hrnet.HighResolutionNet.bn1", "hrnet.HighResolutionNet.relu", "hrnet.HighResolutionNet.conv2", "hrnet.HighResolutionNet.bn2", "hrnet.HighResolutionNet.relu", "hrnet.HighResolutionNet.layer1", "range", "hrnet.HighResolutionNet.stage2", "range", "hrnet.HighResolutionNet.stage3", "range", "hrnet.HighResolutionNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "if", "i", "<", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "if", "i", "<", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "#if True:", "\n", "#    # Classification Head", "\n", "#    x_list = []", "\n", "#    y = self.incre_modules[0](y_list[0])", "\n", "#    x_list.append(y)", "\n", "#    for i in range(len(self.downsamp_modules)):", "\n", "#        y = self.incre_modules[i + 1](y_list[i + 1]) + \\", "\n", "#            self.downsamp_modules[i](y)", "\n", "#        x_list.append(y)", "\n", "\n", "#    y = self.final_layer(y)", "\n", "#    del x_list[-1]", "\n", "#    x_list.append(y)", "\n", "\n", "outputs", "=", "{", "}", "\n", "outputs", "[", "'res2'", "]", "=", "x", "[", "0", "]", "# 1/4", "\n", "outputs", "[", "'res3'", "]", "=", "x", "[", "1", "]", "# 1/8", "\n", "outputs", "[", "'res4'", "]", "=", "x", "[", "2", "]", "# 1/16", "\n", "outputs", "[", "'res5'", "]", "=", "x", "[", "3", "]", "# 1/32", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.conv3x3": [[41, 45], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.conv1x1": [[47, 50], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet._hrnet": [[546, 561], ["hrnet.HighResolutionNet", "int", "torchvision.models.utils.load_state_dict_from_url", "HighResolutionNet.load_state_dict", "os.environ.get", "logger.info"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "", "def", "_hrnet", "(", "arch", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "from", ".", "hrnet_config", "import", "MODEL_CONFIGS", "\n", "\n", "model", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "arch", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "if", "int", "(", "os", ".", "environ", ".", "get", "(", "\"mapillary_pretrain\"", ",", "0", ")", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"load the mapillary pretrained hrnet-w48 weights.\"", ")", "\n", "model_url", "=", "model_urls", "[", "'hrnet48_mapillary_pretrain'", "]", "\n", "", "else", ":", "\n", "            ", "model_url", "=", "model_urls", "[", "arch", "]", "\n", "\n", "", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.hrnet18": [[563, 568], ["hrnet._hrnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet._hrnet"], ["", "def", "hrnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"HRNet-18 model\n    \"\"\"", "\n", "return", "_hrnet", "(", "'hrnet18'", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.hrnet32": [[570, 575], ["hrnet._hrnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet._hrnet"], ["", "def", "hrnet32", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"HRNet-32 model\n    \"\"\"", "\n", "return", "_hrnet", "(", "'hrnet32'", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet.hrnet48": [[577, 582], ["hrnet._hrnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.hrnet._hrnet"], ["", "def", "hrnet48", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"HRNet-48 model\n    \"\"\"", "\n", "return", "_hrnet", "(", "'hrnet48'", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.__init__": [[71, 133], ["LOG.info", "numpy.zeros", "print", "train_profile.replace", "LOG.info", "prof.export_chrome_trace", "torch.autograd.profiler.profile", "torch.autograd.profiler.profile", "torch.autograd.profiler.profile", "torch.autograd.profiler.profile", "trainer.Trainer.train_batch_without_profile", "prof.key_averages"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "optimizer", ",", "out", ",", "*", ",", "\n", "lr_scheduler", "=", "None", ",", "\n", "log_interval", "=", "10", ",", "\n", "device", "=", "None", ",", "\n", "fix_batch_norm", "=", "False", ",", "\n", "stride_apply", "=", "1", ",", "\n", "ema_decay", "=", "None", ",", "\n", "train_profile", "=", "None", ",", "\n", "num_class", "=", "None", ",", "\n", "model_meta_data", "=", "None", ",", "\n", "mixed_precision", "=", "False", ",", "\n", "clip_grad_norm", "=", "0.0", ",", "\n", "val_interval", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "out", "=", "out", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "fix_batch_norm", "=", "fix_batch_norm", "\n", "self", ".", "stride_apply", "=", "stride_apply", "\n", "\n", "self", ".", "ema_decay", "=", "ema_decay", "\n", "self", ".", "ema", "=", "None", "\n", "self", ".", "ema_restore_params", "=", "None", "\n", "\n", "self", ".", "clip_grad_norm", "=", "clip_grad_norm", "\n", "self", ".", "n_clipped_grad", "=", "0", "\n", "self", ".", "max_norm", "=", "0.0", "\n", "\n", "self", ".", "model_meta_data", "=", "model_meta_data", "\n", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "val_hists", "=", "np", ".", "zeros", "(", "(", "num_class", ",", "num_class", ")", ")", "if", "self", ".", "num_class", "is", "not", "None", "else", "None", "\n", "\n", "self", ".", "val_interval", "=", "val_interval", "\n", "\n", "if", "train_profile", ":", "\n", "# monkey patch to profile self.train_batch()", "\n", "            ", "self", ".", "trace_counter", "=", "0", "\n", "self", ".", "train_batch_without_profile", "=", "self", ".", "train_batch", "\n", "\n", "def", "train_batch_with_profile", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "with", "torch", ".", "autograd", ".", "profiler", ".", "profile", "(", "use_cuda", "=", "True", ")", "as", "prof", ":", "\n", "                    ", "result", "=", "self", ".", "train_batch_without_profile", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "print", "(", "prof", ".", "key_averages", "(", ")", ")", "\n", "self", ".", "trace_counter", "+=", "1", "\n", "tracefilename", "=", "train_profile", ".", "replace", "(", "\n", "'.json'", ",", "'.{}.json'", ".", "format", "(", "self", ".", "trace_counter", ")", ")", "\n", "LOG", ".", "info", "(", "'writing trace file %s'", ",", "tracefilename", ")", "\n", "prof", ".", "export_chrome_trace", "(", "tracefilename", ")", "\n", "return", "result", "\n", "\n", "", "self", ".", "train_batch", "=", "train_batch_with_profile", "\n", "\n", "", "LOG", ".", "info", "(", "{", "\n", "'type'", ":", "'config'", ",", "\n", "'field_names'", ":", "self", ".", "loss", ".", "field_names", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.lr": [[135, 138], ["None"], "methods", ["None"], ["", "def", "lr", "(", "self", ")", ":", "\n", "        ", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "return", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.step_ema": [[139, 145], ["zip", "trainer.Trainer.model.parameters", "ema_p.mul_().add_", "ema_p.mul_"], "methods", ["None"], ["", "", "def", "step_ema", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ema", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "for", "p", ",", "ema_p", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "ema", ")", ":", "\n", "            ", "ema_p", ".", "mul_", "(", "1.0", "-", "self", ".", "ema_decay", ")", ".", "add_", "(", "p", ".", "data", ",", "alpha", "=", "self", ".", "ema_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.apply_ema": [[146, 155], ["LOG.info", "copy.deepcopy", "zip", "trainer.Trainer.model.parameters", "p.data.copy_", "trainer.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "", "def", "apply_ema", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ema", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "LOG", ".", "info", "(", "'applying ema'", ")", "\n", "self", ".", "ema_restore_params", "=", "copy", ".", "deepcopy", "(", "\n", "[", "p", ".", "data", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", ")", "\n", "for", "p", ",", "ema_p", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "ema", ")", ":", "\n", "            ", "p", ".", "data", ".", "copy_", "(", "ema_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.ema_restore": [[156, 164], ["LOG.info", "zip", "trainer.Trainer.model.parameters", "p.data.copy_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "", "def", "ema_restore", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ema_restore_params", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "LOG", ".", "info", "(", "'restoring params from before ema'", ")", "\n", "for", "p", ",", "ema_p", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "ema_restore_params", ")", ":", "\n", "            ", "p", ".", "data", ".", "copy_", "(", "ema_p", ")", "\n", "", "self", ".", "ema_restore_params", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.loop": [[165, 179], ["range", "trainer.Trainer.train", "warnings.catch_warnings", "warnings.simplefilter", "range", "trainer.Trainer.write_model", "trainer.Trainer.val", "trainer.Trainer.lr_scheduler.step", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.train", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.write_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.val", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.step"], ["", "def", "loop", "(", "self", ",", "train_scenes", ",", "val_scenes", ",", "epochs", ",", "start_epoch", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "           ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "               ", "warnings", ".", "simplefilter", "(", "'ignore'", ")", "\n", "for", "_", "in", "range", "(", "start_epoch", "*", "len", "(", "train_scenes", ")", ")", ":", "\n", "                   ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "", "self", ".", "epochs", "=", "epochs", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "epochs", ")", ":", "\n", "            ", "self", ".", "train", "(", "train_scenes", ",", "epoch", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "val_interval", "==", "0", "or", "epoch", "+", "1", "==", "epochs", ":", "\n", "                ", "self", ".", "write_model", "(", "epoch", "+", "1", ",", "epoch", "+", "1", "==", "epochs", ")", "\n", "self", ".", "val", "(", "val_scenes", ",", "epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.train_batch": [[180, 218], ["trainer.Trainer.model", "trainer.Trainer.loss", "data.to.to.to", "isinstance", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "max", "trainer.Trainer.optimizer.step", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.step_ema", "isinstance", "trainer.Trainer.lr", "trainer.Trainer.model.parameters", "float", "print", "float", "targets.to.to.items", "targets.to.to.to", "float", "loss.item", "float", "t.to", "targets.to.to.update", "l.item", "t.to"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.step_ema", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.lr", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update"], ["", "", "", "def", "train_batch", "(", "self", ",", "data", ",", "targets", ",", "apply_gradients", "=", "True", ")", ":", "# pylint: disable=method-hidden", "\n", "        ", "if", "self", ".", "device", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "if", "isinstance", "(", "targets", ",", "list", ")", ":", "\n", "                ", "targets", "=", "[", "[", "t", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "for", "t", "in", "head", "]", "for", "head", "in", "targets", "]", "\n", "", "elif", "isinstance", "(", "targets", ",", "dict", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "targets", ".", "items", "(", ")", ":", "\n", "                    ", "tt", "=", "{", "k", ":", "[", "t", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "for", "t", "in", "v", "]", "}", "\n", "targets", ".", "update", "(", "tt", ")", "\n", "", "", "else", ":", "\n", "                ", "targets", "=", "targets", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# train encoder", "\n", "", "", "outputs", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", ",", "head_losses", "=", "self", ".", "loss", "(", "outputs", ",", "targets", ")", "\n", "\n", "if", "loss", "is", "not", "None", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "", "if", "self", ".", "clip_grad_norm", ":", "\n", "            ", "max_norm", "=", "self", ".", "clip_grad_norm", "/", "self", ".", "lr", "(", ")", "\n", "total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "max_norm", ",", "norm_type", "=", "float", "(", "'inf'", ")", ")", "\n", "self", ".", "max_norm", "=", "max", "(", "float", "(", "total_norm", ")", ",", "self", ".", "max_norm", ")", "\n", "if", "total_norm", ">", "max_norm", ":", "\n", "                ", "self", ".", "n_clipped_grad", "+=", "1", "\n", "print", "(", "\n", "'CLIPPED GRAD NORM: total norm before clip: {}, max norm: {}'", "\n", "''", ".", "format", "(", "total_norm", ",", "max_norm", ")", ")", "\n", "", "", "if", "apply_gradients", ":", "\n", "            ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "step_ema", "(", ")", "\n", "\n", "", "return", "(", "\n", "float", "(", "loss", ".", "item", "(", ")", ")", "if", "loss", "is", "not", "None", "else", "None", ",", "\n", "[", "float", "(", "l", ".", "item", "(", ")", ")", "if", "l", "is", "not", "None", "else", "None", "\n", "for", "l", "in", "head_losses", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.val_batch": [[220, 250], ["data.to.to.to", "isinstance", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.model", "trainer.Trainer.loss", "torch.interpolate", "torch.interpolate", "metric.fast_hist", "isinstance", "float", "targets.to.to.items", "targets.to.to.to", "loss.item", "float", "t.to", "targets.to.to.update", "l.item", "t.to"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.metric.fast_hist", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update"], ["", "def", "val_batch", "(", "self", ",", "data", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "device", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "if", "isinstance", "(", "targets", ",", "list", ")", ":", "\n", "                ", "targets", "=", "[", "[", "t", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "for", "t", "in", "head", "]", "for", "head", "in", "targets", "]", "\n", "", "elif", "isinstance", "(", "targets", ",", "dict", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "targets", ".", "items", "(", ")", ":", "\n", "                    ", "tt", "=", "{", "k", ":", "[", "t", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "for", "t", "in", "v", "]", "}", "\n", "targets", ".", "update", "(", "tt", ")", "\n", "", "", "else", ":", "\n", "                ", "targets", "=", "targets", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", ",", "head_losses", "=", "self", ".", "loss", "(", "outputs", ",", "targets", ")", "\n", "\n", "", "if", "'semantic'", "in", "outputs", ":", "\n", "            ", "targets", "=", "targets", "[", "'semantic'", "]", "[", "0", "]", "\n", "h", ",", "w", "=", "targets", ".", "shape", "[", "1", "]", ",", "targets", ".", "shape", "[", "2", "]", "\n", "pred", "=", "F", ".", "interpolate", "(", "outputs", "[", "'semantic'", "]", "[", "0", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "hist", "=", "fast_hist", "(", "pred", ",", "targets", ",", "self", ".", "num_class", ")", "\n", "", "else", ":", "\n", "            ", "hist", "=", "None", "\n", "\n", "", "return", "(", "\n", "float", "(", "loss", ".", "item", "(", ")", ")", "if", "loss", "is", "not", "None", "else", "None", ",", "\n", "[", "float", "(", "l", ".", "item", "(", ")", ")", "if", "l", "is", "not", "None", "else", "None", "\n", "for", "l", "in", "head_losses", "]", ",", "\n", "hist", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.train": [[252, 333], ["time.time", "trainer.Trainer.model.train", "trainer.Trainer.ema_restore", "time.time", "trainer.Trainer.optimizer.zero_grad", "enumerate", "trainer.Trainer.apply_ema", "LOG.info", "trainer.Trainer.model.modules", "time.time", "trainer.Trainer.train_batch", "enumerate", "time.time", "isinstance", "time.time", "time.time", "hasattr", "LOG.info", "copy.deepcopy", "trainer.Trainer.lr_scheduler.step", "round", "round", "m.eval", "len", "round", "round", "round", "batch_info.update", "round", "trainer.Trainer.lr", "round", "trainer.Trainer.loss.batch_meta", "len", "zip", "time.time", "round", "trainer.Trainer.model.parameters", "max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.train", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.ema_restore", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.apply_ema", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.train_batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.lr", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.MultiHeadLossAutoTune.batch_meta", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time"], ["", "def", "train", "(", "self", ",", "scenes", ",", "epoch", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "fix_batch_norm", ":", "\n", "            ", "for", "m", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "(", "torch", ".", "nn", ".", "BatchNorm1d", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "", "self", ".", "ema_restore", "(", ")", "\n", "self", ".", "ema", "=", "None", "\n", "\n", "epoch_loss", "=", "0.0", "\n", "head_epoch_losses", "=", "None", "\n", "head_epoch_counts", "=", "None", "\n", "last_batch_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "_", ")", "in", "enumerate", "(", "scenes", ")", ":", "\n", "            ", "preprocess_time", "=", "time", ".", "time", "(", ")", "-", "last_batch_end", "\n", "\n", "#adjust_learning_rate(optimizer=self.optimizer,", "\n", "#                     epoch=epoch, epochs=self.epochs,", "\n", "#                     lr=self.lr(), i_iter=batch_idx,", "\n", "#                     iters_per_epoch=len(scenes))", "\n", "\n", "batch_start", "=", "time", ".", "time", "(", ")", "\n", "apply_gradients", "=", "batch_idx", "%", "self", ".", "stride_apply", "==", "0", "\n", "loss", ",", "head_losses", "=", "self", ".", "train_batch", "(", "data", ",", "target", ",", "apply_gradients", ")", "\n", "\n", "# update epoch accumulates", "\n", "if", "loss", "is", "not", "None", ":", "\n", "                ", "epoch_loss", "+=", "loss", "\n", "", "if", "head_epoch_losses", "is", "None", ":", "\n", "                ", "head_epoch_losses", "=", "[", "0.0", "for", "_", "in", "head_losses", "]", "\n", "head_epoch_counts", "=", "[", "0", "for", "_", "in", "head_losses", "]", "\n", "", "for", "i", ",", "head_loss", "in", "enumerate", "(", "head_losses", ")", ":", "\n", "                ", "if", "head_loss", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "head_epoch_losses", "[", "i", "]", "+=", "head_loss", "\n", "head_epoch_counts", "[", "i", "]", "+=", "1", "\n", "\n", "", "batch_time", "=", "time", ".", "time", "(", ")", "-", "batch_start", "\n", "\n", "# write training loss", "\n", "if", "batch_idx", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "batch_info", "=", "{", "\n", "'type'", ":", "'train'", ",", "\n", "'epoch'", ":", "epoch", ",", "'batch'", ":", "batch_idx", ",", "'n_batches'", ":", "len", "(", "scenes", ")", ",", "\n", "'time'", ":", "round", "(", "batch_time", ",", "3", ")", ",", "\n", "'data_time'", ":", "round", "(", "preprocess_time", ",", "3", ")", ",", "\n", "'lr'", ":", "round", "(", "self", ".", "lr", "(", ")", ",", "8", ")", ",", "\n", "'loss'", ":", "round", "(", "loss", ",", "3", ")", "if", "loss", "is", "not", "None", "else", "None", ",", "\n", "'head_losses'", ":", "[", "round", "(", "l", ",", "3", ")", "if", "l", "is", "not", "None", "else", "None", "\n", "for", "l", "in", "head_losses", "]", ",", "\n", "}", "\n", "if", "hasattr", "(", "self", ".", "loss", ",", "'batch_meta'", ")", ":", "\n", "                    ", "batch_info", ".", "update", "(", "self", ".", "loss", ".", "batch_meta", "(", ")", ")", "\n", "", "LOG", ".", "info", "(", "batch_info", ")", "\n", "\n", "# initialize ema", "\n", "", "if", "self", ".", "ema", "is", "None", "and", "self", ".", "ema_decay", ":", "\n", "                ", "self", ".", "ema", "=", "copy", ".", "deepcopy", "(", "[", "p", ".", "data", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "]", ")", "\n", "\n", "# update learning rate", "\n", "", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "last_batch_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "self", ".", "apply_ema", "(", ")", "\n", "LOG", ".", "info", "(", "{", "\n", "'type'", ":", "'train-epoch'", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'loss'", ":", "round", "(", "epoch_loss", "/", "len", "(", "scenes", ")", ",", "5", ")", ",", "\n", "'head_losses'", ":", "[", "round", "(", "l", "/", "max", "(", "1", ",", "c", ")", ",", "5", ")", "\n", "for", "l", ",", "c", "in", "zip", "(", "head_epoch_losses", ",", "head_epoch_counts", ")", "]", ",", "\n", "'time'", ":", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "1", ")", ",", "\n", "'n_clipped_grad'", ":", "self", ".", "n_clipped_grad", ",", "\n", "'max_norm'", ":", "self", ".", "max_norm", ",", "\n", "}", ")", "\n", "self", ".", "n_clipped_grad", "=", "0", "\n", "self", ".", "max_norm", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.val": [[334, 380], ["time.time", "trainer.Trainer.model.train", "enumerate", "LOG.info", "trainer.Trainer.model.modules", "trainer.Trainer.val_batch", "enumerate", "time.time", "round", "isinstance", "round", "round", "m.eval", "numpy.nanmean", "round", "metric.per_class_iu", "len", "zip", "max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.train", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.val_batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.metric.per_class_iu"], ["", "def", "val", "(", "self", ",", "scenes", ",", "epoch", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Train mode implies outputs are for losses, so have to use it here.", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "fix_batch_norm", ":", "\n", "            ", "for", "m", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "(", "torch", ".", "nn", ".", "BatchNorm1d", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "", "epoch_loss", "=", "0.0", "\n", "head_epoch_losses", "=", "None", "\n", "head_epoch_counts", "=", "None", "\n", "for", "ii", ",", "(", "data", ",", "target", ",", "_", ")", "in", "enumerate", "(", "scenes", ")", ":", "\n", "            ", "loss", ",", "head_losses", ",", "hist", "=", "self", ".", "val_batch", "(", "data", ",", "target", ")", "\n", "\n", "if", "self", ".", "val_hists", "is", "not", "None", "and", "hist", "is", "not", "None", ":", "\n", "                ", "self", ".", "val_hists", "+=", "hist", "\n", "\n", "# update epoch accumulates", "\n", "", "if", "loss", "is", "not", "None", ":", "\n", "                ", "epoch_loss", "+=", "loss", "\n", "", "if", "head_epoch_losses", "is", "None", ":", "\n", "                ", "head_epoch_losses", "=", "[", "0.0", "for", "_", "in", "head_losses", "]", "\n", "head_epoch_counts", "=", "[", "0", "for", "_", "in", "head_losses", "]", "\n", "", "for", "i", ",", "head_loss", "in", "enumerate", "(", "head_losses", ")", ":", "\n", "                ", "if", "head_loss", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "head_epoch_losses", "[", "i", "]", "+=", "head_loss", "\n", "head_epoch_counts", "[", "i", "]", "+=", "1", "\n", "\n", "", "", "eval_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "if", "self", ".", "val_hists", "is", "not", "None", ":", "\n", "            ", "mIoU", "=", "round", "(", "np", ".", "nanmean", "(", "per_class_iu", "(", "self", ".", "val_hists", ")", ")", "*", "100", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "mIoU", "=", "None", "\n", "\n", "", "LOG", ".", "info", "(", "{", "\n", "'type'", ":", "'val-epoch'", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'loss'", ":", "round", "(", "epoch_loss", "/", "len", "(", "scenes", ")", ",", "5", ")", ",", "\n", "'head_losses'", ":", "[", "round", "(", "l", "/", "max", "(", "1", ",", "c", ")", ",", "5", ")", "\n", "for", "l", ",", "c", "in", "zip", "(", "head_epoch_losses", ",", "head_epoch_counts", ")", "]", ",", "\n", "'time'", ":", "round", "(", "eval_time", ",", "1", ")", ",", "\n", "'mIoU'", ":", "mIoU", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.Trainer.write_model": [[382, 412], ["trainer.Trainer.model.cpu", "isinstance", "LOG.debug", "torch.save", "torch.save", "torch.save", "torch.save", "LOG.debug", "trainer.Trainer.model.to", "LOG.debug", "LOG.debug", "hashlib.sha256", "hashlib.sha256.hexdigest", "trainer.Trainer.out.rpartition", "shutil.copyfile", "open", "iter", "hashlib.sha256.update", "f.read"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.iter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update"], ["", "def", "write_model", "(", "self", ",", "epoch", ",", "final", "=", "True", ")", ":", "\n", "        ", "self", ".", "model", ".", "cpu", "(", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "LOG", ".", "debug", "(", "'Writing a dataparallel model.'", ")", "\n", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "LOG", ".", "debug", "(", "'Writing a single-thread model.'", ")", "\n", "model", "=", "self", ".", "model", "\n", "\n", "", "filename", "=", "'{}.epoch{:03d}'", ".", "format", "(", "self", ".", "out", ",", "epoch", ")", "\n", "LOG", ".", "debug", "(", "'about to write model'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'model'", ":", "model", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'meta'", ":", "self", ".", "model_meta_data", ",", "\n", "}", ",", "filename", ")", "\n", "LOG", ".", "debug", "(", "'model written'", ")", "\n", "\n", "if", "final", ":", "\n", "            ", "sha256_hash", "=", "hashlib", ".", "sha256", "(", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "for", "byte_block", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "8192", ")", ",", "b''", ")", ":", "\n", "                    ", "sha256_hash", ".", "update", "(", "byte_block", ")", "\n", "", "", "file_hash", "=", "sha256_hash", ".", "hexdigest", "(", ")", "\n", "outname", ",", "_", ",", "outext", "=", "self", ".", "out", ".", "rpartition", "(", "'.'", ")", "\n", "final_filename", "=", "'{}-{}.{}'", ".", "format", "(", "outname", ",", "file_hash", "[", ":", "8", "]", ",", "outext", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "final_filename", ")", "\n", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.get_lip_palette": [[32, 54], ["None"], "function", ["None"], ["", "", "", "def", "get_lip_palette", "(", ")", ":", "\n", "    ", "palette", "=", "[", "0", ",", "0", ",", "0", ",", "\n", "128", ",", "0", ",", "0", ",", "\n", "255", ",", "0", ",", "0", ",", "\n", "0", ",", "85", ",", "0", ",", "\n", "170", ",", "0", ",", "51", ",", "\n", "255", ",", "85", ",", "0", ",", "\n", "0", ",", "0", ",", "85", ",", "\n", "0", ",", "119", ",", "221", ",", "\n", "85", ",", "85", ",", "0", ",", "\n", "0", ",", "85", ",", "85", ",", "\n", "85", ",", "51", ",", "0", ",", "\n", "52", ",", "86", ",", "128", ",", "\n", "0", ",", "128", ",", "0", ",", "\n", "0", ",", "0", ",", "255", ",", "\n", "51", ",", "170", ",", "221", ",", "\n", "0", ",", "255", ",", "255", ",", "\n", "85", ",", "255", ",", "170", ",", "\n", "170", ",", "255", ",", "85", ",", "\n", "255", ",", "255", ",", "0", ",", "\n", "255", ",", "170", ",", "0", "]", "\n", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.trainer.adjust_learning_rate": [[59, 68], ["None"], "function", ["None"], ["def", "adjust_learning_rate", "(", "lr", ",", "epochs", ",", "optimizer", ",", "epoch", ",", "i_iter", ",", "iters_per_epoch", ",", "method", "=", "'poly'", ")", ":", "\n", "    ", "if", "method", "==", "'poly'", ":", "\n", "        ", "current_step", "=", "epoch", "*", "iters_per_epoch", "+", "i_iter", "\n", "max_step", "=", "epochs", "*", "iters_per_epoch", "\n", "lr", "=", "lr", "*", "(", "(", "1", "-", "current_step", "/", "max_step", ")", "**", "0.9", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "lr", "\n", "", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.CascadeRefinementHeadXception.__init__": [[20, 69], ["torch.Module.__init__", "len", "functools.partial", "decoder_1025.HRNetFusionModule", "decoder_1025.HRNetFusionModule", "decoder_1025.HRNetFusionModule", "decoder_1025.HRNetFusionModule", "decoder_1025.OCR", "range", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "class_key", ",", "head_channels", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", ",", "ParsingMeta", "]", ")", ":", "\n", "        ", "super", "(", "CascadeRefinementHeadXception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "num_head", "=", "len", "(", "num_classes", ")", "\n", "self", ".", "class_key", "=", "class_key", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "hrnet_channels", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "\n", "padding", "=", "2", ",", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "\n", "# feature fusion", "\n", "self", ".", "res5_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "2048", ",", "\n", "output_channels", "=", "512", ")", "\n", "self", ".", "res4_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "728", "+", "512", ",", "\n", "output_channels", "=", "256", ")", "\n", "self", ".", "res3_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "728", "+", "256", ",", "\n", "output_channels", "=", "128", ")", "\n", "self", ".", "res2_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "256", "+", "128", ",", "\n", "output_channels", "=", "64", ")", "\n", "\n", "# feature modulation", "\n", "#self.res4_ocr = OCR(self.num_classes, in_channels=728,", "\n", "#                    key_channels=128, out_channels=728)", "\n", "\n", "#self.res3_ocr = OCR(self.num_classes, in_channels=728,", "\n", "#                    key_channels=128, out_channels=728)", "\n", "\n", "self", ".", "res2_ocr", "=", "OCR", "(", "self", ".", "num_classes", ",", "in_channels", "=", "64", ",", "\n", "key_channels", "=", "64", ",", "out_channels", "=", "64", ")", "\n", "\n", "# classifier", "\n", "classifiers", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "                ", "if", "class_key", "[", "i", "]", "==", "'semantic'", "or", "j", "==", "5", ":", "\n", "                    ", "in_channels", "=", "hrnet_channels", "[", "j", "-", "2", "]", "\n", "", "else", ":", "\n", "                    ", "in_channels", "=", "hrnet_channels", "[", "j", "-", "2", "]", "+", "2", "# with offset channels", "\n", "\n", "", "classifiers", "[", "class_key", "[", "i", "]", "+", "'-{}'", ".", "format", "(", "j", ")", "]", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "in_channels", ",", "head_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "i", "]", ",", "1", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "classifiers", "=", "nn", ".", "ModuleDict", "(", "classifiers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.CascadeRefinementHeadXception.stride": [[70, 72], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.CascadeRefinementHeadXception.forward": [[73, 125], ["collections.OrderedDict", "decoder_1025.CascadeRefinementHeadXception.res5_fuse", "decoder_1025.CascadeRefinementHeadXception.res4_fuse", "decoder_1025.CascadeRefinementHeadXception.res3_fuse", "decoder_1025.CascadeRefinementHeadXception.res2_fuse", "decoder_1025.CascadeRefinementHeadXception.res2_ocr", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "res2", "=", "features", "[", "'res2'", "]", "\n", "res3", "=", "features", "[", "'res3'", "]", "\n", "res4", "=", "features", "[", "'res4'", "]", "\n", "res5", "=", "features", "[", "'res5'", "]", "\n", "\n", "pred", "=", "OrderedDict", "(", ")", "\n", "\n", "res5_feature", "=", "self", ".", "res5_fuse", "(", "res5", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "pred", "[", "key", "+", "'-5'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-5'", "]", "(", "res5_feature", ")", "\n", "\n", "", "res4_feature", "=", "self", ".", "res4_fuse", "(", "res4", ",", "res5_feature", ")", "\n", "#res4_feature = self.res4_ocr(res4_feature, pred['semantic-5'])", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "if", "key", "==", "'semantic'", ":", "\n", "                ", "pred", "[", "key", "+", "'-4'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-4'", "]", "(", "res4_feature", ")", "\n", "", "else", ":", "\n", "                ", "offset_pred", "=", "F", ".", "interpolate", "(", "pred", "[", "'offset-5'", "]", ",", "\n", "size", "=", "res4_feature", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "offset_pred", "*=", "2", "\n", "residual", "=", "self", ".", "classifiers", "[", "key", "+", "'-4'", "]", "(", "torch", ".", "cat", "(", "[", "res4_feature", ",", "offset_pred", "]", ",", "dim", "=", "1", ")", ")", "\n", "pred", "[", "key", "+", "'-4'", "]", "=", "offset_pred", "+", "residual", "\n", "\n", "", "", "res3_feature", "=", "self", ".", "res3_fuse", "(", "res3", ",", "res4_feature", ")", "\n", "#res3_feature = self.res3_ocr(res3_feature, pred['semantic-4'])", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "if", "key", "==", "'semantic'", ":", "\n", "                ", "pred", "[", "key", "+", "'-3'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-3'", "]", "(", "res3_feature", ")", "\n", "", "else", ":", "\n", "                ", "offset_pred", "=", "F", ".", "interpolate", "(", "pred", "[", "'offset-4'", "]", ",", "\n", "size", "=", "res3_feature", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "offset_pred", "*=", "2", "\n", "residual", "=", "self", ".", "classifiers", "[", "key", "+", "'-3'", "]", "(", "torch", ".", "cat", "(", "[", "res3_feature", ",", "offset_pred", "]", ",", "dim", "=", "1", ")", ")", "\n", "pred", "[", "key", "+", "'-3'", "]", "=", "offset_pred", "+", "residual", "\n", "\n", "", "", "res2_feature", "=", "self", ".", "res2_fuse", "(", "res2", ",", "res3_feature", ")", "\n", "res2_feature", "=", "self", ".", "res2_ocr", "(", "res2_feature", ",", "pred", "[", "'semantic-3'", "]", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "if", "key", "==", "'semantic'", ":", "\n", "                ", "pred", "[", "key", "+", "'-2'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-2'", "]", "(", "res2_feature", ")", "\n", "", "else", ":", "\n", "                ", "offset_pred", "=", "F", ".", "interpolate", "(", "pred", "[", "'offset-3'", "]", ",", "\n", "size", "=", "res2_feature", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "offset_pred", "*=", "2", "\n", "residual", "=", "self", ".", "classifiers", "[", "key", "+", "'-2'", "]", "(", "torch", ".", "cat", "(", "[", "res2_feature", ",", "offset_pred", "]", ",", "dim", "=", "1", ")", ")", "\n", "pred", "[", "key", "+", "'-2'", "]", "=", "offset_pred", "+", "residual", "\n", "\n", "", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.CascadeRefinementHeadXception.voting": [[126, 162], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "semantic.get_device", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "xx.to", "yy.to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "segm_pred.bool.bool.bool", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "indexs.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.bincount", "numpy.reshape", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "list", "list", "range", "range", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "indexs.cpu().numpy.cpu().numpy.cpu", "numpy.max", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "voting", "(", "self", ",", "semantic", ",", "offset", ")", ":", "\n", "        ", "bs", "=", "semantic", ".", "shape", "[", "0", "]", "\n", "hh", ",", "ww", "=", "semantic", ".", "shape", "[", "2", "]", ",", "semantic", ".", "shape", "[", "3", "]", "\n", "\n", "vote_map", "=", "torch", ".", "zeros_like", "(", "offset", "[", ":", ",", ":", "1", ",", "...", "]", ")", "\n", "\n", "device", "=", "semantic", ".", "get_device", "(", ")", "\n", "xx", ",", "yy", "=", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "ww", ")", ")", ")", ",", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "hh", ")", ")", ")", "\n", "xx", ",", "yy", "=", "xx", ".", "to", "(", "device", ")", ",", "yy", ".", "to", "(", "device", ")", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "meshgrid", "(", "yy", ",", "xx", ")", "\n", "\n", "for", "ii", "in", "range", "(", "bs", ")", ":", "\n", "            ", "segm_pred", "=", "torch", ".", "argmax", "(", "semantic", "[", "ii", ",", "...", "]", ",", "axis", "=", "0", ")", "\n", "segm_pred", "[", "segm_pred", ">", "0", "]", "=", "1", "\n", "segm_pred", "=", "segm_pred", ".", "bool", "(", ")", "\n", "\n", "coord_x", "=", "torch", ".", "masked_select", "(", "grid_x", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "coord_y", "=", "torch", ".", "masked_select", "(", "grid_y", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "\n", "offset_x", "=", "offset", "[", "ii", ",", "1", ",", "coord_y", ",", "coord_x", "]", "\n", "offset_y", "=", "offset", "[", "ii", ",", "0", ",", "coord_y", ",", "coord_x", "]", "\n", "\n", "vote_x", "=", "coord_x", "+", "offset_x", "\n", "vote_y", "=", "coord_y", "+", "offset_y", "\n", "vote_x", "=", "torch", ".", "clamp", "(", "vote_x", ",", "0", ",", "ww", "-", "1", ")", ".", "long", "(", ")", "\n", "vote_y", "=", "torch", ".", "clamp", "(", "vote_y", ",", "0", ",", "hh", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "indexs", "=", "vote_y", "*", "ww", "+", "vote_x", "\n", "indexs", "=", "indexs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "counts", "=", "np", ".", "bincount", "(", "indexs", ",", "minlength", "=", "hh", "*", "ww", ")", "\n", "counts", "=", "counts", "/", "(", "np", ".", "max", "(", "counts", ")", "+", "1e-10", ")", "\n", "counts", "=", "np", ".", "reshape", "(", "counts", ",", "(", "hh", ",", "ww", ")", ")", "\n", "counts", "=", "torch", ".", "from_numpy", "(", "counts", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "vote_map", "[", "ii", ",", "0", ",", "...", "]", "=", "counts", "\n", "\n", "", "return", "vote_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.HRNetFusionModule.__init__": [[165, 182], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "aspp.ASPP", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "output_channels", ",", "\n", "astrous_rates", "=", "None", ",", "aspp_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", "HRNetFusionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "aspp_channels", "is", "not", "None", "and", "astrous_rates", "is", "not", "None", ":", "\n", "            ", "self", ".", "aspp", "=", "ASPP", "(", "in_channels", ",", "out_channels", "=", "aspp_channels", ",", "\n", "atrous_rates", "=", "astrous_rates", ")", "\n", "in_channels", "=", "aspp_channels", "\n", "", "else", ":", "\n", "            ", "self", ".", "aspp", "=", "None", "\n", "\n", "", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "output_channels", ",", "\n", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.HRNetFusionModule.forward": [[184, 198], ["decoder_1025.HRNetFusionModule.project", "decoder_1025.HRNetFusionModule.aspp", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ",", "down", "=", "None", ")", ":", "\n", "        ", "h", ",", "w", "=", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "\n", "\n", "if", "self", ".", "aspp", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "\n", "", "if", "down", "is", "not", "None", ":", "\n", "            ", "down", "=", "F", ".", "interpolate", "(", "down", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "down", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "project", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.OCR.__init__": [[201, 212], ["torch.Module.__init__", "modules.spatial_ocr_block.SpatialGather_Module", "modules.spatial_ocr_block.SpatialOCR_Module"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "in_channels", ",", "key_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OCR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ocr_gather_head", "=", "SpatialGather_Module", "(", "self", ".", "num_classes", ")", "\n", "self", ".", "ocr_distri_head", "=", "SpatialOCR_Module", "(", "in_channels", "=", "in_channels", ",", "\n", "key_channels", "=", "key_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "scale", "=", "1", ",", "\n", "dropout", "=", "0.05", ",", "\n", "bn_type", "=", "'torchbn'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.OCR.forward": [[213, 222], ["torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "decoder_1025.OCR.ocr_gather_head", "decoder_1025.OCR.ocr_distri_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ",", "prob", ")", ":", "\n", "        ", "h", ",", "w", "=", "feat", ".", "shape", "[", "2", "]", ",", "feat", ".", "shape", "[", "3", "]", "\n", "\n", "prob", "=", "torch", ".", "nn", ".", "functional", ".", "upsample_bilinear", "(", "feat", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "context", "=", "self", ".", "ocr_gather_head", "(", "feat", ",", "prob", ")", "\n", "feat", "=", "self", ".", "ocr_distri_head", "(", "feat", ",", "context", ")", "\n", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.CascadeRefinementHead.__init__": [[225, 276], ["torch.Module.__init__", "len", "functools.partial", "decoder_1025.HRNetFusionModule", "decoder_1025.HRNetFusionModule", "decoder_1025.HRNetFusionModule", "decoder_1025.HRNetFusionModule", "decoder_1025.OCR", "decoder_1025.OCR", "decoder_1025.OCR", "range", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "class_key", ",", "head_channels", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", ",", "ParsingMeta", "]", ")", ":", "\n", "        ", "super", "(", "CascadeRefinementHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "num_head", "=", "len", "(", "num_classes", ")", "\n", "self", ".", "class_key", "=", "class_key", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "hrnet_channels", "=", "[", "48", ",", "96", ",", "192", ",", "384", "]", "\n", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "\n", "padding", "=", "2", ",", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "\n", "# feature fusion", "\n", "self", ".", "res5_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "384", ",", "\n", "astrous_rates", "=", "(", "3", ",", "6", ",", "9", ")", ",", "\n", "aspp_channels", "=", "384", ",", "\n", "output_channels", "=", "384", ")", "\n", "self", ".", "res4_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "192", "+", "384", ",", "\n", "output_channels", "=", "192", ")", "\n", "self", ".", "res3_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "96", "+", "192", ",", "\n", "output_channels", "=", "96", ")", "\n", "self", ".", "res2_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "48", "+", "96", ",", "\n", "output_channels", "=", "48", ")", "\n", "\n", "# feature modulation", "\n", "self", ".", "res4_ocr", "=", "OCR", "(", "self", ".", "num_classes", ",", "in_channels", "=", "192", ",", "\n", "key_channels", "=", "128", ",", "out_channels", "=", "192", ")", "\n", "\n", "self", ".", "res3_ocr", "=", "OCR", "(", "self", ".", "num_classes", ",", "in_channels", "=", "96", ",", "\n", "key_channels", "=", "128", ",", "out_channels", "=", "96", ")", "\n", "\n", "self", ".", "res2_ocr", "=", "OCR", "(", "self", ".", "num_classes", ",", "in_channels", "=", "48", ",", "\n", "key_channels", "=", "128", ",", "out_channels", "=", "48", ")", "\n", "\n", "# classifier", "\n", "classifiers", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "                ", "if", "class_key", "[", "i", "]", "==", "'semantic'", "or", "j", "==", "5", ":", "\n", "                    ", "in_channels", "=", "hrnet_channels", "[", "j", "-", "2", "]", "\n", "", "else", ":", "\n", "                    ", "in_channels", "=", "hrnet_channels", "[", "j", "-", "2", "]", "+", "2", "# with offset channels", "\n", "\n", "", "classifiers", "[", "class_key", "[", "i", "]", "+", "'-{}'", ".", "format", "(", "j", ")", "]", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "in_channels", ",", "head_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "i", "]", ",", "1", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "classifiers", "=", "nn", ".", "ModuleDict", "(", "classifiers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.CascadeRefinementHead.stride": [[277, 279], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.CascadeRefinementHead.forward": [[280, 332], ["collections.OrderedDict", "decoder_1025.CascadeRefinementHead.res5_fuse", "decoder_1025.CascadeRefinementHead.res4_fuse", "decoder_1025.CascadeRefinementHead.res4_ocr", "decoder_1025.CascadeRefinementHead.res3_fuse", "decoder_1025.CascadeRefinementHead.res3_ocr", "decoder_1025.CascadeRefinementHead.res2_fuse", "decoder_1025.CascadeRefinementHead.res2_ocr", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "res2", "=", "features", "[", "'res2'", "]", "\n", "res3", "=", "features", "[", "'res3'", "]", "\n", "res4", "=", "features", "[", "'res4'", "]", "\n", "res5", "=", "features", "[", "'res5'", "]", "\n", "\n", "pred", "=", "OrderedDict", "(", ")", "\n", "\n", "res5_feature", "=", "self", ".", "res5_fuse", "(", "res5", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "pred", "[", "key", "+", "'-5'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-5'", "]", "(", "res5_feature", ")", "\n", "\n", "", "res4_feature", "=", "self", ".", "res4_fuse", "(", "res4", ",", "res5_feature", ")", "\n", "res4_feature", "=", "self", ".", "res4_ocr", "(", "res4_feature", ",", "pred", "[", "'semantic-5'", "]", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "if", "key", "==", "'semantic'", ":", "\n", "                ", "pred", "[", "key", "+", "'-4'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-4'", "]", "(", "res4_feature", ")", "\n", "", "else", ":", "\n", "                ", "offset_pred", "=", "F", ".", "interpolate", "(", "pred", "[", "'offset-5'", "]", ",", "\n", "size", "=", "res4_feature", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "offset_pred", "*=", "2", "\n", "residual", "=", "self", ".", "classifiers", "[", "key", "+", "'-4'", "]", "(", "torch", ".", "cat", "(", "[", "res4_feature", ",", "offset_pred", "]", ",", "dim", "=", "1", ")", ")", "\n", "pred", "[", "key", "+", "'-4'", "]", "=", "offset_pred", "+", "residual", "\n", "\n", "", "", "res3_feature", "=", "self", ".", "res3_fuse", "(", "res3", ",", "res4_feature", ")", "\n", "res3_feature", "=", "self", ".", "res3_ocr", "(", "res3_feature", ",", "pred", "[", "'semantic-4'", "]", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "if", "key", "==", "'semantic'", ":", "\n", "                ", "pred", "[", "key", "+", "'-3'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-3'", "]", "(", "res3_feature", ")", "\n", "", "else", ":", "\n", "                ", "offset_pred", "=", "F", ".", "interpolate", "(", "pred", "[", "'offset-4'", "]", ",", "\n", "size", "=", "res3_feature", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "offset_pred", "*=", "2", "\n", "residual", "=", "self", ".", "classifiers", "[", "key", "+", "'-3'", "]", "(", "torch", ".", "cat", "(", "[", "res3_feature", ",", "offset_pred", "]", ",", "dim", "=", "1", ")", ")", "\n", "pred", "[", "key", "+", "'-3'", "]", "=", "offset_pred", "+", "residual", "\n", "\n", "", "", "res2_feature", "=", "self", ".", "res2_fuse", "(", "res2", ",", "res3_feature", ")", "\n", "res2_feature", "=", "self", ".", "res2_ocr", "(", "res2_feature", ",", "pred", "[", "'semantic-3'", "]", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "if", "key", "==", "'semantic'", ":", "\n", "                ", "pred", "[", "key", "+", "'-2'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-2'", "]", "(", "res2_feature", ")", "\n", "", "else", ":", "\n", "                ", "offset_pred", "=", "F", ".", "interpolate", "(", "pred", "[", "'offset-3'", "]", ",", "\n", "size", "=", "res2_feature", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "offset_pred", "*=", "2", "\n", "residual", "=", "self", ".", "classifiers", "[", "key", "+", "'-2'", "]", "(", "torch", ".", "cat", "(", "[", "res2_feature", ",", "offset_pred", "]", ",", "dim", "=", "1", ")", ")", "\n", "pred", "[", "key", "+", "'-2'", "]", "=", "offset_pred", "+", "residual", "\n", "\n", "", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.CascadeRefinementHead.voting": [[333, 369], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "semantic.get_device", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "xx.to", "yy.to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "segm_pred.bool.bool.bool", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "indexs.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.bincount", "numpy.reshape", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "list", "list", "range", "range", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "indexs.cpu().numpy.cpu().numpy.cpu", "numpy.max", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "voting", "(", "self", ",", "semantic", ",", "offset", ")", ":", "\n", "        ", "bs", "=", "semantic", ".", "shape", "[", "0", "]", "\n", "hh", ",", "ww", "=", "semantic", ".", "shape", "[", "2", "]", ",", "semantic", ".", "shape", "[", "3", "]", "\n", "\n", "vote_map", "=", "torch", ".", "zeros_like", "(", "offset", "[", ":", ",", ":", "1", ",", "...", "]", ")", "\n", "\n", "device", "=", "semantic", ".", "get_device", "(", ")", "\n", "xx", ",", "yy", "=", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "ww", ")", ")", ")", ",", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "hh", ")", ")", ")", "\n", "xx", ",", "yy", "=", "xx", ".", "to", "(", "device", ")", ",", "yy", ".", "to", "(", "device", ")", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "meshgrid", "(", "yy", ",", "xx", ")", "\n", "\n", "for", "ii", "in", "range", "(", "bs", ")", ":", "\n", "            ", "segm_pred", "=", "torch", ".", "argmax", "(", "semantic", "[", "ii", ",", "...", "]", ",", "axis", "=", "0", ")", "\n", "segm_pred", "[", "segm_pred", ">", "0", "]", "=", "1", "\n", "segm_pred", "=", "segm_pred", ".", "bool", "(", ")", "\n", "\n", "coord_x", "=", "torch", ".", "masked_select", "(", "grid_x", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "coord_y", "=", "torch", ".", "masked_select", "(", "grid_y", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "\n", "offset_x", "=", "offset", "[", "ii", ",", "1", ",", "coord_y", ",", "coord_x", "]", "\n", "offset_y", "=", "offset", "[", "ii", ",", "0", ",", "coord_y", ",", "coord_x", "]", "\n", "\n", "vote_x", "=", "coord_x", "+", "offset_x", "\n", "vote_y", "=", "coord_y", "+", "offset_y", "\n", "vote_x", "=", "torch", ".", "clamp", "(", "vote_x", ",", "0", ",", "ww", "-", "1", ")", ".", "long", "(", ")", "\n", "vote_y", "=", "torch", ".", "clamp", "(", "vote_y", ",", "0", ",", "hh", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "indexs", "=", "vote_y", "*", "ww", "+", "vote_x", "\n", "indexs", "=", "indexs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "counts", "=", "np", ".", "bincount", "(", "indexs", ",", "minlength", "=", "hh", "*", "ww", ")", "\n", "counts", "=", "counts", "/", "(", "np", ".", "max", "(", "counts", ")", "+", "1e-10", ")", "\n", "counts", "=", "np", ".", "reshape", "(", "counts", ",", "(", "hh", ",", "ww", ")", ")", "\n", "counts", "=", "torch", ".", "from_numpy", "(", "counts", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "vote_map", "[", "ii", ",", "0", ",", "...", "]", "=", "counts", "\n", "\n", "", "return", "vote_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.SinglePanopticDeepLabHeadFused.__init__": [[372, 406], ["torch.Module.__init__", "functools.partial", "len", "range", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "classifier[].add_module", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", ",", "ParsingMeta", "]", ",", "\n", "decoder_channels", ",", "head_channels", ",", "num_classes", ",", "class_key", ",", "dsn", "=", "False", ")", ":", "\n", "        ", "super", "(", "SinglePanopticDeepLabHeadFused", ",", "self", ")", ".", "__init__", "(", ")", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "padding", "=", "2", ",", "\n", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "num_head", "=", "len", "(", "num_classes", ")", "\n", "assert", "self", ".", "num_head", "==", "len", "(", "class_key", ")", "\n", "\n", "classifier", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "            ", "classifier", "[", "class_key", "[", "i", "]", "]", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "\n", "decoder_channels", ",", "\n", "head_channels", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "i", "]", ",", "1", ")", "\n", ")", "\n", "if", "class_key", "[", "i", "]", "==", "'edge'", ":", "\n", "                ", "classifier", "[", "class_key", "[", "i", "]", "]", ".", "add_module", "(", "\n", "\"sigmoid\"", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "", "", "if", "dsn", ":", "\n", "            ", "self", ".", "classifier_dsn", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "decoder_channels", "+", "32", ",", "head_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "0", "]", ",", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier_dsn", "=", "None", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "ModuleDict", "(", "classifier", ")", "\n", "self", ".", "class_key", "=", "class_key", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.SinglePanopticDeepLabHeadFused.stride": [[407, 409], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.SinglePanopticDeepLabHeadFused.forward": [[410, 417], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_dsn", "=", "None", ")", ":", "\n", "        ", "pred", "=", "OrderedDict", "(", ")", "\n", "# build classifier", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "pred", "[", "key", "]", "=", "self", ".", "classifier", "[", "key", "]", "(", "x", ")", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.SinglePanopticDeepLabHead.__init__": [[420, 454], ["torch.Module.__init__", "functools.partial", "len", "range", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "classifier[].add_module", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", ",", "ParsingMeta", "]", ",", "\n", "decoder_channels", ",", "head_channels", ",", "num_classes", ",", "class_key", ",", "dsn", "=", "False", ")", ":", "\n", "        ", "super", "(", "SinglePanopticDeepLabHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "padding", "=", "2", ",", "\n", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "num_head", "=", "len", "(", "num_classes", ")", "\n", "assert", "self", ".", "num_head", "==", "len", "(", "class_key", ")", "\n", "\n", "classifier", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "            ", "classifier", "[", "class_key", "[", "i", "]", "]", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "\n", "decoder_channels", ",", "\n", "head_channels", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "i", "]", ",", "1", ")", "\n", ")", "\n", "if", "class_key", "[", "i", "]", "==", "'edge'", ":", "\n", "                ", "classifier", "[", "class_key", "[", "i", "]", "]", ".", "add_module", "(", "\n", "\"sigmoid\"", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "", "", "if", "dsn", ":", "\n", "            ", "self", ".", "classifier_dsn", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "decoder_channels", "+", "32", ",", "head_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "0", "]", ",", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier_dsn", "=", "None", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "ModuleDict", "(", "classifier", ")", "\n", "self", ".", "class_key", "=", "class_key", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.SinglePanopticDeepLabHead.stride": [[455, 457], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.SinglePanopticDeepLabHead.forward": [[458, 465], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_dsn", "=", "None", ")", ":", "\n", "        ", "pred", "=", "OrderedDict", "(", ")", "\n", "# build classifier", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "pred", "[", "key", "]", "=", "self", ".", "classifier", "[", "key", "]", "(", "x", ")", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.SinglePanopticDeepLabDecoder.__init__": [[468, 512], ["torch.Module.__init__", "aspp.ASPP", "len", "functools.partial", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "len", "project.append", "fuse.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "feature_key", ",", "low_level_channels", ",", "\n", "low_level_key", ",", "low_level_channels_project", ",", "\n", "decoder_channels", ",", "atrous_rates", ",", "aspp_channels", "=", "None", ",", "dsn", "=", "False", ")", ":", "\n", "        ", "super", "(", "SinglePanopticDeepLabDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "aspp_channels", "is", "None", ":", "\n", "            ", "aspp_channels", "=", "decoder_channels", "\n", "", "self", ".", "aspp", "=", "ASPP", "(", "in_channels", ",", "out_channels", "=", "aspp_channels", ",", "\n", "atrous_rates", "=", "atrous_rates", ")", "\n", "\n", "self", ".", "feature_key", "=", "feature_key", "\n", "self", ".", "decoder_stage", "=", "len", "(", "low_level_channels", ")", "\n", "assert", "self", ".", "decoder_stage", "==", "len", "(", "low_level_key", ")", "\n", "assert", "self", ".", "decoder_stage", "==", "len", "(", "low_level_channels_project", ")", "\n", "self", ".", "low_level_key", "=", "low_level_key", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "padding", "=", "2", ",", "\n", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "\n", "# Transform low-level feature", "\n", "project", "=", "[", "]", "\n", "# Fuse", "\n", "fuse", "=", "[", "]", "\n", "# Top-down direction, i.e. starting from largest stride", "\n", "for", "i", "in", "range", "(", "self", ".", "decoder_stage", ")", ":", "\n", "            ", "project", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "low_level_channels", "[", "i", "]", ",", "low_level_channels_project", "[", "i", "]", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "low_level_channels_project", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "fuse_in_channels", "=", "aspp_channels", "+", "low_level_channels_project", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "fuse_in_channels", "=", "decoder_channels", "+", "low_level_channels_project", "[", "i", "]", "\n", "", "fuse", ".", "append", "(", "\n", "fuse_conv", "(", "\n", "fuse_in_channels", ",", "\n", "decoder_channels", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "project", "=", "nn", ".", "ModuleList", "(", "project", ")", "\n", "self", ".", "fuse", "=", "nn", ".", "ModuleList", "(", "fuse", ")", "\n", "self", ".", "dsn", "=", "dsn", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.SinglePanopticDeepLabDecoder.set_image_pooling": [[513, 515], ["decoder_1025.SinglePanopticDeepLabDecoder.aspp.set_image_pooling"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabDecoder.set_image_pooling"], ["", "def", "set_image_pooling", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "aspp", ".", "set_image_pooling", "(", "pool_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder_1025.SinglePanopticDeepLabDecoder.forward": [[516, 535], ["decoder_1025.SinglePanopticDeepLabDecoder.aspp", "range", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xs.append", "l.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "features", "[", "self", ".", "feature_key", "]", "\n", "\n", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "\n", "xs", "=", "[", "]", "\n", "# build decoder", "\n", "for", "i", "in", "range", "(", "self", ".", "decoder_stage", ")", ":", "\n", "            ", "l", "=", "features", "[", "self", ".", "low_level_key", "[", "i", "]", "]", "\n", "l", "=", "self", ".", "project", "[", "i", "]", "(", "l", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "l", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "l", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "fuse", "[", "i", "]", "(", "x", ")", "\n", "\n", "xs", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "dsn", ":", "\n", "            ", "return", "xs", "[", "-", "1", "]", ",", "xs", "[", "-", "2", "]", "\n", "", "return", "xs", "[", "-", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.AlignModule.__init__": [[28, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplane", ",", "outplane", ")", ":", "\n", "        ", "super", "(", "AlignModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "down_h", "=", "nn", ".", "Conv2d", "(", "inplane", ",", "outplane", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "down_l", "=", "nn", ".", "Conv2d", "(", "inplane", ",", "outplane", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "flow_make", "=", "nn", ".", "Conv2d", "(", "outplane", "*", "2", ",", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.AlignModule.forward": [[34, 50], ["decoder.AlignModule.down_l", "decoder.AlignModule.down_h", "torch.interpolate", "torch.interpolate", "torch.interpolate", "decoder.AlignModule.flow_make", "decoder.AlignModule.flow_warp", "decoder.AlignModule.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.AlignModule.flow_warp"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.AlignModule.flow_warp", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.AlignModule.flow_warp"], ["", "def", "forward", "(", "self", ",", "low_feature", ",", "h_feature", ",", "pred", "=", "None", ")", ":", "\n", "#low_feature, h_feature = x", "\n", "        ", "h_feature_orign", "=", "h_feature", "\n", "h", ",", "w", "=", "low_feature", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "size", "=", "(", "h", ",", "w", ")", "\n", "low_feature", "=", "self", ".", "down_l", "(", "low_feature", ")", "\n", "h_feature", "=", "self", ".", "down_h", "(", "h_feature", ")", "\n", "h_feature", "=", "F", ".", "interpolate", "(", "h_feature", ",", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "flow", "=", "self", ".", "flow_make", "(", "torch", ".", "cat", "(", "[", "h_feature", ",", "low_feature", "]", ",", "1", ")", ")", "\n", "h_feature", "=", "self", ".", "flow_warp", "(", "h_feature_orign", ",", "flow", ",", "size", "=", "size", ")", "\n", "\n", "if", "pred", "is", "not", "None", ":", "\n", "            ", "pred", "=", "2", "*", "self", ".", "flow_warp", "(", "pred", ",", "flow", ",", "size", "=", "size", ")", "\n", "return", "h_feature", ",", "pred", "\n", "\n", "", "return", "h_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.AlignModule.flow_warp": [[51, 64], ["input.size", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as().to", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as", "flow.permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "grid.repeat().type_as().to.repeat().type_as().to.repeat"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "flow_warp", "(", "self", ",", "input", ",", "flow", ",", "size", ")", ":", "\n", "        ", "out_h", ",", "out_w", "=", "size", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "\n", "norm", "=", "torch", ".", "tensor", "(", "[", "[", "[", "[", "out_w", ",", "out_h", "]", "]", "]", "]", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "w", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_h", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "out_w", ")", "\n", "h", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_w", ")", ".", "repeat", "(", "out_h", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "h", ".", "unsqueeze", "(", "2", ")", ",", "w", ".", "unsqueeze", "(", "2", ")", ")", ",", "2", ")", "\n", "grid", "=", "grid", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "grid", "=", "grid", "+", "flow", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "/", "norm", "\n", "\n", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.CascadeRefinementHeadXception.__init__": [[67, 98], ["torch.Module.__init__", "len", "functools.partial", "decoder.HRNetFusionModule", "decoder.HRNetFusionModule", "decoder.HRNetFusionModule", "decoder.HRNetFusionModule", "decoder.AlignModule", "decoder.AlignModule", "decoder.AlignModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "class_key", ",", "head_channels", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", ",", "ParsingMeta", "]", ")", ":", "\n", "        ", "super", "(", "CascadeRefinementHeadXception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "num_head", "=", "len", "(", "num_classes", ")", "\n", "self", ".", "class_key", "=", "class_key", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "\n", "padding", "=", "2", ",", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "\n", "dim", "=", "256", "\n", "\n", "# feature fusion", "\n", "self", ".", "res5_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "2048", ",", "\n", "output_channels", "=", "dim", ")", "\n", "self", ".", "res4_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "728", ",", "\n", "output_channels", "=", "dim", ")", "\n", "self", ".", "res3_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "728", ",", "\n", "output_channels", "=", "dim", ")", "\n", "self", ".", "res2_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "256", ",", "\n", "output_channels", "=", "dim", ")", "\n", "\n", "self", ".", "align_5_4", "=", "AlignModule", "(", "dim", ",", "dim", "//", "2", ")", "\n", "self", ".", "align_4_3", "=", "AlignModule", "(", "dim", ",", "dim", "//", "2", ")", "\n", "self", ".", "align_3_2", "=", "AlignModule", "(", "dim", ",", "dim", "//", "2", ")", "\n", "\n", "self", ".", "classifier_5", "=", "nn", ".", "Conv2d", "(", "dim", ",", "2", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "classifier_4", "=", "nn", ".", "Conv2d", "(", "dim", ",", "2", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "classifier_3", "=", "nn", ".", "Conv2d", "(", "dim", ",", "2", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "classifier_2", "=", "nn", ".", "Conv2d", "(", "dim", ",", "2", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.CascadeRefinementHeadXception.stride": [[99, 101], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.CascadeRefinementHeadXception.forward": [[102, 137], ["decoder.CascadeRefinementHeadXception.res5_fuse", "decoder.CascadeRefinementHeadXception.res4_fuse", "decoder.CascadeRefinementHeadXception.res3_fuse", "decoder.CascadeRefinementHeadXception.res2_fuse", "collections.OrderedDict", "decoder.CascadeRefinementHeadXception.classifier_5", "decoder.CascadeRefinementHeadXception.align_5_4", "decoder.CascadeRefinementHeadXception.align_4_3", "decoder.CascadeRefinementHeadXception.align_3_2", "decoder.CascadeRefinementHeadXception.classifier_4", "decoder.CascadeRefinementHeadXception.classifier_3", "decoder.CascadeRefinementHeadXception.classifier_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "res2", "=", "features", "[", "'res2'", "]", "\n", "res3", "=", "features", "[", "'res3'", "]", "\n", "res4", "=", "features", "[", "'res4'", "]", "\n", "res5", "=", "features", "[", "'res5'", "]", "\n", "\n", "res5_feature", "=", "self", ".", "res5_fuse", "(", "res5", ")", "\n", "res4_feature", "=", "self", ".", "res4_fuse", "(", "res4", ")", "\n", "res3_feature", "=", "self", ".", "res3_fuse", "(", "res3", ")", "\n", "res2_feature", "=", "self", ".", "res2_fuse", "(", "res2", ")", "\n", "\n", "# ======== initial classifier", "\n", "pred", "=", "OrderedDict", "(", ")", "\n", "pred", "[", "'offset-5'", "]", "=", "self", ".", "classifier_5", "(", "res5_feature", ")", "\n", "\n", "# ======== 2nd stage", "\n", "# warp feature and initial prediction", "\n", "res4_feature", ",", "warped_pred", "=", "self", ".", "align_5_4", "(", "res4_feature", ",", "res5_feature", ",", "\n", "pred", "[", "'offset-5'", "]", ")", "\n", "\n", "pred", "[", "'offset-4'", "]", "=", "self", ".", "classifier_4", "(", "res4_feature", ")", "+", "warped_pred", "\n", "\n", "# ======== 3rd stage", "\n", "res3_feature", ",", "warped_pred", "=", "self", ".", "align_4_3", "(", "res3_feature", ",", "res4_feature", ",", "\n", "pred", "[", "'offset-4'", "]", ")", "\n", "\n", "pred", "[", "'offset-3'", "]", "=", "self", ".", "classifier_3", "(", "res3_feature", ")", "+", "warped_pred", "\n", "\n", "# ======== 4th stage", "\n", "res2_feature", ",", "warped_pred", "=", "self", ".", "align_3_2", "(", "res2_feature", ",", "res3_feature", ",", "\n", "pred", "[", "'offset-3'", "]", ")", "\n", "\n", "pred", "[", "'offset-2'", "]", "=", "self", ".", "classifier_2", "(", "res2_feature", ")", "+", "warped_pred", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.CascadeRefinementHeadXception.voting": [[138, 174], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "semantic.get_device", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "xx.to", "yy.to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "segm_pred.bool.bool.bool", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "indexs.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.bincount", "numpy.reshape", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "list", "list", "range", "range", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "indexs.cpu().numpy.cpu().numpy.cpu", "numpy.max", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "voting", "(", "self", ",", "semantic", ",", "offset", ")", ":", "\n", "        ", "bs", "=", "semantic", ".", "shape", "[", "0", "]", "\n", "hh", ",", "ww", "=", "semantic", ".", "shape", "[", "2", "]", ",", "semantic", ".", "shape", "[", "3", "]", "\n", "\n", "vote_map", "=", "torch", ".", "zeros_like", "(", "offset", "[", ":", ",", ":", "1", ",", "...", "]", ")", "\n", "\n", "device", "=", "semantic", ".", "get_device", "(", ")", "\n", "xx", ",", "yy", "=", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "ww", ")", ")", ")", ",", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "hh", ")", ")", ")", "\n", "xx", ",", "yy", "=", "xx", ".", "to", "(", "device", ")", ",", "yy", ".", "to", "(", "device", ")", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "meshgrid", "(", "yy", ",", "xx", ")", "\n", "\n", "for", "ii", "in", "range", "(", "bs", ")", ":", "\n", "            ", "segm_pred", "=", "torch", ".", "argmax", "(", "semantic", "[", "ii", ",", "...", "]", ",", "axis", "=", "0", ")", "\n", "segm_pred", "[", "segm_pred", ">", "0", "]", "=", "1", "\n", "segm_pred", "=", "segm_pred", ".", "bool", "(", ")", "\n", "\n", "coord_x", "=", "torch", ".", "masked_select", "(", "grid_x", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "coord_y", "=", "torch", ".", "masked_select", "(", "grid_y", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "\n", "offset_x", "=", "offset", "[", "ii", ",", "1", ",", "coord_y", ",", "coord_x", "]", "\n", "offset_y", "=", "offset", "[", "ii", ",", "0", ",", "coord_y", ",", "coord_x", "]", "\n", "\n", "vote_x", "=", "coord_x", "+", "offset_x", "\n", "vote_y", "=", "coord_y", "+", "offset_y", "\n", "vote_x", "=", "torch", ".", "clamp", "(", "vote_x", ",", "0", ",", "ww", "-", "1", ")", ".", "long", "(", ")", "\n", "vote_y", "=", "torch", ".", "clamp", "(", "vote_y", ",", "0", ",", "hh", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "indexs", "=", "vote_y", "*", "ww", "+", "vote_x", "\n", "indexs", "=", "indexs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "counts", "=", "np", ".", "bincount", "(", "indexs", ",", "minlength", "=", "hh", "*", "ww", ")", "\n", "counts", "=", "counts", "/", "(", "np", ".", "max", "(", "counts", ")", "+", "1e-10", ")", "\n", "counts", "=", "np", ".", "reshape", "(", "counts", ",", "(", "hh", ",", "ww", ")", ")", "\n", "counts", "=", "torch", ".", "from_numpy", "(", "counts", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "vote_map", "[", "ii", ",", "0", ",", "...", "]", "=", "counts", "\n", "\n", "", "return", "vote_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.HRNetFusionModule.__init__": [[177, 194], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "aspp.ASPP", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "output_channels", ",", "\n", "astrous_rates", "=", "None", ",", "aspp_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", "HRNetFusionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "aspp_channels", "is", "not", "None", "and", "astrous_rates", "is", "not", "None", ":", "\n", "            ", "self", ".", "aspp", "=", "ASPP", "(", "in_channels", ",", "out_channels", "=", "aspp_channels", ",", "\n", "atrous_rates", "=", "astrous_rates", ")", "\n", "in_channels", "=", "aspp_channels", "\n", "", "else", ":", "\n", "            ", "self", ".", "aspp", "=", "None", "\n", "\n", "", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "output_channels", ",", "\n", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.HRNetFusionModule.forward": [[196, 210], ["decoder.HRNetFusionModule.project", "decoder.HRNetFusionModule.aspp", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ",", "down", "=", "None", ")", ":", "\n", "        ", "h", ",", "w", "=", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "\n", "\n", "if", "self", ".", "aspp", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "\n", "", "if", "down", "is", "not", "None", ":", "\n", "            ", "down", "=", "F", ".", "interpolate", "(", "down", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "down", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "project", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.OCR.__init__": [[213, 224], ["torch.Module.__init__", "modules.spatial_ocr_block.SpatialGather_Module", "modules.spatial_ocr_block.SpatialOCR_Module"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "in_channels", ",", "key_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OCR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ocr_gather_head", "=", "SpatialGather_Module", "(", "self", ".", "num_classes", ")", "\n", "self", ".", "ocr_distri_head", "=", "SpatialOCR_Module", "(", "in_channels", "=", "in_channels", ",", "\n", "key_channels", "=", "key_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "scale", "=", "1", ",", "\n", "dropout", "=", "0.05", ",", "\n", "bn_type", "=", "'torchbn'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.OCR.forward": [[225, 234], ["torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "torch.nn.functional.upsample_bilinear", "decoder.OCR.ocr_gather_head", "decoder.OCR.ocr_distri_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ",", "prob", ")", ":", "\n", "        ", "h", ",", "w", "=", "feat", ".", "shape", "[", "2", "]", ",", "feat", ".", "shape", "[", "3", "]", "\n", "\n", "prob", "=", "torch", ".", "nn", ".", "functional", ".", "upsample_bilinear", "(", "feat", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "context", "=", "self", ".", "ocr_gather_head", "(", "feat", ",", "prob", ")", "\n", "feat", "=", "self", ".", "ocr_distri_head", "(", "feat", ",", "context", ")", "\n", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.CascadeRefinementHead.__init__": [[237, 288], ["torch.Module.__init__", "len", "functools.partial", "decoder.HRNetFusionModule", "decoder.HRNetFusionModule", "decoder.HRNetFusionModule", "decoder.HRNetFusionModule", "decoder.OCR", "decoder.OCR", "decoder.OCR", "range", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "class_key", ",", "head_channels", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", ",", "ParsingMeta", "]", ")", ":", "\n", "        ", "super", "(", "CascadeRefinementHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "num_head", "=", "len", "(", "num_classes", ")", "\n", "self", ".", "class_key", "=", "class_key", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "hrnet_channels", "=", "[", "48", ",", "96", ",", "192", ",", "384", "]", "\n", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "\n", "padding", "=", "2", ",", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "\n", "# feature fusion", "\n", "self", ".", "res5_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "384", ",", "\n", "astrous_rates", "=", "(", "3", ",", "6", ",", "9", ")", ",", "\n", "aspp_channels", "=", "384", ",", "\n", "output_channels", "=", "384", ")", "\n", "self", ".", "res4_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "192", "+", "384", ",", "\n", "output_channels", "=", "192", ")", "\n", "self", ".", "res3_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "96", "+", "192", ",", "\n", "output_channels", "=", "96", ")", "\n", "self", ".", "res2_fuse", "=", "HRNetFusionModule", "(", "in_channels", "=", "48", "+", "96", ",", "\n", "output_channels", "=", "48", ")", "\n", "\n", "# feature modulation", "\n", "self", ".", "res4_ocr", "=", "OCR", "(", "self", ".", "num_classes", ",", "in_channels", "=", "192", ",", "\n", "key_channels", "=", "128", ",", "out_channels", "=", "192", ")", "\n", "\n", "self", ".", "res3_ocr", "=", "OCR", "(", "self", ".", "num_classes", ",", "in_channels", "=", "96", ",", "\n", "key_channels", "=", "128", ",", "out_channels", "=", "96", ")", "\n", "\n", "self", ".", "res2_ocr", "=", "OCR", "(", "self", ".", "num_classes", ",", "in_channels", "=", "48", ",", "\n", "key_channels", "=", "128", ",", "out_channels", "=", "48", ")", "\n", "\n", "# classifier", "\n", "classifiers", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "                ", "if", "class_key", "[", "i", "]", "==", "'semantic'", "or", "j", "==", "5", ":", "\n", "                    ", "in_channels", "=", "hrnet_channels", "[", "j", "-", "2", "]", "\n", "", "else", ":", "\n", "                    ", "in_channels", "=", "hrnet_channels", "[", "j", "-", "2", "]", "+", "2", "# with offset channels", "\n", "\n", "", "classifiers", "[", "class_key", "[", "i", "]", "+", "'-{}'", ".", "format", "(", "j", ")", "]", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "in_channels", ",", "head_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "i", "]", ",", "1", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "classifiers", "=", "nn", ".", "ModuleDict", "(", "classifiers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.CascadeRefinementHead.stride": [[289, 291], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.CascadeRefinementHead.forward": [[292, 344], ["collections.OrderedDict", "decoder.CascadeRefinementHead.res5_fuse", "decoder.CascadeRefinementHead.res4_fuse", "decoder.CascadeRefinementHead.res4_ocr", "decoder.CascadeRefinementHead.res3_fuse", "decoder.CascadeRefinementHead.res3_ocr", "decoder.CascadeRefinementHead.res2_fuse", "decoder.CascadeRefinementHead.res2_ocr", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "res2", "=", "features", "[", "'res2'", "]", "\n", "res3", "=", "features", "[", "'res3'", "]", "\n", "res4", "=", "features", "[", "'res4'", "]", "\n", "res5", "=", "features", "[", "'res5'", "]", "\n", "\n", "pred", "=", "OrderedDict", "(", ")", "\n", "\n", "res5_feature", "=", "self", ".", "res5_fuse", "(", "res5", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "pred", "[", "key", "+", "'-5'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-5'", "]", "(", "res5_feature", ")", "\n", "\n", "", "res4_feature", "=", "self", ".", "res4_fuse", "(", "res4", ",", "res5_feature", ")", "\n", "res4_feature", "=", "self", ".", "res4_ocr", "(", "res4_feature", ",", "pred", "[", "'semantic-5'", "]", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "if", "key", "==", "'semantic'", ":", "\n", "                ", "pred", "[", "key", "+", "'-4'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-4'", "]", "(", "res4_feature", ")", "\n", "", "else", ":", "\n", "                ", "offset_pred", "=", "F", ".", "interpolate", "(", "pred", "[", "'offset-5'", "]", ",", "\n", "size", "=", "res4_feature", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "offset_pred", "*=", "2", "\n", "residual", "=", "self", ".", "classifiers", "[", "key", "+", "'-4'", "]", "(", "torch", ".", "cat", "(", "[", "res4_feature", ",", "offset_pred", "]", ",", "dim", "=", "1", ")", ")", "\n", "pred", "[", "key", "+", "'-4'", "]", "=", "offset_pred", "+", "residual", "\n", "\n", "", "", "res3_feature", "=", "self", ".", "res3_fuse", "(", "res3", ",", "res4_feature", ")", "\n", "res3_feature", "=", "self", ".", "res3_ocr", "(", "res3_feature", ",", "pred", "[", "'semantic-4'", "]", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "if", "key", "==", "'semantic'", ":", "\n", "                ", "pred", "[", "key", "+", "'-3'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-3'", "]", "(", "res3_feature", ")", "\n", "", "else", ":", "\n", "                ", "offset_pred", "=", "F", ".", "interpolate", "(", "pred", "[", "'offset-4'", "]", ",", "\n", "size", "=", "res3_feature", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "offset_pred", "*=", "2", "\n", "residual", "=", "self", ".", "classifiers", "[", "key", "+", "'-3'", "]", "(", "torch", ".", "cat", "(", "[", "res3_feature", ",", "offset_pred", "]", ",", "dim", "=", "1", ")", ")", "\n", "pred", "[", "key", "+", "'-3'", "]", "=", "offset_pred", "+", "residual", "\n", "\n", "", "", "res2_feature", "=", "self", ".", "res2_fuse", "(", "res2", ",", "res3_feature", ")", "\n", "res2_feature", "=", "self", ".", "res2_ocr", "(", "res2_feature", ",", "pred", "[", "'semantic-3'", "]", ")", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "if", "key", "==", "'semantic'", ":", "\n", "                ", "pred", "[", "key", "+", "'-2'", "]", "=", "self", ".", "classifiers", "[", "key", "+", "'-2'", "]", "(", "res2_feature", ")", "\n", "", "else", ":", "\n", "                ", "offset_pred", "=", "F", ".", "interpolate", "(", "pred", "[", "'offset-3'", "]", ",", "\n", "size", "=", "res2_feature", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "offset_pred", "*=", "2", "\n", "residual", "=", "self", ".", "classifiers", "[", "key", "+", "'-2'", "]", "(", "torch", ".", "cat", "(", "[", "res2_feature", ",", "offset_pred", "]", ",", "dim", "=", "1", ")", ")", "\n", "pred", "[", "key", "+", "'-2'", "]", "=", "offset_pred", "+", "residual", "\n", "\n", "", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.CascadeRefinementHead.voting": [[345, 381], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "semantic.get_device", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "xx.to", "yy.to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "segm_pred.bool.bool.bool", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.masked_select().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "indexs.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.bincount", "numpy.reshape", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "list", "list", "range", "range", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "indexs.cpu().numpy.cpu().numpy.cpu", "numpy.max", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "voting", "(", "self", ",", "semantic", ",", "offset", ")", ":", "\n", "        ", "bs", "=", "semantic", ".", "shape", "[", "0", "]", "\n", "hh", ",", "ww", "=", "semantic", ".", "shape", "[", "2", "]", ",", "semantic", ".", "shape", "[", "3", "]", "\n", "\n", "vote_map", "=", "torch", ".", "zeros_like", "(", "offset", "[", ":", ",", ":", "1", ",", "...", "]", ")", "\n", "\n", "device", "=", "semantic", ".", "get_device", "(", ")", "\n", "xx", ",", "yy", "=", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "ww", ")", ")", ")", ",", "torch", ".", "Tensor", "(", "list", "(", "range", "(", "hh", ")", ")", ")", "\n", "xx", ",", "yy", "=", "xx", ".", "to", "(", "device", ")", ",", "yy", ".", "to", "(", "device", ")", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "meshgrid", "(", "yy", ",", "xx", ")", "\n", "\n", "for", "ii", "in", "range", "(", "bs", ")", ":", "\n", "            ", "segm_pred", "=", "torch", ".", "argmax", "(", "semantic", "[", "ii", ",", "...", "]", ",", "axis", "=", "0", ")", "\n", "segm_pred", "[", "segm_pred", ">", "0", "]", "=", "1", "\n", "segm_pred", "=", "segm_pred", ".", "bool", "(", ")", "\n", "\n", "coord_x", "=", "torch", ".", "masked_select", "(", "grid_x", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "coord_y", "=", "torch", ".", "masked_select", "(", "grid_y", ",", "segm_pred", ")", ".", "long", "(", ")", "\n", "\n", "offset_x", "=", "offset", "[", "ii", ",", "1", ",", "coord_y", ",", "coord_x", "]", "\n", "offset_y", "=", "offset", "[", "ii", ",", "0", ",", "coord_y", ",", "coord_x", "]", "\n", "\n", "vote_x", "=", "coord_x", "+", "offset_x", "\n", "vote_y", "=", "coord_y", "+", "offset_y", "\n", "vote_x", "=", "torch", ".", "clamp", "(", "vote_x", ",", "0", ",", "ww", "-", "1", ")", ".", "long", "(", ")", "\n", "vote_y", "=", "torch", ".", "clamp", "(", "vote_y", ",", "0", ",", "hh", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "indexs", "=", "vote_y", "*", "ww", "+", "vote_x", "\n", "indexs", "=", "indexs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "counts", "=", "np", ".", "bincount", "(", "indexs", ",", "minlength", "=", "hh", "*", "ww", ")", "\n", "counts", "=", "counts", "/", "(", "np", ".", "max", "(", "counts", ")", "+", "1e-10", ")", "\n", "counts", "=", "np", ".", "reshape", "(", "counts", ",", "(", "hh", ",", "ww", ")", ")", "\n", "counts", "=", "torch", ".", "from_numpy", "(", "counts", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "vote_map", "[", "ii", ",", "0", ",", "...", "]", "=", "counts", "\n", "\n", "", "return", "vote_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabHeadFused.__init__": [[384, 418], ["torch.Module.__init__", "functools.partial", "len", "range", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "classifier[].add_module", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", ",", "ParsingMeta", "]", ",", "\n", "decoder_channels", ",", "head_channels", ",", "num_classes", ",", "class_key", ",", "dsn", "=", "False", ")", ":", "\n", "        ", "super", "(", "SinglePanopticDeepLabHeadFused", ",", "self", ")", ".", "__init__", "(", ")", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "padding", "=", "2", ",", "\n", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "num_head", "=", "len", "(", "num_classes", ")", "\n", "assert", "self", ".", "num_head", "==", "len", "(", "class_key", ")", "\n", "\n", "classifier", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "            ", "classifier", "[", "class_key", "[", "i", "]", "]", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "\n", "decoder_channels", ",", "\n", "head_channels", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "i", "]", ",", "1", ")", "\n", ")", "\n", "if", "class_key", "[", "i", "]", "==", "'edge'", ":", "\n", "                ", "classifier", "[", "class_key", "[", "i", "]", "]", ".", "add_module", "(", "\n", "\"sigmoid\"", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "", "", "if", "dsn", ":", "\n", "            ", "self", ".", "classifier_dsn", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "decoder_channels", "+", "32", ",", "head_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "0", "]", ",", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier_dsn", "=", "None", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "ModuleDict", "(", "classifier", ")", "\n", "self", ".", "class_key", "=", "class_key", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabHeadFused.stride": [[419, 421], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabHeadFused.forward": [[422, 429], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_dsn", "=", "None", ")", ":", "\n", "        ", "pred", "=", "OrderedDict", "(", ")", "\n", "# build classifier", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "pred", "[", "key", "]", "=", "self", ".", "classifier", "[", "key", "]", "(", "x", ")", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabHead.__init__": [[432, 466], ["torch.Module.__init__", "functools.partial", "len", "range", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "classifier[].add_module", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", ",", "ParsingMeta", "]", ",", "\n", "decoder_channels", ",", "head_channels", ",", "num_classes", ",", "class_key", ",", "dsn", "=", "False", ")", ":", "\n", "        ", "super", "(", "SinglePanopticDeepLabHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "padding", "=", "2", ",", "\n", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "num_head", "=", "len", "(", "num_classes", ")", "\n", "assert", "self", ".", "num_head", "==", "len", "(", "class_key", ")", "\n", "\n", "classifier", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "            ", "classifier", "[", "class_key", "[", "i", "]", "]", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "\n", "decoder_channels", ",", "\n", "head_channels", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "i", "]", ",", "1", ")", "\n", ")", "\n", "if", "class_key", "[", "i", "]", "==", "'edge'", ":", "\n", "                ", "classifier", "[", "class_key", "[", "i", "]", "]", ".", "add_module", "(", "\n", "\"sigmoid\"", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "", "", "if", "dsn", ":", "\n", "            ", "self", ".", "classifier_dsn", "=", "nn", ".", "Sequential", "(", "\n", "fuse_conv", "(", "decoder_channels", "+", "32", ",", "head_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_channels", ",", "num_classes", "[", "0", "]", ",", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier_dsn", "=", "None", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "ModuleDict", "(", "classifier", ")", "\n", "self", ".", "class_key", "=", "class_key", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabHead.stride": [[467, 469], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabHead.forward": [[470, 477], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_dsn", "=", "None", ")", ":", "\n", "        ", "pred", "=", "OrderedDict", "(", ")", "\n", "# build classifier", "\n", "for", "key", "in", "self", ".", "class_key", ":", "\n", "            ", "pred", "[", "key", "]", "=", "self", ".", "classifier", "[", "key", "]", "(", "x", ")", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabDecoder.__init__": [[480, 524], ["torch.Module.__init__", "aspp.ASPP", "len", "functools.partial", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "len", "project.append", "fuse.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.partial.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "feature_key", ",", "low_level_channels", ",", "\n", "low_level_key", ",", "low_level_channels_project", ",", "\n", "decoder_channels", ",", "atrous_rates", ",", "aspp_channels", "=", "None", ",", "dsn", "=", "False", ")", ":", "\n", "        ", "super", "(", "SinglePanopticDeepLabDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "aspp_channels", "is", "None", ":", "\n", "            ", "aspp_channels", "=", "decoder_channels", "\n", "", "self", ".", "aspp", "=", "ASPP", "(", "in_channels", ",", "out_channels", "=", "aspp_channels", ",", "\n", "atrous_rates", "=", "atrous_rates", ")", "\n", "\n", "self", ".", "feature_key", "=", "feature_key", "\n", "self", ".", "decoder_stage", "=", "len", "(", "low_level_channels", ")", "\n", "assert", "self", ".", "decoder_stage", "==", "len", "(", "low_level_key", ")", "\n", "assert", "self", ".", "decoder_stage", "==", "len", "(", "low_level_channels_project", ")", "\n", "self", ".", "low_level_key", "=", "low_level_key", "\n", "fuse_conv", "=", "partial", "(", "stacked_conv", ",", "kernel_size", "=", "5", ",", "num_stack", "=", "1", ",", "padding", "=", "2", ",", "\n", "conv_type", "=", "'depthwise_separable_conv'", ")", "\n", "\n", "# Transform low-level feature", "\n", "project", "=", "[", "]", "\n", "# Fuse", "\n", "fuse", "=", "[", "]", "\n", "# Top-down direction, i.e. starting from largest stride", "\n", "for", "i", "in", "range", "(", "self", ".", "decoder_stage", ")", ":", "\n", "            ", "project", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "low_level_channels", "[", "i", "]", ",", "low_level_channels_project", "[", "i", "]", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "low_level_channels_project", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "fuse_in_channels", "=", "aspp_channels", "+", "low_level_channels_project", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "fuse_in_channels", "=", "decoder_channels", "+", "low_level_channels_project", "[", "i", "]", "\n", "", "fuse", ".", "append", "(", "\n", "fuse_conv", "(", "\n", "fuse_in_channels", ",", "\n", "decoder_channels", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "project", "=", "nn", ".", "ModuleList", "(", "project", ")", "\n", "self", ".", "fuse", "=", "nn", ".", "ModuleList", "(", "fuse", ")", "\n", "self", ".", "dsn", "=", "dsn", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabDecoder.set_image_pooling": [[525, 527], ["decoder.SinglePanopticDeepLabDecoder.aspp.set_image_pooling"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabDecoder.set_image_pooling"], ["", "def", "set_image_pooling", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "aspp", ".", "set_image_pooling", "(", "pool_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.SinglePanopticDeepLabDecoder.forward": [[528, 547], ["decoder.SinglePanopticDeepLabDecoder.aspp", "range", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xs.append", "l.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "features", "[", "self", ".", "feature_key", "]", "\n", "\n", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "\n", "xs", "=", "[", "]", "\n", "# build decoder", "\n", "for", "i", "in", "range", "(", "self", ".", "decoder_stage", ")", ":", "\n", "            ", "l", "=", "features", "[", "self", ".", "low_level_key", "[", "i", "]", "]", "\n", "l", "=", "self", ".", "project", "[", "i", "]", "(", "l", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "l", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "l", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "fuse", "[", "i", "]", "(", "x", ")", "\n", "\n", "xs", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "dsn", ":", "\n", "            ", "return", "xs", "[", "-", "1", "]", ",", "xs", "[", "-", "2", "]", "\n", "", "return", "xs", "[", "-", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.decoder.conv3x3_bn_relu": [[19, 24], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "conv3x3_bn_relu", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "norm_type", "=", "\"batchnorm\"", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.conv_module.basic_conv": [[10, 24], ["module.append", "torch.nn.Sequential", "torch.nn.Conv2d", "module.append", "module.append", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "basic_conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "1", ",", "\n", "with_bn", "=", "True", ",", "with_relu", "=", "True", ")", ":", "\n", "    ", "\"\"\"convolution with bn and relu\"\"\"", "\n", "module", "=", "[", "]", "\n", "has_bias", "=", "not", "with_bn", "\n", "module", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "has_bias", ")", "\n", ")", "\n", "if", "with_bn", ":", "\n", "        ", "module", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n", "", "if", "with_relu", ":", "\n", "        ", "module", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.conv_module.depthwise_separable_conv": [[26, 42], ["module.extend", "torch.nn.Sequential", "module.append", "module.append", "conv_module.basic_conv", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.conv_module.basic_conv", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "depthwise_separable_conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "1", ",", "\n", "with_bn", "=", "True", ",", "with_relu", "=", "True", ")", ":", "\n", "    ", "\"\"\"depthwise separable convolution with bn and relu\"\"\"", "\n", "del", "groups", "\n", "\n", "module", "=", "[", "]", "\n", "module", ".", "extend", "(", "[", "\n", "basic_conv", "(", "in_planes", ",", "in_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "in_planes", ",", "\n", "with_bn", "=", "True", ",", "with_relu", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "]", ")", "\n", "if", "with_bn", ":", "\n", "        ", "module", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n", "", "if", "with_relu", ":", "\n", "        ", "module", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.conv_module.stacked_conv": [[44, 62], ["module.append", "range", "torch.nn.Sequential", "ValueError", "functools.partial", "functools.partial.", "module.append", "functools.partial", "ValueError", "functools.partial."], "function", ["None"], ["", "def", "stacked_conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "num_stack", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "1", ",", "\n", "with_bn", "=", "True", ",", "with_relu", "=", "True", ",", "conv_type", "=", "'basic_conv'", ")", ":", "\n", "    ", "\"\"\"stacked convolution with bn and relu\"\"\"", "\n", "if", "num_stack", "<", "1", ":", "\n", "        ", "assert", "ValueError", "(", "'`num_stack` has to be a positive integer.'", ")", "\n", "", "if", "conv_type", "==", "'basic_conv'", ":", "\n", "        ", "conv", "=", "partial", "(", "basic_conv", ",", "out_planes", "=", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "groups", "=", "groups", ",", "with_bn", "=", "with_bn", ",", "with_relu", "=", "with_relu", ")", "\n", "", "elif", "conv_type", "==", "'depthwise_separable_conv'", ":", "\n", "        ", "conv", "=", "partial", "(", "depthwise_separable_conv", ",", "out_planes", "=", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "groups", "=", "1", ",", "with_bn", "=", "with_bn", ",", "with_relu", "=", "with_relu", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown conv_type: {}'", ".", "format", "(", "conv_type", ")", ")", "\n", "", "module", "=", "[", "]", "\n", "module", ".", "append", "(", "conv", "(", "in_planes", "=", "in_planes", ")", ")", "\n", "for", "n", "in", "range", "(", "1", ",", "num_stack", ")", ":", "\n", "        ", "module", ".", "append", "(", "conv", "(", "in_planes", "=", "out_planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_hinge": [[6, 21], ["lovasz_loss.mean", "lovasz_loss.lovasz_hinge_flat", "lovasz_loss.lovasz_hinge_flat", "lovasz_loss.flatten_binary_scores", "zip", "lovasz_loss.flatten_binary_scores", "log.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_hinge_flat", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_hinge_flat", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.flatten_binary_scores", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.flatten_binary_scores"], ["def", "lovasz_hinge", "(", "logits", ",", "labels", ",", "per_image", "=", "True", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      per_image: compute the loss per image instead of per batch\n      ignore: void class id\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "log", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ")", "\n", "for", "log", ",", "lab", "in", "zip", "(", "logits", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_hinge_flat", "(", "\n", "*", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_hinge_flat": [[23, 41], ["torch.sort", "torch.sort", "lovasz_loss.lovasz_grad", "torch.dot", "torch.dot", "len", "torch.relu", "logits.sum", "labels.float"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_grad"], ["", "def", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [P] Variable, logits at each prediction (between -\\infty and +\\infty)\n      labels: [P] Tensor, binary ground truth labels (0 or 1)\n      ignore: label to ignore\n    \"\"\"", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "*", "0.", "\n", "", "signs", "=", "2.", "*", "labels", ".", "float", "(", ")", "-", "1.", "\n", "errors", "=", "(", "1.", "-", "logits", "*", "signs", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "gt_sorted", "=", "labels", "[", "perm", "]", "\n", "grad", "=", "lovasz_grad", "(", "gt_sorted", ")", "\n", "loss", "=", "torch", ".", "dot", "(", "F", ".", "relu", "(", "errors_sorted", ")", ",", "grad", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.flatten_binary_scores": [[43, 56], ["scores.view.view", "labels.view.view"], "function", ["None"], ["", "def", "flatten_binary_scores", "(", "scores", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch (binary case)\n    Remove labels equal to 'ignore'\n    \"\"\"", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "scores", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vscores", "=", "scores", "[", "valid", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vscores", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_softmax_flat": [[58, 81], ["preds.size", "range", "lovasz_loss.mean", "preds.numel", "torch.sort", "torch.sort", "losses.append", "torch.dot", "torch.dot", "fg.sum", "lovasz_loss.lovasz_grad"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "preds", ",", "targets", ",", "only_present", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      :param preds: [P, C] Variable, class probabilities at each prediction (between 0 and 1)\n      :param targets: [P] Tensor, ground truth labels (between 0 and C - 1)\n      :param only_present: average only on classes present in ground truth\n    \"\"\"", "\n", "if", "preds", ".", "numel", "(", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "preds", "*", "0.", "\n", "\n", "", "C", "=", "preds", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "        ", "fg", "=", "(", "targets", "==", "c", ")", ".", "float", "(", ")", "# foreground for class c", "\n", "if", "only_present", "and", "fg", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "errors", "=", "(", "fg", "-", "preds", "[", ":", ",", "c", "]", ")", ".", "abs", "(", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "fg_sorted", "=", "fg", "[", "perm", "]", "\n", "losses", ".", "append", "(", "torch", ".", "dot", "(", "errors_sorted", ",", "lovasz_grad", "(", "fg_sorted", ")", ")", ")", "\n", "", "return", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.lovasz_grad": [[83, 95], ["len", "gt_sorted.sum", "gt_sorted.float().cumsum", "gt_sorted.float"], "function", ["None"], ["", "def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"\n    Computes gradient of the Lovasz extension w.r.t sorted errors\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.flatten_probas": [[97, 110], ["preds.permute().contiguous().view.size", "preds.permute().contiguous().view.permute().contiguous().view", "targets.view.view", "preds.permute().contiguous().view.permute().contiguous", "valid.nonzero().squeeze", "preds.permute().contiguous().view.permute", "valid.nonzero"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "flatten_probas", "(", "preds", ",", "targets", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "preds", ".", "size", "(", ")", "\n", "preds", "=", "preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "C", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "preds", ",", "targets", "\n", "", "valid", "=", "(", "targets", "!=", "ignore", ")", "\n", "vprobas", "=", "preds", "[", "valid", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "vlabels", "=", "targets", "[", "valid", "]", "\n", "return", "vprobas", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean": [[112, 131], ["iter", "enumerate", "itertools.filterfalse", "next", "ValueError"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.iter"], ["", "def", "mean", "(", "l", ",", "ignore_nan", "=", "True", ",", "empty", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    nan mean compatible with generators.\n    \"\"\"", "\n", "l", "=", "iter", "(", "l", ")", "\n", "if", "ignore_nan", ":", "\n", "        ", "l", "=", "ifilterfalse", "(", "isnan", ",", "l", ")", "\n", "", "try", ":", "\n", "        ", "n", "=", "1", "\n", "acc", "=", "next", "(", "l", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "if", "empty", "==", "'raise'", ":", "\n", "            ", "raise", "ValueError", "(", "'Empty mean'", ")", "\n", "", "return", "empty", "\n", "", "for", "n", ",", "v", "in", "enumerate", "(", "l", ",", "2", ")", ":", "\n", "        ", "acc", "+=", "v", "\n", "", "if", "n", "==", "1", ":", "\n", "        ", "return", "acc", "\n", "", "return", "acc", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan": [[133, 135], ["None"], "function", ["None"], ["", "def", "isnan", "(", "x", ")", ":", "\n", "    ", "return", "x", "!=", "x", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifCafCollector.__init__": [[30, 35], ["super().__init__", "LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "cif_indices", ",", "caf_indices", ")", ":", "\n", "        ", "super", "(", "CifCafCollector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cif_indices", "=", "cif_indices", "\n", "self", ".", "caf_indices", "=", "caf_indices", "\n", "LOG", ".", "debug", "(", "'cif = %s, caf = %s'", ",", "cif_indices", ",", "caf_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifCafCollector.selector": [[36, 44], ["isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "selector", "(", "inputs", ",", "index", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "index", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "inputs", "[", "index", "]", "\n", "\n", "", "for", "ind", "in", "index", ":", "\n", "            ", "inputs", "=", "inputs", "[", "ind", "]", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifCafCollector.concat_fields": [[45, 54], ["torch.cat", "f.view", "f.view", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "concat_fields", "(", "fields", ")", ":", "\n", "        ", "fields", "=", "[", "\n", "f", ".", "view", "(", "f", ".", "shape", "[", "0", "]", ",", "f", ".", "shape", "[", "1", "]", ",", "f", ".", "shape", "[", "2", "]", "*", "f", ".", "shape", "[", "3", "]", ",", "*", "f", ".", "shape", "[", "4", ":", "]", ")", "\n", "if", "len", "(", "f", ".", "shape", ")", "==", "6", "\n", "else", "f", ".", "view", "(", "f", ".", "shape", "[", "0", "]", ",", "f", ".", "shape", "[", "1", "]", ",", "f", ".", "shape", "[", "2", "]", ",", "*", "f", ".", "shape", "[", "3", ":", "]", ")", "\n", "for", "f", "in", "fields", "\n", "]", "\n", "return", "torch", ".", "cat", "(", "fields", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifCafCollector.concat_heads": [[55, 64], ["torch.cat", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "concat_heads", "(", "heads", ")", ":", "\n", "        ", "if", "not", "heads", ":", "\n", "            ", "return", "None", "\n", "", "if", "len", "(", "heads", ")", "==", "1", ":", "\n", "            ", "return", "heads", "[", "0", "]", "\n", "\n", "# LOG.debug('heads = %s', [h.shape for h in heads])", "\n", "", "return", "torch", ".", "cat", "(", "heads", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifCafCollector.forward": [[65, 89], ["heads.CifCafCollector.concat_heads", "heads.CifCafCollector.concat_heads", "heads.index_field_torch", "heads.CifCafCollector.concat_fields", "heads.CifCafCollector.concat_fields", "cif_head[].add_", "caf_head[].add_", "caf_head[].add_", "heads.CifCafCollector.selector", "heads.CifCafCollector.selector"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.concat_heads", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.concat_heads", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.index_field_torch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.concat_fields", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.concat_fields", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.selector", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.selector"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "heads", "=", "args", "[", "0", "]", "\n", "\n", "# concat fields", "\n", "cif_heads", "=", "[", "self", ".", "concat_fields", "(", "self", ".", "selector", "(", "heads", ",", "head_index", ")", ")", "\n", "for", "head_index", "in", "self", ".", "cif_indices", "]", "\n", "caf_heads", "=", "[", "self", ".", "concat_fields", "(", "self", ".", "selector", "(", "heads", ",", "head_index", ")", ")", "\n", "for", "head_index", "in", "self", ".", "caf_indices", "]", "\n", "\n", "# concat heads", "\n", "cif_head", "=", "self", ".", "concat_heads", "(", "cif_heads", ")", "\n", "caf_head", "=", "self", ".", "concat_heads", "(", "caf_heads", ")", "\n", "\n", "# add index", "\n", "index_field", "=", "index_field_torch", "(", "cif_head", ".", "shape", "[", "-", "2", ":", "]", ",", "device", "=", "cif_head", ".", "device", ")", "\n", "if", "cif_head", "is", "not", "None", ":", "\n", "            ", "cif_head", "[", ":", ",", ":", ",", "1", ":", "3", "]", ".", "add_", "(", "index_field", ")", "\n", "", "if", "caf_head", "is", "not", "None", ":", "\n", "            ", "caf_head", "[", ":", ",", ":", ",", "1", ":", "3", "]", ".", "add_", "(", "index_field", ")", "\n", "caf_head", "[", ":", ",", ":", ",", "3", ":", "5", "]", ".", "add_", "(", "index_field", ")", "\n", "# rearrange caf_fields", "\n", "caf_head", "=", "caf_head", "[", ":", ",", ":", ",", "(", "0", ",", "1", ",", "2", ",", "5", ",", "7", ",", "3", ",", "4", ",", "6", ",", "8", ")", "]", "\n", "\n", "", "return", "cif_head", ",", "caf_head", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.__init__": [[92, 96], ["super().__init__", "LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "super", "(", "CifdetCollector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indices", "=", "indices", "\n", "LOG", ".", "debug", "(", "'cifdet = %s'", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.selector": [[97, 105], ["isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "selector", "(", "inputs", ",", "index", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "index", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "inputs", "[", "index", "]", "\n", "\n", "", "for", "ind", "in", "index", ":", "\n", "            ", "inputs", "=", "inputs", "[", "ind", "]", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.concat_fields": [[106, 115], ["torch.cat", "f.view", "f.view", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "concat_fields", "(", "fields", ")", ":", "\n", "        ", "fields", "=", "[", "\n", "f", ".", "view", "(", "f", ".", "shape", "[", "0", "]", ",", "f", ".", "shape", "[", "1", "]", ",", "f", ".", "shape", "[", "2", "]", "*", "f", ".", "shape", "[", "3", "]", ",", "*", "f", ".", "shape", "[", "4", ":", "]", ")", "\n", "if", "len", "(", "f", ".", "shape", ")", "==", "6", "\n", "else", "f", ".", "view", "(", "f", ".", "shape", "[", "0", "]", ",", "f", ".", "shape", "[", "1", "]", ",", "f", ".", "shape", "[", "2", "]", ",", "*", "f", ".", "shape", "[", "3", ":", "]", ")", "\n", "for", "f", "in", "fields", "\n", "]", "\n", "return", "torch", ".", "cat", "(", "fields", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.concat_heads": [[116, 125], ["torch.cat", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "concat_heads", "(", "heads", ")", ":", "\n", "        ", "if", "not", "heads", ":", "\n", "            ", "return", "None", "\n", "", "if", "len", "(", "heads", ")", "==", "1", ":", "\n", "            ", "return", "heads", "[", "0", "]", "\n", "\n", "# LOG.debug('heads = %s', [h.shape for h in heads])", "\n", "", "return", "torch", ".", "cat", "(", "heads", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.forward": [[126, 143], ["heads.CifdetCollector.concat_heads", "heads.index_field_torch", "heads.CifdetCollector.concat_fields", "heads.CifdetCollector.selector"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.concat_heads", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.index_field_torch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.concat_fields", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CifdetCollector.selector"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "heads", "=", "args", "[", "0", "]", "\n", "\n", "# concat fields", "\n", "cifdet_heads", "=", "[", "self", ".", "concat_fields", "(", "self", ".", "selector", "(", "heads", ",", "head_index", ")", ")", "\n", "for", "head_index", "in", "self", ".", "indices", "]", "\n", "\n", "# concat heads", "\n", "cifdet_head", "=", "self", ".", "concat_heads", "(", "cifdet_heads", ")", "\n", "\n", "# add index", "\n", "index_field", "=", "index_field_torch", "(", "cifdet_head", ".", "shape", "[", "-", "2", ":", "]", ",", "device", "=", "cifdet_head", ".", "device", ")", "\n", "cifdet_head", "[", ":", ",", ":", ",", "1", ":", "3", "]", "+=", "index_field", "\n", "# rearrange caf_fields", "\n", "cifdet_head", "=", "cifdet_head", "[", ":", ",", ":", ",", "(", "0", ",", "1", ",", "2", ",", "5", ",", "3", ",", "4", ",", "6", ")", "]", "\n", "\n", "return", "(", "cifdet_head", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.PifHFlip.__init__": [[146, 155], ["super().__init__", "torch.LongTensor", "LOG.debug", "heads.PifHFlip.register_buffer", "keypoints.index", "enumerate"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "keypoints", ",", "hflip", ")", ":", "\n", "        ", "super", "(", "PifHFlip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "flip_indices", "=", "torch", ".", "LongTensor", "(", "[", "\n", "keypoints", ".", "index", "(", "hflip", "[", "kp_name", "]", ")", "if", "kp_name", "in", "hflip", "else", "kp_i", "\n", "for", "kp_i", ",", "kp_name", "in", "enumerate", "(", "keypoints", ")", "\n", "]", ")", "\n", "LOG", ".", "debug", "(", "'hflip indices: %s'", ",", "flip_indices", ")", "\n", "self", ".", "register_buffer", "(", "'flip_indices'", ",", "flip_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.PifHFlip.forward": [[157, 168], ["torch.index_select", "torch.flip", "out.append", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "field", "in", "args", ":", "\n", "            ", "field", "=", "torch", ".", "index_select", "(", "field", ",", "1", ",", "self", ".", "flip_indices", ")", "\n", "field", "=", "torch", ".", "flip", "(", "field", ",", "dims", "=", "[", "len", "(", "field", ".", "shape", ")", "-", "1", "]", ")", "\n", "out", ".", "append", "(", "field", ")", "\n", "\n", "# flip the x-coordinate of the vector component", "\n", "", "out", "[", "1", "]", "[", ":", ",", ":", ",", "0", ",", ":", ",", ":", "]", "*=", "-", "1.0", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.PafHFlip.__init__": [[171, 196], ["super().__init__", "LOG.debug", "list", "enumerate", "LOG.debug", "heads.PafHFlip.register_buffer", "heads.PafHFlip.register_buffer", "range", "torch.LongTensor", "torch.LongTensor", "len", "flipped_skeleton_names.index", "flipped_skeleton_names.index", "reverse_direction.append"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "keypoints", ",", "skeleton", ",", "hflip", ")", ":", "\n", "        ", "super", "(", "PafHFlip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "skeleton_names", "=", "[", "\n", "(", "keypoints", "[", "j1", "-", "1", "]", ",", "keypoints", "[", "j2", "-", "1", "]", ")", "\n", "for", "j1", ",", "j2", "in", "skeleton", "\n", "]", "\n", "flipped_skeleton_names", "=", "[", "\n", "(", "hflip", "[", "j1", "]", "if", "j1", "in", "hflip", "else", "j1", ",", "hflip", "[", "j2", "]", "if", "j2", "in", "hflip", "else", "j2", ")", "\n", "for", "j1", ",", "j2", "in", "skeleton_names", "\n", "]", "\n", "LOG", ".", "debug", "(", "'skeleton = %s, flipped_skeleton = %s'", ",", "\n", "skeleton_names", ",", "flipped_skeleton_names", ")", "\n", "\n", "flip_indices", "=", "list", "(", "range", "(", "len", "(", "skeleton", ")", ")", ")", "\n", "reverse_direction", "=", "[", "]", "\n", "for", "paf_i", ",", "(", "n1", ",", "n2", ")", "in", "enumerate", "(", "skeleton_names", ")", ":", "\n", "            ", "if", "(", "n1", ",", "n2", ")", "in", "flipped_skeleton_names", ":", "\n", "                ", "flip_indices", "[", "paf_i", "]", "=", "flipped_skeleton_names", ".", "index", "(", "(", "n1", ",", "n2", ")", ")", "\n", "", "if", "(", "n2", ",", "n1", ")", "in", "flipped_skeleton_names", ":", "\n", "                ", "flip_indices", "[", "paf_i", "]", "=", "flipped_skeleton_names", ".", "index", "(", "(", "n2", ",", "n1", ")", ")", "\n", "reverse_direction", ".", "append", "(", "paf_i", ")", "\n", "", "", "LOG", ".", "debug", "(", "'hflip indices: %s, reverse: %s'", ",", "flip_indices", ",", "reverse_direction", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'flip_indices'", ",", "torch", ".", "LongTensor", "(", "flip_indices", ")", ")", "\n", "self", ".", "register_buffer", "(", "'reverse_direction'", ",", "torch", ".", "LongTensor", "(", "reverse_direction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.PafHFlip.forward": [[197, 215], ["torch.index_select", "torch.flip", "out.append", "torch.clone", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "field", "in", "args", ":", "\n", "            ", "field", "=", "torch", ".", "index_select", "(", "field", ",", "1", ",", "self", ".", "flip_indices", ")", "\n", "field", "=", "torch", ".", "flip", "(", "field", ",", "dims", "=", "[", "len", "(", "field", ".", "shape", ")", "-", "1", "]", ")", "\n", "out", ".", "append", "(", "field", ")", "\n", "\n", "# flip the x-coordinate of the vector components", "\n", "", "out", "[", "1", "]", "[", ":", ",", ":", ",", "0", ",", ":", ",", ":", "]", "*=", "-", "1.0", "\n", "out", "[", "2", "]", "[", ":", ",", ":", ",", "0", ",", ":", ",", ":", "]", "*=", "-", "1.0", "\n", "\n", "# reverse direction", "\n", "for", "paf_i", "in", "self", ".", "reverse_direction", ":", "\n", "            ", "cc", "=", "torch", ".", "clone", "(", "out", "[", "1", "]", "[", ":", ",", "paf_i", "]", ")", "\n", "out", "[", "1", "]", "[", ":", ",", "paf_i", "]", "=", "out", "[", "2", "]", "[", ":", ",", "paf_i", "]", "\n", "out", "[", "2", "]", "[", ":", ",", "paf_i", "]", "=", "cc", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.IntensityMeta.n_fields": [[229, 232], ["len"], "methods", ["None"], ["@", "property", "\n", "def", "n_fields", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "keypoints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.AssociationMeta.n_fields": [[248, 251], ["len"], "methods", ["None"], ["@", "property", "\n", "def", "n_fields", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "skeleton", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.DetectionMeta.n_fields": [[262, 265], ["len"], "methods", ["None"], ["@", "property", "\n", "def", "n_fields", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "categories", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.ParsingMeta.n_fields": [[274, 277], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "n_fields", "(", "self", ")", ":", "\n", "        ", "return", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.OffsetMeta.n_fields": [[288, 291], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "n_fields", "(", "self", ")", ":", "\n", "        ", "return", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CascadeMeta.n_fields": [[303, 306], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "n_fields", "(", "self", ")", ":", "\n", "        ", "return", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CenterMeta.n_fields": [[311, 314], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "n_fields", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeField.__init__": [[320, 365], ["super().__init__", "LOG.debug", "torch.nn.Dropout2d", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.PixelShuffle", "Exception", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["def", "__init__", "(", "self", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", "]", ",", "\n", "in_features", ",", "*", ",", "\n", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "CompositeField", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "LOG", ".", "debug", "(", "'%s config: fields = %d, confidences = %d, vectors = %d, scales = %d '", "\n", "'kernel = %d, padding = %d, dilation = %d'", ",", "\n", "meta", ".", "name", ",", "meta", ".", "n_fields", ",", "meta", ".", "n_confidences", ",", "meta", ".", "n_vectors", ",", "meta", ".", "n_scales", ",", "\n", "kernel_size", ",", "padding", ",", "dilation", ")", "\n", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout2d", "(", "p", "=", "self", ".", "dropout_p", ")", "\n", "self", ".", "_quad", "=", "self", ".", "quad", "\n", "\n", "# classification", "\n", "out_features", "=", "meta", ".", "n_fields", "*", "(", "4", "**", "self", ".", "_quad", ")", "\n", "self", ".", "class_convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "\n", "kernel_size", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "for", "_", "in", "range", "(", "meta", ".", "n_confidences", ")", "\n", "]", ")", "\n", "\n", "# regression", "\n", "self", ".", "reg_convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_features", ",", "2", "*", "out_features", ",", "\n", "kernel_size", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "for", "_", "in", "range", "(", "meta", ".", "n_vectors", ")", "\n", "]", ")", "\n", "self", ".", "reg_spreads", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "\n", "kernel_size", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "for", "_", "in", "self", ".", "reg_convs", "\n", "]", ")", "\n", "\n", "# scale", "\n", "self", ".", "scale_convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "\n", "kernel_size", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "for", "_", "in", "range", "(", "meta", ".", "n_scales", ")", "\n", "]", ")", "\n", "\n", "# dequad", "\n", "self", ".", "dequad_op", "=", "torch", ".", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "raise", "Exception", "(", "'use CompositeFieldFused instead of CompositeField'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeField.stride": [[366, 368], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "8", "\n", "#return basenet_stride // (2 ** self._quad)", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeField.forward": [[370, 411], ["heads.CompositeField.dropout", "range", "class_conv", "reg_conv", "reg_spread", "scale_conv", "reg_x.reshape", "torch.sigmoid", "torch.exp", "torch.tanh", "heads.CompositeField.dequad_op", "heads.CompositeField.dequad_op", "heads.CompositeField.dequad_op", "heads.CompositeField.dequad_op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "# classification", "\n", "classes_x", "=", "[", "class_conv", "(", "x", ")", "for", "class_conv", "in", "self", ".", "class_convs", "]", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "classes_x", "=", "[", "torch", ".", "sigmoid", "(", "class_x", ")", "for", "class_x", "in", "classes_x", "]", "\n", "\n", "# regressions", "\n", "", "regs_x", "=", "[", "reg_conv", "(", "x", ")", "for", "reg_conv", "in", "self", ".", "reg_convs", "]", "\n", "regs_logb", "=", "[", "reg_spread", "(", "x", ")", "for", "reg_spread", "in", "self", ".", "reg_spreads", "]", "\n", "if", "self", ".", "training", ":", "\n", "            ", "regs_logb", "=", "[", "3.0", "*", "torch", ".", "tanh", "(", "reg_logb", "/", "3.0", ")", "for", "reg_logb", "in", "regs_logb", "]", "\n", "\n", "# scale", "\n", "", "scales_x", "=", "[", "scale_conv", "(", "x", ")", "for", "scale_conv", "in", "self", ".", "scale_convs", "]", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "scales_x", "=", "[", "torch", ".", "exp", "(", "scale_x", ")", "for", "scale_x", "in", "scales_x", "]", "\n", "\n", "# upscale", "\n", "", "for", "_", "in", "range", "(", "self", ".", "_quad", ")", ":", "\n", "            ", "classes_x", "=", "[", "self", ".", "dequad_op", "(", "class_x", ")", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "for", "class_x", "in", "classes_x", "]", "\n", "regs_x", "=", "[", "self", ".", "dequad_op", "(", "reg_x", ")", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "for", "reg_x", "in", "regs_x", "]", "\n", "regs_logb", "=", "[", "self", ".", "dequad_op", "(", "reg_x_spread", ")", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "for", "reg_x_spread", "in", "regs_logb", "]", "\n", "scales_x", "=", "[", "self", ".", "dequad_op", "(", "scale_x", ")", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "for", "scale_x", "in", "scales_x", "]", "\n", "\n", "# reshape regressions", "\n", "", "regs_x", "=", "[", "\n", "reg_x", ".", "reshape", "(", "reg_x", ".", "shape", "[", "0", "]", ",", "\n", "reg_x", ".", "shape", "[", "1", "]", "//", "2", ",", "\n", "2", ",", "\n", "reg_x", ".", "shape", "[", "2", "]", ",", "\n", "reg_x", ".", "shape", "[", "3", "]", ")", "\n", "for", "reg_x", "in", "regs_x", "\n", "]", "\n", "\n", "return", "classes_x", "+", "regs_x", "+", "regs_logb", "+", "scales_x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.__init__": [[417, 445], ["super().__init__", "LOG.debug", "torch.nn.Dropout2d", "torch.nn.Conv2d", "heads.CompositeFieldFused.out_features.append"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["def", "__init__", "(", "self", ",", "\n", "meta", ":", "Union", "[", "IntensityMeta", ",", "AssociationMeta", ",", "DetectionMeta", "]", ",", "\n", "in_features", ",", "*", ",", "\n", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "LOG", ".", "debug", "(", "'%s config: fields = %d, confidences = %d, vectors = %d, scales = %d '", "\n", "'kernel = %d, padding = %d, dilation = %d'", ",", "\n", "meta", ".", "name", ",", "meta", ".", "n_fields", ",", "meta", ".", "n_confidences", ",", "meta", ".", "n_vectors", ",", "meta", ".", "n_scales", ",", "\n", "kernel_size", ",", "padding", ",", "dilation", ")", "\n", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout2d", "(", "p", "=", "self", ".", "dropout_p", ")", "\n", "self", ".", "_quad", "=", "self", ".", "quad", "\n", "\n", "# convolution", "\n", "feature_groups", "=", "[", "\n", "meta", ".", "n_confidences", "*", "meta", ".", "n_fields", ",", "\n", "meta", ".", "n_vectors", "*", "2", "*", "meta", ".", "n_fields", ",", "\n", "meta", ".", "n_vectors", "*", "1", "*", "meta", ".", "n_fields", ",", "\n", "meta", ".", "n_scales", "*", "meta", ".", "n_fields", ",", "\n", "]", "\n", "self", ".", "out_features", "=", "[", "]", "# the cumulative of the feature_groups above", "\n", "for", "fg", "in", "feature_groups", ":", "\n", "            ", "self", ".", "out_features", ".", "append", "(", "\n", "(", "self", ".", "out_features", "[", "-", "1", "]", "if", "self", ".", "out_features", "else", "0", ")", "+", "fg", ")", "\n", "", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_features", ",", "self", ".", "out_features", "[", "-", "1", "]", "*", "(", "1", "**", "self", ".", "_quad", ")", ",", "\n", "kernel_size", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.sparse_task_parameters": [[449, 452], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sparse_task_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "conv", ".", "weight", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.stride": [[453, 455], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ",", "basenet_stride", ")", ":", "\n", "        ", "return", "basenet_stride", "//", "4", "\n", "#return basenet_stride // (2 ** self._quad)", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.forward": [[457, 501], ["heads.CompositeFieldFused.dropout", "heads.CompositeFieldFused.conv", "torch.sigmoid.view", "regs_x.view.view.view", "regs_logb.view.view.view", "torch.exp.view", "torch.sigmoid", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "# upscale", "\n", "#for _ in range(self._quad):", "\n", "#    x = self.dequad_op(x)[:, :, :-1, :-1]", "\n", "\n", "# classification", "\n", "classes_x", "=", "x", "[", ":", ",", "0", ":", "self", ".", "out_features", "[", "0", "]", "]", "\n", "classes_x", "=", "classes_x", ".", "view", "(", "classes_x", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "meta", ".", "n_fields", ",", "\n", "self", ".", "meta", ".", "n_confidences", ",", "\n", "classes_x", ".", "shape", "[", "2", "]", ",", "\n", "classes_x", ".", "shape", "[", "3", "]", ")", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "classes_x", "=", "torch", ".", "sigmoid", "(", "classes_x", ")", "\n", "\n", "# regressions", "\n", "", "regs_x", "=", "x", "[", ":", ",", "self", ".", "out_features", "[", "0", "]", ":", "self", ".", "out_features", "[", "1", "]", "]", "\n", "regs_x", "=", "regs_x", ".", "view", "(", "regs_x", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "meta", ".", "n_fields", ",", "\n", "self", ".", "meta", ".", "n_vectors", ",", "\n", "2", ",", "\n", "regs_x", ".", "shape", "[", "2", "]", ",", "\n", "regs_x", ".", "shape", "[", "3", "]", ")", "\n", "regs_logb", "=", "x", "[", ":", ",", "self", ".", "out_features", "[", "1", "]", ":", "self", ".", "out_features", "[", "2", "]", "]", "\n", "regs_logb", "=", "regs_logb", ".", "view", "(", "regs_logb", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "meta", ".", "n_fields", ",", "\n", "self", ".", "meta", ".", "n_vectors", ",", "\n", "regs_logb", ".", "shape", "[", "2", "]", ",", "\n", "regs_logb", ".", "shape", "[", "3", "]", ")", "\n", "\n", "# scale", "\n", "scales_x", "=", "x", "[", ":", ",", "self", ".", "out_features", "[", "2", "]", ":", "self", ".", "out_features", "[", "3", "]", "]", "\n", "scales_x", "=", "scales_x", ".", "view", "(", "scales_x", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "meta", ".", "n_fields", ",", "\n", "self", ".", "meta", ".", "n_scales", ",", "\n", "scales_x", ".", "shape", "[", "2", "]", ",", "\n", "scales_x", ".", "shape", "[", "3", "]", ")", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "scales_x", "=", "torch", ".", "exp", "(", "scales_x", ")", "\n", "\n", "", "return", "classes_x", ",", "regs_x", ",", "regs_logb", ",", "scales_x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.index_field_torch": [[14, 27], ["functools.lru_cache", "numpy.indices", "numpy.flip", "torch.from_numpy", "range", "torch.unsqueeze.copy", "torch.unsqueeze.to", "torch.unsqueeze"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.indices"], ["@", "functools", ".", "lru_cache", "(", "maxsize", "=", "16", ")", "\n", "def", "index_field_torch", "(", "shape", ",", "*", ",", "device", "=", "None", ",", "n_unsqueeze", "=", "2", ")", ":", "\n", "    ", "yx", "=", "np", ".", "indices", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "xy", "=", "np", ".", "flip", "(", "yx", ",", "axis", "=", "0", ")", "\n", "\n", "xy", "=", "torch", ".", "from_numpy", "(", "xy", ".", "copy", "(", ")", ")", "\n", "if", "device", "is", "not", "None", ":", "\n", "        ", "xy", "=", "xy", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "n_unsqueeze", ")", ":", "\n", "        ", "xy", "=", "torch", ".", "unsqueeze", "(", "xy", ",", "0", ")", "\n", "\n", "", "return", "xy", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.BasicBlock.__init__": [[41, 58], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.BasicBlock.forward": [[59, 76], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.Bottleneck.__init__": [[87, 103], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.Bottleneck.forward": [[104, 125], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.ResNet.__init__": [[129, 185], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "len", "ValueError", "torch.MaxPool2d", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "use_pool", "=", "False", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "use_pool", "=", "use_pool", "\n", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "self", ".", "use_pool", ":", "\n", "            ", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "# self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.ResNet._make_layer": [[186, 209], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.ResNet._forward_impl": [[210, 235], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.maxpool"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "# See note [TorchScript super()]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_pool", ":", "\n", "            ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "", "outputs", "[", "'stem'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 1/4", "\n", "outputs", "[", "'res2'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 1/8", "\n", "outputs", "[", "'res3'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 1/16", "\n", "outputs", "[", "'res4'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "# 1/32", "\n", "outputs", "[", "'res5'", "]", "=", "x", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.ResNet.forward": [[236, 238], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.conv3x3": [[27, 31], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.conv1x1": [[33, 36], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet": [[240, 248], ["resnet.ResNet", "torchvision.models.utils.load_state_dict_from_url", "ResNet.load_state_dict", "print"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'init resnet using pretrained model'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.resnet18": [[250, 259], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.resnet34": [[261, 270], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.resnet50": [[272, 281], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.resnet101": [[283, 292], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.resnet152": [[294, 303], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.resnext50_32x4d": [[305, 316], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.resnext101_32x8d": [[318, 329], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.wide_resnet50_2": [[331, 345], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet.wide_resnet101_2": [[347, 361], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.factory_from_args": [[29, 44], ["factory.factory", "getattr"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory"], ["\n", "", "def", "configure", "(", "args", ")", ":", "\n", "# configure CIF", "\n", "    ", "Cif", ".", "side_length", "=", "args", ".", "cif_side_length", "\n", "\n", "# configure CAF", "\n", "Caf", ".", "min_size", "=", "args", ".", "caf_min_size", "\n", "Caf", ".", "fixed_size", "=", "args", ".", "caf_fixed_size", "\n", "Caf", ".", "aspect_ratio", "=", "args", ".", "caf_aspect_ratio", "\n", "\n", "\n", "", "def", "factory", "(", "headnets", ",", "basenet_stride", ")", ":", "\n", "    ", "return", "[", "factory_head", "(", "head_net", ",", "basenet_stride", ")", "for", "head_net", "in", "headnets", "]", "\n", "\n", "\n", "", "def", "factory_head", "(", "head_net", ":", "network", ".", "heads", ".", "CompositeField", ",", "basenet_stride", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.local_checkpoint_path": [[47, 66], ["os.path.exists", "os.path.join", "print", "os.path.exists", "os.getenv", "os.path.basename", "os.path.basename", "os.path.join", "os.getenv"], "function", ["None"], ["\n", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "DetectionMeta", ")", ":", "\n", "        ", "n_categories", "=", "len", "(", "meta", ".", "categories", ")", "\n", "LOG", ".", "info", "(", "'selected encoder CIFDET for %s with %d categories'", ",", "meta", ".", "name", ",", "n_categories", ")", "\n", "vis", "=", "visualizer", ".", "CifDet", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "categories", "=", "meta", ".", "categories", ")", "\n", "return", "CifDet", "(", "n_categories", ",", "\n", "AnnRescalerDet", "(", "stride", ",", "n_categories", ")", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "IntensityMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder CIF for %s'", ",", "meta", ".", "name", ")", "\n", "vis", "=", "visualizer", ".", "Cif", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "keypoints", "=", "meta", ".", "keypoints", ",", "skeleton", "=", "meta", ".", "draw_skeleton", ")", "\n", "return", "Cif", "(", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ",", "\n", "sigmas", "=", "meta", ".", "sigmas", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.factory": [[69, 148], ["isinstance", "factory.factory_from_scratch", "CHECKPOINT_URLS.get", "torch.load.startswith", "nets.model_migration", "nets.ShellMultiScale.eval", "any", "heads.CifdetCollector", "heads.CifCafCollector", "nets.Shell2Scale", "nets.ShellMultiScale", "Exception", "Exception", "torch.hub.load_state_dict_from_url", "torch.load", "isinstance", "range", "range", "torch.load.startswith"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.factory_from_scratch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.model_migration"], ["LOG", ".", "info", "(", "'selected encoder CAF for %s'", ",", "meta", ".", "name", ")", "\n", "vis", "=", "visualizer", ".", "Caf", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "keypoints", "=", "meta", ".", "keypoints", ",", "skeleton", "=", "meta", ".", "skeleton", ")", "\n", "return", "Caf", "(", "AnnRescaler", "(", "stride", ",", "n_keypoints", ",", "meta", ".", "pose", ")", ",", "\n", "headname", "=", "meta", ".", "name", ",", "\n", "skeleton", "=", "meta", ".", "skeleton", ",", "\n", "sigmas", "=", "meta", ".", "sigmas", ",", "\n", "sparse_skeleton", "=", "meta", ".", "sparse_skeleton", ",", "\n", "only_in_field_of_view", "=", "meta", ".", "only_in_field_of_view", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "ParsingMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder PDF for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Pdf", "(", "n_fields", "=", "meta", ".", "n_fields", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "OffsetMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder Offset for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Offset", "(", "\n", "rescaler", "=", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ",", "\n", "n_fields", "=", "meta", ".", "n_fields", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "CascadeMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder cascade for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Cascade", "(", "rescaler", "=", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "CenterMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder center for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Pcf", "(", ")", "\n", "\n", "", "raise", "Exception", "(", "'unknown head to create an encoder: {}'", ".", "format", "(", "meta", ".", "name", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.factory_from_scratch": [[150, 167], ["Exception", "datasets.headmeta_mhp.factory", "datasets.headmeta.factory", "factory.resnet_factory_from_scratch", "factory.hrnet_fractory_from_scratch", "factory.xception_factory_from_scratch"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.resnet_factory_from_scratch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.hrnet_fractory_from_scratch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.xception_factory_from_scratch"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.generic_factory_from_scratch": [[169, 183], ["basenetworks.BaseNetwork", "nets.Shell", "nets.model_defaults", "LOG.debug", "heads.CompositeFieldFused"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.model_defaults", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.hrnet_fractory_from_scratch": [[185, 322], ["basenetworks.BaseNetwork", "decoder.SinglePanopticDeepLabDecoder", "nets.ShellHRNet", "print", "nets.model_defaults", "decoder.CascadeRefinementHead", "decoder.SinglePanopticDeepLabDecoder", "decoder.SinglePanopticDeepLabHead", "pose_heads.append", "heads.CompositeFieldFused"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.model_defaults"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.xception_factory_from_scratch": [[414, 541], ["basenetworks.BaseNetwork", "decoder.SinglePanopticDeepLabDecoder", "nets.ShellXception", "nets.model_defaults", "decoder.CascadeRefinementHeadXception", "decoder.SinglePanopticDeepLabDecoder", "decoder.SinglePanopticDeepLabHead", "decoder.SinglePanopticDeepLabDecoder", "decoder.SinglePanopticDeepLabHead", "pose_heads.append", "heads.CompositeFieldFused"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.model_defaults"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.resnet_factory_from_scratch": [[543, 684], ["basenetworks.BaseNetwork", "decoder.SinglePanopticDeepLabDecoder", "decoder.SinglePanopticDeepLabDecoder", "nets.Shell", "print", "nets.model_defaults", "decoder.SinglePanopticDeepLabHeadFused", "segm_heads.append", "decoder.SinglePanopticDeepLabHeadFused", "segm_heads.append", "pose_heads.append", "heads.CompositeFieldFused"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.nets.model_defaults"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.configure": [[686, 692], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.factory.cli": [[694, 726], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.xception.SeparableConv2d.__init__": [[20, 44], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.Conv2d", "norm_layer", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "relu_first", "=", "True", ",", "\n", "bias", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "depthwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "inplanes", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "inplanes", ",", "bias", "=", "bias", ")", "\n", "bn_depth", "=", "norm_layer", "(", "inplanes", ")", "\n", "pointwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "bias", ")", "\n", "bn_point", "=", "norm_layer", "(", "planes", ")", "\n", "\n", "if", "relu_first", ":", "\n", "            ", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'relu'", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "(", "'depthwise'", ",", "depthwise", ")", ",", "\n", "(", "'bn_depth'", ",", "bn_depth", ")", ",", "\n", "(", "'pointwise'", ",", "pointwise", ")", ",", "\n", "(", "'bn_point'", ",", "bn_point", ")", "\n", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'depthwise'", ",", "depthwise", ")", ",", "\n", "(", "'bn_depth'", ",", "bn_depth", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pointwise'", ",", "pointwise", ")", ",", "\n", "(", "'bn_point'", ",", "bn_point", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.xception.SeparableConv2d.forward": [[46, 48], ["xception.SeparableConv2d.block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.xception.XceptionBlock.__init__": [[51, 71], ["torch.Module.__init__", "xception.SeparableConv2d", "xception.SeparableConv2d", "xception.SeparableConv2d", "len", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_list", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "skip_connection_type", "=", "'conv'", ",", "relu_first", "=", "True", ",", "\n", "low_feat", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "XceptionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "channel_list", ")", "==", "4", "\n", "self", ".", "skip_connection_type", "=", "skip_connection_type", "\n", "self", ".", "relu_first", "=", "relu_first", "\n", "self", ".", "low_feat", "=", "low_feat", "\n", "\n", "if", "self", ".", "skip_connection_type", "==", "'conv'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "channel_list", "[", "0", "]", ",", "channel_list", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "channel_list", "[", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "sep_conv1", "=", "SeparableConv2d", "(", "channel_list", "[", "0", "]", ",", "channel_list", "[", "1", "]", ",", "dilation", "=", "dilation", ",", "\n", "relu_first", "=", "relu_first", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "sep_conv2", "=", "SeparableConv2d", "(", "channel_list", "[", "1", "]", ",", "channel_list", "[", "2", "]", ",", "dilation", "=", "dilation", ",", "\n", "relu_first", "=", "relu_first", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "sep_conv3", "=", "SeparableConv2d", "(", "channel_list", "[", "2", "]", ",", "channel_list", "[", "3", "]", ",", "dilation", "=", "dilation", ",", "\n", "relu_first", "=", "relu_first", ",", "stride", "=", "stride", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "last_inp_channels", "=", "channel_list", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.xception.XceptionBlock.forward": [[72, 92], ["xception.XceptionBlock.sep_conv1", "xception.XceptionBlock.sep_conv2", "xception.XceptionBlock.sep_conv3", "xception.XceptionBlock.conv", "xception.XceptionBlock.bn", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "sc1", "=", "self", ".", "sep_conv1", "(", "inputs", ")", "\n", "sc2", "=", "self", ".", "sep_conv2", "(", "sc1", ")", "\n", "residual", "=", "self", ".", "sep_conv3", "(", "sc2", ")", "\n", "\n", "if", "self", ".", "skip_connection_type", "==", "'conv'", ":", "\n", "            ", "shortcut", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "shortcut", "=", "self", ".", "bn", "(", "shortcut", ")", "\n", "outputs", "=", "residual", "+", "shortcut", "\n", "", "elif", "self", ".", "skip_connection_type", "==", "'sum'", ":", "\n", "            ", "outputs", "=", "residual", "+", "inputs", "\n", "", "elif", "self", ".", "skip_connection_type", "==", "'none'", ":", "\n", "            ", "outputs", "=", "residual", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported skip connection type.'", ")", "\n", "\n", "", "if", "self", ".", "low_feat", ":", "\n", "            ", "return", "outputs", ",", "sc2", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.xception.Xception65.__init__": [[95, 185], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.Conv2d", "norm_layer", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "xception.XceptionBlock", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Xception65", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "if", "replace_stride_with_dilation", "[", "1", "]", ":", "\n", "            ", "assert", "replace_stride_with_dilation", "[", "2", "]", "\n", "output_stride", "=", "8", "\n", "", "elif", "replace_stride_with_dilation", "[", "2", "]", ":", "\n", "            ", "output_stride", "=", "16", "\n", "", "else", ":", "\n", "            ", "output_stride", "=", "32", "\n", "\n", "", "if", "output_stride", "==", "32", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "1", ")", "\n", "exit_block_stride", "=", "2", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "2", ")", "\n", "exit_block_stride", "=", "1", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "entry_block3_stride", "=", "1", "\n", "middle_block_dilation", "=", "2", "\n", "exit_block_dilations", "=", "(", "2", ",", "4", ")", "\n", "exit_block_stride", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Entry flow", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "64", ")", "\n", "\n", "self", ".", "block1", "=", "XceptionBlock", "(", "[", "64", ",", "128", ",", "128", ",", "128", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block2", "=", "XceptionBlock", "(", "[", "128", ",", "256", ",", "256", ",", "256", "]", ",", "stride", "=", "2", ",", "low_feat", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block3", "=", "XceptionBlock", "(", "[", "256", ",", "728", ",", "728", ",", "728", "]", ",", "stride", "=", "entry_block3_stride", ",", "low_feat", "=", "True", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# Middle flow (16 units)", "\n", "self", ".", "block4", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block5", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block6", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block7", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block8", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block9", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block10", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block11", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block12", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block13", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block14", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block15", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block16", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block17", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block18", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block19", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "728", ",", "728", "]", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "skip_connection_type", "=", "'sum'", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "# Exit flow", "\n", "self", ".", "block20", "=", "XceptionBlock", "(", "[", "728", ",", "728", ",", "1024", ",", "1024", "]", ",", "stride", "=", "exit_block_stride", ",", "\n", "dilation", "=", "exit_block_dilations", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "block21", "=", "XceptionBlock", "(", "[", "1024", ",", "1536", ",", "1536", ",", "2048", "]", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "\n", "skip_connection_type", "=", "'none'", ",", "relu_first", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.xception.Xception65.forward": [[186, 229], ["xception.Xception65.conv1", "xception.Xception65.bn1", "xception.Xception65.relu", "xception.Xception65.conv2", "xception.Xception65.bn2", "xception.Xception65.relu", "xception.Xception65.block1", "xception.Xception65.block2", "xception.Xception65.block3", "xception.Xception65.block4", "xception.Xception65.block5", "xception.Xception65.block6", "xception.Xception65.block7", "xception.Xception65.block8", "xception.Xception65.block9", "xception.Xception65.block10", "xception.Xception65.block11", "xception.Xception65.block12", "xception.Xception65.block13", "xception.Xception65.block14", "xception.Xception65.block15", "xception.Xception65.block16", "xception.Xception65.block17", "xception.Xception65.block18", "xception.Xception65.block19", "xception.Xception65.block20", "xception.Xception65.block21"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.block2", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.block3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.block4", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.basenetworks.ResnetBlocks.block5"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "# Entry flow", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "outputs", "[", "'stem'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", ",", "c1", "=", "self", ".", "block2", "(", "x", ")", "# b, h//4, w//4, 256", "\n", "outputs", "[", "'res2'", "]", "=", "c1", "\n", "x", ",", "c2", "=", "self", ".", "block3", "(", "x", ")", "# b, h//8, w//8, 728", "\n", "outputs", "[", "'res3'", "]", "=", "c2", "\n", "\n", "# Middle flow", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "x", "=", "self", ".", "block13", "(", "x", ")", "\n", "x", "=", "self", ".", "block14", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block16", "(", "x", ")", "\n", "x", "=", "self", ".", "block17", "(", "x", ")", "\n", "x", "=", "self", ".", "block18", "(", "x", ")", "\n", "c3", "=", "self", ".", "block19", "(", "x", ")", "\n", "outputs", "[", "'res4'", "]", "=", "c3", "\n", "\n", "# Exit flow", "\n", "x", "=", "self", ".", "block20", "(", "c3", ")", "\n", "c4", "=", "self", ".", "block21", "(", "x", ")", "\n", "outputs", "[", "'res5'", "]", "=", "c4", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.xception.xception65": [[231, 238], ["xception.Xception65", "torchvision.models.utils.load_state_dict_from_url", "Xception65.load_state_dict"], "function", ["None"], ["", "", "def", "xception65", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "Xception65", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'xception65'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.ocrnet.HRNet_W48_OCR.__init__": [[14, 53], ["torch.Module.__init__", "hrnet_package.hrnet_backbone.HRNetBackbone.", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.spatial_ocr_block.SpatialGather_Module", "modules.spatial_ocr_block.SpatialOCR_Module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "hrnet_package.hrnet_backbone_pp.HRNetBackbone", "hrnet_package.hrnet_backbone.HRNetBackbone", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.module_helper.ModuleHelper.BNReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.module_helper.ModuleHelper.BNReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.module_helper.ModuleHelper.BNReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", ",", "bn_type", ",", "backbone", "=", "'hrnet48'", ",", "num_classes", "=", "20", ")", ":", "\n", "        ", "super", "(", "HRNet_W48_OCR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "backbone", "=", "backbone", "\n", "\n", "if", "backbone", "==", "'hrnet48++'", ":", "\n", "            ", "hrnet_backbone_func", "=", "HRNetBackbonePP", "(", "pretrained", "=", "pretrained", ",", "bn_type", "=", "bn_type", ",", "backbone", "=", "backbone", ")", "\n", "", "else", ":", "\n", "            ", "hrnet_backbone_func", "=", "HRNetBackbone", "(", "pretrained", "=", "pretrained", ",", "bn_type", "=", "bn_type", ",", "backbone", "=", "backbone", ")", "\n", "", "self", ".", "backbone", "=", "hrnet_backbone_func", "(", ")", "\n", "\n", "if", "backbone", "==", "'hrnet48'", ":", "\n", "            ", "in_channels", "=", "720", "\n", "", "elif", "backbone", "==", "'hrnet48++'", ":", "\n", "            ", "in_channels", "=", "2944", "\n", "\n", "", "self", ".", "conv3x3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "512", ",", "bn_type", "=", "bn_type", ")", ")", "\n", "self", ".", "ocr_gather_head", "=", "SpatialGather_Module", "(", "self", ".", "num_classes", ")", "\n", "self", ".", "ocr_distri_head", "=", "SpatialOCR_Module", "(", "in_channels", "=", "512", ",", "\n", "key_channels", "=", "256", ",", "\n", "out_channels", "=", "512", ",", "\n", "scale", "=", "1", ",", "\n", "dropout", "=", "0.05", ",", "\n", "bn_type", "=", "bn_type", ")", "\n", "self", ".", "cls_head", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "if", "backbone", "==", "'hrnet48'", ":", "\n", "            ", "self", ".", "aux_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "in_channels", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "aux_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "720", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "720", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "nn", ".", "Conv2d", "(", "720", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.ocrnet.HRNet_W48_OCR.forward": [[55, 77], ["ocrnet.HRNet_W48_OCR.backbone", "x[].size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ocrnet.HRNet_W48_OCR.aux_head", "ocrnet.HRNet_W48_OCR.conv3x3", "ocrnet.HRNet_W48_OCR.ocr_gather_head", "ocrnet.HRNet_W48_OCR.ocr_distri_head", "ocrnet.HRNet_W48_OCR.cls_head", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "x_.size", "x_.size", "x_.size", "x_.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "", "def", "forward", "(", "self", ",", "x_", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x_", ")", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "x", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "feat1", "=", "x", "[", "0", "]", "\n", "feat2", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "feat3", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "feat4", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "\n", "feats", "=", "torch", ".", "cat", "(", "[", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", "]", ",", "1", ")", "\n", "out_aux", "=", "self", ".", "aux_head", "(", "feats", ")", "\n", "\n", "feats", "=", "self", ".", "conv3x3", "(", "feats", ")", "\n", "\n", "context", "=", "self", ".", "ocr_gather_head", "(", "feats", ",", "out_aux", ")", "\n", "feats", "=", "self", ".", "ocr_distri_head", "(", "feats", ",", "context", ")", "\n", "\n", "out", "=", "self", ".", "cls_head", "(", "feats", ")", "\n", "\n", "out_aux", "=", "F", ".", "interpolate", "(", "out_aux", ",", "size", "=", "(", "x_", ".", "size", "(", "2", ")", ",", "x_", ".", "size", "(", "3", ")", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "out", ",", "size", "=", "(", "x_", ".", "size", "(", "2", ")", ",", "x_", ".", "size", "(", "3", ")", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "return", "out", ",", "out_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.ocrnet.get_model": [[79, 82], ["ocrnet.HRNet_W48_OCR"], "function", ["None"], ["", "", "def", "get_model", "(", "pretrained", "=", "None", ",", "bn_type", "=", "'inplace_abn'", ",", "backbone", "=", "'hrnet48'", ",", "num_classes", "=", "20", ")", ":", "\n", "    ", "model", "=", "HRNet_W48_OCR", "(", "pretrained", ",", "bn_type", ",", "num_classes", "=", "num_classes", ",", "backbone", "=", "backbone", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CenterLoss.__init__": [[18, 24], ["super().__init__", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CenterLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "field_names", "=", "[", "'center'", ",", "'center_offset'", "]", "\n", "\n", "self", ".", "offset_loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "center_loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CenterLoss.forward": [[25, 55], ["weight[].expand_as", "weight[].expand_as", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "losses.CenterLoss.offset_loss", "weight[].expand_as.sum", "losses.CenterLoss.center_loss", "weight[].expand_as.sum", "offset_loss.sum", "center_loss.sum", "weight[].expand_as.sum", "center_loss.sum", "offset_loss.sum", "weight[].expand_as.sum"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "preds", ",", "targets", ")", ":", "\n", "        ", "pred_center", ",", "pred_offset", "=", "preds", "[", "'center'", "]", ",", "preds", "[", "'center_offset'", "]", "\n", "target_center", ",", "target_offset", "=", "targets", "[", "0", "]", ",", "targets", "[", "1", "]", "\n", "weight", "=", "targets", "[", "2", "]", "\n", "\n", "offset_loss_weights", "=", "weight", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "expand_as", "(", "target_offset", ")", "\n", "center_loss_weights", "=", "weight", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "expand_as", "(", "target_center", ")", "\n", "\n", "pred_h", ",", "pred_w", "=", "pred_offset", ".", "shape", "[", "2", "]", ",", "pred_offset", ".", "shape", "[", "3", "]", "\n", "target_h", ",", "target_w", "=", "target_center", ".", "shape", "[", "2", "]", ",", "target_center", ".", "shape", "[", "3", "]", "\n", "pred_center", "=", "F", ".", "interpolate", "(", "pred_center", ",", "size", "=", "(", "target_h", ",", "target_w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "pred_offset", "=", "F", ".", "interpolate", "(", "pred_offset", ",", "size", "=", "(", "target_h", ",", "target_w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scale", "=", "(", "target_h", "-", "1", ")", "//", "(", "pred_h", "-", "1", ")", "\n", "pred_offset", "*=", "scale", "\n", "\n", "offset_loss", "=", "self", ".", "offset_loss", "(", "pred_offset", ",", "target_offset", ")", "*", "offset_loss_weights", "\n", "if", "offset_loss_weights", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "offset_loss", "=", "offset_loss", ".", "sum", "(", ")", "/", "offset_loss_weights", ".", "sum", "(", ")", "/", "10", "\n", "", "else", ":", "\n", "            ", "offset_loss", "=", "offset_loss", ".", "sum", "(", ")", "*", "0", "\n", "\n", "", "center_loss", "=", "self", ".", "center_loss", "(", "pred_center", ",", "target_center", ")", "*", "center_loss_weights", "\n", "if", "center_loss_weights", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "center_loss", "=", "center_loss", ".", "sum", "(", ")", "/", "center_loss_weights", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "center_loss", "=", "center_loss", ".", "sum", "(", ")", "*", "0", "\n", "\n", "", "return", "[", "center_loss", ",", "offset_loss", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CascadeLoss.__init__": [[215, 220], ["super().__init__", "losses.SemanticParsingLoss", "losses.OffsetLoss"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "255", ",", "reg_loss_name", "=", "'l1'", ")", ":", "\n", "        ", "super", "(", "CascadeLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "field_names", "=", "[", "'cascade'", "]", "\n", "self", ".", "semantic_parsing_loss", "=", "SemanticParsingLoss", "(", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "offset_regression_loss", "=", "OffsetLoss", "(", "reg_loss_name", "=", "reg_loss_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.CascadeLoss.forward": [[221, 223], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "preds", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.Bce.__init__": [[226, 230], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "focal_gamma", "=", "0.0", ",", "detach_focal", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "focal_gamma", "=", "focal_gamma", "\n", "self", ".", "detach_focal", "=", "detach_focal", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.Bce.forward": [[231, 250], ["t.clone", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "focal.detach.detach.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "t", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "t_zeroone", "=", "t", ".", "clone", "(", ")", "\n", "t_zeroone", "[", "t_zeroone", ">", "0.0", "]", "=", "1.0", "\n", "# x = torch.clamp(x, -20.0, 20.0)", "\n", "bce", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "\n", "x", ",", "t_zeroone", ",", "reduction", "=", "'none'", ")", "\n", "bce", "=", "torch", ".", "clamp", "(", "bce", ",", "0.02", ",", "5.0", ")", "# 0.02 -> -3.9, 0.01 -> -4.6, 0.001 -> -7, 0.0001 -> -9", "\n", "\n", "if", "self", ".", "focal_gamma", "!=", "0.0", ":", "\n", "            ", "pt", "=", "torch", ".", "exp", "(", "-", "bce", ")", "\n", "focal", "=", "(", "1.0", "-", "pt", ")", "**", "self", ".", "focal_gamma", "\n", "if", "self", ".", "detach_focal", ":", "\n", "                ", "focal", "=", "focal", ".", "detach", "(", ")", "\n", "", "bce", "=", "focal", "*", "bce", "\n", "\n", "", "weight_mask", "=", "t_zeroone", "!=", "t", "\n", "bce", "[", "weight_mask", "]", "=", "bce", "[", "weight_mask", "]", "*", "t", "[", "weight_mask", "]", "\n", "\n", "return", "bce", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.ScaleLoss.__init__": [[253, 258], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "b", ",", "*", ",", "low_clip", "=", "0.0", ",", "relative", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "b", "=", "b", "\n", "self", ".", "low_clip", "=", "low_clip", "\n", "self", ".", "relative", "=", "relative", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.ScaleLoss.forward": [[259, 272], ["torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.l1_loss", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.l1_loss", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.l1_loss", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.losses.l1_loss"], ["", "def", "forward", "(", "self", ",", "logs", ",", "t", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "\n", "torch", ".", "exp", "(", "logs", ")", ",", "\n", "t", ",", "\n", "reduction", "=", "'none'", ",", "\n", ")", "\n", "loss", "=", "torch", ".", "clamp", "(", "loss", ",", "self", ".", "low_clip", ",", "5.0", ")", "\n", "\n", "loss", "=", "loss", "/", "self", ".", "b", "\n", "if", "self", ".", "relative", ":", "\n", "            ", "loss", "=", "loss", "/", "(", "1.0", "+", "t", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.__init__": [[34, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "stack", "=", "False", ",", "padding_value", "=", "0", ",", "cpu_only", "=", "False", ")", ":", "\n", "        ", "self", ".", "_data", "=", "data", "\n", "self", ".", "_cpu_only", "=", "cpu_only", "\n", "self", ".", "_stack", "=", "stack", "\n", "self", ".", "_padding_value", "=", "padding_value", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.__repr__": [[40, 42], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "repr", "(", "self", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.data": [[43, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.datatype": [[47, 53], ["isinstance", "data_container.DataContainer.data.type", "type"], "methods", ["None"], ["", "@", "property", "\n", "def", "datatype", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "type", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "type", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.cpu_only": [[54, 57], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "cpu_only", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cpu_only", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "stack", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.padding_value": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "padding_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_padding_value", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size": [[66, 69], ["data_container.DataContainer.data.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "@", "assert_tensor_type", "\n", "def", "size", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "size", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim": [[70, 73], ["data_container.DataContainer.data.dim"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["", "@", "assert_tensor_type", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "dim", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel": [[74, 77], ["data_container.DataContainer.data.numel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel"], ["", "@", "assert_tensor_type", "\n", "def", "numel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "numel", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.assert_tensor_type": [[6, 16], ["functools.wraps", "func", "isinstance", "AttributeError"], "function", ["None"], ["def", "assert_tensor_type", "(", "func", ")", ":", "\n", "\n", "    ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ".", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "'{} has no attribute {} for type {}'", ".", "format", "(", "\n", "args", "[", "0", "]", ".", "__class__", ".", "__name__", ",", "func", ".", "__name__", ",", "args", "[", "0", "]", ".", "datatype", ")", ")", "\n", "", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.distributed.MMDistributedDataParallel.__init__": [[12, 21], ["torch.Module.__init__", "distributed.MMDistributedDataParallel._sync_params"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.distributed.MMDistributedDataParallel._sync_params"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "dim", "=", "0", ",", "broadcast_buffers", "=", "True", ",", "\n", "bucket_cap_mb", "=", "25", ")", ":", "\n", "        ", "super", "(", "MMDistributedDataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "broadcast_buffers", "=", "broadcast_buffers", "\n", "\n", "self", ".", "broadcast_bucket_size", "=", "bucket_cap_mb", "*", "1024", "*", "1024", "\n", "self", ".", "_sync_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.distributed.MMDistributedDataParallel._dist_broadcast_coalesced": [[22, 29], ["torch._utils._take_tensors", "torch._utils._take_tensors", "torch._utils._take_tensors", "torch._utils._flatten_dense_tensors", "torch._utils._flatten_dense_tensors", "torch._utils._flatten_dense_tensors", "torch.broadcast", "torch.broadcast", "torch.broadcast", "zip", "torch._utils._unflatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "methods", ["None"], ["", "def", "_dist_broadcast_coalesced", "(", "self", ",", "tensors", ",", "buffer_size", ")", ":", "\n", "        ", "for", "tensors", "in", "_take_tensors", "(", "tensors", ",", "buffer_size", ")", ":", "\n", "            ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "tensors", ")", "\n", "dist", ".", "broadcast", "(", "flat_tensors", ",", "0", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "tensors", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "tensors", ")", ")", ":", "\n", "                ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.distributed.MMDistributedDataParallel._sync_params": [[30, 40], ["list", "distributed.MMDistributedDataParallel.module.state_dict().values", "len", "distributed.MMDistributedDataParallel._dist_broadcast_coalesced", "len", "distributed.MMDistributedDataParallel._dist_broadcast_coalesced", "distributed.MMDistributedDataParallel.module.state_dict", "distributed.MMDistributedDataParallel.module._all_buffers"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.distributed.MMDistributedDataParallel._dist_broadcast_coalesced", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.distributed.MMDistributedDataParallel._dist_broadcast_coalesced"], ["", "", "", "def", "_sync_params", "(", "self", ")", ":", "\n", "        ", "module_states", "=", "list", "(", "self", ".", "module", ".", "state_dict", "(", ")", ".", "values", "(", ")", ")", "\n", "if", "len", "(", "module_states", ")", ">", "0", ":", "\n", "            ", "self", ".", "_dist_broadcast_coalesced", "(", "module_states", ",", "\n", "self", ".", "broadcast_bucket_size", ")", "\n", "", "if", "self", ".", "broadcast_buffers", ":", "\n", "            ", "buffers", "=", "[", "b", ".", "data", "for", "b", "in", "self", ".", "module", ".", "_all_buffers", "(", ")", "]", "\n", "if", "len", "(", "buffers", ")", ">", "0", ":", "\n", "                ", "self", ".", "_dist_broadcast_coalesced", "(", "buffers", ",", "\n", "self", ".", "broadcast_bucket_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.distributed.MMDistributedDataParallel.scatter": [[41, 43], ["scatter_gather.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.scatter_gather.scatter_kwargs"], ["", "", "", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.distributed.MMDistributedDataParallel.forward": [[44, 48], ["distributed.MMDistributedDataParallel.scatter", "distributed.MMDistributedDataParallel.module", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.Reduce.forward": [[29, 34], ["sorted", "torch.reduce_add", "torch.reduce_add", "inputs[].get_device", "range", "len", "i.get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", "]", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", ".", "get_device", "(", ")", ")", "\n", "return", "comm", ".", "reduce_add", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.Reduce.backward": [[35, 38], ["torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradOutput", ")", ":", "\n", "        ", "return", "Broadcast", ".", "apply", "(", "ctx", ".", "target_gpus", ",", "gradOutput", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.__init__": [[69, 72], ["torch.nn.parallel.data_parallel.DataParallel.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "gather_", "=", "True", ")", ":", "\n", "        ", "super", "(", "DataParallelModel", ",", "self", ")", ".", "__init__", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ")", "\n", "self", ".", "gather_", "=", "gather_", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather": [[73, 78], ["torch.nn.parallel.scatter_gather.gather", "torch.nn.parallel.scatter_gather.gather"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather"], ["", "def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "if", "self", ".", "gather_", ":", "\n", "            ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.scatter": [[79, 81], ["lib.extensions.parallel.scatter_gather.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.scatter_gather.scatter_kwargs"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.replicate": [[82, 86], ["super().replicate", "data_parallel.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.replicate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.execute_replication_callbacks"], ["", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelModel", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelCriterion.__init__": [[104, 106], ["torch.nn.parallel.data_parallel.DataParallel.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ")", ":", "\n", "        ", "super", "(", "DataParallelCriterion", ",", "self", ")", ".", "__init__", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelCriterion.scatter": [[107, 109], ["lib.extensions.parallel.scatter_gather.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.scatter_gather.scatter_kwargs"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelCriterion.forward": [[110, 131], ["data_parallel.DataParallelCriterion.scatter", "data_parallel.DataParallelCriterion.replicate", "data_parallel._criterion_parallel_apply", "isinstance", "data_parallel.DataParallelCriterion.module", "len", "data_parallel.DataParallelCriterion.module", "Reduce.apply", "len", "data_parallel.DataParallelCriterion.scatter", "data_parallel.DataParallelCriterion.scatter", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.replicate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel._criterion_parallel_apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "*", "targets", ",", "gathered", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# input should be already scatterd", "\n", "# scattering the targets instead", "\n", "        ", "if", "gathered", ":", "\n", "            ", "if", "isinstance", "(", "inputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "inputs", ",", "_", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "", "else", ":", "\n", "                ", "inputs", ",", "_", "=", "self", ".", "scatter", "(", "[", "inputs", "]", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "# inputs = tuple(inputs_per_gpu[0] for inputs_per_gpu in inputs)", "\n", "\n", "", "", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", "\n", "\n", "", "targets", ",", "kwargs", "=", "self", ".", "scatter", "(", "targets", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", "[", "0", "]", ",", "*", "targets", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "# targets = tuple(targets_per_gpu[0] for targets_per_gpu in targets)", "\n", "outputs", "=", "_criterion_parallel_apply", "(", "replicas", ",", "inputs", ",", "targets", ",", "kwargs", ")", "\n", "return", "Reduce", ".", "apply", "(", "*", "outputs", ")", "/", "len", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel._criterion_parallel_apply": [[133, 185], ["threading.Lock", "range", "len", "len", "len", "len", "torch.is_grad_enabled", "torch.is_grad_enabled", "len", "data_parallel._criterion_parallel_apply._worker"], "function", ["None"], ["", "", "def", "_criterion_parallel_apply", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", "=", "None", ",", "devices", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "modules", ")", "==", "len", "(", "inputs", ")", "\n", "assert", "len", "(", "targets", ")", "==", "len", "(", "inputs", ")", "\n", "if", "kwargs_tup", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "kwargs_tup", ")", "\n", "", "else", ":", "\n", "        ", "kwargs_tup", "=", "(", "{", "}", ",", ")", "*", "len", "(", "modules", ")", "\n", "", "if", "devices", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "devices", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "[", "None", "]", "*", "len", "(", "modules", ")", "\n", "\n", "", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "results", "=", "{", "}", "\n", "if", "torch_ver", "!=", "\"0.3\"", ":", "\n", "        ", "grad_enabled", "=", "torch", ".", "is_grad_enabled", "(", ")", "\n", "\n", "", "def", "_worker", "(", "i", ",", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", "=", "None", ")", ":", "\n", "        ", "if", "torch_ver", "!=", "\"0.3\"", ":", "\n", "            ", "torch", ".", "set_grad_enabled", "(", "grad_enabled", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "get_a_var", "(", "input", ")", ".", "get_device", "(", ")", "\n", "", "try", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "device", ")", ":", "\n", "                ", "output", "=", "module", "(", "input", ",", "*", "target", ",", "**", "kwargs", ")", "\n", "", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "output", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "e", "\n", "\n", "", "", "", "if", "len", "(", "modules", ")", ">", "1", ":", "\n", "        ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "_worker", ",", "\n", "args", "=", "(", "i", ",", "module", ",", "input", ",", "target", ",", "\n", "kwargs", ",", "device", ")", ",", ")", "\n", "for", "i", ",", "(", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", ")", "in", "\n", "enumerate", "(", "zip", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", ",", "devices", ")", ")", "]", "\n", "\n", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "_worker", "(", "0", ",", "modules", "[", "0", "]", ",", "inputs", "[", "0", "]", ",", "targets", "[", "0", "]", ",", "kwargs_tup", "[", "0", "]", ",", "devices", "[", "0", "]", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "output", "=", "results", "[", "i", "]", "\n", "if", "isinstance", "(", "output", ",", "Exception", ")", ":", "\n", "            ", "raise", "output", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.execute_replication_callbacks": [[195, 217], ["len", "enumerate", "list", "data_parallel.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._SyncBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created\n    by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead\n    of calling the callback of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.patch_replication_callback": [[219, 244], ["isinstance", "functools.wraps", "old_replicate", "data_parallel.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.execute_replication_callbacks"], ["", "", "", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.scatter_gather.scatter": [[8, 43], ["isinstance", "isinstance", "scatter_gather.scatter.scatter_map"], "function", ["None"], ["def", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"Scatter inputs to target gpus.\n\n    The only difference from original :func:`scatter` is to add support for\n    :type:`~mmcv.parallel.DataContainer`.\n    \"\"\"", "\n", "\n", "def", "scatter_map", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "OrigScatter", ".", "apply", "(", "target_gpus", ",", "None", ",", "dim", ",", "obj", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "DataContainer", ")", ":", "\n", "            ", "if", "obj", ".", "cpu_only", ":", "\n", "                ", "return", "obj", ".", "data", "\n", "", "else", ":", "\n", "                ", "return", "Scatter", ".", "forward", "(", "target_gpus", ",", "obj", ".", "data", ")", "\n", "", "", "if", "isinstance", "(", "obj", ",", "tuple", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "out", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", ")", "\n", "return", "out", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "out", "=", "list", "(", "map", "(", "type", "(", "obj", ")", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ".", "items", "(", ")", ")", ")", ")", ")", "\n", "return", "out", "\n", "\n", "", "return", "[", "obj", "for", "targets", "in", "target_gpus", "]", "\n", "\n", "# After scatter_map is called, a scatter_map cell will exist. This cell", "\n", "# has a reference to the actual function scatter_map, which has references", "\n", "# to a closure that has a reference to the scatter_map cell (because the", "\n", "# fn is recursive). To avoid this reference cycle, we set the function to", "\n", "# None, clearing the cell", "\n", "", "try", ":", "\n", "        ", "return", "scatter_map", "(", "inputs", ")", "\n", "", "finally", ":", "\n", "        ", "scatter_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.scatter_gather.scatter_kwargs": [[45, 56], ["tuple", "tuple", "scatter_gather.scatter", "scatter_gather.scatter", "len", "len", "tuple.extend", "len", "len", "tuple.extend", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter"], ["", "", "def", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "target_gpus", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"Scatter with support for kwargs dictionary\"\"\"", "\n", "inputs", "=", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", ")", "if", "inputs", "else", "[", "]", "\n", "kwargs", "=", "scatter", "(", "kwargs", ",", "target_gpus", ",", "dim", ")", "if", "kwargs", "else", "[", "]", "\n", "if", "len", "(", "inputs", ")", "<", "len", "(", "kwargs", ")", ":", "\n", "        ", "inputs", ".", "extend", "(", "[", "(", ")", "for", "_", "in", "range", "(", "len", "(", "kwargs", ")", "-", "len", "(", "inputs", ")", ")", "]", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "        ", "kwargs", ".", "extend", "(", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", "-", "len", "(", "kwargs", ")", ")", "]", ")", "\n", "", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "kwargs", "=", "tuple", "(", "kwargs", ")", "\n", "return", "inputs", ",", "kwargs", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.Scatter.forward": [[61, 75], ["_functions.get_input_device", "_functions.scatter", "tuple", "_functions.synchronize_stream", "torch.nn.parallel._functions._get_stream"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.get_input_device", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.synchronize_stream"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "target_gpus", ",", "input", ")", ":", "\n", "        ", "input_device", "=", "get_input_device", "(", "input", ")", "\n", "streams", "=", "None", "\n", "if", "input_device", "==", "-", "1", ":", "\n", "# Perform CPU to GPU copies in a background stream", "\n", "            ", "streams", "=", "[", "_get_stream", "(", "device", ")", "for", "device", "in", "target_gpus", "]", "\n", "\n", "", "outputs", "=", "scatter", "(", "input", ",", "target_gpus", ",", "streams", ")", "\n", "# Synchronize with the copy stream", "\n", "if", "streams", "is", "not", "None", ":", "\n", "            ", "synchronize_stream", "(", "outputs", ",", "target_gpus", ",", "streams", ")", "\n", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter": [[5, 27], ["isinstance", "isinstance", "len", "_functions.scatter", "input.contiguous", "Exception", "len", "range", "torch.cuda.device", "torch.cuda.stream", "output.cuda.cuda", "len", "len", "output.cuda.numel", "type"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel"], ["def", "scatter", "(", "input", ",", "devices", ",", "streams", "=", "None", ")", ":", "\n", "    ", "\"\"\"Scatters tensor across multiple GPUs.\n    \"\"\"", "\n", "if", "streams", "is", "None", ":", "\n", "        ", "streams", "=", "[", "None", "]", "*", "len", "(", "devices", ")", "\n", "\n", "", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "        ", "chunk_size", "=", "(", "len", "(", "input", ")", "-", "1", ")", "//", "len", "(", "devices", ")", "+", "1", "\n", "outputs", "=", "[", "\n", "scatter", "(", "input", "[", "i", "]", ",", "[", "devices", "[", "i", "//", "chunk_size", "]", "]", ",", "\n", "[", "streams", "[", "i", "//", "chunk_size", "]", "]", ")", "for", "i", "in", "range", "(", "len", "(", "input", ")", ")", "\n", "]", "\n", "return", "outputs", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "output", "=", "input", ".", "contiguous", "(", ")", "\n", "# TODO: copy to a pinned buffer first (if copying from CPU)", "\n", "stream", "=", "streams", "[", "0", "]", "if", "output", ".", "numel", "(", ")", ">", "0", "else", "None", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "devices", "[", "0", "]", ")", ",", "torch", ".", "cuda", ".", "stream", "(", "stream", ")", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", "devices", "[", "0", "]", ",", "non_blocking", "=", "True", ")", "\n", "", "return", "output", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown type {}.'", ".", "format", "(", "type", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.synchronize_stream": [[29, 44], ["isinstance", "range", "isinstance", "len", "len", "len", "range", "Exception", "_functions.synchronize_stream", "output.numel", "torch.cuda.device", "torch.cuda.current_stream", "torch.cuda.current_stream.wait_stream", "output.record_stream", "type"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.synchronize_stream", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel"], ["", "", "def", "synchronize_stream", "(", "output", ",", "devices", ",", "streams", ")", ":", "\n", "    ", "if", "isinstance", "(", "output", ",", "list", ")", ":", "\n", "        ", "chunk_size", "=", "len", "(", "output", ")", "//", "len", "(", "devices", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "devices", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "chunk_size", ")", ":", "\n", "                ", "synchronize_stream", "(", "output", "[", "i", "*", "chunk_size", "+", "j", "]", ",", "[", "devices", "[", "i", "]", "]", ",", "\n", "[", "streams", "[", "i", "]", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "output", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "output", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "devices", "[", "0", "]", ")", ":", "\n", "                ", "main_stream", "=", "torch", ".", "cuda", ".", "current_stream", "(", ")", "\n", "main_stream", ".", "wait_stream", "(", "streams", "[", "0", "]", ")", "\n", "output", ".", "record_stream", "(", "main_stream", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown type {}.'", ".", "format", "(", "type", "(", "output", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.get_input_device": [[46, 57], ["isinstance", "isinstance", "_functions.get_input_device", "Exception", "input.get_device", "type"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.get_input_device"], ["", "", "def", "get_input_device", "(", "input", ")", ":", "\n", "    ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "        ", "for", "item", "in", "input", ":", "\n", "            ", "input_device", "=", "get_input_device", "(", "item", ")", "\n", "if", "input_device", "!=", "-", "1", ":", "\n", "                ", "return", "input_device", "\n", "", "", "return", "-", "1", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "input", ".", "get_device", "(", ")", "if", "input", ".", "is_cuda", "else", "-", "1", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown type {}.'", ".", "format", "(", "type", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions.InPlaceABN.forward": [[76, 114], ["functions._count_samples", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "running_mean.contiguous", "running_var.contiguous", "running_mean.mul_", "running_var.mul_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._count_samples", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "# Update running stats", "\n", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions.InPlaceABN.backward": [[115, 136], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "# TODO: implement simplified CUDA backward for inference mode", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions.InPlaceABNSync.forward": [[139, 200], ["cls._parse_extra", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "functions._count_samples", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "range", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.mean", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "running_mean.contiguous", "running_var.contiguous", "ctx.master_queue.get", "ctx.master_queue.task_done", "torch.gather.append", "torch.gather.append", "queue.put", "running_mean.mul_", "running_var.mul_", "comm.gather.mean.unsqueeze", "var.unsqueeze", "mean_w.unsqueeze", "var_w.unsqueeze", "comm.gather.mean.get_device"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions.InPlaceABNSync._parse_extra", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_forward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._count_samples", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put"], ["    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "extra", ",", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "cls", ".", "_parse_extra", "(", "ctx", ",", "extra", ")", "\n", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "*", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "means", ",", "vars", "=", "[", "mean", ".", "unsqueeze", "(", "0", ")", "]", ",", "[", "var", ".", "unsqueeze", "(", "0", ")", "]", "\n", "for", "_", "in", "range", "(", "ctx", ".", "master_queue", ".", "maxsize", ")", ":", "\n", "                    ", "mean_w", ",", "var_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "means", ".", "append", "(", "mean_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "vars", ".", "append", "(", "var_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "means", "=", "comm", ".", "gather", "(", "means", ")", "\n", "vars", "=", "comm", ".", "gather", "(", "vars", ")", "\n", "\n", "mean", "=", "means", ".", "mean", "(", "0", ")", "\n", "var", "=", "(", "vars", "+", "(", "mean", "-", "means", ")", "**", "2", ")", ".", "mean", "(", "0", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "mean", ",", "var", ")", ",", "[", "mean", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "mean", ",", "var", ")", ")", "\n", "mean", ",", "var", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "\n", "# Update running stats", "\n", "", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions.InPlaceABNSync.backward": [[201, 240], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "range", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size", "len", "ctx.master_queue.get", "ctx.master_queue.task_done", "edzs.append", "eydzs.append", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "queue.put", "dz.contiguous.new_zeros.get_device"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "edzs", ",", "eydzs", "=", "[", "edz", "]", ",", "[", "eydz", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "ctx", ".", "worker_queues", ")", ")", ":", "\n", "                    ", "edz_w", ",", "eydz_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "edzs", ".", "append", "(", "edz_w", ")", "\n", "eydzs", ".", "append", "(", "eydz_w", ")", "\n", "\n", "", "edz", "=", "comm", ".", "reduce_add", "(", "edzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "eydz", "=", "comm", ".", "reduce_add", "(", "eydzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "edz", ",", "eydz", ")", ",", "[", "edz", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "edz", ",", "eydz", ")", ")", "\n", "edz", ",", "eydz", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions.InPlaceABNSync._parse_extra": [[241, 251], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_parse_extra", "(", "ctx", ",", "extra", ")", ":", "\n", "        ", "ctx", ".", "is_master", "=", "extra", "[", "\"is_master\"", "]", "\n", "if", "ctx", ".", "is_master", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queues", "=", "extra", "[", "\"worker_queues\"", "]", "\n", "ctx", ".", "worker_ids", "=", "extra", "[", "\"worker_ids\"", "]", "\n", "", "else", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queue", "=", "extra", "[", "\"worker_queue\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions._check": [[25, 29], ["fn", "RuntimeError"], "function", ["None"], ["def", "_check", "(", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "success", "=", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "not", "success", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"CUDA Error encountered in {}\"", ".", "format", "(", "fn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions._broadcast_shape": [[31, 39], ["enumerate", "x.size", "out_size.append", "out_size.append"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "", "def", "_broadcast_shape", "(", "x", ")", ":", "\n", "    ", "out_size", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "out_size", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "out_size", ".", "append", "(", "s", ")", "\n", "", "", "return", "out_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions._reduce": [[41, 47], ["len", "x.sum", "x.contiguous().view().sum().sum", "x.size", "x.size", "x.contiguous().view().sum", "x.contiguous().view", "x.contiguous"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "_reduce", "(", "x", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "return", "x", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "n", ",", "c", "=", "x", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "(", "n", ",", "c", ",", "-", "1", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions._count_samples": [[49, 55], ["enumerate", "x.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "", "def", "_count_samples", "(", "x", ")", ":", "\n", "    ", "count", "=", "1", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "count", "*=", "s", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions._act_forward": [[57, 64], ["_backend.leaky_relu_forward", "_backend.elu_forward"], "function", ["None"], ["", "def", "_act_forward", "(", "ctx", ",", "x", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_forward", "(", "x", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_forward", "(", "x", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.functions._act_backward": [[66, 73], ["_backend.leaky_relu_backward", "_backend.elu_backward"], "function", ["None"], ["", "", "def", "_act_backward", "(", "ctx", ",", "x", ",", "dx", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_backward", "(", "x", ",", "dx", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_backward", "(", "x", ",", "dx", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.bn.ABN.__init__": [[19, 53], ["torch.Module.__init__", "bn.ABN.register_buffer", "bn.ABN.register_buffer", "bn.ABN.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bn.ABN.register_parameter", "bn.ABN.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "ABN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "slope", "=", "slope", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.bn.ABN.reset_parameters": [[54, 60], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_mean", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_var", ",", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.bn.ABN.forward": [[61, 73], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.elu", "torch.elu", "torch.elu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "functional", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "activation", "==", "ACT_RELU", ":", "\n", "            ", "return", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "            ", "return", "functional", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "self", ".", "slope", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_ELU", ":", "\n", "            ", "return", "functional", ".", "elu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.bn.ABN.__repr__": [[74, 82], ["rep.format"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.bn.InPlaceABN.__init__": [[87, 106], ["bn.ABN.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABN", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.bn.InPlaceABN.forward": [[107, 110], ["inplace_abn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "inplace_abn", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.bn.InPlaceABNSync.__init__": [[118, 146], ["bn.ABN.__init__", "Queue", "list", "len", "Queue", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "devices", "=", "None", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "\n", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates a synchronized, InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        devices : list of int or None\n            IDs of the GPUs that will run the replicas of this module.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABNSync", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "self", ".", "devices", "=", "devices", "if", "devices", "else", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "# Initialize queues", "\n", "self", ".", "worker_ids", "=", "self", ".", "devices", "[", "1", ":", "]", "\n", "self", ".", "master_queue", "=", "Queue", "(", "len", "(", "self", ".", "worker_ids", ")", ")", "\n", "self", ".", "worker_queues", "=", "[", "Queue", "(", "1", ")", "for", "_", "in", "self", ".", "worker_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.bn.InPlaceABNSync.forward": [[147, 166], ["inplace_abn_sync", "x.get_device", "bn.InPlaceABNSync.worker_ids.index", "x.get_device"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "get_device", "(", ")", "==", "self", ".", "devices", "[", "0", "]", ":", "\n", "# Master mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "True", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queues\"", ":", "self", ".", "worker_queues", ",", "\n", "\"worker_ids\"", ":", "self", ".", "worker_ids", "\n", "}", "\n", "", "else", ":", "\n", "# Worker mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "False", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queue\"", ":", "self", ".", "worker_queues", "[", "self", ".", "worker_ids", ".", "index", "(", "x", ".", "get_device", "(", ")", ")", "]", "\n", "}", "\n", "\n", "", "return", "inplace_abn_sync", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn.bn.InPlaceABNSync.__repr__": [[167, 175], ["rep.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, devices={devices}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.residual.IdentityResidualBlock.__init__": [[9, 76], ["torch.Module.__init__", "norm_act", "torch.Sequential", "ValueError", "ValueError", "len", "collections.OrderedDict", "torch.Conv2d", "len", "len", "len", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "norm_act", "torch.Conv2d", "dropout", "dropout"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "norm_act", "=", "ABN", ",", "\n", "dropout", "=", "None", ")", ":", "\n", "        ", "\"\"\"Configurable identity-mapping residual block\n\n        Parameters\n        ----------\n        in_channels : int\n            Number of input channels.\n        channels : list of int\n            Number of channels in the internal feature maps. Can either have two or three elements: if three construct\n            a residual block with two `3 x 3` convolutions, otherwise construct a bottleneck block with `1 x 1`, then\n            `3 x 3` then `1 x 1` convolutions.\n        stride : int\n            Stride of the first `3 x 3` convolution\n        dilation : int\n            Dilation to apply to the `3 x 3` convolutions.\n        groups : int\n            Number of convolution groups. This is used to create ResNeXt-style blocks and is only compatible with\n            bottleneck blocks.\n        norm_act : callable\n            Function to create normalization / activation Module.\n        dropout: callable\n            Function to create Dropout Module.\n        \"\"\"", "\n", "super", "(", "IdentityResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Check parameters for inconsistencies", "\n", "if", "len", "(", "channels", ")", "!=", "2", "and", "len", "(", "channels", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"channels must contain either two or three values\"", ")", "\n", "", "if", "len", "(", "channels", ")", "==", "2", "and", "groups", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"groups > 1 are only valid if len(channels) == 3\"", ")", "\n", "\n", "", "is_bottleneck", "=", "len", "(", "channels", ")", "==", "3", "\n", "need_proj_conv", "=", "stride", "!=", "1", "or", "in_channels", "!=", "channels", "[", "-", "1", "]", "\n", "\n", "self", ".", "bn1", "=", "norm_act", "(", "in_channels", ")", "\n", "if", "not", "is_bottleneck", ":", "\n", "            ", "layers", "=", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels", "[", "0", "]", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", ")", ",", "\n", "(", "\"bn2\"", ",", "norm_act", "(", "channels", "[", "0", "]", ")", ")", ",", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", ")", "\n", "]", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "                ", "layers", "=", "layers", "[", "0", ":", "2", "]", "+", "[", "(", "\"dropout\"", ",", "dropout", "(", ")", ")", "]", "+", "layers", "[", "2", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "layers", "=", "[", "\n", "(", "\"conv1\"", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels", "[", "0", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"bn2\"", ",", "norm_act", "(", "channels", "[", "0", "]", ")", ")", ",", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", ")", ",", "\n", "(", "\"bn3\"", ",", "norm_act", "(", "channels", "[", "1", "]", ")", ")", ",", "\n", "(", "\"conv3\"", ",", "nn", ".", "Conv2d", "(", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "]", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "                ", "layers", "=", "layers", "[", "0", ":", "4", "]", "+", "[", "(", "\"dropout\"", ",", "dropout", "(", ")", ")", "]", "+", "layers", "[", "4", ":", "]", "\n", "", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layers", ")", ")", "\n", "\n", "if", "need_proj_conv", ":", "\n", "            ", "self", ".", "proj_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.residual.IdentityResidualBlock.forward": [[77, 89], ["hasattr", "residual.IdentityResidualBlock.convs", "residual.IdentityResidualBlock.add_", "residual.IdentityResidualBlock.bn1", "residual.IdentityResidualBlock.proj_conv", "x.clone", "residual.IdentityResidualBlock.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"proj_conv\"", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "shortcut", "=", "self", ".", "proj_conv", "(", "bn1", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", ".", "clone", "(", ")", "\n", "bn1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "convs", "(", "bn1", ")", "\n", "out", ".", "add_", "(", "shortcut", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.dense.DenseModule.__init__": [[10, 29], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "dense.DenseModule.convs1.append", "dense.DenseModule.convs3.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "norm_act", "torch.Conv2d", "torch.Conv2d", "norm_act", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growth", ",", "layers", ",", "bottleneck_factor", "=", "4", ",", "norm_act", "=", "ABN", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "DenseModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "growth", "=", "growth", "\n", "self", ".", "layers", "=", "layers", "\n", "\n", "self", ".", "convs1", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs3", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", ")", ":", "\n", "            ", "self", ".", "convs1", ".", "append", "(", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"bn\"", ",", "norm_act", "(", "in_channels", ")", ")", ",", "\n", "(", "\"conv\"", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "self", ".", "growth", "*", "bottleneck_factor", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "]", ")", ")", ")", "\n", "self", ".", "convs3", ".", "append", "(", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"bn\"", ",", "norm_act", "(", "self", ".", "growth", "*", "bottleneck_factor", ")", ")", ",", "\n", "(", "\"conv\"", ",", "nn", ".", "Conv2d", "(", "self", ".", "growth", "*", "bottleneck_factor", ",", "self", ".", "growth", ",", "3", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", ")", "\n", "]", ")", ")", ")", "\n", "in_channels", "+=", "self", ".", "growth", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.dense.DenseModule.out_channels": [[30, 33], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "out_channels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "in_channels", "+", "self", ".", "growth", "*", "self", ".", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.dense.DenseModule.forward": [[34, 43], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "inputs", "=", "[", "x", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "inputs", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "convs1", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "convs3", "[", "i", "]", "(", "x", ")", "\n", "inputs", "+=", "[", "x", "]", "\n", "\n", "", "return", "torch", ".", "cat", "(", "inputs", ",", "dim", "=", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions.InPlaceABN.forward": [[71, 110], ["functions._count_samples", "functions._check_contiguous", "functions._check", "functions._act_forward", "ctx.save_for_backward", "ctx.mark_dirty", "x.new().resize_as_", "x.new().resize_as_", "functions._check_contiguous", "functions._check", "running_mean.mul_().add_", "running_var.mul_().add_", "x.new", "x.new", "x.new", "x.new", "running_mean.mul_", "running_var.mul_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._count_samples", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_forward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check"], ["", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "class", "InPlaceABN", "(", "autograd", ".", "Function", ")", ":", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "# Update running stats", "\n", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions.InPlaceABN.backward": [[111, 163], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "functions._check_contiguous", "functions._check", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new().resize_as_().zero_", "dz.contiguous.contiguous.new().resize_as_().zero_", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new().resize_as_", "functions._check_contiguous", "functions._check", "dz.contiguous.contiguous.new().resize_as_().zero_", "dz.contiguous.contiguous.new().resize_as_().zero_", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check"], ["ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n", "", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "# TODO: implement simplified CUDA backward for inference mode", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "class", "InPlaceABNSync", "(", "autograd", ".", "Function", ")", ":", "\n", "    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "extra", ",", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "cls", ".", "_parse_extra", "(", "ctx", ",", "extra", ")", "\n", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "*", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "means", ",", "vars", "=", "[", "mean", ".", "unsqueeze", "(", "0", ")", "]", ",", "[", "var", ".", "unsqueeze", "(", "0", ")", "]", "\n", "for", "_", "in", "range", "(", "ctx", ".", "master_queue", ".", "maxsize", ")", ":", "\n", "                    ", "mean_w", ",", "var_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions.InPlaceABNSync.forward": [[166, 228], ["cls._parse_extra", "functions._check_contiguous", "functions._check", "functions._act_forward", "ctx.save_for_backward", "ctx.mark_dirty", "functions._count_samples", "x.new().resize_", "x.new().resize_", "functions._check_contiguous", "functions._check", "running_mean.mul_().add_", "running_var.mul_().add_", "running_mean.size", "running_var.size", "range", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.mean", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "x.new", "x.new", "x.new", "x.new", "ctx.master_queue.get", "ctx.master_queue.task_done", "torch.gather.append", "torch.gather.append", "queue.put", "running_mean.mul_", "running_var.mul_", "comm.gather.mean.get_device"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions.InPlaceABNSync._parse_extra", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_forward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._count_samples", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_parallel.DataParallelModel.gather", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put"], ["vars", ".", "append", "(", "var_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "means", "=", "comm", ".", "gather", "(", "means", ")", "\n", "vars", "=", "comm", ".", "gather", "(", "vars", ")", "\n", "\n", "mean", "=", "means", ".", "mean", "(", "0", ")", "\n", "var", "=", "(", "vars", "+", "(", "mean", "-", "means", ")", "**", "2", ")", ".", "mean", "(", "0", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "mean", ",", "var", ")", ",", "[", "mean", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "mean", ",", "var", ")", ")", "\n", "mean", ",", "var", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "\n", "# Update running stats", "\n", "", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n", "", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "edzs", ",", "eydzs", "=", "[", "edz", "]", ",", "[", "eydz", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "ctx", ".", "worker_queues", ")", ")", ":", "\n", "                    ", "edz_w", ",", "eydz_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "edzs", ".", "append", "(", "edz_w", ")", "\n", "eydzs", ".", "append", "(", "eydz_w", ")", "\n", "\n", "", "edz", "=", "comm", ".", "reduce_add", "(", "edzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "eydz", "=", "comm", ".", "reduce_add", "(", "eydzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "edz", ",", "eydz", ")", ",", "[", "edz", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "edz", ",", "eydz", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions.InPlaceABNSync.backward": [[229, 299], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "functions._check_contiguous", "functions._check", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new().resize_as_().zero_", "dz.contiguous.contiguous.new().resize_as_().zero_", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new().resize_as_", "functions._check_contiguous", "functions._check", "dz.contiguous.contiguous.new().resize_as_().zero_", "dz.contiguous.contiguous.new().resize_as_().zero_", "range", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "len", "ctx.master_queue.get", "ctx.master_queue.task_done", "edzs.append", "eydzs.append", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "queue.put", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new().resize_as_", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new", "dz.contiguous.new().resize_as_().zero_.get_device", "dz.contiguous.contiguous.new", "dz.contiguous.contiguous.new"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put"], ["edz", ",", "eydz", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_parse_extra", "(", "ctx", ",", "extra", ")", ":", "\n", "        ", "ctx", ".", "is_master", "=", "extra", "[", "\"is_master\"", "]", "\n", "if", "ctx", ".", "is_master", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queues", "=", "extra", "[", "\"worker_queues\"", "]", "\n", "ctx", ".", "worker_ids", "=", "extra", "[", "\"worker_ids\"", "]", "\n", "", "else", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queue", "=", "extra", "[", "\"worker_queue\"", "]", "\n", "\n", "\n", "", "", "", "inplace_abn", "=", "InPlaceABN", ".", "apply", "\n", "inplace_abn_sync", "=", "InPlaceABNSync", ".", "apply", "\n", "\n", "__all__", "=", "[", "\"inplace_abn\"", ",", "\"inplace_abn_sync\"", ",", "\"ACT_RELU\"", ",", "\"ACT_LEAKY_RELU\"", ",", "\"ACT_ELU\"", ",", "\"ACT_NONE\"", "]", "\n", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions.InPlaceABNSync._parse_extra": [[300, 310], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions._check": [[13, 17], ["RuntimeError", "_ext.leaky_relu_cuda", "_ext.elu_cuda", "_ext.leaky_relu_backward_cuda", "_ext.leaky_relu_cuda", "_ext.elu_backward_cuda", "_ext.elu_inv_cuda", "_ext.bn_forward_cuda", "_ext.bn_backard_cuda", "_ext.bn_mean_var_cuda", "_ext.bn_edz_eydz_cuda", "_ext.bn_forward_cuda", "_ext.bn_backard_cuda", "_ext.bn_mean_var_cuda", "_ext.bn_edz_eydz_cuda"], "function", ["None"], ["\"inplace_abn_cpu.cpp\"", ",", "\n", "\"inplace_abn_cuda.cu\"", "\n", "]", "]", ",", "\n", "extra_cuda_cflags", "=", "[", "\"--expt-extended-lambda\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions._broadcast_shape": [[19, 27], ["enumerate", "x.size", "out_size.append", "out_size.append"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["ACT_RELU", "=", "\"relu\"", "\n", "ACT_LEAKY_RELU", "=", "\"leaky_relu\"", "\n", "ACT_ELU", "=", "\"elu\"", "\n", "ACT_NONE", "=", "\"none\"", "\n", "\n", "\n", "def", "_check", "(", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "success", "=", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "not", "success", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions._reduce": [[29, 35], ["len", "x.sum", "x.contiguous().view().sum().sum", "x.size", "x.size", "x.contiguous().view().sum", "x.contiguous().view", "x.contiguous"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["\n", "\n", "", "", "def", "_broadcast_shape", "(", "x", ")", ":", "\n", "    ", "out_size", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "out_size", ".", "append", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions._count_samples": [[37, 43], ["enumerate", "x.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["            ", "out_size", ".", "append", "(", "s", ")", "\n", "", "", "return", "out_size", "\n", "\n", "\n", "", "def", "_reduce", "(", "x", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "return", "x", ".", "sum", "(", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions._act_forward": [[45, 52], ["functions._check", "functions._check"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check"], ["        ", "n", ",", "c", "=", "x", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "(", "n", ",", "c", ",", "-", "1", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "\n", "\n", "", "", "def", "_count_samples", "(", "x", ")", ":", "\n", "    ", "count", "=", "1", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions._act_backward": [[54, 63], ["functions._check", "functions._check", "functions._check", "functions._check"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check"], ["", "", "return", "count", "\n", "\n", "\n", "", "def", "_act_forward", "(", "ctx", ",", "x", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_forward", "(", "x", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_forward", "(", "x", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.functions._check_contiguous": [[65, 68], ["all", "ValueError", "mod.is_contiguous"], "function", ["None"], ["\n", "", "", "def", "_act_backward", "(", "ctx", ",", "x", ",", "dx", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_backward", "(", "x", ",", "dx", ",", "ctx", ".", "slope", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.misc.GlobalAvgPool2d.__init__": [[5, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.misc.GlobalAvgPool2d.forward": [[9, 12], ["inputs.size", "inputs.view().mean", "inputs.view"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "in_size", "=", "inputs", ".", "size", "(", ")", "\n", "return", "inputs", ".", "view", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.ABN.__init__": [[30, 45], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential.__init__", "collections.OrderedDict", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["\n", "super", "(", "ABN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "slope", "=", "slope", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABN.__init__": [[51, 85], ["torch.Module.__init__", "bn.InPlaceABN.register_buffer", "bn.InPlaceABN.register_buffer", "bn.InPlaceABN.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bn.InPlaceABN.register_parameter", "bn.InPlaceABN.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_mean", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_var", ",", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "functional", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "activation", "==", "ACT_RELU", ":", "\n", "            ", "return", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "            ", "return", "functional", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "self", ".", "slope", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_ELU", ":", "\n", "            ", "return", "functional", ".", "elu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n", "\n", "", "", "class", "InPlaceABN", "(", "ABN", ")", ":", "\n", "    ", "\"\"\"InPlace Activated Batch Normalization\"\"\"", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABN.reset_parameters": [[86, 92], ["bn.InPlaceABN.running_mean.zero_", "bn.InPlaceABN.running_var.fill_", "bn.InPlaceABN.weight.data.fill_", "bn.InPlaceABN.bias.data.zero_"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABN.forward": [[93, 97], ["functions.inplace_abn", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABN.__repr__": [[98, 106], ["rep.format"], "methods", ["None"], ["\n", "super", "(", "InPlaceABN", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABNSync.__init__": [[114, 157], ["torch.Module.__init__", "bn.InPlaceABNSync.register_buffer", "bn.InPlaceABNSync.register_buffer", "bn.InPlaceABNSync.reset_parameters", "Queue", "list", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bn.InPlaceABNSync.register_parameter", "bn.InPlaceABNSync.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "Queue", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["\n", "\n", "def", "__init__", "(", "self", ",", "num_features", ",", "devices", "=", "None", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "\n", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates a synchronized, InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        devices : list of int or None\n            IDs of the GPUs that will run the replicas of this module.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABNSync", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "self", ".", "devices", "=", "devices", "if", "devices", "else", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "# Initialize queues", "\n", "self", ".", "worker_ids", "=", "self", ".", "devices", "[", "1", ":", "]", "\n", "self", ".", "master_queue", "=", "Queue", "(", "len", "(", "self", ".", "worker_ids", ")", ")", "\n", "self", ".", "worker_queues", "=", "[", "Queue", "(", "1", ")", "for", "_", "in", "self", ".", "worker_ids", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "get_device", "(", ")", "==", "self", ".", "devices", "[", "0", "]", ":", "\n", "# Master mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "True", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queues\"", ":", "self", ".", "worker_queues", ",", "\n", "\"worker_ids\"", ":", "self", ".", "worker_ids", "\n", "}", "\n", "", "else", ":", "\n", "# Worker mode", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABNSync.reset_parameters": [[158, 164], ["bn.InPlaceABNSync.running_mean.zero_", "bn.InPlaceABNSync.running_var.fill_", "bn.InPlaceABNSync.weight.data.fill_", "bn.InPlaceABNSync.bias.data.zero_"], "methods", ["None"], ["            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "False", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queue\"", ":", "self", ".", "worker_queues", "[", "self", ".", "worker_ids", ".", "index", "(", "x", ".", "get_device", "(", ")", ")", "]", "\n", "}", "\n", "\n", "", "return", "inplace_abn_sync", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABNSync.forward": [[165, 185], ["functions.inplace_abn_sync", "x.get_device", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "bn.InPlaceABNSync.worker_ids.index", "x.get_device"], "methods", ["None"], ["extra", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, devices={devices}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABNSync.__repr__": [[186, 194], ["rep.format"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABNWrapper.__init__": [[199, 202], ["torch.Module.__init__", "bn.InPlaceABN"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABNWrapper.forward": [[203, 205], ["bn.InPlaceABNWrapper.bn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABNSyncWrapper.__init__": [[210, 213], ["torch.Module.__init__", "bn.InPlaceABNSync"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn.InPlaceABNSyncWrapper.forward": [[214, 216], ["bn.InPlaceABNSyncWrapper.bn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair": [[18, 22], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["\n", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing._ext.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], ["\n", "from", ".", "annotation", "import", "Annotation", ",", "AnnotationDet", "\n", "from", ".", "import", "datasets", "\n", "from", ".", "import", "decoder", "\n", "from", ".", "import", "network", "\n", "from", ".", "import", "optimize", "\n", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.setUp": [[53, 56], ["torch.device", "torch.cuda.set_device"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "device", "=", "th", ".", "device", "(", "'cuda:0'", ")", "\n", "th", ".", "cuda", ".", "set_device", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_forward_const_kernel": [[57, 73], ["dict", "torch.rand().to", "torch.rand().to.clone", "torch.ones().to", "torch.rand().to", "torch.rand().to", "pac.PacConv2d().to", "torch.nn.Conv2d().to", "test_pac._allclose", "pac.PacConv2d().to.detach", "torch.nn.Conv2d().to.detach", "torch.rand", "torch.ones", "torch.rand", "torch.rand", "pac.PacConv2d", "torch.nn.Conv2d", "pac.PacConv2d().to.", "torch.nn.Conv2d().to."], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_forward_const_kernel", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", "=", "2", ",", "111", ",", "5", "\n", "args", "=", "dict", "(", "in_channels", "=", "4", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "4", ",", "dilation", "=", "2", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "args", "[", "'in_channels'", "]", ",", "sz", ",", "sz", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_th", "=", "im", ".", "clone", "(", ")", "\n", "im_k", "=", "th", ".", "ones", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_w", "=", "th", ".", "rand", "(", "args", "[", "'out_channels'", "]", ",", "args", "[", "'in_channels'", "]", ",", "\n", "args", "[", "'kernel_size'", "]", ",", "args", "[", "'kernel_size'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "args", "[", "'out_channels'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv", "=", "pac", ".", "PacConv2d", "(", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_th", "=", "nn", ".", "Conv2d", "(", "**", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv", ".", "weight", ".", "data", "[", ":", "]", "=", "conv_th", ".", "weight", ".", "data", "[", ":", "]", "=", "conv_w", "\n", "conv", ".", "bias", ".", "data", "[", ":", "]", "=", "conv_th", ".", "bias", ".", "data", "[", ":", "]", "=", "conv_b", "\n", "\n", "_allclose", "(", "conv", "(", "im", ",", "im_k", ")", ".", "detach", "(", ")", ",", "conv_th", "(", "im_th", ")", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_transpose_forward_const_kernel": [[74, 92], ["dict", "torch.rand().to", "torch.rand().to.clone", "torch.ones().to", "torch.rand().to", "torch.rand().to", "pac.PacConvTranspose2d().to", "torch.nn.ConvTranspose2d().to", "test_pac._allclose", "pac.PacConvTranspose2d().to.detach", "torch.nn.ConvTranspose2d().to.detach", "torch.rand", "torch.ones", "torch.rand", "torch.rand", "pac.PacConvTranspose2d", "torch.nn.ConvTranspose2d", "pac.PacConvTranspose2d().to.", "torch.nn.ConvTranspose2d().to."], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_transpose_forward_const_kernel", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", "=", "4", ",", "128", ",", "5", "\n", "args", "=", "dict", "(", "in_channels", "=", "4", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "k_with_d", "=", "(", "args", "[", "'kernel_size'", "]", "-", "1", ")", "*", "args", "[", "'dilation'", "]", "+", "1", "\n", "sz_out", "=", "(", "sz", "-", "1", ")", "*", "args", "[", "'stride'", "]", "-", "2", "*", "args", "[", "'padding'", "]", "+", "k_with_d", "+", "args", "[", "'output_padding'", "]", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "args", "[", "'in_channels'", "]", ",", "sz", ",", "sz", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_th", "=", "im", ".", "clone", "(", ")", "\n", "im_k", "=", "th", ".", "ones", "(", "bs", ",", "k_ch", ",", "sz_out", ",", "sz_out", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_w", "=", "th", ".", "rand", "(", "args", "[", "'in_channels'", "]", ",", "args", "[", "'out_channels'", "]", ",", "\n", "args", "[", "'kernel_size'", "]", ",", "args", "[", "'kernel_size'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "args", "[", "'out_channels'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv", "=", "pac", ".", "PacConvTranspose2d", "(", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_th", "=", "nn", ".", "ConvTranspose2d", "(", "**", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv", ".", "weight", ".", "data", "[", ":", "]", "=", "conv_th", ".", "weight", ".", "data", "[", ":", "]", "=", "conv_w", "\n", "conv", ".", "bias", ".", "data", "[", ":", "]", "=", "conv_th", ".", "bias", ".", "data", "[", ":", "]", "=", "conv_b", "\n", "\n", "_allclose", "(", "conv", "(", "im", ",", "im_k", ")", ".", "detach", "(", ")", ",", "conv_th", "(", "im_th", ")", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_pool_forward_const_kernel": [[93, 105], ["dict", "torch.rand().to", "torch.rand().to.clone", "torch.ones().to", "pac.PacPool2d().to", "torch.nn.AvgPool2d().to", "test_pac._allclose", "pac.PacPool2d().to.detach", "torch.nn.AvgPool2d().to.detach", "torch.rand", "torch.ones", "pac.PacPool2d", "torch.nn.AvgPool2d", "pac.PacPool2d().to.", "torch.nn.AvgPool2d().to."], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["", "@", "repeat_impl_types", "\n", "def", "test_pool_forward_const_kernel", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "in_ch", ",", "k_ch", "=", "2", ",", "9", ",", "4", ",", "5", "\n", "dilation", "=", "1", "\n", "args", "=", "dict", "(", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "in_ch", ",", "sz", ",", "sz", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_th", "=", "im", ".", "clone", "(", ")", "\n", "im_k", "=", "th", ".", "ones", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "pool", "=", "pac", ".", "PacPool2d", "(", "dilation", "=", "dilation", ",", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "pool_th", "=", "nn", ".", "AvgPool2d", "(", "**", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "_allclose", "(", "pool", "(", "im", ",", "im_k", ")", ".", "detach", "(", ")", ",", "pool_th", "(", "im_th", ")", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_input_grad": [[106, 115], ["dict", "torch.rand().double().to", "torch.rand().double().to", "pac.PacConv2d().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "pac.PacConv2d().double", "torch.rand", "torch.rand", "pac.PacConv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_input_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", "=", "2", ",", "8", ",", "3", "\n", "args", "=", "dict", "(", "in_channels", "=", "4", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "args", "[", "'in_channels'", "]", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "conv", "=", "pac", ".", "PacConv2d", "(", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "conv", ",", "(", "im", ",", "im_k", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_inv_kernel_input_grad": [[116, 126], ["dict", "torch.rand().double().to", "torch.rand().double().to", "pac.PacConv2d().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "pac.PacConv2d().double", "torch.rand", "torch.rand", "pac.PacConv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck"], ["", "@", "use_only_native_impl", "\n", "def", "test_conv_inv_kernel_input_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", "=", "2", ",", "8", ",", "3", "\n", "args", "=", "dict", "(", "in_channels", "=", "4", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "\n", "kernel_type", "=", "'inv_0.2_0.2_asym'", ",", "smooth_kernel_type", "=", "'average_5'", ",", "normalize_kernel", "=", "True", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "args", "[", "'in_channels'", "]", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "conv", "=", "pac", ".", "PacConv2d", "(", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "conv", ",", "(", "im", ",", "im_k", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_all_grad": [[127, 146], ["dict", "dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "torch.rand().double", "torch.rand().double", "pac.pacconv2d", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "pac.packernel2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_all_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", ",", "f_sz", ",", "in_ch", ",", "out_ch", "=", "2", ",", "10", ",", "3", ",", "5", ",", "2", ",", "4", "\n", "conv_args", "=", "dict", "(", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", "\n", "kernel_args", "=", "dict", "(", "kernel_size", "=", "f_sz", ",", "smooth_kernel", "=", "None", ",", "inv_alpha", "=", "None", ",", "inv_lambda", "=", "None", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "False", ",", "transposed", "=", "False", ",", "\n", "**", "conv_args", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "in_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "\n", "conv_w", "=", "th", ".", "rand", "(", "out_ch", ",", "in_ch", ",", "f_sz", ",", "f_sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "out_ch", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "\n", "lambda", "in0", ",", "in1", ",", "w", ",", "b", ":", "pac", ".", "pacconv2d", "(", "in0", ",", "\n", "pac", ".", "packernel2d", "(", "in1", ",", "**", "kernel_args", ")", "[", "0", "]", ",", "\n", "w", ",", "b", ",", "native_impl", "=", "native_impl", ",", "**", "conv_args", ")", ",", "\n", "(", "im", ",", "im_k", ",", "conv_w", ",", "conv_b", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_transpose_input_grad": [[147, 158], ["dict", "torch.rand().double().to", "torch.rand().double().to", "pac.PacConvTranspose2d().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "pac.PacConvTranspose2d().double", "torch.rand", "torch.rand", "pac.PacConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_transpose_input_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", "=", "1", ",", "4", ",", "2", "\n", "args", "=", "dict", "(", "in_channels", "=", "2", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "k_with_d", "=", "(", "args", "[", "'kernel_size'", "]", "-", "1", ")", "*", "args", "[", "'dilation'", "]", "+", "1", "\n", "sz_out", "=", "(", "sz", "-", "1", ")", "*", "args", "[", "'stride'", "]", "-", "2", "*", "args", "[", "'padding'", "]", "+", "k_with_d", "+", "args", "[", "'output_padding'", "]", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "args", "[", "'in_channels'", "]", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz_out", ",", "sz_out", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "conv", "=", "pac", ".", "PacConvTranspose2d", "(", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "conv", ",", "(", "im", ",", "im_k", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_transpose_all_grad": [[159, 180], ["dict", "dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "torch.rand().double", "torch.rand().double", "pac.pacconv_transpose2d", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "pac.packernel2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv_transpose2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_transpose_all_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", ",", "f_sz", ",", "in_ch", ",", "out_ch", "=", "2", ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", "\n", "conv_args", "=", "dict", "(", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "kernel_args", "=", "dict", "(", "kernel_size", "=", "f_sz", ",", "smooth_kernel", "=", "None", ",", "inv_alpha", "=", "None", ",", "inv_lambda", "=", "None", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "False", ",", "transposed", "=", "True", ",", "\n", "**", "conv_args", ")", "\n", "k_with_d", "=", "(", "f_sz", "-", "1", ")", "*", "conv_args", "[", "'dilation'", "]", "+", "1", "\n", "sz_out", "=", "(", "sz", "-", "1", ")", "*", "conv_args", "[", "'stride'", "]", "-", "2", "*", "conv_args", "[", "'padding'", "]", "+", "k_with_d", "+", "conv_args", "[", "'output_padding'", "]", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "in_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz_out", ",", "sz_out", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "\n", "conv_w", "=", "th", ".", "rand", "(", "in_ch", ",", "out_ch", ",", "f_sz", ",", "f_sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "out_ch", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "\n", "lambda", "in0", ",", "in1", ",", "w", ",", "b", ":", "pac", ".", "pacconv_transpose2d", "(", "in0", ",", "\n", "pac", ".", "packernel2d", "(", "in1", ",", "**", "kernel_args", ")", "[", "0", "]", ",", "\n", "w", ",", "b", ",", "native_impl", "=", "native_impl", ",", "**", "conv_args", ")", ",", "\n", "(", "im", ",", "im_k", ",", "conv_w", ",", "conv_b", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_pool_grad": [[181, 190], ["dict", "torch.rand().double().to", "torch.rand().double().to", "pac.PacPool2d().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "pac.PacPool2d().double", "torch.rand", "torch.rand", "pac.PacPool2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck"], ["", "@", "repeat_impl_types", "\n", "def", "test_pool_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "ch", ",", "k_ch", "=", "2", ",", "8", ",", "2", ",", "3", "\n", "args", "=", "dict", "(", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "4", ",", "dilation", "=", "2", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "pool", "=", "pac", ".", "PacPool2d", "(", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "pool", ",", "(", "im", ",", "im_k", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_two_impl_match": [[191, 218], ["dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to.clone", "torch.rand().double().to.clone", "pac.PacConv2d().double().to", "pac.PacConv2d().double().to", "torch.rand().double().to", "torch.rand().double().to", "pac.PacConv2d().double().to.", "pac.PacConv2d().double().to.", "pac.PacConv2d().double().to.sum().backward", "pac.PacConv2d().double().to.sum().backward", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "torch.rand().double", "torch.rand().double", "pac.PacConv2d().double", "pac.PacConv2d().double", "torch.rand().double", "torch.rand().double", "pac.PacConv2d().double().to.sum", "pac.PacConv2d().double().to.sum", "pac.PacConv2d().double().to.detach", "pac.PacConv2d().double().to.detach", "torch.rand", "torch.rand", "pac.PacConv2d", "pac.PacConv2d", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose"], ["", "def", "test_conv_two_impl_match", "(", "self", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", "=", "24", ",", "128", ",", "3", "\n", "args", "=", "dict", "(", "in_channels", "=", "4", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "args", "[", "'in_channels'", "]", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im0", "=", "im", ".", "clone", "(", ")", "\n", "im0_k", "=", "im_k", ".", "clone", "(", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "im0", ".", "requires_grad", "=", "im0_k", ".", "requires_grad", "=", "True", "\n", "conv", "=", "pac", ".", "PacConv2d", "(", "native_impl", "=", "False", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv0", "=", "pac", ".", "PacConv2d", "(", "native_impl", "=", "True", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "conv_w", "=", "th", ".", "rand", "(", "args", "[", "'out_channels'", "]", ",", "args", "[", "'in_channels'", "]", ",", "\n", "args", "[", "'kernel_size'", "]", ",", "args", "[", "'kernel_size'", "]", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "args", "[", "'out_channels'", "]", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv", ".", "weight", ".", "data", "[", ":", "]", "=", "conv0", ".", "weight", ".", "data", "[", ":", "]", "=", "conv_w", "\n", "conv", ".", "bias", ".", "data", "[", ":", "]", "=", "conv0", ".", "bias", ".", "data", "[", ":", "]", "=", "conv_b", "\n", "\n", "out", "=", "conv", "(", "im", ",", "im_k", ")", "\n", "out0", "=", "conv0", "(", "im0", ",", "im0_k", ")", "\n", "out", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "out0", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "out", ".", "detach", "(", ")", ",", "out0", ".", "detach", "(", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "im", ".", "grad", ",", "im0", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "im_k", ".", "grad", ",", "im0_k", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "conv", ".", "weight", ".", "grad", ",", "conv0", ".", "weight", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "conv", ".", "bias", ".", "grad", ",", "conv0", ".", "bias", ".", "grad", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_with_kernel_input_two_impl_match": [[219, 248], ["dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to.clone", "torch.rand().double().to.clone", "pac.PacConv2d().double().to", "pac.PacConv2d().double().to", "torch.rand().double().to", "torch.rand().double().to", "pac.PacConv2d().double().to.", "pac.PacConv2d().double().to.", "pac.PacConv2d().double().to.sum().backward", "pac.PacConv2d().double().to.sum().backward", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "int", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "torch.rand().double", "numpy.floor", "torch.rand().double", "pac.PacConv2d().double", "pac.PacConv2d().double", "torch.rand().double", "torch.rand().double", "pac.PacConv2d().double().to.sum", "pac.PacConv2d().double().to.sum", "pac.PacConv2d().double().to.detach", "pac.PacConv2d().double().to.detach", "torch.rand", "torch.rand", "pac.PacConv2d", "pac.PacConv2d", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose"], ["", "def", "test_conv_with_kernel_input_two_impl_match", "(", "self", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", "=", "24", ",", "128", ",", "3", "\n", "args", "=", "dict", "(", "in_channels", "=", "4", ",", "out_channels", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "args", "[", "'in_channels'", "]", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "out_sz", "=", "int", "(", "np", ".", "floor", "(", "\n", "(", "sz", "+", "2", "*", "args", "[", "'padding'", "]", "-", "(", "args", "[", "'kernel_size'", "]", "-", "1", ")", "*", "args", "[", "'dilation'", "]", "-", "1", ")", "/", "args", "[", "'stride'", "]", ")", ")", "+", "1", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "1", ",", "args", "[", "'kernel_size'", "]", ",", "args", "[", "'kernel_size'", "]", ",", "out_sz", ",", "out_sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im0", "=", "im", ".", "clone", "(", ")", "\n", "im0_k", "=", "im_k", ".", "clone", "(", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "im0", ".", "requires_grad", "=", "im0_k", ".", "requires_grad", "=", "True", "\n", "conv", "=", "pac", ".", "PacConv2d", "(", "native_impl", "=", "False", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv0", "=", "pac", ".", "PacConv2d", "(", "native_impl", "=", "True", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "conv_w", "=", "th", ".", "rand", "(", "args", "[", "'out_channels'", "]", ",", "args", "[", "'in_channels'", "]", ",", "\n", "args", "[", "'kernel_size'", "]", ",", "args", "[", "'kernel_size'", "]", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "args", "[", "'out_channels'", "]", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv", ".", "weight", ".", "data", "[", ":", "]", "=", "conv0", ".", "weight", ".", "data", "[", ":", "]", "=", "conv_w", "\n", "conv", ".", "bias", ".", "data", "[", ":", "]", "=", "conv0", ".", "bias", ".", "data", "[", ":", "]", "=", "conv_b", "\n", "\n", "out", "=", "conv", "(", "im", ",", "None", ",", "im_k", ")", "\n", "out0", "=", "conv0", "(", "im0", ",", "None", ",", "im0_k", ")", "\n", "out", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "out0", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "out", ".", "detach", "(", ")", ",", "out0", ".", "detach", "(", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "im", ".", "grad", ",", "im0", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "im_k", ".", "grad", ",", "im0_k", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "conv", ".", "weight", ".", "grad", ",", "conv0", ".", "weight", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "conv", ".", "bias", ".", "grad", ",", "conv0", ".", "bias", ".", "grad", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_transpose_two_impl_match": [[249, 278], ["dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to.clone", "torch.rand().double().to.clone", "pac.PacConvTranspose2d().double().to", "pac.PacConvTranspose2d().double().to", "torch.rand().double().to", "torch.rand().double().to", "pac.PacConvTranspose2d().double().to.", "pac.PacConvTranspose2d().double().to.", "pac.PacConvTranspose2d().double().to.sum().backward", "pac.PacConvTranspose2d().double().to.sum().backward", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "torch.rand().double", "torch.rand().double", "pac.PacConvTranspose2d().double", "pac.PacConvTranspose2d().double", "torch.rand().double", "torch.rand().double", "pac.PacConvTranspose2d().double().to.sum", "pac.PacConvTranspose2d().double().to.sum", "pac.PacConvTranspose2d().double().to.detach", "pac.PacConvTranspose2d().double().to.detach", "torch.rand", "torch.rand", "pac.PacConvTranspose2d", "pac.PacConvTranspose2d", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose"], ["", "def", "test_conv_transpose_two_impl_match", "(", "self", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", "=", "3", ",", "128", ",", "3", "\n", "args", "=", "dict", "(", "in_channels", "=", "2", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "k_with_d", "=", "(", "args", "[", "'kernel_size'", "]", "-", "1", ")", "*", "args", "[", "'dilation'", "]", "+", "1", "\n", "sz_out", "=", "(", "sz", "-", "1", ")", "*", "args", "[", "'stride'", "]", "-", "2", "*", "args", "[", "'padding'", "]", "+", "k_with_d", "+", "args", "[", "'output_padding'", "]", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "args", "[", "'in_channels'", "]", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz_out", ",", "sz_out", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im0", "=", "im", ".", "clone", "(", ")", "\n", "im0_k", "=", "im_k", ".", "clone", "(", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "im0", ".", "requires_grad", "=", "im0_k", ".", "requires_grad", "=", "True", "\n", "conv", "=", "pac", ".", "PacConvTranspose2d", "(", "native_impl", "=", "False", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv0", "=", "pac", ".", "PacConvTranspose2d", "(", "native_impl", "=", "True", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "conv_w", "=", "th", ".", "rand", "(", "args", "[", "'in_channels'", "]", ",", "args", "[", "'out_channels'", "]", ",", "\n", "args", "[", "'kernel_size'", "]", ",", "args", "[", "'kernel_size'", "]", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "args", "[", "'out_channels'", "]", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv", ".", "weight", ".", "data", "[", ":", "]", "=", "conv0", ".", "weight", ".", "data", "[", ":", "]", "=", "conv_w", "\n", "conv", ".", "bias", ".", "data", "[", ":", "]", "=", "conv0", ".", "bias", ".", "data", "[", ":", "]", "=", "conv_b", "\n", "\n", "out", "=", "conv", "(", "im", ",", "im_k", ")", "\n", "out0", "=", "conv0", "(", "im0", ",", "im0_k", ")", "\n", "out", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "out0", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "out", ".", "detach", "(", ")", ",", "out0", ".", "detach", "(", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "im", ".", "grad", ",", "im0", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "im_k", ".", "grad", ",", "im0_k", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "conv", ".", "weight", ".", "grad", ",", "conv0", ".", "weight", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "conv", ".", "bias", ".", "grad", ",", "conv0", ".", "bias", ".", "grad", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_pool_two_impl_match": [[279, 298], ["dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to.clone", "torch.rand().double().to.clone", "pac.PacPool2d().to", "pac.PacPool2d().to", "pac.PacPool2d().to.", "pac.PacPool2d().to.", "pac.PacPool2d().to.sum().backward", "pac.PacPool2d().to.sum().backward", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "test_pac._allclose", "test_pac._allclose", "test_pac._allclose", "torch.rand().double", "torch.rand().double", "pac.PacPool2d", "pac.PacPool2d", "pac.PacPool2d().to.sum", "pac.PacPool2d().to.sum", "pac.PacPool2d().to.detach", "pac.PacPool2d().to.detach", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose"], ["", "def", "test_pool_two_impl_match", "(", "self", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "ch", ",", "k_ch", "=", "2", ",", "128", ",", "4", ",", "3", "\n", "args", "=", "dict", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im0", "=", "im", ".", "clone", "(", ")", "\n", "im0_k", "=", "im_k", ".", "clone", "(", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "im0", ".", "requires_grad", "=", "im0_k", ".", "requires_grad", "=", "True", "\n", "pool", "=", "pac", ".", "PacPool2d", "(", "native_impl", "=", "False", ",", "**", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "p00l0", "=", "pac", ".", "PacPool2d", "(", "native_impl", "=", "True", ",", "**", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "out", "=", "pool", "(", "im", ",", "im_k", ")", "\n", "out0", "=", "p00l0", "(", "im0", ",", "im0_k", ")", "\n", "out", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "out0", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "out", ".", "detach", "(", ")", ",", "out0", ".", "detach", "(", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "im", ".", "grad", ",", "im0", ".", "grad", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "im_k", ".", "grad", ",", "im0_k", ".", "grad", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_kernel_two_impl_match": [[299, 313], ["dict", "torch.rand().double().to", "torch.rand().double().to.clone", "out.sum().backward", "out0.sum().backward", "test_pac.PacConvTest.assertTrue", "test_pac.PacConvTest.assertTrue", "pac.packernel2d", "pac.packernel2d", "test_pac._allclose", "test_pac._allclose", "torch.rand().double", "out.sum", "out0.sum", "out.detach", "out0.detach", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose"], ["", "def", "test_kernel_two_impl_match", "(", "self", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "ch", "=", "16", ",", "256", ",", "8", "\n", "args", "=", "dict", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im0", "=", "im", ".", "clone", "(", ")", "\n", "im", ".", "requires_grad", "=", "im0", ".", "requires_grad", "=", "True", "\n", "\n", "out", "=", "pac", ".", "packernel2d", "(", "im", ",", "native_impl", "=", "False", ",", "**", "args", ")", "[", "0", "]", "\n", "out0", "=", "pac", ".", "packernel2d", "(", "im0", ",", "native_impl", "=", "True", ",", "**", "args", ")", "[", "0", "]", "\n", "\n", "out", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "out0", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "out", ".", "detach", "(", ")", ",", "out0", ".", "detach", "(", ")", ")", ")", "\n", "self", ".", "assertTrue", "(", "_allclose", "(", "im", ".", "grad", ",", "im0", ".", "grad", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_sum_all_grad": [[316, 335], ["dict", "dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "torch.rand().double", "torch.rand().double", "pac.pacconv2d().sum", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "pac.pacconv2d", "pac.packernel2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_sum_all_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", ",", "f_sz", ",", "in_ch", ",", "out_ch", "=", "2", ",", "10", ",", "3", ",", "5", ",", "2", ",", "4", "\n", "conv_args", "=", "dict", "(", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", "\n", "kernel_args", "=", "dict", "(", "kernel_size", "=", "f_sz", ",", "smooth_kernel", "=", "None", ",", "inv_alpha", "=", "None", ",", "inv_lambda", "=", "None", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "False", ",", "transposed", "=", "False", ",", "\n", "**", "conv_args", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "in_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "\n", "conv_w", "=", "th", ".", "rand", "(", "out_ch", ",", "in_ch", ",", "f_sz", ",", "f_sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "out_ch", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "\n", "lambda", "in0", ",", "in1", ",", "w", ",", "b", ":", "pac", ".", "pacconv2d", "(", "in0", ",", "\n", "pac", ".", "packernel2d", "(", "in1", ",", "**", "kernel_args", ")", "[", "0", "]", ",", "\n", "w", ",", "b", ",", "native_impl", "=", "native_impl", ",", "**", "conv_args", ")", ".", "sum", "(", ")", ",", "\n", "(", "im", ",", "im_k", ",", "conv_w", ",", "conv_b", ")", ",", "rtol", "=", "0.01", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_transpose_sum_all_grad": [[336, 357], ["dict", "dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "torch.rand().double", "torch.rand().double", "pac.pacconv_transpose2d().sum", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "pac.pacconv_transpose2d", "pac.packernel2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv_transpose2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_transpose_sum_all_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", ",", "f_sz", ",", "in_ch", ",", "out_ch", "=", "2", ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", "\n", "conv_args", "=", "dict", "(", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "kernel_args", "=", "dict", "(", "kernel_size", "=", "f_sz", ",", "smooth_kernel", "=", "None", ",", "inv_alpha", "=", "None", ",", "inv_lambda", "=", "None", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "False", ",", "transposed", "=", "True", ",", "\n", "**", "conv_args", ")", "\n", "k_with_d", "=", "(", "f_sz", "-", "1", ")", "*", "conv_args", "[", "'dilation'", "]", "+", "1", "\n", "sz_out", "=", "(", "sz", "-", "1", ")", "*", "conv_args", "[", "'stride'", "]", "-", "2", "*", "conv_args", "[", "'padding'", "]", "+", "k_with_d", "+", "conv_args", "[", "'output_padding'", "]", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "in_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz_out", ",", "sz_out", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "\n", "conv_w", "=", "th", ".", "rand", "(", "in_ch", ",", "out_ch", ",", "f_sz", ",", "f_sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "out_ch", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "\n", "lambda", "in0", ",", "in1", ",", "w", ",", "b", ":", "pac", ".", "pacconv_transpose2d", "(", "in0", ",", "\n", "pac", ".", "packernel2d", "(", "in1", ",", "**", "kernel_args", ")", "[", "0", "]", ",", "\n", "w", ",", "b", ",", "native_impl", "=", "native_impl", ",", "**", "conv_args", ")", ".", "sum", "(", ")", ",", "\n", "(", "im", ",", "im_k", ",", "conv_w", ",", "conv_b", ")", ",", "rtol", "=", "0.01", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_pool_sum_grad": [[358, 367], ["dict", "torch.rand().double().to", "torch.rand().double().to", "pac.PacPool2d().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "pac.PacPool2d().double", "pac.PacPool2d().double().to.sum", "torch.rand", "torch.rand", "pac.PacPool2d", "pac.PacPool2d().double().to."], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck"], ["", "@", "repeat_impl_types", "\n", "def", "test_pool_sum_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "ch", ",", "k_ch", "=", "2", ",", "8", ",", "2", ",", "3", "\n", "args", "=", "dict", "(", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "4", ",", "dilation", "=", "2", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "k_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "pool", "=", "pac", ".", "PacPool2d", "(", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "lambda", "x", ",", "y", ":", "pool", "(", "x", ",", "y", ")", ".", "sum", "(", ")", ",", "(", "im", ",", "im_k", ")", ",", "rtol", "=", "0.01", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_kernel_sum_grad": [[368, 376], ["dict", "torch.rand().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "[].sum", "torch.rand", "pac.packernel2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d"], ["", "@", "repeat_impl_types", "\n", "def", "test_kernel_sum_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "ch", "=", "2", ",", "4", ",", "4", "\n", "args", "=", "dict", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "True", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "lambda", "x", ":", "pac", ".", "packernel2d", "(", "x", ",", "native_impl", "=", "native_impl", ",", "**", "args", ")", "[", "0", "]", ".", "sum", "(", ")", ",", "\n", "(", "im", ",", ")", ",", "rtol", "=", "0.01", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_with_kernel_input_sum_all_grad": [[377, 391], ["dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "test_pac.PacConvTest.assertTrue", "int", "test_pac._gradcheck", "numpy.floor", "torch.rand().double", "torch.rand().double", "torch.rand().double", "torch.rand().double", "pac.pacconv2d().sum", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "pac.pacconv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv2d"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_with_kernel_input_sum_all_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", ",", "f_sz", ",", "in_ch", ",", "out_ch", "=", "2", ",", "10", ",", "3", ",", "5", ",", "2", ",", "4", "\n", "args", "=", "dict", "(", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", "\n", "out_sz", "=", "int", "(", "np", ".", "floor", "(", "(", "sz", "+", "2", "*", "args", "[", "'padding'", "]", "-", "(", "f_sz", "-", "1", ")", "*", "args", "[", "'dilation'", "]", "-", "1", ")", "/", "args", "[", "'stride'", "]", ")", ")", "+", "1", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "in_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "1", ",", "f_sz", ",", "f_sz", ",", "out_sz", ",", "out_sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "\n", "conv_w", "=", "th", ".", "rand", "(", "out_ch", ",", "in_ch", ",", "f_sz", ",", "f_sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "out_ch", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "\n", "lambda", "in0", ",", "in1", ",", "w", ",", "b", ":", "pac", ".", "pacconv2d", "(", "in0", ",", "in1", ",", "w", ",", "b", ",", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "sum", "(", ")", ",", "\n", "(", "im", ",", "im_k", ",", "conv_w", ",", "conv_b", ")", ",", "rtol", "=", "0.01", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_conv_transpose_with_kernel_input_sum_all_grad": [[392, 407], ["dict", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "torch.rand().double().to", "test_pac.PacConvTest.assertTrue", "test_pac._gradcheck", "torch.rand().double", "torch.rand().double", "torch.rand().double", "torch.rand().double", "pac.pacconv_transpose2d().sum", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "pac.pacconv_transpose2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv_transpose2d"], ["", "@", "repeat_impl_types", "\n", "def", "test_conv_transpose_with_kernel_input_sum_all_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "k_ch", ",", "f_sz", ",", "in_ch", ",", "out_ch", "=", "2", ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", "\n", "args", "=", "dict", "(", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "dilation", "=", "1", ")", "\n", "k_with_d", "=", "(", "f_sz", "-", "1", ")", "*", "args", "[", "'dilation'", "]", "+", "1", "\n", "sz_out", "=", "(", "sz", "-", "1", ")", "*", "args", "[", "'stride'", "]", "-", "2", "*", "args", "[", "'padding'", "]", "+", "k_with_d", "+", "args", "[", "'output_padding'", "]", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "in_ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "1", ",", "f_sz", ",", "f_sz", ",", "sz_out", ",", "sz_out", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "\n", "conv_w", "=", "th", ".", "rand", "(", "in_ch", ",", "out_ch", ",", "f_sz", ",", "f_sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "conv_b", "=", "th", ".", "rand", "(", "out_ch", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "\n", "lambda", "in0", ",", "in1", ",", "w", ",", "b", ":", "pac", ".", "pacconv_transpose2d", "(", "in0", ",", "in1", ",", "w", ",", "b", ",", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "sum", "(", ")", ",", "\n", "(", "im", ",", "im_k", ",", "conv_w", ",", "conv_b", ")", ",", "rtol", "=", "0.01", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.PacConvTest.test_pool_with_kernel_input_sum_grad": [[408, 420], ["dict", "torch.rand().double().to", "torch.rand().double().to", "pac.PacPool2d().double().to", "test_pac.PacConvTest.assertTrue", "int", "test_pac._gradcheck", "numpy.floor", "torch.rand().double", "torch.rand().double", "pac.PacPool2d().double", "pac.PacPool2d().double().to.sum", "torch.rand", "torch.rand", "pac.PacPool2d", "pac.PacPool2d().double().to."], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck"], ["", "@", "repeat_impl_types", "\n", "def", "test_pool_with_kernel_input_sum_grad", "(", "self", ",", "native_impl", ")", ":", "\n", "        ", "bs", ",", "sz", ",", "ch", "=", "2", ",", "8", ",", "2", "\n", "args", "=", "dict", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", "\n", "out_sz", "=", "int", "(", "np", ".", "floor", "(", "\n", "(", "sz", "+", "2", "*", "args", "[", "'padding'", "]", "-", "(", "args", "[", "'kernel_size'", "]", "-", "1", ")", "*", "args", "[", "'dilation'", "]", "-", "1", ")", "/", "args", "[", "'stride'", "]", ")", ")", "+", "1", "\n", "im", "=", "th", ".", "rand", "(", "bs", ",", "ch", ",", "sz", ",", "sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im_k", "=", "th", ".", "rand", "(", "bs", ",", "1", ",", "args", "[", "'kernel_size'", "]", ",", "args", "[", "'kernel_size'", "]", ",", "out_sz", ",", "out_sz", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "im", ".", "requires_grad", "=", "im_k", ".", "requires_grad", "=", "True", "\n", "pool", "=", "pac", ".", "PacPool2d", "(", "native_impl", "=", "native_impl", ",", "**", "args", ")", ".", "double", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "assertTrue", "(", "_gradcheck", "(", "lambda", "x", ",", "y", ":", "pool", "(", "x", ",", "None", ",", "y", ")", ".", "sum", "(", ")", ",", "\n", "(", "im", ",", "im_k", ")", ",", "rtol", "=", "0.01", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._allclose": [[16, 18], ["numpy.allclose", "x1.cpu", "x2.cpu"], "function", ["None"], ["def", "_allclose", "(", "x1", ",", "x2", ",", "rtol", "=", "1e-5", ",", "atol", "=", "1e-10", ")", ":", "\n", "    ", "return", "np", ".", "allclose", "(", "x1", ".", "cpu", "(", ")", ",", "x2", ".", "cpu", "(", ")", ",", "rtol", "=", "rtol", ",", "atol", "=", "atol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac._gradcheck": [[20, 22], ["torch.autograd.gradcheck"], "function", ["None"], ["", "def", "_gradcheck", "(", "f", ",", "x0", ",", "rtol", "=", "1e-3", ",", "atol", "=", "1e-8", ")", ":", "\n", "    ", "return", "gradcheck", "(", "f", ",", "x0", ",", "rtol", "=", "rtol", ",", "atol", "=", "atol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.repeat_impl_types": [[25, 32], ["functools.wraps", "f", "f"], "function", ["None"], ["", "def", "repeat_impl_types", "(", "f", ")", ":", "\n", "    ", "@", "wraps", "(", "f", ")", "\n", "def", "call_wrapped", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "f", "(", "self", ",", "*", "args", ",", "native_impl", "=", "True", ")", "\n", "f", "(", "self", ",", "*", "args", ",", "native_impl", "=", "False", ")", "\n", "\n", "", "return", "call_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.use_only_native_impl": [[35, 41], ["functools.wraps", "f"], "function", ["None"], ["", "def", "use_only_native_impl", "(", "f", ")", ":", "\n", "    ", "@", "wraps", "(", "f", ")", "\n", "def", "call_wrapped", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "f", "(", "self", ",", "*", "args", ",", "native_impl", "=", "True", ")", "\n", "\n", "", "return", "call_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.test_pac.use_only_custom_impl": [[44, 50], ["functools.wraps", "f"], "function", ["None"], ["", "def", "use_only_custom_impl", "(", "f", ")", ":", "\n", "    ", "@", "wraps", "(", "f", ")", "\n", "def", "call_wrapped", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "f", "(", "self", ",", "*", "args", ",", "native_impl", "=", "False", ")", "\n", "\n", "", "return", "call_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.GaussKernel2dFn.forward": [[92, 113], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.unfold", "torch.unfold", "torch.unfold", "cols.view.view.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "ctx.save_for_backward", "cols.view.view.contiguous", "diff_sq.sum.sum.sum", "input.type"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "channel_wise", ")", ":", "\n", "        ", "ctx", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "bs", ",", "ch", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "out_h", "=", "(", "in_h", "+", "2", "*", "ctx", ".", "padding", "[", "0", "]", "-", "ctx", ".", "dilation", "[", "0", "]", "*", "(", "ctx", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "-", "1", ")", "//", "ctx", ".", "stride", "[", "0", "]", "+", "1", "\n", "out_w", "=", "(", "in_w", "+", "2", "*", "ctx", ".", "padding", "[", "1", "]", "-", "ctx", ".", "dilation", "[", "1", "]", "*", "(", "ctx", ".", "kernel_size", "[", "1", "]", "-", "1", ")", "-", "1", ")", "//", "ctx", ".", "stride", "[", "1", "]", "+", "1", "\n", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "cols", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_h", ",", "out_w", ")", "\n", "center_y", ",", "center_x", "=", "ctx", ".", "kernel_size", "[", "0", "]", "//", "2", ",", "ctx", ".", "kernel_size", "[", "1", "]", "//", "2", "\n", "feat_0", "=", "cols", ".", "contiguous", "(", ")", "[", ":", ",", ":", ",", "center_y", ":", "center_y", "+", "1", ",", "center_x", ":", "center_x", "+", "1", ",", ":", ",", ":", "]", "\n", "diff_sq", "=", "(", "cols", "-", "feat_0", ")", ".", "pow", "(", "2", ")", "\n", "if", "not", "channel_wise", ":", "\n", "            ", "diff_sq", "=", "diff_sq", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "output", "=", "torch", ".", "exp", "(", "-", "0.5", "*", "diff_sq", ")", "\n", "ctx", ".", "_backend", "=", "type2backend", "[", "input", ".", "type", "(", ")", "]", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.GaussKernel2dFn.backward": [[114, 140], ["torch.unfold", "torch.unfold", "torch.unfold", "cols.view.view.view", "grad_diff.sum().sum", "grad_output.new", "ctx._backend.Im2Col_updateGradInput", "cols.view.view.contiguous", "grad.expand_as", "grad_diff.view", "grad_diff.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "output", "=", "ctx", ".", "saved_tensors", "\n", "bs", ",", "ch", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "out_h", ",", "out_w", "=", "output", ".", "shape", "[", "-", "2", ":", "]", "\n", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "cols", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_h", ",", "out_w", ")", "\n", "center_y", ",", "center_x", "=", "ctx", ".", "kernel_size", "[", "0", "]", "//", "2", ",", "ctx", ".", "kernel_size", "[", "1", "]", "//", "2", "\n", "feat_0", "=", "cols", ".", "contiguous", "(", ")", "[", ":", ",", ":", ",", "center_y", ":", "center_y", "+", "1", ",", "center_x", ":", "center_x", "+", "1", ",", ":", ",", ":", "]", "\n", "diff", "=", "cols", "-", "feat_0", "\n", "grad", "=", "-", "0.5", "*", "grad_output", "*", "output", "\n", "grad_diff", "=", "grad", ".", "expand_as", "(", "cols", ")", "*", "(", "2", "*", "diff", ")", "\n", "grad_diff", "[", ":", ",", ":", ",", "center_y", ":", "center_y", "+", "1", ",", "center_x", ":", "center_x", "+", "1", ",", ":", ",", ":", "]", "-=", "grad_diff", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "grad_input", "=", "grad_output", ".", "new", "(", ")", "\n", "ctx", ".", "_backend", ".", "Im2Col_updateGradInput", "(", "ctx", ".", "_backend", ".", "library_state", ",", "\n", "grad_diff", ".", "view", "(", "bs", ",", "ch", "*", "ctx", ".", "kernel_size", "[", "0", "]", "*", "ctx", ".", "kernel_size", "[", "1", "]", ",", "-", "1", ")", ",", "\n", "grad_input", ",", "\n", "in_h", ",", "in_w", ",", "\n", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "ctx", ".", "stride", "[", "1", "]", ")", "\n", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConv2dFn.forward": [[143, 174], ["tuple", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "torch.unfold", "torch.unfold", "torch.unfold", "torch.einsum.clone", "torch.einsum.clone", "torch.einsum.clone", "kernel.size", "ValueError", "torch.unfold.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "bias.view", "input.type"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "shared_filters", "=", "False", ")", ":", "\n", "        ", "(", "bs", ",", "ch", ")", ",", "in_sz", "=", "input", ".", "shape", "[", ":", "2", "]", ",", "input", ".", "shape", "[", "2", ":", "]", "\n", "if", "kernel", ".", "size", "(", "1", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Non-singleton channel is not allowed for kernel.'", ")", "\n", "", "ctx", ".", "input_size", "=", "in_sz", "\n", "ctx", ".", "in_ch", "=", "ch", "\n", "ctx", ".", "kernel_size", "=", "tuple", "(", "weight", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "shared_filters", "=", "shared_filters", "\n", "ctx", ".", "save_for_backward", "(", "input", "if", "(", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", "else", "None", ",", "\n", "kernel", "if", "(", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", "else", "None", ",", "\n", "weight", "if", "(", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ")", "else", "None", ")", "\n", "ctx", ".", "_backend", "=", "type2backend", "[", "input", ".", "type", "(", ")", "]", "\n", "\n", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "\n", "in_mul_k", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "*", "kernel", ".", "shape", "[", "2", ":", "]", ")", "*", "kernel", "\n", "\n", "# matrix multiplication, written as an einsum to avoid repeated view() and permute()", "\n", "if", "shared_filters", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,zykl->ijmn'", ",", "(", "in_mul_k", ",", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,ojkl->iomn'", ",", "(", "in_mul_k", ",", "weight", ")", ")", "\n", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "output", ".", "clone", "(", ")", "# TODO understand why a .clone() is needed here", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConv2dFn.backward": [[175, 218], ["torch.unfold", "torch.unfold", "torch.unfold", "in_cols.view.view.view", "grad_output.new", "grad_im2col_output.view.view.view", "ctx._backend.Im2Col_updateGradInput", "grad_kernel.sum.sum.sum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.view().contiguous", "torch.einsum.view().contiguous", "torch.einsum.view().contiguous", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "grad_output.view", "weight.view", "torch.einsum.view", "torch.einsum.view", "torch.einsum.view"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "grad_kernel", "=", "grad_weight", "=", "grad_bias", "=", "None", "\n", "(", "bs", ",", "out_ch", ")", ",", "out_sz", "=", "grad_output", ".", "shape", "[", ":", "2", "]", ",", "grad_output", ".", "shape", "[", "2", ":", "]", "\n", "in_ch", "=", "ctx", ".", "in_ch", "\n", "\n", "input", ",", "kernel", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "if", "ctx", ".", "shared_filters", ":", "\n", "                ", "grad_in_mul_k", "=", "grad_output", ".", "view", "(", "bs", ",", "out_ch", ",", "1", ",", "1", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "*", "weight", ".", "view", "(", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "grad_in_mul_k", "=", "torch", ".", "einsum", "(", "'iomn,ojkl->ijklmn'", ",", "(", "grad_output", ",", "weight", ")", ")", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "in_cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "in_cols", "=", "in_cols", ".", "view", "(", "bs", ",", "in_ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "new", "(", ")", "\n", "grad_im2col_output", "=", "grad_in_mul_k", "*", "kernel", "\n", "grad_im2col_output", "=", "grad_im2col_output", ".", "view", "(", "bs", ",", "-", "1", ",", "out_sz", "[", "0", "]", "*", "out_sz", "[", "1", "]", ")", "\n", "ctx", ".", "_backend", ".", "Im2Col_updateGradInput", "(", "ctx", ".", "_backend", ".", "library_state", ",", "\n", "grad_im2col_output", ",", "\n", "grad_input", ",", "\n", "ctx", ".", "input_size", "[", "0", "]", ",", "ctx", ".", "input_size", "[", "1", "]", ",", "\n", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "ctx", ".", "stride", "[", "1", "]", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_kernel", "=", "in_cols", "*", "grad_in_mul_k", "\n", "grad_kernel", "=", "grad_kernel", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "in_mul_k", "=", "in_cols", "*", "kernel", "\n", "if", "ctx", ".", "shared_filters", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "einsum", "(", "'ijmn,ijklmn->kl'", ",", "(", "grad_output", ",", "in_mul_k", ")", ")", "\n", "grad_weight", "=", "grad_weight", ".", "view", "(", "1", ",", "1", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "einsum", "(", "'iomn,ijklmn->ojkl'", ",", "(", "grad_output", ",", "in_mul_k", ")", ")", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "            ", "grad_bias", "=", "torch", ".", "einsum", "(", "'iomn->o'", ",", "(", "grad_output", ",", ")", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_kernel", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConvTranspose2dFn.forward": [[221, 258], ["tuple", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "input.new_ones", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.pad", "torch.pad", "torch.pad", "torch.unfold", "torch.unfold", "torch.unfold", "torch.einsum.clone", "torch.einsum.clone", "torch.einsum.clone", "kernel.size", "ValueError", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.unfold.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "bias.view", "input.type", "zip"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "shared_filters", "=", "False", ")", ":", "\n", "        ", "(", "bs", ",", "ch", ")", ",", "in_sz", "=", "input", ".", "shape", "[", ":", "2", "]", ",", "input", ".", "shape", "[", "2", ":", "]", "\n", "if", "kernel", ".", "size", "(", "1", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Non-singleton channel is not allowed for kernel.'", ")", "\n", "", "ctx", ".", "in_ch", "=", "ch", "\n", "ctx", ".", "kernel_size", "=", "tuple", "(", "weight", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "output_padding", "=", "_pair", "(", "output_padding", ")", "\n", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "shared_filters", "=", "shared_filters", "\n", "ctx", ".", "save_for_backward", "(", "input", "if", "(", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", "else", "None", ",", "\n", "kernel", "if", "(", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", "else", "None", ",", "\n", "weight", "if", "(", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ")", "else", "None", ")", "\n", "ctx", ".", "_backend", "=", "type2backend", "[", "input", ".", "type", "(", ")", "]", "\n", "\n", "w", "=", "input", ".", "new_ones", "(", "(", "ch", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "w", ",", "stride", "=", "stride", ",", "groups", "=", "ch", ")", "\n", "pad", "=", "[", "(", "k", "-", "1", ")", "*", "d", "-", "p", "for", "(", "k", ",", "d", ",", "p", ")", "in", "zip", "(", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ")", "]", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "pad", "[", "1", "]", ",", "pad", "[", "1", "]", "+", "ctx", ".", "output_padding", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "0", "]", "+", "ctx", ".", "output_padding", "[", "0", "]", ")", ")", "\n", "\n", "cols", "=", "F", ".", "unfold", "(", "x", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "_pair", "(", "0", ")", ",", "_pair", "(", "1", ")", ")", "\n", "\n", "in_mul_k", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "*", "kernel", ".", "shape", "[", "2", ":", "]", ")", "*", "kernel", "\n", "\n", "# matrix multiplication, written as an einsum to avoid repeated view() and permute()", "\n", "if", "shared_filters", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,jokl->iomn'", ",", "(", "in_mul_k", ",", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,jokl->iomn'", ",", "(", "in_mul_k", ",", "weight", ")", ")", "\n", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "output", ".", "clone", "(", ")", "# TODO understand why a .clone() is needed here", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConvTranspose2dFn.backward": [[259, 308], ["input.new_ones", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.pad", "torch.pad", "torch.pad", "torch.unfold", "torch.unfold", "torch.unfold", "in_cols.view.view.view", "grad_output.new", "grad_im2col_output.view.view.view", "ctx._backend.Im2Col_updateGradInput", "grad_kernel.sum.sum.sum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "zip", "zip", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.view().contiguous", "torch.einsum.view().contiguous", "torch.einsum.view().contiguous", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "grad_output.view", "weight.view", "zip", "torch.einsum.view", "torch.einsum.view", "torch.einsum.view"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "grad_kernel", "=", "grad_weight", "=", "grad_bias", "=", "None", "\n", "(", "bs", ",", "out_ch", ")", ",", "out_sz", "=", "grad_output", ".", "shape", "[", ":", "2", "]", ",", "grad_output", ".", "shape", "[", "2", ":", "]", "\n", "in_ch", "=", "ctx", ".", "in_ch", "\n", "pad", "=", "[", "(", "k", "-", "1", ")", "*", "d", "-", "p", "for", "(", "k", ",", "d", ",", "p", ")", "in", "zip", "(", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ")", "]", "\n", "pad", "=", "[", "(", "p", ",", "p", "+", "op", ")", "for", "(", "p", ",", "op", ")", "in", "zip", "(", "pad", ",", "ctx", ".", "output_padding", ")", "]", "\n", "\n", "input", ",", "kernel", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "if", "ctx", ".", "shared_filters", ":", "\n", "                ", "grad_in_mul_k", "=", "grad_output", ".", "view", "(", "bs", ",", "out_ch", ",", "1", ",", "1", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "*", "weight", ".", "view", "(", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "grad_in_mul_k", "=", "torch", ".", "einsum", "(", "'iomn,jokl->ijklmn'", ",", "(", "grad_output", ",", "weight", ")", ")", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "w", "=", "input", ".", "new_ones", "(", "(", "in_ch", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "w", ",", "stride", "=", "ctx", ".", "stride", ",", "groups", "=", "in_ch", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "pad", "[", "1", "]", "[", "0", "]", ",", "pad", "[", "1", "]", "[", "1", "]", ",", "pad", "[", "0", "]", "[", "0", "]", ",", "pad", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "in_cols", "=", "F", ".", "unfold", "(", "x", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "_pair", "(", "0", ")", ",", "_pair", "(", "1", ")", ")", "\n", "in_cols", "=", "in_cols", ".", "view", "(", "bs", ",", "in_ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "new", "(", ")", "\n", "grad_im2col_output", "=", "grad_in_mul_k", "*", "kernel", "\n", "grad_im2col_output", "=", "grad_im2col_output", ".", "view", "(", "bs", ",", "-", "1", ",", "out_sz", "[", "0", "]", "*", "out_sz", "[", "1", "]", ")", "\n", "im2col_input_sz", "=", "[", "o", "+", "(", "k", "-", "1", ")", "*", "d", "for", "(", "o", ",", "k", ",", "d", ")", "in", "zip", "(", "out_sz", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ")", "]", "\n", "ctx", ".", "_backend", ".", "Im2Col_updateGradInput", "(", "ctx", ".", "_backend", ".", "library_state", ",", "\n", "grad_im2col_output", ",", "\n", "grad_input", ",", "\n", "im2col_input_sz", "[", "0", "]", ",", "im2col_input_sz", "[", "1", "]", ",", "\n", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "0", ",", "0", ",", "\n", "1", ",", "1", ")", "\n", "grad_input", "=", "grad_input", "[", ":", ",", ":", ",", "pad", "[", "0", "]", "[", "0", "]", ":", "-", "pad", "[", "0", "]", "[", "1", "]", ":", "ctx", ".", "stride", "[", "0", "]", ",", "pad", "[", "1", "]", "[", "0", "]", ":", "-", "pad", "[", "1", "]", "[", "1", "]", ":", "ctx", ".", "stride", "[", "1", "]", "]", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_kernel", "=", "in_cols", "*", "grad_in_mul_k", "\n", "grad_kernel", "=", "grad_kernel", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "in_mul_k", "=", "in_cols", "*", "kernel", "\n", "if", "ctx", ".", "shared_filters", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "einsum", "(", "'ijmn,ijklmn->kl'", ",", "(", "grad_output", ",", "in_mul_k", ")", ")", "\n", "grad_weight", "=", "grad_weight", ".", "view", "(", "1", ",", "1", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "einsum", "(", "'iomn,ijklmn->jokl'", ",", "(", "grad_output", ",", "in_mul_k", ")", ")", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "            ", "grad_bias", "=", "torch", ".", "einsum", "(", "'iomn->o'", ",", "(", "grad_output", ",", ")", ")", "\n", "", "return", "grad_input", ",", "grad_kernel", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2dFn.forward": [[311, 332], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "kernel.size", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "torch.unfold", "torch.unfold", "torch.unfold", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.clone", "torch.einsum.clone", "torch.einsum.clone", "ValueError", "torch.unfold.view", "kernel.size", "kernel.size", "input.type"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "(", "bs", ",", "ch", ")", ",", "in_sz", "=", "input", ".", "shape", "[", ":", "2", "]", ",", "input", ".", "shape", "[", "2", ":", "]", "\n", "if", "kernel", ".", "size", "(", "1", ")", ">", "1", "and", "kernel", ".", "size", "(", "1", ")", "!=", "ch", ":", "\n", "            ", "raise", "ValueError", "(", "'Incompatible input and kernel sizes.'", ")", "\n", "", "ctx", ".", "input_size", "=", "in_sz", "\n", "ctx", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "ctx", ".", "kernel_ch", "=", "kernel", ".", "size", "(", "1", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "else", "None", ",", "\n", "kernel", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "else", "None", ")", "\n", "ctx", ".", "_backend", "=", "type2backend", "[", "input", ".", "type", "(", ")", "]", "\n", "\n", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "\n", "output", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "*", "kernel", ".", "shape", "[", "2", ":", "]", ")", "*", "kernel", "\n", "output", "=", "torch", ".", "einsum", "(", "'ijklmn->ijmn'", ",", "(", "output", ",", ")", ")", "\n", "\n", "return", "output", ".", "clone", "(", ")", "# TODO check whether a .clone() is needed here", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2dFn.backward": [[333, 359], ["grad_output.new", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "grad_im2col_output.view.view.view", "ctx._backend.Im2Col_updateGradInput", "torch.unfold", "torch.unfold", "torch.unfold", "cols.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "grad_kernel.sum.sum.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "kernel", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "grad_kernel", "=", "None", "\n", "(", "bs", ",", "ch", ")", ",", "out_sz", "=", "grad_output", ".", "shape", "[", ":", "2", "]", ",", "grad_output", ".", "shape", "[", "2", ":", "]", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "new", "(", ")", "\n", "grad_im2col_output", "=", "torch", ".", "einsum", "(", "'ijmn,izklmn->ijklmn'", ",", "(", "grad_output", ",", "kernel", ")", ")", "\n", "grad_im2col_output", "=", "grad_im2col_output", ".", "view", "(", "bs", ",", "-", "1", ",", "out_sz", "[", "0", "]", "*", "out_sz", "[", "1", "]", ")", "\n", "ctx", ".", "_backend", ".", "Im2Col_updateGradInput", "(", "ctx", ".", "_backend", ".", "library_state", ",", "\n", "grad_im2col_output", ",", "\n", "grad_input", ",", "\n", "ctx", ".", "input_size", "[", "0", "]", ",", "ctx", ".", "input_size", "[", "1", "]", ",", "\n", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "ctx", ".", "stride", "[", "1", "]", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "cols", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "\n", "grad_kernel", "=", "torch", ".", "einsum", "(", "'ijmn,ijklmn->ijklmn'", ",", "(", "grad_output", ",", "cols", ")", ")", "\n", "if", "ctx", ".", "kernel_ch", "==", "1", ":", "\n", "                ", "grad_kernel", "=", "grad_kernel", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "", "return", "grad_input", ",", "grad_kernel", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac._PacConvNd.__init__": [[527, 611], ["torch.Module.__init__", "any", "any", "kernel_type.startswith", "smooth_kernel_type.startswith", "pac._PacConvNd.reset_parameters", "ValueError", "ValueError", "float", "float", "int", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "smooth_kernel_type.find", "pac._PacConvNd.register_buffer", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "pac._PacConvNd.register_parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "kernel_type.find", "pac._PacConvNd.register_parameter", "pac._PacConvNd.register_parameter", "pac._PacConvNd.register_buffer", "pac._PacConvNd.register_buffer", "ValueError", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "pac._PacConvNd.register_buffer", "smooth_kernel_type.startswith", "int", "zip", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "kernel_type.split", "kernel_type.split", "kernel_type.find", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "float", "float", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "smooth_kernel_type.split", "len", "smooth_kernel.unsqueeze().unsqueeze", "int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "pac._PacConvNd.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "itertools.repeat", "torch.tensor.view", "torch.tensor.view", "torch.tensor.view", "len", "smooth_kernel.unsqueeze().unsqueeze", "ValueError", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "smooth_kernel.unsqueeze", "smooth_kernel_type.split", "torch.tensor.view", "torch.tensor.view", "torch.tensor.view", "tuple", "itertools.repeat", "smooth_kernel.unsqueeze", "smooth_kernel_type.rfind", "itertools.repeat"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "transposed", ",", "output_padding", ",", "bias", ",", "\n", "pool_only", ",", "kernel_type", ",", "smooth_kernel_type", ",", "\n", "channel_wise", ",", "normalize_kernel", ",", "shared_filters", ",", "filler", ")", ":", "\n", "        ", "super", "(", "_PacConvNd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "pool_only", "=", "pool_only", "\n", "self", ".", "kernel_type", "=", "kernel_type", "\n", "self", ".", "smooth_kernel_type", "=", "smooth_kernel_type", "\n", "self", ".", "channel_wise", "=", "channel_wise", "\n", "self", ".", "normalize_kernel", "=", "normalize_kernel", "\n", "self", ".", "shared_filters", "=", "shared_filters", "\n", "self", ".", "filler", "=", "filler", "\n", "if", "any", "(", "[", "k", "%", "2", "!=", "1", "for", "k", "in", "kernel_size", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'kernel_size only accept odd numbers'", ")", "\n", "", "if", "smooth_kernel_type", ".", "find", "(", "'_'", ")", ">=", "0", "and", "int", "(", "smooth_kernel_type", "[", "smooth_kernel_type", ".", "rfind", "(", "'_'", ")", "+", "1", ":", "]", ")", "%", "2", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'smooth_kernel_type only accept kernels of odd widths'", ")", "\n", "", "if", "shared_filters", ":", "\n", "            ", "assert", "in_channels", "==", "out_channels", ",", "'when specifying shared_filters, number of channels should not change'", "\n", "", "if", "any", "(", "[", "p", ">", "d", "*", "(", "k", "-", "1", ")", "/", "2", "for", "(", "p", ",", "d", ",", "k", ")", "in", "zip", "(", "padding", ",", "dilation", ",", "kernel_size", ")", "]", ")", ":", "\n", "# raise ValueError('padding ({}) too large'.format(padding))", "\n", "            ", "pass", "# TODO verify that this indeed won't cause issues", "\n", "", "if", "not", "pool_only", ":", "\n", "            ", "if", "self", ".", "filler", "in", "{", "'pool'", ",", "'crf_pool'", "}", ":", "\n", "                ", "assert", "shared_filters", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "kernel_size", ")", ")", "\n", "if", "self", ".", "filler", "==", "'crf_pool'", ":", "\n", "                    ", "self", ".", "weight", "[", "(", "0", ",", "0", ")", "+", "tuple", "(", "k", "//", "2", "for", "k", "in", "kernel_size", ")", "]", "=", "0", "# Eq.5, DenseCRF", "\n", "", "", "elif", "shared_filters", ":", "\n", "                ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "*", "kernel_size", ")", ")", "\n", "", "elif", "transposed", ":", "\n", "                ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", ",", "*", "kernel_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", ",", "*", "kernel_size", ")", ")", "\n", "", "if", "bias", ":", "\n", "                ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "", "if", "kernel_type", ".", "startswith", "(", "'inv_'", ")", ":", "\n", "            ", "self", ".", "inv_alpha_init", "=", "float", "(", "kernel_type", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "self", ".", "inv_lambda_init", "=", "float", "(", "kernel_type", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "if", "self", ".", "channel_wise", "and", "kernel_type", ".", "find", "(", "'_fixed'", ")", "<", "0", ":", "\n", "                ", "if", "out_channels", "<=", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "'out_channels needed for channel_wise {}'", ".", "format", "(", "kernel_type", ")", ")", "\n", "", "inv_alpha", "=", "self", ".", "inv_alpha_init", "*", "torch", ".", "ones", "(", "out_channels", ")", "\n", "inv_lambda", "=", "self", ".", "inv_lambda_init", "*", "torch", ".", "ones", "(", "out_channels", ")", "\n", "", "else", ":", "\n", "                ", "inv_alpha", "=", "torch", ".", "tensor", "(", "float", "(", "self", ".", "inv_alpha_init", ")", ")", "\n", "inv_lambda", "=", "torch", ".", "tensor", "(", "float", "(", "self", ".", "inv_lambda_init", ")", ")", "\n", "", "if", "kernel_type", ".", "find", "(", "'_fixed'", ")", "<", "0", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'inv_alpha'", ",", "Parameter", "(", "inv_alpha", ")", ")", "\n", "self", ".", "register_parameter", "(", "'inv_lambda'", ",", "Parameter", "(", "inv_lambda", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "register_buffer", "(", "'inv_alpha'", ",", "inv_alpha", ")", "\n", "self", ".", "register_buffer", "(", "'inv_lambda'", ",", "inv_lambda", ")", "\n", "", "", "elif", "kernel_type", "!=", "'gaussian'", ":", "\n", "            ", "raise", "ValueError", "(", "'kernel_type set to invalid value ({})'", ".", "format", "(", "kernel_type", ")", ")", "\n", "", "if", "smooth_kernel_type", ".", "startswith", "(", "'full_'", ")", ":", "\n", "            ", "smooth_kernel_size", "=", "int", "(", "smooth_kernel_type", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "self", ".", "smooth_kernel", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "*", "repeat", "(", "smooth_kernel_size", ",", "len", "(", "kernel_size", ")", ")", ")", ")", "\n", "", "elif", "smooth_kernel_type", "==", "'gaussian'", ":", "\n", "            ", "smooth_1d", "=", "torch", ".", "tensor", "(", "[", ".25", ",", ".5", ",", ".25", "]", ")", "\n", "smooth_kernel", "=", "smooth_1d", "\n", "for", "d", "in", "range", "(", "1", ",", "len", "(", "kernel_size", ")", ")", ":", "\n", "                ", "smooth_kernel", "=", "smooth_kernel", "*", "smooth_1d", ".", "view", "(", "-", "1", ",", "*", "repeat", "(", "1", ",", "d", ")", ")", "\n", "", "self", ".", "register_buffer", "(", "'smooth_kernel'", ",", "smooth_kernel", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "elif", "smooth_kernel_type", ".", "startswith", "(", "'average_'", ")", ":", "\n", "            ", "smooth_kernel_size", "=", "int", "(", "smooth_kernel_type", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "smooth_1d", "=", "torch", ".", "tensor", "(", "(", "1.0", "/", "smooth_kernel_size", ",", ")", "*", "smooth_kernel_size", ")", "\n", "smooth_kernel", "=", "smooth_1d", "\n", "for", "d", "in", "range", "(", "1", ",", "len", "(", "kernel_size", ")", ")", ":", "\n", "                ", "smooth_kernel", "=", "smooth_kernel", "*", "smooth_1d", ".", "view", "(", "-", "1", ",", "*", "repeat", "(", "1", ",", "d", ")", ")", "\n", "", "self", ".", "register_buffer", "(", "'smooth_kernel'", ",", "smooth_kernel", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "elif", "smooth_kernel_type", "!=", "'none'", ":", "\n", "            ", "raise", "ValueError", "(", "'smooth_kernel_type set to invalid value ({})'", ".", "format", "(", "smooth_kernel_type", ")", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac._PacConvNd.reset_parameters": [[612, 665], ["hasattr", "isinstance", "pac._PacConvNd.inv_alpha.data.fill_", "pac._PacConvNd.inv_lambda.data.fill_", "hasattr", "isinstance", "pac._PacConvNd.smooth_kernel.data.fill_", "pac._PacConvNd.weight.data.uniform_", "math.sqrt", "pac._PacConvNd.bias.data.uniform_", "tuple", "tuple", "all", "enumerate", "pac._PacConvNd.weight.data.fill_", "range", "numpy.multiply.reduce", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pac._PacConvNd.bias.data.fill_", "ValueError", "int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pac._PacConvNd.weight.data.add_", "pac._PacConvNd.bias.data.fill_", "zip", "zip", "len", "numpy.array().reshape", "len", "pac.np_gaussian_2d", "numpy.eye", "compat.reshape", "numpy.array", "numpy.array", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "tuple", "tuple", "tuple", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.np_gaussian_2d"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "pool_only", "or", "self", ".", "filler", "in", "{", "'pool'", ",", "'crf_pool'", "}", ")", ":", "\n", "            ", "if", "self", ".", "filler", "==", "'uniform'", ":", "\n", "                ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "                    ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "if", "self", ".", "shared_filters", ":", "\n", "                    ", "stdv", "*=", "self", ".", "in_channels", "\n", "", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "", "", "elif", "self", ".", "filler", "==", "'linear'", ":", "\n", "                ", "effective_kernel_size", "=", "tuple", "(", "2", "*", "s", "-", "1", "for", "s", "in", "self", ".", "stride", ")", "\n", "pad", "=", "tuple", "(", "int", "(", "(", "k", "-", "ek", ")", "//", "2", ")", "for", "k", ",", "ek", "in", "zip", "(", "self", ".", "kernel_size", ",", "effective_kernel_size", ")", ")", "\n", "assert", "self", ".", "transposed", "and", "self", ".", "in_channels", "==", "self", ".", "out_channels", "\n", "assert", "all", "(", "k", ">=", "ek", "for", "k", ",", "ek", "in", "zip", "(", "self", ".", "kernel_size", ",", "effective_kernel_size", ")", ")", "\n", "w", "=", "1.0", "\n", "for", "i", ",", "(", "p", ",", "s", ",", "k", ")", "in", "enumerate", "(", "zip", "(", "pad", ",", "self", ".", "stride", ",", "self", ".", "kernel_size", ")", ")", ":", "\n", "                    ", "d", "=", "len", "(", "pad", ")", "-", "i", "-", "1", "\n", "w", "=", "w", "*", "(", "np", ".", "array", "(", "(", "0.0", ",", ")", "*", "p", "+", "tuple", "(", "range", "(", "1", ",", "s", ")", ")", "+", "tuple", "(", "range", "(", "s", ",", "0", ",", "-", "1", ")", ")", "+", "(", "0", ",", ")", "*", "p", ")", "/", "s", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", ")", "+", "(", "1", ",", ")", "*", "d", ")", "\n", "if", "self", ".", "normalize_kernel", ":", "\n", "                        ", "w", "=", "w", "*", "np", ".", "array", "(", "tuple", "(", "(", "(", "k", "-", "j", "-", "1", ")", "//", "s", ")", "+", "(", "j", "//", "s", ")", "+", "1.0", "for", "j", "in", "range", "(", "k", ")", ")", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", ")", "+", "(", "1", ",", ")", "*", "d", ")", "\n", "", "", "self", ".", "weight", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "for", "c", "in", "range", "(", "1", "if", "self", ".", "shared_filters", "else", "self", ".", "in_channels", ")", ":", "\n", "                    ", "self", ".", "weight", ".", "data", "[", "c", ",", "c", ",", ":", "]", "=", "torch", ".", "tensor", "(", "w", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "self", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "", "elif", "self", ".", "filler", "in", "{", "'crf'", ",", "'crf_perturbed'", "}", ":", "\n", "                ", "assert", "len", "(", "self", ".", "kernel_size", ")", "==", "2", "and", "self", ".", "kernel_size", "[", "0", "]", "==", "self", ".", "kernel_size", "[", "1", "]", "and", "self", ".", "in_channels", "==", "self", ".", "out_channels", "\n", "perturb_range", "=", "0.001", "\n", "n_classes", "=", "self", ".", "in_channels", "\n", "gauss", "=", "np_gaussian_2d", "(", "self", ".", "kernel_size", "[", "0", "]", ")", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "0", "]", "\n", "gauss", "[", "self", ".", "kernel_size", "[", "0", "]", "//", "2", ",", "self", ".", "kernel_size", "[", "1", "]", "//", "2", "]", "=", "0", "\n", "if", "self", ".", "shared_filters", ":", "\n", "                    ", "self", ".", "weight", ".", "data", "[", "0", ",", "0", ",", ":", "]", "=", "torch", ".", "tensor", "(", "gauss", ")", "\n", "", "else", ":", "\n", "                    ", "compat", "=", "1.0", "-", "np", ".", "eye", "(", "n_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "weight", ".", "data", "[", ":", "]", "=", "torch", ".", "tensor", "(", "compat", ".", "reshape", "(", "n_classes", ",", "n_classes", ",", "1", ",", "1", ")", "*", "gauss", ")", "\n", "", "if", "self", ".", "filler", "==", "'crf_perturbed'", ":", "\n", "                    ", "self", ".", "weight", ".", "data", ".", "add_", "(", "(", "torch", ".", "rand_like", "(", "self", ".", "weight", ".", "data", ")", "-", "0.5", ")", "*", "perturb_range", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "self", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Initialization method ({}) not supported.'", ".", "format", "(", "self", ".", "filler", ")", ")", "\n", "", "", "if", "hasattr", "(", "self", ",", "'inv_alpha'", ")", "and", "isinstance", "(", "self", ".", "inv_alpha", ",", "Parameter", ")", ":", "\n", "            ", "self", ".", "inv_alpha", ".", "data", ".", "fill_", "(", "self", ".", "inv_alpha_init", ")", "\n", "self", ".", "inv_lambda", ".", "data", ".", "fill_", "(", "self", ".", "inv_lambda_init", ")", "\n", "", "if", "hasattr", "(", "self", ",", "'smooth_kernel'", ")", "and", "isinstance", "(", "self", ".", "smooth_kernel", ",", "Parameter", ")", ":", "\n", "            ", "self", ".", "smooth_kernel", ".", "data", ".", "fill_", "(", "1.0", "/", "np", ".", "multiply", ".", "reduce", "(", "self", ".", "smooth_kernel", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac._PacConvNd.extra_repr": [[666, 688], ["s.format", "len", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', kernel_type={kernel_type}'", ")", "\n", "if", "self", ".", "stride", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "stride", ")", ":", "\n", "            ", "s", "+=", "', stride={stride}'", "\n", "", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "', output_padding={output_padding}'", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "if", "self", ".", "smooth_kernel_type", "!=", "'none'", ":", "\n", "            ", "s", "+=", "', smooth_kernel_type={smooth_kernel_type}'", "\n", "", "if", "self", ".", "channel_wise", ":", "\n", "            ", "s", "+=", "', channel_wise=True'", "\n", "", "if", "self", ".", "normalize_kernel", ":", "\n", "            ", "s", "+=", "', normalize_kernel=True'", "\n", "", "if", "self", ".", "shared_filters", ":", "\n", "            ", "s", "+=", "', shared_filters=True'", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConv2d.__init__": [[704, 717], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac._PacConvNd.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "normalize_kernel", "=", "False", ",", "shared_filters", "=", "False", ",", "\n", "filler", "=", "'uniform'", ",", "native_impl", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "PacConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "False", ",", "_pair", "(", "0", ")", ",", "bias", ",", "\n", "False", ",", "kernel_type", ",", "smooth_kernel_type", ",", "False", ",", "normalize_kernel", ",", "shared_filters", ",", "filler", ")", "\n", "\n", "self", ".", "native_impl", "=", "native_impl", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConv2d.compute_kernel": [[718, 728], ["pac.packernel2d", "hasattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d"], ["", "def", "compute_kernel", "(", "self", ",", "input_for_kernel", ",", "input_mask", "=", "None", ")", ":", "\n", "        ", "return", "packernel2d", "(", "input_for_kernel", ",", "input_mask", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "kernel_type", "=", "self", ".", "kernel_type", ",", "\n", "smooth_kernel_type", "=", "self", ".", "smooth_kernel_type", ",", "\n", "smooth_kernel", "=", "self", ".", "smooth_kernel", "if", "hasattr", "(", "self", ",", "'smooth_kernel'", ")", "else", "None", ",", "\n", "inv_alpha", "=", "self", ".", "inv_alpha", "if", "hasattr", "(", "self", ",", "'inv_alpha'", ")", "else", "None", ",", "\n", "inv_lambda", "=", "self", ".", "inv_lambda", "if", "hasattr", "(", "self", ",", "'inv_lambda'", ")", "else", "None", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "self", ".", "normalize_kernel", ",", "transposed", "=", "False", ",", "\n", "native_impl", "=", "self", ".", "native_impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConv2d.forward": [[729, 738], ["pac.pacconv2d", "pac.PacConv2d.compute_kernel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2d.compute_kernel"], ["", "def", "forward", "(", "self", ",", "input_2d", ",", "input_for_kernel", ",", "kernel", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "output_mask", "=", "None", "\n", "if", "kernel", "is", "None", ":", "\n", "            ", "kernel", ",", "output_mask", "=", "self", ".", "compute_kernel", "(", "input_for_kernel", ",", "mask", ")", "\n", "\n", "", "output", "=", "pacconv2d", "(", "input_2d", ",", "kernel", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "shared_filters", ",", "self", ".", "native_impl", ")", "\n", "\n", "return", "output", "if", "output_mask", "is", "None", "else", "(", "output", ",", "output_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConvTranspose2d.__init__": [[754, 768], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac._PacConvNd.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ",", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "normalize_kernel", "=", "False", ",", "\n", "shared_filters", "=", "False", ",", "filler", "=", "'uniform'", ",", "native_impl", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "output_padding", "=", "_pair", "(", "output_padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "PacConvTranspose2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "True", ",", "output_padding", ",", "bias", ",", "\n", "False", ",", "kernel_type", ",", "smooth_kernel_type", ",", "False", ",", "normalize_kernel", ",", "shared_filters", ",", "filler", ")", "\n", "\n", "self", ".", "native_impl", "=", "native_impl", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConvTranspose2d.compute_kernel": [[769, 779], ["pac.packernel2d", "hasattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d"], ["", "def", "compute_kernel", "(", "self", ",", "input_for_kernel", ",", "input_mask", "=", "None", ")", ":", "\n", "        ", "return", "packernel2d", "(", "input_for_kernel", ",", "input_mask", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "\n", "output_padding", "=", "self", ".", "output_padding", ",", "dilation", "=", "self", ".", "dilation", ",", "kernel_type", "=", "self", ".", "kernel_type", ",", "\n", "smooth_kernel_type", "=", "self", ".", "smooth_kernel_type", ",", "\n", "smooth_kernel", "=", "self", ".", "smooth_kernel", "if", "hasattr", "(", "self", ",", "'smooth_kernel'", ")", "else", "None", ",", "\n", "inv_alpha", "=", "self", ".", "inv_alpha", "if", "hasattr", "(", "self", ",", "'inv_alpha'", ")", "else", "None", ",", "\n", "inv_lambda", "=", "self", ".", "inv_lambda", "if", "hasattr", "(", "self", ",", "'inv_lambda'", ")", "else", "None", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "self", ".", "normalize_kernel", ",", "transposed", "=", "True", ",", "\n", "native_impl", "=", "self", ".", "native_impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacConvTranspose2d.forward": [[780, 789], ["pac.pacconv_transpose2d", "pac.PacConvTranspose2d.compute_kernel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv_transpose2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2d.compute_kernel"], ["", "def", "forward", "(", "self", ",", "input_2d", ",", "input_for_kernel", ",", "kernel", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "output_mask", "=", "None", "\n", "if", "kernel", "is", "None", ":", "\n", "            ", "kernel", ",", "output_mask", "=", "self", ".", "compute_kernel", "(", "input_for_kernel", ",", "mask", ")", "\n", "\n", "", "output", "=", "pacconv_transpose2d", "(", "input_2d", ",", "kernel", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "output_padding", ",", "self", ".", "dilation", ",", "self", ".", "shared_filters", ",", "self", ".", "native_impl", ")", "\n", "\n", "return", "output", "if", "output_mask", "is", "None", "else", "(", "output", ",", "output_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2d.__init__": [[806, 819], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac._PacConvNd.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair"], ["def", "__init__", "(", "self", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "False", ",", "out_channels", "=", "-", "1", ",", "native_impl", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "PacPool2d", ",", "self", ")", ".", "__init__", "(", "\n", "-", "1", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "False", ",", "_pair", "(", "0", ")", ",", "False", ",", "\n", "True", ",", "kernel_type", ",", "smooth_kernel_type", ",", "channel_wise", ",", "normalize_kernel", ",", "False", ",", "None", ")", "\n", "\n", "self", ".", "native_impl", "=", "native_impl", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2d.compute_kernel": [[820, 830], ["pac.packernel2d", "hasattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d"], ["", "def", "compute_kernel", "(", "self", ",", "input_for_kernel", ",", "input_mask", "=", "None", ")", ":", "\n", "        ", "return", "packernel2d", "(", "input_for_kernel", ",", "input_mask", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "kernel_type", "=", "self", ".", "kernel_type", ",", "\n", "smooth_kernel_type", "=", "self", ".", "smooth_kernel_type", ",", "\n", "smooth_kernel", "=", "self", ".", "smooth_kernel", "if", "hasattr", "(", "self", ",", "'smooth_kernel'", ")", "else", "None", ",", "\n", "inv_alpha", "=", "self", ".", "inv_alpha", "if", "hasattr", "(", "self", ",", "'inv_alpha'", ")", "else", "None", ",", "\n", "inv_lambda", "=", "self", ".", "inv_lambda", "if", "hasattr", "(", "self", ",", "'inv_lambda'", ")", "else", "None", ",", "\n", "channel_wise", "=", "self", ".", "channel_wise", ",", "normalize_kernel", "=", "self", ".", "normalize_kernel", ",", "transposed", "=", "False", ",", "\n", "native_impl", "=", "self", ".", "native_impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2d.forward": [[831, 845], ["pac.pacpool2d", "pac.PacPool2d.compute_kernel", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacpool2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2d.compute_kernel"], ["", "def", "forward", "(", "self", ",", "input_2d", ",", "input_for_kernel", ",", "kernel", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "output_mask", "=", "None", "\n", "if", "kernel", "is", "None", ":", "\n", "            ", "kernel", ",", "output_mask", "=", "self", ".", "compute_kernel", "(", "input_for_kernel", ",", "mask", ")", "\n", "\n", "", "bs", ",", "in_ch", ",", "in_h", ",", "in_w", "=", "input_2d", ".", "shape", "\n", "if", "self", ".", "channel_wise", "and", "(", "kernel", ".", "shape", "[", "1", "]", "!=", "in_ch", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'input and kernel must have the same number of channels when channel_wise=True'", ")", "\n", "", "assert", "self", ".", "out_channels", "<=", "0", "or", "self", ".", "out_channels", "==", "in_ch", "\n", "\n", "output", "=", "pacpool2d", "(", "input_2d", ",", "kernel", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "native_impl", ")", "\n", "\n", "return", "output", "if", "output_mask", "is", "None", "else", "(", "output", ",", "output_mask", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac._neg_idx": [[35, 37], ["None"], "function", ["None"], ["", "def", "_neg_idx", "(", "idx", ")", ":", "\n", "    ", "return", "None", "if", "idx", "==", "0", "else", "-", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.np_gaussian_2d": [[39, 51], ["numpy.arange", "numpy.exp", "gaussian_2d.sum", "np.exp.reshape", "float"], "function", ["None"], ["", "def", "np_gaussian_2d", "(", "width", ",", "sigma", "=", "-", "1", ")", ":", "\n", "    ", "'''Truncated 2D Gaussian filter'''", "\n", "assert", "width", "%", "2", "==", "1", "\n", "if", "sigma", "<=", "0", ":", "\n", "        ", "sigma", "=", "float", "(", "width", ")", "/", "4", "\n", "\n", "", "r", "=", "np", ".", "arange", "(", "-", "(", "width", "//", "2", ")", ",", "(", "width", "//", "2", ")", "+", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gaussian_1d", "=", "np", ".", "exp", "(", "-", "0.5", "*", "r", "*", "r", "/", "(", "sigma", "*", "sigma", ")", ")", "\n", "gaussian_2d", "=", "gaussian_1d", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "gaussian_1d", "\n", "gaussian_2d", "/=", "gaussian_2d", ".", "sum", "(", ")", "\n", "\n", "return", "gaussian_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.nd2col": [[53, 89], ["len", "tuple", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "F.pad.new_ones", "torch.conv_transpose2d", "torch.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "P.im2col", "torch.unfold", "output.view().contiguous.view().contiguous", "zip", "zip", "tuple", "output.view().contiguous.view"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair"], ["", "def", "nd2col", "(", "input_nd", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "transposed", "=", "False", ",", "\n", "use_pyinn_if_possible", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Shape:\n        - Input: :math:`(N, C, L_{in})`\n        - Output: :math:`(N, C, *kernel_size, *L_{out})` where\n          :math:`L_{out} = floor((L_{in} + 2 * padding - dilation * (kernel_size - 1) - 1) / stride + 1)` for non-transposed\n          :math:`L_{out} = (L_{in} - 1) * stride - 2 * padding + dilation * (kernel_size - 1) + 1 + output_padding` for transposed\n    \"\"\"", "\n", "n_dims", "=", "len", "(", "input_nd", ".", "shape", "[", "2", ":", "]", ")", "\n", "kernel_size", "=", "(", "kernel_size", ",", ")", "*", "n_dims", "if", "isinstance", "(", "kernel_size", ",", "Number", ")", "else", "kernel_size", "\n", "stride", "=", "(", "stride", ",", ")", "*", "n_dims", "if", "isinstance", "(", "stride", ",", "Number", ")", "else", "stride", "\n", "padding", "=", "(", "padding", ",", ")", "*", "n_dims", "if", "isinstance", "(", "padding", ",", "Number", ")", "else", "padding", "\n", "output_padding", "=", "(", "output_padding", ",", ")", "*", "n_dims", "if", "isinstance", "(", "output_padding", ",", "Number", ")", "else", "output_padding", "\n", "dilation", "=", "(", "dilation", ",", ")", "*", "n_dims", "if", "isinstance", "(", "dilation", ",", "Number", ")", "else", "dilation", "\n", "\n", "if", "transposed", ":", "\n", "        ", "assert", "n_dims", "==", "2", ",", "'Only 2D is supported for fractional strides.'", "\n", "w_one", "=", "input_nd", ".", "new_ones", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "pad", "=", "[", "(", "k", "-", "1", ")", "*", "d", "-", "p", "for", "(", "k", ",", "d", ",", "p", ")", "in", "zip", "(", "kernel_size", ",", "dilation", ",", "padding", ")", "]", "\n", "input_nd", "=", "F", ".", "conv_transpose2d", "(", "input_nd", ",", "w_one", ",", "stride", "=", "stride", ")", "\n", "input_nd", "=", "F", ".", "pad", "(", "input_nd", ",", "(", "pad", "[", "1", "]", ",", "pad", "[", "1", "]", "+", "output_padding", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "0", "]", "+", "output_padding", "[", "0", "]", ")", ")", "\n", "stride", "=", "_pair", "(", "1", ")", "\n", "padding", "=", "_pair", "(", "0", ")", "\n", "\n", "", "(", "bs", ",", "nch", ")", ",", "in_sz", "=", "input_nd", ".", "shape", "[", ":", "2", "]", ",", "input_nd", ".", "shape", "[", "2", ":", "]", "\n", "out_sz", "=", "tuple", "(", "[", "(", "(", "i", "+", "2", "*", "p", "-", "d", "*", "(", "k", "-", "1", ")", "-", "1", ")", "//", "s", "+", "1", ")", "\n", "for", "(", "i", ",", "k", ",", "d", ",", "p", ",", "s", ")", "in", "zip", "(", "in_sz", ",", "kernel_size", ",", "dilation", ",", "padding", ",", "stride", ")", "]", ")", "\n", "# Use PyINN if possible (about 15% faster) TODO confirm the speed-up", "\n", "if", "n_dims", "==", "2", "and", "dilation", "==", "1", "and", "has_pyinn", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_pyinn_if_possible", ":", "\n", "        ", "output", "=", "P", ".", "im2col", "(", "input_nd", ",", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "F", ".", "unfold", "(", "input_nd", ",", "kernel_size", ",", "dilation", ",", "padding", ",", "stride", ")", "\n", "out_shape", "=", "(", "bs", ",", "nch", ")", "+", "tuple", "(", "kernel_size", ")", "+", "out_sz", "\n", "output", "=", "output", ".", "view", "(", "*", "out_shape", ")", ".", "contiguous", "(", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.packernel2d": [[361, 453], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.tensor", "torch.tensor", "torch.tensor", "tuple", "input.new_ones", "pac.nd2col", "torch.nn.modules.utils._pair", "tuple", "pac.nd2col", "torch.exp_.view().contiguous", "torch.exp_.view().contiguous", "GaussKernel2dFn.apply", "GaussKernel2dFn.apply.sum().sum", "pac.nd2col", "tuple", "torch.conv2d", "F.conv2d.view", "kernel_type.find", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.exp_", "torch.exp_", "torch.exp_", "kernel_type.startswith", "torch.exp_.view", "int", "int", "input.view", "torch.exp_.mul_", "ValueError", "torch.exp_.view", "GaussKernel2dFn.apply.sum", "torch.tensor", "torch.tensor", "torch.tensor", "int", "zip", "nd2col.sum().sum", "nd2col.sum().sum", "zip", "numpy.minimum", "tuple", "inv_alpha.view", "torch.pow", "torch.pow", "torch.pow", "pac._neg_idx", "pac._neg_idx", "numpy.maximum", "nd2col.sum", "nd2col.sum", "inv_lambda.view", "tuple"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.nd2col", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.nd2col", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.nd2col", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac._neg_idx", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac._neg_idx"], ["", "", "def", "packernel2d", "(", "input", ",", "mask", "=", "None", ",", "kernel_size", "=", "0", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "smooth_kernel", "=", "None", ",", "inv_alpha", "=", "None", ",", "inv_lambda", "=", "None", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "False", ",", "transposed", "=", "False", ",", "native_impl", "=", "False", ")", ":", "\n", "    ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "output_padding", "=", "_pair", "(", "output_padding", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "output_mask", "=", "False", "if", "mask", "is", "None", "else", "True", "\n", "norm", "=", "None", "\n", "\n", "if", "mask", "is", "not", "None", "and", "mask", ".", "dtype", "!=", "input", ".", "dtype", ":", "\n", "        ", "mask", "=", "torch", ".", "tensor", "(", "mask", ",", "dtype", "=", "input", ".", "dtype", ",", "device", "=", "input", ".", "device", ")", "\n", "\n", "", "if", "transposed", ":", "\n", "        ", "in_sz", "=", "tuple", "(", "int", "(", "(", "o", "-", "op", "-", "1", "-", "(", "k", "-", "1", ")", "*", "d", "+", "2", "*", "p", ")", "//", "s", ")", "+", "1", "for", "(", "o", ",", "k", ",", "s", ",", "p", ",", "op", ",", "d", ")", "in", "\n", "zip", "(", "input", ".", "shape", "[", "-", "2", ":", "]", ",", "kernel_size", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ")", ")", "\n", "", "else", ":", "\n", "        ", "in_sz", "=", "input", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "", "if", "mask", "is", "not", "None", "or", "normalize_kernel", ":", "\n", "        ", "mask_pattern", "=", "input", ".", "new_ones", "(", "1", ",", "1", ",", "*", "in_sz", ")", "\n", "mask_pattern", "=", "nd2col", "(", "mask_pattern", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "\n", "dilation", "=", "dilation", ",", "transposed", "=", "transposed", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "nd2col", "(", "mask", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "\n", "dilation", "=", "dilation", ",", "transposed", "=", "transposed", ")", "\n", "if", "not", "normalize_kernel", ":", "\n", "                ", "norm", "=", "mask", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "/", "mask_pattern", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "mask_pattern", "\n", "\n", "", "", "if", "transposed", ":", "\n", "        ", "stride", "=", "_pair", "(", "1", ")", "\n", "padding", "=", "tuple", "(", "(", "k", "-", "1", ")", "*", "d", "//", "2", "for", "(", "k", ",", "d", ")", "in", "zip", "(", "kernel_size", ",", "dilation", ")", ")", "\n", "\n", "", "if", "native_impl", ":", "\n", "        ", "bs", ",", "k_ch", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "\n", "x", "=", "nd2col", "(", "input", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "x", "=", "x", ".", "view", "(", "bs", ",", "k_ch", ",", "-", "1", ",", "*", "x", ".", "shape", "[", "-", "2", ":", "]", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "smooth_kernel_type", "==", "'none'", ":", "\n", "            ", "self_idx", "=", "kernel_size", "[", "0", "]", "*", "kernel_size", "[", "1", "]", "//", "2", "\n", "feat_0", "=", "x", "[", ":", ",", ":", ",", "self_idx", ":", "self_idx", "+", "1", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "smooth_kernel_size", "=", "smooth_kernel", ".", "shape", "[", "2", ":", "]", "\n", "smooth_padding", "=", "(", "int", "(", "padding", "[", "0", "]", "-", "(", "kernel_size", "[", "0", "]", "-", "smooth_kernel_size", "[", "0", "]", ")", "/", "2", ")", ",", "\n", "int", "(", "padding", "[", "1", "]", "-", "(", "kernel_size", "[", "1", "]", "-", "smooth_kernel_size", "[", "1", "]", ")", "/", "2", ")", ")", "\n", "crop", "=", "tuple", "(", "-", "1", "*", "np", ".", "minimum", "(", "0", ",", "smooth_padding", ")", ")", "\n", "input_for_kernel_crop", "=", "input", ".", "view", "(", "-", "1", ",", "1", ",", "in_h", ",", "in_w", ")", "[", ":", ",", ":", ",", "\n", "crop", "[", "0", "]", ":", "_neg_idx", "(", "crop", "[", "0", "]", ")", ",", "crop", "[", "1", "]", ":", "_neg_idx", "(", "crop", "[", "1", "]", ")", "]", "\n", "smoothed", "=", "F", ".", "conv2d", "(", "input_for_kernel_crop", ",", "smooth_kernel", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "tuple", "(", "np", ".", "maximum", "(", "0", ",", "smooth_padding", ")", ")", ")", "\n", "feat_0", "=", "smoothed", ".", "view", "(", "bs", ",", "k_ch", ",", "1", ",", "*", "x", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "x", "=", "x", "-", "feat_0", "\n", "if", "kernel_type", ".", "find", "(", "'_asym'", ")", ">=", "0", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "# x.pow_(2)  # this causes an autograd issue in pytorch>0.4", "\n", "", "x", "=", "x", "*", "x", "\n", "if", "not", "channel_wise", ":", "\n", "            ", "x", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "if", "kernel_type", "==", "'gaussian'", ":", "\n", "            ", "x", "=", "torch", ".", "exp_", "(", "x", ".", "mul_", "(", "-", "0.5", ")", ")", "# TODO profiling for identifying the culprit of 5x slow down", "\n", "# x = torch.exp(-0.5 * x)", "\n", "", "elif", "kernel_type", ".", "startswith", "(", "'inv_'", ")", ":", "\n", "            ", "epsilon", "=", "1e-4", "\n", "x", "=", "inv_alpha", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "+", "torch", ".", "pow", "(", "x", "+", "epsilon", ",", "0.5", "*", "inv_lambda", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "output", "=", "x", ".", "view", "(", "*", "(", "x", ".", "shape", "[", ":", "2", "]", "+", "tuple", "(", "kernel_size", ")", "+", "x", ".", "shape", "[", "-", "2", ":", "]", ")", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "smooth_kernel_type", "==", "'none'", "and", "\n", "kernel_type", "==", "'gaussian'", ")", "\n", "output", "=", "GaussKernel2dFn", ".", "apply", "(", "input", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "channel_wise", ")", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "output", "=", "output", "*", "mask", "# avoid numerical issue on masked positions", "\n", "\n", "", "if", "normalize_kernel", ":", "\n", "        ", "norm", "=", "output", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "if", "norm", "is", "not", "None", ":", "\n", "        ", "empty_mask", "=", "(", "norm", "==", "0", ")", "\n", "output", "=", "output", "/", "(", "norm", "+", "torch", ".", "tensor", "(", "empty_mask", ",", "dtype", "=", "input", ".", "dtype", ",", "device", "=", "input", ".", "device", ")", ")", "\n", "output_mask", "=", "(", "1", "-", "empty_mask", ")", "if", "output_mask", "else", "None", "\n", "", "else", ":", "\n", "        ", "output_mask", "=", "None", "\n", "\n", "", "return", "output", ",", "output_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv2d": [[455, 478], ["tuple", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac.nd2col", "PacConv2dFn.apply", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "bias.view"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.nd2col", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["", "def", "pacconv2d", "(", "input", ",", "kernel", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "shared_filters", "=", "False", ",", "\n", "native_impl", "=", "False", ")", ":", "\n", "    ", "kernel_size", "=", "tuple", "(", "weight", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "\n", "if", "native_impl", ":", "\n", "# im2col on input", "\n", "        ", "im_cols", "=", "nd2col", "(", "input", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "\n", "# main computation", "\n", "if", "shared_filters", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,zykl->ijmn'", ",", "(", "im_cols", "*", "kernel", ",", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,ojkl->iomn'", ",", "(", "im_cols", "*", "kernel", ",", "weight", ")", ")", "\n", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "output", "=", "PacConv2dFn", ".", "apply", "(", "input", ",", "kernel", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "shared_filters", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv_transpose2d": [[480, 501], ["tuple", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "input.new_ones", "torch.conv_transpose2d", "torch.pad", "pac.pacconv2d", "PacConvTranspose2dFn.apply", "weight.permute", "range"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacconv2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["", "def", "pacconv_transpose2d", "(", "input", ",", "kernel", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "shared_filters", "=", "False", ",", "native_impl", "=", "False", ")", ":", "\n", "    ", "kernel_size", "=", "tuple", "(", "weight", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "output_padding", "=", "_pair", "(", "output_padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "\n", "if", "native_impl", ":", "\n", "        ", "ch", "=", "input", ".", "shape", "[", "1", "]", "\n", "w", "=", "input", ".", "new_ones", "(", "(", "ch", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "w", ",", "stride", "=", "stride", ",", "groups", "=", "ch", ")", "\n", "pad", "=", "[", "(", "kernel_size", "[", "i", "]", "-", "1", ")", "*", "dilation", "[", "i", "]", "-", "padding", "[", "i", "]", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "pad", "[", "1", "]", ",", "pad", "[", "1", "]", "+", "output_padding", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "0", "]", "+", "output_padding", "[", "0", "]", ")", ")", "\n", "output", "=", "pacconv2d", "(", "x", ",", "kernel", ",", "weight", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ",", "bias", ",", "dilation", "=", "dilation", ",", "\n", "shared_filters", "=", "shared_filters", ",", "native_impl", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "PacConvTranspose2dFn", ".", "apply", "(", "input", ",", "kernel", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "\n", "shared_filters", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.pacpool2d": [[503, 524], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac.nd2col", "nd2col.view().sum", "PacPool2dFn.apply", "nd2col.view"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.nd2col", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["", "def", "pacpool2d", "(", "input", ",", "kernel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "native_impl", "=", "False", ")", ":", "\n", "    ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "\n", "if", "native_impl", ":", "\n", "        ", "bs", ",", "in_ch", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "out_h", "=", "(", "in_h", "+", "2", "*", "padding", "[", "0", "]", "-", "dilation", "[", "0", "]", "*", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "-", "1", ")", "//", "stride", "[", "0", "]", "+", "1", "\n", "out_w", "=", "(", "in_w", "+", "2", "*", "padding", "[", "1", "]", "-", "dilation", "[", "1", "]", "*", "(", "kernel_size", "[", "1", "]", "-", "1", ")", "-", "1", ")", "//", "stride", "[", "1", "]", "+", "1", "\n", "\n", "# im2col on input", "\n", "im_cols", "=", "nd2col", "(", "input", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "\n", "# main computation", "\n", "im_cols", "*=", "kernel", "\n", "output", "=", "im_cols", ".", "view", "(", "bs", ",", "in_ch", ",", "-", "1", ",", "out_h", ",", "out_w", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "PacPool2dFn", ".", "apply", "(", "input", ",", "kernel", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRF.__init__": [[59, 85], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ParameterList", "torch.nn.ParameterList", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "type", "paccrf.PacCRF.add_pairwise_kernel", "float", "paccrf.PacCRF.add_pairwise_kernel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.add_pairwise_kernel", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.add_pairwise_kernel"], ["def", "__init__", "(", "self", ",", "channels", ",", "num_steps", ",", "final_output", "=", "'log_Q'", ",", "perturbed_init", "=", "True", ",", "native_impl", "=", "False", ",", "\n", "fixed_weighting", "=", "False", ",", "unary_weight", "=", "1.0", ",", "pairwise_kernels", "=", "None", ")", ":", "\n", "        ", "super", "(", "PacCRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "final_output", "=", "final_output", "# 'log_softmax', 'softmax', 'log_Q'", "\n", "self", ".", "perturbed_init", "=", "perturbed_init", "\n", "self", ".", "native_impl", "=", "native_impl", "\n", "self", ".", "fixed_weighting", "=", "fixed_weighting", "\n", "self", ".", "init_unary_weight", "=", "unary_weight", "\n", "\n", "self", ".", "messengers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "compat", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "init_pairwise_weights", "=", "[", "]", "\n", "self", ".", "pairwise_weights", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "_use_pairwise_weights", "=", "[", "]", "\n", "self", ".", "unary_weight", "=", "unary_weight", "if", "self", ".", "fixed_weighting", "else", "nn", ".", "Parameter", "(", "th", ".", "tensor", "(", "float", "(", "unary_weight", ")", ")", ")", "\n", "self", ".", "blur", "=", "[", "]", "\n", "self", ".", "pairwise_repr", "=", "[", "]", "\n", "\n", "if", "pairwise_kernels", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "pairwise_kernels", ")", "==", "dict", ":", "\n", "                ", "self", ".", "add_pairwise_kernel", "(", "**", "pairwise_kernels", ")", "\n", "", "else", ":", "\n", "                ", "for", "k", "in", "pairwise_kernels", ":", "\n", "                    ", "self", ".", "add_pairwise_kernel", "(", "**", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRF.reset_parameters": [[86, 105], ["range", "paccrf.PacCRF.messengers[].reset_parameters", "isinstance", "len", "paccrf.PacCRF.unary_weight.data.fill_", "torch.ones_like", "torch.ones_like", "torch.eye", "torch.eye", "paccrf.PacCRF.compat[].weight.data.add_", "torch.rand_like", "torch.rand_like"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["", "", "", "", "def", "reset_parameters", "(", "self", ",", "pairwise_idx", "=", "None", ")", ":", "\n", "        ", "if", "pairwise_idx", "is", "None", ":", "\n", "            ", "idxs", "=", "range", "(", "len", "(", "self", ".", "messengers", ")", ")", "\n", "if", "not", "self", ".", "fixed_weighting", ":", "\n", "                ", "self", ".", "unary_weight", ".", "data", ".", "fill_", "(", "self", ".", "init_unary_weight", ")", "\n", "", "", "else", ":", "\n", "            ", "idxs", "=", "[", "pairwise_idx", "]", "\n", "\n", "", "for", "i", "in", "idxs", ":", "\n", "            ", "self", ".", "messengers", "[", "i", "]", ".", "reset_parameters", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "messengers", "[", "i", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# TODO: gaussian initialization for XY kernels?", "\n", "                ", "pass", "\n", "", "if", "self", ".", "compat", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "self", ".", "compat", "[", "i", "]", ".", "weight", ".", "data", "[", ":", ",", ":", ",", "0", ",", "0", "]", "=", "1.0", "-", "th", ".", "eye", "(", "self", ".", "channels", ",", "dtype", "=", "th", ".", "float32", ")", "\n", "if", "self", ".", "perturbed_init", ":", "\n", "                    ", "perturb_range", "=", "0.001", "\n", "self", ".", "compat", "[", "i", "]", ".", "weight", ".", "data", ".", "add_", "(", "(", "th", ".", "rand_like", "(", "self", ".", "compat", "[", "i", "]", ".", "weight", ".", "data", ")", "-", "0.5", ")", "*", "perturb_range", ")", "\n", "", "", "self", ".", "pairwise_weights", "[", "i", "]", ".", "data", "=", "th", ".", "ones_like", "(", "self", ".", "pairwise_weights", "[", "i", "]", ")", "*", "self", ".", "init_pairwise_weights", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRF.extra_repr": [[106, 117], ["s.format"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'categories={channels}'", "\n", "', num_steps={num_steps}'", "\n", "', final_output={final_output}'", ")", "\n", "if", "self", ".", "perturbed_init", ":", "\n", "            ", "s", "+=", "', perturbed_init=True'", "\n", "", "if", "self", ".", "fixed_weighting", ":", "\n", "            ", "s", "+=", "', fixed_weighting=True'", "\n", "", "if", "self", ".", "pairwise_repr", ":", "\n", "            ", "s", "+=", "', pairwise_kernels=({})'", ".", "format", "(", "', '", ".", "join", "(", "self", ".", "pairwise_repr", ")", ")", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRF.add_pairwise_kernel": [[118, 157], ["paccrf.PacCRF.pairwise_repr.append", "paccrf.PacCRF.pairwise_weights.append", "paccrf.PacCRF.init_pairwise_weights.append", "paccrf.PacCRF.blur.append", "paccrf.PacCRF.compat.append", "paccrf.PacCRF.messengers.append", "paccrf.PacCRF.reset_parameters", "paccrf.PacCRF._use_pairwise_weights.append", "paccrf.PacCRF._use_pairwise_weights.append", "torch.nn.Parameter", "torch.nn.Parameter", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.tensor", "torch.tensor", "torch.nn.Conv2d", "torch.nn.Conv2d", "lib.extensions.pacnet.pac.PacConv2d", "lib.extensions.pacnet.pac.PacConv2d", "lib.extensions.pacnet.pac.PacConv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["", "def", "add_pairwise_kernel", "(", "self", ",", "kernel_size", "=", "3", ",", "dilation", "=", "1", ",", "blur", "=", "1", ",", "compat_type", "=", "'4d'", ",", "spatial_filter", "=", "True", ",", "\n", "pairwise_weight", "=", "1.0", ")", ":", "\n", "        ", "assert", "kernel_size", "%", "2", "==", "1", "\n", "self", ".", "pairwise_repr", ".", "append", "(", "'{}{}_{}_{}_{}'", ".", "format", "(", "'0d'", "if", "compat_type", "==", "'potts'", "else", "compat_type", ",", "\n", "'s'", "if", "spatial_filter", "else", "''", ",", "\n", "kernel_size", ",", "dilation", ",", "blur", ")", ")", "\n", "\n", "if", "compat_type", "==", "'potts'", ":", "\n", "            ", "pairwise_weight", "*=", "-", "1.0", "\n", "\n", "", "if", "compat_type", "==", "'potts'", "and", "(", "not", "spatial_filter", ")", "and", "(", "not", "self", ".", "fixed_weighting", ")", ":", "\n", "            ", "self", ".", "_use_pairwise_weights", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_use_pairwise_weights", ".", "append", "(", "False", ")", "\n", "", "self", ".", "pairwise_weights", ".", "append", "(", "nn", ".", "Parameter", "(", "th", ".", "tensor", "(", "pairwise_weight", ",", "dtype", "=", "th", ".", "float32", ")", ")", ")", "\n", "self", ".", "init_pairwise_weights", ".", "append", "(", "pairwise_weight", ")", "\n", "self", ".", "blur", ".", "append", "(", "blur", ")", "\n", "self", ".", "compat", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "if", "compat_type", "==", "'2d'", "\n", "else", "None", ")", "\n", "\n", "pad", "=", "int", "(", "kernel_size", "//", "2", ")", "*", "dilation", "\n", "\n", "if", "compat_type", "==", "'na'", ":", "\n", "            ", "messenger", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "kernel_size", ",", "padding", "=", "pad", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "", "elif", "compat_type", "==", "'4d'", ":", "\n", "            ", "messenger", "=", "pac", ".", "PacConv2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "kernel_size", ",", "padding", "=", "pad", ",", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "shared_filters", "=", "False", ",", "native_impl", "=", "self", ".", "native_impl", ",", "\n", "filler", "=", "(", "'crf_perturbed'", "if", "self", ".", "perturbed_init", "else", "'crf'", ")", ")", "\n", "", "elif", "spatial_filter", ":", "\n", "            ", "messenger", "=", "pac", ".", "PacConv2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "kernel_size", ",", "padding", "=", "pad", ",", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "shared_filters", "=", "True", ",", "native_impl", "=", "self", ".", "native_impl", ",", "\n", "filler", "=", "(", "'crf_perturbed'", "if", "self", ".", "perturbed_init", "else", "'crf'", ")", ")", "\n", "", "else", ":", "\n", "            ", "messenger", "=", "pac", ".", "PacConv2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "kernel_size", ",", "padding", "=", "pad", ",", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "shared_filters", "=", "True", ",", "native_impl", "=", "self", ".", "native_impl", ",", "\n", "filler", "=", "'crf_pool'", ")", "\n", "\n", "", "self", ".", "messengers", ".", "append", "(", "messenger", ")", "\n", "self", ".", "reset_parameters", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRF.num_pairwise_kernels": [[158, 160], ["len"], "methods", ["None"], ["", "def", "num_pairwise_kernels", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "messengers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRF.forward": [[161, 225], ["len", "range", "isinstance", "isinstance", "range", "torch.softmax", "torch.softmax", "range", "torch.softmax", "torch.softmax", "isinstance", "paccrf.PacCRF.messengers[].compute_kernel", "paccrf._ceil_pad_factor", "isinstance", "torch.log_softmax", "torch.log_softmax", "torch.avg_pool2d", "torch.avg_pool2d", "torch.interpolate", "torch.interpolate", "msg[].contiguous", "ValueError", "paccrf._ceil_pad_factor", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2d.compute_kernel", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf._ceil_pad_factor", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf._ceil_pad_factor"], ["", "def", "forward", "(", "self", ",", "unary", ",", "edge_feat", ",", "edge_kernel", "=", "None", ",", "logQ", "=", "None", ")", ":", "\n", "        ", "n_kernels", "=", "len", "(", "self", ".", "messengers", ")", "\n", "edge_kernel", "=", "[", "edge_kernel", "]", "*", "n_kernels", "if", "isinstance", "(", "edge_kernel", ",", "th", ".", "Tensor", ")", "else", "edge_kernel", "\n", "\n", "if", "edge_kernel", "is", "None", ":", "\n", "            ", "edge_kernel", "=", "[", "None", "]", "*", "n_kernels", "\n", "_shared", "=", "isinstance", "(", "edge_feat", ",", "th", ".", "Tensor", ")", "\n", "if", "_shared", ":", "\n", "                ", "edge_feat", "=", "{", "1", ":", "edge_feat", "}", "\n", "", "for", "i", "in", "range", "(", "n_kernels", ")", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "messengers", "[", "i", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "_shared", "and", "self", ".", "blur", "[", "i", "]", "in", "edge_feat", ":", "\n", "                    ", "feat", "=", "edge_feat", "[", "self", ".", "blur", "[", "i", "]", "]", "\n", "", "elif", "self", ".", "blur", "[", "i", "]", "==", "1", ":", "\n", "                    ", "feat", "=", "edge_feat", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "feat", "=", "edge_feat", "[", "1", "]", "if", "_shared", "else", "edge_feat", "[", "i", "]", "\n", "pad", "=", "_ceil_pad_factor", "(", "feat", ".", "shape", "[", "2", ":", "]", ",", "self", ".", "blur", "[", "i", "]", ")", "\n", "feat", "=", "F", ".", "avg_pool2d", "(", "feat", ",", "\n", "kernel_size", "=", "self", ".", "blur", "[", "i", "]", ",", "\n", "padding", "=", "pad", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "if", "_shared", ":", "\n", "                        ", "edge_feat", "[", "self", ".", "blur", "[", "i", "]", "]", "=", "feat", "\n", "", "", "edge_kernel", "[", "i", "]", ",", "_", "=", "self", ".", "messengers", "[", "i", "]", ".", "compute_kernel", "(", "feat", ")", "\n", "del", "feat", "\n", "", "del", "edge_feat", "\n", "\n", "", "if", "logQ", "is", "None", ":", "\n", "            ", "logQ", "=", "unary", "\n", "", "for", "step", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "            ", "Q", "=", "F", ".", "softmax", "(", "logQ", ",", "dim", "=", "1", ")", "\n", "Q_blur", "=", "{", "1", ":", "Q", "}", "\n", "logQ", "=", "unary", "*", "self", ".", "unary_weight", "\n", "for", "i", "in", "range", "(", "n_kernels", ")", ":", "\n", "                ", "pad", "=", "_ceil_pad_factor", "(", "Q", ".", "shape", "[", "2", ":", "]", ",", "self", ".", "blur", "[", "i", "]", ")", "\n", "if", "self", ".", "blur", "[", "i", "]", "not", "in", "Q_blur", ":", "\n", "                    ", "Q_blur", "[", "self", ".", "blur", "[", "i", "]", "]", "=", "F", ".", "avg_pool2d", "(", "Q", ",", "\n", "kernel_size", "=", "self", ".", "blur", "[", "i", "]", ",", "\n", "padding", "=", "pad", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "", "if", "isinstance", "(", "self", ".", "messengers", "[", "i", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "msg", "=", "self", ".", "messengers", "[", "i", "]", "(", "Q_blur", "[", "self", ".", "blur", "[", "i", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "msg", "=", "self", ".", "messengers", "[", "i", "]", "(", "Q_blur", "[", "self", ".", "blur", "[", "i", "]", "]", ",", "None", ",", "edge_kernel", "[", "i", "]", ")", "\n", "", "if", "self", ".", "compat", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "msg", "=", "self", ".", "compat", "[", "i", "]", "(", "msg", ")", "\n", "", "if", "self", ".", "blur", "[", "i", "]", ">", "1", ":", "\n", "                    ", "msg", "=", "F", ".", "interpolate", "(", "msg", ",", "scale_factor", "=", "self", ".", "blur", "[", "i", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "msg", "=", "msg", "[", ":", ",", ":", ",", "pad", "[", "0", "]", ":", "pad", "[", "0", "]", "+", "unary", ".", "shape", "[", "2", "]", ",", "pad", "[", "1", "]", ":", "pad", "[", "1", "]", "+", "unary", ".", "shape", "[", "3", "]", "]", ".", "contiguous", "(", ")", "\n", "", "pw", "=", "self", ".", "pairwise_weights", "[", "i", "]", "if", "self", ".", "_use_pairwise_weights", "[", "i", "]", "else", "self", ".", "init_pairwise_weights", "[", "i", "]", "\n", "logQ", "=", "logQ", "-", "msg", "*", "pw", "\n", "\n", "", "", "if", "self", ".", "final_output", "==", "'softmax'", ":", "\n", "            ", "out", "=", "F", ".", "softmax", "(", "logQ", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "final_output", "==", "'log_softmax'", ":", "\n", "            ", "out", "=", "F", ".", "log_softmax", "(", "logQ", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "final_output", "==", "'log_Q'", ":", "\n", "            ", "out", "=", "logQ", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown value for final_output: {}'", ".", "format", "(", "self", ".", "final_output", ")", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.__init__": [[228, 241], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "paccrf.PacCRFLoose.reset_parameters", "paccrf.PacCRFLoose.steps.append", "paccrf.PacCRF"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "num_steps", ",", "final_output", "=", "'log_Q'", ",", "perturbed_init", "=", "True", ",", "native_impl", "=", "False", ",", "\n", "fixed_weighting", "=", "False", ",", "unary_weight", "=", "1.0", ",", "pairwise_kernels", "=", "None", ")", ":", "\n", "        ", "super", "(", "PacCRFLoose", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "final_output", "=", "final_output", "# 'log_softmax', 'softmax', 'log_Q'", "\n", "\n", "self", ".", "steps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "self", ".", "steps", ".", "append", "(", "PacCRF", "(", "channels", ",", "1", ",", "'log_Q'", ",", "perturbed_init", ",", "native_impl", ",", "fixed_weighting", ",", "unary_weight", ",", "\n", "pairwise_kernels", ")", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.reset_parameters": [[242, 245], ["range", "paccrf.PacCRFLoose.steps[].reset_parameters"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "            ", "self", ".", "steps", "[", "i", "]", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.extra_repr": [[246, 251], ["s.format"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'categories={channels}'", "\n", "', num_steps={num_steps}'", "\n", "', final_output={final_output}'", ")", "\n", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.add_pairwise_kernel": [[252, 256], ["range", "paccrf.PacCRFLoose.steps[].add_pairwise_kernel"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.add_pairwise_kernel"], ["", "def", "add_pairwise_kernel", "(", "self", ",", "kernel_size", "=", "3", ",", "dilation", "=", "1", ",", "blur", "=", "1", ",", "compat_type", "=", "'4d'", ",", "spatial_filter", "=", "True", ",", "\n", "pairwise_weight", "=", "1.0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "            ", "self", ".", "steps", "[", "i", "]", ".", "add_pairwise_kernel", "(", "kernel_size", ",", "dilation", ",", "blur", ",", "compat_type", ",", "spatial_filter", ",", "pairwise_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.num_pairwise_kernels": [[257, 259], ["paccrf.PacCRFLoose.steps[].num_pairwise_kernels"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.num_pairwise_kernels"], ["", "", "def", "num_pairwise_kernels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "steps", "[", "0", "]", ".", "num_pairwise_kernels", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.forward": [[260, 302], ["paccrf.PacCRFLoose.num_pairwise_kernels", "isinstance", "isinstance", "range", "step", "torch.softmax", "torch.softmax", "paccrf.PacCRFLoose.steps[].messengers[].compute_kernel", "torch.log_softmax", "torch.log_softmax", "ValueError", "paccrf._ceil_pad_factor", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.PacCRFLoose.num_pairwise_kernels", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.pac.PacPool2d.compute_kernel", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf._ceil_pad_factor"], ["", "def", "forward", "(", "self", ",", "unary", ",", "edge_feat", ",", "edge_kernel", "=", "None", ")", ":", "\n", "        ", "n_kernels", "=", "self", ".", "num_pairwise_kernels", "(", ")", "\n", "edge_kernel", "=", "[", "edge_kernel", "]", "*", "n_kernels", "if", "isinstance", "(", "edge_kernel", ",", "th", ".", "Tensor", ")", "else", "edge_kernel", "\n", "blurs", "=", "self", ".", "steps", "[", "0", "]", ".", "blur", "\n", "\n", "if", "edge_kernel", "is", "None", ":", "\n", "            ", "edge_kernel", "=", "[", "None", "]", "*", "n_kernels", "\n", "_shared", "=", "isinstance", "(", "edge_feat", ",", "th", ".", "Tensor", ")", "\n", "if", "_shared", ":", "\n", "                ", "edge_feat", "=", "{", "1", ":", "edge_feat", "}", "\n", "", "for", "i", "in", "range", "(", "n_kernels", ")", ":", "\n", "                ", "if", "_shared", "and", "blurs", "[", "i", "]", "in", "edge_feat", ":", "\n", "                    ", "feat", "=", "edge_feat", "[", "blurs", "[", "i", "]", "]", "\n", "", "elif", "blurs", "[", "i", "]", "==", "1", ":", "\n", "                    ", "feat", "=", "edge_feat", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "feat", "=", "edge_feat", "[", "1", "]", "if", "_shared", "else", "edge_feat", "[", "i", "]", "\n", "pad", "=", "_ceil_pad_factor", "(", "feat", ".", "shape", "[", "2", ":", "]", ",", "blurs", "[", "i", "]", ")", "\n", "feat", "=", "F", ".", "avg_pool2d", "(", "feat", ",", "\n", "kernel_size", "=", "blurs", "[", "i", "]", ",", "\n", "padding", "=", "pad", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "if", "_shared", ":", "\n", "                        ", "edge_feat", "[", "blurs", "[", "i", "]", "]", "=", "feat", "\n", "", "", "edge_kernel", "[", "i", "]", ",", "_", "=", "self", ".", "steps", "[", "0", "]", ".", "messengers", "[", "i", "]", ".", "compute_kernel", "(", "feat", ")", "\n", "del", "feat", "\n", "", "del", "edge_feat", "\n", "\n", "", "logQ", "=", "unary", "\n", "for", "step", "in", "self", ".", "steps", ":", "\n", "            ", "logQ", "=", "step", "(", "unary", ",", "None", ",", "edge_kernel", ",", "logQ", ")", "\n", "\n", "", "if", "self", ".", "final_output", "==", "'softmax'", ":", "\n", "            ", "out", "=", "F", ".", "softmax", "(", "logQ", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "final_output", "==", "'log_softmax'", ":", "\n", "            ", "out", "=", "F", ".", "log_softmax", "(", "logQ", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "final_output", "==", "'log_Q'", ":", "\n", "            ", "out", "=", "logQ", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown value for final_output: {}'", ".", "format", "(", "self", ".", "final_output", ")", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.create_position_feats": [[13, 24], ["numpy.array", "torch.from_numpy", "torch.stack", "range", "numpy.meshgrid", "mesh.to.to", "isinstance", "torch.tensor", "th.tensor.view"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["def", "create_position_feats", "(", "shape", ",", "scales", "=", "None", ",", "bs", "=", "1", ",", "device", "=", "None", ")", ":", "\n", "    ", "cord_range", "=", "[", "range", "(", "s", ")", "for", "s", "in", "shape", "]", "\n", "mesh", "=", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "*", "cord_range", ",", "indexing", "=", "'ij'", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mesh", "=", "th", ".", "from_numpy", "(", "mesh", ")", "\n", "if", "device", "is", "not", "None", ":", "\n", "        ", "mesh", "=", "mesh", ".", "to", "(", "device", ")", "\n", "", "if", "scales", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "scales", ",", "th", ".", "Tensor", ")", ":", "\n", "            ", "scales", "=", "th", ".", "tensor", "(", "scales", ",", "dtype", "=", "th", ".", "float32", ",", "device", "=", "device", ")", "\n", "", "mesh", "=", "mesh", "*", "(", "1.0", "/", "scales", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "", "return", "th", ".", "stack", "(", "bs", "*", "[", "mesh", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.create_YXRGB": [[26, 39], ["img.view.view", "paccrf.create_position_feats", "torch.cat", "isinstance", "torch.tensor", "th.tensor.view"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf.create_position_feats"], ["", "def", "create_YXRGB", "(", "img", ",", "yx_scale", "=", "None", ",", "rgb_scale", "=", "None", ",", "scales", "=", "None", ")", ":", "\n", "    ", "img", "=", "img", ".", "view", "(", "-", "1", ",", "*", "img", ".", "shape", "[", "-", "3", ":", "]", ")", "\n", "if", "scales", "is", "not", "None", ":", "\n", "        ", "assert", "yx_scale", "==", "None", "and", "rgb_scale", "==", "None", "\n", "yx_scale", "=", "scales", "[", ":", "2", "]", "\n", "rgb_scale", "=", "scales", "[", "2", ":", "]", "\n", "", "mesh", "=", "create_position_feats", "(", "img", ".", "shape", "[", "-", "2", ":", "]", ",", "yx_scale", ",", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "device", ")", "\n", "if", "rgb_scale", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "rgb_scale", ",", "th", ".", "Tensor", ")", ":", "\n", "            ", "rgb_scale", "=", "th", ".", "tensor", "(", "rgb_scale", ",", "dtype", "=", "th", ".", "float32", ",", "device", "=", "img", ".", "device", ")", "\n", "", "img", "=", "img", "*", "(", "1.0", "/", "rgb_scale", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "", "feats", "=", "th", ".", "cat", "(", "[", "mesh", ",", "img", "]", ",", "dim", "=", "1", ")", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.pacnet.paccrf._ceil_pad_factor": [[41, 45], ["tuple", "tuple"], "function", ["None"], ["", "def", "_ceil_pad_factor", "(", "sizes", ",", "factor", ")", ":", "\n", "    ", "offs", "=", "tuple", "(", "(", "factor", "-", "sz", "%", "factor", ")", "%", "factor", "for", "sz", "in", "sizes", ")", "\n", "pad", "=", "tuple", "(", "(", "off", "+", "1", ")", "//", "2", "for", "off", "in", "offs", ")", "\n", "return", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm1d.__init__": [[6, 18], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "switchable_norm.SwitchNorm1d.register_buffer", "switchable_norm.SwitchNorm1d.register_buffer", "switchable_norm.SwitchNorm1d.reset_parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.997", ",", "using_moving_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SwitchNorm1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "using_moving_average", "=", "using_moving_average", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_features", ")", ")", "\n", "self", ".", "mean_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ")", ")", "\n", "self", ".", "var_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "1", ",", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "1", ",", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm1d.reset_parameters": [[19, 24], ["switchable_norm.SwitchNorm1d.running_mean.zero_", "switchable_norm.SwitchNorm1d.running_var.zero_", "switchable_norm.SwitchNorm1d.weight.data.fill_", "switchable_norm.SwitchNorm1d.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "zero_", "(", ")", "\n", "self", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm1d._check_input_dim": [[25, 29], ["input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm1d.forward": [[30, 59], ["switchable_norm.SwitchNorm1d._check_input_dim", "x.mean", "x.var", "torch.Softmax", "torch.Softmax", "torch.Softmax.", "torch.Softmax.", "x.mean", "x.var", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "switchable_norm.SwitchNorm1d.running_mean.mul_", "switchable_norm.SwitchNorm1d.running_mean.add_", "switchable_norm.SwitchNorm1d.running_var.mul_", "switchable_norm.SwitchNorm1d.running_var.add_", "switchable_norm.SwitchNorm1d.running_mean.add_", "switchable_norm.SwitchNorm1d.running_var.add_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.BatchNorm3d._check_input_dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "x", ")", "\n", "mean_ln", "=", "x", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "var_ln", "=", "x", ".", "var", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "mean_bn", "=", "x", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "var_bn", "=", "x", ".", "var", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "if", "self", ".", "using_moving_average", ":", "\n", "                ", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_mean", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "mean_bn", ".", "data", ")", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_var", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "var_bn", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "running_mean", ".", "add_", "(", "mean_bn", ".", "data", ")", "\n", "self", ".", "running_var", ".", "add_", "(", "mean_bn", ".", "data", "**", "2", "+", "var_bn", ".", "data", ")", "\n", "", "", "else", ":", "\n", "            ", "mean_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_mean", ")", "\n", "var_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_var", ")", "\n", "\n", "", "softmax", "=", "nn", ".", "Softmax", "(", "0", ")", "\n", "mean_weight", "=", "softmax", "(", "self", ".", "mean_weight", ")", "\n", "var_weight", "=", "softmax", "(", "self", ".", "var_weight", ")", "\n", "\n", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_ln", "+", "mean_weight", "[", "1", "]", "*", "mean_bn", "\n", "var", "=", "var_weight", "[", "0", "]", "*", "var_ln", "+", "var_weight", "[", "1", "]", "*", "var_bn", "\n", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "(", "var", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "\n", "return", "x", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm2d.__init__": [[61, 82], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "switchable_norm.SwitchNorm2d.reset_parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "switchable_norm.SwitchNorm2d.register_buffer", "switchable_norm.SwitchNorm2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.997", ",", "using_moving_average", "=", "True", ",", "using_bn", "=", "True", ",", "\n", "last_gamma", "=", "False", ")", ":", "\n", "        ", "super", "(", "SwitchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "using_moving_average", "=", "using_moving_average", "\n", "self", ".", "using_bn", "=", "using_bn", "\n", "self", ".", "last_gamma", "=", "last_gamma", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_features", ",", "1", ",", "1", ")", ")", "\n", "if", "self", ".", "using_bn", ":", "\n", "            ", "self", ".", "mean_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ")", ")", "\n", "self", ".", "var_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ")", ")", "\n", "self", ".", "var_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ")", ")", "\n", "", "if", "self", ".", "using_bn", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "1", ",", "num_features", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "1", ",", "num_features", ",", "1", ")", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm2d.reset_parameters": [[83, 92], ["switchable_norm.SwitchNorm2d.bias.data.zero_", "switchable_norm.SwitchNorm2d.running_mean.zero_", "switchable_norm.SwitchNorm2d.running_var.zero_", "switchable_norm.SwitchNorm2d.weight.data.fill_", "switchable_norm.SwitchNorm2d.weight.data.fill_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "using_bn", ":", "\n", "            ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "zero_", "(", ")", "\n", "", "if", "self", ".", "last_gamma", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm2d._check_input_dim": [[93, 97], ["input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm2d.forward": [[98, 139], ["switchable_norm.SwitchNorm2d._check_input_dim", "x.view.view.size", "x.view.view.view", "x.view.view.mean", "x.view.view.var", "x.view.mean.mean", "torch.Softmax", "torch.Softmax", "torch.Softmax.", "torch.Softmax.", "x.view.view.view", "temp.mean", "x.view.mean.mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "temp.mean", "switchable_norm.SwitchNorm2d.running_mean.mul_", "switchable_norm.SwitchNorm2d.running_mean.add_", "switchable_norm.SwitchNorm2d.running_var.mul_", "switchable_norm.SwitchNorm2d.running_var.add_", "switchable_norm.SwitchNorm2d.running_mean.add_", "switchable_norm.SwitchNorm2d.running_var.add_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.BatchNorm3d._check_input_dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "x", ")", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "mean_in", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "var_in", "=", "x", ".", "var", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "mean_ln", "=", "mean_in", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "temp", "=", "var_in", "+", "mean_in", "**", "2", "\n", "var_ln", "=", "temp", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "-", "mean_ln", "**", "2", "\n", "\n", "if", "self", ".", "using_bn", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "mean_bn", "=", "mean_in", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "var_bn", "=", "temp", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "-", "mean_bn", "**", "2", "\n", "if", "self", ".", "using_moving_average", ":", "\n", "                    ", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_mean", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "mean_bn", ".", "data", ")", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_var", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "var_bn", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "running_mean", ".", "add_", "(", "mean_bn", ".", "data", ")", "\n", "self", ".", "running_var", ".", "add_", "(", "mean_bn", ".", "data", "**", "2", "+", "var_bn", ".", "data", ")", "\n", "", "", "else", ":", "\n", "                ", "mean_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_mean", ")", "\n", "var_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_var", ")", "\n", "\n", "", "", "softmax", "=", "nn", ".", "Softmax", "(", "0", ")", "\n", "mean_weight", "=", "softmax", "(", "self", ".", "mean_weight", ")", "\n", "var_weight", "=", "softmax", "(", "self", ".", "var_weight", ")", "\n", "\n", "if", "self", ".", "using_bn", ":", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_in", "+", "mean_weight", "[", "1", "]", "*", "mean_ln", "+", "mean_weight", "[", "2", "]", "*", "mean_bn", "\n", "var", "=", "var_weight", "[", "0", "]", "*", "var_in", "+", "var_weight", "[", "1", "]", "*", "var_ln", "+", "var_weight", "[", "2", "]", "*", "var_bn", "\n", "", "else", ":", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_in", "+", "mean_weight", "[", "1", "]", "*", "mean_ln", "\n", "var", "=", "var_weight", "[", "0", "]", "*", "var_in", "+", "var_weight", "[", "1", "]", "*", "var_ln", "\n", "\n", "", "x", "=", "(", "x", "-", "mean", ")", "/", "(", "var", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "return", "x", "*", "self", ".", "weight", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm3d.__init__": [[142, 163], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "switchable_norm.SwitchNorm3d.reset_parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "switchable_norm.SwitchNorm3d.register_buffer", "switchable_norm.SwitchNorm3d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.997", ",", "using_moving_average", "=", "True", ",", "using_bn", "=", "True", ",", "\n", "last_gamma", "=", "False", ")", ":", "\n", "        ", "super", "(", "SwitchNorm3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "using_moving_average", "=", "using_moving_average", "\n", "self", ".", "using_bn", "=", "using_bn", "\n", "self", ".", "last_gamma", "=", "last_gamma", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "num_features", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_features", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "if", "self", ".", "using_bn", ":", "\n", "            ", "self", ".", "mean_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ")", ")", "\n", "self", ".", "var_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ")", ")", "\n", "self", ".", "var_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ")", ")", "\n", "", "if", "self", ".", "using_bn", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "1", ",", "num_features", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "1", ",", "num_features", ",", "1", ")", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm3d.reset_parameters": [[164, 173], ["switchable_norm.SwitchNorm3d.bias.data.zero_", "switchable_norm.SwitchNorm3d.running_mean.zero_", "switchable_norm.SwitchNorm3d.running_var.zero_", "switchable_norm.SwitchNorm3d.weight.data.fill_", "switchable_norm.SwitchNorm3d.weight.data.fill_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "using_bn", ":", "\n", "            ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "zero_", "(", ")", "\n", "", "if", "self", ".", "last_gamma", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm3d._check_input_dim": [[174, 178], ["input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.switchablenorms.switchable_norm.SwitchNorm3d.forward": [[179, 220], ["switchable_norm.SwitchNorm3d._check_input_dim", "x.view.view.size", "x.view.view.view", "x.view.view.mean", "x.view.view.var", "x.view.mean.mean", "torch.Softmax", "torch.Softmax", "torch.Softmax.", "torch.Softmax.", "x.view.view.view", "temp.mean", "x.view.mean.mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "temp.mean", "switchable_norm.SwitchNorm3d.running_mean.mul_", "switchable_norm.SwitchNorm3d.running_mean.add_", "switchable_norm.SwitchNorm3d.running_var.mul_", "switchable_norm.SwitchNorm3d.running_var.add_", "switchable_norm.SwitchNorm3d.running_mean.add_", "switchable_norm.SwitchNorm3d.running_var.add_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.BatchNorm3d._check_input_dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "x", ")", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "mean_in", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "var_in", "=", "x", ".", "var", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "mean_ln", "=", "mean_in", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "temp", "=", "var_in", "+", "mean_in", "**", "2", "\n", "var_ln", "=", "temp", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "-", "mean_ln", "**", "2", "\n", "\n", "if", "self", ".", "using_bn", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "mean_bn", "=", "mean_in", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "var_bn", "=", "temp", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "-", "mean_bn", "**", "2", "\n", "if", "self", ".", "using_moving_average", ":", "\n", "                    ", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_mean", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "mean_bn", ".", "data", ")", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_var", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "var_bn", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "running_mean", ".", "add_", "(", "mean_bn", ".", "data", ")", "\n", "self", ".", "running_var", ".", "add_", "(", "mean_bn", ".", "data", "**", "2", "+", "var_bn", ".", "data", ")", "\n", "", "", "else", ":", "\n", "                ", "mean_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_mean", ")", "\n", "var_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_var", ")", "\n", "\n", "", "", "softmax", "=", "nn", ".", "Softmax", "(", "0", ")", "\n", "mean_weight", "=", "softmax", "(", "self", ".", "mean_weight", ")", "\n", "var_weight", "=", "softmax", "(", "self", ".", "var_weight", ")", "\n", "\n", "if", "self", ".", "using_bn", ":", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_in", "+", "mean_weight", "[", "1", "]", "*", "mean_ln", "+", "mean_weight", "[", "2", "]", "*", "mean_bn", "\n", "var", "=", "var_weight", "[", "0", "]", "*", "var_in", "+", "var_weight", "[", "1", "]", "*", "var_ln", "+", "var_weight", "[", "2", "]", "*", "var_bn", "\n", "", "else", ":", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_in", "+", "mean_weight", "[", "1", "]", "*", "mean_ln", "\n", "var", "=", "var_weight", "[", "0", "]", "*", "var_in", "+", "var_weight", "[", "1", "]", "*", "var_ln", "\n", "\n", "", "x", "=", "(", "x", "-", "mean", ")", "/", "(", "var", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "D", ",", "H", ",", "W", ")", "\n", "return", "x", "*", "self", ".", "weight", "+", "self", ".", "bias", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.dcn.test_modulated.example_dconv": [[17, 27], ["torch.randn().cuda", "lib.modules.ModulatedDeformConvPack().cuda", "ModulatedDeformConvPack().cuda.", "dcn.new", "output.new.data.uniform_", "error.backward", "print", "torch.randn", "lib.modules.ModulatedDeformConvPack", "dcn.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["def", "example_dconv", "(", ")", ":", "\n", "    ", "input", "=", "torch", ".", "randn", "(", "2", ",", "64", ",", "128", ",", "128", ")", ".", "cuda", "(", ")", "\n", "# wrap all things (offset and mask) in DCN", "\n", "dcn", "=", "ModulatedDeformConvPack", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "deformable_groups", "=", "2", ",", "no_bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "output", "=", "dcn", "(", "input", ")", "\n", "targert", "=", "output", ".", "new", "(", "*", "output", ".", "size", "(", ")", ")", "\n", "targert", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "error", "=", "(", "targert", "-", "output", ")", ".", "mean", "(", ")", "\n", "error", ".", "backward", "(", ")", "\n", "print", "(", "output", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.dcn.test_modulated.example_dpooling": [[28, 69], ["torch.randn().cuda", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.cat", "torch.randn().cuda", "lib.modules.DeformRoIPooling().cuda", "lib.modules.DeformRoIPooling().cuda", "DeformRoIPooling().cuda.", "DeformRoIPooling().cuda.", "print", "print", "pooling.new", "out.new.data.uniform_", "dpooling.new", "dout.new.data.uniform_", "e.backward", "e.backward", "torch.randn", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randn", "lib.modules.DeformRoIPooling", "lib.modules.DeformRoIPooling", "pooling.size", "dpooling.size", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "example_dpooling", "(", ")", ":", "\n", "    ", "input", "=", "torch", ".", "randn", "(", "2", ",", "32", ",", "64", ",", "64", ")", ".", "cuda", "(", ")", "\n", "batch_inds", "=", "torch", ".", "randint", "(", "2", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "y", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "w", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "h", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "(", "batch_inds", ",", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", ")", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "randn", "(", "20", ",", "2", ",", "7", ",", "7", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "offset", ".", "requires_grad", "=", "True", "\n", "\n", "# normal roi_align", "\n", "pooling", "=", "DeformRoIPooling", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "32", ",", "\n", "no_trans", "=", "True", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.1", ")", ".", "cuda", "(", ")", "\n", "\n", "# deformable pooling", "\n", "dpooling", "=", "DeformRoIPooling", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "32", ",", "\n", "no_trans", "=", "False", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.1", ")", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "pooling", "(", "input", ",", "rois", ",", "offset", ")", "\n", "dout", "=", "dpooling", "(", "input", ",", "rois", ",", "offset", ")", "\n", "print", "(", "out", ".", "shape", ")", "\n", "print", "(", "dout", ".", "shape", ")", "\n", "\n", "target_out", "=", "out", ".", "new", "(", "*", "out", ".", "size", "(", ")", ")", "\n", "target_out", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "target_dout", "=", "dout", ".", "new", "(", "*", "dout", ".", "size", "(", ")", ")", "\n", "target_dout", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "e", "=", "(", "target_out", "-", "out", ")", ".", "mean", "(", ")", "\n", "e", ".", "backward", "(", ")", "\n", "e", "=", "(", "target_dout", "-", "dout", ")", ".", "mean", "(", ")", "\n", "e", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.dcn.test_modulated.example_mdpooling": [[70, 96], ["torch.randn().cuda", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.randint().cuda().float", "torch.cat", "ModulatedDeformRoIPoolingPack().cuda", "range", "ModulatedDeformRoIPoolingPack().cuda.", "dpooling.new", "dout.new.data.uniform_", "error.backward", "print", "torch.randn", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "ModulatedDeformRoIPoolingPack", "dpooling.size", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "example_mdpooling", "(", ")", ":", "\n", "    ", "from", "lib", ".", "modules", "import", "ModulatedDeformRoIPoolingPack", "\n", "input", "=", "torch", ".", "randn", "(", "2", ",", "32", ",", "64", ",", "64", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "batch_inds", "=", "torch", ".", "randint", "(", "2", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "x", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "y", "=", "torch", ".", "randint", "(", "256", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "w", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "h", "=", "torch", ".", "randint", "(", "64", ",", "(", "20", ",", "1", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "(", "batch_inds", ",", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# mdformable pooling (V2)", "\n", "dpooling", "=", "ModulatedDeformRoIPoolingPack", "(", "spatial_scale", "=", "1.0", "/", "4", ",", "\n", "pooled_size", "=", "7", ",", "\n", "output_dim", "=", "32", ",", "\n", "no_trans", "=", "False", ",", "\n", "group_size", "=", "1", ",", "\n", "trans_std", "=", "0.1", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "dout", "=", "dpooling", "(", "input", ",", "rois", ")", "\n", "target", "=", "dout", ".", "new", "(", "*", "dout", ".", "size", "(", ")", ")", "\n", "target", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "error", "=", "(", "target", "-", "dout", ")", ".", "mean", "(", ")", "\n", "error", ".", "backward", "(", ")", "\n", "print", "(", "dout", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.deform_conv.DeformConvFunction.__init__": [[28, 35], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", "=", "1", ",", "im2col_step", "=", "64", ")", ":", "\n", "        ", "super", "(", "DeformConvFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "im2col_step", "=", "im2col_step", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.deform_conv.DeformConvFunction.forward": [[36, 61], ["lib.extensions.dcn._ext.deform_conv.DeformConvFunction.save_for_backward", "input.new", "input.new", "input.new", "isinstance", "min", "lib.extensions.dcn._ext.deform_conv.deform_conv_forward_cuda", "lib.extensions.dcn._ext.deform_conv.DeformConvFunction._output_size", "weight.size", "weight.size", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.deform_conv.DeformConvFunction._output_size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "weight", ")", ":", "\n", "        ", "self", ".", "save_for_backward", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "output", "=", "input", ".", "new", "(", "*", "self", ".", "_output_size", "(", "input", ",", "weight", ")", ")", "\n", "\n", "self", ".", "bufs_", "=", "[", "input", ".", "new", "(", ")", ",", "input", ".", "new", "(", ")", "]", "# columns, ones", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "input", ",", "torch", ".", "autograd", ".", "Variable", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "isinstance", "(", "input", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "", "cur_im2col_step", "=", "min", "(", "self", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "deform_conv", ".", "deform_conv_forward_cuda", "(", "\n", "input", ",", "weight", ",", "offset", ",", "output", ",", "self", ".", "bufs_", "[", "0", "]", ",", "self", ".", "bufs_", "[", "1", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "weight", ".", "size", "(", "2", ")", ",", "self", ".", "stride", "[", "1", "]", ",", "self", ".", "stride", "[", "0", "]", ",", "\n", "self", ".", "padding", "[", "1", "]", ",", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "dilation", "[", "1", "]", ",", "\n", "self", ".", "dilation", "[", "0", "]", ",", "self", ".", "deformable_groups", ",", "cur_im2col_step", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.deform_conv.DeformConvFunction.backward": [[62, 101], ["isinstance", "min", "input.new().zero_", "offset.new().zero_", "lib.extensions.dcn._ext.deform_conv.deform_conv_backward_input_cuda", "weight.new().zero_", "lib.extensions.dcn._ext.deform_conv.deform_conv_backward_parameters_cuda", "isinstance", "isinstance", "weight.size", "weight.size", "weight.size", "weight.size", "input.new", "offset.new", "weight.new", "input.size", "offset.size", "weight.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "offset", ",", "weight", "=", "self", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "grad_offset", "=", "grad_weight", "=", "None", "\n", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "grad_output", ",", "torch", ".", "autograd", ".", "Variable", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "grad_output", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "isinstance", "(", "grad_output", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "", "cur_im2col_step", "=", "min", "(", "self", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "\n", "if", "self", ".", "needs_input_grad", "[", "0", "]", "or", "self", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "grad_input", "=", "input", ".", "new", "(", "*", "input", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_offset", "=", "offset", ".", "new", "(", "*", "offset", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "deform_conv", ".", "deform_conv_backward_input_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "grad_input", ",", "\n", "grad_offset", ",", "weight", ",", "self", ".", "bufs_", "[", "0", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "self", ".", "stride", "[", "1", "]", ",", "self", ".", "stride", "[", "0", "]", ",", "\n", "self", ".", "padding", "[", "1", "]", ",", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "dilation", "[", "1", "]", ",", "\n", "self", ".", "dilation", "[", "0", "]", ",", "self", ".", "deformable_groups", ",", "cur_im2col_step", ")", "\n", "\n", "\n", "", "if", "self", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_weight", "=", "weight", ".", "new", "(", "*", "weight", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "deform_conv", ".", "deform_conv_backward_parameters_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "\n", "grad_weight", ",", "self", ".", "bufs_", "[", "0", "]", ",", "self", ".", "bufs_", "[", "1", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "self", ".", "stride", "[", "1", "]", ",", "self", ".", "stride", "[", "0", "]", ",", "\n", "self", ".", "padding", "[", "1", "]", ",", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "dilation", "[", "1", "]", ",", "\n", "self", ".", "dilation", "[", "0", "]", ",", "self", ".", "deformable_groups", ",", "1", ",", "cur_im2col_step", ")", "\n", "\n", "", "", "return", "grad_input", ",", "grad_offset", ",", "grad_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.deform_conv.DeformConvFunction._output_size": [[102, 117], ["weight.size", "range", "input.size", "input.size", "all", "ValueError", "input.dim", "map", "weight.size", "map"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "_output_size", "(", "self", ",", "input", ",", "weight", ")", ":", "\n", "        ", "channels", "=", "weight", ".", "size", "(", "0", ")", "\n", "\n", "output_size", "=", "(", "input", ".", "size", "(", "0", ")", ",", "channels", ")", "\n", "for", "d", "in", "range", "(", "input", ".", "dim", "(", ")", "-", "2", ")", ":", "\n", "            ", "in_size", "=", "input", ".", "size", "(", "d", "+", "2", ")", "\n", "pad", "=", "self", ".", "padding", "[", "d", "]", "\n", "kernel", "=", "self", ".", "dilation", "[", "d", "]", "*", "(", "weight", ".", "size", "(", "d", "+", "2", ")", "-", "1", ")", "+", "1", "\n", "stride", "=", "self", ".", "stride", "[", "d", "]", "\n", "output_size", "+=", "(", "(", "in_size", "+", "(", "2", "*", "pad", ")", "-", "kernel", ")", "//", "stride", "+", "1", ",", ")", "\n", "", "if", "not", "all", "(", "map", "(", "lambda", "s", ":", "s", ">", "0", ",", "output_size", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"convolution input is too small (output would be {})\"", ".", "format", "(", "\n", "'x'", ".", "join", "(", "map", "(", "str", ",", "output_size", ")", ")", ")", ")", "\n", "", "return", "output_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.deform_conv.deform_conv_function": [[8, 25], ["deform_conv.DeformConvFunction", "DeformConvFunction.", "ValueError", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "input.dim", "input.dim"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["def", "deform_conv_function", "(", "input", ",", "\n", "offset", ",", "\n", "weight", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "deform_groups", "=", "1", ",", "\n", "im2col_step", "=", "64", ")", ":", "\n", "\n", "    ", "if", "input", "is", "not", "None", "and", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Expected 4D tensor as input, got {}D tensor instead.\"", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n", "", "f", "=", "DeformConvFunction", "(", "\n", "_pair", "(", "stride", ")", ",", "_pair", "(", "padding", ")", ",", "_pair", "(", "dilation", ")", ",", "deform_groups", ",", "im2col_step", ")", "\n", "return", "f", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.ModulatedDeformConvFunction.__init__": [[15, 21], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConvFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.ModulatedDeformConvFunction.forward": [[27, 44], ["input.new", "lib.extensions.dcn._ext.modulated_dcn.modulated_deform_conv_cuda_forward", "modulated_dcn_func.ModulatedDeformConvFunction.save_for_backward", "input.new", "input.new", "modulated_dcn_func.ModulatedDeformConvFunction._infer_shape"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.DeformRoIPoolingFunction._infer_shape"], ["", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", ":", "\n", "        ", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "weight", ".", "requires_grad", "or", "mask", ".", "requires_grad", "or", "offset", ".", "requires_grad", "or", "input", ".", "requires_grad", ":", "\n", "            ", "self", ".", "save_for_backward", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", "\n", "", "output", "=", "input", ".", "new", "(", "*", "self", ".", "_infer_shape", "(", "input", ",", "weight", ")", ")", "\n", "self", ".", "_bufs", "=", "[", "input", ".", "new", "(", ")", ",", "input", ".", "new", "(", ")", "]", "\n", "_backend", ".", "modulated_deform_conv_cuda_forward", "(", "input", ",", "weight", ",", "\n", "bias", ",", "self", ".", "_bufs", "[", "0", "]", ",", "\n", "offset", ",", "mask", ",", "\n", "output", ",", "self", ".", "_bufs", "[", "1", "]", ",", "\n", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "\n", "self", ".", "stride", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "dilation", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.ModulatedDeformConvFunction.backward": [[45, 68], ["input.new().zero_", "offset.new().zero_", "mask.new().zero_", "weight.new().zero_", "bias.new().zero_", "lib.extensions.dcn._ext.modulated_dcn.modulated_deform_conv_cuda_backward", "input.new", "offset.new", "mask.new", "weight.new", "bias.new", "input.size", "offset.size", "mask.size", "weight.size", "bias.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "self", ".", "saved_tensors", "\n", "grad_input", "=", "input", ".", "new", "(", "*", "input", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_offset", "=", "offset", ".", "new", "(", "*", "offset", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_mask", "=", "mask", ".", "new", "(", "*", "mask", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_weight", "=", "weight", ".", "new", "(", "*", "weight", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_bias", "=", "bias", ".", "new", "(", "*", "bias", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "_backend", ".", "modulated_deform_conv_cuda_backward", "(", "input", ",", "weight", ",", "\n", "bias", ",", "self", ".", "_bufs", "[", "0", "]", ",", "\n", "offset", ",", "mask", ",", "\n", "self", ".", "_bufs", "[", "1", "]", ",", "\n", "grad_input", ",", "grad_weight", ",", "\n", "grad_bias", ",", "grad_offset", ",", "\n", "grad_mask", ",", "grad_output", ",", "\n", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "\n", "self", ".", "stride", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "dilation", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "\n", "return", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.ModulatedDeformConvFunction._infer_shape": [[69, 78], ["input.size", "weight.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "_infer_shape", "(", "self", ",", "input", ",", "weight", ")", ":", "\n", "        ", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "channels_out", "=", "weight", ".", "size", "(", "0", ")", "\n", "height", ",", "width", "=", "input", ".", "shape", "[", "2", ":", "4", "]", "\n", "kernel_h", ",", "kernel_w", "=", "weight", ".", "shape", "[", "2", ":", "4", "]", "\n", "\n", "height_out", "=", "(", "height", "+", "2", "*", "self", ".", "padding", "-", "(", "self", ".", "dilation", "*", "(", "kernel_h", "-", "1", ")", "+", "1", ")", ")", "//", "self", ".", "stride", "+", "1", "\n", "width_out", "=", "(", "width", "+", "2", "*", "self", ".", "padding", "-", "(", "self", ".", "dilation", "*", "(", "kernel_w", "-", "1", ")", "+", "1", ")", ")", "//", "self", ".", "stride", "+", "1", "\n", "return", "(", "n", ",", "channels_out", ",", "height_out", ",", "width_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.DeformRoIPoolingFunction.__init__": [[82, 102], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "super", "(", "DeformRoIPoolingFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "pooled_size", "=", "pooled_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "no_trans", "=", "no_trans", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "part_size", "=", "pooled_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "self", ".", "sample_per_part", "=", "sample_per_part", "\n", "self", ".", "trans_std", "=", "trans_std", "\n", "\n", "assert", "self", ".", "trans_std", ">=", "0.0", "and", "self", ".", "trans_std", "<=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.DeformRoIPoolingFunction.forward": [[103, 124], ["data.new", "data.new", "lib.extensions.dcn._ext.modulated_dcn.deform_psroi_pooling_cuda_forward", "modulated_dcn_func.DeformRoIPoolingFunction._infer_shape", "modulated_dcn_func.DeformRoIPoolingFunction._infer_shape"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.DeformRoIPoolingFunction._infer_shape", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.DeformRoIPoolingFunction._infer_shape"], ["", "def", "forward", "(", "self", ",", "data", ",", "rois", ",", "offset", ")", ":", "\n", "        ", "if", "not", "data", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "output", "=", "data", ".", "new", "(", "*", "self", ".", "_infer_shape", "(", "data", ",", "rois", ")", ")", "\n", "output_count", "=", "data", ".", "new", "(", "*", "self", ".", "_infer_shape", "(", "data", ",", "rois", ")", ")", "\n", "_backend", ".", "deform_psroi_pooling_cuda_forward", "(", "data", ",", "rois", ",", "offset", ",", "\n", "output", ",", "output_count", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "output_dim", ",", "self", ".", "group_size", ",", "\n", "self", ".", "pooled_size", ",", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "\n", "# if data.requires_grad or rois.requires_grad or offset.requires_grad:", "\n", "#     self.save_for_backward(data, rois, offset, output_count)", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "rois", "=", "rois", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "output_count", "=", "output_count", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.DeformRoIPoolingFunction.backward": [[125, 153], ["data.new().zero_", "offset.new().zero_", "lib.extensions.dcn._ext.modulated_dcn.deform_psroi_pooling_cuda_backward", "torch.zeros().cuda", "data.new", "offset.new", "torch.zeros", "data.size", "offset.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# data, rois, offset, output_count = self.saved_tensors", "\n", "", "data", "=", "self", ".", "data", "\n", "rois", "=", "self", ".", "rois", "\n", "offset", "=", "self", ".", "offset", "\n", "output_count", "=", "self", ".", "output_count", "\n", "grad_input", "=", "data", ".", "new", "(", "*", "data", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_offset", "=", "offset", ".", "new", "(", "*", "offset", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "_backend", ".", "deform_psroi_pooling_cuda_backward", "(", "grad_output", ",", "\n", "data", ",", "\n", "rois", ",", "\n", "offset", ",", "\n", "output_count", ",", "\n", "grad_input", ",", "\n", "grad_offset", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "return", "grad_input", ",", "torch", ".", "zeros", "(", "rois", ".", "shape", ")", ".", "cuda", "(", ")", ",", "grad_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.modulated_dcn_func.DeformRoIPoolingFunction._infer_shape": [[154, 159], ["None"], "methods", ["None"], ["", "def", "_infer_shape", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "# _, c, h, w = data.shape[:4]", "\n", "        ", "c", "=", "data", ".", "shape", "[", "1", "]", "\n", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "return", "(", "n", ",", "self", ".", "output_dim", ",", "self", ".", "pooled_size", ",", "self", ".", "pooled_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.deform_conv.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], ["\n", "from", ".", "annotation", "import", "Annotation", ",", "AnnotationDet", "\n", "from", ".", "import", "datasets", "\n", "from", ".", "import", "decoder", "\n", "from", ".", "import", "network", "\n", "from", ".", "import", "optimize", "\n", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modulated_dcn.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], ["\n", "from", ".", "annotation", "import", "Annotation", ",", "AnnotationDet", "\n", "from", ".", "import", "datasets", "\n", "from", ".", "import", "decoder", "\n", "from", ".", "import", "network", "\n", "from", ".", "import", "optimize", "\n", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.deform_conv.DeformConv.__init__": [[11, 32], ["torch.nn.modules.module.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "deform_conv.DeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "deform_groups", "=", "1", ",", "\n", "im2col_step", "=", "64", ")", ":", "\n", "\n", "    ", "if", "input", "is", "not", "None", "and", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Expected 4D tensor as input, got {}D tensor instead.\"", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n", "", "f", "=", "DeformConvFunction", "(", "\n", "_pair", "(", "stride", ")", ",", "_pair", "(", "padding", ")", ",", "_pair", "(", "dilation", ")", ",", "deform_groups", ",", "im2col_step", ")", "\n", "return", "f", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "\n", "", "class", "DeformConvFunction", "(", "Function", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", "=", "1", ",", "im2col_step", "=", "64", ")", ":", "\n", "        ", "super", "(", "DeformConvFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.deform_conv.DeformConv.reset_parameters": [[33, 39], ["deform_conv.DeformConv.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "im2col_step", "=", "im2col_step", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "weight", ")", ":", "\n", "        ", "self", ".", "save_for_backward", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "output", "=", "input", ".", "new", "(", "*", "self", ".", "_output_size", "(", "input", ",", "weight", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.deform_conv.DeformConv.forward": [[40, 44], ["lib.extensions.dcn.functions.deform_conv_function"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.functions.deform_conv.deform_conv_function"], ["\n", "self", ".", "bufs_", "=", "[", "input", ".", "new", "(", ")", ",", "input", ".", "new", "(", ")", "]", "# columns, ones", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.ModulatedDeformConv.__init__": [[16, 33], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.Parameter", "torch.nn.Parameter", "modulated_dcn.ModulatedDeformConv.reset_parameters", "torch.Tensor", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ",", "no_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "no_bias", "=", "no_bias", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", ",", "*", "self", ".", "kernel_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "if", "self", ".", "no_bias", ":", "\n", "            ", "self", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.ModulatedDeformConv.reset_parameters": [[34, 41], ["modulated_dcn.ModulatedDeformConv.weight.data.uniform_", "modulated_dcn.ModulatedDeformConv.bias.data.zero_", "math.sqrt"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.ModulatedDeformConv.forward": [[42, 45], ["lib.extensions.dcn.functions.modulated_dcn_func.ModulatedDeformConvFunction", "lib.extensions.dcn.functions.modulated_dcn_func.ModulatedDeformConvFunction."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "mask", ")", ":", "\n", "        ", "func", "=", "ModulatedDeformConvFunction", "(", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "deformable_groups", ")", "\n", "return", "func", "(", "input", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.ModulatedDeformConvPack.__init__": [[49, 62], ["modulated_dcn.ModulatedDeformConv.__init__", "torch.nn.Conv2d", "modulated_dcn.ModulatedDeformConvPack.init_offset"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.ModulatedDeformConvPack.init_offset"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "\n", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ",", "no_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConvPack", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", ",", "no_bias", ")", "\n", "\n", "self", ".", "conv_offset_mask", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "3", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "(", "self", ".", "stride", ",", "self", ".", "stride", ")", ",", "\n", "padding", "=", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.ModulatedDeformConvPack.init_offset": [[63, 66], ["modulated_dcn.ModulatedDeformConvPack.conv_offset_mask.weight.data.zero_", "modulated_dcn.ModulatedDeformConvPack.conv_offset_mask.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset_mask", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset_mask", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.ModulatedDeformConvPack.forward": [[67, 74], ["modulated_dcn.ModulatedDeformConvPack.conv_offset_mask", "torch.chunk", "torch.cat", "torch.sigmoid", "lib.extensions.dcn.functions.modulated_dcn_func.ModulatedDeformConvFunction", "lib.extensions.dcn.functions.modulated_dcn_func.ModulatedDeformConvFunction."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_offset_mask", "(", "input", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "out", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "func", "=", "ModulatedDeformConvFunction", "(", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "deformable_groups", ")", "\n", "return", "func", "(", "input", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.DeformRoIPooling.__init__": [[78, 104], ["torch.nn.Module.__init__", "lib.extensions.dcn.functions.modulated_dcn_func.DeformRoIPoolingFunction"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "super", "(", "DeformRoIPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "pooled_size", "=", "pooled_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "no_trans", "=", "no_trans", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "part_size", "=", "pooled_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "self", ".", "sample_per_part", "=", "sample_per_part", "\n", "self", ".", "trans_std", "=", "trans_std", "\n", "self", ".", "func", "=", "DeformRoIPoolingFunction", "(", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.DeformRoIPooling.forward": [[105, 110], ["modulated_dcn.DeformRoIPooling.func", "data.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "rois", ",", "offset", ")", ":", "\n", "\n", "        ", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new", "(", ")", "\n", "", "return", "self", ".", "func", "(", "data", ",", "rois", ",", "offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.__init__": [[113, 160], ["modulated_dcn.DeformRoIPooling.__init__", "lib.extensions.dcn.functions.modulated_dcn_func.DeformRoIPoolingFunction", "torch.nn.Sequential", "modulated_dcn.ModulatedDeformRoIPoolingPack.offset_fc[].weight.data.zero_", "modulated_dcn.ModulatedDeformRoIPoolingPack.offset_fc[].bias.data.zero_", "torch.nn.Sequential", "modulated_dcn.ModulatedDeformRoIPoolingPack.mask_fc[].weight.data.zero_", "modulated_dcn.ModulatedDeformRoIPoolingPack.mask_fc[].bias.data.zero_", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "deform_fc_dim", "=", "1024", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformRoIPoolingPack", ",", "self", ")", ".", "__init__", "(", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", ",", "\n", "part_size", ",", "\n", "sample_per_part", ",", "\n", "trans_std", ")", "\n", "\n", "self", ".", "deform_fc_dim", "=", "deform_fc_dim", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "self", ".", "func_offset", "=", "DeformRoIPoolingFunction", "(", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "True", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "self", ".", "offset_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "self", ".", "output_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "2", ")", "\n", ")", "\n", "self", ".", "offset_fc", "[", "4", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_fc", "[", "4", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "mask_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "self", ".", "output_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "mask_fc", "[", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "mask_fc", "[", "2", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.modulated_dcn.ModulatedDeformRoIPoolingPack.forward": [[161, 175], ["modulated_dcn.ModulatedDeformRoIPoolingPack.func", "data.new", "data.new", "modulated_dcn.ModulatedDeformRoIPoolingPack.func_offset", "modulated_dcn.ModulatedDeformRoIPoolingPack.offset_fc", "offset.view.view.view", "modulated_dcn.ModulatedDeformRoIPoolingPack.mask_fc", "mask.view.view.view", "modulated_dcn.ModulatedDeformRoIPoolingPack.view", "modulated_dcn.ModulatedDeformRoIPoolingPack.view", "modulated_dcn.ModulatedDeformRoIPoolingPack.func"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "        ", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new", "(", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "offset", "=", "data", ".", "new", "(", ")", "\n", "x", "=", "self", ".", "func_offset", "(", "data", ",", "rois", ",", "offset", ")", "\n", "offset", "=", "self", ".", "offset_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset", "=", "offset", ".", "view", "(", "n", ",", "2", ",", "self", ".", "pooled_size", ",", "self", ".", "pooled_size", ")", "\n", "mask", "=", "self", ".", "mask_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "mask", "=", "mask", ".", "view", "(", "n", ",", "1", ",", "self", ".", "pooled_size", ",", "self", ".", "pooled_size", ")", "\n", "feat", "=", "self", ".", "func", "(", "data", ",", "rois", ",", "offset", ")", "*", "mask", "\n", "return", "feat", "\n", "", "return", "self", ".", "func", "(", "data", ",", "rois", ",", "offset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.PAM_Module.__init__": [[12, 24], ["torch.nn.Module.__init__", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Softmax", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "key_dim", ",", "value_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "PAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "key_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "key_dim", ",", "kernel_size", "=", "1", ")", "\n", "# self.value_conv = nn.Conv2d(in_channels=value_dim, out_channels=value_dim, kernel_size=1)", "\n", "# self.gamma = nn.Parameter(torch.zeros(1))", "\n", "self", ".", "gamma", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "# self.fuse_conv = nn.Sequential(nn.Conv2d(value_dim, out_dim, 1, bias=False),", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.PAM_Module.forward": [[28, 55], ["x.size", "xp.size", "parse_mod.PAM_Module.query_conv().view().permute", "parse_mod.PAM_Module.key_conv().view", "torch.bmm", "parse_mod.PAM_Module.softmax", "xp.view", "torch.bmm", "out.view.view.view", "parse_mod.PAM_Module.gamma", "parse_mod.PAM_Module.permute", "parse_mod.PAM_Module.query_conv().view", "parse_mod.PAM_Module.key_conv", "parse_mod.PAM_Module.query_conv"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X (HxW) X (HxW)\n        \"\"\"", "\n", "# xp = self.pool(x)", "\n", "xp", "=", "x", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "m_batchsize", ",", "C", ",", "hp", ",", "wp", "=", "xp", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "xp", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "wp", "*", "hp", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", "\n", "# proj_value = self.value_conv(x).view(m_batchsize, -1, width*height)", "\n", "proj_value", "=", "xp", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "wp", "*", "hp", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "# out = F.interpolate(out, (height, width), mode=\"bilinear\", align_corners=True)", "\n", "\n", "gamma", "=", "self", ".", "gamma", "(", "x", ")", "\n", "out", "=", "(", "1", "-", "gamma", ")", "*", "out", "+", "gamma", "*", "x", "\n", "# out = self.fuse_conv(out)", "\n", "return", "out", "\n", "", "", "class", "ASPPModule", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.ASPPModule.__init__": [[58, 94], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "parse_mod.PAM_Module", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "ASPPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gap", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "1", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "6", ",", "dilation", "=", "6", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "12", ",", "dilation", "=", "12", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "18", ",", "dilation", "=", "18", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "psaa_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", "+", "5", "*", "out_dim", ",", "out_dim", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "5", ",", "1", ",", "bias", "=", "True", ")", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", "*", "5", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", "*", "2", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "self", ".", "pam0", "=", "PAM_Module", "(", "in_dim", "=", "out_dim", ",", "key_dim", "=", "out_dim", "//", "8", ",", "value_dim", "=", "out_dim", ",", "out_dim", "=", "out_dim", ")", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.ASPPModule.forward": [[94, 129], ["parse_mod.ASPPModule.dilation_0", "parse_mod.ASPPModule.dilation_1", "parse_mod.ASPPModule.dilation_2", "parse_mod.ASPPModule.dilation_3", "parse_mod.ASPPModule.size", "parse_mod.ASPPModule.gap", "torch.nn.functional.interpolate", "torch.cat", "parse_mod.ASPPModule.psaa_conv", "torch.sigmoid", "torch.split", "torch.cat", "parse_mod.ASPPModule.project", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# parallel branch", "\n", "        ", "feat0", "=", "self", ".", "dilation_0", "(", "x", ")", "\n", "feat1", "=", "self", ".", "dilation_1", "(", "x", ")", "\n", "feat2", "=", "self", ".", "dilation_2", "(", "x", ")", "\n", "feat3", "=", "self", ".", "dilation_3", "(", "x", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "feat0", ".", "size", "(", ")", "\n", "gp", "=", "self", ".", "gap", "(", "x", ")", "\n", "feat4", "=", "F", ".", "interpolate", "(", "gp", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "\n", "# psaa", "\n", "y1", "=", "torch", ".", "cat", "(", "(", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ")", ",", "1", ")", "\n", "psaa_feat", "=", "self", ".", "psaa_conv", "(", "torch", ".", "cat", "(", "[", "x", ",", "y1", "]", ",", "dim", "=", "1", ")", ")", "\n", "psaa_att", "=", "torch", ".", "sigmoid", "(", "psaa_feat", ")", "\n", "psaa_att_list", "=", "torch", ".", "split", "(", "psaa_att", ",", "1", ",", "dim", "=", "1", ")", "\n", "\n", "y2", "=", "torch", ".", "cat", "(", "(", "psaa_att_list", "[", "0", "]", "*", "feat0", ",", "psaa_att_list", "[", "1", "]", "*", "feat1", ",", "psaa_att_list", "[", "2", "]", "*", "feat2", ",", "psaa_att_list", "[", "3", "]", "*", "feat3", ",", "psaa_att_list", "[", "4", "]", "*", "feat4", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "project", "(", "y2", ")", "\n", "\n", "#gp", "\n", "# gp = self.gap(x)", "\n", "# se = self.se(gp)", "\n", "# output = self.pam0(out+se*out)", "\n", "# output = torch.cat([self.pam0(out+se*out), gp.expand(n, c, h, w)], dim=1)", "\n", "# output = torch.cat([out+se*out, gp.expand(n, c, h, w)], dim=1)", "\n", "# out = out+se*out", "\n", "\n", "# output = torch.cat([self.pam0(out), gp.expand(n, c, h, w)], dim=1)", "\n", "# output = self.head_conv(output)", "\n", "\n", "# feat4 = F.interpolate(gp, (h, w), mode=\"bilinear\", align_corners=True)", "\n", "# y1 = torch.cat((feat0, feat1, feat2, feat3, feat4), 1)", "\n", "# out = self.project(y1)", "\n", "# output = self.pam0(out)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.ASPAtteModule.__init__": [[134, 157], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "BatchNorm2d", "parse_mod.SelfAttentionModule", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d", "torch.nn.Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "scale", ")", ":", "\n", "        ", "super", "(", "ASPAtteModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "atte_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "SelfAttentionModule", "(", "in_dim", "=", "out_dim", ",", "out_dim", "=", "out_dim", ",", "key_dim", "=", "out_dim", "//", "2", ",", "\n", "value_dim", "=", "out_dim", ",", "scale", "=", "scale", ")", ")", "\n", "\n", "self", ".", "dilation_0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "12", ",", "dilation", "=", "12", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "24", ",", "dilation", "=", "24", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "36", ",", "dilation", "=", "36", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", "*", "5", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.ASPAtteModule.forward": [[158, 169], ["parse_mod.ASPAtteModule.atte_branch", "parse_mod.ASPAtteModule.dilation_0", "parse_mod.ASPAtteModule.dilation_1", "parse_mod.ASPAtteModule.dilation_2", "parse_mod.ASPAtteModule.dilation_3", "torch.cat", "parse_mod.ASPAtteModule.head_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# parallel branch", "\n", "        ", "feat0", "=", "self", ".", "atte_branch", "(", "x", ")", "\n", "feat1", "=", "self", ".", "dilation_0", "(", "x", ")", "\n", "feat2", "=", "self", ".", "dilation_1", "(", "x", ")", "\n", "feat3", "=", "self", ".", "dilation_2", "(", "x", ")", "\n", "feat4", "=", "self", ".", "dilation_3", "(", "x", ")", "\n", "# fusion branch", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "head_conv", "(", "concat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.MagicModule.__init__": [[174, 203], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "parse_mod.SelfAttentionModule", "torch.nn.Conv2d", "lib.modules.com_mod.SEModule", "lib.modules.com_mod.ContextContrastedModule", "lib.modules.com_mod.SEModule", "lib.modules.com_mod.ContextContrastedModule", "lib.modules.com_mod.SEModule", "lib.modules.com_mod.ContextContrastedModule", "lib.modules.com_mod.SEModule", "lib.modules.com_mod.ContextContrastedModule", "lib.modules.com_mod.SEModule", "torch.nn.Conv2d", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BatchNorm2d", "lib.modules.module_helper.ModuleHelper.BatchNorm2d", "lib.modules.module_helper.ModuleHelper.BatchNorm2d", "lib.modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "scale", ",", "bn_type", "=", "'inplace_abn'", ")", ":", "\n", "        ", "super", "(", "MagicModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "atte_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "out_dim", ")", ",", "\n", "SelfAttentionModule", "(", "in_dim", "=", "out_dim", ",", "out_dim", "=", "out_dim", ",", "key_dim", "=", "out_dim", "//", "2", ",", "\n", "value_dim", "=", "out_dim", ",", "scale", "=", "scale", ")", ")", "\n", "# TODO: change SE Module to Channel Attention Module", "\n", "self", ".", "dilation_x", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "out_dim", ")", ",", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "# self.dilation_x = nn.Sequential(nn.Conv2d(in_dim, out_dim, kernel_size=1, padding=0, dilation=1, bias=False),", "\n", "#                                 BatchNorm2d(out_dim), ChannelAttentionModule(out_dim))", "\n", "\n", "self", ".", "dilation_0", "=", "nn", ".", "Sequential", "(", "ContextContrastedModule", "(", "in_dim", ",", "out_dim", ",", "rate", "=", "6", ")", ",", "\n", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_1", "=", "nn", ".", "Sequential", "(", "ContextContrastedModule", "(", "in_dim", ",", "out_dim", ",", "rate", "=", "12", ")", ",", "\n", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_2", "=", "nn", ".", "Sequential", "(", "ContextContrastedModule", "(", "in_dim", ",", "out_dim", ",", "rate", "=", "18", ")", ",", "\n", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_3", "=", "nn", ".", "Sequential", "(", "ContextContrastedModule", "(", "in_dim", ",", "out_dim", ",", "rate", "=", "24", ")", ",", "\n", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", "*", "6", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "out_dim", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.MagicModule.forward": [[204, 216], ["parse_mod.MagicModule.atte_branch", "parse_mod.MagicModule.dilation_0", "parse_mod.MagicModule.dilation_1", "parse_mod.MagicModule.dilation_2", "parse_mod.MagicModule.dilation_3", "parse_mod.MagicModule.dilation_x", "torch.cat", "parse_mod.MagicModule.head_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# parallel branch", "\n", "        ", "feat0", "=", "self", ".", "atte_branch", "(", "x", ")", "\n", "feat1", "=", "self", ".", "dilation_0", "(", "x", ")", "\n", "feat2", "=", "self", ".", "dilation_1", "(", "x", ")", "\n", "feat3", "=", "self", ".", "dilation_2", "(", "x", ")", "\n", "feat4", "=", "self", ".", "dilation_3", "(", "x", ")", "\n", "featx", "=", "self", ".", "dilation_x", "(", "x", ")", "\n", "# fusion branch", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "featx", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "head_conv", "(", "concat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.SE_Module.__init__": [[221, 230], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "SE_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "in_dim", "//", "16", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_dim", "//", "16", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.SE_Module.forward": [[232, 235], ["parse_mod.SE_Module.se"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "se", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.SelfAttentionModule.__init__": [[245, 266], ["torch.nn.Module.__init__", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BatchNorm2d", "lib.modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "key_dim", ",", "value_dim", ",", "scale", "=", "2", ",", "bn_type", "=", "'inplace_abn'", ")", ":", "\n", "        ", "super", "(", "SelfAttentionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "key_dim", "=", "key_dim", "\n", "self", ".", "value_dim", "=", "value_dim", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "scale", ",", "scale", ")", ")", "\n", "self", ".", "func_key", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_dim", ",", "out_channels", "=", "self", ".", "key_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "self", ".", "key_dim", ")", ")", "\n", "self", ".", "func_query", "=", "self", ".", "func_key", "\n", "self", ".", "func_value", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_dim", ",", "out_channels", "=", "self", ".", "value_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "weights", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "value_dim", ",", "out_channels", "=", "self", ".", "out_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weights", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weights", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "refine", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.SelfAttentionModule.forward": [[267, 290], ["parse_mod.SelfAttentionModule.func_value().view", "value.permute.permute.permute", "parse_mod.SelfAttentionModule.func_query().view", "query.permute.permute.permute", "parse_mod.SelfAttentionModule.func_key().view", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "torch.nn.functional.interpolate.permute().contiguous", "torch.nn.functional.interpolate.view", "parse_mod.SelfAttentionModule.weights", "parse_mod.SelfAttentionModule.refine", "parse_mod.SelfAttentionModule.size", "parse_mod.SelfAttentionModule.size", "parse_mod.SelfAttentionModule.size", "parse_mod.SelfAttentionModule.pool", "torch.nn.functional.interpolate", "parse_mod.SelfAttentionModule.func_value", "parse_mod.SelfAttentionModule.func_query", "parse_mod.SelfAttentionModule.func_key", "torch.nn.functional.interpolate.permute", "parse_mod.SelfAttentionModule.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "h", ",", "w", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "if", "self", ".", "scale", ">", "1", ":", "\n", "            ", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "", "value", "=", "self", ".", "func_value", "(", "x", ")", ".", "view", "(", "batch", ",", "self", ".", "value_dim", ",", "-", "1", ")", "# bottom", "\n", "value", "=", "value", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "query", "=", "self", ".", "func_query", "(", "x", ")", ".", "view", "(", "batch", ",", "self", ".", "key_dim", ",", "-", "1", ")", "# top", "\n", "query", "=", "query", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "key", "=", "self", ".", "func_key", "(", "x", ")", ".", "view", "(", "batch", ",", "self", ".", "key_dim", ",", "-", "1", ")", "# mid", "\n", "\n", "sim_map", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "\n", "sim_map", "=", "(", "self", ".", "key_dim", "**", "-", ".5", ")", "*", "sim_map", "\n", "sim_map", "=", "F", ".", "softmax", "(", "sim_map", ",", "dim", "=", "-", "1", ")", "\n", "\n", "context", "=", "torch", ".", "matmul", "(", "sim_map", ",", "value", ")", "\n", "context", "=", "context", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "context", "=", "context", ".", "view", "(", "batch", ",", "self", ".", "value_dim", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "context", "=", "self", ".", "weights", "(", "context", ")", "\n", "if", "self", ".", "scale", ">", "1", ":", "\n", "            ", "context", "=", "F", ".", "interpolate", "(", "input", "=", "context", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "output", "=", "self", ".", "refine", "(", "context", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.ChannelAttentionModule.__init__": [[295, 300], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Softmax", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "ChannelAttentionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.parse_mod.ChannelAttentionModule.forward": [[301, 315], ["x.size", "x.view", "x.view().permute", "torch.matmul", "parse_mod.ChannelAttentionModule.softmax", "x.view", "torch.matmul", "out.view.view.view", "[].expand_as", "x.view", "torch.max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "m_batchsize", ",", "chn", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "m_batchsize", ",", "chn", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "m_batchsize", ",", "chn", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "matmul", "(", "proj_query", ",", "proj_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "self", ".", "softmax", "(", "energy_new", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "m_batchsize", ",", "chn", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "matmul", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "chn", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.SelfAttentionModule.__init__": [[21, 42], ["torch.nn.Module.__init__", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "key_dim", ",", "value_dim", ",", "scale", "=", "2", ")", ":", "\n", "        ", "super", "(", "SelfAttentionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "key_dim", "=", "key_dim", "\n", "self", ".", "value_dim", "=", "value_dim", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "scale", ",", "scale", ")", ")", "\n", "self", ".", "func_key", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_dim", ",", "out_channels", "=", "self", ".", "key_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "InPlaceABNSync", "(", "self", ".", "key_dim", ")", ")", "\n", "self", ".", "func_query", "=", "self", ".", "func_key", "\n", "self", ".", "func_value", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_dim", ",", "out_channels", "=", "self", ".", "value_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "weights", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "value_dim", ",", "out_channels", "=", "self", ".", "out_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weights", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weights", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "refine", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.SelfAttentionModule.forward": [[43, 66], ["oc_mod.SelfAttentionModule.func_value().view", "value.permute.permute.permute", "oc_mod.SelfAttentionModule.func_query().view", "query.permute.permute.permute", "oc_mod.SelfAttentionModule.func_key().view", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "torch.nn.functional.interpolate.permute().contiguous", "torch.nn.functional.interpolate.view", "oc_mod.SelfAttentionModule.weights", "oc_mod.SelfAttentionModule.refine", "oc_mod.SelfAttentionModule.size", "oc_mod.SelfAttentionModule.size", "oc_mod.SelfAttentionModule.size", "oc_mod.SelfAttentionModule.pool", "torch.nn.functional.interpolate", "oc_mod.SelfAttentionModule.func_value", "oc_mod.SelfAttentionModule.func_query", "oc_mod.SelfAttentionModule.func_key", "torch.nn.functional.interpolate.permute", "oc_mod.SelfAttentionModule.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "h", ",", "w", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "if", "self", ".", "scale", ">", "1", ":", "\n", "            ", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "", "value", "=", "self", ".", "func_value", "(", "x", ")", ".", "view", "(", "batch", ",", "self", ".", "value_dim", ",", "-", "1", ")", "# bottom", "\n", "value", "=", "value", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "query", "=", "self", ".", "func_query", "(", "x", ")", ".", "view", "(", "batch", ",", "self", ".", "key_dim", ",", "-", "1", ")", "# top", "\n", "query", "=", "query", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "key", "=", "self", ".", "func_key", "(", "x", ")", ".", "view", "(", "batch", ",", "self", ".", "key_dim", ",", "-", "1", ")", "# mid", "\n", "\n", "sim_map", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "\n", "sim_map", "=", "(", "self", ".", "key_dim", "**", "-", ".5", ")", "*", "sim_map", "\n", "sim_map", "=", "F", ".", "softmax", "(", "sim_map", ",", "dim", "=", "-", "1", ")", "\n", "\n", "context", "=", "torch", ".", "matmul", "(", "sim_map", ",", "value", ")", "\n", "context", "=", "context", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "context", "=", "context", ".", "view", "(", "batch", ",", "self", ".", "value_dim", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "context", "=", "self", ".", "weights", "(", "context", ")", "\n", "if", "self", ".", "scale", ">", "1", ":", "\n", "            ", "context", "=", "F", ".", "interpolate", "(", "input", "=", "context", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "output", "=", "self", ".", "refine", "(", "context", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.ASPAtteModule.__init__": [[71, 93], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "oc_mod.SelfAttentionModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "scale", ")", ":", "\n", "        ", "super", "(", "ASPAtteModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "atte_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "\n", "SelfAttentionModule", "(", "in_dim", "=", "out_dim", ",", "out_dim", "=", "out_dim", ",", "key_dim", "=", "out_dim", "//", "2", ",", "\n", "value_dim", "=", "out_dim", ",", "scale", "=", "scale", ")", ")", "\n", "\n", "self", ".", "dilation_0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "12", ",", "dilation", "=", "12", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "24", ",", "dilation", "=", "24", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "36", ",", "dilation", "=", "36", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", "*", "5", ",", "512", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "512", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.ASPAtteModule.forward": [[94, 105], ["oc_mod.ASPAtteModule.atte_branch", "oc_mod.ASPAtteModule.dilation_0", "oc_mod.ASPAtteModule.dilation_1", "oc_mod.ASPAtteModule.dilation_2", "oc_mod.ASPAtteModule.dilation_3", "torch.cat", "oc_mod.ASPAtteModule.head_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# parallel branch", "\n", "        ", "feat0", "=", "self", ".", "atte_branch", "(", "x", ")", "\n", "feat1", "=", "self", ".", "dilation_0", "(", "x", ")", "\n", "feat2", "=", "self", ".", "dilation_1", "(", "x", ")", "\n", "feat3", "=", "self", ".", "dilation_2", "(", "x", ")", "\n", "feat4", "=", "self", ".", "dilation_3", "(", "x", ")", "\n", "# fusion branch", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "head_conv", "(", "concat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.ASPOCencModule.__init__": [[110, 135], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "oc_mod.SelfAttentionModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "enc_mod.EncModule"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "ncls", ",", "scale", ")", ":", "\n", "        ", "super", "(", "ASPOCencModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "atte_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "\n", "SelfAttentionModule", "(", "in_dim", "=", "out_dim", ",", "out_dim", "=", "out_dim", ",", "key_dim", "=", "out_dim", "//", "2", ",", "\n", "value_dim", "=", "out_dim", ",", "scale", "=", "scale", ")", ")", "\n", "\n", "self", ".", "dilation_0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", "\n", ")", "\n", "\n", "\n", "self", ".", "dilation_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "12", ",", "dilation", "=", "12", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "24", ",", "dilation", "=", "24", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "36", ",", "dilation", "=", "36", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", "*", "5", ",", "512", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "512", ")", ",", "\n", "EncModule", "(", "512", ",", "nclass", "=", "ncls", ",", "ncodes", "=", "32", ",", "se_loss", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.ASPOCencModule.forward": [[136, 147], ["oc_mod.ASPOCencModule.atte_branch", "oc_mod.ASPOCencModule.dilation_0", "oc_mod.ASPOCencModule.dilation_1", "oc_mod.ASPOCencModule.dilation_2", "oc_mod.ASPOCencModule.dilation_3", "torch.cat", "oc_mod.ASPOCencModule.head_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# parallel branch", "\n", "        ", "feat0", "=", "self", ".", "atte_branch", "(", "x", ")", "\n", "feat1", "=", "self", ".", "dilation_0", "(", "x", ")", "\n", "feat2", "=", "self", ".", "dilation_1", "(", "x", ")", "\n", "feat3", "=", "self", ".", "dilation_2", "(", "x", ")", "\n", "feat4", "=", "self", ".", "dilation_3", "(", "x", ")", "\n", "# fusion branch", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "head_conv", "(", "concat", ")", "\n", "return", "output", "[", "0", "]", ",", "output", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.CA_Module.__init__": [[151, 165], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Softmax", "torch.nn.Sequential", "torch.zeros", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "CA_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_dim", "*", "2", ",", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_dim", "//", "8", ",", "in_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.CA_Module.forward": [[167, 192], ["x.size", "x.view", "x.view().permute", "torch.bmm", "oc_mod.CA_Module.softmax", "x.view", "torch.bmm", "out.view.view.view", "oc_mod.CA_Module.se", "[].expand_as", "torch.cat", "x.view", "torch.max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X C X C\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "self", ".", "softmax", "(", "energy_new", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "se_x", "=", "self", ".", "se", "(", "torch", ".", "cat", "(", "[", "x", ",", "out", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "out", "=", "se_x", "*", "x", "+", "(", "1", "-", "se_x", ")", "*", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.guided_CA_Module.__init__": [[197, 216], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Softmax", "torch.nn.Sequential", "torch.nn.Sequential", "torch.zeros", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.Dropout2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "query_dim", ",", "out_dim", ",", "norm_layer", ")", ":", "\n", "        ", "super", "(", "guided_CA_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "query_dim", "=", "query_dim", "\n", "self", ".", "chanel_out", "=", "out_dim", "\n", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "query_conv_c", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "query_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "query_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout2d", "(", "0.1", ")", ")", "\n", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "query_dim", "*", "2", ",", "query_dim", "//", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "query_dim", "//", "8", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.guided_CA_Module.forward": [[218, 244], ["x.size", "oc_mod.guided_CA_Module.query_conv_c", "x.view().permute", "torch.bmm", "oc_mod.guided_CA_Module.softmax", "torch.bmm", "out_c.view.view.view", "oc_mod.guided_CA_Module.se", "oc_mod.guided_CA_Module.view", "[].expand_as", "x.view", "torch.cat", "x.view", "torch.max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x=[x1,x2]\n                x1 : input feature maps( B X C*5 X H X W)\n                x2 : input deature maps (BxCxHxW)\n            returns :\n                out : output feature maps( B X C X H X W)\n        \"\"\"", "\n", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_c_query", "=", "self", ".", "query_conv_c", "(", "x", ")", "\n", "\n", "proj_c_key", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_c_query", ".", "view", "(", "m_batchsize", ",", "self", ".", "query_dim", ",", "-", "1", ")", ",", "proj_c_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "self", ".", "softmax", "(", "energy_new", ")", "\n", "\n", "out_c", "=", "torch", ".", "bmm", "(", "attention", ",", "x", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ")", "\n", "out_c", "=", "out_c", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "\n", "# out_c = self.gamma * out_c + proj_c_query", "\n", "se_x", "=", "self", ".", "se", "(", "torch", ".", "cat", "(", "[", "proj_c_query", ",", "out_c", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "out", "=", "se_x", "*", "proj_c_query", "+", "(", "1", "-", "se_x", ")", "*", "out_c", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.ASPOCCAModule.__init__": [[248, 277], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "oc_mod.guided_SE_CAM_Module", "torch.nn.Sequential", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "oc_mod.SelfAttentionModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "oc_mod.guided_SE_CAM_Module", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "scale", ",", "ncls", ")", ":", "\n", "        ", "super", "(", "ASPOCCAModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "atte_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "\n", "SelfAttentionModule", "(", "in_dim", "=", "out_dim", ",", "out_dim", "=", "out_dim", ",", "key_dim", "=", "out_dim", "//", "2", ",", "\n", "value_dim", "=", "out_dim", ",", "scale", "=", "scale", ")", ")", "\n", "\n", "self", ".", "dilation_0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "12", ",", "dilation", "=", "12", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "24", ",", "dilation", "=", "24", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "36", ",", "dilation", "=", "36", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "gsecam", "=", "guided_SE_CAM_Module", "(", "in_dim", ",", "out_dim", ",", "out_dim", ",", "BatchNorm2d", ")", "\n", "\n", "# self.head_conv = nn.Sequential(nn.Conv2d(out_dim * 5, out_dim*2, kernel_size=1, padding=0, bias=False),", "\n", "#                                InPlaceABNSync(out_dim*2),", "\n", "#                                nn.Dropout2d(0.1))", "\n", "# self.head_conv = nn.Sequential(guided_CA_Module(out_dim*5, out_dim, out_dim, BatchNorm2d),", "\n", "#                                nn.Dropout2d(0.1))", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "guided_SE_CAM_Module", "(", "out_dim", "*", "6", ",", "512", ",", "512", ",", "BatchNorm2d", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.ASPOCCAModule.forward": [[279, 292], ["oc_mod.ASPOCCAModule.atte_branch", "oc_mod.ASPOCCAModule.dilation_0", "oc_mod.ASPOCCAModule.dilation_1", "oc_mod.ASPOCCAModule.dilation_2", "oc_mod.ASPOCCAModule.dilation_3", "oc_mod.ASPOCCAModule.gsecam", "torch.cat", "oc_mod.ASPOCCAModule.head_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# parallel branch", "\n", "        ", "feat0", "=", "self", ".", "atte_branch", "(", "x", ")", "\n", "feat1", "=", "self", ".", "dilation_0", "(", "x", ")", "\n", "feat2", "=", "self", ".", "dilation_1", "(", "x", ")", "\n", "feat3", "=", "self", ".", "dilation_2", "(", "x", ")", "\n", "feat4", "=", "self", ".", "dilation_3", "(", "x", ")", "\n", "feat5", "=", "self", ".", "gsecam", "(", "x", ")", "\n", "\n", "# fusion branch", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "head_conv", "(", "concat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.ASPOCCAENCModule.__init__": [[296, 325], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "oc_mod.guided_SE_CAM_Module", "torch.nn.Sequential", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "oc_mod.SelfAttentionModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "oc_mod.guided_SE_CAM_Module", "enc_mod.EncModule"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "scale", ",", "ncls", ")", ":", "\n", "        ", "super", "(", "ASPOCCAENCModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "atte_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "\n", "SelfAttentionModule", "(", "in_dim", "=", "out_dim", ",", "out_dim", "=", "out_dim", ",", "key_dim", "=", "out_dim", "//", "2", ",", "\n", "value_dim", "=", "out_dim", ",", "scale", "=", "scale", ")", ")", "\n", "\n", "self", ".", "dilation_0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "12", ",", "dilation", "=", "12", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "24", ",", "dilation", "=", "24", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "dilation_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "36", ",", "dilation", "=", "36", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "gsecam", "=", "guided_SE_CAM_Module", "(", "in_dim", ",", "out_dim", ",", "out_dim", ",", "BatchNorm2d", ")", "\n", "\n", "# self.head_conv = nn.Sequential(nn.Conv2d(out_dim * 5, out_dim*2, kernel_size=1, padding=0, bias=False),", "\n", "#                                InPlaceABNSync(out_dim*2),", "\n", "#                                nn.Dropout2d(0.1))", "\n", "# self.head_conv = nn.Sequential(guided_CA_Module(out_dim*5, out_dim, out_dim, BatchNorm2d),", "\n", "#                                nn.Dropout2d(0.1))", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "guided_SE_CAM_Module", "(", "out_dim", "*", "6", ",", "512", ",", "512", ",", "BatchNorm2d", ")", ",", "\n", "EncModule", "(", "512", ",", "nclass", "=", "ncls", ",", "ncodes", "=", "32", ",", "se_loss", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.ASPOCCAENCModule.forward": [[327, 340], ["oc_mod.ASPOCCAENCModule.atte_branch", "oc_mod.ASPOCCAENCModule.dilation_0", "oc_mod.ASPOCCAENCModule.dilation_1", "oc_mod.ASPOCCAENCModule.dilation_2", "oc_mod.ASPOCCAENCModule.dilation_3", "oc_mod.ASPOCCAENCModule.gsecam", "torch.cat", "oc_mod.ASPOCCAENCModule.head_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# parallel branch", "\n", "        ", "feat0", "=", "self", ".", "atte_branch", "(", "x", ")", "\n", "feat1", "=", "self", ".", "dilation_0", "(", "x", ")", "\n", "feat2", "=", "self", ".", "dilation_1", "(", "x", ")", "\n", "feat3", "=", "self", ".", "dilation_2", "(", "x", ")", "\n", "feat4", "=", "self", ".", "dilation_3", "(", "x", ")", "\n", "feat5", "=", "self", ".", "gsecam", "(", "x", ")", "\n", "\n", "# fusion branch", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "head_conv", "(", "concat", ")", "\n", "return", "output", "[", "0", "]", ",", "output", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.guided_CAM_Module.__init__": [[346, 352], ["torch.nn.Module.__init__", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "query_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "guided_CAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "query_dim", "=", "query_dim", "\n", "self", ".", "chanel_out", "=", "out_dim", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.guided_CAM_Module.forward": [[353, 375], ["x.size", "x.view().permute", "torch.bmm", "oc_mod.guided_CAM_Module.softmax", "torch.bmm", "out_c.view.view.view", "proj_c_query.view", "[].expand_as", "x.view", "x.view", "torch.max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "guide", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x=[x1,x2]\n                x1 : input feature maps( B X C*5 X H X W)\n                x2 : input deature maps (BxCxHxW)\n            returns :\n                out : output feature maps( B X C X H X W)\n        \"\"\"", "\n", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "\n", "proj_c_query", "=", "guide", "\n", "proj_c_key", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_c_query", ".", "view", "(", "m_batchsize", ",", "self", ".", "query_dim", ",", "-", "1", ")", ",", "proj_c_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "self", ".", "softmax", "(", "energy_new", ")", "\n", "\n", "out_c", "=", "torch", ".", "bmm", "(", "attention", ",", "x", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ")", "\n", "out_c", "=", "out_c", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "return", "out_c", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.SE_Module.__init__": [[380, 389], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "SE_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "in_dim", "//", "16", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_dim", "//", "16", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.SE_Module.forward": [[391, 394], ["oc_mod.SE_Module.se"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "se", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.guided_SE_CAM_Module.__init__": [[399, 422], ["torch.nn.Module.__init__", "torch.nn.Sequential", "oc_mod.guided_CAM_Module", "torch.nn.Sequential", "oc_mod.SE_Module", "torch.nn.Parameter", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.zeros", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "query_dim", ",", "out_dim", ",", "norm_layer", ")", ":", "\n", "        ", "super", "(", "guided_SE_CAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "query_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "query_dim", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "guided_cam", "=", "guided_CAM_Module", "(", "in_dim", ",", "query_dim", ",", "query_dim", ")", "\n", "\n", "self", ".", "fuse", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "query_dim", ",", "query_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "query_dim", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "se", "=", "SE_Module", "(", "in_dim", ",", "query_dim", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "query_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_dim", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.oc_mod.guided_SE_CAM_Module.forward": [[422, 437], ["oc_mod.guided_SE_CAM_Module.project", "oc_mod.guided_SE_CAM_Module.se", "oc_mod.guided_SE_CAM_Module.relu", "oc_mod.guided_SE_CAM_Module.out", "oc_mod.guided_SE_CAM_Module.guided_cam"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X C X C\n        \"\"\"", "\n", "bottle", "=", "self", ".", "project", "(", "x", ")", "\n", "bottle", "=", "self", ".", "gamma", "*", "self", ".", "guided_cam", "(", "x", ",", "bottle", ")", "+", "bottle", "\n", "# bottle = self.fuse(bottle)", "\n", "se_x", "=", "self", ".", "se", "(", "x", ")", "\n", "se_bottle", "=", "self", ".", "relu", "(", "se_x", "*", "bottle", "+", "bottle", ")", "\n", "out", "=", "self", ".", "out", "(", "se_bottle", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.rectify.RFConv2d.__init__": [[25, 40], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ",", "\n", "average_mode", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "rectify", "=", "average_mode", "or", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "average", "=", "average_mode", "\n", "\n", "super", "(", "RFConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.rectify.RFConv2d._conv_forward": [[41, 48], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.pad", "torch.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair"], ["", "def", "_conv_forward", "(", "self", ",", "input", ",", "weight", ")", ":", "\n", "        ", "if", "self", ".", "padding_mode", "!=", "'zeros'", ":", "\n", "            ", "return", "F", ".", "conv2d", "(", "F", ".", "pad", "(", "input", ",", "self", ".", "_padding_repeated_twice", ",", "mode", "=", "self", ".", "padding_mode", ")", ",", "\n", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "_pair", "(", "0", ")", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.rectify.RFConv2d.forward": [[49, 55], ["functions.rectify.RFConv2d._conv_forward", "functions.rectify"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.rectify.RFConv2d._conv_forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "_conv_forward", "(", "input", ",", "self", ".", "weight", ")", "\n", "if", "self", ".", "rectify", ":", "\n", "            ", "output", "=", "rectify", "(", "output", ",", "input", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "average", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.rectify.RFConv2d.extra_repr": [[56, 59], ["super().extra_repr"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.extra_repr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "extra_repr", "(", ")", "+", "', rectify={}, average_mode={}'", ".", "format", "(", "self", ".", "rectify", ",", "self", ".", "average", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.se_mod.SelfAttentionModule.__init__": [[22, 40], ["torch.nn.Module.__init__", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "key_dim", ",", "value_dim", ",", "scale", "=", "2", ")", ":", "\n", "        ", "super", "(", "SelfAttentionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "key_dim", "=", "key_dim", "\n", "self", ".", "value_dim", "=", "value_dim", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "scale", ",", "scale", ")", ")", "\n", "self", ".", "func_key", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_dim", ",", "out_channels", "=", "self", ".", "key_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "InPlaceABNSync", "(", "self", ".", "key_dim", ")", ")", "\n", "self", ".", "func_query", "=", "self", ".", "func_key", "\n", "self", ".", "func_value", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_dim", ",", "out_channels", "=", "self", ".", "value_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "weights", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "value_dim", ",", "out_channels", "=", "self", ".", "out_dim", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "refine", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.se_mod.SelfAttentionModule.forward": [[41, 64], ["se_mod.SelfAttentionModule.func_value().view", "value.permute.permute.permute", "se_mod.SelfAttentionModule.func_query().view", "query.permute.permute.permute", "se_mod.SelfAttentionModule.func_key().view", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "torch.nn.functional.interpolate.permute().contiguous", "torch.nn.functional.interpolate.view", "se_mod.SelfAttentionModule.weights", "se_mod.SelfAttentionModule.refine", "se_mod.SelfAttentionModule.size", "se_mod.SelfAttentionModule.size", "se_mod.SelfAttentionModule.size", "se_mod.SelfAttentionModule.pool", "torch.nn.functional.interpolate", "se_mod.SelfAttentionModule.func_value", "se_mod.SelfAttentionModule.func_query", "se_mod.SelfAttentionModule.func_key", "torch.nn.functional.interpolate.permute", "se_mod.SelfAttentionModule.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "h", ",", "w", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "if", "self", ".", "scale", ">", "1", ":", "\n", "            ", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "", "value", "=", "self", ".", "func_value", "(", "x", ")", ".", "view", "(", "batch", ",", "self", ".", "value_dim", ",", "-", "1", ")", "# bottom", "\n", "value", "=", "value", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "query", "=", "self", ".", "func_query", "(", "x", ")", ".", "view", "(", "batch", ",", "self", ".", "key_dim", ",", "-", "1", ")", "# top", "\n", "query", "=", "query", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "key", "=", "self", ".", "func_key", "(", "x", ")", ".", "view", "(", "batch", ",", "self", ".", "key_dim", ",", "-", "1", ")", "# mid", "\n", "\n", "sim_map", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "\n", "sim_map", "=", "(", "self", ".", "key_dim", "**", "-", ".5", ")", "*", "sim_map", "\n", "sim_map", "=", "F", ".", "softmax", "(", "sim_map", ",", "dim", "=", "-", "1", ")", "\n", "\n", "context", "=", "torch", ".", "matmul", "(", "sim_map", ",", "value", ")", "\n", "context", "=", "context", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "context", "=", "context", ".", "view", "(", "batch", ",", "self", ".", "value_dim", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "context", "=", "self", ".", "weights", "(", "context", ")", "\n", "if", "self", ".", "scale", ">", "1", ":", "\n", "            ", "context", "=", "F", ".", "interpolate", "(", "input", "=", "context", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "output", "=", "self", ".", "refine", "(", "context", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.se_mod.SEOCModule.__init__": [[69, 90], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "se_mod.SelfAttentionModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "lib.modules.SEModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "lib.modules.SEModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "lib.modules.SEModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "lib.modules.SEModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "scale", ")", ":", "\n", "        ", "super", "(", "SEOCModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "atte_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "\n", "SelfAttentionModule", "(", "in_dim", "=", "out_dim", ",", "out_dim", "=", "out_dim", ",", "key_dim", "=", "out_dim", "//", "2", ",", "\n", "value_dim", "=", "out_dim", ",", "scale", "=", "scale", ")", ")", "\n", "\n", "self", ".", "dilation_0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "12", ",", "dilation", "=", "12", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "24", ",", "dilation", "=", "24", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "36", ",", "dilation", "=", "36", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", "*", "5", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.se_mod.SEOCModule.forward": [[91, 102], ["se_mod.SEOCModule.atte_branch", "se_mod.SEOCModule.dilation_0", "se_mod.SEOCModule.dilation_1", "se_mod.SEOCModule.dilation_2", "se_mod.SEOCModule.dilation_3", "torch.cat", "se_mod.SEOCModule.head_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# parallel branch", "\n", "        ", "feat0", "=", "self", ".", "atte_branch", "(", "x", ")", "\n", "feat1", "=", "self", ".", "dilation_0", "(", "x", ")", "\n", "feat2", "=", "self", ".", "dilation_1", "(", "x", ")", "\n", "feat3", "=", "self", ".", "dilation_2", "(", "x", ")", "\n", "feat4", "=", "self", ".", "dilation_3", "(", "x", ")", "\n", "# fusion branch", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "head_conv", "(", "concat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.se_mod.MagicModule.__init__": [[107, 131], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "se_mod.SelfAttentionModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync", "lib.modules.SEModule", "lib.modules.ContextContrastedModule", "lib.modules.SEModule", "lib.modules.ContextContrastedModule", "lib.modules.SEModule", "lib.modules.ContextContrastedModule", "lib.modules.SEModule", "lib.modules.ContextContrastedModule", "lib.modules.SEModule", "torch.nn.Conv2d", "inplace_abn.bn.InPlaceABNSync"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "scale", ")", ":", "\n", "        ", "super", "(", "MagicModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "atte_branch", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "\n", "SelfAttentionModule", "(", "in_dim", "=", "out_dim", ",", "out_dim", "=", "out_dim", ",", "key_dim", "=", "out_dim", "//", "2", ",", "\n", "value_dim", "=", "out_dim", ",", "scale", "=", "scale", ")", ")", "\n", "# added", "\n", "self", ".", "dilation_x", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ",", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_0", "=", "nn", ".", "Sequential", "(", "ContextContrastedModule", "(", "in_dim", ",", "out_dim", ",", "rate", "=", "6", ")", ",", "\n", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_1", "=", "nn", ".", "Sequential", "(", "ContextContrastedModule", "(", "in_dim", ",", "out_dim", ",", "rate", "=", "12", ")", ",", "\n", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_2", "=", "nn", ".", "Sequential", "(", "ContextContrastedModule", "(", "in_dim", ",", "out_dim", ",", "rate", "=", "18", ")", ",", "\n", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "dilation_3", "=", "nn", ".", "Sequential", "(", "ContextContrastedModule", "(", "in_dim", ",", "out_dim", ",", "rate", "=", "24", ")", ",", "\n", "SEModule", "(", "out_dim", ",", "reduction", "=", "16", ")", ")", "\n", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", "*", "6", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.se_mod.MagicModule.forward": [[132, 144], ["se_mod.MagicModule.atte_branch", "se_mod.MagicModule.dilation_0", "se_mod.MagicModule.dilation_1", "se_mod.MagicModule.dilation_2", "se_mod.MagicModule.dilation_3", "se_mod.MagicModule.dilation_x", "torch.cat", "se_mod.MagicModule.head_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# parallel branch", "\n", "        ", "feat0", "=", "self", ".", "atte_branch", "(", "x", ")", "\n", "feat1", "=", "self", ".", "dilation_0", "(", "x", ")", "\n", "feat2", "=", "self", ".", "dilation_1", "(", "x", ")", "\n", "feat3", "=", "self", ".", "dilation_2", "(", "x", ")", "\n", "feat4", "=", "self", ".", "dilation_3", "(", "x", ")", "\n", "featx", "=", "self", ".", "dilation_x", "(", "x", ")", "\n", "# fusion branch", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "feat0", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "featx", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "head_conv", "(", "concat", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.Bottleneck.__init__": [[15, 37], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Downsample", "Downsample"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ")", "\n", "# if(stride==1):", "\n", "#     self.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)", "\n", "# else:", "\n", "#     self.conv3 = nn.Sequential(Downsample(filt_size=3, stride=stride, channels=planes),", "\n", "#                                nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False))", "\n", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "down_blur", "=", "Downsample", "(", "filt_size", "=", "3", ",", "stride", "=", "stride", ",", "channels", "=", "planes", ")", "\n", "self", ".", "res_down_blur", "=", "Downsample", "(", "filt_size", "=", "3", ",", "stride", "=", "stride", ",", "channels", "=", "inplanes", ")", "\n", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_inplace", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.Bottleneck.forward": [[38, 62], ["com_mod_blur.Bottleneck.conv1", "com_mod_blur.Bottleneck.bn1", "com_mod_blur.Bottleneck.relu", "com_mod_blur.Bottleneck.conv2", "com_mod_blur.Bottleneck.bn2", "com_mod_blur.Bottleneck.relu", "com_mod_blur.Bottleneck.conv3", "com_mod_blur.Bottleneck.bn3", "com_mod_blur.Bottleneck.relu_inplace", "com_mod_blur.Bottleneck.down_blur", "com_mod_blur.Bottleneck.downsample", "com_mod_blur.Bottleneck.res_down_blur"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "out", "=", "self", ".", "down_blur", "(", "out", ")", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "stride", ">", "1", ":", "\n", "                ", "x", "=", "self", ".", "res_down_blur", "(", "x", ")", "\n", "", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_inplace", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ResNet.__init__": [[65, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "com_mod_blur.ResNet._make_layer", "com_mod_blur.ResNet._make_layer", "com_mod_blur.ResNet._make_layer", "com_mod_blur.ResNet._make_layer", "torch.MaxPool2d", "torch.MaxPool2d", "Downsample"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# stem 1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "Sequential", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "False", ")", ",", "# change", "\n", "Downsample", "(", "channels", "=", "64", ",", "filt_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ResNet._make_layer": [[80, 98], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "True", ")", ")", "\n", "# downsample = nn.Sequential(", "\n", "#     nn.Conv2d(self.inplanes, planes * block.expansion,", "\n", "#               kernel_size=1, stride=stride, bias=False),", "\n", "#     BatchNorm2d(planes * block.expansion, affine=True))", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ResNet.forward": [[99, 107], ["com_mod_blur.ResNet.relu", "com_mod_blur.ResNet.maxpool", "com_mod_blur.ResNet.layer1", "com_mod_blur.ResNet.layer2", "com_mod_blur.ResNet.layer3", "com_mod_blur.ResNet.layer4", "com_mod_blur.ResNet.bn1", "com_mod_blur.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "return", "[", "x1", ",", "x2", ",", "x3", ",", "x4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ResGridNet.__init__": [[112, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "com_mod_blur.ResGridNet._make_layer", "com_mod_blur.ResGridNet._make_layer", "com_mod_blur.ResGridNet._make_layer", "com_mod_blur.ResGridNet._make_layer", "torch.ReLU", "torch.ReLU", "Downsample", "torch.MaxPool2d", "torch.MaxPool2d", "Downsample"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", "ResGridNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "3", ",", "stride", "=", "2", ",", "channels", "=", "64", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "128", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "Sequential", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "3", ",", "stride", "=", "2", ",", "channels", "=", "128", ")", ")", "\n", "# self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1, ceil_mode=True)  # change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "# TODO: change the dilation rate", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "multi_grid", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ResGridNet._make_layer": [[138, 159], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "range", "range", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "layers.append", "layers.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "multi_grid", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "True", ")", ")", "\n", "# downsample = nn.Sequential(", "\n", "#     nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False),", "\n", "#     BatchNorm2d(planes * block.expansion, affine=True))", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "multi_grid", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", "**", "(", "i", "+", "1", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ResGridNet.forward": [[160, 170], ["com_mod_blur.ResGridNet.relu1", "com_mod_blur.ResGridNet.relu2", "com_mod_blur.ResGridNet.relu3", "com_mod_blur.ResGridNet.maxpool", "com_mod_blur.ResGridNet.layer1", "com_mod_blur.ResGridNet.layer2", "com_mod_blur.ResGridNet.layer3", "com_mod_blur.ResGridNet.layer4", "com_mod_blur.ResGridNet.bn1", "com_mod_blur.ResGridNet.bn2", "com_mod_blur.ResGridNet.bn3", "com_mod_blur.ResGridNet.conv1", "com_mod_blur.ResGridNet.conv2", "com_mod_blur.ResGridNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x1", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "layer4", "(", "x4", ")", "\n", "return", "[", "x2", ",", "x3", ",", "x4", ",", "x5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ResStemNet.__init__": [[173, 194], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "com_mod_blur.ResStemNet._make_layer", "com_mod_blur.ResStemNet._make_layer", "com_mod_blur.ResStemNet._make_layer", "com_mod_blur.ResStemNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", "ResStemNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "128", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "# TODO: change the dilation rate", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ResStemNet._make_layer": [[195, 210], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "True", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ResStemNet.forward": [[211, 221], ["com_mod_blur.ResStemNet.relu1", "com_mod_blur.ResStemNet.relu2", "com_mod_blur.ResStemNet.relu3", "com_mod_blur.ResStemNet.maxpool", "com_mod_blur.ResStemNet.layer1", "com_mod_blur.ResStemNet.layer2", "com_mod_blur.ResStemNet.layer3", "com_mod_blur.ResStemNet.layer4", "com_mod_blur.ResStemNet.bn1", "com_mod_blur.ResStemNet.bn2", "com_mod_blur.ResStemNet.bn3", "com_mod_blur.ResStemNet.conv1", "com_mod_blur.ResStemNet.conv2", "com_mod_blur.ResStemNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x1", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "layer4", "(", "x4", ")", "\n", "return", "[", "x2", ",", "x3", ",", "x4", ",", "x5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.SEModule.__init__": [[225, 234], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.SEModule.forward": [[235, 243], ["com_mod_blur.SEModule.avg_pool", "com_mod_blur.SEModule.fc1", "com_mod_blur.SEModule.relu", "com_mod_blur.SEModule.fc2", "com_mod_blur.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.SpatialAttention.__init__": [[246, 254], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "kernel_size", "in", "(", "3", ",", "7", ")", ",", "'kernel size must be 3 or 7'", "\n", "padding", "=", "3", "if", "kernel_size", "==", "7", "else", "1", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.SpatialAttention.forward": [[255, 261], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "com_mod_blur.SpatialAttention.conv1", "com_mod_blur.SpatialAttention.sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "avg_out", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "s_out", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", "]", ",", "dim", "=", "1", ")", "\n", "s_out", "=", "self", ".", "conv1", "(", "s_out", ")", "\n", "return", "self", ".", "sigmoid", "(", "s_out", ")", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.Prob.__init__": [[266, 268], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Prob", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.Prob.forward": [[269, 271], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ")", ":", "\n", "        ", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.Prob.backward": [[272, 278], ["range", "matplotlib.show", "matplotlib.subplot", "matplotlib.imshow"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top_grad", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "top_grad", "[", "0", ",", "i", ",", ":", ",", ":", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "return", "top_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.GuidanceModule.__init__": [[285, 288], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "GuidanceModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.GuidanceModule.forward": [[289, 294], ["source.size", "com_mod_blur.GuidanceModule.softmax"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "m_batchsize", ",", "chn", ",", "height", ",", "width", "=", "source", ".", "size", "(", ")", "\n", "source_norm", "=", "self", ".", "softmax", "(", "source", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.DiscriminatorModule.__init__": [[299, 301], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "DiscriminatorModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.DiscriminatorModule.forward": [[302, 304], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ContextContrastedModule.__init__": [[309, 319], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "inplace_abn.bn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "inplace_abn.bn.InPlaceABNSync"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "rate", ")", ":", "\n", "        ", "super", "(", "ContextContrastedModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_in", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "self", ".", "conv_local", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "self", ".", "conv_context", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "dilation", "=", "rate", ",", "padding", "=", "rate", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "conv_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "InPlaceABNSync", "(", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod_blur.ContextContrastedModule.forward": [[320, 328], ["com_mod_blur.ContextContrastedModule.conv_in", "com_mod_blur.ContextContrastedModule.conv_local", "com_mod_blur.ContextContrastedModule.conv_context", "com_mod_blur.ContextContrastedModule.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "x_local", "=", "self", ".", "conv_local", "(", "x", ")", "\n", "x_context", "=", "self", ".", "conv_context", "(", "x", ")", "\n", "x_out", "=", "x_local", "-", "x_context", "\n", "# x_out = x_local + x_context", "\n", "x_out", "=", "self", ".", "conv_out", "(", "x_out", ")", "\n", "return", "x_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gnn_infer.Decomposition.__init__": [[12, 20], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "10", ")", ":", "\n", "        ", "super", "(", "Decomposition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "att_fh", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "hidden_dim", ",", "2", "*", "hidden_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "2", "*", "hidden_dim", ")", ",", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "att_fh1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "hidden_dim", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gnn_infer.Decomposition.forward": [[22, 26], ["gnn_infer.Decomposition.att_fh", "gnn_infer.Decomposition.att_fh1", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xf", ",", "xh", ")", ":", "\n", "        ", "att_fh", "=", "self", ".", "att_fh", "(", "torch", ".", "cat", "(", "[", "xf", ",", "xh", "]", ",", "dim", "=", "1", ")", ")", "\n", "att", "=", "self", ".", "att_fh1", "(", "att_fh", ")", "\n", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gnn_infer.conv_Update.__init__": [[28, 45], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "lib.modules.ConvGRU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "10", ",", "paths_len", "=", "3", ")", ":", "\n", "        ", "super", "(", "conv_Update", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "# detect if CUDA is available or not", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_gpu", ":", "\n", "            ", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "# computation in GPU", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "torch", ".", "FloatTensor", "\n", "", "self", ".", "conv_update", "=", "ConvGRU", "(", "input_dim", "=", "paths_len", "*", "hidden_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "num_layers", "=", "1", ",", "\n", "dtype", "=", "dtype", ",", "\n", "batch_first", "=", "True", ",", "\n", "bias", "=", "True", ",", "\n", "return_all_layers", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gnn_infer.conv_Update.forward": [[46, 52], ["len", "gnn_infer.conv_Update.conv_update", "gnn_infer.conv_Update.conv_update", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "message_list[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "message_list", ")", ":", "\n", "        ", "if", "len", "(", "message_list", ")", ">", "1", ":", "\n", "            ", "_", ",", "out", "=", "self", ".", "conv_update", "(", "torch", ".", "cat", "(", "message_list", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "[", "x", "]", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "out", "=", "self", ".", "conv_update", "(", "message_list", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "[", "x", "]", ")", "\n", "", "return", "out", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gnn_infer.Composition.__init__": [[74, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "parts_len", ")", ":", "\n", "        ", "super", "(", "Composition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_ch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "(", "parts_len", ")", "*", "hidden_dim", ",", "2", "*", "hidden_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "2", "*", "hidden_dim", ")", ",", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "hidden_dim", ")", ",", "nn", ".", "LeakyReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gnn_infer.Composition.forward": [[82, 85], ["gnn_infer.Composition.conv_ch", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xp_list", ")", ":", "\n", "        ", "xph", "=", "self", ".", "conv_ch", "(", "torch", ".", "cat", "(", "xp_list", ",", "dim", "=", "1", ")", ")", "\n", "return", "xph", "\n", "", "", "class", "Part_Dependency", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gnn_infer.Part_Dependency.__init__": [[86, 111], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "lib.modules.dcn.DFConv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "lib.modules.dcn.DFConv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "10", ")", ":", "\n", "        ", "super", "(", "Part_Dependency", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dconv", "=", "nn", ".", "Sequential", "(", "\n", "DFConv2d", "(", "\n", "2", "*", "hidden_dim", ",", "\n", "2", "*", "hidden_dim", ",", "\n", "with_modulated_dcn", "=", "True", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", ",", "BatchNorm2d", "(", "2", "*", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "DFConv2d", "(", "\n", "2", "*", "hidden_dim", ",", "\n", "hidden_dim", ",", "\n", "with_modulated_dcn", "=", "True", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", ",", "BatchNorm2d", "(", "hidden_dim", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gnn_infer.Part_Dependency.forward": [[113, 116], ["gnn_infer.Part_Dependency.dconv", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pA", ",", "pB", ")", ":", "\n", "        ", "A_diffuse", "=", "self", ".", "dconv", "(", "torch", ".", "cat", "(", "[", "pA", ",", "pB", "]", ",", "dim", "=", "1", ")", ")", "\n", "return", "A_diffuse", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.splat.SplAtConv2d.__init__": [[17, 46], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "max", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "splat.rSoftMax", "rectify.RFConv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "dropblock.DropBlock2D"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn03.bn._pair"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplAtConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "rectify", "=", "rectify", "and", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "if", "self", ".", "rectify", ":", "\n", "            ", "self", ".", "conv", "=", "RFConv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "average_mode", "=", "rectify_avg", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "", "self", ".", "use_bn", "=", "norm_layer", "is", "not", "None", "\n", "self", ".", "bn0", "=", "norm_layer", "(", "channels", "*", "radix", ")", "\n", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "inter_channels", ")", "\n", "self", ".", "fc2", "=", "Conv2d", "(", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "rsoftmax", "=", "rSoftMax", "(", "radix", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.splat.SplAtConv2d.forward": [[47, 77], ["splat.SplAtConv2d.conv", "splat.SplAtConv2d.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "splat.SplAtConv2d.fc1", "splat.SplAtConv2d.relu", "splat.SplAtConv2d.fc2", "splat.SplAtConv2d.rsoftmax().view", "sum.contiguous", "splat.SplAtConv2d.bn0", "splat.SplAtConv2d.dropblock", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "splat.SplAtConv2d.bn1", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "splat.SplAtConv2d.rsoftmax", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "x", "=", "self", ".", "dropblock", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "channel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splited", "=", "torch", ".", "split", "(", "x", ",", "channel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "gap", "=", "sum", "(", "splited", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "gap", "=", "self", ".", "bn1", "(", "gap", ")", "\n", "", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", "\n", "atten", "=", "self", ".", "rsoftmax", "(", "atten", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "atten", "=", "torch", ".", "split", "(", "atten", ",", "channel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "out", "=", "sum", "(", "[", "att", "*", "split", "for", "(", "att", ",", "split", ")", "in", "zip", "(", "atten", ",", "splited", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.splat.rSoftMax.__init__": [[79, 83], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radix", ",", "cardinality", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.splat.rSoftMax.forward": [[84, 93], ["torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.softmax", "torch.softmax", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "torch.sigmoid.view"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "batch", ",", "self", ".", "cardinality", ",", "self", ".", "radix", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.BasicBlock.__init__": [[33, 43], ["torch.Module.__init__", "hrnet_backbone.conv3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet_backbone.conv3x3", "module_helper.ModuleHelper.BatchNorm2d", "module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_in", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.BasicBlock.forward": [[44, 61], ["hrnet_backbone.BasicBlock.conv1", "hrnet_backbone.BasicBlock.bn1", "hrnet_backbone.BasicBlock.relu", "hrnet_backbone.BasicBlock.conv2", "hrnet_backbone.BasicBlock.bn2", "hrnet_backbone.BasicBlock.relu_in", "hrnet_backbone.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_in", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.Bottleneck.__init__": [[66, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "module_helper.ModuleHelper.BatchNorm2d", "module_helper.ModuleHelper.BatchNorm2d", "module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", "*", "4", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_in", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.Bottleneck.forward": [[80, 101], ["hrnet_backbone.Bottleneck.conv1", "hrnet_backbone.Bottleneck.bn1", "hrnet_backbone.Bottleneck.relu", "hrnet_backbone.Bottleneck.conv2", "hrnet_backbone.Bottleneck.bn2", "hrnet_backbone.Bottleneck.relu", "hrnet_backbone.Bottleneck.conv3", "hrnet_backbone.Bottleneck.bn3", "hrnet_backbone.Bottleneck.relu_in", "hrnet_backbone.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_in", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionModule.__init__": [[104, 120], ["torch.Module.__init__", "hrnet_backbone.HighResolutionModule._check_branches", "hrnet_backbone.HighResolutionModule._make_branches", "hrnet_backbone.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionModule._check_branches": [[121, 140], ["len", "logger.Logger.error", "ValueError", "len", "logger.Logger.error", "ValueError", "len", "logger.Logger.error", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "Log", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "Log", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "Log", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionModule._make_one_branch": [[141, 182], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "bn_momentum", "\n", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "bn_momentum", "=", "bn_momentum", "\n", ")", "\n", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "bn_momentum", "=", "bn_momentum", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionModule._make_branches": [[183, 192], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "hrnet_backbone.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "bn_type", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionModule._make_fuse_layers": [[193, 251], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "module_helper.ModuleHelper.BatchNorm2d", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "module_helper.ModuleHelper.BatchNorm2d", "module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_fuse_layers", "(", "self", ",", "bn_type", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", ")", "\n", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_outchannels_conv3x3", ",", "momentum", "=", "bn_momentum", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_outchannels_conv3x3", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionModule.get_num_inchannels": [[252, 254], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionModule.forward": [[255, 282], ["range", "range", "len", "range", "x_fuse.append", "hrnet_backbone.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionNet.__init__": [[292, 353], ["torch.Module.__init__", "os.environ.get", "hrnet_backbone.HighResolutionNet._make_transition_layer", "hrnet_backbone.HighResolutionNet._make_stage", "hrnet_backbone.HighResolutionNet._make_transition_layer", "hrnet_backbone.HighResolutionNet._make_stage", "hrnet_backbone.HighResolutionNet._make_transition_layer", "hrnet_backbone.HighResolutionNet._make_stage", "os.environ.get", "logger.Logger.info", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet_backbone.HighResolutionNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet_backbone.HighResolutionNet._make_layer", "hrnet_backbone.HighResolutionNet._make_head", "module_helper.ModuleHelper.BatchNorm2d", "module_helper.ModuleHelper.BatchNorm2d", "module_helper.ModuleHelper.BatchNorm2d", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_head", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "bn_type", ",", "bn_momentum", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'full_res_stem'", ")", ":", "\n", "            ", "Log", ".", "info", "(", "\"using full-resolution stem with stride=1\"", ")", "\n", "stem_stride", "=", "1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "stem_stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "64", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "64", ",", "4", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "", "else", ":", "\n", "            ", "stem_stride", "=", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "stem_stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "64", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "stem_stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "64", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "64", ",", "4", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "", "self", ".", "stage2_cfg", "=", "cfg", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "256", "]", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "cfg", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "cfg", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'keep_imagenet_head'", ")", ":", "\n", "            ", "self", ".", "incre_modules", ",", "self", ".", "downsamp_modules", ",", "self", ".", "final_layer", "=", "self", ".", "_make_head", "(", "pre_stage_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionNet._make_head": [[354, 405], ["logger.Logger.info", "logger.Logger.info", "enumerate", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet_backbone.HighResolutionNet._make_layer", "torch.ModuleList.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "module_helper.ModuleHelper.BatchNorm2d", "module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "", "def", "_make_head", "(", "self", ",", "pre_stage_channels", ",", "bn_type", ",", "bn_momentum", ")", ":", "\n", "        ", "head_block", "=", "Bottleneck", "\n", "head_channels", "=", "[", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "\n", "Log", ".", "info", "(", "\"pre_stage_channels: {}\"", ".", "format", "(", "pre_stage_channels", ")", ")", "\n", "Log", ".", "info", "(", "\"head_channels: {}\"", ".", "format", "(", "head_channels", ")", ")", "\n", "\n", "# Increasing the #channels on each resolution ", "\n", "# from C, 2C, 4C, 8C to 128, 256, 512, 1024", "\n", "incre_modules", "=", "[", "]", "\n", "for", "i", ",", "channels", "in", "enumerate", "(", "pre_stage_channels", ")", ":", "\n", "            ", "incre_module", "=", "self", ".", "_make_layer", "(", "head_block", ",", "\n", "channels", ",", "\n", "head_channels", "[", "i", "]", ",", "\n", "1", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "bn_momentum", "=", "bn_momentum", "\n", ")", "\n", "incre_modules", ".", "append", "(", "incre_module", ")", "\n", "", "incre_modules", "=", "nn", ".", "ModuleList", "(", "incre_modules", ")", "\n", "\n", "# downsampling modules", "\n", "downsamp_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pre_stage_channels", ")", "-", "1", ")", ":", "\n", "            ", "in_channels", "=", "head_channels", "[", "i", "]", "*", "head_block", ".", "expansion", "\n", "out_channels", "=", "head_channels", "[", "i", "+", "1", "]", "*", "head_block", ".", "expansion", "\n", "\n", "downsamp_module", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "downsamp_modules", ".", "append", "(", "downsamp_module", ")", "\n", "", "downsamp_modules", "=", "nn", ".", "ModuleList", "(", "downsamp_modules", ")", "\n", "\n", "final_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "head_channels", "[", "3", "]", "*", "head_block", ".", "expansion", ",", "\n", "out_channels", "=", "2048", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "2048", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "return", "incre_modules", ",", "downsamp_modules", ",", "final_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionNet._make_transition_layer": [[406, 454], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "module_helper.ModuleHelper.BatchNorm2d", "module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ",", "bn_type", ",", "bn_momentum", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "\n", "outchannels", ",", "\n", "3", ",", "\n", "2", ",", "\n", "1", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "outchannels", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionNet._make_layer": [[455, 474], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "bn_momentum", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", ")", "\n", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionNet._make_stage": [[475, 508], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet_backbone.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "\n", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ",", "\n", "bn_type", ",", "\n", "bn_momentum", "\n", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HighResolutionNet.forward": [[509, 568], ["os.environ.get", "hrnet_backbone.HighResolutionNet.layer1", "range", "hrnet_backbone.HighResolutionNet.stage2", "range", "hrnet_backbone.HighResolutionNet.stage3", "os.environ.get", "range", "hrnet_backbone.HighResolutionNet.stage4", "os.environ.get", "hrnet_backbone.HighResolutionNet.conv1", "hrnet_backbone.HighResolutionNet.bn1", "hrnet_backbone.HighResolutionNet.relu", "hrnet_backbone.HighResolutionNet.conv1", "hrnet_backbone.HighResolutionNet.bn1", "hrnet_backbone.HighResolutionNet.relu", "hrnet_backbone.HighResolutionNet.conv2", "hrnet_backbone.HighResolutionNet.bn2", "hrnet_backbone.HighResolutionNet.relu", "x_list.append", "range", "hrnet_backbone.HighResolutionNet.final_layer", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "len", "x_list.append"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "os", ".", "environ", ".", "get", "(", "'full_res_stem'", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'drop_stage4'", ")", ":", "\n", "            ", "return", "y_list", "\n", "\n", "", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'keep_imagenet_head'", ")", ":", "\n", "# Classification Head", "\n", "            ", "x_list", "=", "[", "]", "\n", "y", "=", "self", ".", "incre_modules", "[", "0", "]", "(", "y_list", "[", "0", "]", ")", "\n", "x_list", ".", "append", "(", "y", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "downsamp_modules", ")", ")", ":", "\n", "                ", "y", "=", "self", ".", "incre_modules", "[", "i", "+", "1", "]", "(", "y_list", "[", "i", "+", "1", "]", ")", "+", "self", ".", "downsamp_modules", "[", "i", "]", "(", "y", ")", "\n", "x_list", ".", "append", "(", "y", ")", "\n", "\n", "", "y", "=", "self", ".", "final_layer", "(", "y", ")", "\n", "del", "x_list", "[", "-", "1", "]", "\n", "x_list", ".", "append", "(", "y", ")", "\n", "\n", "return", "x_list", "\n", "\n", "", "return", "y_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HRNetBackbone.__init__": [[571, 574], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "None", ",", "arch", "=", "'hrnet48'", ")", ":", "\n", "        ", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "arch", "=", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.HRNetBackbone.__call__": [[575, 617], ["hrnet_backbone.HighResolutionNet", "module_helper.ModuleHelper.load_model", "hrnet_backbone.HighResolutionNet", "module_helper.ModuleHelper.load_model", "hrnet_backbone.HighResolutionNet", "module_helper.ModuleHelper.load_model", "hrnet_backbone.HighResolutionNet", "module_helper.ModuleHelper.load_model", "Exception"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "from", ".", "hrnet_config", "import", "MODEL_CONFIGS", "\n", "\n", "if", "self", ".", "arch", "==", "'hrnet18'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet18'", "]", ",", "\n", "bn_type", "=", "'inplace_abn'", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "\n", "", "elif", "self", ".", "arch", "==", "'hrnet32'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet32'", "]", ",", "\n", "bn_type", "=", "'inplace_abn'", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "\n", "", "elif", "self", ".", "arch", "==", "'hrnet48'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet48'", "]", ",", "\n", "bn_type", "=", "'inplace_abn'", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "\n", "", "elif", "self", ".", "arch", "==", "'hrnet64'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet64'", "]", ",", "\n", "bn_type", "=", "'inplace_abn'", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Architecture undefined!'", ")", "\n", "\n", "", "return", "arch_net", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.hrnet_backbone.conv3x3": [[24, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.decoder_block.Decoder_Module.__init__": [[18, 33], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU"], ["    ", "def", "__init__", "(", "self", ",", "bn_type", "=", "None", ",", "inplane1", "=", "512", ",", "inplane2", "=", "256", ",", "outplane", "=", "128", ")", ":", "\n", "        ", "super", "(", "Decoder_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplane1", ",", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "256", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplane2", ",", "48", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "48", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "304", ",", "outplane", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "outplane", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outplane", ",", "outplane", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "outplane", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.decoder_block.Decoder_Module.forward": [[35, 42], ["decoder_block.Decoder_Module.size", "torch.nn.functional.interpolate", "decoder_block.Decoder_Module.conv2", "torch.cat", "decoder_block.Decoder_Module.conv3"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "xt", ",", "xl", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "xl", ".", "size", "(", ")", "\n", "xt", "=", "F", ".", "interpolate", "(", "xt", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "xl", "=", "self", ".", "conv2", "(", "xl", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "xt", ",", "xl", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.decoder_block.CE2P_Decoder_Module.__init__": [[46, 65], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "dropout", "=", "0", ",", "bn_type", "=", "None", ",", "inplane1", "=", "512", ",", "inplane2", "=", "256", ")", ":", "\n", "        ", "super", "(", "CE2P_Decoder_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplane1", ",", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "256", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplane2", ",", "48", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "48", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "304", ",", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "256", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "256", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "dropout", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.decoder_block.CE2P_Decoder_Module.forward": [[66, 74], ["decoder_block.CE2P_Decoder_Module.size", "torch.nn.functional.interpolate", "decoder_block.CE2P_Decoder_Module.conv2", "torch.cat", "decoder_block.CE2P_Decoder_Module.conv3", "decoder_block.CE2P_Decoder_Module.conv4", "decoder_block.CE2P_Decoder_Module.conv1"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "xt", ",", "xl", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "xl", ".", "size", "(", ")", "\n", "xt", "=", "F", ".", "interpolate", "(", "self", ".", "conv1", "(", "xt", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "xl", "=", "self", ".", "conv2", "(", "xl", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "xt", ",", "xl", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "seg", "=", "self", ".", "conv4", "(", "x", ")", "\n", "return", "seg", ",", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gat_conv.GATConv.__init__": [[50, 73], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "gat_conv.GATConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "gat_conv.GATConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "heads", "=", "1", ",", "concat", "=", "True", ",", "\n", "negative_slope", "=", "0.2", ",", "dropout", "=", "0", ",", "bias", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GATConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "in_channels", ",", "heads", "*", "out_channels", ")", ")", "\n", "self", ".", "att", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "heads", ",", "2", "*", "out_channels", ")", ")", "\n", "\n", "if", "bias", "and", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "heads", "*", "out_channels", ")", ")", "\n", "", "elif", "bias", "and", "not", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gat_conv.GATConv.reset_parameters": [[74, 78], ["inits.glorot", "inits.glorot", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.glorot", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.glorot", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "weight", ")", "\n", "glorot", "(", "self", ".", "att", ")", "\n", "zeros", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gat_conv.GATConv.forward": [[79, 92], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "gat_conv.GATConv.propagate", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "gat_conv.GATConv.", "gat_conv.GATConv.", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.size", "torch.matmul.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "size", "is", "None", "and", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "edge_index", ",", "_", "=", "remove_self_loops", "(", "edge_index", ")", "\n", "edge_index", ",", "_", "=", "add_self_loops", "(", "edge_index", ",", "num_nodes", "=", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "x", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "(", "None", "if", "x", "[", "0", "]", "is", "None", "else", "torch", ".", "matmul", "(", "x", "[", "0", "]", ",", "self", ".", "weight", ")", ",", "\n", "None", "if", "x", "[", "1", "]", "is", "None", "else", "torch", ".", "matmul", "(", "x", "[", "1", "]", ",", "self", ".", "weight", ")", ")", "\n", "\n", "", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "size", ",", "x", "=", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gat_conv.GATConv.message": [[93, 109], ["x_j.view.view.view", "torch.leaky_relu", "torch.leaky_relu", "torch_geometric.utils.softmax", "torch.dropout", "torch.dropout", "x_i.view.view.view", "torch.dropout.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "edge_index_i", ",", "x_i", ",", "x_j", ",", "size_i", ")", ":", "\n", "# Compute attention coefficients.", "\n", "        ", "x_j", "=", "x_j", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", "\n", "if", "x_i", "is", "None", ":", "\n", "            ", "alpha", "=", "(", "x_j", "*", "self", ".", "att", "[", ":", ",", ":", ",", "self", ".", "out_channels", ":", "]", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_i", "=", "x_i", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", "\n", "alpha", "=", "(", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", "]", ",", "dim", "=", "-", "1", ")", "*", "self", ".", "att", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "edge_index_i", ",", "size_i", ")", "\n", "\n", "# Sample attention coefficients stochastically.", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "x_j", "*", "alpha", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gat_conv.GATConv.update": [[110, 119], ["aggr_out.mean.mean.view", "aggr_out.mean.mean.mean"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "if", "self", ".", "concat", "is", "True", ":", "\n", "            ", "aggr_out", "=", "aggr_out", ".", "view", "(", "-", "1", ",", "self", ".", "heads", "*", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "aggr_out", "=", "aggr_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "aggr_out", "=", "aggr_out", "+", "self", ".", "bias", "\n", "", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gat_conv.GATConv.__repr__": [[120, 124], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, heads={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "heads", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.init": [[49, 97], ["logging.getLogger", "logging.Formatter", "os.path.dirname", "Logger.logger.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "Logger.logger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "Logger.logger.addHandler", "os.path.abspath", "os.path.exists", "os.makedirs", "print", "Logger.logger.setLevel", "print"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "init", "(", "logfile_level", "=", "DEFAULT_LOGFILE_LEVEL", ",", "\n", "log_file", "=", "DEFAULT_LOG_FILE", ",", "\n", "log_format", "=", "DEFAULT_LOG_FORMAT", ",", "\n", "rewrite", "=", "False", ",", "\n", "stdout_level", "=", "None", ")", ":", "\n", "        ", "Logger", ".", "logfile_level", "=", "logfile_level", "\n", "Logger", ".", "log_file", "=", "log_file", "\n", "Logger", ".", "log_format", "=", "log_format", "\n", "Logger", ".", "rewrite", "=", "rewrite", "\n", "Logger", ".", "stdout_level", "=", "stdout_level", "\n", "\n", "Logger", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "fmt", "=", "logging", ".", "Formatter", "(", "Logger", ".", "log_format", ")", "\n", "\n", "if", "Logger", ".", "logfile_level", "is", "not", "None", ":", "\n", "            ", "filemode", "=", "'w'", "\n", "if", "not", "Logger", ".", "rewrite", ":", "\n", "                ", "filemode", "=", "'a'", "\n", "\n", "", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "Logger", ".", "log_file", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n", "", "if", "Logger", ".", "logfile_level", "not", "in", "LOG_LEVEL_DICT", ":", "\n", "                ", "print", "(", "'Invalid logging level: {}'", ".", "format", "(", "Logger", ".", "logfile_level", ")", ")", "\n", "Logger", ".", "logfile_level", "=", "DEFAULT_LOGFILE_LEVEL", "\n", "\n", "", "Logger", ".", "logger", ".", "setLevel", "(", "LOG_LEVEL_DICT", "[", "Logger", ".", "logfile_level", "]", ")", "\n", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "Logger", ".", "log_file", ",", "mode", "=", "filemode", ")", "\n", "fh", ".", "setFormatter", "(", "fmt", ")", "\n", "fh", ".", "setLevel", "(", "LOG_LEVEL_DICT", "[", "Logger", ".", "logfile_level", "]", ")", "\n", "\n", "Logger", ".", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "if", "stdout_level", "is", "not", "None", ":", "\n", "            ", "if", "Logger", ".", "logfile_level", "is", "None", ":", "\n", "                ", "Logger", ".", "logger", ".", "setLevel", "(", "LOG_LEVEL_DICT", "[", "Logger", ".", "stdout_level", "]", ")", "\n", "\n", "", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "if", "Logger", ".", "stdout_level", "not", "in", "LOG_LEVEL_DICT", ":", "\n", "                ", "print", "(", "'Invalid logging level: {}'", ".", "format", "(", "Logger", ".", "stdout_level", ")", ")", "\n", "return", "\n", "\n", "", "console", ".", "setLevel", "(", "LOG_LEVEL_DICT", "[", "Logger", ".", "stdout_level", "]", ")", "\n", "console", ".", "setFormatter", "(", "fmt", ")", "\n", "Logger", ".", "logger", ".", "addHandler", "(", "console", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.set_log_file": [[98, 102], ["logger.Logger.init"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.init"], ["", "", "@", "staticmethod", "\n", "def", "set_log_file", "(", "file_path", ")", ":", "\n", "        ", "Logger", ".", "log_file", "=", "file_path", "\n", "Logger", ".", "init", "(", "log_file", "=", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.set_logfile_level": [[103, 110], ["logger.Logger.init", "print"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.init"], ["", "@", "staticmethod", "\n", "def", "set_logfile_level", "(", "log_level", ")", ":", "\n", "        ", "if", "log_level", "not", "in", "LOG_LEVEL_DICT", ":", "\n", "            ", "print", "(", "'Invalid logging level: {}'", ".", "format", "(", "log_level", ")", ")", "\n", "return", "\n", "\n", "", "Logger", ".", "init", "(", "logfile_level", "=", "log_level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.clear_log_file": [[111, 115], ["logger.Logger.init"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.init"], ["", "@", "staticmethod", "\n", "def", "clear_log_file", "(", ")", ":", "\n", "        ", "Logger", ".", "rewrite", "=", "True", "\n", "Logger", ".", "init", "(", "rewrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.check_logger": [[116, 120], ["logger.Logger.init"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.init"], ["", "@", "staticmethod", "\n", "def", "check_logger", "(", ")", ":", "\n", "        ", "if", "Logger", ".", "logger", "is", "None", ":", "\n", "            ", "Logger", ".", "init", "(", "logfile_level", "=", "None", ",", "stdout_level", "=", "DEFAULT_STDOUT_LEVEL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.set_stdout_level": [[121, 128], ["logger.Logger.init", "print"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.init"], ["", "", "@", "staticmethod", "\n", "def", "set_stdout_level", "(", "log_level", ")", ":", "\n", "        ", "if", "log_level", "not", "in", "LOG_LEVEL_DICT", ":", "\n", "            ", "print", "(", "'Invalid logging level: {}'", ".", "format", "(", "log_level", ")", ")", "\n", "return", "\n", "\n", "", "Logger", ".", "init", "(", "stdout_level", "=", "log_level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug": [[129, 136], ["Logger.check_logger", "os.path.basename", "Logger.logger.debug", "sys._getframe", "sys._getframe"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.check_logger", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "@", "staticmethod", "\n", "def", "debug", "(", "message", ")", ":", "\n", "        ", "Logger", ".", "check_logger", "(", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_code", ".", "co_filename", ")", "\n", "lineno", "=", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_lineno", "\n", "prefix", "=", "'[{}, {}]'", ".", "format", "(", "filename", ",", "lineno", ")", "\n", "Logger", ".", "logger", ".", "debug", "(", "'{} {}'", ".", "format", "(", "prefix", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info": [[137, 144], ["Logger.check_logger", "os.path.basename", "Logger.logger.info", "sys._getframe", "sys._getframe"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.check_logger", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "@", "staticmethod", "\n", "def", "info", "(", "message", ")", ":", "\n", "        ", "Logger", ".", "check_logger", "(", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_code", ".", "co_filename", ")", "\n", "lineno", "=", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_lineno", "\n", "prefix", "=", "'[{}, {}]'", ".", "format", "(", "filename", ",", "lineno", ")", "\n", "Logger", ".", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "prefix", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info_once": [[145, 157], ["Logger.check_logger", "os.path.basename", "Logger.logger.info", "Logger._caches.get", "sys._getframe", "sys._getframe"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.check_logger", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "@", "staticmethod", "\n", "def", "info_once", "(", "message", ")", ":", "\n", "        ", "Logger", ".", "check_logger", "(", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_code", ".", "co_filename", ")", "\n", "lineno", "=", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_lineno", "\n", "prefix", "=", "'[{}, {}]'", ".", "format", "(", "filename", ",", "lineno", ")", "\n", "\n", "if", "Logger", ".", "_caches", ".", "get", "(", "(", "prefix", ",", "message", ")", ")", "is", "not", "None", ":", "\n", "            ", "return", "\n", "\n", "", "Logger", ".", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "prefix", ",", "message", ")", ")", "\n", "Logger", ".", "_caches", "[", "(", "prefix", ",", "message", ")", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.warn": [[158, 165], ["Logger.check_logger", "os.path.basename", "Logger.logger.warn", "sys._getframe", "sys._getframe"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.check_logger", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.warn"], ["", "@", "staticmethod", "\n", "def", "warn", "(", "message", ")", ":", "\n", "        ", "Logger", ".", "check_logger", "(", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_code", ".", "co_filename", ")", "\n", "lineno", "=", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_lineno", "\n", "prefix", "=", "'[{}, {}]'", ".", "format", "(", "filename", ",", "lineno", ")", "\n", "Logger", ".", "logger", ".", "warn", "(", "'{} {}'", ".", "format", "(", "prefix", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error": [[166, 173], ["Logger.check_logger", "os.path.basename", "Logger.logger.error", "sys._getframe", "sys._getframe"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.check_logger", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error"], ["", "@", "staticmethod", "\n", "def", "error", "(", "message", ")", ":", "\n", "        ", "Logger", ".", "check_logger", "(", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_code", ".", "co_filename", ")", "\n", "lineno", "=", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_lineno", "\n", "prefix", "=", "'[{}, {}]'", ".", "format", "(", "filename", ",", "lineno", ")", "\n", "Logger", ".", "logger", ".", "error", "(", "'{} {}'", ".", "format", "(", "prefix", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.critical": [[174, 181], ["Logger.check_logger", "os.path.basename", "Logger.logger.critical", "sys._getframe", "sys._getframe"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.check_logger", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.critical"], ["", "@", "staticmethod", "\n", "def", "critical", "(", "message", ")", ":", "\n", "        ", "Logger", ".", "check_logger", "(", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_code", ".", "co_filename", ")", "\n", "lineno", "=", "sys", ".", "_getframe", "(", ")", ".", "f_back", ".", "f_lineno", "\n", "prefix", "=", "'[{}, {}]'", ".", "format", "(", "filename", ",", "lineno", ")", "\n", "Logger", ".", "logger", ".", "critical", "(", "'{} {}'", ".", "format", "(", "prefix", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GumbleSoftmax.__init__": [[20, 23], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "hard", "=", "False", ")", ":", "\n", "        ", "super", "(", "GumbleSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hard", "=", "hard", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GumbleSoftmax.sample_gumbel_like": [[31, 35], ["template_tensor.clone().uniform_", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "template_tensor.clone", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "sample_gumbel_like", "(", "self", ",", "template_tensor", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "uniform_samples_tensor", "=", "template_tensor", ".", "clone", "(", ")", ".", "uniform_", "(", ")", "\n", "gumble_samples_tensor", "=", "-", "torch", ".", "log", "(", "eps", "-", "torch", ".", "log", "(", "uniform_samples_tensor", "+", "eps", ")", ")", "\n", "return", "gumble_samples_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GumbleSoftmax.gumbel_softmax_sample": [[36, 43], ["logits.size", "gating_mod.GumbleSoftmax.sample_gumbel_like", "torch.softmax", "torch.softmax", "torch.softmax", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GumbleSoftmax.sample_gumbel_like"], ["", "def", "gumbel_softmax_sample", "(", "self", ",", "logits", ",", "temperature", ")", ":", "\n", "        ", "\"\"\" Draw a sample from the Gumbel-Softmax distribution\"\"\"", "\n", "dim", "=", "logits", ".", "size", "(", "-", "1", ")", "\n", "gumble_samples_tensor", "=", "self", ".", "sample_gumbel_like", "(", "logits", ".", "data", ")", "\n", "gumble_trick_log_prob_samples", "=", "logits", "+", "Variable", "(", "gumble_samples_tensor", ")", "\n", "soft_samples", "=", "F", ".", "softmax", "(", "gumble_trick_log_prob_samples", "/", "temperature", ",", "dim", ")", "\n", "return", "soft_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GumbleSoftmax.gumbel_softmax": [[44, 60], ["gating_mod.GumbleSoftmax.gumbel_softmax_sample", "gating_mod.GumbleSoftmax.data.max", "logits.data.clone().zero_().scatter_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "logits.data.clone().zero_", "logits.data.clone"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GumbleSoftmax.gumbel_softmax_sample"], ["", "def", "gumbel_softmax", "(", "self", ",", "logits", ",", "temperature", ",", "hard", "=", "False", ")", ":", "\n", "        ", "\"\"\"Sample from the Gumbel-Softmax distribution and optionally discretize.\n        Args: logits: [batch_size, n_class] unnormalized log-probs\n              temperature: non-negative scalar\n              hard: if True, take argmax, but differentiate w.r.t. soft sample y\n        Returns: [batch_size, n_class] sample from the Gumbel-Softmax distribution.\n\n        If hard=True, then the returned sample will be one-hot, otherwise it will\n        be a probabilitiy distribution that sums to 1 across classes\n        \"\"\"", "\n", "y", "=", "self", ".", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", "\n", "if", "hard", ":", "\n", "            ", "_", ",", "max_value_indexes", "=", "y", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "y_hard", "=", "logits", ".", "data", ".", "clone", "(", ")", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "max_value_indexes", ",", "1", ")", "\n", "y", "=", "Variable", "(", "y_hard", "-", "y", ".", "data", ")", "+", "y", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GumbleSoftmax.forward": [[61, 67], ["gating_mod.GumbleSoftmax.gumbel_softmax", "gating_mod.GumbleSoftmax.gumbel_softmax"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GumbleSoftmax.gumbel_softmax", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GumbleSoftmax.gumbel_softmax"], ["", "def", "forward", "(", "self", ",", "logits", ",", "temp", "=", "1", ",", "force_hard", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "training", "and", "not", "force_hard", ":", "\n", "            ", "return", "self", ".", "gumbel_softmax", "(", "logits", ",", "temperature", "=", "1", ",", "hard", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "gumbel_softmax", "(", "logits", ",", "temperature", "=", "1", ",", "hard", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GatingBlock.__init__": [[72, 80], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "GumbleSoftmax().cuda", "gating_mod.GumbleSoftmax"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "force_hard", ")", ":", "\n", "        ", "super", "(", "GatingBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "force_hard", "=", "force_hard", "\n", "# Gate layers", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc1_bn", "=", "BatchNorm2d", "(", "out_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "out_dim", ",", "2", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "gs", "=", "GumbleSoftmax", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.GatingBlock.forward": [[81, 94], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "gating_mod.GatingBlock.fc2", "gating_mod.GatingBlock.gs", "gating_mod.GatingBlock.fc1_bn", "w[].unsqueeze", "gating_mod.GatingBlock.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "temperature", "=", "1", ")", ":", "\n", "# Compute relevance score", "\n", "# w = F.avg_pool2d(x, x.size(2))", "\n", "        ", "w", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1_bn", "(", "self", ".", "fc1", "(", "w", ")", ")", ")", "\n", "w", "=", "self", ".", "fc2", "(", "w", ")", "\n", "# Sample from Gumble Module", "\n", "w", "=", "self", ".", "gs", "(", "w", ",", "temp", "=", "temperature", ",", "force_hard", "=", "self", ".", "force_hard", ")", "\n", "\n", "out", "=", "x", "*", "w", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "# Return output of layer and the value of the gate", "\n", "# The value of the gate will be used in the target rate loss", "\n", "return", "out", ",", "w", "[", ":", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.SpatialDropout.__init__": [[99, 103], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", ")", ":", "\n", "\n", "        ", "super", "(", "SpatialDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.SpatialDropout.forward": [[104, 117], ["inputs.clone", "gating_mod.SpatialDropout._make_noise", "noise.expand_as.expand_as.expand_as", "inputs.clone.mul_", "noise.expand_as.expand_as.fill_", "noise.expand_as.expand_as.bernoulli_().div_", "noise.expand_as.expand_as.bernoulli_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.SpatialDropout._make_noise"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "output", "=", "inputs", ".", "clone", "(", ")", "\n", "if", "not", "self", ".", "training", "or", "self", ".", "drop_prob", "==", "0", ":", "\n", "            ", "return", "inputs", "\n", "", "else", ":", "\n", "            ", "noise", "=", "self", ".", "_make_noise", "(", "inputs", ")", "\n", "if", "self", ".", "drop_prob", "==", "1", ":", "\n", "                ", "noise", ".", "fill_", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "noise", ".", "bernoulli_", "(", "1", "-", "self", ".", "drop_prob", ")", ".", "div_", "(", "1", "-", "self", ".", "drop_prob", ")", "\n", "", "noise", "=", "noise", ".", "expand_as", "(", "inputs", ")", "\n", "output", ".", "mul_", "(", "noise", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gating_mod.SpatialDropout._make_noise": [[118, 120], ["input.new().resize_", "input.size", "input.size", "input.new", "itertools.repeat", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["", "def", "_make_noise", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "new", "(", ")", ".", "resize_", "(", "input", ".", "size", "(", "0", ")", ",", "*", "repeat", "(", "1", ",", "input", ".", "dim", "(", ")", "-", "2", ")", ",", "input", ".", "size", "(", "2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.SEModule.__init__": [[91, 100], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.SEModule.forward": [[101, 109], ["senet.SEModule.avg_pool", "senet.SEModule.fc1", "senet.SEModule.relu", "senet.SEModule.fc2", "senet.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.Bottleneck.forward": [[116, 137], ["senet.Bottleneck.conv1", "senet.Bottleneck.bn1", "senet.Bottleneck.relu", "senet.Bottleneck.conv2", "senet.Bottleneck.bn2", "senet.Bottleneck.relu", "senet.Bottleneck.conv3", "senet.Bottleneck.bn3", "senet.Bottleneck.relu_inplace", "senet.Bottleneck.downsample", "senet.Bottleneck.se_module"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "se_module", "(", "out", ")", "+", "residual", "\n", "out", "=", "self", ".", "relu_inplace", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.SEBottleneck.__init__": [[235, 253], ["torch.Module.__init__", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "senet.SEModule"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "2", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", "*", "2", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_inplace", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.SEResNetBottleneck.__init__": [[262, 279], ["torch.Module.__init__", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "senet.SEModule"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_inplace", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.SEResNeXtBottleneck.__init__": [[286, 303], ["torch.Module.__init__", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "senet.SEModule", "math.floor"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "base_width", "=", "4", ")", ":", "\n", "        ", "super", "(", "SEResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "math", ".", "floor", "(", "planes", "*", "(", "base_width", "/", "64", ")", ")", "*", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "stride", "=", "1", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "width", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "width", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_inplace", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.SENet.__init__": [[306, 419], ["torch.Module.__init__", "layer0_modules.append", "torch.Sequential", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "collections.OrderedDict", "torch.MaxPool2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.Conv2d", "BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "groups", ",", "reduction", ",", "dropout_p", "=", "0.2", ",", "\n", "inplanes", "=", "128", ",", "input_3x3", "=", "True", ",", "downsample_kernel_size", "=", "3", ",", "\n", "downsample_padding", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        block (nn.Module): Bottleneck class.\n            - For SENet154: SEBottleneck\n            - For SE-ResNet models: SEResNetBottleneck\n            - For SE-ResNeXt models:  SEResNeXtBottleneck\n        layers (list of ints): Number of residual blocks for 4 layers of the\n            network (layer1...layer4).\n        groups (int): Number of groups for the 3x3 convolution in each\n            bottleneck block.\n            - For SENet154: 64\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models:  32\n        reduction (int): Reduction ratio for Squeeze-and-Excitation modules.\n            - For all models: 16\n        dropout_p (float or None): Drop probability for the Dropout layer.\n            If `None` the Dropout layer is not used.\n            - For SENet154: 0.2\n            - For SE-ResNet models: None\n            - For SE-ResNeXt models: None\n        inplanes (int):  Number of input channels for layer1.\n            - For SENet154: 128\n            - For SE-ResNet models: 64\n            - For SE-ResNeXt models: 64\n        input_3x3 (bool): If `True`, use three 3x3 convolutions instead of\n            a single 7x7 convolution in layer0.\n            - For SENet154: True\n            - For SE-ResNet models: False\n            - For SE-ResNeXt models: False\n        downsample_kernel_size (int): Kernel size for downsampling convolutions\n            in layer2, layer3 and layer4.\n            - For SENet154: 3\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models: 1\n        downsample_padding (int): Padding for downsampling convolutions in\n            layer2, layer3 and layer4.\n            - For SENet154: 1\n            - For SE-ResNet models: 0\n            - For SE-ResNeXt models: 0\n        num_classes (int): Number of outputs in `last_linear` layer.\n            - For all models: 1000\n        \"\"\"", "\n", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "if", "input_3x3", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn1'", ",", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ",", "\n", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn2'", ",", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ",", "\n", "(", "'conv3'", ",", "nn", ".", "Conv2d", "(", "64", ",", "inplanes", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn3'", ",", "BatchNorm2d", "(", "inplanes", ",", "affine", "=", "True", ")", ")", ",", "\n", "(", "'relu3'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn1'", ",", "BatchNorm2d", "(", "inplanes", ",", "affine", "=", "True", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ",", "\n", "]", "\n", "# To preserve compatibility with Caffe weights `ceil_mode=True`", "\n", "# is used instead of `padding=1`.", "\n", "", "layer0_modules", ".", "append", "(", "(", "'pool'", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "\n", "ceil_mode", "=", "True", ")", ")", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layer0_modules", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "64", ",", "\n", "blocks", "=", "layers", "[", "0", "]", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "128", ",", "\n", "blocks", "=", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "256", ",", "\n", "blocks", "=", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "512", ",", "\n", "blocks", "=", "layers", "[", "3", "]", ",", "\n", "stride", "=", "1", ",", "dilation", "=", "2", ",", "multi_grid", "=", "True", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.SENet._make_layer": [[440, 462], ["layers.append", "torch.Sequential", "torch.Sequential", "block", "range", "range", "torch.Conv2d", "BatchNorm2d", "layers.append", "layers.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "multi_grid", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "downsample_kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "downsample_padding", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", ",", "\n", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "multi_grid", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "dilation", "=", "dilation", "**", "(", "i", "+", "1", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.SENet.forward": [[464, 471], ["senet.SENet.layer0", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer1", "(", "x0", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "return", "x1", ",", "x2", ",", "x3", ",", "x4", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.initialize_pretrained_model": [[473, 483], ["model.load_state_dict", "torch.utils.model_zoo.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "", "def", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", ":", "\n", "    ", "assert", "num_classes", "==", "settings", "[", "'num_classes'", "]", ",", "'num_classes should be {}, but is {}'", ".", "format", "(", "\n", "settings", "[", "'num_classes'", "]", ",", "num_classes", ")", "\n", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "settings", "[", "'url'", "]", ")", ")", "\n", "model", ".", "input_space", "=", "settings", "[", "'input_space'", "]", "\n", "model", ".", "input_size", "=", "settings", "[", "'input_size'", "]", "\n", "model", ".", "input_range", "=", "settings", "[", "'input_range'", "]", "\n", "model", ".", "mean", "=", "settings", "[", "'mean'", "]", "\n", "model", ".", "std", "=", "settings", "[", "'std'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.se_resnet50": [[494, 503], ["senet.SENet", "senet.initialize_pretrained_model"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.initialize_pretrained_model"], ["", "def", "se_resnet50", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", ":", "\n", "    ", "model", "=", "SENet", "(", "SEResNetBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "groups", "=", "1", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "inplanes", "=", "64", ",", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "settings", "=", "pretrained_settings", "[", "'se_resnet50'", "]", "[", "pretrained", "]", "\n", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.se_resnet152": [[516, 525], ["senet.SENet", "senet.initialize_pretrained_model"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.initialize_pretrained_model"], ["", "def", "se_resnet152", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", ":", "\n", "    ", "model", "=", "SENet", "(", "SEResNetBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "groups", "=", "1", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "inplanes", "=", "64", ",", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "settings", "=", "pretrained_settings", "[", "'se_resnet152'", "]", "[", "pretrained", "]", "\n", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.se_resnext101_32x4d": [[538, 547], ["senet.SENet", "senet.initialize_pretrained_model"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.initialize_pretrained_model"], ["", "def", "se_resnext101_32x4d", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", ":", "\n", "    ", "model", "=", "SENet", "(", "SEResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "groups", "=", "32", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "inplanes", "=", "64", ",", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "settings", "=", "pretrained_settings", "[", "'se_resnext101_32x4d'", "]", "[", "pretrained", "]", "\n", "initialize_pretrained_model", "(", "model", ",", "num_classes", ",", "settings", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.se_resnext50_32x4d": [[549, 554], ["senet.SENet"], "function", ["None"], ["", "def", "se_resnext50_32x4d", "(", ")", ":", "\n", "    ", "model", "=", "SENet", "(", "SEResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "groups", "=", "32", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "inplanes", "=", "64", ",", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.se_resnet101": [[556, 562], ["senet.SENet"], "function", ["None"], ["", "def", "se_resnet101", "(", ")", ":", "\n", "    ", "model", "=", "SENet", "(", "SEResNetBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "groups", "=", "1", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "inplanes", "=", "64", ",", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.senet.senet154": [[563, 567], ["senet.SENet"], "function", ["None"], ["", "def", "senet154", "(", ")", ":", "\n", "    ", "model", "=", "SENet", "(", "SEBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "groups", "=", "64", ",", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "0.2", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convGRU.ConvGRUCell.__init__": [[11, 45], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.init.orthogonal_", "torch.nn.init.constant_", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "bias", ",", "dtype", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the ConvLSTM cell\n        :param input_size: (int, int)\n            Height and width of input tensor as (height, width).\n        :param input_dim: int\n            Number of channels of input tensor.\n        :param hidden_dim: int\n            Number of channels of hidden state.\n        :param kernel_size: (int, int)\n            Size of the convolutional kernel.\n        :param bias: bool\n            Whether or not to add the bias.\n        :param dtype: torch.cuda.FloatTensor or torch.FloatTensor\n            Whether or not to use cuda.\n        \"\"\"", "\n", "super", "(", "ConvGRUCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "height", ",", "self", ".", "width", "=", "input_size", "\n", "self", ".", "padding", "=", "kernel_size", "[", "0", "]", "//", "2", ",", "kernel_size", "[", "1", "]", "//", "2", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "conv_gates", "=", "nn", ".", "Conv2d", "(", "input_dim", "+", "hidden_dim", ",", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_can", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_dim", "+", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "self", ".", "padding", ",", "stride", "=", "1", ",", "bias", "=", "self", ".", "bias", ")", ",", "\n", ")", "\n", "# self.conv_can = nn.Sequential(", "\n", "#     nn.Conv2d(input_dim + hidden_dim, 2*hidden_dim, kernel_size=kernel_size, padding=self.padding, stride=1, bias=False),", "\n", "#     InPlaceABNSync(2*hidden_dim),", "\n", "#     nn.Conv2d(2*hidden_dim, hidden_dim, kernel_size=kernel_size, padding=self.padding, stride=1, bias=True),", "\n", "#     BatchNorm2d(hidden_dim)", "\n", "# )", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "conv_gates", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_gates", ".", "bias", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convGRU.ConvGRUCell.init_hidden": [[46, 48], ["torch.autograd.Variable().type", "torch.autograd.Variable", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_dim", ",", "self", ".", "height", ",", "self", ".", "width", ")", ")", ".", "type", "(", "self", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convGRU.ConvGRUCell.forward": [[49, 73], ["torch.cat", "convGRU.ConvGRUCell.conv_gates", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.cat", "convGRU.ConvGRUCell.conv_can", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "h_cur", ")", ":", "\n", "        ", "\"\"\"\n\n        :param self:\n        :param input_tensor: (b, c, h, w)\n            input is actually the target_model\n        :param h_cur: (b, c_hidden, h, w)\n            current hidden and cell states respectively\n        :return: h_next,\n            next hidden state\n        \"\"\"", "\n", "combined", "=", "torch", ".", "cat", "(", "[", "input_tensor", ",", "h_cur", "]", ",", "dim", "=", "1", ")", "\n", "combined_conv", "=", "self", ".", "conv_gates", "(", "combined", ")", "\n", "\n", "gamma", ",", "beta", "=", "torch", ".", "split", "(", "combined_conv", ",", "1", ",", "dim", "=", "1", ")", "\n", "reset_gate", "=", "torch", ".", "sigmoid", "(", "gamma", ")", "\n", "update_gate", "=", "torch", ".", "sigmoid", "(", "beta", ")", "\n", "\n", "combined", "=", "torch", ".", "cat", "(", "[", "input_tensor", ",", "reset_gate", "*", "h_cur", "]", ",", "dim", "=", "1", ")", "\n", "cc_cnm", "=", "self", ".", "conv_can", "(", "combined", ")", "\n", "cnm", "=", "torch", ".", "tanh", "(", "cc_cnm", ")", "\n", "\n", "h_next", "=", "(", "1", "-", "update_gate", ")", "*", "h_cur", "+", "update_gate", "*", "cnm", "\n", "return", "h_next", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convGRU.ConvGRU.__init__": [[76, 131], ["torch.nn.Module.__init__", "convGRU.ConvGRU._extend_for_multilayer", "convGRU.ConvGRU._extend_for_multilayer", "range", "torch.nn.ModuleList", "ValueError", "cell_list.append", "len", "len", "convGRU.ConvGRUCell"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._extend_for_multilayer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._extend_for_multilayer"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "num_layers", ",", "\n", "dtype", ",", "batch_first", "=", "False", ",", "bias", "=", "True", ",", "return_all_layers", "=", "False", ",", "input_size", "=", "(", "6", ",", "6", ")", ")", ":", "\n", "        ", "\"\"\"\n\n        :param input_size: (int, int)\n            Height and width of input tensor as (height, width).\n        :param input_dim: int e.g. 256\n            Number of channels of input tensor.\n        :param hidden_dim: int e.g. 1024\n            Number of channels of hidden state.\n        :param kernel_size: (int, int)\n            Size of the convolutional kernel.\n        :param num_layers: int\n            Number of ConvLSTM layers\n        :param dtype: torch.cuda.FloatTensor or torch.FloatTensor\n            Whether or not to use cuda.\n        :param alexnet_path: str\n            pretrained alexnet parameters\n        :param batch_first: bool\n            if the first position of array is batch or not\n        :param bias: bool\n            Whether or not to add the bias.\n        :param return_all_layers: bool\n            if return hidden and cell states for all layers\n        \"\"\"", "\n", "super", "(", "ConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Make sure that both `kernel_size` and `hidden_dim` are lists having len == num_layers", "\n", "kernel_size", "=", "self", ".", "_extend_for_multilayer", "(", "kernel_size", ",", "num_layers", ")", "\n", "hidden_dim", "=", "self", ".", "_extend_for_multilayer", "(", "hidden_dim", ",", "num_layers", ")", "\n", "if", "not", "len", "(", "kernel_size", ")", "==", "len", "(", "hidden_dim", ")", "==", "num_layers", ":", "\n", "            ", "raise", "ValueError", "(", "'Inconsistent list length.'", ")", "\n", "\n", "", "self", ".", "height", ",", "self", ".", "width", "=", "input_size", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "return_all_layers", "=", "return_all_layers", "\n", "\n", "cell_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_layers", ")", ":", "\n", "            ", "cur_input_dim", "=", "input_dim", "if", "i", "==", "0", "else", "hidden_dim", "[", "i", "-", "1", "]", "\n", "cell_list", ".", "append", "(", "ConvGRUCell", "(", "input_size", "=", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "\n", "input_dim", "=", "cur_input_dim", ",", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", "[", "i", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", "[", "i", "]", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", ")", "\n", "\n", "# convert python list to pytorch module", "\n", "", "self", ".", "cell_list", "=", "nn", ".", "ModuleList", "(", "cell_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convGRU.ConvGRU.forward": [[132, 179], ["input_tensor.permute.permute.size", "range", "input_tensor.permute.permute.permute", "convGRU.ConvGRU._init_hidden", "range", "torch.stack", "layer_output_list.append", "last_state_list.append", "output_inner.append", "input_tensor.permute.permute.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._init_hidden", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "hidden_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param input_tensor: (b, t, c, h, w) or (t,b,c,h,w) depends on if batch first or not\n            extracted features from alexnet\n        :param hidden_state:\n        :return: layer_output_list, last_state_list\n        \"\"\"", "\n", "if", "not", "self", ".", "batch_first", ":", "\n", "# (t, b, c, h, w) -> (b, t, c, h, w)", "\n", "            ", "input_tensor", "=", "input_tensor", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "\n", "# Implement stateful ConvLSTM", "\n", "# if hidden_state is not None:", "\n", "#     raise NotImplementedError()", "\n", "# else:", "\n", "#     hidden_state = self._init_hidden(batch_size=input_tensor.size(0))", "\n", "\n", "", "if", "hidden_state", "is", "None", ":", "\n", "            ", "hidden_state", "=", "self", ".", "_init_hidden", "(", "batch_size", "=", "input_tensor", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "layer_output_list", "=", "[", "]", "\n", "last_state_list", "=", "[", "]", "\n", "\n", "seq_len", "=", "input_tensor", ".", "size", "(", "1", ")", "\n", "cur_layer_input", "=", "input_tensor", "\n", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "h", "=", "hidden_state", "[", "layer_idx", "]", "\n", "output_inner", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "seq_len", ")", ":", "\n", "# input current hidden and cell state then compute the next hidden and cell state through ConvLSTMCell forward function", "\n", "                ", "h", "=", "self", ".", "cell_list", "[", "layer_idx", "]", "(", "input_tensor", "=", "cur_layer_input", "[", ":", ",", "t", ",", ":", ",", ":", ",", ":", "]", ",", "# (b,t,c,h,w)", "\n", "h_cur", "=", "h", ")", "\n", "output_inner", ".", "append", "(", "h", ")", "\n", "\n", "", "layer_output", "=", "torch", ".", "stack", "(", "output_inner", ",", "dim", "=", "1", ")", "\n", "cur_layer_input", "=", "layer_output", "\n", "\n", "layer_output_list", ".", "append", "(", "layer_output", ")", "\n", "last_state_list", ".", "append", "(", "[", "h", "]", ")", "\n", "\n", "", "if", "not", "self", ".", "return_all_layers", ":", "\n", "            ", "layer_output_list", "=", "layer_output_list", "[", "-", "1", ":", "]", "\n", "last_state_list", "=", "last_state_list", "[", "-", "1", ":", "]", "\n", "\n", "", "return", "layer_output_list", ",", "last_state_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convGRU.ConvGRU._init_hidden": [[180, 185], ["range", "init_states.append", "convGRU.ConvGRU.cell_list[].init_hidden"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTMCell.init_hidden"], ["", "def", "_init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "init_states", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "init_states", ".", "append", "(", "self", ".", "cell_list", "[", "i", "]", ".", "init_hidden", "(", "batch_size", ")", ")", "\n", "", "return", "init_states", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convGRU.ConvGRU._check_kernel_size_consistency": [[186, 191], ["ValueError", "isinstance", "isinstance", "all", "isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_check_kernel_size_consistency", "(", "kernel_size", ")", ":", "\n", "        ", "if", "not", "(", "isinstance", "(", "kernel_size", ",", "tuple", ")", "or", "\n", "(", "isinstance", "(", "kernel_size", ",", "list", ")", "and", "all", "(", "[", "isinstance", "(", "elem", ",", "tuple", ")", "for", "elem", "in", "kernel_size", "]", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'`kernel_size` must be tuple or list of tuples'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convGRU.ConvGRU._extend_for_multilayer": [[192, 197], ["isinstance"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_extend_for_multilayer", "(", "param", ",", "num_layers", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "param", ",", "list", ")", ":", "\n", "            ", "param", "=", "[", "param", "]", "*", "num_layers", "\n", "", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_block.Edge_Module.__init__": [[18, 36], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "lib.modules.module_helper.ModuleHelper.BNReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU"], ["    ", "def", "__init__", "(", "self", ",", "mid_fea", ",", "out_fea", ",", "bn_type", "=", "None", ",", "factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "Edge_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "factor", "*", "256", ",", "mid_fea", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "mid_fea", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "factor", "*", "512", ",", "mid_fea", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "mid_fea", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "factor", "*", "1024", ",", "mid_fea", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "mid_fea", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "mid_fea", ",", "out_fea", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "out_fea", "*", "3", ",", "out_fea", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_block.Edge_Module.forward": [[37, 57], ["x1.size", "edge_block.Edge_Module.conv1", "edge_block.Edge_Module.conv4", "edge_block.Edge_Module.conv2", "edge_block.Edge_Module.conv4", "edge_block.Edge_Module.conv3", "edge_block.Edge_Module.conv4", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.cat", "torch.cat", "edge_block.Edge_Module.conv5"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "x3", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x1", ".", "size", "(", ")", "\n", "\n", "edge1_fea", "=", "self", ".", "conv1", "(", "x1", ")", "\n", "edge1", "=", "self", ".", "conv4", "(", "edge1_fea", ")", "\n", "edge2_fea", "=", "self", ".", "conv2", "(", "x2", ")", "\n", "edge2", "=", "self", ".", "conv4", "(", "edge2_fea", ")", "\n", "edge3_fea", "=", "self", ".", "conv3", "(", "x3", ")", "\n", "edge3", "=", "self", ".", "conv4", "(", "edge3_fea", ")", "\n", "\n", "edge2_fea", "=", "F", ".", "interpolate", "(", "edge2_fea", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "edge3_fea", "=", "F", ".", "interpolate", "(", "edge3_fea", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "edge2", "=", "F", ".", "interpolate", "(", "edge2", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "edge3", "=", "F", ".", "interpolate", "(", "edge3", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "edge_fea", "=", "torch", ".", "cat", "(", "[", "edge1_fea", ",", "edge2_fea", ",", "edge3_fea", "]", ",", "dim", "=", "1", ")", "\n", "edge", "=", "torch", ".", "cat", "(", "[", "edge1", ",", "edge2", ",", "edge3", "]", ",", "dim", "=", "1", ")", "\n", "edge", "=", "self", ".", "conv5", "(", "edge", ")", "\n", "\n", "return", "edge", ",", "edge_fea", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.BasicBlock.__init__": [[35, 48], ["torch.Module.__init__", "drn.conv3x3", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.conv3x3", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "\n", "padding", "=", "dilation", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ",", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.BasicBlock.forward": [[49, 66], ["drn.BasicBlock.conv1", "drn.BasicBlock.bn1", "drn.BasicBlock.relu", "drn.BasicBlock.conv2", "drn.BasicBlock.bn2", "drn.BasicBlock.relu", "drn.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "out", "+=", "residual", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.Bottleneck.__init__": [[71, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.Bottleneck.forward": [[86, 107], ["drn.Bottleneck.conv1", "drn.Bottleneck.bn1", "drn.Bottleneck.relu", "drn.Bottleneck.conv2", "drn.Bottleneck.bn2", "drn.Bottleneck.relu", "drn.Bottleneck.conv3", "drn.Bottleneck.bn3", "drn.Bottleneck.relu", "drn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN.__init__": [[111, 176], ["torch.Module.__init__", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN.modules", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._make_layer", "isinstance", "torch.Sequential", "torch.Sequential", "drn.DRN._make_conv_layers", "drn.DRN._make_conv_layers", "drn.DRN._make_layer", "drn.DRN._make_layer", "m.weight.data.normal_", "isinstance", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.DRN._make_conv_layers", "drn.DRN._make_conv_layers", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN._make_conv_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "\n", "channels", "=", "(", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", ",", "512", ",", "512", ")", ",", "\n", "out_map", "=", "False", ",", "out_middle", "=", "False", ",", "pool_size", "=", "28", ",", "arch", "=", "'D'", ")", ":", "\n", "        ", "super", "(", "DRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "channels", "[", "0", "]", "\n", "self", ".", "out_map", "=", "out_map", "\n", "self", ".", "out_dim", "=", "channels", "[", "-", "1", "]", "\n", "self", ".", "out_middle", "=", "out_middle", "\n", "self", ".", "arch", "=", "arch", "\n", "\n", "if", "arch", "==", "'C'", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "channels", "[", "0", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "BasicBlock", ",", "channels", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "BasicBlock", ",", "channels", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "", "elif", "arch", "==", "'D'", ":", "\n", "            ", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_conv_layers", "(", "\n", "channels", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_conv_layers", "(", "\n", "channels", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "\n", "", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "4", "]", ",", "layers", "[", "4", "]", ",", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "new_level", "=", "False", ")", "\n", "self", ".", "layer6", "=", "None", "if", "layers", "[", "5", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "5", "]", ",", "layers", "[", "5", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "\n", "new_level", "=", "False", ",", "multi_grid", "=", "False", ")", "\n", "\n", "if", "arch", "==", "'C'", ":", "\n", "            ", "self", ".", "layer7", "=", "None", "if", "layers", "[", "6", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "BasicBlock", ",", "channels", "[", "6", "]", ",", "layers", "[", "6", "]", ",", "dilation", "=", "2", ",", "\n", "new_level", "=", "False", ",", "residual", "=", "False", ")", "\n", "self", ".", "layer8", "=", "None", "if", "layers", "[", "7", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "BasicBlock", ",", "channels", "[", "7", "]", ",", "layers", "[", "7", "]", ",", "dilation", "=", "1", ",", "\n", "new_level", "=", "False", ",", "residual", "=", "False", ")", "\n", "", "elif", "arch", "==", "'D'", ":", "\n", "            ", "self", ".", "layer7", "=", "None", "if", "layers", "[", "6", "]", "==", "0", "else", "self", ".", "_make_conv_layers", "(", "channels", "[", "6", "]", ",", "layers", "[", "6", "]", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer8", "=", "None", "if", "layers", "[", "7", "]", "==", "0", "else", "self", ".", "_make_conv_layers", "(", "channels", "[", "7", "]", ",", "layers", "[", "7", "]", ",", "dilation", "=", "1", ")", "\n", "\n", "# if num_classes > 0:", "\n", "#     self.avgpool = nn.AvgPool2d(pool_size)", "\n", "#     self.fc = nn.Conv2d(self.out_dim, num_classes, kernel_size=1,", "\n", "#                         stride=1, padding=0, bias=True)", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN._make_layer": [[177, 208], ["list", "list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "range", "range", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "list.append", "list.append", "block", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "\n", "new_level", "=", "True", ",", "residual", "=", "True", ",", "multi_grid", "=", "False", ")", ":", "\n", "        ", "assert", "dilation", "==", "1", "or", "dilation", "%", "2", "==", "0", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "list", "(", ")", "\n", "layers", ".", "append", "(", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", "if", "dilation", "==", "1", "else", "(", "\n", "dilation", "//", "2", "if", "new_level", "else", "dilation", ",", "dilation", ")", ",", "\n", "residual", "=", "residual", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "multi_grid", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "residual", "=", "residual", ",", "dilation", "=", "(", "dilation", "**", "(", "i", "+", "1", ")", ",", "dilation", "**", "(", "i", "+", "1", ")", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "residual", "=", "residual", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ")", ")", ")", "\n", "\n", "# for i in range(1, blocks):", "\n", "#     layers.append(block(self.inplanes, planes, residual=residual,", "\n", "#                         dilation=(dilation, dilation)))", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN._make_conv_layers": [[209, 220], ["range", "torch.Sequential", "torch.Sequential", "modules.extend", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_conv_layers", "(", "self", ",", "channels", ",", "convs", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "convs", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", ",", "\n", "BatchNorm", "(", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN.forward": [[221, 269], ["list", "list", "drn.DRN.layer1", "list.append", "drn.DRN.layer2", "list.append", "drn.DRN.layer3", "list.append", "list.append", "drn.DRN.layer4", "list.append", "list.append", "drn.DRN.layer5", "list.append", "list.append", "drn.DRN.conv1", "drn.DRN.bn1", "drn.DRN.relu", "drn.DRN.layer6", "list.append", "drn.DRN.layer7", "list.append", "drn.DRN.layer8", "list.append", "list.append", "drn.DRN.layer0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "list", "(", ")", "\n", "yy", "=", "list", "(", ")", "\n", "if", "self", ".", "arch", "==", "'C'", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "elif", "self", ".", "arch", "==", "'D'", ":", "\n", "            ", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "yy", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "yy", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "yy", ".", "append", "(", "x", ")", "\n", "if", "self", ".", "layer6", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer6", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer7", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer7", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer8", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer8", "(", "x", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "yy", ".", "append", "(", "x", ")", "\n", "# if self.out_map:", "\n", "#     x = self.fc(x)", "\n", "# else:", "\n", "#     x = self.avgpool(x)", "\n", "#     x = self.fc(x)", "\n", "#     x = x.view(x.size(0), -1)", "\n", "#", "\n", "# if self.out_middle:", "\n", "#     return x, y", "\n", "# else:", "\n", "#     return x", "\n", "", "return", "yy", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN_A.__init__": [[273, 298], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "drn.DRN_A.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "DRN_A", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_dim", "=", "512", "*", "block", ".", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "28", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BatchNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN_A._make_layer": [[306, 323], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.DRN_A.forward": [[324, 340], ["drn.DRN_A.conv1", "drn.DRN_A.bn1", "drn.DRN_A.relu", "drn.DRN_A.maxpool", "drn.DRN_A.layer1", "drn.DRN_A.layer2", "drn.DRN_A.layer3", "drn.DRN_A.layer4", "drn.DRN_A.avgpool", "drn.DRN_A.view", "drn.DRN_A.fc", "drn.DRN_A.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.conv3x3": [[27, 30], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_a_50": [[342, 347], ["drn.DRN_A", "DRN_A.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "", "def", "drn_a_50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN_A", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_c_26": [[349, 354], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_c_26", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-26'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_c_42": [[356, 361], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_c_42", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-42'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_c_58": [[363, 368], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_c_58", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-58'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_d_22": [[370, 375], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_d_22", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-22'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_d_24": [[377, 382], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_d_24", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-24'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_d_38": [[384, 389], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_d_38", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-38'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_d_40": [[391, 396], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_d_40", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-40'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_d_54": [[398, 403], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_d_54", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-54'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_d_56": [[405, 410], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_d_56", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-56'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_d_105": [[412, 417], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_d_105", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "23", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-105'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.drn.drn_d_107": [[419, 424], ["drn.DRN", "DRN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "drn_d_107", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "23", ",", "3", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-107'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.Bottleneck.__init__": [[15, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_inplace", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.Bottleneck.forward": [[28, 48], ["com_mod.Bottleneck.conv1", "com_mod.Bottleneck.bn1", "com_mod.Bottleneck.relu", "com_mod.Bottleneck.conv2", "com_mod.Bottleneck.bn2", "com_mod.Bottleneck.relu", "com_mod.Bottleneck.conv3", "com_mod.Bottleneck.bn3", "com_mod.Bottleneck.relu_inplace", "com_mod.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_inplace", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResNet.__init__": [[51, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "com_mod.ResNet._make_layer", "com_mod.ResNet._make_layer", "com_mod.ResNet._make_layer", "com_mod.ResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# stem 1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "False", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResNet._make_layer": [[64, 80], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "True", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResNet.forward": [[81, 89], ["com_mod.ResNet.relu", "com_mod.ResNet.maxpool", "com_mod.ResNet.layer1", "com_mod.ResNet.layer2", "com_mod.ResNet.layer3", "com_mod.ResNet.layer4", "com_mod.ResNet.bn1", "com_mod.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "return", "[", "x1", ",", "x2", ",", "x3", ",", "x4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResGridNet.__init__": [[94, 115], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "com_mod.ResGridNet._make_layer", "com_mod.ResGridNet._make_layer", "com_mod.ResGridNet._make_layer", "com_mod.ResGridNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", "ResGridNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "128", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "# TODO: change the dilation rate", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "multi_grid", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResGridNet._make_layer": [[116, 134], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "range", "range", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "layers.append", "layers.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "multi_grid", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "True", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "multi_grid", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", "**", "(", "i", "+", "1", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResGridNet.forward": [[135, 145], ["com_mod.ResGridNet.relu1", "com_mod.ResGridNet.relu2", "com_mod.ResGridNet.relu3", "com_mod.ResGridNet.maxpool", "com_mod.ResGridNet.layer1", "com_mod.ResGridNet.layer2", "com_mod.ResGridNet.layer3", "com_mod.ResGridNet.layer4", "com_mod.ResGridNet.bn1", "com_mod.ResGridNet.bn2", "com_mod.ResGridNet.bn3", "com_mod.ResGridNet.conv1", "com_mod.ResGridNet.conv2", "com_mod.ResGridNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x1", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "layer4", "(", "x4", ")", "\n", "return", "[", "x2", ",", "x3", ",", "x4", ",", "x5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResGridNet_os8.__init__": [[149, 170], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "com_mod.ResGridNet_os8._make_layer", "com_mod.ResGridNet_os8._make_layer", "com_mod.ResGridNet_os8._make_layer", "com_mod.ResGridNet_os8._make_layer"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", "ResGridNet_os8", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "128", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "# TODO: change the dilation rate", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ",", "multi_grid", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResGridNet_os8._make_layer": [[171, 189], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "range", "range", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "layers.append", "layers.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "multi_grid", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "True", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "multi_grid", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", "**", "(", "i", "+", "1", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResGridNet_os8.forward": [[190, 200], ["com_mod.ResGridNet_os8.relu1", "com_mod.ResGridNet_os8.relu2", "com_mod.ResGridNet_os8.relu3", "com_mod.ResGridNet_os8.maxpool", "com_mod.ResGridNet_os8.layer1", "com_mod.ResGridNet_os8.layer2", "com_mod.ResGridNet_os8.layer3", "com_mod.ResGridNet_os8.layer4", "com_mod.ResGridNet_os8.bn1", "com_mod.ResGridNet_os8.bn2", "com_mod.ResGridNet_os8.bn3", "com_mod.ResGridNet_os8.conv1", "com_mod.ResGridNet_os8.conv2", "com_mod.ResGridNet_os8.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x1", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "layer4", "(", "x4", ")", "\n", "return", "[", "x2", ",", "x3", ",", "x4", ",", "x5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResStemNet.__init__": [[202, 223], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "com_mod.ResStemNet._make_layer", "com_mod.ResStemNet._make_layer", "com_mod.ResStemNet._make_layer", "com_mod.ResStemNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", "ResStemNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "128", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "# TODO: change the dilation rate", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResStemNet._make_layer": [[224, 239], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "True", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ResStemNet.forward": [[240, 250], ["com_mod.ResStemNet.relu1", "com_mod.ResStemNet.relu2", "com_mod.ResStemNet.relu3", "com_mod.ResStemNet.maxpool", "com_mod.ResStemNet.layer1", "com_mod.ResStemNet.layer2", "com_mod.ResStemNet.layer3", "com_mod.ResStemNet.layer4", "com_mod.ResStemNet.bn1", "com_mod.ResStemNet.bn2", "com_mod.ResStemNet.bn3", "com_mod.ResStemNet.conv1", "com_mod.ResStemNet.conv2", "com_mod.ResStemNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x1", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "layer4", "(", "x4", ")", "\n", "return", "[", "x2", ",", "x3", ",", "x4", ",", "x5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.SEModule.__init__": [[254, 263], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.SEModule.forward": [[264, 272], ["com_mod.SEModule.avg_pool", "com_mod.SEModule.fc1", "com_mod.SEModule.relu", "com_mod.SEModule.fc2", "com_mod.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.SpatialAttention.__init__": [[275, 283], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "kernel_size", "in", "(", "3", ",", "7", ")", ",", "'kernel size must be 3 or 7'", "\n", "padding", "=", "3", "if", "kernel_size", "==", "7", "else", "1", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.SpatialAttention.forward": [[284, 290], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "com_mod.SpatialAttention.conv1", "com_mod.SpatialAttention.sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "avg_out", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "s_out", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", "]", ",", "dim", "=", "1", ")", "\n", "s_out", "=", "self", ".", "conv1", "(", "s_out", ")", "\n", "return", "self", ".", "sigmoid", "(", "s_out", ")", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.Prob.__init__": [[295, 297], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Prob", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.Prob.forward": [[298, 300], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ")", ":", "\n", "        ", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.Prob.backward": [[301, 307], ["range", "matplotlib.show", "matplotlib.subplot", "matplotlib.imshow"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top_grad", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "top_grad", "[", "0", ",", "i", ",", ":", ",", ":", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "return", "top_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.GuidanceModule.__init__": [[314, 317], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "GuidanceModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.GuidanceModule.forward": [[318, 323], ["source.size", "com_mod.GuidanceModule.softmax"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "m_batchsize", ",", "chn", ",", "height", ",", "width", "=", "source", ".", "size", "(", ")", "\n", "source_norm", "=", "self", ".", "softmax", "(", "source", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.DiscriminatorModule.__init__": [[328, 330], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "DiscriminatorModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.DiscriminatorModule.forward": [[331, 333], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ContextContrastedModule.__init__": [[338, 348], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "rate", ")", ":", "\n", "        ", "super", "(", "ContextContrastedModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_in", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "self", ".", "conv_local", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "self", ".", "conv_context", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "dilation", "=", "rate", ",", "padding", "=", "rate", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n", "self", ".", "conv_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.com_mod.ContextContrastedModule.forward": [[349, 357], ["com_mod.ContextContrastedModule.conv_in", "com_mod.ContextContrastedModule.conv_local", "com_mod.ContextContrastedModule.conv_context", "com_mod.ContextContrastedModule.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_in", "(", "x", ")", "\n", "x_local", "=", "self", ".", "conv_local", "(", "x", ")", "\n", "x_context", "=", "self", ".", "conv_context", "(", "x", ")", "\n", "x_out", "=", "x_local", "-", "x_context", "\n", "# x_out = x_local + x_context", "\n", "x_out", "=", "self", ".", "conv_out", "(", "x_out", ")", "\n", "return", "x_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.jpu_mod.SeparableConv2d.__init__": [[8, 14], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "inplanes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "inplanes", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "inplanes", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.jpu_mod.SeparableConv2d.forward": [[15, 20], ["jpu_mod.SeparableConv2d.conv1", "jpu_mod.SeparableConv2d.bn", "jpu_mod.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.jpu_mod.simple_JPU.__init__": [[22, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "width", "=", "256", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "simple_JPU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n", "self", ".", "dilation1", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "in_channels", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "dilation2", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "in_channels", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "dilation3", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "in_channels", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "dilation4", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "in_channels", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "8", ",", "dilation", "=", "8", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "width", "*", "4", ",", "in_channels", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.jpu_mod.simple_JPU.forward": [[47, 54], ["c2.size", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "jpu_mod.simple_JPU.conv2", "jpu_mod.simple_JPU.conv1", "jpu_mod.simple_JPU.dilation1", "jpu_mod.simple_JPU.dilation2", "jpu_mod.simple_JPU.dilation3", "jpu_mod.simple_JPU.dilation4"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "c2", ",", "c4", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "c2", ".", "size", "(", ")", "\n", "c4", "=", "F", ".", "interpolate", "(", "c4", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "feat", "=", "self", ".", "conv1", "(", "c2", ")", "+", "c4", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "self", ".", "dilation1", "(", "feat", ")", ",", "self", ".", "dilation2", "(", "feat", ")", ",", "self", ".", "dilation3", "(", "feat", ")", ",", "self", ".", "dilation4", "(", "feat", ")", "]", ",", "dim", "=", "1", ")", "\n", "feat", "=", "self", ".", "conv2", "(", "feat", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.jpu_mod.JPU.__init__": [[56, 84], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "width", "=", "512", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "JPU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "[", "-", "1", "]", ",", "width", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "[", "-", "2", "]", ",", "width", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "[", "-", "3", "]", ",", "width", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n", "self", ".", "dilation1", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "3", "*", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "dilation2", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "3", "*", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "dilation3", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "3", "*", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "dilation4", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "3", "*", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "8", ",", "dilation", "=", "8", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.jpu_mod.JPU.forward": [[85, 94], ["feats[].size", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "jpu_mod.JPU.conv5", "jpu_mod.JPU.conv4", "jpu_mod.JPU.conv3", "jpu_mod.JPU.dilation1", "jpu_mod.JPU.dilation2", "jpu_mod.JPU.dilation3", "jpu_mod.JPU.dilation4"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "feats", "=", "[", "self", ".", "conv5", "(", "inputs", "[", "-", "1", "]", ")", ",", "self", ".", "conv4", "(", "inputs", "[", "-", "2", "]", ")", ",", "self", ".", "conv3", "(", "inputs", "[", "-", "3", "]", ")", "]", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "feats", "[", "-", "1", "]", ".", "size", "(", ")", "\n", "feats", "[", "-", "2", "]", "=", "F", ".", "interpolate", "(", "feats", "[", "-", "2", "]", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "feats", "[", "-", "3", "]", "=", "F", ".", "interpolate", "(", "feats", "[", "-", "3", "]", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "feat", "=", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "1", ")", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "self", ".", "dilation1", "(", "feat", ")", ",", "self", ".", "dilation2", "(", "feat", ")", ",", "self", ".", "dilation3", "(", "feat", ")", ",", "self", ".", "dilation4", "(", "feat", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "inputs", "[", "0", "]", ",", "inputs", "[", "1", "]", ",", "inputs", "[", "2", "]", ",", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.jpu_mod.hr_JPU.__init__": [[97, 113], ["torch.Module.__init__", "sum", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "jpu_mod.SeparableConv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "width", "=", "128", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "hr_JPU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "channels", "=", "sum", "(", "in_channels", ")", "\n", "self", ".", "dilation1", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "self", ".", "channels", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "dilation2", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "self", ".", "channels", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "dilation3", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "self", ".", "channels", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "dilation4", "=", "nn", ".", "Sequential", "(", "SeparableConv2d", "(", "self", ".", "channels", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "8", ",", "dilation", "=", "8", ",", "bias", "=", "False", ",", "norm_layer", "=", "norm_layer", ")", ",", "\n", "norm_layer", "(", "width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.jpu_mod.hr_JPU.forward": [[114, 125], ["feats[].size", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "jpu_mod.hr_JPU.dilation1", "jpu_mod.hr_JPU.dilation2", "jpu_mod.hr_JPU.dilation3", "jpu_mod.hr_JPU.dilation4"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "feats", "=", "[", "inputs", "[", "-", "1", "]", ",", "inputs", "[", "-", "2", "]", ",", "inputs", "[", "-", "3", "]", ",", "inputs", "[", "-", "4", "]", "]", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "feats", "[", "-", "1", "]", ".", "size", "(", ")", "\n", "feats", "[", "-", "2", "]", "=", "F", ".", "interpolate", "(", "feats", "[", "-", "2", "]", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "feats", "[", "-", "3", "]", "=", "F", ".", "interpolate", "(", "feats", "[", "-", "3", "]", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "feats", "[", "-", "4", "]", "=", "F", ".", "interpolate", "(", "feats", "[", "-", "4", "]", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "\n", "feat", "=", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "1", ")", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "self", ".", "dilation1", "(", "feat", ")", ",", "self", ".", "dilation2", "(", "feat", ")", ",", "self", ".", "dilation3", "(", "feat", ")", ",", "self", ".", "dilation4", "(", "feat", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "feat", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.enc_mod.EncModule.__init__": [[9, 25], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.bn.InPlaceABNSync", "encoding.nn.Encoding", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "encoding.nn.Mean", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "nclass", ",", "ncodes", "=", "32", ",", "se_loss", "=", "True", ")", ":", "\n", "        ", "super", "(", "EncModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se_loss", "=", "se_loss", "\n", "self", ".", "encoding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "in_channels", ")", ",", "\n", "encoding", ".", "nn", ".", "Encoding", "(", "D", "=", "in_channels", ",", "K", "=", "ncodes", ")", ",", "\n", "# encoding.nn.BatchNorm1d(ncodes),", "\n", "nn", ".", "BatchNorm1d", "(", "ncodes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "encoding", ".", "nn", ".", "Mean", "(", "dim", "=", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "in_channels", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "if", "self", ".", "se_loss", ":", "\n", "            ", "self", ".", "selayer", "=", "nn", ".", "Linear", "(", "in_channels", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.enc_mod.EncModule.forward": [[26, 35], ["enc_mod.EncModule.encoding", "x.size", "enc_mod.EncModule.fc", "enc_mod.EncModule.view", "tuple", "torch.relu_", "torch.relu_", "torch.relu_", "outputs.append", "enc_mod.EncModule.selayer"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "en", "=", "self", ".", "encoding", "(", "x", ")", "\n", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "gamma", "=", "self", ".", "fc", "(", "en", ")", "\n", "y", "=", "gamma", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "outputs", "=", "[", "F", ".", "relu_", "(", "x", "+", "x", "*", "y", ")", "]", "\n", "if", "self", ".", "se_loss", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "selayer", "(", "en", ")", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.BasicBlock.__init__": [[77, 86], ["torch.Module.__init__", "seg_hrnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "seg_hrnet.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.BasicBlock.forward": [[87, 104], ["seg_hrnet.BasicBlock.conv1", "seg_hrnet.BasicBlock.bn1", "seg_hrnet.BasicBlock.relu", "seg_hrnet.BasicBlock.conv2", "seg_hrnet.BasicBlock.bn2", "seg_hrnet.BasicBlock.relu", "seg_hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.Bottleneck.__init__": [[109, 123], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.Bottleneck.forward": [[124, 145], ["seg_hrnet.Bottleneck.conv1", "seg_hrnet.Bottleneck.bn1", "seg_hrnet.Bottleneck.relu", "seg_hrnet.Bottleneck.conv2", "seg_hrnet.Bottleneck.bn2", "seg_hrnet.Bottleneck.relu", "seg_hrnet.Bottleneck.conv3", "seg_hrnet.Bottleneck.bn3", "seg_hrnet.Bottleneck.relu", "seg_hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionModule.__init__": [[148, 164], ["torch.Module.__init__", "seg_hrnet.HighResolutionModule._check_branches", "seg_hrnet.HighResolutionModule._make_branches", "seg_hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionModule._check_branches": [[165, 184], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionModule._make_one_branch": [[185, 208], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionModule._make_branches": [[209, 217], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "seg_hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionModule._make_fuse_layers": [[218, 263], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionModule.get_num_inchannels": [[264, 266], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionModule.forward": [[267, 292], ["range", "range", "len", "range", "x_fuse.append", "seg_hrnet.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionNet.__init__": [[302, 348], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "seg_hrnet.HighResolutionNet._make_layer", "seg_hrnet.HighResolutionNet._make_transition_layer", "seg_hrnet.HighResolutionNet._make_stage", "seg_hrnet.HighResolutionNet._make_transition_layer", "seg_hrnet.HighResolutionNet._make_stage", "seg_hrnet.HighResolutionNet._make_transition_layer", "seg_hrnet.HighResolutionNet._make_stage", "numpy.int", "numpy.sum", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "# extra = config.MODEL.EXTRA", "\n", "        ", "extra", "=", "config", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "64", ",", "4", ")", "\n", "\n", "self", ".", "stage2_cfg", "=", "extra", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "256", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "extra", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "extra", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionNet._make_transition_layer": [[366, 401], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionNet._make_layer": [[402, 418], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionNet._make_stage": [[419, 447], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "seg_hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionNet.forward": [[448, 492], ["seg_hrnet.HighResolutionNet.conv1", "seg_hrnet.HighResolutionNet.bn1", "seg_hrnet.HighResolutionNet.relu", "seg_hrnet.HighResolutionNet.conv2", "seg_hrnet.HighResolutionNet.bn2", "seg_hrnet.HighResolutionNet.relu", "seg_hrnet.HighResolutionNet.layer1", "range", "seg_hrnet.HighResolutionNet.stage2", "range", "seg_hrnet.HighResolutionNet.stage3", "range", "seg_hrnet.HighResolutionNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# # Upsampling", "\n", "# x0_h, x0_w = x[0].size(2), x[0].size(3)", "\n", "# x1 = F.upsample(x[1], size=(x0_h, x0_w), mode='bilinear')", "\n", "# x2 = F.upsample(x[2], size=(x0_h, x0_w), mode='bilinear')", "\n", "# x3 = F.upsample(x[3], size=(x0_h, x0_w), mode='bilinear')", "\n", "#", "\n", "# x_cat = torch.cat([x[0], x1, x2, x3], 1)", "\n", "\n", "# x = self.last_layer(x)", "\n", "\n", "return", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ",", "x", "[", "3", "]", "\n", "# return [x_cat,x[0],x[1],x[2],x[3]]", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.HighResolutionNet.init_weights": [[494, 513], ["logger.info", "seg_hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "seg_hrnet.HighResolutionNet.state_dict", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "seg_hrnet.HighResolutionNet.update", "seg_hrnet.HighResolutionNet.load_state_dict", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "logger.info", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "seg_hrnet.HighResolutionNet.keys"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "InPlaceABNSync", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "for", "k", ",", "_", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'=> loading {} pretrained model {}'", ".", "format", "(", "k", ",", "pretrained", ")", ")", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.conv3x3": [[68, 72], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.seg_hrnet.get_seg_model": [[516, 521], ["seg_hrnet.HighResolutionNet"], "function", ["None"], ["", "", "", "def", "get_seg_model", "(", "cfg", "=", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "cfg", "[", "'seg_hrnet'", "]", ",", "**", "kwargs", ")", "\n", "# model.init_weights(cfg.MODEL.PRETRAINED)", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.leaf_ConvLSTMCell.__init__": [[10, 42], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "bias", ")", ":", "\n", "        ", "\"\"\"\n        Initialize ConvLSTM cell.\n\n        Parameters\n        ----------\n        input_size: (int, int)\n            Height and width of input tensor as (height, width).\n        input_dim: int\n            Number of channels of input tensor.\n        hidden_dim: int\n            Number of channels of hidden state.\n        kernel_size: (int, int)\n            Size of the convolutional kernel.\n        bias: bool\n            Whether or not to add the bias.\n        \"\"\"", "\n", "\n", "super", "(", "leaf_ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "kernel_size", "[", "0", "]", "//", "2", ",", "kernel_size", "[", "1", "]", "//", "2", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_dim", ",", "\n", "out_channels", "=", "3", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "3", "*", "self", ".", "hidden_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.leaf_ConvLSTMCell.forward": [[43, 56], ["convlstm.leaf_ConvLSTMCell.conv", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "\n", "        ", "combined_conv", "=", "self", ".", "conv", "(", "input_tensor", ")", "\n", "\n", "cc_i", ",", "cc_o", ",", "cc_g", "=", "torch", ".", "split", "(", "combined_conv", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "i", "=", "torch", ".", "sigmoid", "(", "cc_i", ")", "\n", "o", "=", "torch", ".", "sigmoid", "(", "cc_o", ")", "\n", "g", "=", "torch", ".", "tanh", "(", "cc_g", ")", "\n", "\n", "c_next", "=", "i", "*", "g", "\n", "h_next", "=", "o", "*", "torch", ".", "tanh", "(", "c_next", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.plus_tree_ConvLSTMCell.__init__": [[59, 102], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "bias", ")", ":", "\n", "        ", "\"\"\"\n        Initialize ConvLSTM cell.\n\n        Parameters\n        ----------\n        input_size: (int, int)\n            Height and width of input tensor as (height, width).\n        input_dim: int\n            Number of channels of input tensor.\n        hidden_dim: int\n            Number of channels of hidden state.\n        kernel_size: (int, int)\n            Size of the convolutional kernel.\n        bias: bool\n            Whether or not to add the bias.\n        \"\"\"", "\n", "\n", "super", "(", "plus_tree_ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "kernel_size", "[", "0", "]", "//", "2", ",", "kernel_size", "[", "1", "]", "//", "2", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "conv_input", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_dim", ",", "\n", "out_channels", "=", "4", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "4", "*", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "3", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "3", "*", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "conv_hf", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "self", ".", "hidden_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.plus_tree_ConvLSTMCell.forward": [[103, 133], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "convlstm.plus_tree_ConvLSTMCell.conv_input", "torch.split", "torch.split", "torch.split", "torch.split", "convlstm.plus_tree_ConvLSTMCell.conv_h", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "convlstm.plus_tree_ConvLSTMCell.conv_hf", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "child_cur_state_list", ")", ":", "\n", "        ", "h_cur_list", ",", "c_cur_list", "=", "child_cur_state_list", "\n", "\n", "# combined_h = h_cur_list[0]", "\n", "# for i in range(1, len(h_cur_list)):", "\n", "#     combined_h = combined_h + h_cur_list[i]", "\n", "combined_h", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "h_cur_list", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# combined_h = torch.max(torch.stack(h_cur_list, dim=1), dim=1)[0]", "\n", "\n", "combined_conv_input", "=", "self", ".", "conv_input", "(", "input_tensor", ")", "\n", "cc_i", ",", "cc_f", ",", "cc_o", ",", "cc_g", "=", "torch", ".", "split", "(", "combined_conv_input", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "combined_conv_h", "=", "self", ".", "conv_h", "(", "combined_h", ")", "\n", "ch_i", ",", "ch_o", ",", "ch_g", "=", "torch", ".", "split", "(", "combined_conv_h", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "\n", "ch_f_list", "=", "[", "self", ".", "conv_hf", "(", "h_cur_list", "[", "i", "]", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "h_cur_list", ")", "-", "1", ")", "]", "\n", "i", "=", "torch", ".", "sigmoid", "(", "cc_i", "+", "ch_i", ")", "\n", "f_list", "=", "[", "torch", ".", "sigmoid", "(", "cc_f", "+", "ch_f", ")", "for", "ch_f", "in", "ch_f_list", "]", "\n", "o", "=", "torch", ".", "sigmoid", "(", "cc_o", "+", "ch_o", ")", "\n", "g", "=", "torch", ".", "tanh", "(", "cc_g", "+", "ch_g", ")", "\n", "\n", "\n", "fc_list", "=", "[", "f_list", "[", "i", "]", "*", "c_cur_list", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "h_cur_list", ")", "-", "1", ")", "]", "\n", "combined_fc", "=", "fc_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "fc_list", ")", ")", ":", "\n", "            ", "combined_fc", "=", "combined_fc", "+", "fc_list", "[", "i", "]", "\n", "", "c_next", "=", "combined_fc", "+", "i", "*", "g", "\n", "h_next", "=", "o", "*", "torch", ".", "tanh", "(", "c_next", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.max_tree_ConvLSTMCell.__init__": [[136, 179], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "bias", ")", ":", "\n", "        ", "\"\"\"\n        Initialize ConvLSTM cell.\n\n        Parameters\n        ----------\n        input_size: (int, int)\n            Height and width of input tensor as (height, width).\n        input_dim: int\n            Number of channels of input tensor.\n        hidden_dim: int\n            Number of channels of hidden state.\n        kernel_size: (int, int)\n            Size of the convolutional kernel.\n        bias: bool\n            Whether or not to add the bias.\n        \"\"\"", "\n", "\n", "super", "(", "max_tree_ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "kernel_size", "[", "0", "]", "//", "2", ",", "kernel_size", "[", "1", "]", "//", "2", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "conv_input", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_dim", ",", "\n", "out_channels", "=", "4", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "4", "*", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "3", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "3", "*", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "conv_hf", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "self", ".", "hidden_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.max_tree_ConvLSTMCell.forward": [[180, 209], ["convlstm.max_tree_ConvLSTMCell.conv_input", "torch.split", "torch.split", "torch.split", "torch.split", "convlstm.max_tree_ConvLSTMCell.conv_h", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "range", "torch.max", "torch.max", "torch.max", "torch.max", "convlstm.max_tree_ConvLSTMCell.conv_hf", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "child_cur_state_list", ")", ":", "\n", "        ", "h_cur_list", ",", "c_cur_list", "=", "child_cur_state_list", "\n", "\n", "# combined_h = h_cur_list[0]", "\n", "# for i in range(1, len(h_cur_list)):", "\n", "#     combined_h = combined_h + h_cur_list[i]", "\n", "# combined_h = torch.sum(torch.stack(h_cur_list, dim=1), dim=1)", "\n", "combined_h", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "h_cur_list", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "combined_conv_input", "=", "self", ".", "conv_input", "(", "input_tensor", ")", "\n", "cc_i", ",", "cc_f", ",", "cc_o", ",", "cc_g", "=", "torch", ".", "split", "(", "combined_conv_input", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "combined_conv_h", "=", "self", ".", "conv_h", "(", "combined_h", ")", "\n", "ch_i", ",", "ch_o", ",", "ch_g", "=", "torch", ".", "split", "(", "combined_conv_h", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "\n", "ch_f_list", "=", "[", "self", ".", "conv_hf", "(", "h_cur_list", "[", "i", "]", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "h_cur_list", ")", "-", "1", ")", "]", "\n", "i", "=", "torch", ".", "sigmoid", "(", "cc_i", "+", "ch_i", ")", "\n", "f_list", "=", "[", "torch", ".", "sigmoid", "(", "cc_f", "+", "ch_f", ")", "for", "ch_f", "in", "ch_f_list", "]", "\n", "o", "=", "torch", ".", "sigmoid", "(", "cc_o", "+", "ch_o", ")", "\n", "g", "=", "torch", ".", "tanh", "(", "cc_g", "+", "ch_g", ")", "\n", "\n", "\n", "fc_list", "=", "[", "f_list", "[", "i", "]", "*", "c_cur_list", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "h_cur_list", ")", "-", "1", ")", "]", "\n", "combined_fc", "=", "fc_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "fc_list", ")", ")", ":", "\n", "            ", "combined_fc", "=", "combined_fc", "+", "fc_list", "[", "i", "]", "\n", "", "c_next", "=", "combined_fc", "+", "i", "*", "g", "\n", "h_next", "=", "o", "*", "torch", ".", "tanh", "(", "c_next", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.tree_ConvLSTMCell.__init__": [[213, 256], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "bias", ")", ":", "\n", "        ", "\"\"\"\n        Initialize ConvLSTM cell.\n\n        Parameters\n        ----------\n        input_size: (int, int)\n            Height and width of input tensor as (height, width).\n        input_dim: int\n            Number of channels of input tensor.\n        hidden_dim: int\n            Number of channels of hidden state.\n        kernel_size: (int, int)\n            Size of the convolutional kernel.\n        bias: bool\n            Whether or not to add the bias.\n        \"\"\"", "\n", "\n", "super", "(", "tree_ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "kernel_size", "[", "0", "]", "//", "2", ",", "kernel_size", "[", "1", "]", "//", "2", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "conv_input", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_dim", ",", "\n", "out_channels", "=", "4", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "4", "*", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "3", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "3", "*", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "conv_hf", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", ",", "BatchNorm2d", "(", "self", ".", "hidden_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.tree_ConvLSTMCell.forward": [[257, 284], ["range", "convlstm.tree_ConvLSTMCell.conv_input", "torch.split", "torch.split", "torch.split", "torch.split", "convlstm.tree_ConvLSTMCell.conv_h", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "range", "len", "convlstm.tree_ConvLSTMCell.conv_hf", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "child_cur_state_list", ")", ":", "\n", "        ", "h_cur_list", ",", "c_cur_list", "=", "child_cur_state_list", "\n", "\n", "combined_h", "=", "h_cur_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "h_cur_list", ")", ")", ":", "\n", "            ", "combined_h", "=", "combined_h", "+", "h_cur_list", "[", "i", "]", "\n", "\n", "", "combined_conv_input", "=", "self", ".", "conv_input", "(", "input_tensor", ")", "\n", "cc_i", ",", "cc_f", ",", "cc_o", ",", "cc_g", "=", "torch", ".", "split", "(", "combined_conv_input", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "combined_conv_h", "=", "self", ".", "conv_h", "(", "combined_h", ")", "\n", "ch_i", ",", "ch_o", ",", "ch_g", "=", "torch", ".", "split", "(", "combined_conv_h", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "\n", "ch_f_list", "=", "[", "self", ".", "conv_hf", "(", "h", ")", "for", "h", "in", "h_cur_list", "]", "\n", "i", "=", "torch", ".", "sigmoid", "(", "cc_i", "+", "ch_i", ")", "\n", "f_list", "=", "[", "torch", ".", "sigmoid", "(", "cc_f", "+", "ch_f", ")", "for", "ch_f", "in", "ch_f_list", "]", "\n", "o", "=", "torch", ".", "sigmoid", "(", "cc_o", "+", "ch_o", ")", "\n", "g", "=", "torch", ".", "tanh", "(", "cc_g", "+", "ch_g", ")", "\n", "\n", "\n", "fc_list", "=", "[", "f_list", "[", "i", "]", "*", "c_cur_list", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "h_cur_list", ")", ")", "]", "\n", "combined_fc", "=", "fc_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "fc_list", ")", ")", ":", "\n", "            ", "combined_fc", "=", "combined_fc", "+", "fc_list", "[", "i", "]", "\n", "", "c_next", "=", "combined_fc", "+", "i", "*", "g", "\n", "h_next", "=", "o", "*", "torch", ".", "tanh", "(", "c_next", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.Seq_ConvLSTMCell.__init__": [[288, 318], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "bias", ")", ":", "\n", "        ", "\"\"\"\n        Initialize ConvLSTM cell.\n\n        Parameters\n        ----------\n        input_dim: int\n            Number of channels of input tensor.\n        hidden_dim: int\n            Number of channels of hidden state.\n        kernel_size: (int, int)\n            Size of the convolutional kernel.\n        bias: bool\n            Whether or not to add the bias.\n        \"\"\"", "\n", "\n", "super", "(", "Seq_ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "kernel_size", "[", "0", "]", "//", "2", ",", "kernel_size", "[", "1", "]", "//", "2", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_dim", "+", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "4", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.Seq_ConvLSTMCell.forward": [[319, 335], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "convlstm.Seq_ConvLSTMCell.conv", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "cur_state", ")", ":", "\n", "        ", "h_cur", ",", "c_cur", "=", "cur_state", "\n", "\n", "combined", "=", "torch", ".", "cat", "(", "[", "input_tensor", ",", "h_cur", "]", ",", "dim", "=", "1", ")", "# concatenate along channel axis", "\n", "\n", "combined_conv", "=", "self", ".", "conv", "(", "combined", ")", "\n", "cc_i", ",", "cc_f", ",", "cc_o", ",", "cc_g", "=", "torch", ".", "split", "(", "combined_conv", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "i", "=", "torch", ".", "sigmoid", "(", "cc_i", ")", "\n", "f", "=", "torch", ".", "sigmoid", "(", "cc_f", ")", "\n", "o", "=", "torch", ".", "sigmoid", "(", "cc_o", ")", "\n", "g", "=", "torch", ".", "tanh", "(", "cc_g", ")", "\n", "\n", "c_next", "=", "f", "*", "c_cur", "+", "i", "*", "g", "\n", "h_next", "=", "o", "*", "torch", ".", "tanh", "(", "c_next", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTMCell.__init__": [[339, 372], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "bias", ")", ":", "\n", "        ", "\"\"\"\n        Initialize ConvLSTM cell.\n        \n        Parameters\n        ----------\n        input_size: (int, int)\n            Height and width of input tensor as (height, width).\n        input_dim: int\n            Number of channels of input tensor.\n        hidden_dim: int\n            Number of channels of hidden state.\n        kernel_size: (int, int)\n            Size of the convolutional kernel.\n        bias: bool\n            Whether or not to add the bias.\n        \"\"\"", "\n", "\n", "super", "(", "ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "height", ",", "self", ".", "width", "=", "input_size", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "kernel_size", "[", "0", "]", "//", "2", ",", "kernel_size", "[", "1", "]", "//", "2", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_dim", "+", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "4", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTMCell.forward": [[373, 390], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "convlstm.ConvLSTMCell.conv", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "cur_state", ")", ":", "\n", "\n", "        ", "h_cur", ",", "c_cur", "=", "cur_state", "\n", "\n", "combined", "=", "torch", ".", "cat", "(", "[", "input_tensor", ",", "h_cur", "]", ",", "dim", "=", "1", ")", "# concatenate along channel axis", "\n", "\n", "combined_conv", "=", "self", ".", "conv", "(", "combined", ")", "\n", "cc_i", ",", "cc_f", ",", "cc_o", ",", "cc_g", "=", "torch", ".", "split", "(", "combined_conv", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "i", "=", "torch", ".", "sigmoid", "(", "cc_i", ")", "\n", "f", "=", "torch", ".", "sigmoid", "(", "cc_f", ")", "\n", "o", "=", "torch", ".", "sigmoid", "(", "cc_o", ")", "\n", "g", "=", "torch", ".", "tanh", "(", "cc_g", ")", "\n", "\n", "c_next", "=", "f", "*", "c_cur", "+", "i", "*", "g", "\n", "h_next", "=", "o", "*", "torch", ".", "tanh", "(", "c_next", ")", "\n", "\n", "return", "h_next", ",", "c_next", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTMCell.init_hidden": [[391, 394], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_dim", ",", "self", ".", "height", ",", "self", ".", "width", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_dim", ",", "self", ".", "height", ",", "self", ".", "width", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM.__init__": [[398, 431], ["torch.Module.__init__", "convlstm.ConvLSTM._check_kernel_size_consistency", "convlstm.ConvLSTM._extend_for_multilayer", "convlstm.ConvLSTM._extend_for_multilayer", "range", "torch.ModuleList", "torch.ModuleList", "ValueError", "cell_list.append", "len", "len", "convlstm.ConvLSTMCell"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._check_kernel_size_consistency", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._extend_for_multilayer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._extend_for_multilayer"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "num_layers", ",", "\n", "batch_first", "=", "False", ",", "bias", "=", "True", ",", "return_all_layers", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_check_kernel_size_consistency", "(", "kernel_size", ")", "\n", "\n", "# Make sure that both `kernel_size` and `hidden_dim` are lists having len == num_layers", "\n", "kernel_size", "=", "self", ".", "_extend_for_multilayer", "(", "kernel_size", ",", "num_layers", ")", "\n", "hidden_dim", "=", "self", ".", "_extend_for_multilayer", "(", "hidden_dim", ",", "num_layers", ")", "\n", "if", "not", "len", "(", "kernel_size", ")", "==", "len", "(", "hidden_dim", ")", "==", "num_layers", ":", "\n", "            ", "raise", "ValueError", "(", "'Inconsistent list length.'", ")", "\n", "\n", "", "self", ".", "height", ",", "self", ".", "width", "=", "input_size", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "return_all_layers", "=", "return_all_layers", "\n", "\n", "cell_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_layers", ")", ":", "\n", "            ", "cur_input_dim", "=", "self", ".", "input_dim", "if", "i", "==", "0", "else", "self", ".", "hidden_dim", "[", "i", "-", "1", "]", "\n", "\n", "cell_list", ".", "append", "(", "ConvLSTMCell", "(", "input_size", "=", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "\n", "input_dim", "=", "cur_input_dim", ",", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", "[", "i", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", "[", "i", "]", ",", "\n", "bias", "=", "self", ".", "bias", ")", ")", "\n", "\n", "", "self", ".", "cell_list", "=", "nn", ".", "ModuleList", "(", "cell_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM.forward": [[432, 483], ["input_tensor.permute.permute.size", "range", "input_tensor.permute.permute.permute", "NotImplementedError", "convlstm.ConvLSTM._init_hidden", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "layer_output_list.append", "last_state_list.append", "output_inner.append", "input_tensor.permute.permute.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._init_hidden", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "hidden_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        \n        Parameters\n        ----------\n        input_tensor: todo \n            5-D Tensor either of shape (t, b, c, h, w) or (b, t, c, h, w)\n        hidden_state: todo\n            None. todo implement stateful\n            \n        Returns\n        -------\n        last_state_list, layer_output\n        \"\"\"", "\n", "if", "not", "self", ".", "batch_first", ":", "\n", "# (t, b, c, h, w) -> (b, t, c, h, w)", "\n", "            ", "input_tensor", "=", "input_tensor", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "\n", "# Implement stateful ConvLSTM", "\n", "", "if", "hidden_state", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "            ", "hidden_state", "=", "self", ".", "_init_hidden", "(", "batch_size", "=", "input_tensor", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "layer_output_list", "=", "[", "]", "\n", "last_state_list", "=", "[", "]", "\n", "\n", "seq_len", "=", "input_tensor", ".", "size", "(", "1", ")", "\n", "cur_layer_input", "=", "input_tensor", "\n", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "\n", "            ", "h", ",", "c", "=", "hidden_state", "[", "layer_idx", "]", "\n", "output_inner", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "seq_len", ")", ":", "\n", "\n", "                ", "h", ",", "c", "=", "self", ".", "cell_list", "[", "layer_idx", "]", "(", "input_tensor", "=", "cur_layer_input", "[", ":", ",", "t", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "cur_state", "=", "[", "h", ",", "c", "]", ")", "\n", "output_inner", ".", "append", "(", "h", ")", "\n", "\n", "", "layer_output", "=", "torch", ".", "stack", "(", "output_inner", ",", "dim", "=", "1", ")", "\n", "cur_layer_input", "=", "layer_output", "\n", "\n", "layer_output_list", ".", "append", "(", "layer_output", ")", "\n", "last_state_list", ".", "append", "(", "[", "h", ",", "c", "]", ")", "\n", "\n", "", "if", "not", "self", ".", "return_all_layers", ":", "\n", "            ", "layer_output_list", "=", "layer_output_list", "[", "-", "1", ":", "]", "\n", "last_state_list", "=", "last_state_list", "[", "-", "1", ":", "]", "\n", "\n", "", "return", "layer_output_list", ",", "last_state_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._init_hidden": [[484, 489], ["range", "init_states.append", "convlstm.ConvLSTM.cell_list[].init_hidden"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTMCell.init_hidden"], ["", "def", "_init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "init_states", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "init_states", ".", "append", "(", "self", ".", "cell_list", "[", "i", "]", ".", "init_hidden", "(", "batch_size", ")", ")", "\n", "", "return", "init_states", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._check_kernel_size_consistency": [[490, 495], ["ValueError", "isinstance", "isinstance", "all", "isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_check_kernel_size_consistency", "(", "kernel_size", ")", ":", "\n", "        ", "if", "not", "(", "isinstance", "(", "kernel_size", ",", "tuple", ")", "or", "\n", "(", "isinstance", "(", "kernel_size", ",", "list", ")", "and", "all", "(", "[", "isinstance", "(", "elem", ",", "tuple", ")", "for", "elem", "in", "kernel_size", "]", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'`kernel_size` must be tuple or list of tuples'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.convlstm.ConvLSTM._extend_for_multilayer": [[496, 501], ["isinstance"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_extend_for_multilayer", "(", "param", ",", "num_layers", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "param", ",", "list", ")", ":", "\n", "            ", "param", "=", "[", "param", "]", "*", "num_layers", "\n", "", "return", "param", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn._NewEmptyTensorOp.forward": [[19, 23], ["x.new_empty"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "new_shape", ")", ":", "\n", "        ", "ctx", ".", "shape", "=", "x", ".", "shape", "\n", "return", "x", ".", "new_empty", "(", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn._NewEmptyTensorOp.backward": [[24, 28], ["_NewEmptyTensorOp.apply"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "shape", "=", "ctx", ".", "shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "grad", ",", "shape", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.Conv2d.forward": [[31, 44], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "Conv2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.ConvTranspose2d.forward": [[47, 65], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "ConvTranspose2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "-", "1", ")", "*", "d", "-", "2", "*", "p", "+", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", "+", "op", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", ",", "op", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "output_padding", ",", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "bias", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.BatchNorm2d.forward": [[68, 74], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "BatchNorm2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "", "output_shape", "=", "x", ".", "shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.DFConv2d.__init__": [[116, 179], ["torch.nn.Module.__init__", "isinstance", "dcn.Conv2d", "conv_block", "isinstance", "isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "with_modulated_dcn", "=", "True", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "DFConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "assert", "isinstance", "(", "stride", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "dilation", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "kernel_size", ")", "==", "2", "\n", "assert", "len", "(", "stride", ")", "==", "2", "\n", "assert", "len", "(", "dilation", ")", "==", "2", "\n", "padding", "=", "(", "\n", "dilation", "[", "0", "]", "*", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", ",", "\n", "dilation", "[", "1", "]", "*", "(", "kernel_size", "[", "1", "]", "-", "1", ")", "//", "2", "\n", ")", "\n", "offset_base_channels", "=", "kernel_size", "[", "0", "]", "*", "kernel_size", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "padding", "=", "dilation", "*", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "offset_base_channels", "=", "kernel_size", "*", "kernel_size", "\n", "", "if", "with_modulated_dcn", ":", "\n", "            ", "from", "maskrcnn_benchmark", ".", "layers", "import", "ModulatedDeformConv", "\n", "offset_channels", "=", "offset_base_channels", "*", "3", "#default: 27", "\n", "conv_block", "=", "ModulatedDeformConv", "\n", "", "else", ":", "\n", "            ", "from", "maskrcnn_benchmark", ".", "layers", "import", "DeformConv", "\n", "offset_channels", "=", "offset_base_channels", "*", "2", "#default: 18", "\n", "conv_block", "=", "DeformConv", "\n", "", "self", ".", "offset", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "deformable_groups", "*", "offset_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "groups", "=", "1", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", "for", "l", "in", "[", "self", ".", "offset", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0.", ")", "\n", "", "self", ".", "conv", "=", "conv_block", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "deformable_groups", "=", "deformable_groups", ",", "\n", "bias", "=", "bias", "\n", ")", "\n", "self", ".", "with_modulated_dcn", "=", "with_modulated_dcn", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.DFConv2d.forward": [[180, 204], ["_NewEmptyTensorOp.apply", "dcn.DFConv2d.numel", "dcn.DFConv2d.offset", "dcn.DFConv2d.conv", "dcn.DFConv2d.offset", "offset_mask[].sigmoid", "dcn.DFConv2d.conv", "zip"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "if", "not", "self", ".", "with_modulated_dcn", ":", "\n", "                ", "offset", "=", "self", ".", "offset", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ",", "offset", ")", "\n", "", "else", ":", "\n", "                ", "offset_mask", "=", "self", ".", "offset", "(", "x", ")", "\n", "offset", "=", "offset_mask", "[", ":", ",", ":", "18", ",", ":", ",", ":", "]", "\n", "mask", "=", "offset_mask", "[", ":", ",", "-", "9", ":", ",", ":", ",", ":", "]", ".", "sigmoid", "(", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ",", "offset", ",", "mask", ")", "\n", "", "return", "x", "\n", "# get output shape", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "conv", ".", "weight", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate": [[76, 112], ["tuple", "_NewEmptyTensorOp.apply", "input.numel", "torch.nn.functional.interpolate", "dcn.interpolate._check_size_scale_factor"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "", "def", "interpolate", "(", "\n", "input", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", "\n", ")", ":", "\n", "    ", "if", "input", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", "\n", ")", "\n", "\n", "", "def", "_check_size_scale_factor", "(", "dim", ")", ":", "\n", "        ", "if", "size", "is", "None", "and", "scale_factor", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"either size or scale_factor should be defined\"", ")", "\n", "", "if", "size", "is", "not", "None", "and", "scale_factor", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"only one of size or scale_factor should be defined\"", ")", "\n", "", "if", "(", "\n", "scale_factor", "is", "not", "None", "\n", "and", "isinstance", "(", "scale_factor", ",", "tuple", ")", "\n", "and", "len", "(", "scale_factor", ")", "!=", "dim", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"scale_factor shape must match input shape. \"", "\n", "\"Input is {}D, scale_factor size is {}\"", ".", "format", "(", "dim", ",", "len", "(", "scale_factor", ")", ")", "\n", ")", "\n", "\n", "", "", "def", "_output_size", "(", "dim", ")", ":", "\n", "        ", "_check_size_scale_factor", "(", "dim", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "            ", "return", "size", "\n", "", "scale_factors", "=", "_ntuple", "(", "dim", ")", "(", "scale_factor", ")", "\n", "# math.floor might return float in py2.7", "\n", "return", "[", "\n", "int", "(", "math", ".", "floor", "(", "input", ".", "size", "(", "i", "+", "2", ")", "*", "scale_factors", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "dim", ")", "\n", "]", "\n", "\n", "", "output_shape", "=", "tuple", "(", "_output_size", "(", "2", ")", ")", "\n", "output_shape", "=", "input", ".", "shape", "[", ":", "-", "2", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "input", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_conv.EdgeConv.__init__": [[31, 35], ["torch_geometric.nn.conv.MessagePassing.__init__", "edge_conv.EdgeConv.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["def", "__init__", "(", "self", ",", "nn", ",", "aggr", "=", "'max'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EdgeConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'max'", ",", "**", "kwargs", ")", "\n", "self", ".", "nn", "=", "nn", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_conv.EdgeConv.reset_parameters": [[36, 38], ["inits.reset"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.reset"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "nn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_conv.EdgeConv.forward": [[39, 45], ["edge_conv.EdgeConv.propagate", "x.unsqueeze", "x.dim"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "row", ",", "col", "=", "edge_index", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "if", "x", ".", "dim", "(", ")", "==", "1", "else", "x", "\n", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_conv.EdgeConv.message": [[46, 48], ["edge_conv.EdgeConv.nn", "torch.cat"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_i", ",", "x_j", ")", ":", "\n", "        ", "return", "self", ".", "nn", "(", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", "-", "x_i", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_conv.EdgeConv.__repr__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(nn={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "nn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_conv.DynamicEdgeConv.__init__": [[71, 74], ["edge_conv.EdgeConv.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "nn", ",", "k", ",", "aggr", "=", "'max'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DynamicEdgeConv", ",", "self", ")", ".", "__init__", "(", "nn", "=", "nn", ",", "aggr", "=", "aggr", ",", "**", "kwargs", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_conv.DynamicEdgeConv.forward": [[75, 79], ["torch_cluster.knn_graph", "edge_conv.EdgeConv.forward"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "batch", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "edge_index", "=", "knn_graph", "(", "x", ",", "self", ".", "k", ",", "batch", ",", "loop", "=", "False", ",", "flow", "=", "self", ".", "flow", ")", "\n", "return", "super", "(", "DynamicEdgeConv", ",", "self", ")", ".", "forward", "(", "x", ",", "edge_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.edge_conv.DynamicEdgeConv.__repr__": [[80, 83], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(nn={}, k={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "nn", ",", "\n", "self", ".", "k", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialGather_Module.__init__": [[42, 48], ["torch.nn.Module.__init__", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "cls_num", "=", "0", ",", "scale", "=", "1", ",", "use_gt", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatialGather_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls_num", "=", "cls_num", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "use_gt", "=", "use_gt", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialGather_Module.forward": [[49, 67], ["spatial_ocr_block.label_to_onehot", "torch.nn.functional.normalize.view", "feats.permute.permute.view", "feats.permute.permute.permute", "torch.nn.functional.normalize", "torch.matmul().permute().unsqueeze", "torch.nn.functional.softmax.view", "feats.permute.permute.view", "feats.permute.permute.permute", "torch.nn.functional.softmax", "torch.matmul().permute().unsqueeze", "torch.nn.functional.normalize.squeeze().type", "torch.nn.functional.softmax.size", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.size", "feats.permute.permute.size", "torch.nn.functional.softmax.size", "torch.nn.functional.softmax.size", "torch.nn.functional.softmax.size", "torch.nn.functional.softmax.size", "feats.permute.permute.size", "torch.matmul().permute", "torch.matmul().permute", "torch.nn.functional.normalize.squeeze", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.label_to_onehot", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "feats", ",", "probs", ",", "gt_probs", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "use_gt", "and", "gt_probs", "is", "not", "None", ":", "\n", "            ", "gt_probs", "=", "label_to_onehot", "(", "gt_probs", ".", "squeeze", "(", "1", ")", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", ",", "probs", ".", "size", "(", "1", ")", ")", "\n", "batch_size", ",", "c", ",", "h", ",", "w", "=", "gt_probs", ".", "size", "(", "0", ")", ",", "gt_probs", ".", "size", "(", "1", ")", ",", "gt_probs", ".", "size", "(", "2", ")", ",", "gt_probs", ".", "size", "(", "3", ")", "\n", "gt_probs", "=", "gt_probs", ".", "view", "(", "batch_size", ",", "c", ",", "-", "1", ")", "\n", "feats", "=", "feats", ".", "view", "(", "batch_size", ",", "feats", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "feats", "=", "feats", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch x hw x c ", "\n", "gt_probs", "=", "F", ".", "normalize", "(", "gt_probs", ",", "p", "=", "1", ",", "dim", "=", "2", ")", "# batch x k x hw", "\n", "ocr_context", "=", "torch", ".", "matmul", "(", "gt_probs", ",", "feats", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "3", ")", "# batch x k x c", "\n", "return", "ocr_context", "\n", "", "else", ":", "\n", "            ", "batch_size", ",", "c", ",", "h", ",", "w", "=", "probs", ".", "size", "(", "0", ")", ",", "probs", ".", "size", "(", "1", ")", ",", "probs", ".", "size", "(", "2", ")", ",", "probs", ".", "size", "(", "3", ")", "\n", "probs", "=", "probs", ".", "view", "(", "batch_size", ",", "c", ",", "-", "1", ")", "\n", "feats", "=", "feats", ".", "view", "(", "batch_size", ",", "feats", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "feats", "=", "feats", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch x hw x c ", "\n", "probs", "=", "F", ".", "softmax", "(", "self", ".", "scale", "*", "probs", ",", "dim", "=", "2", ")", "# batch x k x hw", "\n", "ocr_context", "=", "torch", ".", "matmul", "(", "probs", ",", "feats", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "3", ")", "# batch x k x c", "\n", "return", "ocr_context", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.PyramidSpatialGather_Module.__init__": [[74, 79], ["torch.nn.Module.__init__", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "cls_num", "=", "0", ",", "scales", "=", "[", "1", ",", "2", ",", "4", "]", ")", ":", "\n", "        ", "super", "(", "PyramidSpatialGather_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls_num", "=", "cls_num", "\n", "self", ".", "scales", "=", "scales", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.PyramidSpatialGather_Module._compute_single_scale": [[80, 104], ["torch.nn.functional.pad.size", "torch.nn.functional.pad.view().permute", "torch.nn.functional.pad.contiguous().view", "torch.nn.functional.pad.view().permute", "torch.nn.functional.pad.contiguous().view", "torch.nn.functional.pad.view", "torch.nn.functional.pad.view", "torch.nn.functional.pad.permute", "torch.nn.functional.softmax", "torch.matmul().view", "torch.matmul().view.permute().unsqueeze", "torch.nn.functional.pad.size", "torch.nn.functional.pad.size", "torch.nn.functional.pad.size", "torch.nn.functional.pad.size", "math.ceil", "math.ceil", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad.view", "torch.nn.functional.pad.contiguous", "torch.nn.functional.pad.view", "torch.nn.functional.pad.contiguous", "torch.matmul", "torch.matmul().view.permute"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "_compute_single_scale", "(", "self", ",", "feats", ",", "probs", ",", "dh", ",", "dw", ")", ":", "\n", "        ", "batch_size", ",", "k", ",", "h", ",", "w", "=", "probs", ".", "size", "(", "0", ")", ",", "probs", ".", "size", "(", "1", ")", ",", "probs", ".", "size", "(", "2", ")", ",", "probs", ".", "size", "(", "3", ")", "\n", "c", "=", "feats", ".", "size", "(", "1", ")", "\n", "\n", "out_h", ",", "out_w", "=", "math", ".", "ceil", "(", "h", "/", "dh", ")", ",", "math", ".", "ceil", "(", "w", "/", "dw", ")", "\n", "pad_h", ",", "pad_w", "=", "out_h", "*", "dh", "-", "h", ",", "out_w", "*", "dw", "-", "w", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "# padding in both left&right sides", "\n", "            ", "feats", "=", "F", ".", "pad", "(", "feats", ",", "(", "pad_w", "//", "2", ",", "pad_w", "-", "pad_w", "//", "2", ",", "pad_h", "//", "2", ",", "pad_h", "-", "pad_h", "//", "2", ")", ")", "\n", "probs", "=", "F", ".", "pad", "(", "probs", ",", "(", "pad_w", "//", "2", ",", "pad_w", "-", "pad_w", "//", "2", ",", "pad_h", "//", "2", ",", "pad_h", "-", "pad_h", "//", "2", ")", ")", "\n", "\n", "", "feats", "=", "feats", ".", "view", "(", "batch_size", ",", "c", ",", "out_h", ",", "dh", ",", "out_w", ",", "dw", ")", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", "\n", "feats", "=", "feats", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "dh", "*", "dw", ",", "c", ",", "out_h", ",", "out_w", ")", "\n", "\n", "probs", "=", "probs", ".", "view", "(", "batch_size", ",", "k", ",", "out_h", ",", "dh", ",", "out_w", ",", "dw", ")", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", "\n", "probs", "=", "probs", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "dh", "*", "dw", ",", "k", ",", "out_h", ",", "out_w", ")", "\n", "\n", "feats", "=", "feats", ".", "view", "(", "batch_size", ",", "dh", "*", "dw", ",", "c", ",", "-", "1", ")", "\n", "probs", "=", "probs", ".", "view", "(", "batch_size", ",", "dh", "*", "dw", ",", "k", ",", "-", "1", ")", "\n", "feats", "=", "feats", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "probs", "=", "F", ".", "softmax", "(", "probs", ",", "dim", "=", "3", ")", "# batch x k x hw", "\n", "cc", "=", "torch", ".", "matmul", "(", "probs", ",", "feats", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "c", ")", "# batch x k x c", "\n", "\n", "return", "cc", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.PyramidSpatialGather_Module.forward": [[105, 112], ["torch.cat", "spatial_ocr_block.PyramidSpatialGather_Module._compute_single_scale", "ocr_list.append"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.PyramidSpatialGather_Module._compute_single_scale"], ["", "def", "forward", "(", "self", ",", "feats", ",", "probs", ")", ":", "\n", "        ", "ocr_list", "=", "[", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "ocr_tmp", "=", "self", ".", "_compute_single_scale", "(", "feats", ",", "probs", ",", "scale", ",", "scale", ")", "\n", "ocr_list", ".", "append", "(", "ocr_tmp", ")", "\n", "", "pyramid_ocr", "=", "torch", ".", "cat", "(", "ocr_list", ",", "2", ")", "\n", "return", "pyramid_ocr", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block._ObjectAttentionBlock.__init__": [[129, 170], ["torch.nn.Module.__init__", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "key_channels", ",", "\n", "scale", "=", "1", ",", "\n", "use_gt", "=", "False", ",", "\n", "use_bg", "=", "False", ",", "\n", "fetch_attention", "=", "False", ",", "\n", "bn_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "_ObjectAttentionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "key_channels", "=", "key_channels", "\n", "self", ".", "use_gt", "=", "use_gt", "\n", "self", ".", "use_bg", "=", "use_bg", "\n", "self", ".", "fetch_attention", "=", "fetch_attention", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "scale", ",", "scale", ")", ")", "\n", "self", ".", "f_pixel", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "key_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "self", ".", "key_channels", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "key_channels", ",", "out_channels", "=", "self", ".", "key_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "self", ".", "key_channels", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "f_object", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "key_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "self", ".", "key_channels", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "key_channels", ",", "out_channels", "=", "self", ".", "key_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "self", ".", "key_channels", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "f_down", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "key_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "self", ".", "key_channels", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "f_up", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "key_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "self", ".", "in_channels", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block._ObjectAttentionBlock.forward": [[172, 215], ["spatial_ocr_block._ObjectAttentionBlock.f_pixel().view", "query.permute.permute.permute", "spatial_ocr_block._ObjectAttentionBlock.f_object().view", "spatial_ocr_block._ObjectAttentionBlock.f_down().view", "value.permute.permute.permute", "torch.matmul", "torch.nn.functional.interpolate.permute().contiguous", "torch.nn.functional.interpolate.view", "spatial_ocr_block._ObjectAttentionBlock.f_up", "spatial_ocr_block._ObjectAttentionBlock.size", "spatial_ocr_block._ObjectAttentionBlock.size", "spatial_ocr_block._ObjectAttentionBlock.size", "spatial_ocr_block._ObjectAttentionBlock.pool", "spatial_ocr_block.label_to_onehot", "gt_label[].permute().view", "torch.nn.functional.normalize", "torch.matmul", "torch.nn.functional.softmax", "torch.nn.functional.interpolate", "torch.matmul", "torch.nn.functional.interpolate.permute().contiguous", "torch.nn.functional.interpolate.view", "spatial_ocr_block._ObjectAttentionBlock.f_up", "torch.nn.functional.interpolate", "spatial_ocr_block._ObjectAttentionBlock.f_pixel", "spatial_ocr_block._ObjectAttentionBlock.f_object", "spatial_ocr_block._ObjectAttentionBlock.f_down", "label_to_onehot.squeeze().type", "torch.nn.functional.normalize", "torch.nn.functional.interpolate.permute", "proxy.size", "gt_label[].permute", "spatial_ocr_block._ObjectAttentionBlock.size", "torch.nn.functional.interpolate.permute", "label_to_onehot.squeeze", "spatial_ocr_block._ObjectAttentionBlock.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.label_to_onehot", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "proxy", ",", "gt_label", "=", "None", ")", ":", "\n", "        ", "batch_size", ",", "h", ",", "w", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "if", "self", ".", "scale", ">", "1", ":", "\n", "            ", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "", "query", "=", "self", ".", "f_pixel", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "key_channels", ",", "-", "1", ")", "\n", "query", "=", "query", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "key", "=", "self", ".", "f_object", "(", "proxy", ")", ".", "view", "(", "batch_size", ",", "self", ".", "key_channels", ",", "-", "1", ")", "\n", "value", "=", "self", ".", "f_down", "(", "proxy", ")", ".", "view", "(", "batch_size", ",", "self", ".", "key_channels", ",", "-", "1", ")", "\n", "value", "=", "value", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "if", "self", ".", "use_gt", "and", "gt_label", "is", "not", "None", ":", "\n", "            ", "gt_label", "=", "label_to_onehot", "(", "gt_label", ".", "squeeze", "(", "1", ")", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", ",", "proxy", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "sim_map", "=", "gt_label", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "batch_size", ",", "h", "*", "w", ",", "-", "1", ")", "\n", "if", "self", ".", "use_bg", ":", "\n", "                ", "bg_sim_map", "=", "1.0", "-", "sim_map", "\n", "bg_sim_map", "=", "F", ".", "normalize", "(", "bg_sim_map", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "", "sim_map", "=", "F", ".", "normalize", "(", "sim_map", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "sim_map", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "\n", "sim_map", "=", "(", "self", ".", "key_channels", "**", "-", ".5", ")", "*", "sim_map", "\n", "sim_map", "=", "F", ".", "softmax", "(", "sim_map", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# add bg context ...", "\n", "", "context", "=", "torch", ".", "matmul", "(", "sim_map", ",", "value", ")", "# hw x k x k x c", "\n", "context", "=", "context", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "context", "=", "context", ".", "view", "(", "batch_size", ",", "self", ".", "key_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "context", "=", "self", ".", "f_up", "(", "context", ")", "\n", "if", "self", ".", "scale", ">", "1", ":", "\n", "            ", "context", "=", "F", ".", "interpolate", "(", "input", "=", "context", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "use_bg", ":", "\n", "            ", "bg_context", "=", "torch", ".", "matmul", "(", "bg_sim_map", ",", "value", ")", "\n", "bg_context", "=", "bg_context", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "bg_context", "=", "bg_context", ".", "view", "(", "batch_size", ",", "self", ".", "key_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "bg_context", "=", "self", ".", "f_up", "(", "bg_context", ")", "\n", "bg_context", "=", "F", ".", "interpolate", "(", "input", "=", "bg_context", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "context", ",", "bg_context", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "fetch_attention", ":", "\n", "                ", "return", "context", ",", "sim_map", "\n", "", "else", ":", "\n", "                ", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.ObjectAttentionBlock2D.__init__": [[218, 233], ["spatial_ocr_block._ObjectAttentionBlock.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "key_channels", ",", "\n", "scale", "=", "1", ",", "\n", "use_gt", "=", "False", ",", "\n", "use_bg", "=", "False", ",", "\n", "fetch_attention", "=", "False", ",", "\n", "bn_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "ObjectAttentionBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "key_channels", ",", "\n", "scale", ",", "\n", "use_gt", ",", "\n", "use_bg", ",", "\n", "fetch_attention", ",", "\n", "bn_type", "=", "bn_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialOCR_Module.__init__": [[244, 279], ["torch.nn.Module.__init__", "spatial_ocr_block.ObjectAttentionBlock2D", "torch.nn.Sequential", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "key_channels", ",", "\n", "out_channels", ",", "\n", "scale", "=", "1", ",", "\n", "dropout", "=", "0.1", ",", "\n", "use_gt", "=", "False", ",", "\n", "use_bg", "=", "False", ",", "\n", "use_oc", "=", "True", ",", "\n", "fetch_attention", "=", "False", ",", "\n", "bn_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "SpatialOCR_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gt", "=", "use_gt", "\n", "self", ".", "use_bg", "=", "use_bg", "\n", "self", ".", "use_oc", "=", "use_oc", "\n", "self", ".", "fetch_attention", "=", "fetch_attention", "\n", "self", ".", "object_context_block", "=", "ObjectAttentionBlock2D", "(", "in_channels", ",", "\n", "key_channels", ",", "\n", "scale", ",", "\n", "use_gt", ",", "\n", "use_bg", ",", "\n", "fetch_attention", ",", "\n", "bn_type", ")", "\n", "if", "self", ".", "use_bg", ":", "\n", "            ", "if", "self", ".", "use_oc", ":", "\n", "                ", "_in_channels", "=", "3", "*", "in_channels", "\n", "", "else", ":", "\n", "                ", "_in_channels", "=", "2", "*", "in_channels", "\n", "", "", "else", ":", "\n", "            ", "_in_channels", "=", "2", "*", "in_channels", "\n", "\n", "", "self", ".", "conv_bn_dropout", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "_in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "out_channels", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "dropout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialOCR_Module.forward": [[281, 305], ["spatial_ocr_block.SpatialOCR_Module.conv_bn_dropout", "spatial_ocr_block.SpatialOCR_Module.object_context_block", "spatial_ocr_block.SpatialOCR_Module.object_context_block", "spatial_ocr_block.SpatialOCR_Module.object_context_block", "spatial_ocr_block.SpatialOCR_Module.object_context_block", "spatial_ocr_block.SpatialOCR_Module.conv_bn_dropout", "spatial_ocr_block.SpatialOCR_Module.conv_bn_dropout", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "proxy_feats", ",", "gt_label", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "use_gt", "and", "gt_label", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "use_bg", ":", "\n", "                ", "context", ",", "bg_context", "=", "self", ".", "object_context_block", "(", "feats", ",", "proxy_feats", ",", "gt_label", ")", "\n", "", "else", ":", "\n", "                ", "context", "=", "self", ".", "object_context_block", "(", "feats", ",", "proxy_feats", ",", "gt_label", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "fetch_attention", ":", "\n", "                ", "context", ",", "sim_map", "=", "self", ".", "object_context_block", "(", "feats", ",", "proxy_feats", ")", "\n", "", "else", ":", "\n", "                ", "context", "=", "self", ".", "object_context_block", "(", "feats", ",", "proxy_feats", ")", "\n", "\n", "", "", "if", "self", ".", "use_bg", ":", "\n", "            ", "if", "self", ".", "use_oc", ":", "\n", "                ", "output", "=", "self", ".", "conv_bn_dropout", "(", "torch", ".", "cat", "(", "[", "context", ",", "bg_context", ",", "feats", "]", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "conv_bn_dropout", "(", "torch", ".", "cat", "(", "[", "bg_context", ",", "feats", "]", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "conv_bn_dropout", "(", "torch", ".", "cat", "(", "[", "context", ",", "feats", "]", ",", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "fetch_attention", ":", "\n", "            ", "return", "output", ",", "sim_map", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialOCR_Context.__init__": [[312, 318], ["torch.nn.Module.__init__", "spatial_ocr_block.ObjectAttentionBlock2D"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "key_channels", ",", "scale", "=", "1", ",", "dropout", "=", "0", ",", "bn_type", "=", "None", ",", ")", ":", "\n", "        ", "super", "(", "SpatialOCR_Context", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "object_context_block", "=", "ObjectAttentionBlock2D", "(", "in_channels", ",", "\n", "key_channels", ",", "\n", "scale", ",", "\n", "bn_type", "=", "bn_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialOCR_Context.forward": [[319, 322], ["spatial_ocr_block.SpatialOCR_Context.object_context_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "proxy_feats", ")", ":", "\n", "        ", "context", "=", "self", ".", "object_context_block", "(", "feats", ",", "proxy_feats", ")", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialOCR_ASP_Module.__init__": [[326, 348], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "spatial_ocr_block.SpatialGather_Module", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "spatial_ocr_block.SpatialOCR_Context", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Conv2d", "module_helper.ModuleHelper.BNReLU", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "hidden_features", "=", "256", ",", "out_features", "=", "512", ",", "dilations", "=", "(", "12", ",", "24", ",", "36", ")", ",", "num_classes", "=", "19", ",", "bn_type", "=", "None", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "SpatialOCR_ASP_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "from", "lib", ".", "models", ".", "modules", ".", "spatial_ocr_block", "import", "SpatialOCR_Context", "\n", "self", ".", "context", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "features", ",", "hidden_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "hidden_features", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "SpatialOCR_Context", "(", "in_channels", "=", "hidden_features", ",", "\n", "key_channels", "=", "hidden_features", "//", "2", ",", "scale", "=", "1", ",", "bn_type", "=", "bn_type", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "features", ",", "hidden_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "hidden_features", ",", "bn_type", "=", "bn_type", ")", ",", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "features", ",", "hidden_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilations", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "bias", "=", "True", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "hidden_features", ",", "bn_type", "=", "bn_type", ")", ",", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "features", ",", "hidden_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilations", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "bias", "=", "True", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "hidden_features", ",", "bn_type", "=", "bn_type", ")", ",", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "features", ",", "hidden_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilations", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "bias", "=", "True", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "hidden_features", ",", "bn_type", "=", "bn_type", ")", ",", ")", "\n", "self", ".", "conv_bn_dropout", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "hidden_features", "*", "5", ",", "out_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "ModuleHelper", ".", "BNReLU", "(", "out_features", ",", "bn_type", "=", "bn_type", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "dropout", ")", "\n", ")", "\n", "self", ".", "object_head", "=", "SpatialGather_Module", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialOCR_ASP_Module._cat_each": [[349, 355], ["range", "len", "len", "len", "z.append", "torch.cat"], "methods", ["None"], ["", "def", "_cat_each", "(", "self", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", ")", ":", "\n", "        ", "assert", "(", "len", "(", "feat1", ")", "==", "len", "(", "feat2", ")", ")", "\n", "z", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "feat1", ")", ")", ":", "\n", "            ", "z", ".", "append", "(", "torch", ".", "cat", "(", "(", "feat1", "[", "i", "]", ",", "feat2", "[", "i", "]", ",", "feat3", "[", "i", "]", ",", "feat4", "[", "i", "]", ",", "feat5", "[", "i", "]", ")", ",", "1", ")", ")", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialOCR_ASP_Module.forward": [[356, 382], ["isinstance", "spatial_ocr_block.SpatialOCR_ASP_Module.object_head", "spatial_ocr_block.SpatialOCR_ASP_Module.conv2", "spatial_ocr_block.SpatialOCR_ASP_Module.conv3", "spatial_ocr_block.SpatialOCR_ASP_Module.conv4", "spatial_ocr_block.SpatialOCR_ASP_Module.conv5", "isinstance", "spatial_ocr_block.SpatialOCR_ASP_Module.conv_bn_dropout", "x.size", "torch.cat", "isinstance", "isinstance", "x[].size", "RuntimeError", "isinstance", "isinstance", "spatial_ocr_block.SpatialOCR_ASP_Module._cat_each", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.SpatialOCR_ASP_Module._cat_each"], ["", "def", "forward", "(", "self", ",", "x", ",", "probs", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "Variable", ")", ":", "\n", "            ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "_", ",", "_", ",", "h", ",", "w", "=", "x", "[", "0", "]", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'unknown input type'", ")", "\n", "\n", "", "feat1", "=", "self", ".", "context", "[", "0", "]", "(", "x", ")", "\n", "feat1", "=", "self", ".", "context", "[", "1", "]", "(", "feat1", ")", "\n", "proxy_feats", "=", "self", ".", "object_head", "(", "feat1", ",", "probs", ")", "\n", "feat1", "=", "self", ".", "context", "[", "2", "]", "(", "feat1", ",", "proxy_feats", ")", "\n", "feat2", "=", "self", ".", "conv2", "(", "x", ")", "\n", "feat3", "=", "self", ".", "conv3", "(", "x", ")", "\n", "feat4", "=", "self", ".", "conv4", "(", "x", ")", "\n", "feat5", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "if", "isinstance", "(", "x", ",", "Variable", ")", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", ")", ",", "1", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "out", "=", "self", ".", "_cat_each", "(", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'unknown input type'", ")", "\n", "\n", "", "output", "=", "self", ".", "conv_bn_dropout", "(", "out", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.spatial_ocr_block.label_to_onehot": [[22, 35], ["gt.size", "torch.zeros().cuda", "onehot.scatter_.scatter_", "onehot.scatter_.permute", "x.unsqueeze", "torch.zeros", "x.size", "x.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["def", "label_to_onehot", "(", "gt", ",", "num_classes", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    gt: ground truth with size (N, H, W)\n    num_classes: the number of classes of different label\n    \"\"\"", "\n", "N", ",", "H", ",", "W", "=", "gt", ".", "size", "(", ")", "\n", "x", "=", "gt", "\n", "x", "[", "x", "==", "ignore_index", "]", "=", "num_classes", "\n", "# convert label into onehot format", "\n", "onehot", "=", "torch", ".", "zeros", "(", "N", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ",", "num_classes", "+", "1", ")", ".", "cuda", "(", ")", "\n", "onehot", "=", "onehot", ".", "scatter_", "(", "-", "1", ",", "x", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "\n", "\n", "return", "onehot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.ResNeXt101_32x4d.__init__": [[39, 45], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNeXt101_32x4d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "features", "=", "resnext101_32x4d_features", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "(", "7", ",", "7", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "last_linear", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.ResNeXt101_32x4d.logits": [[46, 51], ["resnext.ResNeXt101_32x4d.avg_pool", "resnext.ResNeXt101_32x4d.view", "resnext.ResNeXt101_32x4d.last_linear", "resnext.ResNeXt101_32x4d.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "logits", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "avg_pool", "(", "input", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.ResNeXt101_32x4d.forward": [[52, 56], ["resnext.ResNeXt101_32x4d.features", "resnext.ResNeXt101_32x4d.logits"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.ResNeXt101_64x4d.logits"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "input", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.ResNeXt101_64x4d.__init__": [[60, 66], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNeXt101_64x4d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "features", "=", "resnext101_64x4d_features", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "(", "7", ",", "7", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "last_linear", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.ResNeXt101_64x4d.logits": [[67, 72], ["resnext.ResNeXt101_64x4d.avg_pool", "resnext.ResNeXt101_64x4d.view", "resnext.ResNeXt101_64x4d.last_linear", "resnext.ResNeXt101_64x4d.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "logits", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "avg_pool", "(", "input", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "last_linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.ResNeXt101_64x4d.forward": [[73, 77], ["resnext.ResNeXt101_64x4d.features", "resnext.ResNeXt101_64x4d.logits"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.ResNeXt101_64x4d.logits"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "input", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.resnext101_32x4d": [[79, 92], ["resnext.ResNeXt101_32x4d", "ResNeXt101_32x4d.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "", "def", "resnext101_32x4d", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", ":", "\n", "    ", "model", "=", "ResNeXt101_32x4d", "(", "num_classes", "=", "num_classes", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "settings", "=", "pretrained_settings", "[", "'resnext101_32x4d'", "]", "[", "pretrained", "]", "\n", "assert", "num_classes", "==", "settings", "[", "'num_classes'", "]", ",", "\"num_classes should be {}, but is {}\"", ".", "format", "(", "settings", "[", "'num_classes'", "]", ",", "num_classes", ")", "\n", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "settings", "[", "'url'", "]", ")", ")", "\n", "model", ".", "input_space", "=", "settings", "[", "'input_space'", "]", "\n", "model", ".", "input_size", "=", "settings", "[", "'input_size'", "]", "\n", "model", ".", "input_range", "=", "settings", "[", "'input_range'", "]", "\n", "model", ".", "mean", "=", "settings", "[", "'mean'", "]", "\n", "model", ".", "std", "=", "settings", "[", "'std'", "]", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.resnext.resnext101_64x4d": [[93, 106], ["resnext.ResNeXt101_64x4d", "ResNeXt101_64x4d.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "resnext101_64x4d", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "'imagenet'", ")", ":", "\n", "    ", "model", "=", "ResNeXt101_64x4d", "(", "num_classes", "=", "num_classes", ")", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "settings", "=", "pretrained_settings", "[", "'resnext101_64x4d'", "]", "[", "pretrained", "]", "\n", "assert", "num_classes", "==", "settings", "[", "'num_classes'", "]", ",", "\"num_classes should be {}, but is {}\"", ".", "format", "(", "settings", "[", "'num_classes'", "]", ",", "num_classes", ")", "\n", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "settings", "[", "'url'", "]", ")", ")", "\n", "model", ".", "input_space", "=", "settings", "[", "'input_space'", "]", "\n", "model", ".", "input_size", "=", "settings", "[", "'input_size'", "]", "\n", "model", ".", "input_range", "=", "settings", "[", "'input_range'", "]", "\n", "model", ".", "mean", "=", "settings", "[", "'mean'", "]", "\n", "model", ".", "std", "=", "settings", "[", "'std'", "]", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BNReLU": [[27, 75], ["torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.SyncBatchNorm", "torch.SyncBatchNorm", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "@", "staticmethod", "\n", "def", "BNReLU", "(", "num_features", ",", "bn_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "bn_type", "==", "'torchbn'", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "elif", "bn_type", "==", "'torchsyncbn'", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "SyncBatchNorm", "(", "num_features", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "elif", "bn_type", "==", "'syncbn'", ":", "\n", "            ", "from", ".", ".", "extensions", ".", "syncbn", ".", "module", "import", "BatchNorm2d", "\n", "return", "nn", ".", "Sequential", "(", "\n", "BatchNorm2d", "(", "num_features", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "elif", "bn_type", "==", "'sn'", ":", "\n", "            ", "from", ".", ".", "extensions", ".", "switchablenorms", ".", "switchable_norm", "import", "SwitchNorm2d", "\n", "return", "nn", ".", "Sequential", "(", "\n", "SwitchNorm2d", "(", "num_features", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "elif", "bn_type", "==", "'gn'", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "8", ",", "num_channels", "=", "num_features", ",", "**", "kwargs", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "elif", "bn_type", "==", "'fn'", ":", "\n", "            ", "Log", ".", "error", "(", "'Not support Filter-Response-Normalization: {}.'", ".", "format", "(", "bn_type", ")", ")", "\n", "exit", "(", "1", ")", "\n", "", "elif", "bn_type", "==", "'inplace_abn'", ":", "\n", "            ", "torch_ver", "=", "torch", ".", "__version__", "[", ":", "3", "]", "\n", "# Log.info('Pytorch Version: {}'.format(torch_ver))", "\n", "if", "torch_ver", "==", "'0.4'", ":", "\n", "                ", "from", ".", ".", "extensions", ".", "inplace_abn", ".", "bn", "import", "InPlaceABNSync", "\n", "return", "InPlaceABNSync", "(", "num_features", ",", "**", "kwargs", ")", "\n", "", "elif", "torch_ver", "==", "'1.0'", "or", "torch_ver", "==", "'1.1'", ":", "\n", "                ", "from", ".", ".", "extensions", ".", "inplace_abn_1", ".", "bn", "import", "InPlaceABNSync", "\n", "return", "InPlaceABNSync", "(", "num_features", ",", "**", "kwargs", ")", "\n", "", "elif", "torch_ver", "==", "'1.2'", ":", "\n", "                ", "from", "inplace_abn", "import", "InPlaceABNSync", "\n", "return", "InPlaceABNSync", "(", "num_features", ",", "**", "kwargs", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "Log", ".", "error", "(", "'Not support BN type: {}.'", ".", "format", "(", "bn_type", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d": [[76, 127], ["functools.partial", "logger.Logger.error", "exit", "functools.partial", "functools.partial", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error"], ["", "", "@", "staticmethod", "\n", "def", "BatchNorm2d", "(", "bn_type", "=", "'torch'", ",", "ret_cls", "=", "False", ")", ":", "\n", "        ", "if", "bn_type", "==", "'torchbn'", ":", "\n", "            ", "return", "nn", ".", "BatchNorm2d", "\n", "\n", "", "elif", "bn_type", "==", "'torchsyncbn'", ":", "\n", "            ", "return", "nn", ".", "SyncBatchNorm", "\n", "\n", "", "elif", "bn_type", "==", "'syncbn'", ":", "\n", "            ", "from", ".", ".", "extensions", ".", "syncbn", ".", "module", "import", "BatchNorm2d", "\n", "return", "BatchNorm2d", "\n", "\n", "", "elif", "bn_type", "==", "'sn'", ":", "\n", "            ", "from", ".", ".", "extensions", ".", "switchablenorms", ".", "switchable_norm", "import", "SwitchNorm2d", "\n", "return", "SwitchNorm2d", "\n", "\n", "", "elif", "bn_type", "==", "'gn'", ":", "\n", "            ", "return", "functools", ".", "partial", "(", "nn", ".", "GroupNorm", ",", "num_groups", "=", "32", ")", "\n", "\n", "", "elif", "bn_type", "==", "'inplace_abn'", ":", "\n", "            ", "torch_ver", "=", "torch", ".", "__version__", "[", ":", "3", "]", "\n", "if", "torch_ver", "==", "'0.4'", ":", "\n", "                ", "from", ".", ".", "extensions", ".", "inplace_abn", ".", "bn", "import", "InPlaceABNSync", "\n", "if", "ret_cls", ":", "\n", "                    ", "return", "InPlaceABNSync", "\n", "\n", "", "return", "functools", ".", "partial", "(", "InPlaceABNSync", ",", "activation", "=", "'none'", ")", "\n", "", "elif", "torch_ver", "==", "'0.3'", ":", "\n", "                ", "from", ".", ".", "extensions", ".", "inplace_abn03", ".", "bn", "import", "InPlaceABNSync", "\n", "if", "ret_cls", ":", "\n", "                    ", "return", "InPlaceABNSync", "\n", "\n", "", "return", "functools", ".", "partial", "(", "InPlaceABNSync", ",", "activation", "=", "'none'", ")", "\n", "\n", "", "elif", "torch_ver", "==", "'1.0'", "or", "torch_ver", "==", "'1.1'", ":", "\n", "                ", "from", ".", ".", "extensions", ".", "inplace_abn_1", ".", "bn", "import", "InPlaceABNSync", "\n", "if", "ret_cls", ":", "\n", "                    ", "return", "InPlaceABNSync", "\n", "\n", "", "return", "functools", ".", "partial", "(", "InPlaceABNSync", ",", "activation", "=", "'none'", ")", "\n", "\n", "", "elif", "torch_ver", "==", "'1.6'", ":", "\n", "                ", "from", "inplace_abn", "import", "InPlaceABNSync", "\n", "if", "ret_cls", ":", "\n", "                    ", "return", "InPlaceABNSync", "\n", "\n", "", "return", "functools", ".", "partial", "(", "InPlaceABNSync", ",", "activation", "=", "'identity'", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "Log", ".", "error", "(", "'Not support BN type: {}.'", ".", "format", "(", "bn_type", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model": [[128, 195], ["logger.Logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "dict", "torch.load.items", "torch.load.items", "model.load_state_dict", "logger.Logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "dict", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "dict", "torch.load.items", "torch.load.items", "model.state_dict.keys", "model.state_dict.keys", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "k.split", "k.split", "k.split", "k.split"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update"], ["", "", "@", "staticmethod", "\n", "def", "load_model", "(", "model", ",", "pretrained", "=", "None", ",", "all_match", "=", "True", ",", "network", "=", "'resnet101'", ")", ":", "\n", "        ", "if", "pretrained", "is", "None", ":", "\n", "            ", "return", "model", "\n", "\n", "", "if", "all_match", ":", "\n", "            ", "Log", ".", "info", "(", "'Loading pretrained model:{}'", ".", "format", "(", "pretrained", ")", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "load_dict", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "'resinit.{}'", ".", "format", "(", "k", ")", "in", "model_dict", ":", "\n", "                    ", "load_dict", "[", "'resinit.{}'", ".", "format", "(", "k", ")", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "load_dict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "load_dict", ")", "\n", "\n", "", "else", ":", "\n", "            ", "Log", ".", "info", "(", "'Loading pretrained model:{}'", ".", "format", "(", "pretrained", ")", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "\n", "if", "network", "==", "\"wide_resnet\"", ":", "# or network == \"hrnet\":", "\n", "                ", "pretrained_dict", "=", "pretrained_dict", "[", "'state_dict'", "]", "\n", "\n", "", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "if", "network", "==", "\"hrnet_plus\"", ":", "\n", "                ", "load_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "\n", "", "elif", "network", "==", "\"hrnet\"", "or", "network", "==", "\"xception\"", ":", "\n", "                ", "load_dict", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                    ", "name", "=", "k", "\n", "if", "'module.backbone'", "in", "k", ":", "\n", "                        ", "name", "=", "name", "[", "16", ":", "]", "\n", "", "elif", "'module'", "in", "k", ":", "\n", "                        ", "name", "=", "name", "[", "7", ":", "]", "\n", "", "if", "name", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "                        ", "load_dict", "[", "name", "]", "=", "v", "\n", "#load_dict = {k: v for k, v in pretrained_dict.items() if k in model_dict.keys()}", "\n", "\n", "", "", "", "elif", "network", "==", "\"dcnet\"", "or", "network", "==", "\"resnext\"", ":", "\n", "                ", "load_dict", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "'resinit.{}'", ".", "format", "(", "k", ")", "in", "model_dict", ":", "\n", "                        ", "load_dict", "[", "'resinit.{}'", ".", "format", "(", "k", ")", "]", "=", "v", "\n", "", "else", ":", "\n", "                        ", "if", "k", "in", "model_dict", ":", "\n", "                            ", "load_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                            ", "pass", "\n", "\n", "", "", "", "", "elif", "network", "==", "\"wide_resnet\"", ":", "\n", "                ", "load_dict", "=", "{", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", "in", "model_dict", "}", "\n", "", "else", ":", "\n", "                ", "load_dict", "=", "{", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", "in", "model_dict", "}", "\n", "\n", "# used to debug", "\n", "#Log.info('Matched Keys: {}'.format(load_dict.keys()))", "\n", "", "model_dict", ".", "update", "(", "load_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url": [[196, 210], ["os.path.join", "os.path.join", "logger.Logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.exists", "os.makedirs", "url.split", "os.path.exists", "logger.Logger.info", "urlretrieve"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "@", "staticmethod", "\n", "def", "load_url", "(", "url", ",", "map_location", "=", "None", ")", ":", "\n", "        ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "'~'", ",", "'.PyTorchCV'", ",", "'models'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "\n", "", "filename", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "cached_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "            ", "Log", ".", "info", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "url", ",", "cached_file", ")", ")", "\n", "urlretrieve", "(", "url", ",", "cached_file", ")", "\n", "\n", "", "Log", ".", "info", "(", "'Loading pretrained model:{}'", ".", "format", "(", "cached_file", ")", ")", "\n", "return", "torch", ".", "load", "(", "cached_file", ",", "map_location", "=", "map_location", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.constant_init": [[211, 216], ["torch.init.constant_", "torch.init.constant_", "hasattr", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "constant_init", "(", "module", ",", "val", ",", "bias", "=", "0", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "weight", ",", "val", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.xavier_init": [[217, 226], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "hasattr", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "xavier_init", "(", "module", ",", "gain", "=", "1", ",", "bias", "=", "0", ",", "distribution", "=", "'normal'", ")", ":", "\n", "        ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.normal_init": [[227, 232], ["torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "normal_init", "(", "module", ",", "mean", "=", "0", ",", "std", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", ",", "std", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.uniform_init": [[233, 238], ["torch.init.uniform_", "torch.init.uniform_", "hasattr", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "uniform_init", "(", "module", ",", "a", "=", "0", ",", "b", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "module", ".", "weight", ",", "a", ",", "b", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.kaiming_init": [[239, 254], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "hasattr", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "kaiming_init", "(", "module", ",", "\n", "mode", "=", "'fan_in'", ",", "\n", "nonlinearity", "=", "'leaky_relu'", ",", "\n", "bias", "=", "0", ",", "\n", "distribution", "=", "'normal'", ")", ":", "\n", "        ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.ConvBnAct.__init__": [[26, 44], ["torch.Sequential.__init__", "customize.ConvBnAct.add_module", "customize.ConvBnAct.add_module", "conv_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "customize.ConvBnAct.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "radix", "=", "0", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "act", "=", "True", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "radix", ">", "0", ":", "\n", "            ", "conv_layer", "=", "SplAtConv2d", "\n", "conv_kwargs", "=", "{", "'radix'", ":", "radix", ",", "'rectify'", ":", "rectify", ",", "'rectify_avg'", ":", "rectify_avg", ",", "'norm_layer'", ":", "norm_layer", "}", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "RFConv2d", "if", "rectify", "else", "nn", ".", "Conv2d", "\n", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectify", "else", "{", "}", "\n", "", "self", ".", "add_module", "(", "\"conv\"", ",", "conv_layer", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "\n", "padding_mode", "=", "padding_mode", ",", "**", "conv_kwargs", ")", ")", "\n", "self", ".", "add_module", "(", "\"bn\"", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "if", "act", ":", "\n", "            ", "self", ".", "add_module", "(", "\"relu\"", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.GlobalAvgPool2d.__init__": [[47, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.GlobalAvgPool2d.forward": [[51, 53], ["torch.nn.functional.adaptive_avg_pool2d().view", "torch.nn.functional.adaptive_avg_pool2d().view", "inputs.size", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "F", ".", "adaptive_avg_pool2d", "(", "inputs", ",", "1", ")", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.GramMatrix.forward": [[61, 67], ["y.size", "y.view", "y.view.transpose", "y.view.bmm"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["def", "forward", "(", "self", ",", "y", ")", ":", "\n", "        ", "(", "b", ",", "ch", ",", "h", ",", "w", ")", "=", "y", ".", "size", "(", ")", "\n", "features", "=", "y", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "features_t", "=", "features", ".", "transpose", "(", "1", ",", "2", ")", "\n", "gram", "=", "features", ".", "bmm", "(", "features_t", ")", "/", "(", "ch", "*", "h", "*", "w", ")", "\n", "return", "gram", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.View.__init__": [[73, 79], ["torch.Module.__init__", "isinstance", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "View", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "Size", ")", ":", "\n", "            ", "self", ".", "size", "=", "args", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "torch", ".", "Size", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.View.forward": [[80, 82], ["input.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.Sum.__init__": [[85, 89], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "keep_dim", "=", "False", ")", ":", "\n", "        ", "super", "(", "Sum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "keep_dim", "=", "keep_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.Sum.forward": [[90, 92], ["input.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "sum", "(", "self", ".", "dim", ",", "self", ".", "keep_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.Mean.__init__": [[95, 99], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "keep_dim", "=", "False", ")", ":", "\n", "        ", "super", "(", "Mean", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "keep_dim", "=", "keep_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.Mean.forward": [[100, 102], ["input.mean"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "mean", "(", "self", ".", "dim", ",", "self", ".", "keep_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.Normalize.__init__": [[123, 127], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.Normalize.forward": [[128, 130], ["torch.nn.functional.normalize", "torch.nn.functional.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "x", ",", "self", ".", "p", ",", "self", ".", "dim", ",", "eps", "=", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.ConcurrentModule.__init__": [[138, 140], ["torch.ModuleList.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "modules", "=", "None", ")", ":", "\n", "        ", "super", "(", "ConcurrentModule", ",", "self", ")", ".", "__init__", "(", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.ConcurrentModule.forward": [[141, 146], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.append", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "layer", "in", "self", ":", "\n", "            ", "outputs", ".", "append", "(", "layer", "(", "x", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.PyramidPooling.__init__": [[152, 174], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "norm_layer", ",", "up_kwargs", ")", ":", "\n", "        ", "super", "(", "PyramidPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "3", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "6", ")", "\n", "\n", "out_channels", "=", "int", "(", "in_channels", "/", "4", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "# bilinear interpolate options", "\n", "self", ".", "_up_kwargs", "=", "up_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.customize.PyramidPooling.forward": [[175, 182], ["x.size", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "customize.PyramidPooling.conv1", "customize.PyramidPooling.conv2", "customize.PyramidPooling.conv3", "customize.PyramidPooling.conv4", "customize.PyramidPooling.pool1", "customize.PyramidPooling.pool2", "customize.PyramidPooling.pool3", "customize.PyramidPooling.pool4"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "feat1", "=", "F", ".", "interpolate", "(", "self", ".", "conv1", "(", "self", ".", "pool1", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "feat2", "=", "F", ".", "interpolate", "(", "self", ".", "conv2", "(", "self", ".", "pool2", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "feat3", "=", "F", ".", "interpolate", "(", "self", ".", "conv3", "(", "self", ".", "pool3", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "feat4", "=", "F", ".", "interpolate", "(", "self", ".", "conv4", "(", "self", ".", "pool4", "(", "x", ")", ")", ",", "(", "h", ",", "w", ")", ",", "**", "self", ".", "_up_kwargs", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ")", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.uniform": [[4, 8], ["math.sqrt", "tensor.data.uniform_"], "function", ["None"], ["def", "uniform", "(", "size", ",", "tensor", ")", ":", "\n", "    ", "bound", "=", "1.0", "/", "math", ".", "sqrt", "(", "size", ")", "\n", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.kaiming_uniform": [[10, 14], ["math.sqrt", "tensor.data.uniform_"], "function", ["None"], ["", "", "def", "kaiming_uniform", "(", "tensor", ",", "fan", ",", "a", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "bound", "=", "math", ".", "sqrt", "(", "6", "/", "(", "(", "1", "+", "a", "**", "2", ")", "*", "fan", ")", ")", "\n", "tensor", ".", "data", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.glorot": [[16, 20], ["math.sqrt", "tensor.data.uniform_", "tensor.size", "tensor.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "", "def", "glorot", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "stdv", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "tensor", ".", "size", "(", "-", "2", ")", "+", "tensor", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "tensor", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros": [[22, 25], ["tensor.data.fill_"], "function", ["None"], ["", "", "def", "zeros", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones": [[27, 30], ["tensor.data.fill_"], "function", ["None"], ["", "", "def", "ones", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.normal": [[32, 35], ["tensor.data.normal_"], "function", ["None"], ["", "", "def", "normal", "(", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "    ", "if", "tensor", "is", "not", "None", ":", "\n", "        ", "tensor", ".", "data", ".", "normal_", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.reset": [[37, 48], ["hasattr", "item.reset_parameters", "hasattr", "nn.children", "inits.reset._reset"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["", "", "def", "reset", "(", "nn", ")", ":", "\n", "    ", "def", "_reset", "(", "item", ")", ":", "\n", "        ", "if", "hasattr", "(", "item", ",", "'reset_parameters'", ")", ":", "\n", "            ", "item", ".", "reset_parameters", "(", ")", "\n", "\n", "", "", "if", "nn", "is", "not", "None", ":", "\n", "        ", "if", "hasattr", "(", "nn", ",", "'children'", ")", "and", "len", "(", "list", "(", "nn", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "            ", "for", "item", "in", "nn", ".", "children", "(", ")", ":", "\n", "                ", "_reset", "(", "item", ")", "\n", "", "", "else", ":", "\n", "            ", "_reset", "(", "nn", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.__init__": [[24, 34], ["torch.nn.Module.__init__", "dropblock.DropBlock2D.register_buffer", "dropblock.DropBlock2D.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["def", "__init__", "(", "self", ",", "drop_prob", ",", "block_size", ",", "share_channel", "=", "False", ")", ":", "\n", "        ", "super", "(", "DropBlock2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'i'", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "\n", "self", ".", "register_buffer", "(", "'drop_prob'", ",", "drop_prob", "*", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "inited", "=", "False", "\n", "self", ".", "step_size", "=", "0.0", "\n", "self", ".", "start_step", "=", "0", "\n", "self", ".", "nr_steps", "=", "0", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "share_channel", "=", "share_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.reset": [[35, 40], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"stop DropBlock\"\"\"", "\n", "self", ".", "inited", "=", "True", "\n", "self", ".", "i", "[", "0", "]", "=", "0", "\n", "self", ".", "drop_prob", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.reset_steps": [[41, 49], ["dropblock.DropBlock2D.drop_prob.item"], "methods", ["None"], ["", "def", "reset_steps", "(", "self", ",", "start_step", ",", "nr_steps", ",", "start_value", "=", "0", ",", "stop_value", "=", "None", ")", ":", "\n", "        ", "self", ".", "inited", "=", "True", "\n", "stop_value", "=", "self", ".", "drop_prob", ".", "item", "(", ")", "if", "stop_value", "is", "None", "else", "stop_value", "\n", "self", ".", "i", "[", "0", "]", "=", "0", "\n", "self", ".", "drop_prob", "[", "0", "]", "=", "start_value", "\n", "self", ".", "step_size", "=", "(", "stop_value", "-", "start_value", ")", "/", "nr_steps", "\n", "self", ".", "nr_steps", "=", "nr_steps", "\n", "self", ".", "start_step", "=", "start_step", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.forward": [[50, 74], ["dropblock.DropBlock2D.step", "dropblock.DropBlock2D._compute_gamma", "dropblock.DropBlock2D._compute_block_mask", "dropblock.DropBlock2D.drop_prob.item", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "block_mask.numel", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.step", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D._compute_gamma", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D._compute_block_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "self", ".", "drop_prob", ".", "item", "(", ")", "==", "0.", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "step", "(", ")", "\n", "\n", "# get gamma value", "\n", "gamma", "=", "self", ".", "_compute_gamma", "(", "x", ")", "\n", "\n", "# sample mask and place on input device", "\n", "if", "self", ".", "share_channel", ":", "\n", "                ", "mask", "=", "(", "torch", ".", "rand", "(", "*", "x", ".", "shape", "[", "2", ":", "]", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "<", "gamma", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "(", "torch", ".", "rand", "(", "*", "x", ".", "shape", "[", "1", ":", "]", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "<", "gamma", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# compute block mask", "\n", "", "block_mask", ",", "keeped", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "\n", "# apply block mask", "\n", "out", "=", "x", "*", "block_mask", "\n", "\n", "# scale output", "\n", "out", "=", "out", "*", "(", "block_mask", ".", "numel", "(", ")", "/", "keeped", ")", ".", "to", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D._compute_block_mask": [[75, 85], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d.numel", "torch.max_pool2d.sum().to", "torch.max_pool2d.sum"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.numel"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "block_mask", "=", "F", ".", "max_pool2d", "(", "mask", ",", "\n", "kernel_size", "=", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "block_size", "//", "2", ")", "\n", "\n", "keeped", "=", "block_mask", ".", "numel", "(", ")", "-", "block_mask", ".", "sum", "(", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "block_mask", "=", "1", "-", "block_mask", "\n", "\n", "return", "block_mask", ",", "keeped", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D._compute_gamma": [[86, 91], ["x.size", "dropblock.DropBlock2D.drop_prob.item"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "_compute_gamma", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "gamma", "=", "self", ".", "drop_prob", ".", "item", "(", ")", "/", "(", "self", ".", "block_size", "**", "2", ")", "*", "(", "h", "*", "w", ")", "/", "(", "(", "w", "-", "self", ".", "block_size", "+", "1", ")", "*", "(", "h", "-", "self", ".", "block_size", "+", "1", ")", ")", "\n", "return", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.step": [[92, 98], ["dropblock.DropBlock2D.i.item"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "inited", "\n", "idx", "=", "self", ".", "i", ".", "item", "(", ")", "\n", "if", "idx", ">", "self", ".", "start_step", "and", "idx", "<", "self", ".", "start_step", "+", "self", ".", "nr_steps", ":", "\n", "            ", "self", ".", "drop_prob", "+=", "self", ".", "step_size", "\n", "", "self", ".", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D._load_from_state_dict": [[99, 110], ["super()._load_from_state_dict", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D._load_from_state_dict", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "idx_key", "=", "prefix", "+", "'i'", "\n", "drop_prob_key", "=", "prefix", "+", "'drop_prob'", "\n", "if", "idx_key", "not", "in", "state_dict", ":", "\n", "            ", "state_dict", "[", "idx_key", "]", "=", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "if", "idx_key", "not", "in", "drop_prob_key", ":", "\n", "            ", "state_dict", "[", "drop_prob_key", "]", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "super", "(", "DropBlock2D", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D._save_to_state_dict": [[111, 114], ["None"], "methods", ["None"], ["", "def", "_save_to_state_dict", "(", "self", ",", "destination", ",", "prefix", ",", "keep_vars", ")", ":", "\n", "        ", "\"\"\"overwrite save method\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.extra_repr": [[115, 117], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'drop_prob={}, step_size={}'", ".", "format", "(", "self", ".", "drop_prob", ",", "self", ".", "step_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.reset_dropblock": [[118, 127], ["isinstance", "m.reset_steps"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dropblock.DropBlock2D.reset_steps"], ["", "", "def", "reset_dropblock", "(", "start_step", ",", "nr_steps", ",", "start_value", ",", "stop_value", ",", "m", ")", ":", "\n", "    ", "\"\"\"\n    Example:\n        from functools import partial\n        apply_drop_prob = partial(reset_dropblock, 0, epochs*iters_per_epoch, 0.0, 0.1)\n        net.apply(apply_drop_prob)\n    \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "DropBlock2D", ")", ":", "\n", "        ", "m", ".", "reset_steps", "(", "start_step", ",", "nr_steps", ",", "start_value", ",", "stop_value", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.__init__": [[41, 58], ["super().__init__", "getargspec", "enumerate", "getargspec"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "aggr", "=", "'add'", ",", "flow", "=", "'source_to_target'", ")", ":", "\n", "        ", "super", "(", "MessagePassing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "aggr", "=", "aggr", "\n", "assert", "self", ".", "aggr", "in", "[", "'add'", ",", "'mean'", ",", "'max'", "]", "\n", "\n", "self", ".", "flow", "=", "flow", "\n", "assert", "self", ".", "flow", "in", "[", "'source_to_target'", ",", "'target_to_source'", "]", "\n", "\n", "self", ".", "__message_args__", "=", "getargspec", "(", "self", ".", "message", ")", "[", "0", "]", "[", "1", ":", "]", "\n", "self", ".", "__special_args__", "=", "[", "(", "i", ",", "arg", ")", "\n", "for", "i", ",", "arg", "in", "enumerate", "(", "self", ".", "__message_args__", ")", "\n", "if", "arg", "in", "special_args", "]", "\n", "self", ".", "__message_args__", "=", "[", "\n", "arg", "for", "arg", "in", "self", ".", "__message_args__", "if", "arg", "not", "in", "special_args", "\n", "]", "\n", "self", ".", "__update_args__", "=", "getargspec", "(", "self", ".", "update", ")", "[", "0", "]", "[", "2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.propagate": [[59, 128], ["message_passing.MessagePassing.message", "torch_geometric.utils.scatter_", "message_passing.MessagePassing.update", "list", "len", "ij.keys", "kwargs.get", "message_args.append", "ij.keys", "message_args.insert", "message_args.insert", "message_args.append", "kwargs.get", "isinstance", "isinstance", "message_args.append", "torch.index_select", "message_args.append", "len", "torch.index_select.size", "torch.index_select.size", "ValueError", "tmp[].size", "tmp[].size", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gated_graph_conv.GatedGraphConv.message", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "propagate", "(", "self", ",", "edge_index", ",", "size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"The initial call to start propagating messages.\n\n        Args:\n            edge_index (Tensor): The indices of a general (sparse) assignment\n                matrix with shape :obj:`[N, M]` (can be directed or\n                undirected).\n            size (list or tuple, optional): The size :obj:`[N, M]` of the\n                assignment matrix. If set to :obj:`None`, the size is tried to\n                get automatically inferrred. (default: :obj:`None`)\n            **kwargs: Any additional data which is needed to construct messages\n                and to update node embeddings.\n        \"\"\"", "\n", "\n", "size", "=", "[", "None", ",", "None", "]", "if", "size", "is", "None", "else", "list", "(", "size", ")", "\n", "assert", "len", "(", "size", ")", "==", "2", "\n", "\n", "i", ",", "j", "=", "(", "0", ",", "1", ")", "if", "self", ".", "flow", "==", "'target_to_source'", "else", "(", "1", ",", "0", ")", "\n", "ij", "=", "{", "\"_i\"", ":", "i", ",", "\"_j\"", ":", "j", "}", "\n", "\n", "message_args", "=", "[", "]", "\n", "for", "arg", "in", "self", ".", "__message_args__", ":", "\n", "            ", "if", "arg", "[", "-", "2", ":", "]", "in", "ij", ".", "keys", "(", ")", ":", "\n", "                ", "tmp", "=", "kwargs", ".", "get", "(", "arg", "[", ":", "-", "2", "]", ",", "None", ")", "\n", "if", "tmp", "is", "None", ":", "# pragma: no cover", "\n", "                    ", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "idx", "=", "ij", "[", "arg", "[", "-", "2", ":", "]", "]", "\n", "if", "isinstance", "(", "tmp", ",", "tuple", ")", "or", "isinstance", "(", "tmp", ",", "list", ")", ":", "\n", "                        ", "assert", "len", "(", "tmp", ")", "==", "2", "\n", "if", "tmp", "[", "1", "-", "idx", "]", "is", "not", "None", ":", "\n", "                            ", "if", "size", "[", "1", "-", "idx", "]", "is", "None", ":", "\n", "                                ", "size", "[", "1", "-", "idx", "]", "=", "tmp", "[", "1", "-", "idx", "]", ".", "size", "(", "0", ")", "\n", "", "if", "size", "[", "1", "-", "idx", "]", "!=", "tmp", "[", "1", "-", "idx", "]", ".", "size", "(", "0", ")", ":", "\n", "                                ", "raise", "ValueError", "(", "__size_error_msg__", ")", "\n", "", "", "tmp", "=", "tmp", "[", "idx", "]", "\n", "\n", "", "if", "tmp", "is", "None", ":", "\n", "                        ", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                        ", "if", "size", "[", "idx", "]", "is", "None", ":", "\n", "                            ", "size", "[", "idx", "]", "=", "tmp", ".", "size", "(", "0", ")", "\n", "", "if", "size", "[", "idx", "]", "!=", "tmp", ".", "size", "(", "0", ")", ":", "\n", "                            ", "raise", "ValueError", "(", "__size_error_msg__", ")", "\n", "\n", "", "tmp", "=", "torch", ".", "index_select", "(", "tmp", ",", "0", ",", "edge_index", "[", "idx", "]", ")", "\n", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "", "", "else", ":", "\n", "                ", "message_args", ".", "append", "(", "kwargs", ".", "get", "(", "arg", ",", "None", ")", ")", "\n", "\n", "", "", "size", "[", "0", "]", "=", "size", "[", "1", "]", "if", "size", "[", "0", "]", "is", "None", "else", "size", "[", "0", "]", "\n", "size", "[", "1", "]", "=", "size", "[", "0", "]", "if", "size", "[", "1", "]", "is", "None", "else", "size", "[", "1", "]", "\n", "\n", "kwargs", "[", "'edge_index'", "]", "=", "edge_index", "\n", "kwargs", "[", "'size'", "]", "=", "size", "\n", "\n", "for", "(", "idx", ",", "arg", ")", "in", "self", ".", "__special_args__", ":", "\n", "            ", "if", "arg", "[", "-", "2", ":", "]", "in", "ij", ".", "keys", "(", ")", ":", "\n", "                ", "message_args", ".", "insert", "(", "idx", ",", "kwargs", "[", "arg", "[", ":", "-", "2", "]", "]", "[", "ij", "[", "arg", "[", "-", "2", ":", "]", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "message_args", ".", "insert", "(", "idx", ",", "kwargs", "[", "arg", "]", ")", "\n", "\n", "", "", "update_args", "=", "[", "kwargs", "[", "arg", "]", "for", "arg", "in", "self", ".", "__update_args__", "]", "\n", "\n", "out", "=", "self", ".", "message", "(", "*", "message_args", ")", "\n", "out", "=", "scatter_", "(", "self", ".", "aggr", ",", "out", ",", "edge_index", "[", "i", "]", ",", "dim_size", "=", "size", "[", "i", "]", ")", "\n", "out", "=", "self", ".", "update", "(", "out", ",", "*", "update_args", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.message": [[129, 138], ["None"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ")", ":", "# pragma: no cover", "\n", "        ", "r\"\"\"Constructs messages in analogy to :math:`\\phi_{\\mathbf{\\Theta}}`\n        for each edge in :math:`(i,j) \\in \\mathcal{E}`.\n        Can take any argument which was initially passed to :meth:`propagate`.\n        In addition, features can be lifted to the source node :math:`i` and\n        target node :math:`j` by appending :obj:`_i` or :obj:`_j` to the\n        variable name, *.e.g.* :obj:`x_i` and :obj:`x_j`.\"\"\"", "\n", "\n", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update": [[139, 147], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "# pragma: no cover", "\n", "        ", "r\"\"\"Updates node embeddings in analogy to\n        :math:`\\gamma_{\\mathbf{\\Theta}}` for each node\n        :math:`i \\in \\mathcal{V}`.\n        Takes in the output of aggregation as first argument and any argument\n        which was initially passed to :meth:`propagate`.\"\"\"", "\n", "\n", "return", "aggr_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gated_graph_conv.GatedGraphConv.__init__": [[38, 53], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.GRUCell", "gated_graph_conv.GatedGraphConv.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["def", "__init__", "(", "self", ",", "\n", "out_channels", ",", "\n", "num_layers", ",", "\n", "aggr", "=", "'add'", ",", "\n", "bias", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GatedGraphConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "aggr", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "weight", "=", "Param", "(", "Tensor", "(", "num_layers", ",", "out_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "rnn", "=", "torch", ".", "nn", ".", "GRUCell", "(", "out_channels", ",", "out_channels", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gated_graph_conv.GatedGraphConv.reset_parameters": [[54, 57], ["inits.uniform", "gated_graph_conv.GatedGraphConv.rnn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.uniform", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "uniform", "(", "self", ".", "out_channels", ",", "self", ".", "weight", ")", "\n", "self", ".", "rnn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gated_graph_conv.GatedGraphConv.forward": [[58, 75], ["range", "x.unsqueeze", "gated_graph_conv.GatedGraphConv.size", "ValueError", "gated_graph_conv.GatedGraphConv.size", "gated_graph_conv.GatedGraphConv.new_zeros", "torch.cat", "torch.matmul", "gated_graph_conv.GatedGraphConv.propagate", "gated_graph_conv.GatedGraphConv.rnn", "x.dim", "gated_graph_conv.GatedGraphConv.size", "gated_graph_conv.GatedGraphConv.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "h", "=", "x", "if", "x", ".", "dim", "(", ")", "==", "2", "else", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "h", ".", "size", "(", "1", ")", ">", "self", ".", "out_channels", ":", "\n", "            ", "raise", "ValueError", "(", "'The number of input channels is not allowed to '", "\n", "'be larger than the number of output channels'", ")", "\n", "\n", "", "if", "h", ".", "size", "(", "1", ")", "<", "self", ".", "out_channels", ":", "\n", "            ", "zero", "=", "h", ".", "new_zeros", "(", "h", ".", "size", "(", "0", ")", ",", "self", ".", "out_channels", "-", "h", ".", "size", "(", "1", ")", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "zero", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "m", "=", "torch", ".", "matmul", "(", "h", ",", "self", ".", "weight", "[", "i", "]", ")", "\n", "m", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "m", ",", "edge_weight", "=", "edge_weight", ")", "\n", "h", "=", "self", ".", "rnn", "(", "m", ",", "h", ")", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gated_graph_conv.GatedGraphConv.message": [[76, 80], ["edge_weight.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "edge_weight", ")", ":", "\n", "        ", "if", "edge_weight", "is", "not", "None", ":", "\n", "            ", "return", "edge_weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.gated_graph_conv.GatedGraphConv.__repr__": [[81, 84], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, num_layers={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "out_channels", ",", "self", ".", "num_layers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.SyncMaster.register_slave": [[78, 95], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.SyncMaster.run_master": [[96, 128], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.FutureResult.put", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.SyncMaster.nr_slaves": [[129, 132], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._sum_square.forward": [[44, 52], ["ctx.save_for_backward", "syncbn.sumsquare_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ")", "\n", "if", "input", ".", "is_cuda", ":", "\n", "            ", "xsum", ",", "xsqusum", "=", "syncbn", ".", "sumsquare_forward", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "", "return", "xsum", ",", "xsqusum", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._sum_square.backward": [[53, 61], ["syncbn.sumsquare_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradSum", ",", "gradSquare", ")", ":", "\n", "        ", "input", ",", "=", "ctx", ".", "saved_variables", "\n", "if", "input", ".", "is_cuda", ":", "\n", "            ", "gradInput", "=", "syncbn", ".", "sumsquare_backward", "(", "input", ",", "gradSum", ",", "gradSquare", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "", "return", "gradInput", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._batchnormtrain.forward": [[64, 72], ["ctx.save_for_backward", "syncbn.batchnorm_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "mean", ",", "std", ",", "gamma", ",", "beta", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ",", "mean", ",", "std", ",", "gamma", ",", "beta", ")", "\n", "if", "input", ".", "is_cuda", ":", "\n", "            ", "output", "=", "syncbn", ".", "batchnorm_forward", "(", "input", ",", "mean", ",", "std", ",", "gamma", ",", "beta", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._batchnormtrain.backward": [[73, 83], ["syncbn.batchnorm_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradOutput", ")", ":", "\n", "        ", "input", ",", "mean", ",", "std", ",", "gamma", ",", "beta", "=", "ctx", ".", "saved_variables", "\n", "if", "gradOutput", ".", "is_cuda", ":", "\n", "            ", "gradInput", ",", "gradMean", ",", "gradStd", ",", "gradGamma", ",", "gradBeta", "=", "syncbn", ".", "batchnorm_backward", "(", "gradOutput", ",", "input", ",", "mean", ",", "\n", "std", ",", "gamma", ",", "beta", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "", "return", "gradInput", ",", "gradMean", ",", "gradStd", ",", "gradGamma", ",", "gradBeta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._SyncBatchNorm.__init__": [[104, 110], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "comm.SyncMaster"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "_SyncBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._SyncBatchNorm.forward": [[111, 132], ["input.view.view.size", "input.view.view.view", "module.sum_square", "batchnormtrain().view", "torch.nn.functional.batch_norm", "input.view.view.size", "input.view.view.size", "module._SyncBatchNorm._sync_master.run_master", "module._SyncBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "module.batchnormtrain"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.sum_square", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.batchnormtrain"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# sum(x) and sum(x^2)", "\n", "N", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "xsum", ",", "xsqsum", "=", "sum_square", "(", "input", ")", "\n", "\n", "# all-reduce for global sum(x) and sum(x^2)", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "xsum", ",", "xsqsum", ",", "N", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "xsum", ",", "xsqsum", ",", "N", ")", ")", "\n", "# forward", "\n", "", "return", "batchnormtrain", "(", "input", ",", "mean", ",", "1.0", "/", "inv_std", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._SyncBatchNorm.__data_parallel_replicate__": [[133, 141], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._SyncBatchNorm._data_parallel_master": [[142, 164], ["sorted", "sum", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "module._SyncBatchNorm._compute_mean_std", "torch.nn.parallel._functions.Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._SyncBatchNorm._compute_mean_std", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module._SyncBatchNorm._compute_mean_std": [[165, 178], ["None"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "return", "mean", ",", "(", "bias_var", "+", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.BatchNorm1d._check_input_dim": [[187, 192], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.BatchNorm3d._check_input_dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "BatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.BatchNorm2d._check_input_dim": [[247, 252], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.BatchNorm3d._check_input_dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "BatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.BatchNorm3d._check_input_dim": [[256, 261], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.BatchNorm3d._check_input_dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "BatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.SharedTensor.__init__": [[265, 270], ["threading.Lock", "threading.Condition", "module.SharedTensor._clear"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.SharedTensor._clear"], ["def", "__init__", "(", "self", ",", "nGPUs", ")", ":", "\n", "        ", "self", ".", "mutex", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "all_tasks_done", "=", "threading", ".", "Condition", "(", "self", ".", "mutex", ")", "\n", "self", ".", "nGPUs", "=", "nGPUs", "\n", "self", ".", "_clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.SharedTensor._clear": [[271, 276], ["None"], "methods", ["None"], ["", "def", "_clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "N", "=", "0", "\n", "self", ".", "dict", "=", "{", "}", "\n", "self", ".", "push_tasks", "=", "self", ".", "nGPUs", "\n", "self", ".", "reduce_tasks", "=", "self", ".", "nGPUs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.SharedTensor.push": [[277, 292], ["module.SharedTensor._clear", "module.SharedTensor.all_tasks_done.notify_all", "module.SharedTensor.all_tasks_done.wait"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.SharedTensor._clear"], ["", "def", "push", "(", "self", ",", "*", "inputs", ")", ":", "\n", "# push from device", "\n", "        ", "with", "self", ".", "mutex", ":", "\n", "            ", "if", "self", ".", "push_tasks", "==", "0", ":", "\n", "                ", "self", ".", "_clear", "(", ")", "\n", "", "self", ".", "N", "+=", "inputs", "[", "0", "]", "\n", "igpu", "=", "inputs", "[", "1", "]", "\n", "self", ".", "dict", "[", "igpu", "]", "=", "inputs", "[", "2", ":", "]", "\n", "#idx = self.nGPUs - self.push_tasks", "\n", "self", ".", "push_tasks", "-=", "1", "\n", "", "with", "self", ".", "all_tasks_done", ":", "\n", "            ", "if", "self", ".", "push_tasks", "==", "0", ":", "\n", "                ", "self", ".", "all_tasks_done", ".", "notify_all", "(", ")", "\n", "", "while", "self", ".", "push_tasks", ":", "\n", "                ", "self", ".", "all_tasks_done", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.SharedTensor.pull": [[293, 311], ["allreduce.allreduce.allreduce", "module.SharedTensor.all_tasks_done.notify_all", "module.SharedTensor.all_tasks_done.wait", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.allreduce.allreduce"], ["", "", "", "def", "pull", "(", "self", ",", "igpu", ")", ":", "\n", "# pull from device", "\n", "        ", "with", "self", ".", "mutex", ":", "\n", "            ", "if", "igpu", "==", "0", ":", "\n", "                ", "assert", "(", "len", "(", "self", ".", "dict", ")", "==", "self", ".", "nGPUs", ")", "\n", "# flatten the tensors", "\n", "self", ".", "list", "=", "[", "t", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dict", ")", ")", "for", "t", "in", "self", ".", "dict", "[", "i", "]", "]", "\n", "self", ".", "outlist", "=", "allreduce", "(", "2", ",", "*", "self", ".", "list", ")", "\n", "self", ".", "reduce_tasks", "-=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "reduce_tasks", "-=", "1", "\n", "", "", "with", "self", ".", "all_tasks_done", ":", "\n", "            ", "if", "self", ".", "reduce_tasks", "==", "0", ":", "\n", "                ", "self", ".", "all_tasks_done", ".", "notify_all", "(", ")", "\n", "", "while", "self", ".", "reduce_tasks", ":", "\n", "                ", "self", ".", "all_tasks_done", ".", "wait", "(", ")", "\n", "# all reduce done", "\n", "", "", "return", "self", ".", "N", ",", "self", ".", "outlist", "[", "2", "*", "igpu", "]", ",", "self", ".", "outlist", "[", "2", "*", "igpu", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.SharedTensor.__len__": [[312, 314], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nGPUs", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.SharedTensor.__repr__": [[315, 317], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'SharedTensor'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.sum_square": [[38, 41], ["_sum_square.apply"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["def", "sum_square", "(", "input", ")", ":", "\n", "    ", "r\"\"\"Calculate sum of elements and sum of squares for Batch Normalization\"\"\"", "\n", "return", "_sum_square", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.module.batchnormtrain": [[85, 101], ["_batchnormtrain.apply"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["", "", "def", "batchnormtrain", "(", "input", ",", "mean", ",", "std", ",", "gamma", ",", "beta", ")", ":", "\n", "    ", "r\"\"\"Applies Batch Normalization over a 3d input that is seen as a\n    mini-batch.\n\n    .. _encoding.batchnormtrain:\n\n    .. math::\n\n        y = \\frac{x - \\mu[x]}{ \\sqrt{var[x] + \\epsilon}} * \\gamma + \\beta\n\n    Shape:\n        - Input: :math:`(N, C)` or :math:`(N, C, L)`\n        - Output: :math:`(N, C)` or :math:`(N, C, L)` (same shape as input)\n\n    \"\"\"", "\n", "return", "_batchnormtrain", ".", "apply", "(", "input", ",", "mean", ",", "std", ",", "gamma", ",", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.allreduce.AllReduce.forward": [[28, 39], ["sorted", "torch.reduce_add_coalesced", "torch.reduce_add_coalesced", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "tuple", "inputs[].get_device", "range", "range", "len", "len", "i[].get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "num_inputs", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "num_inputs", "=", "num_inputs", "\n", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "num_inputs", ")", "]", "\n", "inputs", "=", "[", "inputs", "[", "i", ":", "i", "+", "num_inputs", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "num_inputs", ")", "]", "\n", "# sort before reduce sum", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ".", "get_device", "(", ")", ")", "\n", "results", "=", "comm", ".", "reduce_add_coalesced", "(", "inputs", ",", "ctx", ".", "target_gpus", "[", "0", "]", ")", "\n", "outputs", "=", "comm", ".", "broadcast_coalesced", "(", "results", ",", "ctx", ".", "target_gpus", ")", "\n", "return", "tuple", "(", "[", "t", "for", "tensors", "in", "outputs", "for", "t", "in", "tensors", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.allreduce.AllReduce.backward": [[40, 48], ["torch.reduce_add_coalesced", "torch.reduce_add_coalesced", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "tuple", "range", "len", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "i", ".", "data", "for", "i", "in", "inputs", "]", "\n", "inputs", "=", "[", "inputs", "[", "i", ":", "i", "+", "ctx", ".", "num_inputs", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "ctx", ".", "num_inputs", ")", "]", "\n", "results", "=", "comm", ".", "reduce_add_coalesced", "(", "inputs", ",", "ctx", ".", "target_gpus", "[", "0", "]", ")", "\n", "outputs", "=", "comm", ".", "broadcast_coalesced", "(", "results", ",", "ctx", ".", "target_gpus", ")", "\n", "return", "(", "None", ",", ")", "+", "tuple", "(", "[", "Variable", "(", "t", ")", "for", "tensors", "in", "outputs", "for", "t", "in", "tensors", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.syncbn.allreduce.allreduce": [[20, 25], ["AllReduce.apply"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["def", "allreduce", "(", "*", "inputs", ")", ":", "\n", "    ", "\"\"\"Cross GPU all reduce autograd operation for calculate mean and\n    variance in SyncBN.\n    \"\"\"", "\n", "return", "AllReduce", ".", "apply", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.crf.dense_crf.dense_crf": [[4, 26], ["numpy.expand_dims", "numpy.append", "pydensecrf.DenseCRF2D", "np.ascontiguousarray.reshape", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "dcrf.DenseCRF2D.setUnaryEnergy", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseBilateral", "dcrf.DenseCRF2D.inference", "numpy.argmax().reshape", "numpy.log", "numpy.argmax", "numpy.array"], "function", ["None"], ["def", "dense_crf", "(", "img", ",", "output_probs", ")", ":", "\n", "    ", "h", "=", "output_probs", ".", "shape", "[", "0", "]", "\n", "w", "=", "output_probs", ".", "shape", "[", "1", "]", "\n", "\n", "output_probs", "=", "np", ".", "expand_dims", "(", "output_probs", ",", "0", ")", "\n", "output_probs", "=", "np", ".", "append", "(", "1", "-", "output_probs", ",", "output_probs", ",", "axis", "=", "0", ")", "\n", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "w", ",", "h", ",", "2", ")", "\n", "U", "=", "-", "np", ".", "log", "(", "output_probs", ")", "\n", "U", "=", "U", ".", "reshape", "(", "(", "2", ",", "-", "1", ")", ")", "\n", "U", "=", "np", ".", "ascontiguousarray", "(", "U", ")", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "d", ".", "setUnaryEnergy", "(", "U", ")", "\n", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "20", ",", "compat", "=", "3", ")", "\n", "d", ".", "addPairwiseBilateral", "(", "sxy", "=", "30", ",", "srgb", "=", "20", ",", "rgbim", "=", "img", ",", "compat", "=", "10", ")", "\n", "\n", "Q", "=", "d", ".", "inference", "(", "5", ")", "\n", "Q", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "Q", ")", ",", "axis", "=", "0", ")", ".", "reshape", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "return", "Q", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.CA_Weight.forward": [[21, 34], ["t.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "lib.extensions.cc_attention._ext.ca_forward_cuda", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["ACT_ELU", "=", "\"elu\"", "\n", "ACT_NONE", "=", "\"none\"", "\n", "\n", "\n", "def", "_check", "(", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "success", "=", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "not", "success", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"CUDA Error encountered in {}\"", ".", "format", "(", "fn", ")", ")", "\n", "\n", "\n", "", "", "def", "_broadcast_shape", "(", "x", ")", ":", "\n", "    ", "out_size", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.CA_Weight.backward": [[35, 48], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "lib.extensions.cc_attention._ext.ca_backward_cuda", "functions._check_contiguous", "dw.contiguous"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous"], ["            ", "out_size", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "out_size", ".", "append", "(", "s", ")", "\n", "", "", "return", "out_size", "\n", "\n", "\n", "", "def", "_reduce", "(", "x", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "return", "x", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "n", ",", "c", "=", "x", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "(", "n", ",", "c", ",", "-", "1", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.CA_Map.forward": [[50, 60], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "lib.extensions.cc_attention._ext.ca_map_forward_cuda", "ctx.save_for_backward"], "methods", ["None"], ["    ", "count", "=", "1", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "count", "*=", "s", "\n", "", "", "return", "count", "\n", "\n", "\n", "", "def", "_act_forward", "(", "ctx", ",", "x", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_forward", "(", "x", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.CA_Map.backward": [[61, 74], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "lib.extensions.cc_attention._ext.ca_map_backward_cuda", "functions._check_contiguous", "dout.contiguous"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous"], ["        ", "_backend", ".", "elu_forward", "(", "x", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "def", "_act_backward", "(", "ctx", ",", "x", ",", "dx", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_backward", "(", "x", ",", "dx", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_backward", "(", "x", ",", "dx", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.CrossAttention.__init__": [[80, 96], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["        ", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "# Update running stats", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.CrossAttention.forward": [[97, 108], ["functions.CrossAttention.t_func", "functions.CrossAttention.f_func", "functions.CrossAttention.g_func", "ca_weight", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "ca_map", "functions.CrossAttention.inc"], "methods", ["None"], ["running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.CrissCrossAttention.__init__": [[111, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n", "", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.CrissCrossAttention.forward": [[120, 131], ["functions.CrissCrossAttention.query_conv", "functions.CrissCrossAttention.key_conv", "functions.CrissCrossAttention.value_conv", "ca_weight", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "ca_map"], "methods", ["None"], ["\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "# TODO: implement simplified CUDA backward for inference mode", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.PAM_Module.__init__": [[135, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "class", "InPlaceABNSync", "(", "autograd", ".", "Function", ")", ":", "\n", "    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "extra", ",", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "cls", ".", "_parse_extra", "(", "ctx", ",", "extra", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions.PAM_Module.forward": [[144, 164], ["x.size", "functions.PAM_Module.query_conv().view().permute", "functions.PAM_Module.key_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "functions.PAM_Module.value_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "torch.softmax.permute", "functions.PAM_Module.query_conv().view", "functions.PAM_Module.key_conv", "functions.PAM_Module.value_conv", "functions.PAM_Module.query_conv"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "*", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "means", ",", "vars", "=", "[", "mean", ".", "unsqueeze", "(", "0", ")", "]", ",", "[", "var", ".", "unsqueeze", "(", "0", ")", "]", "\n", "for", "_", "in", "range", "(", "ctx", ".", "master_queue", ".", "maxsize", ")", ":", "\n", "                    ", "mean_w", ",", "var_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.cc_attention.functions._check_contiguous": [[15, 18], ["all", "ValueError", "mod.is_contiguous"], "function", ["None"], ["]", "]", ",", "\n", "extra_cuda_cflags", "=", "[", "\"--expt-extended-lambda\"", "]", ")", "\n", "\n", "# Activation names", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABN.forward": [[78, 116], ["functions._count_samples", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "running_mean.contiguous", "running_var.contiguous", "running_mean.mul_", "running_var.mul_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._count_samples", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_forward"], ["training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "# Update running stats", "\n", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n", "", "@", "staticmethod", "\n", "@", "once_differentiable", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABN.backward": [[117, 141], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "# TODO: implement simplified CUDA backward for inference mode", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "class", "InPlaceABNSync", "(", "autograd", ".", "Function", ")", ":", "\n", "    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "extra", ",", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.forward": [[144, 204], ["x.contiguous.contiguous.new_tensor", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "x.contiguous.new_tensor.item", "running_mean.contiguous", "running_var.contiguous", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "float", "mean.clone", "running_mean.mul_", "running_var.mul_", "x.contiguous.new_tensor.item", "x.contiguous.contiguous.view", "float"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_forward"], ["ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "*", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "means", ",", "vars", "=", "[", "mean", ".", "unsqueeze", "(", "0", ")", "]", ",", "[", "var", ".", "unsqueeze", "(", "0", ")", "]", "\n", "for", "_", "in", "range", "(", "ctx", ".", "master_queue", ".", "maxsize", ")", ":", "\n", "                    ", "mean_w", ",", "var_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "means", ".", "append", "(", "mean_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "vars", ".", "append", "(", "var_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "means", "=", "comm", ".", "gather", "(", "means", ")", "\n", "vars", "=", "comm", ".", "gather", "(", "vars", ")", "\n", "\n", "mean", "=", "means", ".", "mean", "(", "0", ")", "\n", "var", "=", "(", "vars", "+", "(", "mean", "-", "means", ")", "**", "2", ")", ".", "mean", "(", "0", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "mean", ",", "var", ")", ",", "[", "mean", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "mean", ",", "var", ")", ")", "\n", "mean", ",", "var", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "\n", "# Update running stats", "\n", "", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n", "", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward": [[205, 237], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.new_zeros.clone", "dz.contiguous.new_zeros.clone", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions.InPlaceABNSync.backward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "edzs", ",", "eydzs", "=", "[", "edz", "]", ",", "[", "eydz", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "ctx", ".", "worker_queues", ")", ")", ":", "\n", "                    ", "edz_w", ",", "eydz_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "edzs", ".", "append", "(", "edz_w", ")", "\n", "eydzs", ".", "append", "(", "eydz_w", ")", "\n", "\n", "", "edz", "=", "comm", ".", "reduce_add", "(", "edzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "eydz", "=", "comm", ".", "reduce_add", "(", "eydzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "edz", ",", "eydz", ")", ",", "[", "edz", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "edz", ",", "eydz", ")", ")", "\n", "edz", ",", "eydz", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._check": [[27, 31], ["fn", "RuntimeError"], "function", ["None"], ["if", "not", "success", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"CUDA Error encountered in {}\"", ".", "format", "(", "fn", ")", ")", "\n", "\n", "\n", "", "", "def", "_broadcast_shape", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._broadcast_shape": [[33, 41], ["enumerate", "x.size", "out_size.append", "out_size.append"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "out_size", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "out_size", ".", "append", "(", "s", ")", "\n", "", "", "return", "out_size", "\n", "\n", "\n", "", "def", "_reduce", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._reduce": [[43, 49], ["len", "x.sum", "x.contiguous().view().sum().sum", "x.size", "x.size", "x.contiguous().view().sum", "x.contiguous().view", "x.contiguous"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["        ", "return", "x", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "n", ",", "c", "=", "x", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "(", "n", ",", "c", ",", "-", "1", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "\n", "\n", "", "", "def", "_count_samples", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._count_samples": [[51, 57], ["enumerate", "x.size"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "count", "*=", "s", "\n", "", "", "return", "count", "\n", "\n", "\n", "", "def", "_act_forward", "(", "ctx", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_forward": [[59, 66], ["_backend.leaky_relu_forward", "_backend.elu_forward"], "function", ["None"], ["        ", "_backend", ".", "leaky_relu_forward", "(", "x", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_forward", "(", "x", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "def", "_act_backward", "(", "ctx", ",", "x", ",", "dx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.functions._act_backward": [[68, 75], ["_backend.leaky_relu_backward", "_backend.elu_backward"], "function", ["None"], ["        ", "_backend", ".", "leaky_relu_backward", "(", "x", ",", "dx", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_backward", "(", "x", ",", "dx", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "class", "InPlaceABN", "(", "autograd", ".", "Function", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.misc.GlobalAvgPool2d.__init__": [[6, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.misc.GlobalAvgPool2d.forward": [[10, 13], ["inputs.size", "inputs.view().mean", "inputs.view"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["        ", "in_size", "=", "inputs", ".", "size", "(", ")", "\n", "return", "inputs", ".", "view", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.misc.SingleGPU.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.misc.SingleGPU.forward": [[19, 21], ["misc.SingleGPU.module", "input.cuda"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.__init__": [[18, 52], ["torch.Module.__init__", "bn.ABN.register_buffer", "bn.ABN.register_buffer", "bn.ABN.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bn.ABN.register_parameter", "bn.ABN.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.ones", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["\n", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "ABN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "slope", "=", "slope", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.reset_parameters": [[53, 59], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_mean", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_var", ",", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.forward": [[60, 72], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.elu", "torch.elu", "torch.elu"], "methods", ["None"], ["\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "functional", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "activation", "==", "ACT_RELU", ":", "\n", "            ", "return", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "            ", "return", "functional", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "self", ".", "slope", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_ELU", ":", "\n", "            ", "return", "functional", ".", "elu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.ABN.__repr__": [[73, 81], ["rep.format"], "methods", ["None"], ["\n", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.InPlaceABN.__init__": [[86, 105], ["bn.ABN.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["\n", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABN", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.InPlaceABN.forward": [[106, 109], ["inplace_abn"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "inplace_abn", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.InPlaceABNSync.forward": [[116, 119], ["inplace_abn_sync"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "num_features", ",", "devices", "=", "None", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "\n", "slope", "=", "0.01", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.inplace_abn_1.bn.InPlaceABNSync.__repr__": [[120, 128], ["rep.format"], "methods", ["None"], ["        "]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.frn.frn.FilterResponseNormalization.__init__": [[5, 18], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", ",", "gamma", ",", "tau", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"\n        Input Variables:\n        ----------------\n            beta, gamma, tau: Variables of shape [1, C, 1, 1].\n            eps: A scalar constant or learnable variable.\n        \"\"\"", "\n", "\n", "super", "(", "FilterResponseNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "eps", "=", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.frn.frn.FilterResponseNormalization.forward": [[19, 35], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "x.pow", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Input Variables:\n        ----------------\n            x: Input tensor of shape [NxCxHxW]\n        \"\"\"", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "assert", "(", "self", ".", "gamma", ".", "shape", "[", "1", "]", ",", "self", ".", "beta", ".", "shape", "[", "1", "]", ",", "self", ".", "tau", ".", "shape", "[", "1", "]", ")", "==", "(", "c", ",", "c", ",", "c", ")", "\n", "\n", "# Compute the mean norm of activations per channel", "\n", "nu2", "=", "torch", ".", "mean", "(", "x", ".", "pow", "(", "2", ")", ",", "(", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "# Perform FRN", "\n", "x", "=", "x", "*", "torch", ".", "rsqrt", "(", "nu2", "+", "torch", ".", "abs", "(", "self", ".", "eps", ")", ")", "\n", "# Return after applying the Offset-ReLU non-linearity", "\n", "return", "torch", ".", "max", "(", "self", ".", "gamma", "*", "x", "+", "self", ".", "beta", ",", "self", ".", "tau", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.LambdaBase.__init__": [[8, 10], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "LambdaBase", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.LambdaBase.forward_prepare": [[11, 16], ["resnext101_64x4d_features.LambdaBase._modules.values", "output.append", "module"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values"], ["", "def", "forward_prepare", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "output", ".", "append", "(", "module", "(", "input", ")", ")", "\n", "", "return", "output", "if", "output", "else", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.Lambda.__init__": [[18, 21], ["resnext101_64x4d_features.LambdaBase.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "Lambda", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "lambda_func", "=", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.Lambda.forward": [[22, 24], ["resnext101_64x4d_features.Lambda.lambda_func", "resnext101_64x4d_features.Lambda.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaBase.forward_prepare"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "lambda_func", "(", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.LambdaMap.__init__": [[26, 29], ["resnext101_64x4d_features.LambdaBase.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "LambdaMap", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "lambda_func", "=", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.LambdaMap.forward": [[30, 32], ["list", "map", "resnext101_64x4d_features.LambdaMap.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaBase.forward_prepare"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.LambdaReduce.__init__": [[34, 37], ["resnext101_64x4d_features.LambdaBase.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "LambdaReduce", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "lambda_func", "=", "add", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.LambdaReduce.forward": [[38, 40], ["functools.reduce", "resnext101_64x4d_features.LambdaReduce.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaBase.forward_prepare"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "reduce", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.identity": [[41, 42], ["None"], "function", ["None"], ["", "", "def", "identity", "(", "x", ")", ":", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_64x4d_features.add": [[43, 44], ["None"], "function", ["None"], ["def", "add", "(", "x", ",", "y", ")", ":", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaBase.__init__": [[12, 14], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "LambdaBase", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaBase.forward_prepare": [[15, 20], ["resnext101_32x4d_features.LambdaBase._modules.values", "output.append", "module"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values"], ["", "def", "forward_prepare", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "output", ".", "append", "(", "module", "(", "input", ")", ")", "\n", "", "return", "output", "if", "output", "else", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.Lambda.__init__": [[22, 25], ["resnext101_32x4d_features.LambdaBase.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "Lambda", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "lambda_func", "=", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.Lambda.forward": [[26, 28], ["resnext101_32x4d_features.Lambda.lambda_func", "resnext101_32x4d_features.Lambda.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaBase.forward_prepare"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "lambda_func", "(", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaMap.__init__": [[30, 33], ["resnext101_32x4d_features.LambdaBase.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "LambdaMap", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "lambda_func", "=", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaMap.forward": [[34, 36], ["list", "map", "resnext101_32x4d_features.LambdaMap.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaBase.forward_prepare"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaReduce.__init__": [[38, 41], ["resnext101_32x4d_features.LambdaBase.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "LambdaReduce", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "lambda_func", "=", "add", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaReduce.forward": [[42, 44], ["functools.reduce", "resnext101_32x4d_features.LambdaReduce.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.LambdaBase.forward_prepare"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "reduce", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.identity": [[45, 46], ["None"], "function", ["None"], ["", "", "def", "identity", "(", "x", ")", ":", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.add": [[47, 48], ["None"], "function", ["None"], ["def", "add", "(", "x", ",", "y", ")", ":", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.mobilenet.ConvBNReLU.__init__": [[52, 58], ["torch.nn.Sequential.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.mobilenet.InvertedResidual.__init__": [[62, 92], ["torch.nn.Module.__init__", "int", "torch.nn.Sequential", "round", "layers.append", "layers.extend", "layers.extend", "mobilenet.ConvBNReLU", "mobilenet.ConvBNReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "mobilenet.ConvBNReLU", "Downsample", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ",", "filter_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "round", "(", "inp", "*", "expand_ratio", ")", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "# pw", "\n", "            ", "layers", ".", "append", "(", "ConvBNReLU", "(", "inp", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "if", "(", "stride", "==", "1", ")", ":", "\n", "            ", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "hidden_dim", ",", "hidden_dim", ",", "stride", "=", "stride", ",", "groups", "=", "hidden_dim", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "hidden_dim", ",", "hidden_dim", ",", "stride", "=", "1", ",", "groups", "=", "hidden_dim", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "channels", "=", "hidden_dim", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "]", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.mobilenet.InvertedResidual.forward": [[93, 98], ["mobilenet.InvertedResidual.conv", "mobilenet.InvertedResidual.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.mobilenet.MobileNetV2.__init__": [[101, 151], ["torch.nn.Module.__init__", "int", "int", "features.append", "torch.nn.Sequential", "torch.nn.Sequential", "mobilenet.MobileNetV2.modules", "mobilenet.ConvBNReLU", "int", "range", "mobilenet.ConvBNReLU", "torch.nn.Linear", "isinstance", "max", "features.append", "torch.nn.init.kaiming_normal_", "isinstance", "block", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "width_mult", "=", "1.0", ",", "filter_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "inverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "last_channel", "*", "max", "(", "1.0", ",", "width_mult", ")", ")", "\n", "features", "=", "[", "ConvBNReLU", "(", "3", ",", "input_channel", ",", "stride", "=", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "inverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "expand_ratio", "=", "t", ",", "filter_size", "=", "filter_size", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "features", ".", "append", "(", "ConvBNReLU", "(", "input_channel", ",", "self", ".", "last_channel", ",", "kernel_size", "=", "1", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Dropout(0.2),", "\n", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "num_classes", ")", ",", "\n", ")", "\n", "\n", "# weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.mobilenet.MobileNetV2.forward": [[152, 157], ["mobilenet.MobileNetV2.features", "mobilenet.MobileNetV2.mean", "mobilenet.MobileNetV2.classifier"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.mobilenet.mobilenet_v2": [[159, 173], ["mobilenet.MobileNetV2"], "function", ["None"], ["", "", "def", "mobilenet_v2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "filter_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a MobileNetV2 architecture from\n    `\"MobileNetV2: Inverted Residuals and Linear Bottlenecks\" <https://arxiv.org/abs/1801.04381>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "model", "=", "MobileNetV2", "(", "filter_size", "=", "filter_size", ",", "**", "kwargs", ")", "\n", "# if pretrained:", "\n", "# state_dict = load_state_dict_from_url(model_urls['mobilenet_v2'],", "\n", "# progress=progress)", "\n", "# model.load_state_dict(state_dict)", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.VGG.__init__": [[64, 79], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "vgg.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "1000", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "7", ",", "7", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.VGG.forward": [[80, 87], ["vgg.VGG.features", "vgg.VGG.avgpool", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "# print(x.shape)", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.VGG._initialize_weights": [[88, 104], ["vgg.VGG.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "print", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "(", "m", ".", "in_channels", "!=", "m", ".", "out_channels", "or", "m", ".", "out_channels", "!=", "m", ".", "groups", "or", "m", ".", "bias", "is", "not", "None", ")", ":", "\n", "# don't want to reinitialize downsample layers, code assuming normal conv layers will not have these characteristics", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "'Not initializing'", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.make_layers": [[106, 121], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "Downsample", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ",", "filter_size", "=", "1", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "# layers += [nn.MaxPool2d(kernel_size=2, stride=2)]", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "1", ")", ",", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "in_channels", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.vgg11": [[130, 142], ["vgg.VGG", "vgg.make_layers", "VGG.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.make_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["def", "vgg11", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "filter_size", "=", "filter_size", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg11'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.vgg11_bn": [[144, 156], ["vgg.VGG", "vgg.make_layers", "VGG.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.make_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "vgg11_bn", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "filter_size", "=", "filter_size", ",", "batch_norm", "=", "True", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg11_bn'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.vgg13": [[158, 170], ["vgg.VGG", "vgg.make_layers", "VGG.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.make_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "vgg13", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "filter_size", "=", "filter_size", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg13'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.vgg13_bn": [[172, 184], ["vgg.VGG", "vgg.make_layers", "VGG.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.make_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "vgg13_bn", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "filter_size", "=", "filter_size", ",", "batch_norm", "=", "True", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg13_bn'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.vgg16": [[186, 198], ["vgg.VGG", "vgg.make_layers", "VGG.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.make_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "vgg16", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "filter_size", "=", "filter_size", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg16'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.vgg16_bn": [[200, 212], ["vgg.VGG", "vgg.make_layers", "VGG.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.make_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "vgg16_bn", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "filter_size", "=", "filter_size", ",", "batch_norm", "=", "True", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg16_bn'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.vgg19": [[214, 226], ["vgg.VGG", "vgg.make_layers", "VGG.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.make_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "vgg19", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "filter_size", "=", "filter_size", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg19'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.vgg19_bn": [[228, 240], ["vgg.VGG", "vgg.make_layers", "VGG.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.vgg.make_layers", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "def", "vgg19_bn", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "filter_size", "=", "filter_size", ",", "batch_norm", "=", "True", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg19_bn'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.BasicBlock.__init__": [[69, 87], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "norm_layer", "ValueError", "resnet.conv3x3", "torch.Sequential", "torch.Sequential", "Downsample", "resnet.conv3x3"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3"], ["if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "# Bottleneck in torchvision places the stride for downsampling at 3x3 convolution(self.conv2)", "\n", "# while original implementation places the stride at the first 1x1 convolution(self.conv1)", "\n", "# according to \"Deep residual learning for image recognition\"https://arxiv.org/abs/1512.03385.", "\n", "# This variant is also known as ResNet V1.5 and improves accuracy according to", "\n", "# https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch.", "\n", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.BasicBlock.forward": [[88, 105], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.Bottleneck.__init__": [[110, 128], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv1x1", "torch.Sequential", "torch.Sequential", "Downsample", "resnet.conv1x1"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1"], ["\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.Bottleneck.forward": [[129, 150], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "use_pool", "=", "False", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "use_pool", "=", "use_pool", "\n", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.ResNet.__init__": [[154, 204], ["torch.Module.__init__", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "resnet.ResNet.modules", "range", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "print", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.MaxPool2d", "torch.MaxPool2d", "Downsample", "Downsample", "torch.MaxPool2d", "torch.MaxPool2d", "Downsample", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer"], ["self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "self", ".", "use_pool", ":", "\n", "            ", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "# self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n", "", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.ResNet._make_layer": [[205, 228], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block", "Downsample"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1"], ["base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "# See note [TorchScript super()]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_pool", ":", "\n", "            ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "", "outputs", "[", "'stem'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 1/4", "\n", "outputs", "[", "'res2'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 1/8", "\n", "outputs", "[", "'res3'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 1/16", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.ResNet.forward": [[229, 245], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["outputs", "[", "'res4'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "# 1/32", "\n", "outputs", "[", "'res5'", "]", "=", "x", "\n", "\n", "return", "outputs", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n", "\n", "", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv3x3": [[57, 61], ["torch.Conv2d"], "function", ["None"], ["self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.conv1x1": [[62, 65], ["torch.Conv2d"], "function", ["None"], ["out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.resnet18": [[247, 256], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "return", "model", "\n", "\n", "\n", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.resnet34": [[258, 267], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["**", "kwargs", ")", "\n", "\n", "\n", "", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.resnet50": [[269, 278], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["**", "kwargs", ")", "\n", "\n", "\n", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.resnet101": [[280, 289], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["**", "kwargs", ")", "\n", "\n", "\n", "", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.resnet152": [[291, 300], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["**", "kwargs", ")", "\n", "\n", "\n", "", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.resnext50_32x4d": [[302, 307], ["resnet.ResNet"], "function", ["None"], ["**", "kwargs", ")", "\n", "\n", "\n", "", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.resnet.resnext101_32x8d": [[309, 314], ["resnet.ResNet"], "function", ["None"], ["\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet._DenseLayer.__init__": [[60, 71], ["torch.Sequential.__init__", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet._DenseLayer.forward": [[72, 77], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet._DenseBlock.__init__": [[80, 85], ["torch.Sequential.__init__", "range", "densenet._DenseLayer", "densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet._Transition.__init__": [[88, 96], ["torch.Sequential.__init__", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "Downsample"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ",", "filter_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "# self.add_module('pool', nn.AvgPool2d(kernel_size=2, stride=2))", "\n", "self", ".", "add_module", "(", "'pool'", ",", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "num_output_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet.DenseNet.__init__": [[111, 167], ["torch.Module.__init__", "enumerate", "densenet.DenseNet.features.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "densenet._DenseBlock", "densenet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "collections.OrderedDict", "collections.OrderedDict", "densenet._Transition", "densenet.DenseNet.features.add_module", "isinstance", "len", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "print", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "Downsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Downsample", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "Downsample"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "1000", ",", "\n", "filter_size", "=", "1", ",", "pool_only", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# First convolution", "\n", "if", "(", "pool_only", ")", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'max0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", ",", "\n", "(", "'pool0'", ",", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "num_init_features", ")", ")", ",", "\n", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'ds0'", ",", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "num_init_features", ")", ")", ",", "\n", "(", "'max0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", ",", "\n", "(", "'pool0'", ",", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "num_init_features", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "# Each denseblock", "\n", "", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "num_output_features", "=", "num_features", "//", "2", ",", "filter_size", "=", "filter_size", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# Linear layer", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n", "# Official init from torch repo.", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "(", "m", ".", "in_channels", "!=", "m", ".", "out_channels", "or", "m", ".", "out_channels", "!=", "m", ".", "groups", "or", "m", ".", "bias", "is", "not", "None", ")", ":", "\n", "# don't want to reinitialize downsample layers, code assuming normal conv layers will not have these characteristics", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'Not initializing'", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet.DenseNet.forward": [[168, 174], ["densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "densenet.DenseNet.classifier", "densenet.DenseNet.size", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet._load_state_dict": [[176, 191], ["re.compile", "torch.load_url", "list", "model.load_state_dict", "model_zoo.load_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "", "def", "_load_state_dict", "(", "model", ",", "model_url", ")", ":", "\n", "# '.'s are no longer allowed in module names, but pervious _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "    ", "pattern", "=", "re", ".", "compile", "(", "\n", "r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$'", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_url", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "            ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet.densenet121": [[193, 204], ["densenet.DenseNet", "densenet._load_state_dict"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet._load_state_dict"], ["", "def", "densenet121", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "pool_only", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "filter_size", "=", "filter_size", ",", "pool_only", "=", "pool_only", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_state_dict", "(", "model", ",", "model_urls", "[", "'densenet121'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet.densenet169": [[206, 217], ["densenet.DenseNet", "densenet._load_state_dict"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet._load_state_dict"], ["", "def", "densenet169", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "pool_only", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "\n", "filter_size", "=", "filter_size", ",", "pool_only", "=", "pool_only", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_state_dict", "(", "model", ",", "model_urls", "[", "'densenet169'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet.densenet201": [[219, 230], ["densenet.DenseNet", "densenet._load_state_dict"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet._load_state_dict"], ["", "def", "densenet201", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "pool_only", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "\n", "filter_size", "=", "filter_size", ",", "pool_only", "=", "pool_only", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_state_dict", "(", "model", ",", "model_urls", "[", "'densenet201'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet.densenet161": [[232, 243], ["densenet.DenseNet", "densenet._load_state_dict"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.densenet._load_state_dict"], ["", "def", "densenet161", "(", "pretrained", "=", "False", ",", "filter_size", "=", "1", ",", "pool_only", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "num_init_features", "=", "96", ",", "growth_rate", "=", "48", ",", "block_config", "=", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "\n", "filter_size", "=", "filter_size", ",", "pool_only", "=", "pool_only", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_state_dict", "(", "model", ",", "model_urls", "[", "'densenet161'", "]", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.alexnet.AlexNet.__init__": [[57, 97], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "Downsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "Downsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "Downsample", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Downsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "Downsample", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "filter_size", "=", "1", ",", "pool_only", "=", "False", ",", "relu_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "(", "pool_only", ")", ":", "# only apply LPF to pooling layers, so run conv1 at stride 4 as before", "\n", "            ", "first_ds", "=", "[", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "]", "\n", "", "else", ":", "\n", "            ", "if", "(", "relu_first", ")", ":", "# this is the right order", "\n", "                ", "first_ds", "=", "[", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "64", ")", ",", "]", "\n", "", "else", ":", "# this is the wrong order, since it's equivalent to downsampling the image first", "\n", "                ", "first_ds", "=", "[", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "]", "\n", "\n", "", "", "first_ds", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "192", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "256", ")", "]", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "first_ds", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "6", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.alexnet.AlexNet.forward": [[99, 105], ["alexnet.AlexNet.features", "alexnet.AlexNet.avgpool", "alexnet.AlexNet.view", "alexnet.AlexNet.classifier", "alexnet.AlexNet.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "256", "*", "6", "*", "6", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.alexnet.AlexNetNMP.__init__": [[123, 149], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Downsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Downsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Downsample", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "filter_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "AlexNetNMP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "64", ",", "pad_off", "=", "-", "1", ",", "hidden", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "192", ",", "pad_off", "=", "-", "1", ",", "hidden", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Downsample", "(", "filt_size", "=", "filter_size", ",", "stride", "=", "2", ",", "channels", "=", "256", ",", "pad_off", "=", "-", "1", ",", "hidden", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "6", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.alexnet.AlexNetNMP.forward": [[151, 158], ["alexnet.AlexNetNMP.features", "alexnet.AlexNetNMP.avgpool", "alexnet.AlexNetNMP.view", "alexnet.AlexNetNMP.classifier", "alexnet.AlexNetNMP.size"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# embed()", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "256", "*", "6", "*", "6", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.alexnet.alexnet": [[107, 118], ["alexnet.AlexNet", "AlexNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'alexnet'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.alexnet.alexnetnmp": [[160, 171], ["alexnet.AlexNetNMP", "AlexNetNMP.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_url"], ["", "", "def", "alexnetnmp", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "AlexNetNMP", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'alexnet'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.__init__.Downsample.__init__": [[15, 46], ["torch.Module.__init__", "int", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "__init__.Downsample.register_buffer", "int", "int", "int", "int", "numpy.array", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "filt[].repeat", "__init__.get_pad_layer", "numpy.ceil", "numpy.ceil", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.__init__.get_pad_layer"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.__init__.Downsample.forward": [[47, 55], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "__init__.Downsample.pad", "__init__.Downsample.pad"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.__init__.Downsample1D.__init__": [[69, 100], ["torch.Module.__init__", "int", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "__init__.Downsample1D.register_buffer", "int", "int", "numpy.array", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "filt[].repeat", "__init__.get_pad_layer_1d", "numpy.ceil", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.__init__.get_pad_layer_1d"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.__init__.Downsample1D.forward": [[101, 109], ["torch.conv1d", "torch.conv1d", "torch.conv1d", "torch.conv1d", "__init__.Downsample1D.pad", "__init__.Downsample1D.pad"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.__init__.get_pad_layer": [[56, 66], ["print"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.models_lpf.__init__.get_pad_layer_1d": [[111, 121], ["print"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.BasicBlock.__init__": [[32, 42], ["torch.Module.__init__", "hrnet_backbone.conv3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet_backbone.conv3x3", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_in", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.BasicBlock.forward": [[43, 60], ["hrnet_backbone.BasicBlock.conv1", "hrnet_backbone.BasicBlock.bn1", "hrnet_backbone.BasicBlock.relu", "hrnet_backbone.BasicBlock.conv2", "hrnet_backbone.BasicBlock.bn2", "hrnet_backbone.BasicBlock.relu_in", "hrnet_backbone.BasicBlock.downsample"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_in", "(", "out", ")", "\n", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.Bottleneck.__init__": [[65, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", "*", "4", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_in", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.Bottleneck.forward": [[79, 100], ["hrnet_backbone.Bottleneck.conv1", "hrnet_backbone.Bottleneck.bn1", "hrnet_backbone.Bottleneck.relu", "hrnet_backbone.Bottleneck.conv2", "hrnet_backbone.Bottleneck.bn2", "hrnet_backbone.Bottleneck.relu", "hrnet_backbone.Bottleneck.conv3", "hrnet_backbone.Bottleneck.bn3", "hrnet_backbone.Bottleneck.relu_in", "hrnet_backbone.Bottleneck.downsample"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_in", "(", "out", ")", "\n", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionModule.__init__": [[103, 119], ["torch.Module.__init__", "hrnet_backbone.HighResolutionModule._check_branches", "hrnet_backbone.HighResolutionModule._make_branches", "hrnet_backbone.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_fuse_layers"], ["", "", "class", "HighResolutionModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionModule._check_branches": [[120, 136], ["len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["\n", "", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "Log", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "Log", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionModule._make_one_branch": [[137, 178], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "Log", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "bn_momentum", "\n", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "bn_momentum", "=", "bn_momentum", "\n", ")", "\n", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "bn_momentum", "=", "bn_momentum", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionModule._make_branches": [[179, 188], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "hrnet_backbone.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_one_branch"], [")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "bn_type", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionModule._make_fuse_layers": [[189, 249], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.module_helper.ModuleHelper.BatchNorm2d", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], [")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n", "", "def", "_make_fuse_layers", "(", "self", ",", "bn_type", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", ")", "\n", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_outchannels_conv3x3", ",", "momentum", "=", "bn_momentum", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_outchannels_conv3x3", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionModule.get_num_inchannels": [[250, 252], ["None"], "methods", ["None"], ["", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n", "", "def", "get_num_inchannels", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionModule.forward": [[253, 280], ["range", "range", "len", "range", "x_fuse.append", "hrnet_backbone.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["        ", "return", "self", ".", "num_inchannels", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionNet.__init__": [[290, 350], ["torch.Module.__init__", "os.environ.get", "hrnet_backbone.HighResolutionNet._make_transition_layer", "hrnet_backbone.HighResolutionNet._make_stage", "hrnet_backbone.HighResolutionNet._make_transition_layer", "hrnet_backbone.HighResolutionNet._make_stage", "hrnet_backbone.HighResolutionNet._make_transition_layer", "hrnet_backbone.HighResolutionNet._make_stage", "os.environ.get", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet_backbone.HighResolutionNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet_backbone.HighResolutionNet._make_layer", "hrnet_backbone.HighResolutionNet._make_head", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_head", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["class", "HighResolutionNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", ",", "bn_type", ",", "bn_momentum", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'full_res_stem'", ")", ":", "\n", "            ", "Log", ".", "info", "(", "\"using full-resolution stem with stride=1\"", ")", "\n", "stem_stride", "=", "1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "stem_stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "64", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "64", ",", "4", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "", "else", ":", "\n", "            ", "stem_stride", "=", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "stem_stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "64", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "stem_stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "64", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "64", ",", "4", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "", "self", ".", "stage2_cfg", "=", "cfg", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "256", "]", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "cfg", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "cfg", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'keep_imagenet_head'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionNet._make_head": [[351, 399], ["enumerate", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet_backbone.HighResolutionNet._make_layer", "torch.ModuleList.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["            ", "self", ".", "incre_modules", ",", "self", ".", "downsamp_modules", ",", "self", ".", "final_layer", "=", "self", ".", "_make_head", "(", "pre_stage_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "", "", "def", "_make_head", "(", "self", ",", "pre_stage_channels", ",", "bn_type", ",", "bn_momentum", ")", ":", "\n", "        ", "head_block", "=", "Bottleneck", "\n", "head_channels", "=", "[", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "\n", "Log", ".", "info", "(", "\"pre_stage_channels: {}\"", ".", "format", "(", "pre_stage_channels", ")", ")", "\n", "Log", ".", "info", "(", "\"head_channels: {}\"", ".", "format", "(", "head_channels", ")", ")", "\n", "\n", "# Increasing the #channels on each resolution ", "\n", "# from C, 2C, 4C, 8C to 128, 256, 512, 1024", "\n", "incre_modules", "=", "[", "]", "\n", "for", "i", ",", "channels", "in", "enumerate", "(", "pre_stage_channels", ")", ":", "\n", "            ", "incre_module", "=", "self", ".", "_make_layer", "(", "head_block", ",", "\n", "channels", ",", "\n", "head_channels", "[", "i", "]", ",", "\n", "1", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "bn_momentum", "=", "bn_momentum", "\n", ")", "\n", "incre_modules", ".", "append", "(", "incre_module", ")", "\n", "", "incre_modules", "=", "nn", ".", "ModuleList", "(", "incre_modules", ")", "\n", "\n", "# downsampling modules", "\n", "downsamp_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pre_stage_channels", ")", "-", "1", ")", ":", "\n", "            ", "in_channels", "=", "head_channels", "[", "i", "]", "*", "head_block", ".", "expansion", "\n", "out_channels", "=", "head_channels", "[", "i", "+", "1", "]", "*", "head_block", ".", "expansion", "\n", "\n", "downsamp_module", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "downsamp_modules", ".", "append", "(", "downsamp_module", ")", "\n", "", "downsamp_modules", "=", "nn", ".", "ModuleList", "(", "downsamp_modules", ")", "\n", "\n", "final_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "head_channels", "[", "3", "]", "*", "head_block", ".", "expansion", ",", "\n", "out_channels", "=", "2048", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionNet._make_transition_layer": [[400, 448], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], [")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "2048", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "return", "incre_modules", ",", "downsamp_modules", ",", "final_layer", "\n", "\n", "", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ",", "bn_type", ",", "bn_momentum", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "\n", "outchannels", ",", "\n", "3", ",", "\n", "2", ",", "\n", "1", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "outchannels", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionNet._make_layer": [[449, 468], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], [")", "\n", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "bn_momentum", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionNet._make_stage": [[469, 502], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet_backbone.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule.get_num_inchannels"], ["inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "\n", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ",", "\n", "bn_type", ",", "\n", "bn_momentum", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HighResolutionNet.forward": [[503, 562], ["os.environ.get", "hrnet_backbone.HighResolutionNet.layer1", "range", "hrnet_backbone.HighResolutionNet.stage2", "range", "hrnet_backbone.HighResolutionNet.stage3", "os.environ.get", "range", "hrnet_backbone.HighResolutionNet.stage4", "os.environ.get", "hrnet_backbone.HighResolutionNet.conv1", "hrnet_backbone.HighResolutionNet.bn1", "hrnet_backbone.HighResolutionNet.relu", "hrnet_backbone.HighResolutionNet.conv1", "hrnet_backbone.HighResolutionNet.bn1", "hrnet_backbone.HighResolutionNet.relu", "hrnet_backbone.HighResolutionNet.conv2", "hrnet_backbone.HighResolutionNet.bn2", "hrnet_backbone.HighResolutionNet.relu", "x_list.append", "range", "hrnet_backbone.HighResolutionNet.final_layer", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "len", "x_list.append"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], [")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "os", ".", "environ", ".", "get", "(", "'full_res_stem'", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'drop_stage4'", ")", ":", "\n", "            ", "return", "y_list", "\n", "\n", "", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'keep_imagenet_head'", ")", ":", "\n", "# Classification Head", "\n", "            ", "x_list", "=", "[", "]", "\n", "y", "=", "self", ".", "incre_modules", "[", "0", "]", "(", "y_list", "[", "0", "]", ")", "\n", "x_list", ".", "append", "(", "y", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "downsamp_modules", ")", ")", ":", "\n", "                ", "y", "=", "self", ".", "incre_modules", "[", "i", "+", "1", "]", "(", "y_list", "[", "i", "+", "1", "]", ")", "+", "self", ".", "downsamp_modules", "[", "i", "]", "(", "y", ")", "\n", "x_list", ".", "append", "(", "y", ")", "\n", "\n", "", "y", "=", "self", ".", "final_layer", "(", "y", ")", "\n", "del", "x_list", "[", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HRNetBackbone.__init__": [[565, 569], ["None"], "methods", ["None"], ["return", "x_list", "\n", "\n", "", "return", "y_list", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.HRNetBackbone.__call__": [[570, 613], ["hrnet_backbone.HighResolutionNet", "modules.module_helper.ModuleHelper.load_model", "hrnet_backbone.HighResolutionNet", "modules.module_helper.ModuleHelper.load_model", "hrnet_backbone.HighResolutionNet", "modules.module_helper.ModuleHelper.load_model", "hrnet_backbone.HighResolutionNet", "modules.module_helper.ModuleHelper.load_model", "Exception"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model"], ["", "", "class", "HRNetBackbone", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "None", ",", "arch", "=", "'hrnet48'", ")", ":", "\n", "        ", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "arch", "=", "arch", "\n", "\n", "", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "from", ".", "hrnet_config", "import", "MODEL_CONFIGS", "\n", "\n", "if", "self", ".", "arch", "==", "'hrnet18'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet18'", "]", ",", "\n", "bn_type", "=", "'inplace_abn'", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "\n", "", "elif", "self", ".", "arch", "==", "'hrnet32'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet32'", "]", ",", "\n", "bn_type", "=", "'inplace_abn'", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "\n", "", "elif", "self", ".", "arch", "==", "'hrnet48'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet48'", "]", ",", "\n", "bn_type", "=", "'inplace_abn'", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "\n", "", "elif", "self", ".", "arch", "==", "'hrnet64'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet64'", "]", ",", "\n", "bn_type", "=", "'inplace_abn'", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone.conv3x3": [[23, 27], ["torch.Conv2d"], "function", ["None"], ["\n", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.BasicBlock.__init__": [[32, 42], ["torch.Module.__init__", "hrnet_backbone_pp.conv3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet_backbone_pp.conv3x3", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_in", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.BasicBlock.forward": [[43, 60], ["hrnet_backbone_pp.BasicBlock.conv1", "hrnet_backbone_pp.BasicBlock.bn1", "hrnet_backbone_pp.BasicBlock.relu", "hrnet_backbone_pp.BasicBlock.conv2", "hrnet_backbone_pp.BasicBlock.bn2", "hrnet_backbone_pp.BasicBlock.relu_in", "hrnet_backbone_pp.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_in", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.Bottleneck.__init__": [[65, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", "*", "4", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_in", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.Bottleneck.forward": [[79, 100], ["hrnet_backbone_pp.Bottleneck.conv1", "hrnet_backbone_pp.Bottleneck.bn1", "hrnet_backbone_pp.Bottleneck.relu", "hrnet_backbone_pp.Bottleneck.conv2", "hrnet_backbone_pp.Bottleneck.bn2", "hrnet_backbone_pp.Bottleneck.relu", "hrnet_backbone_pp.Bottleneck.conv3", "hrnet_backbone_pp.Bottleneck.bn3", "hrnet_backbone_pp.Bottleneck.relu_in", "hrnet_backbone_pp.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_in", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule.__init__": [[103, 119], ["torch.Module.__init__", "hrnet_backbone_pp.HighResolutionModule._check_branches", "hrnet_backbone_pp.HighResolutionModule._make_branches", "hrnet_backbone_pp.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._check_branches": [[120, 136], ["len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_one_branch": [[137, 178], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "bn_momentum", "\n", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "bn_momentum", "=", "bn_momentum", "\n", ")", "\n", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "bn_momentum", "=", "bn_momentum", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_branches": [[179, 188], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "hrnet_backbone_pp.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "bn_type", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule._make_fuse_layers": [[189, 247], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.module_helper.ModuleHelper.BatchNorm2d", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_fuse_layers", "(", "self", ",", "bn_type", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", ")", "\n", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_outchannels_conv3x3", ",", "momentum", "=", "bn_momentum", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_outchannels_conv3x3", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule.get_num_inchannels": [[248, 250], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule.forward": [[251, 278], ["range", "range", "len", "range", "x_fuse.append", "hrnet_backbone_pp.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet.__init__": [[288, 347], ["torch.Module.__init__", "os.environ.get", "hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "hrnet_backbone_pp.HighResolutionNet._make_stage", "hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "hrnet_backbone_pp.HighResolutionNet._make_stage", "hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "hrnet_backbone_pp.HighResolutionNet._make_stage", "hrnet_backbone_pp.HighResolutionNet._make_head", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet_backbone_pp.HighResolutionNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet_backbone_pp.HighResolutionNet._make_layer", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_head", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "bn_type", ",", "bn_momentum", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'full_res_stem'", ")", ":", "\n", "            ", "stem_stride", "=", "1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "stem_stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "64", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "64", ",", "4", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "", "else", ":", "\n", "            ", "stem_stride", "=", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "stem_stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "64", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "stem_stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "64", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "64", ",", "4", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "", "self", ".", "stage2_cfg", "=", "cfg", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "256", "]", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "cfg", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "cfg", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n", "self", ".", "incre_modules", ",", "self", ".", "downsamp_modules", ",", "self", ".", "final_layer", "=", "self", ".", "_make_head", "(", "pre_stage_channels", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_head": [[348, 396], ["enumerate", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet_backbone_pp.HighResolutionNet._make_layer", "torch.ModuleList.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_head", "(", "self", ",", "pre_stage_channels", ",", "bn_type", ",", "bn_momentum", ")", ":", "\n", "        ", "head_block", "=", "Bottleneck", "\n", "head_channels", "=", "[", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "\n", "# Increasing the #channels on each resolution", "\n", "# from C, 2C, 4C, 8C to 128, 256, 512, 1024", "\n", "incre_modules", "=", "[", "]", "\n", "for", "i", ",", "channels", "in", "enumerate", "(", "pre_stage_channels", ")", ":", "\n", "            ", "incre_module", "=", "self", ".", "_make_layer", "(", "head_block", ",", "\n", "channels", ",", "\n", "head_channels", "[", "i", "]", ",", "\n", "1", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "bn_momentum", "=", "bn_momentum", "\n", ")", "\n", "incre_modules", ".", "append", "(", "incre_module", ")", "\n", "", "incre_modules", "=", "nn", ".", "ModuleList", "(", "incre_modules", ")", "\n", "\n", "# downsampling modules", "\n", "downsamp_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pre_stage_channels", ")", "-", "1", ")", ":", "\n", "            ", "in_channels", "=", "head_channels", "[", "i", "]", "*", "head_block", ".", "expansion", "\n", "out_channels", "=", "head_channels", "[", "i", "+", "1", "]", "*", "head_block", ".", "expansion", "\n", "\n", "downsamp_module", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "out_channels", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "downsamp_modules", ".", "append", "(", "downsamp_module", ")", "\n", "", "downsamp_modules", "=", "nn", ".", "ModuleList", "(", "downsamp_modules", ")", "\n", "\n", "final_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "head_channels", "[", "3", "]", "*", "head_block", ".", "expansion", ",", "\n", "out_channels", "=", "2048", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "2048", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "return", "incre_modules", ",", "downsamp_modules", ",", "final_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_transition_layer": [[397, 445], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.module_helper.ModuleHelper.BatchNorm2d", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ",", "bn_type", ",", "bn_momentum", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "\n", "outchannels", ",", "\n", "3", ",", "\n", "2", ",", "\n", "1", ",", "\n", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "outchannels", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_layer": [[446, 465], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "modules.module_helper.ModuleHelper.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.BatchNorm2d"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "ModuleHelper", ".", "BatchNorm2d", "(", "bn_type", "=", "bn_type", ")", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "bn_momentum", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", ")", "\n", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "bn_type", "=", "bn_type", ",", "bn_momentum", "=", "bn_momentum", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet._make_stage": [[466, 499], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet_backbone_pp.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ",", "bn_type", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "\n", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ",", "\n", "bn_type", ",", "\n", "bn_momentum", "\n", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HighResolutionNet.forward": [[500, 559], ["os.environ.get", "hrnet_backbone_pp.HighResolutionNet.layer1", "range", "hrnet_backbone_pp.HighResolutionNet.stage2", "range", "hrnet_backbone_pp.HighResolutionNet.stage3", "os.environ.get", "range", "hrnet_backbone_pp.HighResolutionNet.stage4", "hrnet_backbone_pp.HighResolutionNet.conv1", "hrnet_backbone_pp.HighResolutionNet.bn1", "hrnet_backbone_pp.HighResolutionNet.relu", "hrnet_backbone_pp.HighResolutionNet.conv1", "hrnet_backbone_pp.HighResolutionNet.bn1", "hrnet_backbone_pp.HighResolutionNet.relu", "hrnet_backbone_pp.HighResolutionNet.conv2", "hrnet_backbone_pp.HighResolutionNet.bn2", "hrnet_backbone_pp.HighResolutionNet.relu", "x_list.append", "range", "hrnet_backbone_pp.HighResolutionNet.final_layer", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "len", "x_list.append"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "os", ".", "environ", ".", "get", "(", "'full_res_stem'", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "if", "os", ".", "environ", ".", "get", "(", "'drop_stage4'", ")", ":", "\n", "            ", "return", "y_list", "\n", "\n", "", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "if", "True", ":", "\n", "# Classification Head", "\n", "            ", "x_list", "=", "[", "]", "\n", "y", "=", "self", ".", "incre_modules", "[", "0", "]", "(", "y_list", "[", "0", "]", ")", "\n", "x_list", ".", "append", "(", "y", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "downsamp_modules", ")", ")", ":", "\n", "                ", "y", "=", "self", ".", "incre_modules", "[", "i", "+", "1", "]", "(", "y_list", "[", "i", "+", "1", "]", ")", "+", "self", ".", "downsamp_modules", "[", "i", "]", "(", "y", ")", "\n", "x_list", ".", "append", "(", "y", ")", "\n", "\n", "", "y", "=", "self", ".", "final_layer", "(", "y", ")", "\n", "del", "x_list", "[", "-", "1", "]", "\n", "x_list", ".", "append", "(", "y", ")", "\n", "\n", "return", "x_list", "\n", "\n", "", "return", "y_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HRNetBackbone.__init__": [[562, 566], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", ",", "bn_type", ",", "backbone", "=", "'hrnet48++'", ")", ":", "\n", "        ", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "bn_type", "=", "bn_type", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.HRNetBackbone.__call__": [[567, 610], ["hrnet_backbone_pp.HighResolutionNet", "modules.module_helper.ModuleHelper.load_model", "hrnet_backbone_pp.HighResolutionNet", "modules.module_helper.ModuleHelper.load_model", "hrnet_backbone_pp.HighResolutionNet", "modules.module_helper.ModuleHelper.load_model", "hrnet_backbone_pp.HighResolutionNet", "modules.module_helper.ModuleHelper.load_model", "Exception"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.module_helper.ModuleHelper.load_model"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "arch", "=", "self", ".", "backbone", "\n", "from", ".", "hrnet_config", "import", "MODEL_CONFIGS", "\n", "\n", "if", "arch", "==", "'hrnet18'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet18'", "]", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "\n", "", "elif", "arch", "==", "'hrnet32'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet32'", "]", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "\n", "", "elif", "arch", "==", "'hrnet48++'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet48'", "]", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "\n", "", "elif", "arch", "==", "'hrnet64'", ":", "\n", "            ", "arch_net", "=", "HighResolutionNet", "(", "MODEL_CONFIGS", "[", "'hrnet64'", "]", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", "bn_momentum", "=", "0.1", ")", "\n", "arch_net", "=", "ModuleHelper", ".", "load_model", "(", "arch_net", ",", "\n", "pretrained", "=", "self", ".", "pretrained", ",", "\n", "all_match", "=", "False", ",", "\n", "network", "=", "'hrnet'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Architecture undefined!'", ")", "\n", "\n", "", "return", "arch_net", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.hrnet_package.hrnet_backbone_pp.conv3x3": [[23, 27], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.coco.Coco.__init__": [[25, 55], ["COCO", "LOG.info", "coco.Coco.coco.getImgIds", "len", "coco.Coco.coco.getImgIds", "coco.Coco.filter_for_annotations", "coco.Coco.coco.getImgIds", "coco.Coco.filter_for_keypoint_annotations", "Exception"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.filter_for_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.filter_for_keypoint_annotations"], ["def", "__init__", "(", "self", ",", "image_dir", ",", "ann_file", ",", "*", ",", "target_transforms", "=", "None", ",", "\n", "n_images", "=", "None", ",", "preprocess", "=", "None", ",", "\n", "category_ids", "=", "None", ",", "\n", "image_filter", "=", "'keypoint-annotations'", ")", ":", "\n", "        ", "if", "category_ids", "is", "None", ":", "\n", "            ", "category_ids", "=", "[", "1", "]", "\n", "\n", "", "from", "pycocotools", ".", "coco", "import", "COCO", "# pylint: disable=import-outside-toplevel", "\n", "self", ".", "image_dir", "=", "image_dir", "\n", "self", ".", "coco", "=", "COCO", "(", "ann_file", ")", "\n", "\n", "self", ".", "category_ids", "=", "category_ids", "\n", "\n", "if", "image_filter", "==", "'all'", ":", "\n", "            ", "self", ".", "ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "", "elif", "image_filter", "==", "'annotated'", ":", "\n", "            ", "self", ".", "ids", "=", "self", ".", "coco", ".", "getImgIds", "(", "catIds", "=", "self", ".", "category_ids", ")", "\n", "self", ".", "filter_for_annotations", "(", ")", "\n", "", "elif", "image_filter", "==", "'keypoint-annotations'", ":", "\n", "            ", "self", ".", "ids", "=", "self", ".", "coco", ".", "getImgIds", "(", "catIds", "=", "self", ".", "category_ids", ")", "\n", "self", ".", "filter_for_keypoint_annotations", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unknown value for image_filter: {}'", ".", "format", "(", "image_filter", ")", ")", "\n", "\n", "", "if", "n_images", ":", "\n", "            ", "self", ".", "ids", "=", "self", ".", "ids", "[", ":", "n_images", "]", "\n", "", "LOG", ".", "info", "(", "'Images: %d'", ",", "len", "(", "self", ".", "ids", ")", ")", "\n", "\n", "self", ".", "preprocess", "=", "preprocess", "or", "transforms", ".", "EVAL_TRANSFORM", "\n", "self", ".", "target_transforms", "=", "target_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.coco.Coco.filter_for_keypoint_annotations": [[56, 71], ["LOG.info", "LOG.info", "coco.Coco.coco.getAnnIds", "coco.Coco.coco.loadAnns", "any", "coco.Coco.filter_for_keypoint_annotations.has_keypoint_annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "filter_for_keypoint_annotations", "(", "self", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'filter for keypoint annotations ...'", ")", "\n", "def", "has_keypoint_annotation", "(", "image_id", ")", ":", "\n", "            ", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "image_id", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "if", "'keypoints'", "not", "in", "ann", ":", "\n", "                    ", "continue", "\n", "", "if", "any", "(", "v", ">", "0.0", "for", "v", "in", "ann", "[", "'keypoints'", "]", "[", "2", ":", ":", "3", "]", ")", ":", "\n", "                    ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "", "self", ".", "ids", "=", "[", "image_id", "for", "image_id", "in", "self", ".", "ids", "\n", "if", "has_keypoint_annotation", "(", "image_id", ")", "]", "\n", "LOG", ".", "info", "(", "'... done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.coco.Coco.filter_for_annotations": [[72, 87], ["LOG.info", "LOG.info", "coco.Coco.coco.getAnnIds", "coco.Coco.coco.loadAnns", "ann.get", "coco.Coco.filter_for_annotations.has_annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "filter_for_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"removes images that only contain crowd annotations\"\"\"", "\n", "LOG", ".", "info", "(", "'filter for annotations ...'", ")", "\n", "def", "has_annotation", "(", "image_id", ")", ":", "\n", "            ", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "image_id", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "if", "ann", ".", "get", "(", "'iscrowd'", ")", ":", "\n", "                    ", "continue", "\n", "", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "self", ".", "ids", "=", "[", "image_id", "for", "image_id", "in", "self", ".", "ids", "\n", "if", "has_annotation", "(", "image_id", ")", "]", "\n", "LOG", ".", "info", "(", "'... done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.coco.Coco.class_aware_sample_weights": [[88, 126], ["coco.Coco.coco.getAnnIds", "coco.Coco.coco.loadAnns", "collections.defaultdict", "collections.defaultdict", "min", "LOG.debug", "LOG.debug", "image_categories[].add", "sum", "max", "min", "max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.add"], ["", "def", "class_aware_sample_weights", "(", "self", ",", "max_multiple", "=", "10.0", ")", ":", "\n", "        ", "\"\"\"Class aware sampling.\n\n        To be used with PyTorch's WeightedRandomSampler.\n\n        Reference: Solution for Large-Scale Hierarchical Object Detection\n        Datasets with Incomplete Annotation and Data Imbalance\n        Yuan Gao, Xingyuan Bu, Yang Hu, Hui Shen, Ti Bai, Xubin Li and Shilei Wen\n        \"\"\"", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "self", ".", "ids", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "\n", "category_image_counts", "=", "defaultdict", "(", "int", ")", "\n", "image_categories", "=", "defaultdict", "(", "set", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "ann", "[", "'iscrowd'", "]", ":", "\n", "                ", "continue", "\n", "", "image", "=", "ann", "[", "'image_id'", "]", "\n", "category", "=", "ann", "[", "'category_id'", "]", "\n", "if", "category", "in", "image_categories", "[", "image", "]", ":", "\n", "                ", "continue", "\n", "", "image_categories", "[", "image", "]", ".", "add", "(", "category", ")", "\n", "category_image_counts", "[", "category", "]", "+=", "1", "\n", "\n", "", "weights", "=", "[", "\n", "sum", "(", "\n", "1.0", "/", "category_image_counts", "[", "category_id", "]", "\n", "for", "category_id", "in", "image_categories", "[", "image_id", "]", "\n", ")", "\n", "for", "image_id", "in", "self", ".", "ids", "\n", "]", "\n", "min_w", "=", "min", "(", "weights", ")", "\n", "LOG", ".", "debug", "(", "'Class Aware Sampling: minW = %f, maxW = %f'", ",", "min_w", ",", "max", "(", "weights", ")", ")", "\n", "max_w", "=", "min_w", "*", "max_multiple", "\n", "weights", "=", "[", "min", "(", "w", ",", "max_w", ")", "for", "w", "in", "weights", "]", "\n", "LOG", ".", "debug", "(", "'Class Aware Sampling: minW = %f, maxW = %f'", ",", "min_w", ",", "max", "(", "weights", ")", ")", "\n", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.coco.Coco.__getitem__": [[127, 171], ["coco.Coco.coco.getAnnIds", "coco.Coco.coco.loadAnns", "copy.deepcopy", "LOG.debug", "coco.Coco.preprocess", "utils.mask_valid_area", "LOG.debug", "coco.Coco.coco.loadImgs", "open", "PIL.Image.open().convert", "image_info[].rsplit", "flickr_file_name.split", "getattr", "STAT_LOG.debug", "os.path.join", "numpy.any", "t", "PIL.Image.open", "int"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "image_id", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "\n", "image_info", "=", "self", ".", "coco", ".", "loadImgs", "(", "image_id", ")", "[", "0", "]", "\n", "LOG", ".", "debug", "(", "image_info", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "image_info", "[", "'file_name'", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "meta", "=", "{", "\n", "'dataset_index'", ":", "index", ",", "\n", "'image_id'", ":", "image_id", ",", "\n", "'file_name'", ":", "image_info", "[", "'file_name'", "]", ",", "\n", "}", "\n", "\n", "if", "'flickr_url'", "in", "image_info", ":", "\n", "            ", "_", ",", "flickr_file_name", "=", "image_info", "[", "'flickr_url'", "]", ".", "rsplit", "(", "'/'", ",", "maxsplit", "=", "1", ")", "\n", "flickr_id", ",", "_", "=", "flickr_file_name", ".", "split", "(", "'_'", ",", "maxsplit", "=", "1", ")", "\n", "meta", "[", "'flickr_full_page'", "]", "=", "'http://flickr.com/photo.gne?id={}'", ".", "format", "(", "flickr_id", ")", "\n", "\n", "# preprocess image and annotations", "\n", "", "image", ",", "anns", ",", "meta", "=", "self", ".", "preprocess", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n", "# mask valid TODO still necessary?", "\n", "valid_area", "=", "meta", "[", "'valid_area'", "]", "\n", "utils", ".", "mask_valid_area", "(", "image", ",", "valid_area", ")", "\n", "\n", "LOG", ".", "debug", "(", "meta", ")", "\n", "\n", "# log stats", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "getattr", "(", "ann", ",", "'iscrowd'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "if", "not", "np", ".", "any", "(", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0.0", ")", ":", "\n", "                ", "continue", "\n", "", "STAT_LOG", ".", "debug", "(", "{", "'bbox'", ":", "[", "int", "(", "v", ")", "for", "v", "in", "ann", "[", "'bbox'", "]", "]", "}", ")", "\n", "\n", "# transform targets", "\n", "", "if", "self", ".", "target_transforms", "is", "not", "None", ":", "\n", "            ", "anns", "=", "[", "t", "(", "image", ",", "anns", ",", "meta", ")", "for", "t", "in", "self", ".", "target_transforms", "]", "\n", "\n", "", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.coco.Coco.__len__": [[172, 174], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.collate.collate_images_anns_meta": [[4, 9], ["torch.utils.data.dataloader.default_collate"], "function", ["None"], ["def", "collate_images_anns_meta", "(", "batch", ")", ":", "\n", "    ", "images", "=", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "[", "b", "[", "0", "]", "for", "b", "in", "batch", "]", ")", "\n", "anns", "=", "[", "b", "[", "1", "]", "for", "b", "in", "batch", "]", "\n", "metas", "=", "[", "b", "[", "2", "]", "for", "b", "in", "batch", "]", "\n", "return", "images", ",", "anns", ",", "metas", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.collate.collate_images_targets_meta": [[11, 16], ["torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate"], "function", ["None"], ["", "def", "collate_images_targets_meta", "(", "batch", ")", ":", "\n", "    ", "images", "=", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "[", "b", "[", "0", "]", "for", "b", "in", "batch", "]", ")", "\n", "targets", "=", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "[", "b", "[", "1", "]", "for", "b", "in", "batch", "]", ")", "\n", "metas", "=", "[", "b", "[", "2", "]", "for", "b", "in", "batch", "]", "\n", "return", "images", ",", "targets", ",", "metas", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta.factory": [[17, 21], ["headmeta.factory_single"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory_single"], ["def", "factory", "(", "head_names", ")", ":", "\n", "    ", "if", "head_names", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "return", "[", "factory_single", "(", "hn", ")", "for", "hn", "in", "head_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta.factory_single": [[23, 68], ["network.heads.DetectionMeta", "network.heads.IntensityMeta", "network.heads.AssociationMeta", "network.heads.AssociationMeta", "network.heads.ParsingMeta", "network.heads.OffsetMeta", "network.heads.CascadeMeta", "network.heads.AssociationMeta", "network.heads.CenterMeta"], "function", ["None"], ["", "def", "factory_single", "(", "head_name", ")", ":", "\n", "    ", "if", "'cifdet'", "in", "head_name", ":", "\n", "        ", "return", "DetectionMeta", "(", "head_name", ",", "COCO_CATEGORIES", ")", "\n", "", "if", "'pif'", "in", "head_name", "or", "'cif'", "in", "head_name", ":", "\n", "        ", "return", "IntensityMeta", "(", "head_name", ",", "\n", "COCO_KEYPOINTS", ",", "\n", "COCO_PERSON_SIGMAS", ",", "\n", "COCO_UPRIGHT_POSE", ",", "\n", "COCO_PERSON_SKELETON", ")", "\n", "", "if", "'caf25'", "in", "head_name", ":", "\n", "        ", "return", "AssociationMeta", "(", "head_name", ",", "\n", "COCO_KEYPOINTS", ",", "\n", "COCO_PERSON_SIGMAS", ",", "\n", "COCO_UPRIGHT_POSE", ",", "\n", "DENSER_COCO_PERSON_CONNECTIONS", ",", "\n", "sparse_skeleton", "=", "COCO_PERSON_SKELETON", ",", "\n", "only_in_field_of_view", "=", "True", ")", "\n", "", "if", "'caf16'", "in", "head_name", ":", "\n", "        ", "return", "AssociationMeta", "(", "head_name", ",", "\n", "COCO_KEYPOINTS", ",", "\n", "COCO_PERSON_SIGMAS", ",", "\n", "COCO_UPRIGHT_POSE", ",", "\n", "KINEMATIC_TREE_SKELETON", ")", "\n", "\n", "", "if", "head_name", "==", "'pdf'", ":", "\n", "        ", "return", "ParsingMeta", "(", "head_name", ")", "\n", "\n", "", "if", "head_name", "==", "'offset'", ":", "\n", "        ", "return", "OffsetMeta", "(", "head_name", ",", "\n", "COCO_KEYPOINTS", ",", "\n", "COCO_UPRIGHT_POSE", ")", "\n", "", "if", "head_name", "==", "'cascade'", ":", "\n", "        ", "return", "CascadeMeta", "(", "head_name", ",", "\n", "COCO_KEYPOINTS", ",", "\n", "COCO_UPRIGHT_POSE", ")", "\n", "\n", "", "if", "head_name", "==", "'caf'", ":", "\n", "        ", "return", "AssociationMeta", "(", "head_name", ",", "\n", "COCO_KEYPOINTS", ",", "\n", "COCO_PERSON_SIGMAS", ",", "\n", "COCO_UPRIGHT_POSE", ",", "\n", "COCO_PERSON_SKELETON", ")", "\n", "", "if", "head_name", "==", "'pcf'", ":", "\n", "        ", "return", "CenterMeta", "(", "head_name", ")", "\n", "", "raise", "NotImplementedError", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.constants.draw_ann": [[431, 451], ["ann.bbox", "show.canvas", "ax.set_axis_off", "ax.set_xlim", "ax.set_ylim", "keypoint_painter.annotation", "ax.set_aspect"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.bbox", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter.annotation"], ["def", "draw_ann", "(", "ann", ",", "*", ",", "keypoint_painter", ",", "filename", "=", "None", ",", "margin", "=", "0.5", ",", "aspect", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "from", "openpifpaf", "import", "show", "# pylint: disable=import-outside-toplevel", "\n", "\n", "bbox", "=", "ann", ".", "bbox", "(", ")", "\n", "xlim", "=", "bbox", "[", "0", "]", "-", "margin", ",", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", "+", "margin", "\n", "ylim", "=", "bbox", "[", "1", "]", "-", "margin", ",", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", "+", "margin", "\n", "if", "aspect", "==", "'equal'", ":", "\n", "        ", "fig_w", "=", "5.0", "\n", "", "else", ":", "\n", "        ", "fig_w", "=", "5.0", "/", "(", "ylim", "[", "1", "]", "-", "ylim", "[", "0", "]", ")", "*", "(", "xlim", "[", "1", "]", "-", "xlim", "[", "0", "]", ")", "\n", "\n", "", "with", "show", ".", "canvas", "(", "filename", ",", "figsize", "=", "(", "fig_w", ",", "5", ")", ",", "nomargin", "=", "True", ",", "**", "kwargs", ")", "as", "ax", ":", "\n", "        ", "ax", ".", "set_axis_off", "(", ")", "\n", "ax", ".", "set_xlim", "(", "*", "xlim", ")", "\n", "ax", ".", "set_ylim", "(", "*", "ylim", ")", "\n", "\n", "if", "aspect", "is", "not", "None", ":", "\n", "            ", "ax", ".", "set_aspect", "(", "aspect", ")", "\n", "\n", "", "keypoint_painter", ".", "annotation", "(", "ax", ",", "ann", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.constants.draw_skeletons": [[453, 476], ["numpy.sqrt", "show.KeypointPainter", "Annotation", "Annotation.set", "constants.draw_ann", "Annotation", "Annotation.set", "constants.draw_ann", "Annotation", "Annotation.set", "constants.draw_ann", "numpy.array", "numpy.array", "numpy.array", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.constants.draw_ann", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.constants.draw_ann", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.constants.draw_ann"], ["", "", "def", "draw_skeletons", "(", "pose", ")", ":", "\n", "    ", "from", ".", ".", "annotation", "import", "Annotation", "# pylint: disable=import-outside-toplevel", "\n", "from", ".", ".", "import", "show", "# pylint: disable=import-outside-toplevel", "\n", "\n", "scale", "=", "np", ".", "sqrt", "(", "\n", "(", "np", ".", "max", "(", "pose", "[", ":", ",", "0", "]", ")", "-", "np", ".", "min", "(", "pose", "[", ":", ",", "0", "]", ")", ")", "\n", "*", "(", "np", ".", "max", "(", "pose", "[", ":", ",", "1", "]", ")", "-", "np", ".", "min", "(", "pose", "[", ":", ",", "1", "]", ")", ")", "\n", ")", "\n", "\n", "show", ".", "KeypointPainter", ".", "show_joint_scales", "=", "True", "\n", "keypoint_painter", "=", "show", ".", "KeypointPainter", "(", "color_connections", "=", "True", ",", "linewidth", "=", "6", ")", "\n", "\n", "ann", "=", "Annotation", "(", "keypoints", "=", "COCO_KEYPOINTS", ",", "skeleton", "=", "COCO_PERSON_SKELETON", ")", "\n", "ann", ".", "set", "(", "pose", ",", "np", ".", "array", "(", "COCO_PERSON_SIGMAS", ")", "*", "scale", ")", "\n", "draw_ann", "(", "ann", ",", "filename", "=", "'docs/skeleton_coco.png'", ",", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n", "ann", "=", "Annotation", "(", "keypoints", "=", "COCO_KEYPOINTS", ",", "skeleton", "=", "KINEMATIC_TREE_SKELETON", ")", "\n", "ann", ".", "set", "(", "pose", ",", "np", ".", "array", "(", "COCO_PERSON_SIGMAS", ")", "*", "scale", ")", "\n", "draw_ann", "(", "ann", ",", "filename", "=", "'docs/skeleton_kinematic_tree.png'", ",", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n", "ann", "=", "Annotation", "(", "keypoints", "=", "COCO_KEYPOINTS", ",", "skeleton", "=", "DENSER_COCO_PERSON_SKELETON", ")", "\n", "ann", ".", "set", "(", "pose", ",", "np", ".", "array", "(", "COCO_PERSON_SIGMAS", ")", "*", "scale", ")", "\n", "draw_ann", "(", "ann", ",", "filename", "=", "'docs/skeleton_dense.png'", ",", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.constants.draw_mhp_skeletons": [[478, 493], ["numpy.sqrt", "show.KeypointPainter", "Annotation", "Annotation.set", "constants.draw_ann", "numpy.array", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.constants.draw_ann"], ["", "def", "draw_mhp_skeletons", "(", "pose", ")", ":", "\n", "    ", "from", "openpifpaf", ".", "annotation", "import", "Annotation", "# pylint: disable=import-outside-toplevel", "\n", "from", "openpifpaf", "import", "show", "# pylint: disable=import-outside-toplevel", "\n", "\n", "scale", "=", "np", ".", "sqrt", "(", "\n", "(", "np", ".", "max", "(", "pose", "[", ":", ",", "0", "]", ")", "-", "np", ".", "min", "(", "pose", "[", ":", ",", "0", "]", ")", ")", "\n", "*", "(", "np", ".", "max", "(", "pose", "[", ":", ",", "1", "]", ")", "-", "np", ".", "min", "(", "pose", "[", ":", ",", "1", "]", ")", ")", "\n", ")", "\n", "\n", "show", ".", "KeypointPainter", ".", "show_joint_scales", "=", "True", "\n", "keypoint_painter", "=", "show", ".", "KeypointPainter", "(", "color_connections", "=", "True", ",", "linewidth", "=", "6", ")", "\n", "\n", "ann", "=", "Annotation", "(", "keypoints", "=", "MHP_KEYPOINTS", ",", "skeleton", "=", "MHP_PERSON_SKELETON", ")", "\n", "ann", ".", "set", "(", "pose", ",", "np", ".", "array", "(", "MHP_PERSON_SIGMAS", ")", "*", "scale", ")", "\n", "draw_ann", "(", "ann", ",", "filename", "=", "'skeleton_mhp.png'", ",", "keypoint_painter", "=", "keypoint_painter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.constants.print_associations": [[495, 498], ["print"], "function", ["None"], ["", "def", "print_associations", "(", ")", ":", "\n", "    ", "for", "j1", ",", "j2", "in", "COCO_PERSON_SKELETON", ":", "\n", "        ", "print", "(", "COCO_KEYPOINTS", "[", "j1", "-", "1", "]", ",", "'-'", ",", "COCO_KEYPOINTS", "[", "j2", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.mhp.MHP.__init__": [[24, 47], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "LOG.info", "open", "f.readlines", "x.strip", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["def", "__init__", "(", "self", ",", "root", "=", "MHP_ROOT", ",", "train", "=", "True", ",", "category_ids", "=", "None", ",", "\n", "preprocess", "=", "None", ",", "target_transforms", "=", "None", ")", ":", "\n", "\n", "        ", "if", "category_ids", "is", "None", ":", "\n", "            ", "category_ids", "=", "[", "1", "]", "\n", "", "self", ".", "category_ids", "=", "category_ids", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "'train'", "if", "train", "else", "'val'", "\n", "\n", "image_list", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'list'", ",", "self", ".", "split", "+", "'.txt'", ")", "\n", "with", "open", "(", "image_list", ")", "as", "f", ":", "\n", "            ", "self", ".", "img_ids", "=", "f", ".", "readlines", "(", ")", "\n", "self", ".", "img_ids", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "self", ".", "img_ids", "]", "\n", "\n", "", "self", ".", "image_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ",", "'images'", ")", "\n", "self", ".", "pose_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ",", "'pose_annos'", ")", "\n", "self", ".", "parsing_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ",", "'parsing_annos'", ")", "\n", "\n", "LOG", ".", "info", "(", "'dataset size: {}'", ".", "format", "(", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "\n", "self", ".", "preprocess", "=", "preprocess", "or", "transforms", ".", "EVAL_TRANSFORM", "\n", "self", ".", "target_transforms", "=", "target_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.mhp.MHP.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.mhp.MHP.__getitem__": [[51, 92], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open().convert", "mhp.MHP._load_anns", "mhp.MHP.preprocess", "utils.mask_valid_area", "LOG.debug", "getattr", "STAT_LOG.debug", "PIL.Image.open", "numpy.any", "t", "ann.items", "int"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.mhp.MHP._load_anns", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_id", "=", "self", ".", "img_ids", "[", "index", "]", "\n", "\n", "image_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "image_id", "+", "'.jpg'", ")", "\n", "image", "=", "Image", ".", "open", "(", "image_file", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "anns", "=", "self", ".", "_load_anns", "(", "image_id", ")", "\n", "\n", "meta", "=", "{", "\n", "'dataset_index'", ":", "index", ",", "\n", "'image_id'", ":", "image_id", ",", "\n", "'file_name'", ":", "image_id", ",", "\n", "}", "\n", "\n", "# preprocess image and annotations", "\n", "image", ",", "anns", ",", "meta", "=", "self", ".", "preprocess", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n", "# mask valid TODO still necessary?", "\n", "valid_area", "=", "meta", "[", "'valid_area'", "]", "\n", "utils", ".", "mask_valid_area", "(", "image", ",", "valid_area", ")", "\n", "\n", "LOG", ".", "debug", "(", "meta", ")", "\n", "\n", "# log stats", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "getattr", "(", "ann", ",", "'iscrowd'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "if", "not", "np", ".", "any", "(", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0.0", ")", ":", "\n", "                ", "continue", "\n", "", "STAT_LOG", ".", "debug", "(", "{", "'bbox'", ":", "[", "int", "(", "v", ")", "for", "v", "in", "ann", "[", "'bbox'", "]", "]", "}", ")", "\n", "\n", "# transform targets", "\n", "", "if", "self", ".", "target_transforms", "is", "not", "None", ":", "\n", "            ", "anns", "=", "[", "t", "(", "image", ",", "anns", ",", "meta", ")", "for", "t", "in", "self", ".", "target_transforms", "]", "\n", "anns_d", "=", "{", "}", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "for", "k", ",", "v", "in", "ann", ".", "items", "(", ")", ":", "\n", "                    ", "anns_d", "[", "k", "]", "=", "v", "\n", "", "", "anns", "=", "anns_d", "\n", "\n", "", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.mhp.MHP._load_anns": [[93, 136], ["os.join", "os.join", "scipy.io.loadmat", "range", "os.exists", "os.exists", "os.join", "os.join", "numpy.where", "numpy.where", "anns.append", "os.join", "os.join", "cv2.imread", "keypoints.reshape().tolist", "keypoints.reshape"], "methods", ["None"], ["", "def", "_load_anns", "(", "self", ",", "image_id", ")", ":", "\n", "        ", "anns", "=", "[", "]", "\n", "\n", "human_num", "=", "1", "\n", "while", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "parsing_folder", ",", "'%s_%02d_01.png'", "%", "(", "image_id", ",", "human_num", ")", ")", ")", ":", "\n", "            ", "human_num", "+=", "1", "\n", "\n", "", "pose_file", "=", "osp", ".", "join", "(", "self", ".", "pose_folder", ",", "image_id", "+", "'.mat'", ")", "\n", "pose_annotations", "=", "scipy", ".", "io", ".", "loadmat", "(", "pose_file", ")", "\n", "\n", "for", "human_id", "in", "range", "(", "1", ",", "human_num", "+", "1", ")", ":", "\n", "            ", "ann", "=", "{", "}", "\n", "\n", "# load parsing annotation", "\n", "name", "=", "'%s_%02d_%02d.png'", "%", "(", "image_id", ",", "human_num", ",", "human_id", ")", "\n", "parsing_file", "=", "osp", ".", "join", "(", "self", ".", "parsing_folder", ",", "name", ")", "\n", "parsing_annotation", "=", "cv2", ".", "imread", "(", "parsing_file", ")", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "ann", "[", "'parsing'", "]", "=", "parsing_annotation", "\n", "ann", "[", "'segment_mask'", "]", "=", "np", ".", "where", "(", "parsing_annotation", ">", "0", ",", "1", ",", "0", ")", "\n", "ann", "[", "'segment_mask_original'", "]", "=", "np", ".", "where", "(", "parsing_annotation", ">", "0", ",", "1", ",", "0", ")", "\n", "\n", "# load keypoint annotation", "\n", "if", "'person_{}'", ".", "format", "(", "human_id", "-", "1", ")", "in", "pose_annotations", ":", "\n", "                ", "pose_annotation", "=", "pose_annotations", "[", "'person_{}'", ".", "format", "(", "human_id", "-", "1", ")", "]", "\n", "keypoints", "=", "pose_annotation", "[", ":", "16", ",", ":", "]", "\n", "\n", "# In MHP: 0: visible, 1: occlusion (I guess), 2: unvisible", "\n", "keypoints", "[", ":", ",", "-", "1", "]", "=", "2", "-", "keypoints", "[", ":", ",", "-", "1", "]", "# fit with coco keypoint visibility", "\n", "\n", "face_bbox", "=", "pose_annotation", "[", "16", ":", "18", ",", ":", "]", "# unused", "\n", "inst_bbox", "=", "pose_annotation", "[", "18", ":", "20", ",", ":", "]", "\n", "inst_bbox", "=", "[", "inst_bbox", "[", "0", ",", "0", "]", ",", "inst_bbox", "[", "0", ",", "1", "]", ",", "\n", "inst_bbox", "[", "1", ",", "0", "]", "-", "inst_bbox", "[", "0", ",", "0", "]", "+", "1", ",", "inst_bbox", "[", "1", ",", "1", "]", "-", "inst_bbox", "[", "0", ",", "1", "]", "+", "1", "]", "\n", "\n", "ann", "[", "'bbox'", "]", "=", "inst_bbox", "\n", "ann", "[", "'keypoints'", "]", "=", "keypoints", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "ann", "[", "'iscrowd'", "]", "=", "False", "\n", "", "else", ":", "\n", "               ", "continue", "\n", "\n", "", "anns", ".", "append", "(", "ann", ")", "\n", "\n", "", "return", "anns", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.image_list.ImageList.__init__": [[9, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_paths", ",", "preprocess", "=", "None", ")", ":", "\n", "        ", "self", ".", "image_paths", "=", "image_paths", "\n", "self", ".", "preprocess", "=", "preprocess", "or", "transforms", ".", "EVAL_TRANSFORM", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.image_list.ImageList.__getitem__": [[13, 26], ["image_list.ImageList.preprocess", "meta.update", "open", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_path", "=", "self", ".", "image_paths", "[", "index", "]", "\n", "with", "open", "(", "image_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "image", "=", "PIL", ".", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "anns", "=", "[", "]", "\n", "image", ",", "anns", ",", "meta", "=", "self", ".", "preprocess", "(", "image", ",", "anns", ",", "None", ")", "\n", "meta", ".", "update", "(", "{", "\n", "'dataset_index'", ":", "index", ",", "\n", "'file_name'", ":", "image_path", ",", "\n", "}", ")", "\n", "\n", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.image_list.ImageList.__len__": [[27, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.image_list.PilImageList.__init__": [[32, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "preprocess", "=", "None", ")", ":", "\n", "        ", "self", ".", "images", "=", "images", "\n", "self", ".", "preprocess", "=", "preprocess", "or", "transforms", ".", "EVAL_TRANSFORM", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.image_list.PilImageList.__getitem__": [[36, 47], ["image_list.PilImageList.images[].copy().convert", "image_list.PilImageList.preprocess", "meta.update", "image_list.PilImageList.images[].copy"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "self", ".", "images", "[", "index", "]", ".", "copy", "(", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "anns", "=", "[", "]", "\n", "image", ",", "anns", ",", "meta", "=", "self", ".", "preprocess", "(", "image", ",", "anns", ",", "None", ")", "\n", "meta", ".", "update", "(", "{", "\n", "'dataset_index'", ":", "index", ",", "\n", "'file_name'", ":", "'pilimage{}'", ".", "format", "(", "index", ")", ",", "\n", "}", ")", "\n", "\n", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.image_list.PilImageList.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp_bak.CIHP.__init__": [[44, 55], ["cihp_bak.make_dataset", "print", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "crop_size", "=", "473", ",", "training", "=", "True", ")", ":", "\n", "        ", "imgs", ",", "segs", ",", "segs_rev", "=", "make_dataset", "(", "root", ",", "list_path", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "segs", "=", "segs", "\n", "self", ".", "segs_rev", "=", "segs_rev", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "training", "=", "training", "\n", "\n", "print", "(", "'images: '", ",", "len", "(", "self", ".", "imgs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp_bak.CIHP.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp_bak.CIHP.__getitem__": [[59, 113], ["numpy.array", "cv2.imread", "cv2.imread", "cv2.imread", "img.transpose.transpose.copy", "cv2.resize.copy", "random.uniform", "cv2.resize", "cv2.resize", "max", "max", "random.randint", "random.randint", "numpy.asarray", "numpy.asarray", "img.transpose.transpose.transpose", "max", "cv2.resize", "cv2.resize", "cihp_bak.scale_crop", "img.transpose.transpose.transpose", "cihp_bak.CIHP.imgs[].split", "numpy.array().astype", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "numpy.array().astype", "numpy.random.choice", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.uniform", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.scale_crop"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "mean", "=", "np", ".", "array", "(", "(", "104.00698793", ",", "116.66876762", ",", "122.67891434", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "name", "=", "self", ".", "imgs", "[", "index", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "self", ".", "imgs", "[", "index", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "seg_in", "=", "cv2", ".", "imread", "(", "self", ".", "segs", "[", "index", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "seg_rev_in", "=", "cv2", ".", "imread", "(", "self", ".", "segs_rev", "[", "index", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# random mirror", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "img", "=", "img", "[", ":", ",", ":", ":", "flip", ",", ":", "]", "\n", "if", "flip", "==", "-", "1", ":", "\n", "                ", "seg", "=", "seg_rev_in", "\n", "", "else", ":", "\n", "                ", "seg", "=", "seg_in", "\n", "# random scale", "\n", "", "ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "1.5", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "ratio", ",", "fy", "=", "ratio", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "seg", "=", "cv2", ".", "resize", "(", "seg", ",", "None", ",", "fx", "=", "ratio", ",", "fy", "=", "ratio", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "-", "mean", "\n", "\n", "# pad & crop", "\n", "img_h", ",", "img_w", "=", "seg", ".", "shape", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_size", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_size", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "                ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "0", ",", "pad_h", ",", "0", ",", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "seg_pad", "=", "cv2", ".", "copyMakeBorder", "(", "seg", ",", "0", ",", "pad_h", ",", "0", ",", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "255", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "img_pad", ",", "seg_pad", "=", "img", ",", "seg", "\n", "\n", "", "img_h", ",", "img_w", "=", "seg_pad", ".", "shape", "\n", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "self", ".", "crop_size", ")", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "self", ".", "crop_size", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_size", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_size", "]", ",", "np", ".", "float32", ")", "\n", "seg", "=", "np", ".", "asarray", "(", "seg_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_size", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_size", "]", ",", "np", ".", "float32", ")", "\n", "img", "=", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "h", ",", "w", "=", "seg_in", ".", "shape", "\n", "max_size", "=", "max", "(", "w", ",", "h", ")", "\n", "ratio", "=", "self", ".", "crop_size", "/", "max_size", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "ratio", ",", "fy", "=", "ratio", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "seg", "=", "cv2", ".", "resize", "(", "seg_in", ",", "None", ",", "fx", "=", "ratio", ",", "fy", "=", "ratio", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "-", "mean", "\n", "img", ",", "seg", "=", "scale_crop", "(", "img", ",", "seg", ",", "crop_size", "=", "self", ".", "crop_size", ")", "\n", "img", "=", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "", "images", "=", "img", ".", "copy", "(", ")", "\n", "segmentations", "=", "seg", ".", "copy", "(", ")", "\n", "\n", "return", "images", ",", "segmentations", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp_bak.ValidationLoader.__init__": [[118, 132], ["open", "open.readlines", "os.path.join", "os.path.join", "imgs.append", "segs.append", "line.strip().split", "line.strip", "str", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "crop_size", ")", ":", "\n", "        ", "fid", "=", "open", "(", "list_path", ",", "'r'", ")", "\n", "imgs", ",", "segs", "=", "[", "]", ",", "[", "]", "\n", "for", "line", "in", "fid", ".", "readlines", "(", ")", ":", "\n", "            ", "idx", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'JPEGImages/'", "+", "str", "(", "idx", ")", "+", "'.jpg'", ")", "\n", "seg_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Segmentations/'", "+", "str", "(", "idx", ")", "+", "'.png'", ")", "\n", "imgs", ".", "append", "(", "image_path", ")", "\n", "segs", ".", "append", "(", "seg_path", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "segs", "=", "segs", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp_bak.ValidationLoader.__getitem__": [[133, 152], ["numpy.array", "cv2.imread", "cv2.imread", "max", "cv2.resize", "img.transpose.transpose.transpose", "img.transpose.transpose.copy", "cv2.imread.copy", "numpy.array().astype", "numpy.array", "cihp_bak.ValidationLoader.imgs[].split", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load data", "\n", "        ", "mean", "=", "np", ".", "array", "(", "(", "104.00698793", ",", "116.66876762", ",", "122.67891434", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "name", "=", "self", ".", "imgs", "[", "index", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "self", ".", "imgs", "[", "index", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "seg", "=", "cv2", ".", "imread", "(", "self", ".", "segs", "[", "index", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "ori_size", "=", "img", ".", "shape", "\n", "\n", "h", ",", "w", "=", "seg", ".", "shape", "\n", "max_size", "=", "max", "(", "w", ",", "h", ")", "\n", "ratio", "=", "self", ".", "crop_size", "/", "max_size", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "ratio", ",", "fy", "=", "ratio", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "-", "mean", "\n", "img", "=", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "images", "=", "img", ".", "copy", "(", ")", "\n", "segmentations", "=", "seg", ".", "copy", "(", ")", "\n", "\n", "return", "images", ",", "segmentations", ",", "np", ".", "array", "(", "ori_size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp_bak.ValidationLoader.__len__": [[153, 155], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp_bak.make_dataset": [[8, 21], ["open", "open.readlines", "os.path.join", "os.path.join", "os.path.join", "imgs.append", "segs.append", "segs_rev.append", "line.strip().split", "line.strip", "str", "str", "str"], "function", ["None"], ["def", "make_dataset", "(", "root", ",", "lst", ")", ":", "\n", "# append all index", "\n", "    ", "fid", "=", "open", "(", "lst", ",", "'r'", ")", "\n", "imgs", ",", "segs", ",", "segs_rev", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "line", "in", "fid", ".", "readlines", "(", ")", ":", "\n", "        ", "idx", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'JPEGImages/'", "+", "str", "(", "idx", ")", "+", "'.jpg'", ")", "\n", "seg_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Segmentations/'", "+", "str", "(", "idx", ")", "+", "'.png'", ")", "\n", "seg_rev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Segmentations_rev/'", "+", "str", "(", "idx", ")", "+", "'.png'", ")", "\n", "imgs", ".", "append", "(", "image_path", ")", "\n", "segs", ".", "append", "(", "seg_path", ")", "\n", "segs_rev", ".", "append", "(", "seg_rev_path", ")", "\n", "", "return", "imgs", ",", "segs", ",", "segs_rev", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp_bak.scale_crop": [[24, 40], ["max", "max", "numpy.asarray", "numpy.asarray", "cv2.copyMakeBorder", "cv2.copyMakeBorder"], "function", ["None"], ["", "def", "scale_crop", "(", "img", ",", "seg", ",", "crop_size", ")", ":", "\n", "    ", "oh", ",", "ow", "=", "seg", ".", "shape", "\n", "pad_h", "=", "max", "(", "0", ",", "crop_size", "-", "oh", ")", "\n", "pad_w", "=", "max", "(", "0", ",", "crop_size", "-", "ow", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "        ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "0", ",", "pad_h", ",", "0", ",", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "seg_pad", "=", "cv2", ".", "copyMakeBorder", "(", "seg", ",", "0", ",", "pad_h", ",", "0", ",", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "255", ")", "\n", "", "else", ":", "\n", "        ", "img_pad", ",", "seg_pad", "=", "img", ",", "seg", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "img_pad", "[", "0", ":", "crop_size", ",", "0", ":", "crop_size", "]", ",", "np", ".", "float32", ")", "\n", "seg", "=", "np", ".", "asarray", "(", "seg_pad", "[", "0", ":", "crop_size", ",", "0", ":", "crop_size", "]", ",", "np", ".", "float32", ")", "\n", "\n", "return", "img", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.CIHP.__init__": [[46, 60], ["cihp.make_dataset", "print", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "crop_size", "=", "473", ",", "training", "=", "True", ",", "\n", "preprocess", "=", "None", ",", "target_transforms", "=", "None", ")", ":", "\n", "        ", "imgs", ",", "segs", ",", "segs_rev", "=", "make_dataset", "(", "root", ",", "list_path", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "segs", "=", "segs", "\n", "self", ".", "segs_rev", "=", "segs_rev", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "preprocess", "=", "preprocess", "or", "transforms", ".", "EVAL_TRANSFORM", "\n", "self", ".", "target_transforms", "=", "target_transforms", "\n", "print", "(", "'images: '", ",", "len", "(", "self", ".", "imgs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.CIHP.__len__": [[61, 63], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.CIHP.__getitem__": [[64, 95], ["PIL.Image.open().convert", "cv2.imread", "cihp.CIHP.preprocess", "cihp.CIHP.imgs[].split", "PIL.Image.open", "t"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "name", "=", "self", ".", "imgs", "[", "index", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "#img = cv2.imread(self.imgs[index], cv2.IMREAD_COLOR)", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "imgs", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "seg", "=", "cv2", ".", "imread", "(", "self", ".", "segs", "[", "index", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "\n", "anns", "=", "[", "{", "\n", "'parsing'", ":", "seg", "\n", "}", "]", "\n", "\n", "meta", "=", "{", "\n", "'dataset_index'", ":", "index", ",", "\n", "'image_id'", ":", "index", ",", "\n", "'file_name'", ":", "name", ",", "\n", "}", "\n", "\n", "# preprocess image and annotations", "\n", "img", ",", "anns", ",", "meta", "=", "self", ".", "preprocess", "(", "img", ",", "anns", ",", "meta", ")", "\n", "\n", "# transform targets", "\n", "if", "self", ".", "target_transforms", "is", "not", "None", ":", "\n", "            ", "anns", "=", "[", "t", "(", "img", ",", "anns", ",", "meta", ")", "for", "t", "in", "self", ".", "target_transforms", "]", "\n", "\n", "#assert img is not None, 'img is not none'", "\n", "#assert meta is not None, 'meta is not none'", "\n", "\n", "#for ann in anns:", "\n", "#    for key, value in ann.items():", "\n", "#        assert value is not None, '{} is not None'.format(key)", "\n", "\n", "", "return", "img", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.ValidationLoader.__init__": [[100, 115], ["open", "open.readlines", "os.path.join", "os.path.join", "imgs.append", "segs.append", "line.strip().split", "line.strip", "str", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "crop_size", ",", "test_transforms", "=", "None", ")", ":", "\n", "        ", "fid", "=", "open", "(", "list_path", ",", "'r'", ")", "\n", "imgs", ",", "segs", "=", "[", "]", ",", "[", "]", "\n", "for", "line", "in", "fid", ".", "readlines", "(", ")", ":", "\n", "            ", "idx", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'JPEGImages/'", "+", "str", "(", "idx", ")", "+", "'.jpg'", ")", "\n", "seg_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Segmentations/'", "+", "str", "(", "idx", ")", "+", "'.png'", ")", "\n", "imgs", ".", "append", "(", "image_path", ")", "\n", "segs", ".", "append", "(", "seg_path", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "segs", "=", "segs", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "test_transforms", "=", "test_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.ValidationLoader.__getitem__": [[116, 139], ["cv2.imread", "cv2.imread", "max", "cv2.resize", "PIL.Image.fromarray", "cihp.ValidationLoader.test_transforms", "cv2.imread.copy", "numpy.array", "cihp.ValidationLoader.imgs[].split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load data", "\n", "#mean = np.array((104.00698793, 116.66876762, 122.67891434), dtype=np.float32)", "\n", "        ", "name", "=", "self", ".", "imgs", "[", "index", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "self", ".", "imgs", "[", "index", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "seg", "=", "cv2", ".", "imread", "(", "self", ".", "segs", "[", "index", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "ori_size", "=", "img", ".", "shape", "\n", "\n", "h", ",", "w", "=", "seg", ".", "shape", "\n", "max_size", "=", "max", "(", "w", ",", "h", ")", "\n", "ratio", "=", "self", ".", "crop_size", "/", "max_size", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "ratio", ",", "fy", "=", "ratio", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "#img = np.array(img).astype(np.float32) - mean", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "img", "=", "self", ".", "test_transforms", "(", "img", ")", "\n", "\n", "#img = img.transpose((2, 0, 1))", "\n", "\n", "#images = img.copy()", "\n", "segmentations", "=", "seg", ".", "copy", "(", ")", "\n", "\n", "return", "img", ",", "segmentations", ",", "np", ".", "array", "(", "ori_size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.ValidationLoader.__len__": [[140, 142], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.make_dataset": [[10, 23], ["open", "open.readlines", "os.path.join", "os.path.join", "os.path.join", "imgs.append", "segs.append", "segs_rev.append", "line.strip().split", "line.strip", "str", "str", "str"], "function", ["None"], ["def", "make_dataset", "(", "root", ",", "lst", ")", ":", "\n", "# append all index", "\n", "    ", "fid", "=", "open", "(", "lst", ",", "'r'", ")", "\n", "imgs", ",", "segs", ",", "segs_rev", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "line", "in", "fid", ".", "readlines", "(", ")", ":", "\n", "        ", "idx", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'JPEGImages/'", "+", "str", "(", "idx", ")", "+", "'.jpg'", ")", "\n", "seg_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Segmentations/'", "+", "str", "(", "idx", ")", "+", "'.png'", ")", "\n", "seg_rev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Segmentations_rev/'", "+", "str", "(", "idx", ")", "+", "'.png'", ")", "\n", "imgs", ".", "append", "(", "image_path", ")", "\n", "segs", ".", "append", "(", "seg_path", ")", "\n", "segs_rev", ".", "append", "(", "seg_rev_path", ")", "\n", "", "return", "imgs", ",", "segs", ",", "segs_rev", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.cihp.scale_crop": [[26, 42], ["max", "max", "numpy.asarray", "numpy.asarray", "cv2.copyMakeBorder", "cv2.copyMakeBorder"], "function", ["None"], ["", "def", "scale_crop", "(", "img", ",", "seg", ",", "crop_size", ")", ":", "\n", "    ", "oh", ",", "ow", "=", "seg", ".", "shape", "\n", "pad_h", "=", "max", "(", "0", ",", "crop_size", "-", "oh", ")", "\n", "pad_w", "=", "max", "(", "0", ",", "crop_size", "-", "ow", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "        ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "0", ",", "pad_h", ",", "0", ",", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "seg_pad", "=", "cv2", ".", "copyMakeBorder", "(", "seg", ",", "0", ",", "pad_h", ",", "0", ",", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "255", ")", "\n", "", "else", ":", "\n", "        ", "img_pad", ",", "seg_pad", "=", "img", ",", "seg", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "img_pad", "[", "0", ":", "crop_size", ",", "0", ":", "crop_size", "]", ",", "np", ".", "float32", ")", "\n", "seg", "=", "np", ".", "asarray", "(", "seg_pad", "[", "0", ":", "crop_size", ",", "0", ":", "crop_size", "]", ",", "np", ".", "float32", ")", "\n", "\n", "return", "img", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory": [[12, 16], ["headmeta_mhp.factory_single"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory_single"], ["def", "factory", "(", "head_names", ")", ":", "\n", "    ", "if", "head_names", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "return", "[", "factory_single", "(", "hn", ")", "for", "hn", "in", "head_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.headmeta_mhp.factory_single": [[18, 55], ["network.heads.IntensityMeta", "network.heads.AssociationMeta", "network.heads.ParsingMeta", "network.heads.OffsetMeta", "network.heads.AssociationMeta", "network.heads.CascadeMeta", "network.heads.CenterMeta"], "function", ["None"], ["", "def", "factory_single", "(", "head_name", ")", ":", "\n", "    ", "if", "'pif'", "in", "head_name", "or", "'cif'", "in", "head_name", ":", "\n", "        ", "return", "IntensityMeta", "(", "head_name", ",", "\n", "MHP_KEYPOINTS", ",", "\n", "MHP_PERSON_SIGMAS", ",", "\n", "MHP_UPRIGHT_POSE", ",", "\n", "MHP_PERSON_SKELETON", ")", "\n", "", "if", "'caf16'", "in", "head_name", ":", "\n", "        ", "return", "AssociationMeta", "(", "head_name", ",", "\n", "MHP_KEYPOINTS", ",", "\n", "MHP_PERSON_SIGMAS", ",", "\n", "MHP_UPRIGHT_POSE", ",", "\n", "MHP_PERSON_SKELETON", ")", "\n", "\n", "", "if", "head_name", "==", "'pdf'", ":", "\n", "        ", "return", "ParsingMeta", "(", "head_name", ")", "\n", "", "if", "head_name", "==", "'offset'", ":", "\n", "        ", "return", "OffsetMeta", "(", "head_name", ",", "\n", "MHP_KEYPOINTS", ",", "\n", "MHP_UPRIGHT_POSE", ")", "\n", "\n", "", "if", "head_name", "==", "'caf'", ":", "\n", "        ", "return", "AssociationMeta", "(", "head_name", ",", "\n", "MHP_KEYPOINTS", ",", "\n", "MHP_PERSON_SIGMAS", ",", "\n", "MHP_UPRIGHT_POSE", ",", "\n", "MHP_PERSON_SKELETON", ")", "\n", "\n", "", "if", "head_name", "==", "'cascade'", ":", "\n", "        ", "return", "CascadeMeta", "(", "head_name", ",", "\n", "MHP_KEYPOINTS", ",", "\n", "MHP_UPRIGHT_POSE", ")", "\n", "\n", "", "if", "head_name", "==", "'pcf'", ":", "\n", "        ", "return", "CenterMeta", "(", "head_name", ")", "\n", "\n", "", "raise", "NotImplementedError", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.__init__": [[24, 64], ["COCO", "densepose.DensePose.dp_coco.getImgIds", "COCO", "LOG.info", "densepose.DensePose.coco.getImgIds", "len", "densepose.DensePose.coco.getImgIds", "densepose.DensePose.filter_for_annotations", "densepose.DensePose.coco.getImgIds", "densepose.DensePose.filter_for_keypoint_annotations", "Exception"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.filter_for_annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.filter_for_keypoint_annotations"], ["def", "__init__", "(", "self", ",", "image_dir", ",", "ann_file", ",", "*", ",", "\n", "coco_ann_file", "=", "None", ",", "\n", "target_transforms", "=", "None", ",", "\n", "n_images", "=", "None", ",", "\n", "preprocess", "=", "None", ",", "\n", "category_ids", "=", "None", ",", "\n", "image_filter", "=", "'keypoint-annotations'", ")", ":", "\n", "        ", "if", "category_ids", "is", "None", ":", "\n", "            ", "category_ids", "=", "[", "1", "]", "\n", "", "self", ".", "category_ids", "=", "category_ids", "\n", "\n", "from", "pycocotools", ".", "coco", "import", "COCO", "# pylint: disable=import-outside-toplevel", "\n", "self", ".", "image_dir", "=", "image_dir", "\n", "\n", "self", ".", "dp_coco", "=", "COCO", "(", "ann_file", ")", "\n", "self", ".", "dp_ids", "=", "self", ".", "dp_coco", ".", "getImgIds", "(", "catIds", "=", "self", ".", "category_ids", ")", "\n", "\n", "# use all keypoints annotations in coco dataset", "\n", "self", ".", "coco", "=", "None", "\n", "self", ".", "ids", "=", "[", "]", "\n", "if", "coco_ann_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "coco", "=", "COCO", "(", "coco_ann_file", ")", "\n", "\n", "if", "image_filter", "==", "'all'", ":", "\n", "                ", "self", ".", "ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "", "elif", "image_filter", "==", "'annotated'", ":", "\n", "                ", "self", ".", "ids", "=", "self", ".", "coco", ".", "getImgIds", "(", "catIds", "=", "self", ".", "category_ids", ")", "\n", "self", ".", "filter_for_annotations", "(", ")", "\n", "", "elif", "image_filter", "==", "'keypoint-annotations'", ":", "\n", "                ", "self", ".", "ids", "=", "self", ".", "coco", ".", "getImgIds", "(", "catIds", "=", "self", ".", "category_ids", ")", "\n", "self", ".", "filter_for_keypoint_annotations", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'unknown value for image_filter: {}'", ".", "format", "(", "image_filter", ")", ")", "\n", "\n", "", "if", "n_images", ":", "\n", "                ", "self", ".", "ids", "=", "self", ".", "ids", "[", ":", "n_images", "]", "\n", "", "LOG", ".", "info", "(", "'Images: %d'", ",", "len", "(", "self", ".", "ids", ")", ")", "\n", "\n", "", "self", ".", "preprocess", "=", "preprocess", "or", "transforms", ".", "EVAL_TRANSFORM", "\n", "self", ".", "target_transforms", "=", "target_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.filter_for_keypoint_annotations": [[65, 81], ["LOG.info", "LOG.info", "densepose.DensePose.coco.getAnnIds", "densepose.DensePose.coco.loadAnns", "any", "densepose.DensePose.filter_for_keypoint_annotations.has_keypoint_annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "filter_for_keypoint_annotations", "(", "self", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'filter for keypoint annotations ...'", ")", "\n", "\n", "def", "has_keypoint_annotation", "(", "image_id", ")", ":", "\n", "            ", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "image_id", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "if", "'keypoints'", "not", "in", "ann", ":", "\n", "                    ", "continue", "\n", "", "if", "any", "(", "v", ">", "0.0", "for", "v", "in", "ann", "[", "'keypoints'", "]", "[", "2", ":", ":", "3", "]", ")", ":", "\n", "                    ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "", "self", ".", "ids", "=", "[", "image_id", "for", "image_id", "in", "self", ".", "ids", "\n", "if", "has_keypoint_annotation", "(", "image_id", ")", "]", "\n", "LOG", ".", "info", "(", "'... done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.filter_for_annotations": [[82, 98], ["LOG.info", "LOG.info", "densepose.DensePose.coco.getAnnIds", "densepose.DensePose.coco.loadAnns", "ann.get", "densepose.DensePose.filter_for_annotations.has_annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "filter_for_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"removes images that only contain crowd annotations\"\"\"", "\n", "LOG", ".", "info", "(", "'filter for annotations ...'", ")", "\n", "\n", "def", "has_annotation", "(", "image_id", ")", ":", "\n", "            ", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "image_id", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "if", "ann", ".", "get", "(", "'iscrowd'", ")", ":", "\n", "                    ", "continue", "\n", "", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "self", ".", "ids", "=", "[", "image_id", "for", "image_id", "in", "self", ".", "ids", "\n", "if", "has_annotation", "(", "image_id", ")", "]", "\n", "LOG", ".", "info", "(", "'... done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.class_aware_sample_weights": [[99, 137], ["densepose.DensePose.coco.getAnnIds", "densepose.DensePose.coco.loadAnns", "collections.defaultdict", "collections.defaultdict", "min", "LOG.debug", "LOG.debug", "image_categories[].add", "sum", "max", "min", "max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.resnext_features.resnext101_32x4d_features.add"], ["", "def", "class_aware_sample_weights", "(", "self", ",", "max_multiple", "=", "10.0", ")", ":", "\n", "        ", "\"\"\"Class aware sampling.\n\n        To be used with PyTorch's WeightedRandomSampler.\n\n        Reference: Solution for Large-Scale Hierarchical Object Detection\n        Datasets with Incomplete Annotation and Data Imbalance\n        Yuan Gao, Xingyuan Bu, Yang Hu, Hui Shen, Ti Bai, Xubin Li and Shilei Wen\n        \"\"\"", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "self", ".", "ids", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "\n", "category_image_counts", "=", "defaultdict", "(", "int", ")", "\n", "image_categories", "=", "defaultdict", "(", "set", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "ann", "[", "'iscrowd'", "]", ":", "\n", "                ", "continue", "\n", "", "image", "=", "ann", "[", "'image_id'", "]", "\n", "category", "=", "ann", "[", "'category_id'", "]", "\n", "if", "category", "in", "image_categories", "[", "image", "]", ":", "\n", "                ", "continue", "\n", "", "image_categories", "[", "image", "]", ".", "add", "(", "category", ")", "\n", "category_image_counts", "[", "category", "]", "+=", "1", "\n", "\n", "", "weights", "=", "[", "\n", "sum", "(", "\n", "1.0", "/", "category_image_counts", "[", "category_id", "]", "\n", "for", "category_id", "in", "image_categories", "[", "image_id", "]", "\n", ")", "\n", "for", "image_id", "in", "self", ".", "ids", "\n", "]", "\n", "min_w", "=", "min", "(", "weights", ")", "\n", "LOG", ".", "debug", "(", "'Class Aware Sampling: minW = %f, maxW = %f'", ",", "min_w", ",", "max", "(", "weights", ")", ")", "\n", "max_w", "=", "min_w", "*", "max_multiple", "\n", "weights", "=", "[", "min", "(", "w", ",", "max_w", ")", "for", "w", "in", "weights", "]", "\n", "LOG", ".", "debug", "(", "'Class Aware Sampling: minW = %f, maxW = %f'", ",", "min_w", ",", "max", "(", "weights", ")", ")", "\n", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.__getitem__": [[138, 200], ["LOG.debug", "densepose.DensePose.preprocess", "utils.mask_valid_area", "LOG.debug", "densepose.DensePose.dp_coco.getAnnIds", "densepose.DensePose.dp_coco.loadAnns", "copy.deepcopy", "densepose.DensePose.coco.getAnnIds", "densepose.DensePose.coco.loadAnns", "copy.deepcopy", "file_name.replace.replace.replace", "open", "PIL.Image.open().convert", "image_info[].rsplit", "flickr_file_name.split", "getattr", "STAT_LOG.debug", "densepose.DensePose.dp_coco.loadImgs", "densepose.DensePose.coco.loadImgs", "os.path.join", "numpy.any", "t", "ann.items", "PIL.Image.open", "int"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.utils.mask_valid_area", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "coco", "is", "not", "None", ":", "\n", "            ", "image_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "image_id", "=", "self", ".", "dp_ids", "[", "index", "]", "\n", "\n", "", "if", "image_id", "in", "self", ".", "dp_ids", ":", "\n", "            ", "ann_ids", "=", "self", ".", "dp_coco", ".", "getAnnIds", "(", "imgIds", "=", "image_id", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "anns", "=", "self", ".", "dp_coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "image_info", "=", "self", ".", "dp_coco", ".", "loadImgs", "(", "image_id", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "image_id", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "anns", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "image_info", "=", "self", ".", "coco", ".", "loadImgs", "(", "image_id", ")", "[", "0", "]", "\n", "\n", "", "LOG", ".", "debug", "(", "image_info", ")", "\n", "file_name", "=", "image_info", "[", "'file_name'", "]", "\n", "if", "'COCO_train2014_'", "in", "file_name", ":", "\n", "            ", "file_name", "=", "file_name", ".", "replace", "(", "'COCO_train2014_'", ",", "''", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "file_name", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "meta", "=", "{", "\n", "'dataset_index'", ":", "index", ",", "\n", "'image_id'", ":", "image_id", ",", "\n", "'file_name'", ":", "file_name", ",", "\n", "}", "\n", "\n", "if", "'flickr_url'", "in", "image_info", ":", "\n", "            ", "_", ",", "flickr_file_name", "=", "image_info", "[", "'flickr_url'", "]", ".", "rsplit", "(", "'/'", ",", "maxsplit", "=", "1", ")", "\n", "flickr_id", ",", "_", "=", "flickr_file_name", ".", "split", "(", "'_'", ",", "maxsplit", "=", "1", ")", "\n", "meta", "[", "'flickr_full_page'", "]", "=", "'http://flickr.com/photo.gne?id={}'", ".", "format", "(", "flickr_id", ")", "\n", "\n", "# preprocess image and annotations", "\n", "", "image", ",", "anns", ",", "meta", "=", "self", ".", "preprocess", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n", "# mask valid TODO still necessary?", "\n", "valid_area", "=", "meta", "[", "'valid_area'", "]", "\n", "utils", ".", "mask_valid_area", "(", "image", ",", "valid_area", ")", "\n", "\n", "LOG", ".", "debug", "(", "meta", ")", "\n", "\n", "# log stats", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "getattr", "(", "ann", ",", "'iscrowd'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "if", "not", "np", ".", "any", "(", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0.0", ")", ":", "\n", "                ", "continue", "\n", "", "STAT_LOG", ".", "debug", "(", "{", "'bbox'", ":", "[", "int", "(", "v", ")", "for", "v", "in", "ann", "[", "'bbox'", "]", "]", "}", ")", "\n", "\n", "# transform targets", "\n", "", "if", "self", ".", "target_transforms", "is", "not", "None", ":", "\n", "            ", "anns", "=", "[", "t", "(", "image", ",", "anns", ",", "meta", ")", "for", "t", "in", "self", ".", "target_transforms", "]", "\n", "anns_d", "=", "{", "}", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "for", "k", ",", "v", "in", "ann", ".", "items", "(", ")", ":", "\n", "                    ", "anns_d", "[", "k", "]", "=", "v", "\n", "", "", "anns", "=", "anns_d", "\n", "\n", "", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.__len__": [[201, 205], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "coco", "is", "not", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "ids", ")", "\n", "", "return", "len", "(", "self", ".", "dp_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.create_label_colormap": [[206, 238], ["numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "@", "staticmethod", "\n", "def", "create_label_colormap", "(", ")", ":", "\n", "        ", "\"\"\"\n        Creates a label colormap used in CITYSCAPES segmentation benchmark.\n        Returns:\n            A colormap for visualizing segmentation results.\n        \"\"\"", "\n", "\n", "colormap", "=", "np", ".", "zeros", "(", "(", "256", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "colormap", "[", "0", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "colormap", "[", "1", "]", "=", "[", "128", ",", "0", ",", "0", "]", "\n", "colormap", "[", "2", "]", "=", "[", "255", ",", "0", ",", "0", "]", "\n", "colormap", "[", "3", "]", "=", "[", "0", ",", "85", ",", "0", "]", "\n", "colormap", "[", "4", "]", "=", "[", "170", ",", "0", ",", "51", "]", "\n", "colormap", "[", "5", "]", "=", "[", "255", ",", "85", ",", "0", "]", "\n", "colormap", "[", "6", "]", "=", "[", "0", ",", "0", ",", "85", "]", "\n", "colormap", "[", "7", "]", "=", "[", "0", ",", "119", ",", "221", "]", "\n", "colormap", "[", "8", "]", "=", "[", "85", ",", "85", ",", "0", "]", "\n", "colormap", "[", "9", "]", "=", "[", "0", ",", "85", ",", "85", "]", "\n", "colormap", "[", "10", "]", "=", "[", "85", ",", "51", ",", "0", "]", "\n", "colormap", "[", "11", "]", "=", "[", "52", ",", "86", ",", "128", "]", "\n", "colormap", "[", "12", "]", "=", "[", "0", ",", "128", ",", "0", "]", "\n", "colormap", "[", "13", "]", "=", "[", "0", ",", "0", ",", "255", "]", "\n", "colormap", "[", "14", "]", "=", "[", "51", ",", "170", ",", "221", "]", "\n", "colormap", "[", "15", "]", "=", "[", "0", ",", "255", ",", "255", "]", "\n", "colormap", "[", "16", "]", "=", "[", "85", ",", "255", ",", "170", "]", "\n", "colormap", "[", "17", "]", "=", "[", "170", ",", "255", ",", "85", "]", "\n", "colormap", "[", "18", "]", "=", "[", "255", ",", "255", ",", "0", "]", "\n", "colormap", "[", "19", "]", "=", "[", "255", ",", "170", ",", "0", "]", "\n", "\n", "return", "colormap", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cli": [[43, 78], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["\n", "", "def", "factory_head", "(", "head_net", ":", "network", ".", "heads", ".", "CompositeField", ",", "basenet_stride", ")", ":", "\n", "    ", "meta", "=", "head_net", ".", "meta", "\n", "stride", "=", "head_net", ".", "stride", "(", "basenet_stride", ")", "\n", "\n", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "DetectionMeta", ")", ":", "\n", "        ", "n_categories", "=", "len", "(", "meta", ".", "categories", ")", "\n", "LOG", ".", "info", "(", "'selected encoder CIFDET for %s with %d categories'", ",", "meta", ".", "name", ",", "n_categories", ")", "\n", "vis", "=", "visualizer", ".", "CifDet", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "categories", "=", "meta", ".", "categories", ")", "\n", "return", "CifDet", "(", "n_categories", ",", "\n", "AnnRescalerDet", "(", "stride", ",", "n_categories", ")", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "IntensityMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder CIF for %s'", ",", "meta", ".", "name", ")", "\n", "vis", "=", "visualizer", ".", "Cif", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "keypoints", "=", "meta", ".", "keypoints", ",", "skeleton", "=", "meta", ".", "draw_skeleton", ")", "\n", "return", "Cif", "(", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ",", "\n", "sigmas", "=", "meta", ".", "sigmas", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "AssociationMeta", ")", ":", "\n", "        ", "n_keypoints", "=", "len", "(", "meta", ".", "keypoints", ")", "\n", "LOG", ".", "info", "(", "'selected encoder CAF for %s'", ",", "meta", ".", "name", ")", "\n", "vis", "=", "visualizer", ".", "Caf", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "keypoints", "=", "meta", ".", "keypoints", ",", "skeleton", "=", "meta", ".", "skeleton", ")", "\n", "return", "Caf", "(", "AnnRescaler", "(", "stride", ",", "n_keypoints", ",", "meta", ".", "pose", ")", ",", "\n", "headname", "=", "meta", ".", "name", ",", "\n", "skeleton", "=", "meta", ".", "skeleton", ",", "\n", "sigmas", "=", "meta", ".", "sigmas", ",", "\n", "sparse_skeleton", "=", "meta", ".", "sparse_skeleton", ",", "\n", "only_in_field_of_view", "=", "meta", ".", "only_in_field_of_view", ",", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_configure": [[80, 82], ["None"], "function", ["None"], ["\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "ParsingMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder PDF for %s'", ",", "meta", ".", "name", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cocokp_preprocess_factory": [[84, 122], ["transforms.Compose", "transforms.Compose", "transforms.RescaleRelative", "transforms.RescaleRelative", "transforms.RandomApply", "transforms.RotateBy90", "transforms.NormalizeAnnotations", "transforms.AnnotationJitter", "transforms.RandomApply", "transforms.Crop", "transforms.CenterPad", "transforms.NormalizeAnnotations", "transforms.RescaleAbsolute", "transforms.CenterPad", "transforms.HFlip"], "function", ["None"], ["\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "OffsetMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder Offset for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Offset", "(", "\n", "rescaler", "=", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ",", "\n", "n_fields", "=", "meta", ".", "n_fields", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "CascadeMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder cascade for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Cascade", "(", "rescaler", "=", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "CenterMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder center for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Pcf", "(", ")", "\n", "\n", "", "raise", "Exception", "(", "'unknown head to create an encoder: {}'", ".", "format", "(", "meta", ".", "name", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cocodet_preprocess_factory": [[125, 166], ["transforms.Compose", "transforms.Compose", "transforms.RescaleRelative", "transforms.RescaleRelative", "transforms.RandomApply", "transforms.RotateBy90", "transforms.NormalizeAnnotations", "transforms.AnnotationJitter", "transforms.RandomApply", "transforms.Crop", "transforms.CenterPad", "transforms.MinSize", "transforms.UnclippedArea", "transforms.UnclippedSides", "transforms.NormalizeAnnotations", "transforms.RescaleAbsolute", "transforms.CenterPad", "transforms.HFlip"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_parsing_preprocess_factory": [[169, 190], ["transforms.Compose", "transforms.Compose", "transforms.NormalizeAnnotations", "transforms.Crop", "transforms.CenterPad", "transforms.NormalizeAnnotations", "transforms.RescaleAbsolute", "transforms.CenterPad"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_densepose_preprocess_factory": [[193, 235], ["transforms.Compose", "transforms.Compose", "transforms.RescaleRelative", "transforms.RescaleRelative", "transforms.RandomApply", "transforms.RotateBy90", "transforms.NormalizeAnnotations", "transforms.AnnotationJitter", "transforms.RandomApply", "transforms.Crop", "transforms.CenterPad", "transforms.MinSize", "transforms.UnclippedArea", "transforms.UnclippedSides", "transforms.NormalizeAnnotations", "transforms.RescaleAbsolute", "transforms.CenterPad", "transforms.HFlip"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_mhp_preprocess_factory": [[238, 275], ["transforms.Compose", "transforms.Compose", "transforms.RescaleRelative", "transforms.RescaleRelative", "transforms.NormalizeAnnotations", "transforms.AnnotationJitter", "transforms.RandomApply", "transforms.Crop", "transforms.CenterPad", "transforms.MinSize", "transforms.UnclippedArea", "transforms.UnclippedSides", "transforms.NormalizeAnnotations", "transforms.RescaleAbsolute", "transforms.CenterPad", "transforms.HFlip"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cocokp_factory": [[278, 324], ["factory.train_cocokp_preprocess_factory", "coco.Coco", "torch.utils.data.DataLoader", "coco.Coco", "torch.utils.data.DataLoader", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "range", "range"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cocokp_preprocess_factory"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cocodet_factory": [[326, 376], ["factory.train_cocodet_preprocess_factory", "coco.Coco", "torch.utils.data.DataLoader", "coco.Coco", "torch.utils.data.DataLoader", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.WeightedRandomSampler", "torch.utils.data.WeightedRandomSampler", "torch.utils.data.ConcatDataset.class_aware_sample_weights", "len", "torch.utils.data.ConcatDataset.class_aware_sample_weights", "len", "range", "range"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cocodet_preprocess_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.class_aware_sample_weights", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.densepose.DensePose.class_aware_sample_weights"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cihp_factory": [[378, 412], ["factory.train_parsing_preprocess_factory", "os.path.join", "os.path.join", "cihp.CIHP", "cihp.CIHP", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_parsing_preprocess_factory"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cihp_factory_bak": [[414, 435], ["os.path.join", "os.path.join", "cihp.CIHP", "cihp.CIHP", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_densepose_factory": [[437, 484], ["factory.train_densepose_preprocess_factory", "densepose.DensePose", "torch.utils.data.DataLoader", "densepose.DensePose", "torch.utils.data.DataLoader", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "range", "range"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_densepose_preprocess_factory"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_mhp_factory": [[486, 526], ["factory.train_mhp_preprocess_factory", "mhp.MHP", "torch.utils.data.DataLoader", "mhp.MHP", "torch.utils.data.DataLoader", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "range", "range"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_mhp_preprocess_factory"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_factory": [[528, 541], ["Exception", "factory.train_cocokp_factory", "factory.train_cocodet_factory", "factory.train_cihp_factory", "factory.train_densepose_factory", "factory.train_mhp_factory"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cocokp_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cocodet_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_cihp_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_densepose_factory", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.datasets.factory.train_mhp_factory"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.__init__": [[21, 48], ["LOG.info", "LOG.error"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.error"], ["def", "__init__", "(", "self", ",", "*", ",", "\n", "fig_width", "=", "8.0", ",", "\n", "fig_init_args", "=", "None", ",", "\n", "show", "=", "False", ",", "\n", "video_output", "=", "None", ",", "\n", "second_visual", "=", "False", ")", ":", "\n", "        ", "self", ".", "fig_width", "=", "fig_width", "\n", "self", ".", "fig_init_args", "=", "fig_init_args", "or", "{", "}", "\n", "self", ".", "show", "=", "show", "\n", "self", ".", "video_output", "=", "video_output", "\n", "self", ".", "video_writer", "=", "None", "\n", "if", "self", ".", "video_output", ":", "\n", "            ", "self", ".", "video_writer", "=", "matplotlib", ".", "animation", ".", "writers", "[", "'ffmpeg'", "]", "(", "fps", "=", "self", ".", "video_fps", ")", "\n", "\n", "", "self", ".", "second_visual", "=", "second_visual", "\n", "if", "self", ".", "second_visual", ":", "\n", "            ", "self", ".", "fig_width", "*=", "2", "\n", "\n", "", "if", "plt", "is", "None", ":", "\n", "            ", "LOG", ".", "error", "(", "'matplotlib is not installed'", ")", "\n", "\n", "", "self", ".", "fig", "=", "None", "\n", "self", ".", "ax", "=", "None", "\n", "self", ".", "ax_second", "=", "None", "\n", "self", ".", "_skip_frame", "=", "False", "\n", "\n", "LOG", ".", "info", "(", "'video output = %s'", ",", "video_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.clean_axis": [[49, 57], ["ax.get_xlim", "ax.get_ylim", "ax.cla", "ax.set_axis_off", "ax.set_xlim", "ax.set_ylim"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "clean_axis", "(", "ax", ")", ":", "\n", "        ", "xlim", "=", "ax", ".", "get_xlim", "(", ")", "\n", "ylim", "=", "ax", ".", "get_ylim", "(", ")", "\n", "ax", ".", "cla", "(", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "ax", ".", "set_xlim", "(", "*", "xlim", ")", "\n", "ax", ".", "set_ylim", "(", "*", "ylim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.skip_frame": [[58, 60], ["None"], "methods", ["None"], ["", "def", "skip_frame", "(", "self", ")", ":", "\n", "        ", "self", ".", "_skip_frame", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.iter": [[61, 92], ["animation_frame.AnimationFrame.video_writer.finish", "plt.close", "animation_frame.AnimationFrame.video_writer.setup", "plt.pause", "animation_frame.AnimationFrame.video_writer.grab_frame", "animation_frame.AnimationFrame.clean_axis", "animation_frame.AnimationFrame.clean_axis"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.clean_axis", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.clean_axis"], ["", "def", "iter", "(", "self", ")", ":", "\n", "        ", "video_writer_is_setup", "=", "False", "\n", "try", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "yield", "(", "self", ".", "ax", ",", "self", ".", "ax_second", ")", "\n", "\n", "if", "self", ".", "_skip_frame", ":", "\n", "                    ", "self", ".", "_skip_frame", "=", "False", "\n", "continue", "\n", "\n", "# Lazy setup of video writer (needs to be after first yield", "\n", "# because only that might setup `self.fig`).", "\n", "", "if", "self", ".", "video_writer", "and", "not", "video_writer_is_setup", ":", "\n", "                    ", "self", ".", "video_writer", ".", "setup", "(", "self", ".", "fig", ",", "self", ".", "video_output", ",", "self", ".", "video_dpi", ")", "\n", "video_writer_is_setup", "=", "True", "\n", "\n", "", "if", "self", ".", "show", ":", "\n", "                    ", "plt", ".", "pause", "(", "0.01", ")", "\n", "", "if", "self", ".", "video_writer", ":", "\n", "                    ", "self", ".", "video_writer", ".", "grab_frame", "(", ")", "\n", "\n", "", "if", "self", ".", "ax", ":", "\n", "                    ", "self", ".", "clean_axis", "(", "self", ".", "ax", ")", "\n", "", "if", "self", ".", "ax_second", ":", "\n", "                    ", "self", ".", "clean_axis", "(", "self", ".", "ax_second", ")", "\n", "\n", "", "", "", "finally", ":", "\n", "            ", "if", "self", ".", "video_writer", ":", "\n", "                ", "self", ".", "video_writer", ".", "finish", "(", ")", "\n", "", "if", "self", ".", "fig", ":", "\n", "                ", "plt", ".", "close", "(", "self", ".", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.animation_frame.AnimationFrame.frame_init": [[93, 127], ["plt.figure", "animation_frame.AnimationFrame.ax.set_axis_off", "plt.Axes", "plt.Axes", "animation_frame.AnimationFrame.fig.add_axes", "animation_frame.AnimationFrame.fig.add_axes", "plt.Axes", "animation_frame.AnimationFrame.fig.add_axes", "animation_frame.AnimationFrame.ax_second.set_axis_off"], "methods", ["None"], ["", "", "", "def", "frame_init", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "plt", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "if", "'figsize'", "not", "in", "self", ".", "fig_init_args", ":", "\n", "            ", "self", ".", "fig_init_args", "[", "'figsize'", "]", "=", "(", "\n", "self", ".", "fig_width", ",", "\n", "self", ".", "fig_width", "*", "image", ".", "shape", "[", "0", "]", "/", "image", ".", "shape", "[", "1", "]", "\n", ")", "\n", "if", "self", ".", "second_visual", ":", "\n", "                ", "self", ".", "fig_init_args", "[", "'figsize'", "]", "=", "(", "\n", "self", ".", "fig_init_args", "[", "'figsize'", "]", "[", "0", "]", ",", "\n", "self", ".", "fig_init_args", "[", "'figsize'", "]", "[", "1", "]", "/", "2.0", ",", "\n", ")", "\n", "\n", "", "", "self", ".", "fig", "=", "plt", ".", "figure", "(", "**", "self", ".", "fig_init_args", ")", "\n", "if", "self", ".", "second_visual", ":", "\n", "            ", "self", ".", "ax", "=", "plt", ".", "Axes", "(", "self", ".", "fig", ",", "[", "0.0", ",", "0.0", ",", "0.5", ",", "1.0", "]", ")", "\n", "self", ".", "ax_second", "=", "plt", ".", "Axes", "(", "self", ".", "fig", ",", "[", "0.5", ",", "0.05", ",", "0.45", ",", "0.9", "]", ")", "\n", "self", ".", "fig", ".", "add_axes", "(", "self", ".", "ax", ")", "\n", "self", ".", "fig", ".", "add_axes", "(", "self", ".", "ax_second", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ax", "=", "plt", ".", "Axes", "(", "self", ".", "fig", ",", "[", "0.0", ",", "0.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "self", ".", "ax_second", "=", "None", "\n", "self", ".", "fig", ".", "add_axes", "(", "self", ".", "ax", ")", "\n", "", "self", ".", "ax", ".", "set_axis_off", "(", ")", "\n", "# self.ax.set_xlim(0, image.shape[1])", "\n", "# self.ax.set_ylim(image.shape[0], 0)", "\n", "if", "self", ".", "ax_second", "is", "not", "None", ":", "\n", "            ", "self", ".", "ax_second", ".", "set_axis_off", "(", ")", "\n", "# self.ax_second.set_xlim(0, image.shape[1])", "\n", "# self.ax_second.set_ylim(image.shape[0], 0)", "\n", "\n", "", "return", "self", ".", "ax", ",", "self", ".", "ax_second", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.cli.cli": [[8, 16], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["def", "cli", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "'show'", ")", "\n", "group", ".", "add_argument", "(", "'--show-box'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-joint-scales'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-joint-confidences'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-decoding-order'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-frontier-order'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-only-decoded-connections'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.cli.configure": [[18, 25], ["None"], "function", ["None"], ["", "def", "configure", "(", "args", ")", ":", "\n", "    ", "KeypointPainter", ".", "show_box", "=", "args", ".", "show_box", "\n", "KeypointPainter", ".", "show_joint_scales", "=", "args", ".", "show_joint_scales", "\n", "KeypointPainter", ".", "show_joint_confidences", "=", "args", ".", "show_joint_confidences", "\n", "KeypointPainter", ".", "show_decoding_order", "=", "args", ".", "show_decoding_order", "\n", "KeypointPainter", ".", "show_frontier_order", "=", "args", ".", "show_frontier_order", "\n", "KeypointPainter", ".", "show_only_decoded_connections", "=", "args", ".", "show_only_decoded_connections", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.canvas": [[16, 40], ["plt.figure.set_tight_layout", "plt.close", "Exception", "plt.figure", "plt.Axes", "plt.figure.add_axes", "plt.subplots", "plt.figure.savefig", "plt.show"], "function", ["None"], ["@", "contextmanager", "\n", "def", "canvas", "(", "fig_file", "=", "None", ",", "show", "=", "True", ",", "dpi", "=", "200", ",", "nomargin", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "plt", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "'please install matplotlib'", ")", "\n", "\n", "", "if", "'figsize'", "not", "in", "kwargs", ":", "\n", "# kwargs['figsize'] = (15, 8)", "\n", "        ", "kwargs", "[", "'figsize'", "]", "=", "(", "10", ",", "6", ")", "\n", "\n", "", "if", "nomargin", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "**", "kwargs", ")", "\n", "ax", "=", "plt", ".", "Axes", "(", "fig", ",", "[", "0.0", ",", "0.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "", "else", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "**", "kwargs", ")", "\n", "\n", "", "yield", "ax", "\n", "\n", "fig", ".", "set_tight_layout", "(", "not", "nomargin", ")", "\n", "if", "fig_file", ":", "\n", "        ", "fig", ".", "savefig", "(", "fig_file", ",", "dpi", "=", "dpi", ")", "# , bbox_inches='tight')", "\n", "", "if", "show", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.image_canvas": [[42, 66], ["numpy.asarray", "plt.figure", "plt.Axes", "plt.Axes.set_axis_off", "plt.Axes.set_xlim", "plt.Axes.set_ylim", "plt.figure.add_axes", "plt.Axes.imshow", "plt.close", "Exception", "plt.figure.savefig", "plt.show"], "function", ["None"], ["", "@", "contextmanager", "\n", "def", "image_canvas", "(", "image", ",", "fig_file", "=", "None", ",", "show", "=", "True", ",", "dpi_factor", "=", "1.0", ",", "fig_width", "=", "10.0", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "plt", "is", "None", ":", "\n", "        ", "raise", "Exception", "(", "'please install matplotlib'", ")", "\n", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "if", "'figsize'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'figsize'", "]", "=", "(", "fig_width", ",", "fig_width", "*", "image", ".", "shape", "[", "0", "]", "/", "image", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "**", "kwargs", ")", "\n", "ax", "=", "plt", ".", "Axes", "(", "fig", ",", "[", "0.0", ",", "0.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "image", ".", "shape", "[", "1", "]", ")", "\n", "ax", ".", "set_ylim", "(", "image", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "ax", ".", "imshow", "(", "image", ")", "\n", "\n", "yield", "ax", "\n", "\n", "if", "fig_file", ":", "\n", "        ", "fig", ".", "savefig", "(", "fig_file", ",", "dpi", "=", "image", ".", "shape", "[", "1", "]", "/", "kwargs", "[", "'figsize'", "]", "[", "0", "]", "*", "dpi_factor", ")", "\n", "", "if", "show", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.load_image": [[68, 73], ["open", "PIL.Image.open().convert", "PIL.Image.open", "numpy.asarray"], "function", ["None"], ["", "def", "load_image", "(", "path", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ")", "*", "scale", "/", "255.0", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen": [[75, 79], ["ax.add_patch", "plt.Rectangle"], "function", ["None"], ["", "", "def", "white_screen", "(", "ax", ",", "alpha", "=", "0.9", ")", ":", "\n", "    ", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "(", "0", ",", "0", ")", ",", "1", ",", "1", ",", "transform", "=", "ax", ".", "transAxes", ",", "alpha", "=", "alpha", ",", "\n", "facecolor", "=", "'white'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.quiver": [[17, 53], ["range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.argsort", "zip", "ax.quiver", "range", "matplotlib.patches.Circle", "ax.add_artist", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.quiver"], ["def", "quiver", "(", "ax", ",", "vector_field", ",", "*", ",", "\n", "confidence_field", "=", "None", ",", "step", "=", "1", ",", "threshold", "=", "0.5", ",", "\n", "xy_scale", "=", "1.0", ",", "uv_is_offset", "=", "False", ",", "\n", "reg_uncertainty", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "x", ",", "y", ",", "u", ",", "v", ",", "c", ",", "r", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "vector_field", ".", "shape", "[", "1", "]", ",", "step", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "vector_field", ".", "shape", "[", "2", "]", ",", "step", ")", ":", "\n", "            ", "if", "confidence_field", "is", "not", "None", "and", "confidence_field", "[", "j", ",", "i", "]", "<", "threshold", ":", "\n", "                ", "continue", "\n", "", "x", ".", "append", "(", "i", "*", "xy_scale", ")", "\n", "y", ".", "append", "(", "j", "*", "xy_scale", ")", "\n", "u", ".", "append", "(", "vector_field", "[", "0", ",", "j", ",", "i", "]", "*", "xy_scale", ")", "\n", "v", ".", "append", "(", "vector_field", "[", "1", ",", "j", ",", "i", "]", "*", "xy_scale", ")", "\n", "c", ".", "append", "(", "confidence_field", "[", "j", ",", "i", "]", "if", "confidence_field", "is", "not", "None", "else", "1.0", ")", "\n", "r", ".", "append", "(", "reg_uncertainty", "[", "j", ",", "i", "]", "*", "xy_scale", "if", "reg_uncertainty", "is", "not", "None", "else", "None", ")", "\n", "", "", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "u", "=", "np", ".", "array", "(", "u", ")", "\n", "v", "=", "np", ".", "array", "(", "v", ")", "\n", "c", "=", "np", ".", "array", "(", "c", ")", "\n", "r", "=", "np", ".", "array", "(", "r", ")", "\n", "s", "=", "np", ".", "argsort", "(", "c", ")", "\n", "if", "uv_is_offset", ":", "\n", "        ", "u", "+=", "x", "\n", "v", "+=", "y", "\n", "\n", "", "for", "uu", ",", "vv", ",", "rr", "in", "zip", "(", "u", ",", "v", ",", "r", ")", ":", "\n", "        ", "if", "not", "rr", ":", "\n", "            ", "continue", "\n", "", "circle", "=", "matplotlib", ".", "patches", ".", "Circle", "(", "\n", "(", "uu", ",", "vv", ")", ",", "rr", "/", "2.0", ",", "zorder", "=", "11", ",", "linewidth", "=", "1", ",", "alpha", "=", "1.0", ",", "\n", "fill", "=", "False", ",", "color", "=", "'orange'", ")", "\n", "ax", ".", "add_artist", "(", "circle", ")", "\n", "\n", "", "return", "ax", ".", "quiver", "(", "x", "[", "s", "]", ",", "y", "[", "s", "]", ",", "u", "[", "s", "]", "-", "x", "[", "s", "]", ",", "v", "[", "s", "]", "-", "y", "[", "s", "]", ",", "c", "[", "s", "]", ",", "\n", "angles", "=", "'xy'", ",", "scale_units", "=", "'xy'", ",", "scale", "=", "1", ",", "zOrder", "=", "10", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.margins": [[55, 93], ["range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "zip", "range", "zip", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "matplotlib.patches.Wedge", "ax.add_artist", "numpy.isfinite"], "function", ["None"], ["", "def", "margins", "(", "ax", ",", "vector_field", ",", "*", ",", "\n", "confidence_field", "=", "None", ",", "step", "=", "1", ",", "threshold", "=", "0.5", ",", "\n", "xy_scale", "=", "1.0", ",", "uv_is_offset", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "x", ",", "y", ",", "u", ",", "v", ",", "r", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "vector_field", ".", "shape", "[", "1", "]", ",", "step", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "vector_field", ".", "shape", "[", "2", "]", ",", "step", ")", ":", "\n", "            ", "if", "confidence_field", "is", "not", "None", "and", "confidence_field", "[", "j", ",", "i", "]", "<", "threshold", ":", "\n", "                ", "continue", "\n", "", "x", ".", "append", "(", "i", "*", "xy_scale", ")", "\n", "y", ".", "append", "(", "j", "*", "xy_scale", ")", "\n", "u", ".", "append", "(", "vector_field", "[", "0", ",", "j", ",", "i", "]", "*", "xy_scale", ")", "\n", "v", ".", "append", "(", "vector_field", "[", "1", ",", "j", ",", "i", "]", "*", "xy_scale", ")", "\n", "r", ".", "append", "(", "vector_field", "[", "2", ":", "6", ",", "j", ",", "i", "]", "*", "xy_scale", ")", "\n", "", "", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "u", "=", "np", ".", "array", "(", "u", ")", "\n", "v", "=", "np", ".", "array", "(", "v", ")", "\n", "r", "=", "np", ".", "array", "(", "r", ")", "\n", "if", "uv_is_offset", ":", "\n", "        ", "u", "-=", "x", "\n", "v", "-=", "y", "\n", "\n", "", "wedge_angles", "=", "[", "\n", "(", "0.0", ",", "90.0", ")", ",", "\n", "(", "90.0", ",", "180.0", ")", ",", "\n", "(", "270.0", ",", "360.0", ")", ",", "\n", "(", "180.0", ",", "270.0", ")", ",", "\n", "]", "\n", "\n", "for", "xx", ",", "yy", ",", "uu", ",", "vv", ",", "rr", "in", "zip", "(", "x", ",", "y", ",", "u", ",", "v", ",", "r", ")", ":", "\n", "        ", "for", "q_rr", ",", "(", "theta1", ",", "theta2", ")", "in", "zip", "(", "rr", ",", "wedge_angles", ")", ":", "\n", "            ", "if", "not", "np", ".", "isfinite", "(", "q_rr", ")", ":", "\n", "                ", "continue", "\n", "", "wedge", "=", "matplotlib", ".", "patches", ".", "Wedge", "(", "\n", "(", "xx", "+", "uu", ",", "yy", "+", "vv", ")", ",", "q_rr", ",", "theta1", ",", "theta2", ",", "\n", "zorder", "=", "9", ",", "linewidth", "=", "1", ",", "alpha", "=", "0.5", "/", "16.0", ",", "\n", "fill", "=", "True", ",", "color", "=", "'orange'", ",", "**", "kwargs", ")", "\n", "ax", ".", "add_artist", "(", "wedge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.arrows": [[95, 103], ["numpy.min", "numpy.argsort", "ax.quiver", "numpy.min"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.quiver"], ["", "", "", "def", "arrows", "(", "ax", ",", "fourd", ",", "xy_scale", "=", "1.0", ",", "threshold", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "    ", "mask", "=", "np", ".", "min", "(", "fourd", "[", ":", ",", "2", "]", ",", "axis", "=", "0", ")", ">=", "threshold", "\n", "fourd", "=", "fourd", "[", ":", ",", ":", ",", "mask", "]", "\n", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", "=", "fourd", "[", ":", ",", ":", "2", ",", ":", "]", "*", "xy_scale", "\n", "c", "=", "np", ".", "min", "(", "fourd", "[", ":", ",", "2", "]", ",", "axis", "=", "0", ")", "\n", "s", "=", "np", ".", "argsort", "(", "c", ")", "\n", "return", "ax", ".", "quiver", "(", "x1", "[", "s", "]", ",", "y1", "[", "s", "]", ",", "(", "x2", "-", "x1", ")", "[", "s", "]", ",", "(", "y2", "-", "y1", ")", "[", "s", "]", ",", "c", "[", "s", "]", ",", "\n", "angles", "=", "'xy'", ",", "scale_units", "=", "'xy'", ",", "scale", "=", "1", ",", "zOrder", "=", "10", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.boxes": [[105, 107], ["fields.boxes_wh"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.boxes_wh"], ["", "def", "boxes", "(", "ax", ",", "sigma_field", ",", "**", "kwargs", ")", ":", "\n", "    ", "boxes_wh", "(", "ax", ",", "sigma_field", "*", "2.0", ",", "sigma_field", "*", "2.0", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.boxes_wh": [[109, 139], ["range", "matplotlib.cm.get_cmap", "matplotlib.colors.Normalize", "zip", "range", "matplotlib.cm.get_cmap.", "matplotlib.patches.Rectangle", "ax.add_artist", "x.append", "y.append", "w.append", "h.append", "c.append", "matplotlib.colors.Normalize."], "function", ["None"], ["", "def", "boxes_wh", "(", "ax", ",", "w_field", ",", "h_field", ",", "*", ",", "confidence_field", "=", "None", ",", "regression_field", "=", "None", ",", "\n", "xy_scale", "=", "1.0", ",", "step", "=", "1", ",", "threshold", "=", "0.5", ",", "\n", "regression_field_is_offset", "=", "False", ",", "\n", "cmap", "=", "'viridis_r'", ",", "clim", "=", "(", "0.5", ",", "1.0", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "x", ",", "y", ",", "w", ",", "h", ",", "c", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "w_field", ".", "shape", "[", "0", "]", ",", "step", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "w_field", ".", "shape", "[", "1", "]", ",", "step", ")", ":", "\n", "            ", "if", "confidence_field", "is", "not", "None", "and", "confidence_field", "[", "j", ",", "i", "]", "<", "threshold", ":", "\n", "                ", "continue", "\n", "", "x_offset", ",", "y_offset", "=", "0.0", ",", "0.0", "\n", "if", "regression_field", "is", "not", "None", ":", "\n", "                ", "x_offset", "=", "regression_field", "[", "0", ",", "j", ",", "i", "]", "\n", "y_offset", "=", "regression_field", "[", "1", ",", "j", ",", "i", "]", "\n", "if", "not", "regression_field_is_offset", ":", "\n", "                    ", "x_offset", "-=", "i", "\n", "y_offset", "-=", "j", "\n", "", "", "x", ".", "append", "(", "(", "i", "+", "x_offset", ")", "*", "xy_scale", ")", "\n", "y", ".", "append", "(", "(", "j", "+", "y_offset", ")", "*", "xy_scale", ")", "\n", "w", ".", "append", "(", "w_field", "[", "j", ",", "i", "]", "*", "xy_scale", ")", "\n", "h", ".", "append", "(", "h_field", "[", "j", ",", "i", "]", "*", "xy_scale", ")", "\n", "c", ".", "append", "(", "confidence_field", "[", "j", ",", "i", "]", "if", "confidence_field", "is", "not", "None", "else", "1.0", ")", "\n", "\n", "", "", "cmap", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmap", ")", "\n", "cnorm", "=", "matplotlib", ".", "colors", ".", "Normalize", "(", "vmin", "=", "clim", "[", "0", "]", ",", "vmax", "=", "clim", "[", "1", "]", ")", "\n", "for", "xx", ",", "yy", ",", "ww", ",", "hh", ",", "cc", "in", "zip", "(", "x", ",", "y", ",", "w", ",", "h", ",", "c", ")", ":", "\n", "        ", "color", "=", "cmap", "(", "cnorm", "(", "cc", ")", ")", "\n", "rectangle", "=", "matplotlib", ".", "patches", ".", "Rectangle", "(", "\n", "(", "xx", "-", "ww", "/", "2.0", ",", "yy", "-", "hh", "/", "2.0", ")", ",", "ww", ",", "hh", ",", "\n", "color", "=", "color", ",", "zorder", "=", "10", ",", "linewidth", "=", "1", ",", "**", "kwargs", ")", "\n", "ax", ".", "add_artist", "(", "rectangle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.circles": [[141, 170], ["range", "matplotlib.cm.get_cmap", "matplotlib.colors.Normalize", "zip", "range", "matplotlib.cm.get_cmap.", "matplotlib.patches.Circle", "ax.add_artist", "x.append", "y.append", "s.append", "c.append", "matplotlib.colors.Normalize."], "function", ["None"], ["", "", "def", "circles", "(", "ax", ",", "radius_field", ",", "*", ",", "confidence_field", "=", "None", ",", "regression_field", "=", "None", ",", "\n", "xy_scale", "=", "1.0", ",", "step", "=", "1", ",", "threshold", "=", "0.5", ",", "\n", "regression_field_is_offset", "=", "False", ",", "\n", "cmap", "=", "'viridis_r'", ",", "clim", "=", "(", "0.5", ",", "1.0", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "x", ",", "y", ",", "s", ",", "c", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "radius_field", ".", "shape", "[", "0", "]", ",", "step", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "radius_field", ".", "shape", "[", "1", "]", ",", "step", ")", ":", "\n", "            ", "if", "confidence_field", "is", "not", "None", "and", "confidence_field", "[", "j", ",", "i", "]", "<", "threshold", ":", "\n", "                ", "continue", "\n", "", "x_offset", ",", "y_offset", "=", "0.0", ",", "0.0", "\n", "if", "regression_field", "is", "not", "None", ":", "\n", "                ", "x_offset", "=", "regression_field", "[", "0", ",", "j", ",", "i", "]", "\n", "y_offset", "=", "regression_field", "[", "1", ",", "j", ",", "i", "]", "\n", "if", "not", "regression_field_is_offset", ":", "\n", "                    ", "x_offset", "-=", "i", "\n", "y_offset", "-=", "j", "\n", "", "", "x", ".", "append", "(", "(", "i", "+", "x_offset", ")", "*", "xy_scale", ")", "\n", "y", ".", "append", "(", "(", "j", "+", "y_offset", ")", "*", "xy_scale", ")", "\n", "s", ".", "append", "(", "radius_field", "[", "j", ",", "i", "]", "*", "xy_scale", ")", "\n", "c", ".", "append", "(", "confidence_field", "[", "j", ",", "i", "]", "if", "confidence_field", "is", "not", "None", "else", "1.0", ")", "\n", "\n", "", "", "cmap", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmap", ")", "\n", "cnorm", "=", "matplotlib", ".", "colors", ".", "Normalize", "(", "vmin", "=", "clim", "[", "0", "]", ",", "vmax", "=", "clim", "[", "1", "]", ")", "\n", "for", "xx", ",", "yy", ",", "ss", ",", "cc", "in", "zip", "(", "x", ",", "y", ",", "s", ",", "c", ")", ":", "\n", "        ", "color", "=", "cmap", "(", "cnorm", "(", "cc", ")", ")", "\n", "circle", "=", "matplotlib", ".", "patches", ".", "Circle", "(", "\n", "(", "xx", ",", "yy", ")", ",", "ss", ",", "\n", "color", "=", "color", ",", "zorder", "=", "10", ",", "linewidth", "=", "1", ",", "**", "kwargs", ")", "\n", "ax", ".", "add_artist", "(", "circle", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.make_colorwheel": [[19, 63], ["numpy.zeros", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["def", "make_colorwheel", "(", ")", ":", "\n", "    ", "\"\"\"\n    Generates a color wheel for optical flow visualization as presented in:\n        Baker et al. \"A Database and Evaluation Methodology for Optical Flow\" (ICCV, 2007)\n        URL: http://vision.middlebury.edu/flow/flowEval-iccv07.pdf\n    According to the C++ source code of Daniel Scharstein\n    According to the Matlab source code of Deqing Sun\n    \"\"\"", "\n", "\n", "RY", "=", "15", "\n", "YG", "=", "6", "\n", "GC", "=", "4", "\n", "CB", "=", "11", "\n", "BM", "=", "13", "\n", "MR", "=", "6", "\n", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "(", "ncols", ",", "3", ")", ")", "\n", "col", "=", "0", "\n", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", "\n", "col", "=", "col", "+", "RY", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "=", "col", "+", "YG", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", "\n", "col", "=", "col", "+", "GC", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "CB", ")", "/", "CB", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "=", "col", "+", "CB", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", "\n", "col", "=", "col", "+", "BM", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "MR", ")", "/", "MR", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_compute_color": [[65, 106], ["numpy.zeros", "flow_vis.make_colorwheel", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.arctan2", "numpy.floor", "numpy.square", "numpy.square", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.make_colorwheel"], ["", "def", "flow_compute_color", "(", "u", ",", "v", ",", "convert_to_bgr", "=", "False", ")", ":", "\n", "    ", "'''\n    Applies the flow color wheel to (possibly clipped) flow components u and v.\n    According to the C++ source code of Daniel Scharstein\n    According to the Matlab source code of Deqing Sun\n    :param u: np.ndarray, input horizontal flow\n    :param v: np.ndarray, input vertical flow\n    :param convert_to_bgr: bool, whether to change ordering and output BGR instead of RGB\n    :return:\n    '''", "\n", "\n", "flow_image", "=", "np", ".", "zeros", "(", "(", "u", ".", "shape", "[", "0", "]", ",", "u", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "colorwheel", "=", "make_colorwheel", "(", ")", "# shape [55x3]", "\n", "ncols", "=", "colorwheel", ".", "shape", "[", "0", "]", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "\n", "k0", "=", "np", ".", "floor", "(", "fk", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "]", "=", "0", "\n", "f", "=", "fk", "-", "k0", "\n", "\n", "for", "i", "in", "range", "(", "colorwheel", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "]", "/", "255.0", "\n", "col1", "=", "tmp", "[", "k1", "]", "/", "255.0", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "\n", "idx", "=", "(", "rad", "<=", "1", ")", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "col", "[", "~", "idx", "]", "=", "col", "[", "~", "idx", "]", "*", "0.75", "# out of range?", "\n", "\n", "# Note the 2-i => BGR instead of RGB", "\n", "ch_idx", "=", "2", "-", "i", "if", "convert_to_bgr", "else", "i", "\n", "flow_image", "[", ":", ",", ":", ",", "ch_idx", "]", "=", "np", ".", "floor", "(", "255", "*", "col", ")", "\n", "\n", "", "return", "flow_image", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_to_color": [[108, 135], ["numpy.sqrt", "numpy.max", "flow_vis.flow_compute_color", "numpy.clip", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.flow_vis.flow_compute_color"], ["", "def", "flow_to_color", "(", "flow_uv", ",", "clip_flow", "=", "None", ",", "convert_to_bgr", "=", "False", ")", ":", "\n", "    ", "'''\n    Expects a two dimensional flow image of shape [H,W,2]\n    According to the C++ source code of Daniel Scharstein\n    According to the Matlab source code of Deqing Sun\n    :param flow_uv: np.ndarray of shape [H,W,2]\n    :param clip_flow: float, maximum clipping value for flow\n    :return:\n    '''", "\n", "\n", "assert", "flow_uv", ".", "ndim", "==", "3", ",", "'input flow must have three dimensions'", "\n", "assert", "flow_uv", ".", "shape", "[", "2", "]", "==", "2", ",", "'input flow must have shape [H,W,2]'", "\n", "\n", "if", "clip_flow", "is", "not", "None", ":", "\n", "        ", "flow_uv", "=", "np", ".", "clip", "(", "flow_uv", ",", "0", ",", "clip_flow", ")", "\n", "\n", "", "u", "=", "flow_uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow_uv", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "rad_max", "=", "np", ".", "max", "(", "rad", ")", "\n", "\n", "epsilon", "=", "1e-5", "\n", "u", "=", "u", "/", "(", "rad_max", "+", "epsilon", ")", "\n", "v", "=", "v", "/", "(", "rad_max", "+", "epsilon", ")", "\n", "\n", "return", "flow_compute_color", "(", "u", ",", "v", ",", "convert_to_bgr", ")", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.AnnotationPainter.__init__": [[19, 28], ["painters.KeypointPainter", "painters.CrowdPainter", "painters.DetectionPainter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "\n", "xy_scale", "=", "1.0", ",", "\n", "keypoint_painter", "=", "None", ",", "\n", "crowd_painer", "=", "None", ",", "\n", "detection_painter", "=", "None", ")", ":", "\n", "        ", "self", ".", "painters", "=", "{", "\n", "'Annotation'", ":", "keypoint_painter", "or", "KeypointPainter", "(", "xy_scale", "=", "xy_scale", ")", ",", "\n", "'AnnotationCrowd'", ":", "crowd_painer", "or", "CrowdPainter", "(", ")", ",", "# TODO update", "\n", "'AnnotationDet'", ":", "detection_painter", "or", "DetectionPainter", "(", "xy_scale", "=", "xy_scale", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.AnnotationPainter.annotations": [[30, 44], ["collections.defaultdict", "enumerate", "collections.defaultdict.items", "by_classname[].append", "painters.AnnotationPainter.painters[].annotations"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations"], ["", "def", "annotations", "(", "self", ",", "ax", ",", "annotations", ",", "*", ",", "\n", "color", "=", "None", ",", "colors", "=", "None", ",", "texts", "=", "None", ",", "subtexts", "=", "None", ")", ":", "\n", "        ", "by_classname", "=", "defaultdict", "(", "list", ")", "\n", "for", "ann_i", ",", "ann", "in", "enumerate", "(", "annotations", ")", ":", "\n", "            ", "by_classname", "[", "ann", ".", "__class__", ".", "__name__", "]", ".", "append", "(", "(", "ann_i", ",", "ann", ")", ")", "\n", "\n", "", "for", "classname", ",", "i_anns", "in", "by_classname", ".", "items", "(", ")", ":", "\n", "            ", "anns", "=", "[", "ann", "for", "_", ",", "ann", "in", "i_anns", "]", "\n", "this_colors", "=", "[", "colors", "[", "i", "]", "for", "i", ",", "_", "in", "i_anns", "]", "if", "colors", "else", "None", "\n", "this_texts", "=", "[", "texts", "[", "i", "]", "for", "i", ",", "_", "in", "i_anns", "]", "if", "texts", "else", "None", "\n", "this_subtexts", "=", "[", "subtexts", "[", "i", "]", "for", "i", ",", "_", "in", "i_anns", "]", "if", "subtexts", "else", "None", "\n", "self", ".", "painters", "[", "classname", "]", ".", "annotations", "(", "\n", "ax", ",", "anns", ",", "\n", "color", "=", "color", ",", "colors", "=", "this_colors", ",", "texts", "=", "this_texts", ",", "subtexts", "=", "this_subtexts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.DetectionPainter.__init__": [[47, 49], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "xy_scale", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "xy_scale", "=", "xy_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.DetectionPainter.annotations": [[50, 74], ["reversed", "list", "painters.DetectionPainter.annotation", "enumerate", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter.annotation"], ["", "def", "annotations", "(", "self", ",", "ax", ",", "annotations", ",", "*", ",", "\n", "color", "=", "None", ",", "colors", "=", "None", ",", "texts", "=", "None", ",", "subtexts", "=", "None", ")", ":", "\n", "        ", "for", "i", ",", "ann", "in", "reversed", "(", "list", "(", "enumerate", "(", "annotations", ")", ")", ")", ":", "\n", "            ", "this_color", "=", "ann", ".", "field_i", "\n", "if", "colors", "is", "not", "None", ":", "\n", "                ", "this_color", "=", "colors", "[", "i", "]", "\n", "", "elif", "color", "is", "not", "None", ":", "\n", "                ", "this_color", "=", "color", "\n", "", "elif", "hasattr", "(", "ann", ",", "'id_'", ")", ":", "\n", "                ", "this_color", "=", "ann", ".", "id_", "\n", "\n", "", "text", "=", "ann", ".", "category", "\n", "if", "texts", "is", "not", "None", ":", "\n", "                ", "text", "=", "texts", "[", "i", "]", "\n", "", "elif", "hasattr", "(", "ann", ",", "'id_'", ")", ":", "\n", "                ", "text", "=", "'{}'", ".", "format", "(", "ann", ".", "id_", ")", "\n", "\n", "", "subtext", "=", "None", "\n", "if", "subtexts", "is", "not", "None", ":", "\n", "                ", "subtext", "=", "subtexts", "[", "i", "]", "\n", "", "elif", "ann", ".", "score", "is", "not", "None", ":", "\n", "                ", "subtext", "=", "'{:.0%}'", ".", "format", "(", "ann", ".", "score", ")", "\n", "\n", "", "self", ".", "annotation", "(", "ax", ",", "ann", ",", "color", "=", "this_color", ",", "text", "=", "text", ",", "subtext", "=", "subtext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.DetectionPainter.annotation": [[75, 111], ["isinstance", "ax.add_patch", "ax.annotate", "matplotlib.patches.Rectangle", "ax.annotate", "matplotlib.cm.get_cmap"], "methods", ["None"], ["", "", "def", "annotation", "(", "self", ",", "ax", ",", "ann", ",", "*", ",", "color", "=", "None", ",", "text", "=", "None", ",", "subtext", "=", "None", ")", ":", "\n", "        ", "if", "color", "is", "None", ":", "\n", "            ", "color", "=", "0", "\n", "", "if", "isinstance", "(", "color", ",", "(", "int", ",", "np", ".", "integer", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab20'", ")", "(", "(", "color", "%", "20", "+", "0.05", ")", "/", "20", ")", "\n", "\n", "", "x", ",", "y", ",", "w", ",", "h", "=", "ann", ".", "bbox", "*", "self", ".", "xy_scale", "\n", "if", "w", "<", "5.0", ":", "\n", "            ", "x", "-=", "2.0", "\n", "w", "+=", "4.0", "\n", "", "if", "h", "<", "5.0", ":", "\n", "            ", "y", "-=", "2.0", "\n", "h", "+=", "4.0", "\n", "\n", "# draw box", "\n", "", "ax", ".", "add_patch", "(", "\n", "matplotlib", ".", "patches", ".", "Rectangle", "(", "\n", "(", "x", ",", "y", ")", ",", "w", ",", "h", ",", "fill", "=", "False", ",", "color", "=", "color", ",", "linewidth", "=", "1.0", ")", ")", "\n", "\n", "# draw text", "\n", "ax", ".", "annotate", "(", "\n", "text", ",", "\n", "(", "x", ",", "y", ")", ",", "\n", "fontsize", "=", "8", ",", "\n", "xytext", "=", "(", "5.0", ",", "5.0", ")", ",", "\n", "textcoords", "=", "'offset points'", ",", "\n", "color", "=", "'white'", ",", "bbox", "=", "{", "'facecolor'", ":", "color", ",", "'alpha'", ":", "0.5", ",", "'linewidth'", ":", "0", "}", ",", "\n", ")", "\n", "if", "subtext", "is", "not", "None", ":", "\n", "            ", "ax", ".", "annotate", "(", "\n", "subtext", ",", "\n", "(", "x", ",", "y", ")", ",", "\n", "fontsize", "=", "5", ",", "\n", "xytext", "=", "(", "5.0", ",", "18.0", "+", "3.0", ")", ",", "\n", "textcoords", "=", "'offset points'", ",", "\n", "color", "=", "'white'", ",", "bbox", "=", "{", "'facecolor'", ":", "color", ",", "'alpha'", ":", "0.5", ",", "'linewidth'", ":", "0", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.CrowdPainter.__init__": [[115, 118], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "alpha", "=", "0.5", ",", "color", "=", "'orange'", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "color", "=", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.CrowdPainter.draw": [[119, 129], ["ax.add_collection", "matplotlib.patches.Polygon", "patches.append", "matplotlib.collections.PatchCollection"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "ax", ",", "outlines", ")", ":", "\n", "        ", "for", "outline", "in", "outlines", ":", "\n", "            ", "assert", "outline", ".", "shape", "[", "1", "]", "==", "2", "\n", "\n", "", "patches", "=", "[", "]", "\n", "for", "outline", "in", "outlines", ":", "\n", "            ", "polygon", "=", "matplotlib", ".", "patches", ".", "Polygon", "(", "\n", "outline", "[", ":", ",", ":", "2", "]", ",", "color", "=", "self", ".", "color", ",", "facecolor", "=", "self", ".", "color", ",", "alpha", "=", "self", ".", "alpha", ")", "\n", "patches", ".", "append", "(", "polygon", ")", "\n", "", "ax", ".", "add_collection", "(", "matplotlib", ".", "collections", ".", "PatchCollection", "(", "patches", ",", "match_original", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter.__init__": [[139, 159], ["LOG.debug", "max", "max", "int", "int"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["def", "__init__", "(", "self", ",", "*", ",", "\n", "xy_scale", "=", "1.0", ",", "highlight", "=", "None", ",", "highlight_invisible", "=", "False", ",", "\n", "linewidth", "=", "2", ",", "markersize", "=", "None", ",", "\n", "color_connections", "=", "False", ",", "\n", "solid_threshold", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "xy_scale", "=", "xy_scale", "\n", "self", ".", "highlight", "=", "highlight", "\n", "self", ".", "highlight_invisible", "=", "highlight_invisible", "\n", "self", ".", "linewidth", "=", "linewidth", "\n", "self", ".", "markersize", "=", "markersize", "\n", "if", "self", ".", "markersize", "is", "None", ":", "\n", "            ", "if", "color_connections", ":", "\n", "                ", "self", ".", "markersize", "=", "max", "(", "1", ",", "int", "(", "linewidth", "*", "0.5", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "markersize", "=", "max", "(", "linewidth", "+", "1", ",", "int", "(", "linewidth", "*", "3.0", ")", ")", "\n", "", "", "self", ".", "color_connections", "=", "color_connections", "\n", "self", ".", "solid_threshold", "=", "solid_threshold", "\n", "\n", "LOG", ".", "debug", "(", "'color connections = %s, lw = %d, marker = %d'", ",", "\n", "self", ".", "color_connections", ",", "self", ".", "linewidth", ",", "self", ".", "markersize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_skeleton": [[160, 203], ["enumerate", "ax.add_collection", "ax.scatter", "numpy.any", "matplotlib.collections.LineCollection", "numpy.zeros_like", "numpy.logical_and", "ax.scatter", "numpy.array", "lines.append", "line_colors.append", "matplotlib.cm.get_cmap", "line_styles.append", "line_styles.append", "kwargs.get", "kwargs.get", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel._functions.scatter", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "_draw_skeleton", "(", "self", ",", "ax", ",", "x", ",", "y", ",", "v", ",", "*", ",", "skeleton", ",", "color", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "np", ".", "any", "(", "v", ">", "0", ")", ":", "\n", "            ", "return", "\n", "\n", "# connections", "\n", "", "lines", ",", "line_colors", ",", "line_styles", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "ci", ",", "(", "j1i", ",", "j2i", ")", "in", "enumerate", "(", "np", ".", "array", "(", "skeleton", ")", "-", "1", ")", ":", "\n", "            ", "c", "=", "color", "\n", "if", "self", ".", "color_connections", ":", "\n", "                ", "c", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab20'", ")", "(", "ci", "/", "len", "(", "skeleton", ")", ")", "\n", "", "if", "v", "[", "j1i", "]", ">", "0", "and", "v", "[", "j2i", "]", ">", "0", ":", "\n", "                ", "lines", ".", "append", "(", "[", "(", "x", "[", "j1i", "]", ",", "y", "[", "j1i", "]", ")", ",", "(", "x", "[", "j2i", "]", ",", "y", "[", "j2i", "]", ")", "]", ")", "\n", "line_colors", ".", "append", "(", "c", ")", "\n", "if", "v", "[", "j1i", "]", ">", "self", ".", "solid_threshold", "and", "v", "[", "j2i", "]", ">", "self", ".", "solid_threshold", ":", "\n", "                    ", "line_styles", ".", "append", "(", "'solid'", ")", "\n", "", "else", ":", "\n", "                    ", "line_styles", ".", "append", "(", "'dashed'", ")", "\n", "", "", "", "ax", ".", "add_collection", "(", "matplotlib", ".", "collections", ".", "LineCollection", "(", "\n", "lines", ",", "colors", "=", "line_colors", ",", "\n", "linewidths", "=", "kwargs", ".", "get", "(", "'linewidth'", ",", "self", ".", "linewidth", ")", ",", "\n", "linestyles", "=", "kwargs", ".", "get", "(", "'linestyle'", ",", "line_styles", ")", ",", "\n", "capstyle", "=", "'round'", ",", "\n", ")", ")", "\n", "\n", "# joints", "\n", "ax", ".", "scatter", "(", "\n", "x", "[", "v", ">", "0.0", "]", ",", "y", "[", "v", ">", "0.0", "]", ",", "s", "=", "self", ".", "markersize", "**", "2", ",", "marker", "=", "'.'", ",", "\n", "color", "=", "'white'", "if", "self", ".", "color_connections", "else", "color", ",", "\n", "edgecolor", "=", "'k'", "if", "self", ".", "highlight_invisible", "else", "None", ",", "\n", "zorder", "=", "2", ",", "\n", ")", "\n", "\n", "# highlight joints", "\n", "if", "self", ".", "highlight", "is", "not", "None", ":", "\n", "            ", "highlight_v", "=", "np", ".", "zeros_like", "(", "v", ")", "\n", "highlight_v", "[", "self", ".", "highlight", "]", "=", "1", "\n", "highlight_v", "=", "np", ".", "logical_and", "(", "v", ",", "highlight_v", ")", "\n", "\n", "ax", ".", "scatter", "(", "\n", "x", "[", "highlight_v", "]", ",", "y", "[", "highlight_v", "]", ",", "s", "=", "self", ".", "markersize", "**", "2", ",", "marker", "=", "'.'", ",", "\n", "color", "=", "'white'", "if", "self", ".", "color_connections", "else", "color", ",", "\n", "edgecolor", "=", "'k'", "if", "self", ".", "highlight_invisible", "else", "None", ",", "\n", "zorder", "=", "2", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter.keypoints": [[205, 232], ["enumerate", "range", "numpy.asarray", "isinstance", "painters.KeypointPainter._draw_skeleton", "len", "painters.KeypointPainter._draw_box", "painters.KeypointPainter._draw_text", "matplotlib.cm.get_cmap"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_skeleton", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_box", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_text"], ["", "", "def", "keypoints", "(", "self", ",", "ax", ",", "keypoint_sets", ",", "*", ",", "\n", "skeleton", ",", "scores", "=", "None", ",", "color", "=", "None", ",", "colors", "=", "None", ",", "texts", "=", "None", ")", ":", "\n", "        ", "if", "keypoint_sets", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "if", "color", "is", "None", "and", "colors", "is", "None", ":", "\n", "            ", "colors", "=", "range", "(", "len", "(", "keypoint_sets", ")", ")", "\n", "\n", "", "for", "i", ",", "kps", "in", "enumerate", "(", "np", ".", "asarray", "(", "keypoint_sets", ")", ")", ":", "\n", "            ", "assert", "kps", ".", "shape", "[", "1", "]", "==", "3", "\n", "x", "=", "kps", "[", ":", ",", "0", "]", "*", "self", ".", "xy_scale", "\n", "y", "=", "kps", "[", ":", ",", "1", "]", "*", "self", ".", "xy_scale", "\n", "v", "=", "kps", "[", ":", ",", "2", "]", "\n", "\n", "if", "colors", "is", "not", "None", ":", "\n", "                ", "color", "=", "colors", "[", "i", "]", "\n", "\n", "", "if", "isinstance", "(", "color", ",", "(", "int", ",", "np", ".", "integer", ")", ")", ":", "\n", "                ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab20'", ")", "(", "(", "color", "%", "20", "+", "0.05", ")", "/", "20", ")", "\n", "\n", "", "self", ".", "_draw_skeleton", "(", "ax", ",", "x", ",", "y", ",", "v", ",", "skeleton", "=", "skeleton", ",", "color", "=", "color", ")", "\n", "if", "self", ".", "show_box", ":", "\n", "                ", "score", "=", "scores", "[", "i", "]", "if", "scores", "is", "not", "None", "else", "None", "\n", "self", ".", "_draw_box", "(", "ax", ",", "x", ",", "y", ",", "v", ",", "color", ",", "score", ")", "\n", "\n", "", "if", "texts", "is", "not", "None", ":", "\n", "                ", "self", ".", "_draw_text", "(", "ax", ",", "x", ",", "y", ",", "v", ",", "texts", "[", "i", "]", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_box": [[233, 247], ["ax.add_patch", "matplotlib.patches.Rectangle", "ax.text"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "_draw_box", "(", "ax", ",", "x", ",", "y", ",", "w", ",", "h", ",", "color", ",", "score", "=", "None", ",", "linewidth", "=", "1", ")", ":", "\n", "        ", "if", "w", "<", "5.0", ":", "\n", "            ", "x", "-=", "2.0", "\n", "w", "+=", "4.0", "\n", "", "if", "h", "<", "5.0", ":", "\n", "            ", "y", "-=", "2.0", "\n", "h", "+=", "4.0", "\n", "", "ax", ".", "add_patch", "(", "\n", "matplotlib", ".", "patches", ".", "Rectangle", "(", "\n", "(", "x", ",", "y", ")", ",", "w", ",", "h", ",", "fill", "=", "False", ",", "color", "=", "color", ",", "linewidth", "=", "linewidth", ")", ")", "\n", "\n", "if", "score", ":", "\n", "            ", "ax", ".", "text", "(", "x", ",", "y", "-", "linewidth", ",", "'{:.4f}'", ".", "format", "(", "score", ")", ",", "fontsize", "=", "8", ",", "color", "=", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_text": [[248, 279], ["numpy.argsort", "ax.annotate", "numpy.any", "ax.annotate", "numpy.sum"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_draw_text", "(", "ax", ",", "x", ",", "y", ",", "v", ",", "text", ",", "color", ",", "*", ",", "subtext", "=", "None", ")", ":", "\n", "        ", "if", "not", "np", ".", "any", "(", "v", ">", "0", ")", ":", "\n", "            ", "return", "\n", "\n", "", "coord_i", "=", "np", ".", "argsort", "(", "y", "[", "v", ">", "0", "]", ")", "\n", "if", "np", ".", "sum", "(", "v", ")", ">=", "2", "and", "y", "[", "v", ">", "0", "]", "[", "coord_i", "[", "1", "]", "]", "<", "y", "[", "v", ">", "0", "]", "[", "coord_i", "[", "0", "]", "]", "+", "10", ":", "\n", "# second coordinate within 10 pixels", "\n", "            ", "f0", "=", "0.5", "+", "0.5", "*", "(", "y", "[", "v", ">", "0", "]", "[", "coord_i", "[", "1", "]", "]", "-", "y", "[", "v", ">", "0", "]", "[", "coord_i", "[", "0", "]", "]", ")", "/", "10.0", "\n", "coord_y", "=", "f0", "*", "y", "[", "v", ">", "0", "]", "[", "coord_i", "[", "0", "]", "]", "+", "(", "1.0", "-", "f0", ")", "*", "y", "[", "v", ">", "0", "]", "[", "coord_i", "[", "1", "]", "]", "\n", "coord_x", "=", "f0", "*", "x", "[", "v", ">", "0", "]", "[", "coord_i", "[", "0", "]", "]", "+", "(", "1.0", "-", "f0", ")", "*", "x", "[", "v", ">", "0", "]", "[", "coord_i", "[", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "coord_y", "=", "y", "[", "v", ">", "0", "]", "[", "coord_i", "[", "0", "]", "]", "\n", "coord_x", "=", "x", "[", "v", ">", "0", "]", "[", "coord_i", "[", "0", "]", "]", "\n", "\n", "", "ax", ".", "annotate", "(", "\n", "text", ",", "\n", "(", "coord_x", ",", "coord_y", ")", ",", "\n", "fontsize", "=", "8", ",", "\n", "xytext", "=", "(", "5.0", ",", "5.0", ")", ",", "\n", "textcoords", "=", "'offset points'", ",", "\n", "color", "=", "'white'", ",", "bbox", "=", "{", "'facecolor'", ":", "color", ",", "'alpha'", ":", "0.5", ",", "'linewidth'", ":", "0", "}", ",", "\n", ")", "\n", "if", "subtext", "is", "not", "None", ":", "\n", "            ", "ax", ".", "annotate", "(", "\n", "subtext", ",", "\n", "(", "coord_x", ",", "coord_y", ")", ",", "\n", "fontsize", "=", "5", ",", "\n", "xytext", "=", "(", "5.0", ",", "18.0", "+", "3.0", ")", ",", "\n", "textcoords", "=", "'offset points'", ",", "\n", "color", "=", "'white'", ",", "bbox", "=", "{", "'facecolor'", ":", "color", ",", "'alpha'", ":", "0.5", ",", "'linewidth'", ":", "0", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_scales": [[281, 289], ["zip", "ax.add_patch", "matplotlib.patches.Rectangle"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_draw_scales", "(", "ax", ",", "xs", ",", "ys", ",", "vs", ",", "color", ",", "scales", ")", ":", "\n", "        ", "for", "x", ",", "y", ",", "v", ",", "scale", "in", "zip", "(", "xs", ",", "ys", ",", "vs", ",", "scales", ")", ":", "\n", "            ", "if", "v", "==", "0.0", ":", "\n", "                ", "continue", "\n", "", "ax", ".", "add_patch", "(", "\n", "matplotlib", ".", "patches", ".", "Rectangle", "(", "\n", "(", "x", "-", "scale", "/", "2", ",", "y", "-", "scale", "/", "2", ")", ",", "scale", ",", "scale", ",", "fill", "=", "False", ",", "color", "=", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_joint_confidences": [[290, 303], ["zip", "ax.annotate"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_draw_joint_confidences", "(", "ax", ",", "xs", ",", "ys", ",", "vs", ",", "color", ")", ":", "\n", "        ", "for", "x", ",", "y", ",", "v", "in", "zip", "(", "xs", ",", "ys", ",", "vs", ")", ":", "\n", "            ", "if", "v", "==", "0.0", ":", "\n", "                ", "continue", "\n", "", "ax", ".", "annotate", "(", "\n", "'{:.0%}'", ".", "format", "(", "v", ")", ",", "\n", "(", "x", ",", "y", ")", ",", "\n", "fontsize", "=", "6", ",", "\n", "xytext", "=", "(", "0.0", ",", "0.0", ")", ",", "\n", "textcoords", "=", "'offset points'", ",", "\n", "verticalalignment", "=", "'top'", ",", "\n", "color", "=", "'white'", ",", "bbox", "=", "{", "'facecolor'", ":", "color", ",", "'alpha'", ":", "0.2", ",", "'linewidth'", ":", "0", ",", "'pad'", ":", "0.0", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter.annotations": [[305, 331], ["enumerate", "painters.KeypointPainter.annotation", "hasattr", "hasattr", "ann.score", "ann.score", "ann.score", "ann.score"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter.annotation", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score"], ["", "", "def", "annotations", "(", "self", ",", "ax", ",", "annotations", ",", "*", ",", "\n", "color", "=", "None", ",", "colors", "=", "None", ",", "texts", "=", "None", ",", "subtexts", "=", "None", ")", ":", "\n", "        ", "for", "i", ",", "ann", "in", "enumerate", "(", "annotations", ")", ":", "\n", "            ", "color", "=", "i", "\n", "if", "colors", "is", "not", "None", ":", "\n", "                ", "color", "=", "colors", "[", "i", "]", "\n", "", "elif", "hasattr", "(", "ann", ",", "'id_'", ")", ":", "\n", "                ", "color", "=", "ann", ".", "id_", "\n", "\n", "", "text", "=", "None", "\n", "text_is_score", "=", "False", "\n", "if", "texts", "is", "not", "None", ":", "\n", "                ", "text", "=", "texts", "[", "i", "]", "\n", "", "elif", "hasattr", "(", "ann", ",", "'id_'", ")", ":", "\n", "                ", "text", "=", "'{}'", ".", "format", "(", "ann", ".", "id_", ")", "\n", "", "elif", "ann", ".", "score", "(", ")", ":", "\n", "                ", "text", "=", "'{:.0%}'", ".", "format", "(", "ann", ".", "score", "(", ")", ")", "\n", "text_is_score", "=", "True", "\n", "\n", "", "subtext", "=", "None", "\n", "if", "subtexts", "is", "not", "None", ":", "\n", "                ", "subtext", "=", "subtexts", "[", "i", "]", "\n", "", "elif", "not", "text_is_score", "and", "ann", ".", "score", "(", ")", ":", "\n", "                ", "subtext", "=", "'{:.0%}'", ".", "format", "(", "ann", ".", "score", "(", ")", ")", "\n", "\n", "", "self", ".", "annotation", "(", "ax", ",", "ann", ",", "color", "=", "color", ",", "text", "=", "text", ",", "subtext", "=", "subtext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter.annotation": [[332, 380], ["isinstance", "painters.KeypointPainter._draw_skeleton", "set", "painters.KeypointPainter._draw_skeleton", "set", "painters.KeypointPainter._draw_scales", "painters.KeypointPainter._draw_joint_confidences", "painters.KeypointPainter._draw_box", "painters.KeypointPainter._draw_text", "hasattr", "painters.KeypointPainter._draw_decoding_order", "matplotlib.cm.get_cmap", "ann.score", "zip", "zip", "ann.bbox"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_skeleton", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_skeleton", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_scales", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_joint_confidences", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_box", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_text", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_decoding_order", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.bbox"], ["", "", "def", "annotation", "(", "self", ",", "ax", ",", "ann", ",", "*", ",", "color", "=", "None", ",", "text", "=", "None", ",", "subtext", "=", "None", ")", ":", "\n", "        ", "if", "color", "is", "None", ":", "\n", "            ", "color", "=", "0", "\n", "", "if", "isinstance", "(", "color", ",", "(", "int", ",", "np", ".", "integer", ")", ")", ":", "\n", "            ", "color", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'tab20'", ")", "(", "(", "color", "%", "20", "+", "0.05", ")", "/", "20", ")", "\n", "\n", "", "kps", "=", "ann", ".", "data", "\n", "assert", "kps", ".", "shape", "[", "1", "]", "==", "3", "\n", "x", "=", "kps", "[", ":", ",", "0", "]", "*", "self", ".", "xy_scale", "\n", "y", "=", "kps", "[", ":", ",", "1", "]", "*", "self", ".", "xy_scale", "\n", "v", "=", "kps", "[", ":", ",", "2", "]", "\n", "\n", "if", "self", ".", "show_frontier_order", ":", "\n", "            ", "frontier", "=", "set", "(", "(", "s", ",", "e", ")", "for", "s", ",", "e", "in", "ann", ".", "frontier_order", ")", "\n", "frontier_skeleton_mask", "=", "[", "\n", "(", "s", "-", "1", ",", "e", "-", "1", ")", "in", "frontier", "or", "(", "e", "-", "1", ",", "s", "-", "1", ")", "in", "frontier", "\n", "for", "s", ",", "e", "in", "ann", ".", "skeleton", "\n", "]", "\n", "frontier_skeleton", "=", "[", "se", "for", "se", ",", "m", "in", "zip", "(", "ann", ".", "skeleton", ",", "frontier_skeleton_mask", ")", "if", "m", "]", "\n", "self", ".", "_draw_skeleton", "(", "ax", ",", "x", ",", "y", ",", "v", ",", "color", "=", "'black'", ",", "skeleton", "=", "frontier_skeleton", ",", "\n", "linestyle", "=", "'dotted'", ",", "linewidth", "=", "1", ")", "\n", "\n", "", "skeleton", "=", "ann", ".", "skeleton", "\n", "if", "self", ".", "show_only_decoded_connections", ":", "\n", "            ", "decoded_connections", "=", "set", "(", "(", "jsi", ",", "jti", ")", "for", "jsi", ",", "jti", ",", "_", ",", "__", "in", "ann", ".", "decoding_order", ")", "\n", "skeleton_mask", "=", "[", "\n", "(", "s", "-", "1", ",", "e", "-", "1", ")", "in", "decoded_connections", "or", "(", "e", "-", "1", ",", "s", "-", "1", ")", "in", "decoded_connections", "\n", "for", "s", ",", "e", "in", "skeleton", "\n", "]", "\n", "skeleton", "=", "[", "se", "for", "se", ",", "m", "in", "zip", "(", "skeleton", ",", "skeleton_mask", ")", "if", "m", "]", "\n", "\n", "", "self", ".", "_draw_skeleton", "(", "ax", ",", "x", ",", "y", ",", "v", ",", "color", "=", "color", ",", "skeleton", "=", "skeleton", ")", "\n", "\n", "if", "self", ".", "show_joint_scales", "and", "ann", ".", "joint_scales", "is", "not", "None", ":", "\n", "            ", "self", ".", "_draw_scales", "(", "ax", ",", "x", ",", "y", ",", "v", ",", "color", ",", "ann", ".", "joint_scales", ")", "\n", "\n", "", "if", "self", ".", "show_joint_confidences", ":", "\n", "            ", "self", ".", "_draw_joint_confidences", "(", "ax", ",", "x", ",", "y", ",", "v", ",", "color", ")", "\n", "\n", "", "if", "self", ".", "show_box", ":", "\n", "            ", "x_", ",", "y_", ",", "w_", ",", "h_", "=", "[", "v", "*", "self", ".", "xy_scale", "for", "v", "in", "ann", ".", "bbox", "(", ")", "]", "\n", "self", ".", "_draw_box", "(", "ax", ",", "x_", ",", "y_", ",", "w_", ",", "h_", ",", "color", ",", "ann", ".", "score", "(", ")", ")", "\n", "\n", "", "if", "text", "is", "not", "None", ":", "\n", "            ", "self", ".", "_draw_text", "(", "ax", ",", "x", ",", "y", ",", "v", ",", "text", ",", "color", ",", "subtext", "=", "subtext", ")", "\n", "\n", "", "if", "self", ".", "show_decoding_order", "and", "hasattr", "(", "ann", ",", "'decoding_order'", ")", ":", "\n", "            ", "self", ".", "_draw_decoding_order", "(", "ax", ",", "ann", ".", "decoding_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.painters.KeypointPainter._draw_decoding_order": [[381, 388], ["enumerate", "ax.plot", "ax.text"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_draw_decoding_order", "(", "ax", ",", "decoding_order", ")", ":", "\n", "        ", "for", "step_i", ",", "(", "jsi", ",", "jti", ",", "jsxyv", ",", "jtxyv", ")", "in", "enumerate", "(", "decoding_order", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "jsxyv", "[", "0", "]", ",", "jtxyv", "[", "0", "]", "]", ",", "[", "jsxyv", "[", "1", "]", ",", "jtxyv", "[", "1", "]", "]", ",", "'--'", ",", "color", "=", "'black'", ")", "\n", "ax", ".", "text", "(", "0.5", "*", "(", "jsxyv", "[", "0", "]", "+", "jtxyv", "[", "0", "]", ")", ",", "0.5", "*", "(", "jsxyv", "[", "1", "]", "+", "jtxyv", "[", "1", "]", ")", ",", "\n", "'{}: {} -> {}'", ".", "format", "(", "step_i", ",", "jsi", ",", "jti", ")", ",", "fontsize", "=", "8", ",", "\n", "color", "=", "'white'", ",", "bbox", "=", "{", "'facecolor'", ":", "'black'", ",", "'alpha'", ":", "0.5", ",", "'linewidth'", ":", "0", "}", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_scored.CafScored.__init__": [[16, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cifhr", ",", "config", ":", "FieldConfig", ",", "skeleton", ",", "*", ",", "score_th", "=", "None", ",", "cif_floor", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "cifhr", "=", "cifhr", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "skeleton", "=", "skeleton", "\n", "self", ".", "score_th", "=", "score_th", "or", "self", ".", "default_score_th", "\n", "self", ".", "cif_floor", "=", "cif_floor", "\n", "\n", "self", ".", "forward", "=", "None", "\n", "self", ".", "backward", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_scored.CafScored.directed": [[26, 31], ["None"], "methods", ["None"], ["", "def", "directed", "(", "self", ",", "caf_i", ",", "forward", ")", ":", "\n", "        ", "if", "forward", ":", "\n", "            ", "return", "self", ".", "forward", "[", "caf_i", "]", ",", "self", ".", "backward", "[", "caf_i", "]", "\n", "\n", "", "return", "self", ".", "backward", "[", "caf_i", "]", ",", "self", ".", "forward", "[", "caf_i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_scored.CafScored.fill_caf": [[32, 88], ["time.perf_counter", "enumerate", "LOG.debug", "numpy.copy", "numpy.copy", "numpy.concatenate", "numpy.copy", "numpy.concatenate", "sum", "sum", "numpy.empty", "numpy.empty", "numpy.any", "numpy.linalg.norm", "numpy.linalg.norm", "functional.scalar_values", "functional.scalar_values", "time.perf_counter", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "fill_caf", "(", "self", ",", "caf", ",", "stride", ",", "min_distance", "=", "0.0", ",", "max_distance", "=", "None", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "if", "self", ".", "forward", "is", "None", ":", "\n", "            ", "self", ".", "forward", "=", "[", "np", ".", "empty", "(", "(", "9", ",", "0", ")", ",", "dtype", "=", "caf", ".", "dtype", ")", "for", "_", "in", "caf", "]", "\n", "self", ".", "backward", "=", "[", "np", ".", "empty", "(", "(", "9", ",", "0", ")", ",", "dtype", "=", "caf", ".", "dtype", ")", "for", "_", "in", "caf", "]", "\n", "\n", "", "for", "caf_i", ",", "nine", "in", "enumerate", "(", "caf", ")", ":", "\n", "            ", "assert", "nine", ".", "shape", "[", "0", "]", "==", "9", "\n", "\n", "mask", "=", "nine", "[", "0", "]", ">", "self", ".", "score_th", "\n", "if", "not", "np", ".", "any", "(", "mask", ")", ":", "\n", "                ", "continue", "\n", "", "nine", "=", "nine", "[", ":", ",", "mask", "]", "\n", "\n", "if", "min_distance", ":", "\n", "                ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "nine", "[", "1", ":", "3", "]", "-", "nine", "[", "5", ":", "7", "]", ",", "axis", "=", "0", ")", "\n", "mask_dist", "=", "dist", ">", "min_distance", "/", "stride", "\n", "nine", "=", "nine", "[", ":", ",", "mask_dist", "]", "\n", "\n", "", "if", "max_distance", ":", "\n", "                ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "nine", "[", "1", ":", "3", "]", "-", "nine", "[", "5", ":", "7", "]", ",", "axis", "=", "0", ")", "\n", "mask_dist", "=", "dist", "<", "max_distance", "/", "stride", "\n", "nine", "=", "nine", "[", ":", ",", "mask_dist", "]", "\n", "\n", "", "nine", "=", "np", ".", "copy", "(", "nine", ")", "\n", "nine", "[", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ")", ",", ":", "]", "*=", "stride", "\n", "scores", "=", "nine", "[", "0", "]", "\n", "\n", "j1i", "=", "self", ".", "skeleton", "[", "caf_i", "]", "[", "0", "]", "-", "1", "\n", "if", "self", ".", "cif_floor", "<", "1.0", "and", "j1i", "<", "len", "(", "self", ".", "cifhr", ")", ":", "\n", "                ", "cifhr_b", "=", "scalar_values", "(", "self", ".", "cifhr", "[", "j1i", "]", ",", "nine", "[", "1", "]", ",", "nine", "[", "2", "]", ",", "default", "=", "0.0", ")", "\n", "scores_b", "=", "scores", "*", "(", "self", ".", "cif_floor", "+", "(", "1.0", "-", "self", ".", "cif_floor", ")", "*", "cifhr_b", ")", "\n", "", "else", ":", "\n", "                ", "scores_b", "=", "scores", "\n", "", "mask_b", "=", "scores_b", ">", "self", ".", "score_th", "\n", "d9_b", "=", "np", ".", "copy", "(", "nine", "[", ":", ",", "mask_b", "]", "[", "(", "0", ",", "5", ",", "6", ",", "7", ",", "8", ",", "1", ",", "2", ",", "3", ",", "4", ")", ",", ":", "]", ")", "\n", "d9_b", "[", "0", "]", "=", "scores_b", "[", "mask_b", "]", "\n", "self", ".", "backward", "[", "caf_i", "]", "=", "np", ".", "concatenate", "(", "(", "self", ".", "backward", "[", "caf_i", "]", ",", "d9_b", ")", ",", "axis", "=", "1", ")", "\n", "\n", "j2i", "=", "self", ".", "skeleton", "[", "caf_i", "]", "[", "1", "]", "-", "1", "\n", "if", "self", ".", "cif_floor", "<", "1.0", "and", "j2i", "<", "len", "(", "self", ".", "cifhr", ")", ":", "\n", "                ", "cifhr_f", "=", "scalar_values", "(", "self", ".", "cifhr", "[", "j2i", "]", ",", "nine", "[", "5", "]", ",", "nine", "[", "6", "]", ",", "default", "=", "0.0", ")", "\n", "scores_f", "=", "scores", "*", "(", "self", ".", "cif_floor", "+", "(", "1.0", "-", "self", ".", "cif_floor", ")", "*", "cifhr_f", ")", "\n", "", "else", ":", "\n", "                ", "scores_f", "=", "scores", "\n", "", "mask_f", "=", "scores_f", ">", "self", ".", "score_th", "\n", "d9_f", "=", "np", ".", "copy", "(", "nine", "[", ":", ",", "mask_f", "]", ")", "\n", "d9_f", "[", "0", "]", "=", "scores_f", "[", "mask_f", "]", "\n", "self", ".", "forward", "[", "caf_i", "]", "=", "np", ".", "concatenate", "(", "(", "self", ".", "forward", "[", "caf_i", "]", ",", "d9_f", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "LOG", ".", "debug", "(", "'scored caf (%d, %d) in %.3fs'", ",", "\n", "sum", "(", "f", ".", "shape", "[", "1", "]", "for", "f", "in", "self", ".", "forward", ")", ",", "\n", "sum", "(", "b", ".", "shape", "[", "1", "]", "for", "b", "in", "self", ".", "backward", ")", ",", "\n", "time", ".", "perf_counter", "(", ")", "-", "start", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_scored.CafScored.fill": [[89, 99], ["zip", "caf_scored.CafScored.fill_caf"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_scored.CafScored.fill_caf"], ["", "def", "fill", "(", "self", ",", "fields", ")", ":", "\n", "        ", "for", "caf_i", ",", "stride", ",", "min_distance", ",", "max_distance", "in", "zip", "(", "\n", "self", ".", "config", ".", "caf_indices", ",", "\n", "self", ".", "config", ".", "caf_strides", ",", "\n", "self", ".", "config", ".", "caf_min_distances", ",", "\n", "self", ".", "config", ".", "caf_max_distances", ")", ":", "\n", "            ", "self", ".", "fill_caf", "(", "fields", "[", "caf_i", "]", ",", "stride", ",", "\n", "min_distance", "=", "min_distance", ",", "max_distance", "=", "max_distance", ")", "\n", "\n", "", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Keypoints.annotations": [[17, 58], ["time.perf_counter", "occupancy.Occupancy", "sorted", "sorted", "LOG.debug", "enumerate", "LOG.debug", "nms.Keypoints.occupancy_visualizer.predicted", "len", "int", "int", "len", "len", "zip", "occupancy.Occupancy.get", "time.perf_counter", "ann.score", "occupancy.Occupancy.set", "ann.score", "max", "max", "a.score", "a.score", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.predicted", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score"], ["def", "annotations", "(", "self", ",", "anns", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "ann", ".", "data", "[", "ann", ".", "data", "[", ":", ",", "2", "]", "<", "self", ".", "keypoint_threshold", "]", "=", "0.0", "\n", "", "anns", "=", "[", "ann", "for", "ann", "in", "anns", "if", "ann", ".", "score", "(", ")", ">=", "self", ".", "instance_threshold", "]", "\n", "\n", "if", "not", "anns", ":", "\n", "            ", "return", "anns", "\n", "\n", "", "occupied", "=", "Occupancy", "(", "(", "\n", "len", "(", "anns", "[", "0", "]", ".", "data", ")", ",", "\n", "int", "(", "max", "(", "np", ".", "max", "(", "ann", ".", "data", "[", ":", ",", "1", "]", ")", "for", "ann", "in", "anns", ")", "+", "1", ")", ",", "\n", "int", "(", "max", "(", "np", ".", "max", "(", "ann", ".", "data", "[", ":", ",", "0", "]", ")", "for", "ann", "in", "anns", ")", "+", "1", ")", ",", "\n", ")", ",", "2", ",", "min_scale", "=", "4", ")", "\n", "\n", "anns", "=", "sorted", "(", "anns", ",", "key", "=", "lambda", "a", ":", "-", "a", ".", "score", "(", ")", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "assert", "ann", ".", "joint_scales", "is", "not", "None", "\n", "assert", "len", "(", "occupied", ")", "==", "len", "(", "ann", ".", "data", ")", "\n", "for", "f", ",", "(", "xyv", ",", "joint_s", ")", "in", "enumerate", "(", "zip", "(", "ann", ".", "data", ",", "ann", ".", "joint_scales", ")", ")", ":", "\n", "                ", "v", "=", "xyv", "[", "2", "]", "\n", "if", "v", "==", "0.0", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "occupied", ".", "get", "(", "f", ",", "xyv", "[", "0", "]", ",", "xyv", "[", "1", "]", ")", ":", "\n", "                    ", "xyv", "[", "2", "]", "*=", "self", ".", "suppression", "\n", "", "else", ":", "\n", "                    ", "occupied", ".", "set", "(", "f", ",", "xyv", "[", "0", "]", ",", "xyv", "[", "1", "]", ",", "joint_s", ")", "# joint_s = 2 * sigma", "\n", "\n", "", "", "", "if", "self", ".", "occupancy_visualizer", "is", "not", "None", ":", "\n", "            ", "LOG", ".", "debug", "(", "'Occupied fields after NMS'", ")", "\n", "self", ".", "occupancy_visualizer", ".", "predicted", "(", "occupied", ")", "\n", "\n", "", "for", "ann", "in", "anns", ":", "\n", "            ", "ann", ".", "data", "[", "ann", ".", "data", "[", ":", ",", "2", "]", "<", "self", ".", "keypoint_threshold", "]", "=", "0.0", "\n", "", "anns", "=", "[", "ann", "for", "ann", "in", "anns", "if", "ann", ".", "score", "(", ")", ">=", "self", ".", "instance_threshold", "]", "\n", "anns", "=", "sorted", "(", "anns", ",", "key", "=", "lambda", "a", ":", "-", "a", ".", "score", "(", ")", ")", "\n", "\n", "LOG", ".", "debug", "(", "'nms = %.3fs'", ",", "time", ".", "perf_counter", "(", ")", "-", "start", ")", "\n", "return", "anns", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.bbox_iou": [[67, 78], ["numpy.expand_dims", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "bbox_iou", "(", "box", ",", "other_boxes", ")", ":", "\n", "        ", "box", "=", "np", ".", "expand_dims", "(", "box", ",", "0", ")", "\n", "x1", "=", "np", ".", "maximum", "(", "box", "[", ":", ",", "0", "]", ",", "other_boxes", "[", ":", ",", "0", "]", ")", "\n", "y1", "=", "np", ".", "maximum", "(", "box", "[", ":", ",", "1", "]", ",", "other_boxes", "[", ":", ",", "1", "]", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "box", "[", ":", ",", "0", "]", "+", "box", "[", ":", ",", "2", "]", ",", "other_boxes", "[", ":", ",", "0", "]", "+", "other_boxes", "[", ":", ",", "2", "]", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "box", "[", ":", ",", "1", "]", "+", "box", "[", ":", ",", "3", "]", ",", "other_boxes", "[", ":", ",", "1", "]", "+", "other_boxes", "[", ":", ",", "3", "]", ")", "\n", "inter_area", "=", "np", ".", "maximum", "(", "0.0", ",", "x2", "-", "x1", ")", "*", "np", ".", "maximum", "(", "0.0", ",", "y2", "-", "y1", ")", "\n", "box_area", "=", "box", "[", ":", ",", "2", "]", "*", "box", "[", ":", ",", "3", "]", "\n", "other_areas", "=", "other_boxes", "[", ":", ",", "2", "]", "*", "other_boxes", "[", ":", ",", "3", "]", "\n", "return", "inter_area", "/", "(", "box_area", "+", "other_areas", "-", "inter_area", "+", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations": [[79, 103], ["time.perf_counter", "sorted", "numpy.stack", "enumerate", "sorted", "LOG.debug", "nms.Detection.bbox_iou", "numpy.max", "time.perf_counter"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.bbox_iou"], ["", "def", "annotations", "(", "self", ",", "anns", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "anns", "=", "[", "ann", "for", "ann", "in", "anns", "if", "ann", ".", "score", ">=", "self", ".", "instance_threshold", "]", "\n", "if", "not", "anns", ":", "\n", "            ", "return", "anns", "\n", "", "anns", "=", "sorted", "(", "anns", ",", "key", "=", "lambda", "a", ":", "-", "a", ".", "score", ")", "\n", "\n", "all_boxes", "=", "np", ".", "stack", "(", "[", "ann", ".", "bbox", "for", "ann", "in", "anns", "]", ")", "\n", "for", "ann_i", ",", "ann", "in", "enumerate", "(", "anns", "[", "1", ":", "]", ",", "start", "=", "1", ")", ":", "\n", "            ", "mask", "=", "[", "ann", ".", "score", ">=", "self", ".", "instance_threshold", "for", "ann", "in", "anns", "[", ":", "ann_i", "]", "]", "\n", "ious", "=", "self", ".", "bbox_iou", "(", "ann", ".", "bbox", ",", "all_boxes", "[", ":", "ann_i", "]", "[", "mask", "]", ")", "\n", "max_iou", "=", "np", ".", "max", "(", "ious", ")", "\n", "\n", "if", "max_iou", ">", "self", ".", "iou_threshold", ":", "\n", "                ", "ann", ".", "score", "*=", "self", ".", "suppression", "\n", "", "elif", "max_iou", ">", "self", ".", "iou_threshold_soft", ":", "\n", "                ", "ann", ".", "score", "*=", "self", ".", "suppression_soft", "\n", "\n", "", "", "anns", "=", "[", "ann", "for", "ann", "in", "anns", "if", "ann", ".", "score", ">=", "self", ".", "instance_threshold", "]", "\n", "anns", "=", "sorted", "(", "anns", ",", "key", "=", "lambda", "a", ":", "-", "a", ".", "score", ")", "\n", "\n", "LOG", ".", "debug", "(", "'nms = %.3fs'", ",", "time", ".", "perf_counter", "(", ")", "-", "start", ")", "\n", "return", "anns", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.__init__": [[11, 27], ["numpy.zeros", "LOG.debug", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "reduction", ",", "*", ",", "min_scale", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "shape", ")", "==", "3", "\n", "if", "min_scale", "is", "None", ":", "\n", "            ", "min_scale", "=", "reduction", "\n", "", "assert", "min_scale", ">=", "reduction", "\n", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "min_scale_reduced", "=", "min_scale", "/", "reduction", "\n", "\n", "self", ".", "occupancy", "=", "np", ".", "zeros", "(", "(", "\n", "shape", "[", "0", "]", ",", "\n", "int", "(", "shape", "[", "1", "]", "/", "reduction", ")", ",", "\n", "int", "(", "shape", "[", "2", "]", "/", "reduction", ")", ",", "\n", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "LOG", ".", "debug", "(", "'shape = %s, min_scale = %d'", ",", "self", ".", "occupancy", ".", "shape", ",", "self", ".", "min_scale_reduced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.__len__": [[28, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "occupancy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set": [[31, 40], ["round", "round", "round", "utils.scalar_square_add_single", "len", "max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.scalar_square_add_single"], ["", "def", "set", "(", "self", ",", "f", ",", "x", ",", "y", ",", "sigma", ")", ":", "\n", "        ", "\"\"\"Setting needs to be centered at the rounded (x, y).\"\"\"", "\n", "if", "f", ">=", "len", "(", "self", ".", "occupancy", ")", ":", "\n", "            ", "return", "\n", "\n", "", "xi", "=", "round", "(", "x", "/", "self", ".", "reduction", ")", "\n", "yi", "=", "round", "(", "y", "/", "self", ".", "reduction", ")", "\n", "si", "=", "round", "(", "max", "(", "self", ".", "min_scale_reduced", ",", "sigma", "/", "self", ".", "reduction", ")", ")", "\n", "scalar_square_add_single", "(", "self", ".", "occupancy", "[", "f", "]", ",", "xi", ",", "yi", ",", "si", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.get": [[41, 48], ["functional.scalar_nonzero_clipped_with_reduction", "len"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "f", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Getting needs to be done at the floor of (x, y).\"\"\"", "\n", "if", "f", ">=", "len", "(", "self", ".", "occupancy", ")", ":", "\n", "            ", "return", "1.0", "\n", "\n", "# floor is done in scalar_nonzero_clipped below", "\n", "", "return", "scalar_nonzero_clipped_with_reduction", "(", "self", ".", "occupancy", "[", "f", "]", ",", "x", ",", "y", ",", "self", ".", "reduction", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_seeds.CafSeeds.__init__": [[10, 23], ["LOG.debug", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "__init__", "(", "self", ",", "seed_threshold", ",", "*", ",", "keypoints", ",", "skeleton", ",", "\n", "score_scale", "=", "1.0", ",", "\n", "debug_visualizer", "=", "None", ")", ":", "\n", "        ", "self", ".", "seed_threshold", "=", "seed_threshold", "\n", "self", ".", "score_scale", "=", "score_scale", "\n", "self", ".", "keypoints", "=", "keypoints", "\n", "self", ".", "skeleton_m1", "=", "np", ".", "array", "(", "skeleton", ")", "-", "1", "\n", "self", ".", "debug_visualizer", "=", "debug_visualizer", "\n", "\n", "LOG", ".", "debug", "(", "'seed threshold = %f'", ",", "self", ".", "seed_threshold", ")", "\n", "\n", "self", ".", "seeds", "=", "[", "]", "\n", "self", ".", "seed_values", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_seeds.CafSeeds.fill": [[24, 44], ["time.perf_counter", "enumerate", "LOG.debug", "numpy.zeros", "zip", "caf_seeds.CafSeeds.seeds.append", "sum", "caf_seeds.CafSeeds.seed_values.append", "time.perf_counter", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "fill", "(", "self", ",", "caf", ",", "stride", "=", "1.0", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "for", "field_i", ",", "p", "in", "enumerate", "(", "caf", ")", ":", "\n", "            ", "p", "=", "p", "[", ":", ",", ":", ",", "p", "[", "0", "]", "[", "0", "]", ">", "self", ".", "seed_threshold", "]", "\n", "(", "v1", ",", "x1", ",", "y1", ",", "_", ",", "s1", ")", ",", "(", "__", ",", "x2", ",", "y2", ",", "___", ",", "s2", ")", "=", "p", "\n", "\n", "j1i", ",", "j2i", "=", "self", ".", "skeleton_m1", "[", "field_i", "]", "\n", "new_seeds", "=", "np", ".", "zeros", "(", "(", "len", "(", "v1", ")", ",", "len", "(", "self", ".", "keypoints", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "new_seed", ",", "vv", ",", "xx1", ",", "yy1", ",", "ss1", ",", "xx2", ",", "yy2", ",", "ss2", "in", "zip", "(", "\n", "new_seeds", ",", "v1", ",", "x1", ",", "y1", ",", "s1", ",", "x2", ",", "y2", ",", "s2", ")", ":", "\n", "                ", "new_seed", "[", "j1i", "]", "=", "xx1", ",", "yy1", ",", "ss1", ",", "vv", "\n", "new_seed", "[", "j2i", "]", "=", "xx2", ",", "yy2", ",", "ss2", ",", "vv", "\n", "self", ".", "seed_values", ".", "append", "(", "vv", ")", "\n", "\n", "", "new_seeds", "[", ":", ",", ":", ",", "0", ":", "3", "]", "*=", "stride", "\n", "self", ".", "seeds", ".", "append", "(", "new_seeds", ")", "\n", "\n", "", "LOG", ".", "debug", "(", "'seeds %d, %.3fs'", ",", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "self", ".", "seeds", ")", ",", "time", ".", "perf_counter", "(", ")", "-", "start", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_seeds.CafSeeds.get": [[45, 51], ["caf_seeds.CafSeeds.debug_visualizer.seeds", "numpy.argsort", "numpy.concatenate"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "debug_visualizer", ":", "\n", "            ", "self", ".", "debug_visualizer", ".", "seeds", "(", "self", ".", "seeds", ")", "\n", "\n", "", "order", "=", "np", ".", "argsort", "(", "self", ".", "seed_values", ")", "[", ":", ":", "-", "1", "]", "\n", "return", "np", ".", "concatenate", "(", "self", ".", "seeds", ",", "axis", "=", "0", ")", "[", "order", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_seeds.CafSeeds.fill_sequence": [[52, 59], ["zip", "caf_seeds.CafSeeds.fill"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill"], ["", "def", "fill_sequence", "(", "self", ",", "cafs", ",", "strides", "=", "None", ")", ":", "\n", "        ", "if", "strides", "is", "None", ":", "\n", "            ", "strides", "=", "[", "1.0", "for", "_", "in", "cafs", "]", "\n", "", "for", "caf", ",", "stride", "in", "zip", "(", "cafs", ",", "strides", ")", ":", "\n", "            ", "self", ".", "fill", "(", "caf", ",", "stride", ")", "\n", "\n", "", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.profiler.Profiler.__init__": [[10, 17], ["cProfile.Profile"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "function_to_profile", ",", "*", ",", "profile", "=", "None", ",", "out_name", "=", "None", ")", ":", "\n", "        ", "if", "profile", "is", "None", ":", "\n", "            ", "profile", "=", "cProfile", ".", "Profile", "(", ")", "\n", "\n", "", "self", ".", "function_to_profile", "=", "function_to_profile", "\n", "self", ".", "profile", "=", "profile", "\n", "self", ".", "out_name", "=", "out_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.profiler.Profiler.__call__": [[18, 34], ["profiler.Profiler.profile.enable", "profiler.Profiler.function_to_profile", "profiler.Profiler.profile.disable", "io.StringIO", "pstats.Stats", "ps.sort_stats.sort_stats.sort_stats", "ps.sort_stats.sort_stats.print_stats", "print", "LOG.info", "ps.sort_stats.sort_stats.dump_stats", "io.StringIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "profile", ".", "enable", "(", ")", "\n", "\n", "result", "=", "self", ".", "function_to_profile", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "profile", ".", "disable", "(", ")", "\n", "iostream", "=", "io", ".", "StringIO", "(", ")", "\n", "ps", "=", "pstats", ".", "Stats", "(", "self", ".", "profile", ",", "stream", "=", "iostream", ")", "\n", "ps", "=", "ps", ".", "sort_stats", "(", "'tottime'", ")", "\n", "ps", ".", "print_stats", "(", ")", "\n", "if", "self", ".", "out_name", ":", "\n", "            ", "LOG", ".", "info", "(", "'writing profile file %s'", ",", "self", ".", "out_name", ")", "\n", "ps", ".", "dump_stats", "(", "self", ".", "out_name", ")", "\n", "", "print", "(", "iostream", ".", "getvalue", "(", ")", ")", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifHr.__init__": [[19, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ":", "FieldConfig", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "accumulated", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifHr.fill_cif": [[23, 25], ["cif_hr.CifHr.fill_multiple"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifHr.fill_multiple"], ["", "def", "fill_cif", "(", "self", ",", "cif", ",", "stride", ",", "min_scale", "=", "0.0", ")", ":", "\n", "        ", "return", "self", ".", "fill_multiple", "(", "[", "cif", "]", ",", "stride", ",", "min_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifHr.accumulate": [[26, 41], ["numpy.maximum", "functional.scalar_square_add_gauss_with_max"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ",", "len_cifs", ",", "t", ",", "p", ",", "stride", ",", "min_scale", ")", ":", "\n", "        ", "p", "=", "p", "[", ":", ",", "p", "[", "0", "]", ">", "self", ".", "v_threshold", "]", "\n", "if", "min_scale", ":", "\n", "            ", "p", "=", "p", "[", ":", ",", "p", "[", "4", "]", ">", "min_scale", "/", "stride", "]", "\n", "\n", "", "v", ",", "x", ",", "y", ",", "_", ",", "scale", "=", "p", "\n", "x", "=", "x", "*", "stride", "\n", "y", "=", "y", "*", "stride", "\n", "sigma", "=", "np", ".", "maximum", "(", "1.0", ",", "0.5", "*", "scale", "*", "stride", ")", "\n", "\n", "# Occupancy covers 2sigma.", "\n", "# Restrict this accumulation to 1sigma so that seeds for the same joint", "\n", "# are properly suppressed.", "\n", "scalar_square_add_gauss_with_max", "(", "\n", "t", ",", "x", ",", "y", ",", "sigma", ",", "v", "/", "self", ".", "neighbors", "/", "len_cifs", ",", "truncate", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifHr.fill_multiple": [[42, 66], ["time.perf_counter", "LOG.debug", "numpy.zeros", "numpy.zeros", "zip", "numpy.maximum", "int", "int", "cif_hr.CifHr.accumulate", "time.perf_counter", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifDetHr.accumulate"], ["", "def", "fill_multiple", "(", "self", ",", "cifs", ",", "stride", ",", "min_scale", "=", "0.0", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "if", "self", ".", "accumulated", "is", "None", ":", "\n", "            ", "shape", "=", "(", "\n", "cifs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", "int", "(", "(", "cifs", "[", "0", "]", ".", "shape", "[", "2", "]", "-", "1", ")", "*", "stride", "+", "1", ")", ",", "\n", "int", "(", "(", "cifs", "[", "0", "]", ".", "shape", "[", "3", "]", "-", "1", ")", "*", "stride", "+", "1", ")", ",", "\n", ")", "\n", "ta", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "ta", "=", "np", ".", "zeros", "(", "self", ".", "accumulated", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "for", "cif", "in", "cifs", ":", "\n", "            ", "for", "t", ",", "p", "in", "zip", "(", "ta", ",", "cif", ")", ":", "\n", "                ", "self", ".", "accumulate", "(", "len", "(", "cifs", ")", ",", "t", ",", "p", ",", "stride", ",", "min_scale", ")", "\n", "\n", "", "", "if", "self", ".", "accumulated", "is", "None", ":", "\n", "            ", "self", ".", "accumulated", "=", "ta", "\n", "", "else", ":", "\n", "            ", "self", ".", "accumulated", "=", "np", ".", "maximum", "(", "ta", ",", "self", ".", "accumulated", ")", "\n", "\n", "", "LOG", ".", "debug", "(", "'target_intensities %.3fs'", ",", "time", ".", "perf_counter", "(", ")", "-", "start", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifHr.fill": [[67, 82], ["cif_hr.CifHr.debug_visualizer.predicted", "len", "zip", "zip", "cif_hr.CifHr.fill_multiple", "cif_hr.CifHr.fill_cif"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.predicted", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifHr.fill_multiple", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifDetSeeds.fill_cif"], ["", "def", "fill", "(", "self", ",", "fields", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "config", ".", "cif_indices", ")", "==", "10", ":", "\n", "            ", "for", "cif_i1", ",", "cif_i2", ",", "stride", ",", "min_scale", "in", "zip", "(", "self", ".", "config", ".", "cif_indices", "[", ":", "5", "]", ",", "\n", "self", ".", "config", ".", "cif_indices", "[", "5", ":", "]", ",", "\n", "self", ".", "config", ".", "cif_strides", "[", ":", "5", "]", ",", "\n", "self", ".", "config", ".", "cif_min_scales", "[", ":", "5", "]", ")", ":", "\n", "                ", "self", ".", "fill_multiple", "(", "[", "fields", "[", "cif_i1", "]", ",", "fields", "[", "cif_i2", "]", "]", ",", "stride", ",", "min_scale", "=", "min_scale", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "cif_i", ",", "stride", ",", "min_scale", "in", "zip", "(", "self", ".", "config", ".", "cif_indices", ",", "\n", "self", ".", "config", ".", "cif_strides", ",", "\n", "self", ".", "config", ".", "cif_min_scales", ")", ":", "\n", "                ", "self", ".", "fill_cif", "(", "fields", "[", "cif_i", "]", ",", "stride", ",", "min_scale", "=", "min_scale", ")", "\n", "\n", "", "", "self", ".", "debug_visualizer", ".", "predicted", "(", "self", ".", "accumulated", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_hr.CifDetHr.accumulate": [[85, 101], ["numpy.maximum", "functional.scalar_square_add_gauss_with_max", "numpy.minimum"], "methods", ["None"], ["    ", "def", "accumulate", "(", "self", ",", "len_cifs", ",", "t", ",", "p", ",", "stride", ",", "min_scale", ")", ":", "\n", "        ", "p", "=", "p", "[", ":", ",", "p", "[", "0", "]", ">", "self", ".", "v_threshold", "]", "\n", "if", "min_scale", ":", "\n", "            ", "p", "=", "p", "[", ":", ",", "p", "[", "4", "]", ">", "min_scale", "/", "stride", "]", "\n", "p", "=", "p", "[", ":", ",", "p", "[", "5", "]", ">", "min_scale", "/", "stride", "]", "\n", "\n", "", "v", ",", "x", ",", "y", ",", "_", ",", "w", ",", "h", ",", "_", "=", "p", "\n", "x", "=", "x", "*", "stride", "\n", "y", "=", "y", "*", "stride", "\n", "sigma", "=", "np", ".", "maximum", "(", "1.0", ",", "0.1", "*", "np", ".", "minimum", "(", "w", ",", "h", ")", "*", "stride", ")", "\n", "\n", "# Occupancy covers 2sigma.", "\n", "# Restrict this accumulation to 1sigma so that seeds for the same joint", "\n", "# are properly suppressed.", "\n", "scalar_square_add_gauss_with_max", "(", "\n", "t", ",", "x", ",", "y", ",", "sigma", ",", "v", "/", "self", ".", "neighbors", "/", "len_cifs", ",", "truncate", "=", "1.0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.cli": [[18, 63], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["group", ".", "add_argument", "(", "'--cif-side-length'", ",", "default", "=", "Cif", ".", "side_length", ",", "type", "=", "int", ",", "\n", "help", "=", "'side length of the CIF field'", ")", "\n", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "'CAF encoder'", ")", "\n", "group", ".", "add_argument", "(", "'--caf-min-size'", ",", "default", "=", "Caf", ".", "min_size", ",", "type", "=", "int", ",", "\n", "help", "=", "'min side length of the CAF field'", ")", "\n", "group", ".", "add_argument", "(", "'--caf-fixed-size'", ",", "default", "=", "Caf", ".", "fixed_size", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'fixed caf size'", ")", "\n", "group", ".", "add_argument", "(", "'--caf-aspect-ratio'", ",", "default", "=", "Caf", ".", "aspect_ratio", ",", "type", "=", "float", ",", "\n", "help", "=", "'CAF width relative to its length'", ")", "\n", "\n", "\n", "", "def", "configure", "(", "args", ")", ":", "\n", "# configure CIF", "\n", "    ", "Cif", ".", "side_length", "=", "args", ".", "cif_side_length", "\n", "\n", "# configure CAF", "\n", "Caf", ".", "min_size", "=", "args", ".", "caf_min_size", "\n", "Caf", ".", "fixed_size", "=", "args", ".", "caf_fixed_size", "\n", "Caf", ".", "aspect_ratio", "=", "args", ".", "caf_aspect_ratio", "\n", "\n", "\n", "", "def", "factory", "(", "headnets", ",", "basenet_stride", ")", ":", "\n", "    ", "return", "[", "factory_head", "(", "head_net", ",", "basenet_stride", ")", "for", "head_net", "in", "headnets", "]", "\n", "\n", "\n", "", "def", "factory_head", "(", "head_net", ":", "network", ".", "heads", ".", "CompositeField", ",", "basenet_stride", ")", ":", "\n", "    ", "meta", "=", "head_net", ".", "meta", "\n", "stride", "=", "head_net", ".", "stride", "(", "basenet_stride", ")", "\n", "\n", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "DetectionMeta", ")", ":", "\n", "        ", "n_categories", "=", "len", "(", "meta", ".", "categories", ")", "\n", "LOG", ".", "info", "(", "'selected encoder CIFDET for %s with %d categories'", ",", "meta", ".", "name", ",", "n_categories", ")", "\n", "vis", "=", "visualizer", ".", "CifDet", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "categories", "=", "meta", ".", "categories", ")", "\n", "return", "CifDet", "(", "n_categories", ",", "\n", "AnnRescalerDet", "(", "stride", ",", "n_categories", ")", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "IntensityMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder CIF for %s'", ",", "meta", ".", "name", ")", "\n", "vis", "=", "visualizer", ".", "Cif", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "keypoints", "=", "meta", ".", "keypoints", ",", "skeleton", "=", "meta", ".", "draw_skeleton", ")", "\n", "return", "Cif", "(", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ",", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.configure": [[65, 100], ["getattr"], "function", ["None"], ["visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "AssociationMeta", ")", ":", "\n", "        ", "n_keypoints", "=", "len", "(", "meta", ".", "keypoints", ")", "\n", "LOG", ".", "info", "(", "'selected encoder CAF for %s'", ",", "meta", ".", "name", ")", "\n", "vis", "=", "visualizer", ".", "Caf", "(", "meta", ".", "name", ",", "\n", "stride", "=", "stride", ",", "\n", "keypoints", "=", "meta", ".", "keypoints", ",", "skeleton", "=", "meta", ".", "skeleton", ")", "\n", "return", "Caf", "(", "AnnRescaler", "(", "stride", ",", "n_keypoints", ",", "meta", ".", "pose", ")", ",", "\n", "headname", "=", "meta", ".", "name", ",", "\n", "skeleton", "=", "meta", ".", "skeleton", ",", "\n", "sigmas", "=", "meta", ".", "sigmas", ",", "\n", "sparse_skeleton", "=", "meta", ".", "sparse_skeleton", ",", "\n", "only_in_field_of_view", "=", "meta", ".", "only_in_field_of_view", ",", "\n", "visualizer", "=", "vis", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "ParsingMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder PDF for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Pdf", "(", "n_fields", "=", "meta", ".", "n_fields", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "OffsetMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder Offset for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Offset", "(", "\n", "rescaler", "=", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ",", "\n", "n_fields", "=", "meta", ".", "n_fields", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "CascadeMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder cascade for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Cascade", "(", "rescaler", "=", "AnnRescaler", "(", "stride", ",", "len", "(", "meta", ".", "keypoints", ")", ",", "meta", ".", "pose", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "meta", ",", "network", ".", "heads", ".", "CenterMeta", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "'selected encoder center for %s'", ",", "meta", ".", "name", ")", "\n", "return", "Pcf", "(", ")", "\n", "\n", "", "raise", "Exception", "(", "'unknown head to create an encoder: {}'", ".", "format", "(", "meta", ".", "name", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_from_args": [[102, 121], ["factory.configure", "factory.factory_decode", "profiler.Profiler", "profiler_autograd.ProfilerAutograd"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_decode"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.factory.factory_decode": [[123, 215], ["tuple", "LOG.debug", "isinstance", "field_config.FieldConfig", "generator.cifdet.CifDet", "isinstance", "isinstance", "field_config.FieldConfig", "generator.cifcaf.CifCaf", "generator.dummy_generator.DummyGenerator", "visualizer.CifDet", "visualizer.Cif", "visualizer.Caf", "head_nets[].stride", "head_nets[].stride", "head_nets[].stride", "head_nets[].stride", "head_nets[].stride", "head_nets[].stride", "head_nets[].stride", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.stride", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.stride", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.stride", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.stride", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.stride", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.stride", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.heads.CompositeFieldFused.stride"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.__init__": [[9, 20], ["super().__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", "=", "35", ")", ":", "\n", "        ", "super", "(", "InstanceScorer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "compute_layers", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "in_features", ",", "64", ")", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "64", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward": [[22, 24], ["instance_scorer.InstanceScorer.compute_layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "return", "self", ".", "compute_layers", "(", "x", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.from_annotation": [[25, 31], ["torch.tensor().float", "torch.no_grad", "float", "torch.tensor", "instance_scorer.InstanceScorer.forward().item", "ann.joint_scales.tolist", "instance_scorer.InstanceScorer.forward", "ann.data[].tolist", "ann.scale"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScorer.forward", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale"], ["", "def", "from_annotation", "(", "self", ",", "ann", ")", ":", "\n", "        ", "v", "=", "torch", ".", "tensor", "(", "[", "ann", ".", "scale", "(", ")", "]", "+", "\n", "ann", ".", "data", "[", ":", ",", "2", "]", ".", "tolist", "(", ")", "+", "\n", "ann", ".", "joint_scales", ".", "tolist", "(", ")", ")", ".", "float", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "float", "(", "self", ".", "forward", "(", "v", ")", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScoreRecorder.__init__": [[34, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Drop in replacement for InstanceScorer that records the\n        ground truth dataset instead.\"\"\"", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "next_gt", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScoreRecorder.set_gt": [[40, 43], ["None"], "methods", ["None"], ["", "def", "set_gt", "(", "self", ",", "gt", ")", ":", "\n", "        ", "assert", "self", ".", "next_gt", "is", "None", "\n", "self", ".", "next_gt", "=", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScoreRecorder.from_annotation": [[44, 73], ["copy.deepcopy", "instance_scorer.InstanceScoreRecorder.data.append", "copy.deepcopy.remove", "numpy.mean", "instance_scorer.InstanceScoreRecorder.data.append", "numpy.any", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean"], ["", "def", "from_annotation", "(", "self", ",", "annotations", ")", ":", "\n", "        ", "gt", "=", "copy", ".", "deepcopy", "(", "self", ".", "next_gt", ")", "\n", "for", "ann", "in", "annotations", ":", "\n", "            ", "kps", "=", "ann", ".", "data", "\n", "\n", "matched", "=", "None", "\n", "for", "ann_gt", "in", "gt", ":", "\n", "                ", "kps_gt", "=", "ann_gt", "[", "'keypoints'", "]", "\n", "mask", "=", "kps_gt", "[", ":", ",", "2", "]", ">", "0", "\n", "if", "not", "np", ".", "any", "(", "mask", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "diff", "=", "kps", "[", "mask", ",", ":", "2", "]", "-", "kps_gt", "[", "mask", ",", ":", "2", "]", "\n", "dist", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "diff", ")", ")", "\n", "if", "dist", ">", "10.0", ":", "\n", "                    ", "continue", "\n", "\n", "", "matched", "=", "ann_gt", "\n", "break", "\n", "\n", "", "if", "matched", "is", "None", ":", "\n", "                ", "self", ".", "data", ".", "append", "(", "(", "ann", ",", "0", ")", ")", "\n", "continue", "\n", "\n", "# found a match", "\n", "", "self", ".", "data", ".", "append", "(", "(", "ann", ",", "1", ")", ")", "\n", "gt", ".", "remove", "(", "matched", ")", "\n", "\n", "", "self", ".", "next_gt", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.instance_scorer.InstanceScoreRecorder.write_data": [[74, 85], ["open", "f.write", "f.write", "json.dumps", "ann.data.tolist", "ann.joint_scales.tolist", "ann.score", "ann.scale"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.annotation.Annotation.score", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.encoder.annrescaler.AnnRescaler.scale"], ["", "def", "write_data", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "ann", ",", "y", "in", "self", ".", "data", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "{", "\n", "'keypoints'", ":", "ann", ".", "data", ".", "tolist", "(", ")", ",", "\n", "'joint_scales'", ":", "ann", ".", "joint_scales", ".", "tolist", "(", ")", ",", "\n", "'score'", ":", "ann", ".", "score", "(", ")", ",", "\n", "'scale'", ":", "ann", ".", "scale", "(", ")", ",", "\n", "'target'", ":", "y", ",", "\n", "}", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.field_config.FieldConfig.verify": [[21, 28], ["len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["def", "verify", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "cif_strides", ")", "==", "len", "(", "self", ".", "cif_indices", ")", "\n", "assert", "len", "(", "self", ".", "cif_strides", ")", "==", "len", "(", "self", ".", "cif_min_scales", ")", "\n", "\n", "assert", "len", "(", "self", ".", "caf_strides", ")", "==", "len", "(", "self", ".", "caf_indices", ")", "\n", "assert", "len", "(", "self", ".", "caf_strides", ")", "==", "len", "(", "self", ".", "caf_min_distances", ")", "\n", "assert", "len", "(", "self", ".", "caf_strides", ")", "==", "len", "(", "self", ".", "caf_max_distances", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.profiler_autograd.ProfilerAutograd.__init__": [[11, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "function_to_profile", ",", "*", ",", "device", ",", "out_name", "=", "None", ")", ":", "\n", "        ", "if", "not", "out_name", ":", "\n", "            ", "out_name", "=", "'pytorch_chrome_trace.json'", "\n", "\n", "", "self", ".", "function_to_profile", "=", "function_to_profile", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "out_name", "=", "out_name", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.profiler_autograd.ProfilerAutograd.__call__": [[20, 34], ["print", "LOG.info", "prof.export_chrome_trace", "torch.autograd.profiler.profile", "profiler_autograd.ProfilerAutograd.function_to_profile", "prof.key_averages", "profiler_autograd.ProfilerAutograd.out_name.replace().replace", "profiler_autograd.ProfilerAutograd.out_name.replace", "str"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "autograd", ".", "profiler", ".", "profile", "(", "use_cuda", "=", "str", "(", "self", ".", "device", ")", "==", "'cuda'", ")", "as", "prof", ":", "\n", "            ", "result", "=", "self", ".", "function_to_profile", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "print", "(", "prof", ".", "key_averages", "(", ")", ")", "\n", "\n", "self", ".", "__class__", ".", "trace_counter", "+=", "1", "\n", "tracefilename", "=", "'{}.{}.json'", ".", "format", "(", "\n", "self", ".", "out_name", ".", "replace", "(", "'.json'", ",", "''", ")", ".", "replace", "(", "'.prof'", ",", "''", ")", ",", "\n", "self", ".", "trace_counter", ",", "\n", ")", "\n", "LOG", ".", "info", "(", "'writing trace file %s'", ",", "tracefilename", ")", "\n", "prof", ".", "export_chrome_trace", "(", "tracefilename", ")", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.__init__": [[18, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cifhr", ":", "CifHr", ",", "config", ":", "FieldConfig", ")", ":", "\n", "        ", "self", ".", "cifhr", "=", "cifhr", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "seeds", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill_cif": [[23, 51], ["time.perf_counter", "enumerate", "LOG.debug", "time.perf_counter", "functional.scalar_values", "zip", "len", "time.perf_counter", "cif_seeds.CifSeeds.seeds.append", "time.perf_counter"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "fill_cif", "(", "self", ",", "cif", ",", "stride", ",", "*", ",", "min_scale", "=", "0.0", ",", "seed_mask", "=", "None", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "sv", "=", "0.0", "\n", "\n", "for", "field_i", ",", "p", "in", "enumerate", "(", "cif", ")", ":", "\n", "            ", "if", "seed_mask", "is", "not", "None", "and", "not", "seed_mask", "[", "field_i", "]", ":", "\n", "                ", "continue", "\n", "", "p", "=", "p", "[", ":", ",", "p", "[", "0", "]", ">", "self", ".", "threshold", "]", "\n", "if", "min_scale", ":", "\n", "                ", "p", "=", "p", "[", ":", ",", "p", "[", "4", "]", ">", "min_scale", "/", "stride", "]", "\n", "", "c", ",", "x", ",", "y", ",", "_", ",", "s", "=", "p", "\n", "\n", "start_sv", "=", "time", ".", "perf_counter", "(", ")", "\n", "v", "=", "scalar_values", "(", "self", ".", "cifhr", "[", "field_i", "]", ",", "x", "*", "stride", ",", "y", "*", "stride", ",", "default", "=", "0.0", ")", "\n", "v", "=", "0.9", "*", "v", "+", "0.1", "*", "c", "\n", "sv", "+=", "time", ".", "perf_counter", "(", ")", "-", "start_sv", "\n", "\n", "if", "self", ".", "score_scale", "!=", "1.0", ":", "\n", "                ", "v", "=", "v", "*", "self", ".", "score_scale", "\n", "", "m", "=", "v", ">", "self", ".", "threshold", "\n", "x", ",", "y", ",", "v", ",", "s", "=", "x", "[", "m", "]", "*", "stride", ",", "y", "[", "m", "]", "*", "stride", ",", "v", "[", "m", "]", ",", "s", "[", "m", "]", "*", "stride", "\n", "\n", "for", "vv", ",", "xx", ",", "yy", ",", "ss", "in", "zip", "(", "v", ",", "x", ",", "y", ",", "s", ")", ":", "\n", "                ", "self", ".", "seeds", ".", "append", "(", "(", "vv", ",", "field_i", ",", "xx", ",", "yy", ",", "ss", ")", ")", "\n", "\n", "", "", "LOG", ".", "debug", "(", "'seeds %d, %.3fs (C++ %.3fs)'", ",", "len", "(", "self", ".", "seeds", ")", ",", "time", ".", "perf_counter", "(", ")", "-", "start", ",", "sv", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get": [[52, 55], ["cif_seeds.CifSeeds.debug_visualizer.predicted", "sorted"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.predicted"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "self", ".", "debug_visualizer", ".", "predicted", "(", "self", ".", "seeds", ")", "\n", "return", "sorted", "(", "self", ".", "seeds", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill": [[56, 65], ["zip", "cif_seeds.CifSeeds.fill_cif"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifDetSeeds.fill_cif"], ["", "def", "fill", "(", "self", ",", "fields", ")", ":", "\n", "        ", "for", "cif_i", ",", "stride", ",", "min_scale", "in", "zip", "(", "self", ".", "config", ".", "cif_indices", ",", "\n", "self", ".", "config", ".", "cif_strides", ",", "\n", "self", ".", "config", ".", "cif_min_scales", ")", ":", "\n", "            ", "self", ".", "fill_cif", "(", "fields", "[", "cif_i", "]", ",", "stride", ",", "\n", "min_scale", "=", "min_scale", ",", "\n", "seed_mask", "=", "self", ".", "config", ".", "seed_mask", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifDetSeeds.fill_cif": [[68, 91], ["time.perf_counter", "enumerate", "LOG.debug", "functional.scalar_values", "zip", "len", "cif_seeds.CifDetSeeds.seeds.append", "time.perf_counter"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["    ", "def", "fill_cif", "(", "self", ",", "cif", ",", "stride", ",", "*", ",", "min_scale", "=", "0.0", ",", "seed_mask", "=", "None", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "for", "field_i", ",", "p", "in", "enumerate", "(", "cif", ")", ":", "\n", "            ", "if", "seed_mask", "is", "not", "None", "and", "not", "seed_mask", "[", "field_i", "]", ":", "\n", "                ", "continue", "\n", "", "p", "=", "p", "[", ":", ",", "p", "[", "0", "]", ">", "self", ".", "threshold", "]", "\n", "if", "min_scale", ":", "\n", "                ", "p", "=", "p", "[", ":", ",", "p", "[", "4", "]", ">", "min_scale", "/", "stride", "]", "\n", "p", "=", "p", "[", ":", ",", "p", "[", "5", "]", ">", "min_scale", "/", "stride", "]", "\n", "", "c", ",", "x", ",", "y", ",", "_", ",", "w", ",", "h", ",", "_", "=", "p", "\n", "v", "=", "scalar_values", "(", "self", ".", "cifhr", "[", "field_i", "]", ",", "x", "*", "stride", ",", "y", "*", "stride", ",", "default", "=", "0.0", ")", "\n", "v", "=", "0.9", "*", "v", "+", "0.1", "*", "c", "\n", "if", "self", ".", "score_scale", "!=", "1.0", ":", "\n", "                ", "v", "=", "v", "*", "self", ".", "score_scale", "\n", "", "m", "=", "v", ">", "self", ".", "threshold", "\n", "x", ",", "y", ",", "v", ",", "w", ",", "h", "=", "x", "[", "m", "]", "*", "stride", ",", "y", "[", "m", "]", "*", "stride", ",", "v", "[", "m", "]", ",", "w", "[", "m", "]", "*", "stride", ",", "h", "[", "m", "]", "*", "stride", "\n", "\n", "for", "vv", ",", "xx", ",", "yy", ",", "ww", ",", "hh", "in", "zip", "(", "v", ",", "x", ",", "y", ",", "w", ",", "h", ")", ":", "\n", "                ", "self", ".", "seeds", ".", "append", "(", "(", "vv", ",", "field_i", ",", "xx", ",", "yy", ",", "ww", ",", "hh", ")", ")", "\n", "\n", "", "", "LOG", ".", "debug", "(", "'seeds %d, %.3fs'", ",", "len", "(", "self", ".", "seeds", ")", ",", "time", ".", "perf_counter", "(", ")", "-", "start", ")", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.__init__": [[24, 30], ["numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["if", "valid_area", "is", "None", ":", "\n", "        ", "return", "\n", "\n", "", "if", "valid_area", "[", "1", "]", ">=", "1.0", ":", "\n", "        ", "intensities", "[", ":", ",", ":", "int", "(", "valid_area", "[", "1", "]", ")", ",", ":", "]", "=", "fill_value", "\n", "", "if", "valid_area", "[", "0", "]", ">=", "1.0", ":", "\n", "        ", "intensities", "[", ":", ",", ":", ",", ":", "int", "(", "valid_area", "[", "0", "]", ")", "]", "=", "fill_value", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.value": [[31, 47], ["numpy.logical_and", "numpy.exp", "numpy.prod", "numpy.sum", "numpy.tanh", "numpy.logical_and", "numpy.logical_and", "numpy.expand_dims"], "methods", ["None"], ["\n", "", "max_i", "=", "int", "(", "math", ".", "ceil", "(", "valid_area", "[", "1", "]", "+", "valid_area", "[", "3", "]", ")", ")", "+", "1", "\n", "max_j", "=", "int", "(", "math", ".", "ceil", "(", "valid_area", "[", "0", "]", "+", "valid_area", "[", "2", "]", ")", ")", "+", "1", "\n", "if", "0", "<", "max_i", "<", "intensities", ".", "shape", "[", "1", "]", ":", "\n", "        ", "intensities", "[", ":", ",", "max_i", ":", ",", ":", "]", "=", "fill_value", "\n", "", "if", "0", "<", "max_j", "<", "intensities", ".", "shape", "[", "2", "]", ":", "\n", "        ", "intensities", "[", ":", ",", ":", ",", "max_j", ":", "]", "=", "fill_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.values": [[48, 59], ["isinstance", "numpy.stack", "numpy.zeros", "numpy.full", "hasattr", "numpy.full", "utils.Sparse2DGaussianField.value", "zip"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.Sparse2DGaussianField.value"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.index_field": [[7, 12], ["functools.lru_cache", "numpy.indices", "numpy.flip"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.indices"], ["def", "create_sink", "(", "side", ")", ":", "\n", "    ", "if", "side", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "2", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "sink1d", "=", "np", ".", "linspace", "(", "(", "side", "-", "1.0", ")", "/", "2.0", ",", "-", "(", "side", "-", "1.0", ")", "/", "2.0", ",", "num", "=", "side", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sink", "=", "np", ".", "stack", "(", "(", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.sparse_bilinear_kernel": [[14, 21], ["coord.astype", "numpy.meshgrid", "list", "zip", "numpy.prod", "gg.reshape", "numpy.abs"], "function", ["None"], ["sink1d", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "side", ",", "axis", "=", "1", ")", ",", "\n", ")", ",", "axis", "=", "0", ")", "\n", "return", "sink", "\n", "\n", "\n", "", "def", "mask_valid_area", "(", "intensities", ",", "valid_area", ",", "*", ",", "fill_value", "=", "0", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.utils.scalar_square_add_single": [[61, 67], ["max", "max", "max", "max", "int", "int", "min", "min", "int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf.__init__": [[35, 64], ["generator.Generator.__init__", "collections.defaultdict", "collections.defaultdict", "enumerate", "collections.defaultdict", "enumerate", "nms_module.Keypoints.Keypoints", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "field_config", ":", "FieldConfig", ",", "*", ",", "\n", "keypoints", ",", "\n", "skeleton", ",", "\n", "out_skeleton", "=", "None", ",", "\n", "worker_pool", "=", "None", ",", "\n", "nms", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "worker_pool", ")", "\n", "if", "nms", "is", "True", ":", "\n", "            ", "nms", "=", "nms_module", ".", "Keypoints", "(", ")", "\n", "\n", "", "self", ".", "field_config", "=", "field_config", "\n", "\n", "self", ".", "keypoints", "=", "keypoints", "\n", "self", ".", "skeleton", "=", "skeleton", "\n", "self", ".", "skeleton_m1", "=", "np", ".", "asarray", "(", "skeleton", ")", "-", "1", "\n", "self", ".", "out_skeleton", "=", "out_skeleton", "or", "skeleton", "\n", "self", ".", "nms", "=", "nms", "\n", "\n", "self", ".", "timers", "=", "defaultdict", "(", "float", ")", "\n", "\n", "# init by_target and by_source", "\n", "self", ".", "by_target", "=", "defaultdict", "(", "dict", ")", "\n", "for", "caf_i", ",", "(", "j1", ",", "j2", ")", "in", "enumerate", "(", "self", ".", "skeleton_m1", ")", ":", "\n", "            ", "self", ".", "by_target", "[", "j2", "]", "[", "j1", "]", "=", "(", "caf_i", ",", "True", ")", "\n", "self", ".", "by_target", "[", "j1", "]", "[", "j2", "]", "=", "(", "caf_i", ",", "False", ")", "\n", "", "self", ".", "by_source", "=", "defaultdict", "(", "dict", ")", "\n", "for", "caf_i", ",", "(", "j1", ",", "j2", ")", "in", "enumerate", "(", "self", ".", "skeleton_m1", ")", ":", "\n", "            ", "self", ".", "by_source", "[", "j1", "]", "[", "j2", "]", "=", "(", "caf_i", ",", "True", ")", "\n", "self", ".", "by_source", "[", "j2", "]", "[", "j1", "]", "=", "(", "caf_i", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf.__call__": [[65, 122], ["time.perf_counter", "LOG.debug", "cif_hr.CifHr().fill", "cif_seeds.CifSeeds().fill", "CafScored().fill.CafScored().fill", "occupancy.Occupancy", "cif_seeds.CifSeeds().fill.get", "cifcaf.CifCaf.occupancy_visualizer.predicted", "LOG.debug", "LOG.info", "len", "zip", "zip", "enumerate", "cifcaf.CifCaf._grow", "cifcaf.CifCaf.append", "cifcaf.CifCaf.__call__.mark_occupied"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.predicted", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._grow"], ["", "", "def", "__call__", "(", "self", ",", "fields", ",", "initial_annotations", "=", "None", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "if", "not", "initial_annotations", ":", "\n", "            ", "initial_annotations", "=", "[", "]", "\n", "", "LOG", ".", "debug", "(", "'initial annotations = %d'", ",", "len", "(", "initial_annotations", ")", ")", "\n", "\n", "if", "self", ".", "field_config", ".", "cif_visualizers", ":", "\n", "            ", "for", "vis", ",", "cif_i", "in", "zip", "(", "self", ".", "field_config", ".", "cif_visualizers", ",", "self", ".", "field_config", ".", "cif_indices", ")", ":", "\n", "                ", "vis", ".", "predicted", "(", "fields", "[", "cif_i", "]", ")", "\n", "", "", "if", "self", ".", "field_config", ".", "caf_visualizers", ":", "\n", "            ", "for", "vis", ",", "caf_i", "in", "zip", "(", "self", ".", "field_config", ".", "caf_visualizers", ",", "self", ".", "field_config", ".", "caf_indices", ")", ":", "\n", "                ", "vis", ".", "predicted", "(", "fields", "[", "caf_i", "]", ")", "\n", "\n", "", "", "cifhr", "=", "CifHr", "(", "self", ".", "field_config", ")", ".", "fill", "(", "fields", ")", "\n", "seeds", "=", "CifSeeds", "(", "cifhr", ".", "accumulated", ",", "self", ".", "field_config", ")", ".", "fill", "(", "fields", ")", "\n", "caf_scored", "=", "CafScored", "(", "cifhr", ".", "accumulated", ",", "self", ".", "field_config", ",", "self", ".", "skeleton", ")", ".", "fill", "(", "fields", ")", "\n", "\n", "occupied", "=", "Occupancy", "(", "cifhr", ".", "accumulated", ".", "shape", ",", "2", ",", "min_scale", "=", "4", ")", "\n", "annotations", "=", "[", "]", "\n", "\n", "def", "mark_occupied", "(", "ann", ")", ":", "\n", "            ", "for", "joint_i", ",", "xyv", "in", "enumerate", "(", "ann", ".", "data", ")", ":", "\n", "                ", "if", "xyv", "[", "2", "]", "==", "0.0", ":", "\n", "                    ", "continue", "\n", "\n", "", "width", "=", "ann", ".", "joint_scales", "[", "joint_i", "]", "\n", "occupied", ".", "set", "(", "joint_i", ",", "xyv", "[", "0", "]", ",", "xyv", "[", "1", "]", ",", "width", ")", "# width = 2 * sigma", "\n", "\n", "", "", "for", "ann", "in", "initial_annotations", ":", "\n", "            ", "self", ".", "_grow", "(", "ann", ",", "caf_scored", ")", "\n", "annotations", ".", "append", "(", "ann", ")", "\n", "mark_occupied", "(", "ann", ")", "\n", "\n", "", "for", "v", ",", "f", ",", "x", ",", "y", ",", "s", "in", "seeds", ".", "get", "(", ")", ":", "\n", "            ", "if", "occupied", ".", "get", "(", "f", ",", "x", ",", "y", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "ann", "=", "Annotation", "(", "self", ".", "keypoints", ",", "self", ".", "out_skeleton", ")", ".", "add", "(", "f", ",", "(", "x", ",", "y", ",", "v", ")", ")", "\n", "ann", ".", "joint_scales", "[", "f", "]", "=", "s", "\n", "self", ".", "_grow", "(", "ann", ",", "caf_scored", ")", "\n", "annotations", ".", "append", "(", "ann", ")", "\n", "mark_occupied", "(", "ann", ")", "\n", "\n", "", "self", ".", "occupancy_visualizer", ".", "predicted", "(", "occupied", ")", "\n", "\n", "LOG", ".", "debug", "(", "'annotations %d, %.3fs'", ",", "len", "(", "annotations", ")", ",", "time", ".", "perf_counter", "(", ")", "-", "start", ")", "\n", "\n", "if", "self", ".", "force_complete", ":", "\n", "            ", "annotations", "=", "self", ".", "complete_annotations", "(", "cifhr", ",", "fields", ",", "annotations", ")", "\n", "\n", "", "if", "self", ".", "nms", "is", "not", "None", ":", "\n", "            ", "annotations", "=", "self", ".", "nms", ".", "annotations", "(", "annotations", ")", "\n", "\n", "", "LOG", ".", "info", "(", "'%d annotations: %s'", ",", "len", "(", "annotations", ")", ",", "\n", "[", "np", ".", "sum", "(", "ann", ".", "data", "[", ":", ",", "2", "]", ">", "0.1", ")", "for", "ann", "in", "annotations", "]", ")", "\n", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._grow_connection": [[123, 145], ["functional.caf_center_s", "numpy.linalg.norm", "Exception", "len", "numpy.exp", "cifcaf.CifCaf._target_with_maxscore", "cifcaf.CifCaf._target_with_blend"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._target_with_maxscore", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._target_with_blend"], ["", "def", "_grow_connection", "(", "self", ",", "xy", ",", "xy_scale", ",", "caf_field", ")", ":", "\n", "        ", "assert", "len", "(", "xy", ")", "==", "2", "\n", "assert", "caf_field", ".", "shape", "[", "0", "]", "==", "9", "\n", "\n", "# source value", "\n", "caf_field", "=", "caf_center_s", "(", "caf_field", ",", "xy", "[", "0", "]", ",", "xy", "[", "1", "]", ",", "sigma", "=", "2.0", "*", "xy_scale", ")", "\n", "if", "caf_field", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "            ", "return", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "# source distance", "\n", "", "d", "=", "np", ".", "linalg", ".", "norm", "(", "(", "(", "xy", "[", "0", "]", ",", ")", ",", "(", "xy", "[", "1", "]", ",", ")", ")", "-", "caf_field", "[", "1", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# combined value and source distance", "\n", "v", "=", "caf_field", "[", "0", "]", "\n", "sigma", "=", "0.5", "*", "xy_scale", "\n", "scores", "=", "np", ".", "exp", "(", "-", "0.5", "*", "d", "**", "2", "/", "sigma", "**", "2", ")", "*", "v", "\n", "\n", "if", "self", ".", "connection_method", "==", "'max'", ":", "\n", "            ", "return", "self", ".", "_target_with_maxscore", "(", "caf_field", "[", "5", ":", "]", ",", "scores", ")", "\n", "", "if", "self", ".", "connection_method", "==", "'blend'", ":", "\n", "            ", "return", "self", ".", "_target_with_blend", "(", "caf_field", "[", "5", ":", "]", ",", "scores", ")", "\n", "", "raise", "Exception", "(", "'connection method not known'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._target_with_maxscore": [[146, 155], ["numpy.argmax"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_target_with_maxscore", "(", "target_coordinates", ",", "scores", ")", ":", "\n", "        ", "assert", "target_coordinates", ".", "shape", "[", "1", "]", "==", "scores", ".", "shape", "[", "0", "]", "\n", "\n", "max_i", "=", "np", ".", "argmax", "(", "scores", ")", "\n", "max_entry", "=", "target_coordinates", "[", ":", ",", "max_i", "]", "\n", "\n", "score", "=", "scores", "[", "max_i", "]", "\n", "return", "max_entry", "[", "0", "]", ",", "max_entry", "[", "1", "]", ",", "max_entry", "[", "3", "]", ",", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._target_with_blend": [[156, 191], ["numpy.argsort", "numpy.linalg.norm", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_target_with_blend", "(", "target_coordinates", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Blending the top two candidates with a weighted average.\n\n        Similar to the post processing step in\n        \"BlazeFace: Sub-millisecond Neural Face Detection on Mobile GPUs\".\n        \"\"\"", "\n", "assert", "target_coordinates", ".", "shape", "[", "1", "]", "==", "len", "(", "scores", ")", "\n", "if", "len", "(", "scores", ")", "==", "1", ":", "\n", "            ", "return", "(", "\n", "target_coordinates", "[", "0", ",", "0", "]", ",", "\n", "target_coordinates", "[", "1", ",", "0", "]", ",", "\n", "target_coordinates", "[", "3", ",", "0", "]", ",", "\n", "scores", "[", "0", "]", "*", "0.5", ",", "\n", ")", "\n", "\n", "", "sorted_i", "=", "np", ".", "argsort", "(", "scores", ")", "\n", "max_entry_1", "=", "target_coordinates", "[", ":", ",", "sorted_i", "[", "-", "1", "]", "]", "\n", "max_entry_2", "=", "target_coordinates", "[", ":", ",", "sorted_i", "[", "-", "2", "]", "]", "\n", "\n", "score_1", "=", "scores", "[", "sorted_i", "[", "-", "1", "]", "]", "\n", "score_2", "=", "scores", "[", "sorted_i", "[", "-", "2", "]", "]", "\n", "if", "score_2", "<", "0.01", "or", "score_2", "<", "0.5", "*", "score_1", ":", "\n", "            ", "return", "max_entry_1", "[", "0", "]", ",", "max_entry_1", "[", "1", "]", ",", "max_entry_1", "[", "3", "]", ",", "score_1", "*", "0.5", "\n", "\n", "# TODO: verify the following three lines have negligible speed impact", "\n", "", "d", "=", "np", ".", "linalg", ".", "norm", "(", "max_entry_1", "[", ":", "2", "]", "-", "max_entry_2", "[", ":", "2", "]", ")", "\n", "if", "d", ">", "max_entry_1", "[", "3", "]", "/", "2.0", ":", "\n", "            ", "return", "max_entry_1", "[", "0", "]", ",", "max_entry_1", "[", "1", "]", ",", "max_entry_1", "[", "3", "]", ",", "score_1", "*", "0.5", "\n", "\n", "", "return", "(", "\n", "(", "score_1", "*", "max_entry_1", "[", "0", "]", "+", "score_2", "*", "max_entry_2", "[", "0", "]", ")", "/", "(", "score_1", "+", "score_2", ")", ",", "\n", "(", "score_1", "*", "max_entry_1", "[", "1", "]", "+", "score_2", "*", "max_entry_2", "[", "1", "]", ")", "/", "(", "score_1", "+", "score_2", ")", ",", "\n", "(", "score_1", "*", "max_entry_1", "[", "3", "]", "+", "score_2", "*", "max_entry_2", "[", "3", "]", ")", "/", "(", "score_1", "+", "score_2", ")", ",", "\n", "0.5", "*", "(", "score_1", "+", "score_2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf.connection_value": [[193, 217], ["caf_scored.directed", "max", "cifcaf.CifCaf._grow_connection", "numpy.sqrt", "max", "cifcaf.CifCaf._grow_connection", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_scored.CafScored.directed", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._grow_connection", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._grow_connection"], ["", "def", "connection_value", "(", "self", ",", "ann", ",", "caf_scored", ",", "start_i", ",", "end_i", ",", "*", ",", "reverse_match", "=", "True", ")", ":", "\n", "        ", "caf_i", ",", "forward", "=", "self", ".", "by_source", "[", "start_i", "]", "[", "end_i", "]", "\n", "caf_f", ",", "caf_b", "=", "caf_scored", ".", "directed", "(", "caf_i", ",", "forward", ")", "\n", "xyv", "=", "ann", ".", "data", "[", "start_i", "]", "\n", "xy_scale_s", "=", "max", "(", "0.0", ",", "ann", ".", "joint_scales", "[", "start_i", "]", ")", "\n", "\n", "new_xysv", "=", "self", ".", "_grow_connection", "(", "xyv", "[", ":", "2", "]", ",", "xy_scale_s", ",", "caf_f", ")", "\n", "keypoint_score", "=", "np", ".", "sqrt", "(", "new_xysv", "[", "3", "]", "*", "xyv", "[", "2", "]", ")", "# geometric mean", "\n", "if", "keypoint_score", "<", "self", ".", "keypoint_threshold", ":", "\n", "            ", "return", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "", "if", "new_xysv", "[", "3", "]", "==", "0.0", ":", "\n", "            ", "return", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "", "xy_scale_t", "=", "max", "(", "0.0", ",", "new_xysv", "[", "2", "]", ")", "\n", "\n", "# reverse match", "\n", "if", "reverse_match", ":", "\n", "            ", "reverse_xyv", "=", "self", ".", "_grow_connection", "(", "\n", "new_xysv", "[", ":", "2", "]", ",", "xy_scale_t", ",", "caf_b", ")", "\n", "if", "reverse_xyv", "[", "2", "]", "==", "0.0", ":", "\n", "                ", "return", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "", "if", "abs", "(", "xyv", "[", "0", "]", "-", "reverse_xyv", "[", "0", "]", ")", "+", "abs", "(", "xyv", "[", "1", "]", "-", "reverse_xyv", "[", "1", "]", ")", ">", "xy_scale_s", ":", "\n", "                ", "return", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "\n", "", "", "return", "(", "new_xysv", "[", "0", "]", ",", "new_xysv", "[", "1", "]", ",", "new_xysv", "[", "2", "]", ",", "keypoint_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf.p2p_value": [[218, 245], ["caf_scored.directed", "max", "functional.caf_center_s", "numpy.linalg.norm", "numpy.linalg.norm", "max", "numpy.sqrt", "numpy.exp", "numpy.exp", "max"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.caf_scored.CafScored.directed"], ["", "@", "staticmethod", "\n", "def", "p2p_value", "(", "source_xyv", ",", "caf_scored", ",", "source_s", ",", "target_xysv", ",", "caf_i", ",", "forward", ")", ":", "\n", "        ", "caf_f", ",", "_", "=", "caf_scored", ".", "directed", "(", "caf_i", ",", "forward", ")", "\n", "xy_scale_s", "=", "max", "(", "0.0", ",", "source_s", ")", "\n", "\n", "# source value", "\n", "caf_field", "=", "caf_center_s", "(", "caf_f", ",", "source_xyv", "[", "0", "]", ",", "source_xyv", "[", "1", "]", ",", "\n", "sigma", "=", "2.0", "*", "xy_scale_s", ")", "\n", "if", "caf_field", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "\n", "# distances", "\n", "", "d_source", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "(", "(", "source_xyv", "[", "0", "]", ",", ")", ",", "(", "source_xyv", "[", "1", "]", ",", ")", ")", "-", "caf_field", "[", "1", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "d_target", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "(", "(", "target_xysv", "[", "0", "]", ",", ")", ",", "(", "target_xysv", "[", "1", "]", ",", ")", ")", "-", "caf_field", "[", "5", ":", "7", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# combined value and source distance", "\n", "xy_scale_t", "=", "max", "(", "0.0", ",", "target_xysv", "[", "2", "]", ")", "\n", "sigma_s", "=", "0.5", "*", "xy_scale_s", "\n", "sigma_t", "=", "0.5", "*", "xy_scale_t", "\n", "scores", "=", "(", "\n", "np", ".", "exp", "(", "-", "0.5", "*", "d_source", "**", "2", "/", "sigma_s", "**", "2", ")", "*", "\n", "np", ".", "exp", "(", "-", "0.5", "*", "d_target", "**", "2", "/", "sigma_t", "**", "2", ")", "*", "\n", "caf_field", "[", "0", "]", "\n", ")", "\n", "return", "np", ".", "sqrt", "(", "source_xyv", "[", "2", "]", "*", "max", "(", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._grow": [[246, 307], ["queue.PriorityQueue", "set", "enumerate", "cifcaf.CifCaf.by_source[].items", "queue.PriorityQueue.qsize", "cifcaf.CifCaf._grow.add_to_frontier"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["", "def", "_grow", "(", "self", ",", "ann", ",", "caf_scored", ",", "*", ",", "reverse_match", "=", "True", ")", ":", "\n", "        ", "frontier", "=", "PriorityQueue", "(", ")", "\n", "in_frontier", "=", "set", "(", ")", "\n", "\n", "def", "add_to_frontier", "(", "start_i", ")", ":", "\n", "            ", "for", "end_i", ",", "(", "caf_i", ",", "_", ")", "in", "self", ".", "by_source", "[", "start_i", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "ann", ".", "data", "[", "end_i", ",", "2", "]", ">", "0.0", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "start_i", ",", "end_i", ")", "in", "in_frontier", ":", "\n", "                    ", "continue", "\n", "\n", "", "max_possible_score", "=", "np", ".", "sqrt", "(", "ann", ".", "data", "[", "start_i", ",", "2", "]", ")", "\n", "if", "self", ".", "field_config", ".", "confidence_scales", "is", "not", "None", ":", "\n", "                    ", "max_possible_score", "*=", "self", ".", "field_config", ".", "confidence_scales", "[", "caf_i", "]", "\n", "", "frontier", ".", "put", "(", "(", "-", "max_possible_score", ",", "None", ",", "start_i", ",", "end_i", ")", ")", "\n", "in_frontier", ".", "add", "(", "(", "start_i", ",", "end_i", ")", ")", "\n", "ann", ".", "frontier_order", ".", "append", "(", "(", "start_i", ",", "end_i", ")", ")", "\n", "\n", "", "", "def", "frontier_get", "(", ")", ":", "\n", "            ", "while", "frontier", ".", "qsize", "(", ")", ":", "\n", "                ", "entry", "=", "frontier", ".", "get", "(", ")", "\n", "if", "entry", "[", "1", "]", "is", "not", "None", ":", "\n", "                    ", "return", "entry", "\n", "\n", "", "_", ",", "__", ",", "start_i", ",", "end_i", "=", "entry", "\n", "if", "ann", ".", "data", "[", "end_i", ",", "2", "]", ">", "0.0", ":", "\n", "                    ", "continue", "\n", "\n", "", "new_xysv", "=", "self", ".", "connection_value", "(", "\n", "ann", ",", "caf_scored", ",", "start_i", ",", "end_i", ",", "reverse_match", "=", "reverse_match", ")", "\n", "if", "new_xysv", "[", "3", "]", "==", "0.0", ":", "\n", "                    ", "continue", "\n", "", "score", "=", "new_xysv", "[", "3", "]", "\n", "if", "self", ".", "greedy", ":", "\n", "                    ", "return", "(", "-", "score", ",", "new_xysv", ",", "start_i", ",", "end_i", ")", "\n", "", "if", "self", ".", "field_config", ".", "confidence_scales", "is", "not", "None", ":", "\n", "                    ", "caf_i", ",", "_", "=", "self", ".", "by_source", "[", "start_i", "]", "[", "end_i", "]", "\n", "score", "*=", "self", ".", "field_config", ".", "confidence_scales", "[", "caf_i", "]", "\n", "", "frontier", ".", "put", "(", "(", "-", "score", ",", "new_xysv", ",", "start_i", ",", "end_i", ")", ")", "\n", "\n", "# seeding the frontier", "\n", "", "", "for", "joint_i", ",", "v", "in", "enumerate", "(", "ann", ".", "data", "[", ":", ",", "2", "]", ")", ":", "\n", "            ", "if", "v", "==", "0.0", ":", "\n", "                ", "continue", "\n", "", "add_to_frontier", "(", "joint_i", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "entry", "=", "frontier_get", "(", ")", "\n", "if", "entry", "is", "None", ":", "\n", "                ", "break", "\n", "\n", "", "_", ",", "new_xysv", ",", "jsi", ",", "jti", "=", "entry", "\n", "if", "ann", ".", "data", "[", "jti", ",", "2", "]", ">", "0.0", ":", "\n", "                ", "continue", "\n", "\n", "", "ann", ".", "data", "[", "jti", ",", ":", "2", "]", "=", "new_xysv", "[", ":", "2", "]", "\n", "ann", ".", "data", "[", "jti", ",", "2", "]", "=", "new_xysv", "[", "3", "]", "\n", "ann", ".", "joint_scales", "[", "jti", "]", "=", "new_xysv", "[", "2", "]", "\n", "ann", ".", "decoding_order", ".", "append", "(", "\n", "(", "jsi", ",", "jti", ",", "np", ".", "copy", "(", "ann", ".", "data", "[", "jsi", "]", ")", ",", "np", ".", "copy", "(", "ann", ".", "data", "[", "jti", "]", ")", ")", ")", "\n", "add_to_frontier", "(", "jti", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._flood_fill": [[308, 331], ["queue.PriorityQueue", "enumerate", "queue.PriorityQueue.qsize", "cifcaf.CifCaf.by_source[].keys", "cifcaf.CifCaf._grow.add_to_frontier"], "methods", ["None"], ["", "", "def", "_flood_fill", "(", "self", ",", "ann", ")", ":", "\n", "        ", "frontier", "=", "PriorityQueue", "(", ")", "\n", "\n", "def", "add_to_frontier", "(", "start_i", ")", ":", "\n", "            ", "for", "end_i", "in", "self", ".", "by_source", "[", "start_i", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "ann", ".", "data", "[", "end_i", ",", "2", "]", ">", "0.0", ":", "\n", "                    ", "continue", "\n", "", "start_xyv", "=", "ann", ".", "data", "[", "start_i", "]", ".", "tolist", "(", ")", "\n", "frontier", ".", "put", "(", "(", "-", "xyv", "[", "2", "]", ",", "end_i", ",", "start_xyv", ",", "ann", ".", "joint_scales", "[", "start_i", "]", ")", ")", "\n", "\n", "", "", "for", "start_i", ",", "xyv", "in", "enumerate", "(", "ann", ".", "data", ")", ":", "\n", "            ", "if", "xyv", "[", "2", "]", "==", "0.0", ":", "\n", "                ", "continue", "\n", "", "add_to_frontier", "(", "start_i", ")", "\n", "\n", "", "while", "frontier", ".", "qsize", "(", ")", ":", "\n", "            ", "_", ",", "end_i", ",", "xyv", ",", "s", "=", "frontier", ".", "get", "(", ")", "\n", "if", "ann", ".", "data", "[", "end_i", ",", "2", "]", ">", "0.0", ":", "\n", "                ", "continue", "\n", "", "ann", ".", "data", "[", "end_i", ",", ":", "2", "]", "=", "xyv", "[", ":", "2", "]", "\n", "ann", ".", "data", "[", "end_i", ",", "2", "]", "=", "0.00001", "\n", "ann", ".", "joint_scales", "[", "end_i", "]", "=", "s", "\n", "add_to_frontier", "(", "end_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf.complete_annotations": [[332, 351], ["time.perf_counter", "CafScored().fill.CafScored().fill", "LOG.debug", "cifcaf.CifCaf._grow", "numpy.logical_and", "numpy.minimum", "numpy.any", "CafScored().fill.CafScored", "cifcaf.CifCaf._flood_fill", "time.perf_counter"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._grow", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifcaf.CifCaf._flood_fill"], ["", "", "def", "complete_annotations", "(", "self", ",", "cifhr", ",", "fields", ",", "annotations", ")", ":", "\n", "        ", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "caf_scored", "=", "CafScored", "(", "cifhr", ".", "accumulated", ",", "self", ".", "field_config", ",", "self", ".", "skeleton", ",", "\n", "score_th", "=", "0.0001", ")", ".", "fill", "(", "fields", ")", "\n", "\n", "for", "ann", "in", "annotations", ":", "\n", "            ", "unfilled_mask", "=", "ann", ".", "data", "[", ":", ",", "2", "]", "==", "0.0", "\n", "self", ".", "_grow", "(", "ann", ",", "caf_scored", ",", "reverse_match", "=", "False", ")", "\n", "now_filled_mask", "=", "ann", ".", "data", "[", ":", ",", "2", "]", ">", "0.0", "\n", "updated", "=", "np", ".", "logical_and", "(", "unfilled_mask", ",", "now_filled_mask", ")", "\n", "ann", ".", "data", "[", "updated", ",", "2", "]", "=", "np", ".", "minimum", "(", "0.001", ",", "ann", ".", "data", "[", "updated", ",", "2", "]", ")", "\n", "\n", "# some joints might still be unfilled", "\n", "if", "np", ".", "any", "(", "ann", ".", "data", "[", ":", ",", "2", "]", "==", "0.0", ")", ":", "\n", "                ", "self", ".", "_flood_fill", "(", "ann", ")", "\n", "\n", "", "", "LOG", ".", "debug", "(", "'complete annotations %.3fs'", ",", "time", ".", "perf_counter", "(", ")", "-", "start", ")", "\n", "return", "annotations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.dummy_generator.DummyGenerator.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.dummy_generator.DummyGenerator.__call__": [[8, 10], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "fields", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifdet.CifDet.__init__": [[20, 26], ["generator.Generator.__init__", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["visualizer", ":", "CifDetVisualizer", "=", "None", "\n", "\n", "side_length", ":", "ClassVar", "[", "int", "]", "=", "5", "\n", "padding", ":", "ClassVar", "[", "int", "]", "=", "10", "\n", "\n", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "CifDetGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.cifdet.CifDet.__call__": [[27, 53], ["time.perf_counter", "cif_hr.CifDetHr().fill", "cif_seeds.CifDetSeeds().fill", "occupancy.Occupancy", "cif_seeds.CifDetSeeds().fill.get", "cifdet.CifDet.occupancy_visualizer.predicted", "nms.Detection().annotations", "LOG.info", "zip", "occupancy.Occupancy.get", "annotation.AnnotationDet().set", "nms.Detection().annotations.append", "occupancy.Occupancy.set", "len", "vis.predicted", "cif_hr.CifDetHr", "cif_seeds.CifDetSeeds", "nms.Detection", "time.perf_counter", "annotation.AnnotationDet", "min"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.fill", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.predicted", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.predicted"], ["\n", "\n", "", "", "class", "CifDetGenerator", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ":", "CifDet", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "intensities", "=", "None", "\n", "self", ".", "fields_reg", "=", "None", "\n", "self", ".", "fields_wh", "=", "None", "\n", "self", ".", "fields_reg_l", "=", "None", "\n", "\n", "self", ".", "sink", "=", "create_sink", "(", "config", ".", "side_length", ")", "\n", "self", ".", "s_offset", "=", "(", "config", ".", "side_length", "-", "1.0", ")", "/", "2.0", "\n", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "width_height_original", "=", "image", ".", "shape", "[", "2", ":", "0", ":", "-", "1", "]", "\n", "\n", "detections", "=", "self", ".", "config", ".", "rescaler", ".", "detections", "(", "anns", ")", "\n", "bg_mask", "=", "self", ".", "config", ".", "rescaler", ".", "bg_mask", "(", "anns", ",", "width_height_original", ",", "\n", "crowd_margin", "=", "(", "self", ".", "config", ".", "side_length", "-", "1", ")", "/", "2", ")", "\n", "valid_area", "=", "self", ".", "config", ".", "rescaler", ".", "valid_area", "(", "meta", ")", "\n", "LOG", ".", "debug", "(", "'valid area: %s\b, pif side length = %d'", ",", "valid_area", ",", "self", ".", "config", ".", "side_length", ")", "\n", "\n", "n_fields", "=", "self", ".", "config", ".", "n_categories", "\n", "self", ".", "init_fields", "(", "n_fields", ",", "bg_mask", ")", "\n", "self", ".", "fill", "(", "detections", ")", "\n", "fields", "=", "self", ".", "fields", "(", "valid_area", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.DummyPool.starmap": [[15, 18], ["f"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "starmap", "(", "f", ",", "iterable", ")", ":", "\n", "        ", "return", "[", "f", "(", "*", "i", ")", "for", "i", "in", "iterable", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.__init__": [[21, 36], ["isinstance", "generator.DummyPool", "LOG.info", "multiprocessing.Pool", "sys.platform.startswith"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.info"], ["    ", "def", "__init__", "(", "self", ",", "worker_pool", "=", "None", ")", ":", "\n", "        ", "if", "worker_pool", "is", "None", "or", "worker_pool", "==", "0", ":", "\n", "            ", "worker_pool", "=", "DummyPool", "(", ")", "\n", "", "if", "isinstance", "(", "worker_pool", ",", "int", ")", ":", "\n", "            ", "LOG", ".", "info", "(", "'creating decoder worker pool with %d workers'", ",", "worker_pool", ")", "\n", "assert", "not", "sys", ".", "platform", ".", "startswith", "(", "'win'", ")", ",", "(", "\n", "'not supported, use --decoder-workers=0 '", "\n", "'on windows'", "\n", ")", "\n", "worker_pool", "=", "multiprocessing", ".", "Pool", "(", "worker_pool", ")", "\n", "\n", "", "self", ".", "worker_pool", "=", "worker_pool", "\n", "\n", "self", ".", "last_decoder_time", "=", "0.0", "\n", "self", ".", "last_nn_time", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.__getstate__": [[37, 41], ["generator.Generator.__dict__.items"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "\n", "if", "k", "not", "in", "(", "'worker_pool'", ",", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.fields_batch": [[43, 90], ["time.time", "LOG.debug", "isinstance", "f", "torch.no_grad", "image_batch.to.to.to", "torch.autograd.profiler.record_function", "model", "torch.autograd.profiler.record_function", "isinstance", "time.time", "generator.Generator.fields_batch.apply"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.logs.Plots.time", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["", "@", "staticmethod", "\n", "def", "fields_batch", "(", "model", ",", "image_batch", ",", "*", ",", "device", "=", "None", ")", ":", "\n", "        ", "\"\"\"From image batch to field batch.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "def", "apply", "(", "f", ",", "items", ")", ":", "\n", "            ", "\"\"\"Apply f in a nested fashion to all items that are not list or tuple.\"\"\"", "\n", "if", "items", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "if", "isinstance", "(", "items", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "return", "[", "apply", "(", "f", ",", "i", ")", "for", "i", "in", "items", "]", "\n", "", "return", "f", "(", "items", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "device", "is", "not", "None", ":", "\n", "                ", "image_batch", "=", "image_batch", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'model'", ")", ":", "\n", "                ", "heads", "=", "model", "(", "image_batch", ")", "\n", "\n", "# to numpy", "\n", "", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'tonumpy'", ")", ":", "\n", "                ", "if", "isinstance", "(", "heads", ",", "list", ")", ":", "\n", "                    ", "heads", "=", "apply", "(", "lambda", "x", ":", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "heads", ")", "\n", "", "elif", "isinstance", "(", "heads", ",", "dict", ")", ":", "\n", "                    ", "if", "'pose'", "in", "heads", ":", "\n", "                        ", "heads", ".", "update", "(", "{", "'pose'", ":", "apply", "(", "lambda", "x", ":", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "heads", "[", "'pose'", "]", ")", "}", ")", "\n", "", "if", "'semantic'", "in", "heads", ":", "\n", "                        ", "if", "isinstance", "(", "heads", "[", "'semantic'", "]", ",", "list", ")", ":", "\n", "                            ", "if", "len", "(", "heads", "[", "'semantic'", "]", ")", "==", "2", ":", "\n", "                                ", "heads", "[", "'edge'", "]", "=", "heads", "[", "'semantic'", "]", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "heads", ".", "update", "(", "{", "'semantic'", ":", "heads", "[", "'semantic'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "", "else", ":", "\n", "                            ", "heads", ".", "update", "(", "{", "'semantic'", ":", "heads", "[", "'semantic'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "", "", "if", "'offset'", "in", "heads", ":", "\n", "                        ", "if", "isinstance", "(", "heads", "[", "'offset'", "]", ",", "list", ")", ":", "\n", "                            ", "heads", ".", "update", "(", "{", "'offset'", ":", "heads", "[", "'offset'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "", "else", ":", "\n", "                            ", "heads", ".", "update", "(", "{", "'offset'", ":", "heads", "[", "'offset'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "", "", "if", "'vote'", "in", "heads", ":", "\n", "                        ", "heads", ".", "update", "(", "{", "'vote'", ":", "heads", "[", "'vote'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "", "if", "'center'", "in", "heads", ":", "\n", "                        ", "heads", ".", "update", "(", "{", "'center_offset'", ":", "heads", "[", "'center'", "]", "[", "'center_offset'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "heads", ".", "update", "(", "{", "'center'", ":", "heads", "[", "'center'", "]", "[", "'center'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "\n", "", "", "", "", "LOG", ".", "debug", "(", "'nn processing time: %.3fs'", ",", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "return", "heads", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.__call__": [[91, 95], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "fields", ",", "*", ",", "initial_annotations", "=", "None", ")", ":", "\n", "        ", "\"\"\"For single image, from fields to annotations.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.batch": [[96, 143], ["time.perf_counter", "generator.Generator.fields_batch", "isinstance", "generator.Generator.fields_batch.apply"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator.fields_batch", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.lib.export_onnx.apply"], ["", "def", "batch", "(", "self", ",", "model", ",", "image_batch", ",", "*", ",", "device", "=", "None", ")", ":", "\n", "        ", "def", "apply", "(", "f", ",", "items", ")", ":", "\n", "            ", "\"\"\"Apply f in a nested fashion to all items that are not list or tuple.\"\"\"", "\n", "if", "items", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "if", "isinstance", "(", "items", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "return", "[", "apply", "(", "f", ",", "i", ")", "for", "i", "in", "items", "]", "\n", "", "return", "f", "(", "items", ")", "\n", "", "\"\"\"From image batch straight to annotations batch.\"\"\"", "\n", "start_nn", "=", "time", ".", "perf_counter", "(", ")", "\n", "fields_batchs", "=", "self", ".", "fields_batch", "(", "model", ",", "image_batch", ",", "device", "=", "device", ")", "\n", "self", ".", "last_nn_time", "=", "time", ".", "perf_counter", "(", ")", "-", "start_nn", "\n", "\n", "if", "isinstance", "(", "fields_batchs", ",", "dict", ")", ":", "\n", "            ", "fields_batch", "=", "fields_batchs", "[", "'pose'", "]", "\n", "", "elif", "isinstance", "(", "fields_batchs", ",", "list", ")", ":", "\n", "            ", "fields_batch", "=", "fields_batchs", "\n", "\n", "# index by frame (item in batch)", "\n", "", "head_iter", "=", "apply", "(", "iter", ",", "fields_batch", ")", "\n", "fields_batch", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "fields_batch", ".", "append", "(", "apply", "(", "next", ",", "head_iter", ")", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "not", "isinstance", "(", "self", ".", "worker_pool", ",", "DummyPool", ")", ":", "\n", "# remove debug_images to save time during pickle", "\n", "            ", "image_batch", "=", "[", "None", "for", "_", "in", "fields_batch", "]", "\n", "\n", "", "LOG", ".", "debug", "(", "'parallel execution with worker %s'", ",", "self", ".", "worker_pool", ")", "\n", "start_decoder", "=", "time", ".", "perf_counter", "(", ")", "\n", "result", "=", "self", ".", "worker_pool", ".", "starmap", "(", "\n", "self", ".", "_mappable_annotations", ",", "zip", "(", "fields_batch", ",", "image_batch", ")", ")", "\n", "self", ".", "last_decoder_time", "=", "time", ".", "perf_counter", "(", ")", "-", "start_decoder", "\n", "\n", "LOG", ".", "debug", "(", "'time: nn = %.3fs, dec = %.3fs'", ",", "self", ".", "last_nn_time", ",", "self", ".", "last_decoder_time", ")", "\n", "\n", "all_results", "=", "result", "\n", "if", "isinstance", "(", "fields_batchs", ",", "dict", ")", ":", "\n", "            ", "all_results", "=", "{", "'pose'", ":", "result", "}", "\n", "for", "key", ",", "value", "in", "fields_batchs", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "!=", "'pose'", ":", "\n", "                    ", "all_results", "[", "key", "]", "=", "value", "\n", "\n", "", "", "", "return", "all_results", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.generator.generator.Generator._mappable_annotations": [[144, 149], ["generator.Generator.", "visualizer.BaseVisualizer.processed_image"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.processed_image"], ["", "def", "_mappable_annotations", "(", "self", ",", "fields", ",", "debug_image", ")", ":", "\n", "        ", "if", "debug_image", "is", "not", "None", ":", "\n", "            ", "visualizer", ".", "BaseVisualizer", ".", "processed_image", "(", "debug_image", ")", "\n", "\n", "", "return", "self", "(", "fields", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.hflip._HorizontalSwapParsing.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "categories", ",", "hflip", ")", ":", "\n", "        ", "self", ".", "categories", "=", "categories", "\n", "self", ".", "hflip", "=", "hflip", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.hflip._HorizontalSwapParsing.__call__": [[17, 39], ["copy.deepcopy", "numpy.unique", "int", "hflip._HorizontalSwapParsing.hflip.get", "hflip._HorizontalSwapParsing.categories.index"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "__call__", "(", "self", ",", "mask", ")", ":", "\n", "        ", "mask_flip", "=", "mask", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "target", "=", "copy", ".", "deepcopy", "(", "mask_flip", ")", "\n", "\n", "part_ids", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "source_i", "in", "part_ids", ":", "\n", "            ", "source_i", "=", "int", "(", "source_i", ")", "\n", "if", "source_i", "==", "0", "or", "source_i", "==", "255", ":", "\n", "                ", "continue", "\n", "\n", "", "source_name", "=", "self", ".", "categories", "[", "source_i", "-", "1", "]", "\n", "target_name", "=", "self", ".", "hflip", ".", "get", "(", "source_name", ")", "\n", "\n", "if", "target_name", ":", "\n", "                ", "target_i", "=", "self", ".", "categories", ".", "index", "(", "target_name", ")", "+", "1", "\n", "", "else", ":", "\n", "                ", "target_i", "=", "source_i", "\n", "\n", "", "target", "[", "mask_flip", "==", "source_i", "]", "=", "target_i", "\n", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.hflip._HorizontalSwap.__init__": [[42, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keypoints", ",", "hflip", ")", ":", "\n", "        ", "self", ".", "keypoints", "=", "keypoints", "\n", "self", ".", "hflip", "=", "hflip", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.hflip._HorizontalSwap.__call__": [[46, 59], ["numpy.zeros", "enumerate", "hflip._HorizontalSwap.hflip.get", "hflip._HorizontalSwap.keypoints.index"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "def", "__call__", "(", "self", ",", "keypoints", ")", ":", "\n", "        ", "target", "=", "np", ".", "zeros", "(", "keypoints", ".", "shape", ")", "\n", "\n", "for", "source_i", ",", "xyv", "in", "enumerate", "(", "keypoints", ")", ":", "\n", "            ", "source_name", "=", "self", ".", "keypoints", "[", "source_i", "]", "\n", "target_name", "=", "self", ".", "hflip", ".", "get", "(", "source_name", ")", "\n", "if", "target_name", ":", "\n", "                ", "target_i", "=", "self", ".", "keypoints", ".", "index", "(", "target_name", ")", "\n", "", "else", ":", "\n", "                ", "target_i", "=", "source_i", "\n", "", "target", "[", "target_i", "]", "=", "xyv", "\n", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.hflip.HFlip.__init__": [[62, 69], ["hflip._HorizontalSwap", "hflip._HorizontalSwapParsing"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keypoints", ",", "hflip", ",", "parsing_categories", "=", "None", ",", "parsing_hflip", "=", "None", ")", ":", "\n", "        ", "self", ".", "swap", "=", "_HorizontalSwap", "(", "keypoints", ",", "hflip", ")", "\n", "\n", "self", ".", "parsing_swap", "=", "None", "\n", "if", "parsing_categories", "is", "not", "None", "and", "parsing_hflip", "is", "not", "None", ":", "\n", "            ", "self", ".", "parsing_swap", "=", "_HorizontalSwapParsing", "(", "categories", "=", "parsing_categories", ",", "\n", "hflip", "=", "parsing_hflip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.hflip.HFlip.__call__": [[70, 96], ["copy.deepcopy", "copy.deepcopy", "image.transpose.transpose.transpose", "hflip.HFlip.swap", "hflip.HFlip.parsing_swap"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "meta", "=", "copy", ".", "deepcopy", "(", "meta", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "\n", "w", ",", "_", "=", "image", ".", "size", "\n", "image", "=", "image", ".", "transpose", "(", "PIL", ".", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "ann", "[", "'keypoints'", "]", "[", ":", ",", "0", "]", "=", "-", "ann", "[", "'keypoints'", "]", "[", ":", ",", "0", "]", "-", "1.0", "+", "w", "\n", "if", "self", ".", "swap", "is", "not", "None", "and", "not", "ann", "[", "'iscrowd'", "]", ":", "\n", "                ", "ann", "[", "'keypoints'", "]", "=", "self", ".", "swap", "(", "ann", "[", "'keypoints'", "]", ")", "\n", "meta", "[", "'horizontal_swap'", "]", "=", "self", ".", "swap", "\n", "", "ann", "[", "'bbox'", "]", "[", "0", "]", "=", "-", "(", "ann", "[", "'bbox'", "]", "[", "0", "]", "+", "ann", "[", "'bbox'", "]", "[", "2", "]", ")", "-", "1.0", "+", "w", "\n", "\n", "if", "'parsing'", "in", "ann", "and", "self", ".", "parsing_swap", "is", "not", "None", ":", "\n", "                ", "ann", "[", "'parsing'", "]", "=", "self", ".", "parsing_swap", "(", "ann", "[", "'parsing'", "]", ")", "\n", "", "if", "'segment_mask'", "in", "ann", ":", "\n", "                ", "ann", "[", "'segment_mask'", "]", "=", "ann", "[", "'segment_mask'", "]", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "", "if", "'edge'", "in", "ann", ":", "\n", "                ", "ann", "[", "'edge'", "]", "=", "ann", "[", "'edge'", "]", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "", "assert", "meta", "[", "'hflip'", "]", "is", "False", "\n", "meta", "[", "'hflip'", "]", "=", "True", "\n", "\n", "meta", "[", "'valid_area'", "]", "[", "0", "]", "=", "-", "(", "meta", "[", "'valid_area'", "]", "[", "0", "]", "+", "meta", "[", "'valid_area'", "]", "[", "2", "]", ")", "+", "w", "\n", "\n", "return", "image", ",", "anns", ",", "meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.crop.Crop.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "long_edge", ",", "use_area_of_interest", "=", "True", ")", ":", "\n", "        ", "self", ".", "long_edge", "=", "long_edge", "\n", "self", ".", "use_area_of_interest", "=", "use_area_of_interest", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.crop.Crop.__call__": [[17, 47], ["copy.deepcopy", "copy.deepcopy", "meta[].copy", "crop.Crop.crop", "LOG.debug", "numpy.maximum", "numpy.maximum", "numpy.minimum", "LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.crop.Crop.crop", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "meta", "=", "copy", ".", "deepcopy", "(", "meta", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "original_valid_area", "=", "meta", "[", "'valid_area'", "]", ".", "copy", "(", ")", "\n", "\n", "image", ",", "anns", ",", "ltrb", "=", "self", ".", "crop", "(", "image", ",", "anns", ",", "meta", "[", "'valid_area'", "]", ")", "\n", "meta", "[", "'offset'", "]", "+=", "ltrb", "[", ":", "2", "]", "\n", "\n", "new_wh", "=", "image", ".", "size", "\n", "LOG", ".", "debug", "(", "'valid area before crop of %s: %s'", ",", "ltrb", ",", "original_valid_area", ")", "\n", "# process crops from left and top", "\n", "meta", "[", "'valid_area'", "]", "[", ":", "2", "]", "=", "np", ".", "maximum", "(", "0.0", ",", "original_valid_area", "[", ":", "2", "]", "-", "ltrb", "[", ":", "2", "]", ")", "\n", "# process cropps from right and bottom", "\n", "new_rb_corner", "=", "original_valid_area", "[", ":", "2", "]", "+", "original_valid_area", "[", "2", ":", "]", "-", "ltrb", "[", ":", "2", "]", "\n", "new_rb_corner", "=", "np", ".", "maximum", "(", "meta", "[", "'valid_area'", "]", "[", ":", "2", "]", ",", "new_rb_corner", ")", "\n", "new_rb_corner", "=", "np", ".", "minimum", "(", "new_wh", ",", "new_rb_corner", ")", "\n", "meta", "[", "'valid_area'", "]", "[", "2", ":", "]", "=", "new_rb_corner", "-", "meta", "[", "'valid_area'", "]", "[", ":", "2", "]", "\n", "LOG", ".", "debug", "(", "'valid area after crop: %s'", ",", "meta", "[", "'valid_area'", "]", ")", "\n", "\n", "## clip bounding boxes", "\n", "#for ann in anns:", "\n", "#    unclipped_bbox = ann['bbox'].copy()", "\n", "#    ann['bbox'][:2] = np.maximum(meta['valid_area'][:2], ann['bbox'][:2])", "\n", "#    new_rb = unclipped_bbox[:2] + unclipped_bbox[2:]", "\n", "#    new_rb = np.maximum(ann['bbox'][:2], new_rb)", "\n", "#    new_rb = np.minimum(meta['valid_area'][:2] + meta['valid_area'][2:], new_rb)", "\n", "#    ann['bbox'][2:] = new_rb - ann['bbox'][:2]", "\n", "#anns = [ann for ann in anns if ann['bbox'][2] > 0.0 and ann['bbox'][3] > 0.0]", "\n", "\n", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.crop.Crop.area_of_interest": [[48, 82], ["max", "max", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "min", "min", "max", "max", "numpy.any", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "ann.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "@", "staticmethod", "\n", "def", "area_of_interest", "(", "anns", ",", "valid_area", ",", "edge_length", ")", ":", "\n", "        ", "\"\"\"area that contains annotations with keypoints\"\"\"", "\n", "\n", "anns_of_interest", "=", "[", "\n", "ann", "for", "ann", "in", "anns", "\n", "if", "not", "ann", ".", "get", "(", "'iscrowd'", ",", "False", ")", "and", "np", ".", "any", "(", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ")", "\n", "]", "\n", "if", "not", "anns_of_interest", ":", "\n", "            ", "return", "valid_area", "\n", "\n", "", "min_x", "=", "min", "(", "np", ".", "min", "(", "ann", "[", "'keypoints'", "]", "[", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ",", "0", "]", ")", "\n", "for", "ann", "in", "anns_of_interest", ")", "-", "50", "\n", "min_y", "=", "min", "(", "np", ".", "min", "(", "ann", "[", "'keypoints'", "]", "[", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ",", "1", "]", ")", "\n", "for", "ann", "in", "anns_of_interest", ")", "-", "50", "\n", "max_x", "=", "max", "(", "np", ".", "max", "(", "ann", "[", "'keypoints'", "]", "[", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ",", "0", "]", ")", "\n", "for", "ann", "in", "anns_of_interest", ")", "+", "50", "\n", "max_y", "=", "max", "(", "np", ".", "max", "(", "ann", "[", "'keypoints'", "]", "[", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0", ",", "1", "]", ")", "\n", "for", "ann", "in", "anns_of_interest", ")", "+", "50", "\n", "\n", "# Make sure to stay inside of valid area.", "\n", "# Also make sure that the remaining window inside the valid area", "\n", "# has at least an edge_length in size (for the case where there is", "\n", "# only a small annotation in a corner).", "\n", "valid_area_r", "=", "valid_area", "[", "0", "]", "+", "valid_area", "[", "2", "]", "\n", "valid_area_b", "=", "valid_area", "[", "1", "]", "+", "valid_area", "[", "3", "]", "\n", "range_x", "=", "max", "(", "0", ",", "valid_area", "[", "2", "]", "-", "edge_length", ")", "\n", "range_y", "=", "max", "(", "0", ",", "valid_area", "[", "3", "]", "-", "edge_length", ")", "\n", "left", "=", "np", ".", "clip", "(", "min_x", ",", "valid_area", "[", "0", "]", ",", "valid_area", "[", "0", "]", "+", "range_x", ")", "\n", "top", "=", "np", ".", "clip", "(", "min_y", ",", "valid_area", "[", "1", "]", ",", "valid_area", "[", "1", "]", "+", "range_y", ")", "\n", "right", "=", "np", ".", "clip", "(", "max_x", ",", "valid_area_r", "-", "range_x", ",", "valid_area_r", ")", "\n", "bottom", "=", "np", ".", "clip", "(", "max_y", ",", "valid_area_b", "-", "range_y", ",", "valid_area_b", ")", "\n", "\n", "return", "(", "left", ",", "top", ",", "right", "-", "left", ",", "bottom", "-", "top", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.crop.Crop.crop": [[83, 134], ["int", "LOG.debug", "min", "min", "image.crop.crop.crop", "crop.Crop.area_of_interest", "int", "int", "numpy.array", "int", "torch.randint", "torch.clamp().item", "int", "torch.randint", "torch.clamp().item", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.crop.Crop.crop", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.crop.Crop.area_of_interest"], ["", "def", "crop", "(", "self", ",", "image", ",", "anns", ",", "valid_area", ")", ":", "\n", "        ", "if", "self", ".", "use_area_of_interest", ":", "\n", "            ", "area_of_interest", "=", "self", ".", "area_of_interest", "(", "anns", ",", "valid_area", ",", "self", ".", "long_edge", ")", "\n", "", "else", ":", "\n", "            ", "area_of_interest", "=", "valid_area", "\n", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "padding", "=", "int", "(", "self", ".", "long_edge", "/", "2.0", ")", "\n", "x_offset", ",", "y_offset", "=", "0", ",", "0", "\n", "if", "w", ">", "self", ".", "long_edge", ":", "\n", "            ", "min_x", "=", "int", "(", "area_of_interest", "[", "0", "]", ")", "\n", "max_x", "=", "int", "(", "area_of_interest", "[", "0", "]", "+", "area_of_interest", "[", "2", "]", ")", "-", "self", ".", "long_edge", "\n", "if", "max_x", ">", "min_x", ":", "\n", "                ", "x_offset", "=", "torch", ".", "randint", "(", "-", "padding", "+", "min_x", ",", "max_x", "+", "padding", ",", "(", "1", ",", ")", ")", "\n", "x_offset", "=", "torch", ".", "clamp", "(", "x_offset", ",", "min", "=", "min_x", ",", "max", "=", "max_x", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "x_offset", "=", "min_x", "\n", "", "", "if", "h", ">", "self", ".", "long_edge", ":", "\n", "            ", "min_y", "=", "int", "(", "area_of_interest", "[", "1", "]", ")", "\n", "max_y", "=", "int", "(", "area_of_interest", "[", "1", "]", "+", "area_of_interest", "[", "3", "]", ")", "-", "self", ".", "long_edge", "\n", "if", "max_y", ">", "min_y", ":", "\n", "                ", "y_offset", "=", "torch", ".", "randint", "(", "-", "padding", "+", "min_y", ",", "max_y", "+", "padding", ",", "(", "1", ",", ")", ")", "\n", "y_offset", "=", "torch", ".", "clamp", "(", "y_offset", ",", "min", "=", "min_y", ",", "max", "=", "max_y", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "y_offset", "=", "min_y", "\n", "", "", "LOG", ".", "debug", "(", "'crop offsets (%d, %d)'", ",", "x_offset", ",", "y_offset", ")", "\n", "\n", "# crop image", "\n", "new_w", "=", "min", "(", "self", ".", "long_edge", ",", "w", "-", "x_offset", ")", "\n", "new_h", "=", "min", "(", "self", ".", "long_edge", ",", "h", "-", "y_offset", ")", "\n", "# ltrb might be confusing name:", "\n", "# it's the coordinates of the top-left corner and the coordinates", "\n", "# of the bottom right corner", "\n", "ltrb", "=", "(", "x_offset", ",", "y_offset", ",", "x_offset", "+", "new_w", ",", "y_offset", "+", "new_h", ")", "\n", "image", "=", "image", ".", "crop", "(", "ltrb", ")", "\n", "\n", "# crop keypoints", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "ann", "[", "'keypoints'", "]", "[", ":", ",", "0", "]", "-=", "x_offset", "\n", "ann", "[", "'keypoints'", "]", "[", ":", ",", "1", "]", "-=", "y_offset", "\n", "ann", "[", "'bbox'", "]", "[", "0", "]", "-=", "x_offset", "\n", "ann", "[", "'bbox'", "]", "[", "1", "]", "-=", "y_offset", "\n", "\n", "if", "'parsing'", "in", "ann", ":", "\n", "                ", "ann", "[", "'parsing'", "]", "=", "ann", "[", "'parsing'", "]", "[", "ltrb", "[", "1", "]", ":", "ltrb", "[", "3", "]", ",", "ltrb", "[", "0", "]", ":", "ltrb", "[", "2", "]", "]", "\n", "", "if", "'segment_mask'", "in", "ann", ":", "\n", "                ", "ann", "[", "'segment_mask'", "]", "=", "ann", "[", "'segment_mask'", "]", "[", "ltrb", "[", "1", "]", ":", "ltrb", "[", "3", "]", ",", "ltrb", "[", "0", "]", ":", "ltrb", "[", "2", "]", "]", "\n", "", "if", "'edge'", "in", "ann", ":", "\n", "                ", "ann", "[", "'edge'", "]", "=", "ann", "[", "'edge'", "]", "[", "ltrb", "[", "1", "]", ":", "ltrb", "[", "3", "]", ",", "ltrb", "[", "0", "]", ":", "ltrb", "[", "2", "]", "]", "\n", "\n", "", "", "return", "image", ",", "anns", ",", "np", ".", "array", "(", "ltrb", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.multi_scale.MultiScale.__init__": [[5, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "preprocess_list", ")", ":", "\n", "        ", "\"\"\"Create lists of preprocesses.\n\n        Must be the most outer preprocess function.\n        Preprocess_list can contain transforms.Compose() functions.\n        \"\"\"", "\n", "self", ".", "preprocess_list", "=", "preprocess_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.multi_scale.MultiScale.__call__": [[13, 22], ["p", "image_list.append", "anns_list.append", "meta_list.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "image_list", ",", "anns_list", ",", "meta_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "p", "in", "self", ".", "preprocess_list", ":", "\n", "            ", "this_image", ",", "this_anns", ",", "this_meta", "=", "p", "(", "image", ",", "anns", ",", "meta", ")", "\n", "image_list", ".", "append", "(", "this_image", ")", "\n", "anns_list", ".", "append", "(", "this_anns", ")", "\n", "meta_list", ".", "append", "(", "this_meta", ")", "\n", "\n", "", "return", "image_list", ",", "anns_list", ",", "meta_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.annotations.NormalizeAnnotations.normalize_annotations": [[44, 87], ["copy.deepcopy", "numpy.asarray().reshape", "numpy.asarray", "numpy.copy", "numpy.zeros", "annotations.dp_mask_to_mask", "numpy.array().astype", "numpy.copy", "numpy.copy", "annotations.coco_polygon_to_mask", "numpy.copy", "numpy.copy", "utils.generate_edge", "numpy.copy", "numpy.copy", "numpy.asarray", "min", "min", "cv2.resize", "numpy.where", "numpy.array", "int", "int"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.annotations.dp_mask_to_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.annotations.coco_polygon_to_mask", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.utils.generate_edge"], ["    ", "@", "staticmethod", "\n", "def", "normalize_annotations", "(", "anns", ",", "w", ",", "h", ")", ":", "\n", "        ", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "'keypoints'", "not", "in", "ann", ":", "\n", "                ", "ann", "[", "'keypoints'", "]", "=", "[", "]", "\n", "", "if", "'bbox'", "not", "in", "ann", ":", "\n", "                ", "ann", "[", "'bbox'", "]", "=", "[", "]", "\n", "\n", "", "ann", "[", "'keypoints'", "]", "=", "np", ".", "asarray", "(", "ann", "[", "'keypoints'", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "ann", "[", "'bbox'", "]", "=", "np", ".", "asarray", "(", "ann", "[", "'bbox'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "'bbox_original'", "not", "in", "ann", ":", "\n", "                ", "ann", "[", "'bbox_original'", "]", "=", "np", ".", "copy", "(", "ann", "[", "'bbox'", "]", ")", "\n", "\n", "", "if", "'dp_masks'", "in", "ann", "and", "'parsing'", "not", "in", "ann", ":", "\n", "                ", "semantic_mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask", "=", "dp_mask_to_mask", "(", "ann", "[", "'dp_masks'", "]", ")", "\n", "bbr", "=", "np", ".", "array", "(", "ann", "[", "'bbox'", "]", ")", ".", "astype", "(", "int", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbr", "[", "0", "]", ",", "bbr", "[", "1", "]", ",", "bbr", "[", "0", "]", "+", "bbr", "[", "2", "]", ",", "bbr", "[", "1", "]", "+", "bbr", "[", "3", "]", "\n", "x2", ",", "y2", "=", "min", "(", "x2", ",", "w", ")", ",", "min", "(", "y2", ",", "h", ")", "\n", "\n", "if", "x1", "<", "x2", "and", "y1", "<", "y2", ":", "\n", "                    ", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "int", "(", "x2", "-", "x1", ")", ",", "int", "(", "y2", "-", "y1", ")", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "mask_bool", "=", "np", ".", "where", "(", "mask", ">", "0", ",", "1", ",", "0", ")", "\n", "semantic_mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "[", "mask_bool", ">", "0", "]", "=", "mask", "[", "mask_bool", ">", "0", "]", "\n", "", "ann", "[", "'parsing'", "]", "=", "np", ".", "copy", "(", "semantic_mask", ")", "\n", "ann", "[", "'parsing_original'", "]", "=", "np", ".", "copy", "(", "semantic_mask", ")", "\n", "", "elif", "'parsing'", "in", "ann", "and", "'parsing_original'", "not", "in", "ann", ":", "\n", "                ", "ann", "[", "'parsing_original'", "]", "=", "ann", "[", "'parsing'", "]", "\n", "\n", "", "if", "'segmentation'", "in", "ann", "and", "'segment_mask'", "not", "in", "ann", ":", "\n", "                ", "mask", "=", "coco_polygon_to_mask", "(", "ann", "[", "'segmentation'", "]", ",", "h", ",", "w", ")", "\n", "ann", "[", "'segment_mask'", "]", "=", "np", ".", "copy", "(", "mask", ")", "\n", "ann", "[", "'segment_mask_original'", "]", "=", "np", ".", "copy", "(", "mask", ")", "\n", "\n", "", "if", "'edge'", "not", "in", "ann", "or", "'edge_original'", "not", "in", "ann", ":", "\n", "                ", "edge", "=", "generate_edge", "(", "ann", "[", "'segment_mask'", "]", ")", "\n", "ann", "[", "'edge'", "]", "=", "np", ".", "copy", "(", "edge", ")", "\n", "ann", "[", "'edge_original'", "]", "=", "np", ".", "copy", "(", "edge", ")", "\n", "", "", "return", "anns", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.annotations.NormalizeAnnotations.__call__": [[88, 110], ["annotations.NormalizeAnnotations.normalize_annotations", "meta_from_image.items", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.annotations.NormalizeAnnotations.normalize_annotations"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "anns", "=", "self", ".", "normalize_annotations", "(", "anns", ",", "w", ",", "h", ")", "\n", "\n", "if", "meta", "is", "None", ":", "\n", "            ", "meta", "=", "{", "}", "\n", "\n", "# fill meta with defaults if not already present", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "meta_from_image", "=", "{", "\n", "'offset'", ":", "np", ".", "array", "(", "(", "0.0", ",", "0.0", ")", ")", ",", "\n", "'scale'", ":", "np", ".", "array", "(", "(", "1.0", ",", "1.0", ")", ")", ",", "\n", "'rotation'", ":", "{", "'angle'", ":", "0.0", ",", "'width'", ":", "None", ",", "'height'", ":", "None", "}", ",", "\n", "'valid_area'", ":", "np", ".", "array", "(", "(", "0.0", ",", "0.0", ",", "w", "-", "1", ",", "h", "-", "1", ")", ")", ",", "\n", "'hflip'", ":", "False", ",", "\n", "'width_height'", ":", "np", ".", "array", "(", "(", "w", ",", "h", ")", ")", ",", "\n", "}", "\n", "for", "k", ",", "v", "in", "meta_from_image", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "meta", ":", "\n", "                ", "meta", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.annotations.AnnotationJitter.__init__": [[113, 115], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.annotations.AnnotationJitter.__call__": [[116, 129], ["copy.deepcopy", "copy.deepcopy", "torch.rand().numpy", "torch.rand().numpy", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "meta", "=", "copy", ".", "deepcopy", "(", "meta", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "keypoints_xy", "=", "ann", "[", "'keypoints'", "]", "[", ":", ",", ":", "2", "]", "\n", "sym_rnd_kp", "=", "(", "torch", ".", "rand", "(", "*", "keypoints_xy", ".", "shape", ")", ".", "numpy", "(", ")", "-", "0.5", ")", "*", "2.0", "\n", "keypoints_xy", "+=", "self", ".", "epsilon", "*", "sym_rnd_kp", "\n", "\n", "sym_rnd_bbox", "=", "(", "torch", ".", "rand", "(", "(", "4", ",", ")", ")", ".", "numpy", "(", ")", "-", "0.5", ")", "*", "2.0", "\n", "ann", "[", "'bbox'", "]", "+=", "0.5", "*", "self", ".", "epsilon", "*", "sym_rnd_bbox", "\n", "\n", "", "return", "image", ",", "anns", ",", "meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.annotations.coco_polygon_to_mask": [[16, 31], ["pycocotools.decode", "type", "pycocotools.frPyObjects", "pycocotools.merge", "type", "pycocotools.frPyObjects"], "function", ["None"], ["def", "coco_polygon_to_mask", "(", "segm", ",", "h", ",", "w", ")", ":", "\n", "    ", "if", "type", "(", "segm", ")", "==", "list", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "        ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "type", "(", "segm", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "# uncompressed RLE", "\n", "        ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "        ", "rle", "=", "segm", "\n", "\n", "", "m", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.annotations.dp_mask_to_mask": [[33, 41], ["numpy.zeros", "range", "pycocotools.decode"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "def", "dp_mask_to_mask", "(", "polys", ")", ":", "\n", "    ", "semantic_mask", "=", "np", ".", "zeros", "(", "(", "256", ",", "256", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "15", ")", ":", "\n", "        ", "if", "polys", "[", "i", "-", "1", "]", ":", "\n", "            ", "current_mask", "=", "maskUtils", ".", "decode", "(", "polys", "[", "i", "-", "1", "]", ")", "\n", "semantic_mask", "[", "current_mask", ">", "0", "]", "=", "i", "\n", "\n", "", "", "return", "semantic_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale.RescaleRelative.__init__": [[86, 98], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale_range", "=", "(", "0.5", ",", "1.0", ")", ",", "*", ",", "\n", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ",", "\n", "absolute_reference", "=", "None", ",", "\n", "fast", "=", "False", ",", "\n", "power_law", "=", "False", ",", "\n", "stretch_range", "=", "None", ")", ":", "\n", "        ", "self", ".", "scale_range", "=", "scale_range", "\n", "self", ".", "resample", "=", "resample", "\n", "self", ".", "absolute_reference", "=", "absolute_reference", "\n", "self", ".", "fast", "=", "fast", "\n", "self", ".", "power_law", "=", "power_law", "\n", "self", ".", "stretch_range", "=", "stretch_range", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale.RescaleRelative.__call__": [[99, 140], ["isinstance", "scale._scale", "int", "int", "LOG.debug", "numpy.log2", "numpy.log2", "torch.rand().item", "torch.rand().item", "torch.rand().item", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale._scale", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "scale_range", ",", "tuple", ")", ":", "\n", "            ", "if", "self", ".", "power_law", ":", "\n", "                ", "rnd_range", "=", "np", ".", "log2", "(", "self", ".", "scale_range", "[", "0", "]", ")", ",", "np", ".", "log2", "(", "self", ".", "scale_range", "[", "1", "]", ")", "\n", "log2_scale_factor", "=", "(", "\n", "rnd_range", "[", "0", "]", "+", "\n", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", "*", "(", "rnd_range", "[", "1", "]", "-", "rnd_range", "[", "0", "]", ")", "\n", ")", "\n", "\n", "scale_factor", "=", "2", "**", "log2_scale_factor", "\n", "LOG", ".", "debug", "(", "'rnd range = %s, log2_scale_Factor = %f, scale factor = %f'", ",", "\n", "rnd_range", ",", "log2_scale_factor", ",", "scale_factor", ")", "\n", "", "else", ":", "\n", "                ", "scale_factor", "=", "(", "\n", "self", ".", "scale_range", "[", "0", "]", "+", "\n", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", "*", "(", "self", ".", "scale_range", "[", "1", "]", "-", "self", ".", "scale_range", "[", "0", "]", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "scale_factor", "=", "self", ".", "scale_range", "\n", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "if", "self", ".", "absolute_reference", "is", "not", "None", ":", "\n", "            ", "if", "w", ">", "h", ":", "\n", "                ", "h", "*=", "self", ".", "absolute_reference", "/", "w", "\n", "w", "=", "self", ".", "absolute_reference", "\n", "", "else", ":", "\n", "                ", "w", "*=", "self", ".", "absolute_reference", "/", "h", "\n", "h", "=", "self", ".", "absolute_reference", "\n", "\n", "", "", "stretch_factor", "=", "1.0", "\n", "if", "self", ".", "stretch_range", "is", "not", "None", ":", "\n", "            ", "stretch_factor", "=", "(", "\n", "self", ".", "stretch_range", "[", "0", "]", "+", "\n", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", "*", "(", "\n", "self", ".", "stretch_range", "[", "1", "]", "-", "self", ".", "stretch_range", "[", "0", "]", ")", "\n", ")", "\n", "\n", "", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "scale_factor", "*", "stretch_factor", ")", ",", "int", "(", "\n", "h", "*", "scale_factor", ")", "\n", "\n", "return", "_scale", "(", "image", ",", "anns", ",", "meta", ",", "target_w", ",", "target_h", ",", "self", ".", "resample", ",", "fast", "=", "self", ".", "fast", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale.RescaleAbsolute.__init__": [[143, 147], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "long_edge", ",", "*", ",", "fast", "=", "False", ",", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "long_edge", "=", "long_edge", "\n", "self", ".", "fast", "=", "fast", "\n", "self", ".", "resample", "=", "resample", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale.RescaleAbsolute.__call__": [[148, 164], ["isinstance", "scale._scale", "torch.randint().item", "max", "int", "int", "int", "int", "torch.randint", "int", "int"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale._scale"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "this_long_edge", "=", "self", ".", "long_edge", "\n", "if", "isinstance", "(", "this_long_edge", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "this_long_edge", "=", "torch", ".", "randint", "(", "\n", "int", "(", "this_long_edge", "[", "0", "]", ")", ",", "\n", "int", "(", "this_long_edge", "[", "1", "]", ")", ",", "(", "1", ",", ")", "\n", ")", ".", "item", "(", ")", "\n", "\n", "", "s", "=", "this_long_edge", "/", "max", "(", "h", ",", "w", ")", "\n", "if", "h", ">", "w", ":", "\n", "            ", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "s", ")", ",", "int", "(", "this_long_edge", ")", "\n", "", "else", ":", "\n", "            ", "target_w", ",", "target_h", "=", "int", "(", "this_long_edge", ")", ",", "int", "(", "h", "*", "s", ")", "\n", "", "return", "_scale", "(", "image", ",", "anns", ",", "meta", ",", "target_w", ",", "target_h", ",", "self", ".", "resample", ",", "fast", "=", "self", ".", "fast", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale.ScaleMix.__init__": [[167, 175], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale_threshold", ",", "*", ",", "\n", "upscale_factor", "=", "2.0", ",", "\n", "downscale_factor", "=", "0.5", ",", "\n", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "scale_threshold", "=", "scale_threshold", "\n", "self", ".", "upscale_factor", "=", "upscale_factor", "\n", "self", ".", "downscale_factor", "=", "downscale_factor", "\n", "self", ".", "resample", "=", "resample", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale.ScaleMix.__call__": [[176, 199], ["numpy.array", "LOG.debug", "numpy.all", "numpy.all", "LOG.debug", "scale._scale", "numpy.sqrt", "int", "int", "int", "int", "numpy.any", "getattr"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale._scale"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "scales", "=", "np", ".", "array", "(", "[", "\n", "np", ".", "sqrt", "(", "ann", "[", "'bbox'", "]", "[", "2", "]", "*", "ann", "[", "'bbox'", "]", "[", "3", "]", ")", "\n", "for", "ann", "in", "anns", "if", "(", "not", "getattr", "(", "ann", ",", "'iscrowd'", ",", "False", ")", "and", "\n", "np", ".", "any", "(", "ann", "[", "'keypoints'", "]", "[", ":", ",", "2", "]", ">", "0.0", ")", ")", "\n", "]", ")", "\n", "LOG", ".", "debug", "(", "'scale threshold = %f, scales = %s'", ",", "self", ".", "scale_threshold", ",", "scales", ")", "\n", "if", "not", "scales", ".", "shape", "[", "0", "]", ":", "\n", "            ", "return", "image", ",", "anns", ",", "meta", "\n", "\n", "", "all_above_threshold", "=", "np", ".", "all", "(", "scales", ">", "self", ".", "scale_threshold", ")", "\n", "all_below_threshold", "=", "np", ".", "all", "(", "scales", "<", "self", ".", "scale_threshold", ")", "\n", "if", "not", "all_above_threshold", "and", "not", "all_below_threshold", ":", "\n", "            ", "return", "image", ",", "anns", ",", "meta", "\n", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "if", "all_above_threshold", ":", "\n", "            ", "target_w", ",", "target_h", "=", "int", "(", "w", "/", "2", ")", ",", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "            ", "target_w", ",", "target_h", "=", "int", "(", "w", "*", "2", ")", ",", "int", "(", "h", "*", "2", ")", "\n", "", "LOG", ".", "debug", "(", "'scale mix from (%d, %d) to (%d, %d)'", ",", "w", ",", "h", ",", "target_w", ",", "target_h", ")", "\n", "return", "_scale", "(", "image", ",", "anns", ",", "meta", ",", "target_w", ",", "target_h", ",", "self", ".", "resample", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.scale._scale": [[16, 83], ["copy.deepcopy", "copy.deepcopy", "LOG.debug", "numpy.array", "LOG.debug", "LOG.debug", "PIL.Image.fromarray.resize", "numpy.asarray", "PIL.Image.fromarray", "warnings.catch_warnings", "warnings.simplefilter", "scipy.ndimage.zoom", "cv2.resize", "cv2.resize", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["def", "_scale", "(", "image", ",", "anns", ",", "meta", ",", "target_w", ",", "target_h", ",", "resample", ",", "*", ",", "fast", "=", "False", ")", ":", "\n", "    ", "\"\"\"target_w and target_h as integers\n\n    Internally, resample in Pillow are aliases:\n    PIL.Image.BILINEAR = 2\n    PIL.Image.BICUBIC = 3\n    \"\"\"", "\n", "meta", "=", "copy", ".", "deepcopy", "(", "meta", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "assert", "resample", "in", "(", "0", ",", "2", ",", "3", ")", "\n", "\n", "# scale image", "\n", "if", "fast", ":", "\n", "        ", "image", "=", "image", ".", "resize", "(", "(", "target_w", ",", "target_h", ")", ",", "resample", ")", "\n", "", "else", ":", "\n", "        ", "order", "=", "resample", "\n", "if", "order", "==", "2", ":", "\n", "            ", "order", "=", "1", "\n", "\n", "", "im_np", "=", "np", ".", "asarray", "(", "image", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "'ignore'", ")", "\n", "im_np", "=", "scipy", ".", "ndimage", ".", "zoom", "(", "im_np", ",", "(", "target_h", "/", "h", ",", "target_w", "/", "w", ",", "1", ")", ",", "\n", "order", "=", "order", ")", "\n", "", "image", "=", "PIL", ".", "Image", ".", "fromarray", "(", "im_np", ")", "\n", "\n", "", "LOG", ".", "debug", "(", "'before resize = (%f, %f), after = %s'", ",", "w", ",", "h", ",", "image", ".", "size", ")", "\n", "assert", "image", ".", "size", "[", "0", "]", "==", "target_w", "\n", "assert", "image", ".", "size", "[", "1", "]", "==", "target_h", "\n", "\n", "# rescale keypoints", "\n", "x_scale", "=", "(", "image", ".", "size", "[", "0", "]", "-", "1", ")", "/", "(", "w", "-", "1", ")", "\n", "y_scale", "=", "(", "image", ".", "size", "[", "1", "]", "-", "1", ")", "/", "(", "h", "-", "1", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "        ", "ann", "[", "'keypoints'", "]", "[", ":", ",", "0", "]", "=", "ann", "[", "'keypoints'", "]", "[", ":", ",", "0", "]", "*", "x_scale", "\n", "ann", "[", "'keypoints'", "]", "[", ":", ",", "1", "]", "=", "ann", "[", "'keypoints'", "]", "[", ":", ",", "1", "]", "*", "y_scale", "\n", "ann", "[", "'bbox'", "]", "[", "0", "]", "*=", "x_scale", "\n", "ann", "[", "'bbox'", "]", "[", "1", "]", "*=", "y_scale", "\n", "ann", "[", "'bbox'", "]", "[", "2", "]", "*=", "x_scale", "\n", "ann", "[", "'bbox'", "]", "[", "3", "]", "*=", "y_scale", "\n", "\n", "# rescale semantic mask", "\n", "if", "'parsing'", "in", "ann", ":", "\n", "            ", "ann", "[", "'parsing'", "]", "=", "cv2", ".", "resize", "(", "\n", "ann", "[", "'parsing'", "]", ",", "(", "target_w", ",", "target_h", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "if", "'segment_mask'", "in", "ann", ":", "\n", "            ", "ann", "[", "'segment_mask'", "]", "=", "cv2", ".", "resize", "(", "\n", "ann", "[", "'segment_mask'", "]", ",", "(", "target_w", ",", "target_h", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "if", "'edge'", "in", "ann", ":", "\n", "            ", "ann", "[", "'edge'", "]", "=", "cv2", ".", "resize", "(", "\n", "ann", "[", "'edge'", "]", ",", "(", "target_w", ",", "target_h", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# adjust meta", "\n", "", "", "scale_factors", "=", "np", ".", "array", "(", "(", "x_scale", ",", "y_scale", ")", ")", "\n", "LOG", ".", "debug", "(", "'meta before: %s'", ",", "meta", ")", "\n", "meta", "[", "'offset'", "]", "*=", "scale_factors", "\n", "meta", "[", "'scale'", "]", "*=", "scale_factors", "\n", "meta", "[", "'valid_area'", "]", "[", ":", "2", "]", "*=", "scale_factors", "\n", "meta", "[", "'valid_area'", "]", "[", "2", ":", "]", "*=", "scale_factors", "\n", "LOG", ".", "debug", "(", "'meta after: %s'", ",", "meta", ")", "\n", "\n", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.rotate.RotateBy90.__init__": [[17, 22], ["preprocess.Preprocess.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "angle_perturbation", "=", "0.0", ",", "fixed_angle", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "angle_perturbation", "=", "angle_perturbation", "\n", "self", ".", "fixed_angle", "=", "fixed_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.rotate.RotateBy90.__call__": [[23, 82], ["copy.deepcopy", "copy.deepcopy", "LOG.debug", "LOG.debug", "math.cos", "math.sin", "LOG.debug", "utils.rotate_box", "meta[].copy", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "LOG.debug", "float", "numpy.asarray", "PIL.Image.fromarray", "utils.rotate_box", "torch.rand().item", "int", "numpy.swapaxes", "numpy.flip", "xy[].copy", "xy[].copy", "float", "numpy.swapaxes", "numpy.flip", "torch.rand", "torch.rand().item", "numpy.flip", "numpy.flip", "scipy.ndimage.rotate", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.utils.rotate_box", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.utils.rotate_box"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "meta", "=", "copy", ".", "deepcopy", "(", "meta", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "if", "self", ".", "fixed_angle", "is", "not", "None", ":", "\n", "            ", "angle", "=", "self", ".", "fixed_angle", "\n", "", "else", ":", "\n", "            ", "rnd1", "=", "float", "(", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", ")", "\n", "angle", "=", "int", "(", "rnd1", "*", "4.0", ")", "*", "90.0", "\n", "sym_rnd2", "=", "(", "float", "(", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", ")", "-", "0.5", ")", "*", "2.0", "\n", "angle", "+=", "sym_rnd2", "*", "self", ".", "angle_perturbation", "\n", "", "LOG", ".", "debug", "(", "'rotation angle = %f'", ",", "angle", ")", "\n", "assert", "meta", "[", "'rotation'", "]", "[", "'angle'", "]", "==", "0.0", "\n", "meta", "[", "'rotation'", "]", "[", "'angle'", "]", "=", "angle", "\n", "meta", "[", "'rotation'", "]", "[", "'width'", "]", "=", "w", "\n", "meta", "[", "'rotation'", "]", "[", "'height'", "]", "=", "h", "\n", "\n", "# rotate image", "\n", "if", "angle", "!=", "0.0", ":", "\n", "            ", "im_np", "=", "np", ".", "asarray", "(", "image", ")", "\n", "if", "im_np", ".", "shape", "[", "0", "]", "==", "im_np", ".", "shape", "[", "1", "]", "and", "angle", "==", "90", ":", "\n", "                ", "im_np", "=", "np", ".", "swapaxes", "(", "im_np", ",", "0", ",", "1", ")", "\n", "im_np", "=", "np", ".", "flip", "(", "im_np", ",", "axis", "=", "0", ")", "\n", "", "elif", "im_np", ".", "shape", "[", "0", "]", "==", "im_np", ".", "shape", "[", "1", "]", "and", "angle", "==", "270", ":", "\n", "                ", "im_np", "=", "np", ".", "swapaxes", "(", "im_np", ",", "0", ",", "1", ")", "\n", "im_np", "=", "np", ".", "flip", "(", "im_np", ",", "axis", "=", "1", ")", "\n", "", "elif", "im_np", ".", "shape", "[", "0", "]", "==", "im_np", ".", "shape", "[", "1", "]", "and", "angle", "==", "180", ":", "\n", "                ", "im_np", "=", "np", ".", "flip", "(", "im_np", ",", "axis", "=", "0", ")", "\n", "im_np", "=", "np", ".", "flip", "(", "im_np", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "im_np", "=", "scipy", ".", "ndimage", ".", "rotate", "(", "im_np", ",", "angle", "=", "angle", ",", "cval", "=", "127", ",", "reshape", "=", "False", ")", "\n", "", "image", "=", "PIL", ".", "Image", ".", "fromarray", "(", "im_np", ")", "\n", "", "LOG", ".", "debug", "(", "'rotated by = %f degrees'", ",", "angle", ")", "\n", "\n", "# rotate keypoints", "\n", "cangle", "=", "math", ".", "cos", "(", "angle", "/", "180.0", "*", "math", ".", "pi", ")", "\n", "sangle", "=", "math", ".", "sin", "(", "angle", "/", "180.0", "*", "math", ".", "pi", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "xy", "=", "ann", "[", "'keypoints'", "]", "[", ":", ",", ":", "2", "]", "\n", "x_old", "=", "xy", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "-", "(", "w", "-", "1", ")", "/", "2", "\n", "y_old", "=", "xy", "[", ":", ",", "1", "]", ".", "copy", "(", ")", "-", "(", "h", "-", "1", ")", "/", "2", "\n", "xy", "[", ":", ",", "0", "]", "=", "(", "w", "-", "1", ")", "/", "2", "+", "cangle", "*", "x_old", "+", "sangle", "*", "y_old", "\n", "xy", "[", ":", ",", "1", "]", "=", "(", "h", "-", "1", ")", "/", "2", "-", "sangle", "*", "x_old", "+", "cangle", "*", "y_old", "\n", "ann", "[", "'bbox'", "]", "=", "utils", ".", "rotate_box", "(", "ann", "[", "'bbox'", "]", ",", "w", "-", "1", ",", "h", "-", "1", ",", "angle", ")", "\n", "\n", "", "LOG", ".", "debug", "(", "'meta before: %s'", ",", "meta", ")", "\n", "meta", "[", "'valid_area'", "]", "=", "utils", ".", "rotate_box", "(", "meta", "[", "'valid_area'", "]", ",", "w", "-", "1", ",", "h", "-", "1", ",", "angle", ")", "\n", "# fix valid area to be inside original image dimensions", "\n", "original_valid_area", "=", "meta", "[", "'valid_area'", "]", ".", "copy", "(", ")", "\n", "meta", "[", "'valid_area'", "]", "[", "0", "]", "=", "np", ".", "clip", "(", "meta", "[", "'valid_area'", "]", "[", "0", "]", ",", "0", ",", "w", ")", "\n", "meta", "[", "'valid_area'", "]", "[", "1", "]", "=", "np", ".", "clip", "(", "meta", "[", "'valid_area'", "]", "[", "1", "]", ",", "0", ",", "h", ")", "\n", "new_rb_corner", "=", "original_valid_area", "[", ":", "2", "]", "+", "original_valid_area", "[", "2", ":", "]", "\n", "new_rb_corner", "[", "0", "]", "=", "np", ".", "clip", "(", "new_rb_corner", "[", "0", "]", ",", "0", ",", "w", ")", "\n", "new_rb_corner", "[", "1", "]", "=", "np", ".", "clip", "(", "new_rb_corner", "[", "1", "]", ",", "0", ",", "h", ")", "\n", "meta", "[", "'valid_area'", "]", "[", "2", ":", "]", "=", "new_rb_corner", "-", "meta", "[", "'valid_area'", "]", "[", ":", "2", "]", "\n", "LOG", ".", "debug", "(", "'meta after: %s'", ",", "meta", ")", "\n", "\n", "return", "image", ",", "anns", ",", "meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.random.RandomApply.__init__": [[10, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ",", "probability", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "probability", "=", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.random.RandomApply.__call__": [[14, 18], ["random.RandomApply.transform", "float", "torch.rand().item", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "if", "float", "(", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", ")", ">", "self", ".", "probability", ":", "\n", "            ", "return", "image", ",", "anns", ",", "meta", "\n", "", "return", "self", ".", "transform", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.random.DeterministicEqualChoice.__init__": [[21, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ",", "salt", "=", "0", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "salt", "=", "salt", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.random.DeterministicEqualChoice.__call__": [[25, 33], ["LOG.debug", "t", "hash", "len"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "assert", "meta", "[", "'image_id'", "]", ">", "0", "\n", "LOG", ".", "debug", "(", "'image id = %d'", ",", "meta", "[", "'image_id'", "]", ")", "\n", "choice", "=", "hash", "(", "meta", "[", "'image_id'", "]", "+", "self", ".", "salt", ")", "%", "len", "(", "self", ".", "transforms", ")", "\n", "t", "=", "self", ".", "transforms", "[", "choice", "]", "\n", "if", "t", "is", "None", ":", "\n", "            ", "return", "image", ",", "anns", ",", "meta", "\n", "", "return", "t", "(", "image", ",", "anns", ",", "meta", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.__call__": [[12, 15], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "\"\"\"Implementation of preprocess operation.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.keypoint_sets_inverse": [[16, 34], ["keypoint_sets.copy.copy.copy", "meta.get"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get"], ["", "@", "staticmethod", "\n", "def", "keypoint_sets_inverse", "(", "keypoint_sets", ",", "meta", ")", ":", "\n", "        ", "keypoint_sets", "=", "keypoint_sets", ".", "copy", "(", ")", "\n", "\n", "keypoint_sets", "[", ":", ",", ":", ",", "0", "]", "+=", "meta", "[", "'offset'", "]", "[", "0", "]", "\n", "keypoint_sets", "[", ":", ",", ":", ",", "1", "]", "+=", "meta", "[", "'offset'", "]", "[", "1", "]", "\n", "\n", "keypoint_sets", "[", ":", ",", ":", ",", "0", "]", "=", "keypoint_sets", "[", ":", ",", ":", ",", "0", "]", "/", "meta", "[", "'scale'", "]", "[", "0", "]", "\n", "keypoint_sets", "[", ":", ",", ":", ",", "1", "]", "=", "keypoint_sets", "[", ":", ",", ":", ",", "1", "]", "/", "meta", "[", "'scale'", "]", "[", "1", "]", "\n", "\n", "if", "meta", "[", "'hflip'", "]", ":", "\n", "            ", "w", "=", "meta", "[", "'width_height'", "]", "[", "0", "]", "\n", "keypoint_sets", "[", ":", ",", ":", ",", "0", "]", "=", "-", "keypoint_sets", "[", ":", ",", ":", ",", "0", "]", "+", "(", "w", "-", "1", ")", "\n", "for", "keypoints", "in", "keypoint_sets", ":", "\n", "                ", "if", "meta", ".", "get", "(", "'horizontal_swap'", ")", ":", "\n", "                    ", "keypoints", "[", ":", "]", "=", "meta", "[", "'horizontal_swap'", "]", "(", "keypoints", ")", "\n", "\n", "", "", "", "return", "keypoint_sets", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.annotations_inverse": [[35, 84], ["copy.deepcopy", "math.cos", "math.sin", "isinstance", "preprocess.Preprocess.anndet_inverse", "numpy.any", "meta.get", "xy[].copy", "xy[].copy", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.anndet_inverse", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.cif_seeds.CifSeeds.get", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.isnan"], ["", "@", "staticmethod", "\n", "def", "annotations_inverse", "(", "annotations", ",", "meta", ")", ":", "\n", "        ", "annotations", "=", "copy", ".", "deepcopy", "(", "annotations", ")", "\n", "\n", "# determine rotation parameters", "\n", "angle", "=", "-", "meta", "[", "'rotation'", "]", "[", "'angle'", "]", "\n", "rw", "=", "meta", "[", "'rotation'", "]", "[", "'width'", "]", "\n", "rh", "=", "meta", "[", "'rotation'", "]", "[", "'height'", "]", "\n", "cangle", "=", "math", ".", "cos", "(", "angle", "/", "180.0", "*", "math", ".", "pi", ")", "\n", "sangle", "=", "math", ".", "sin", "(", "angle", "/", "180.0", "*", "math", ".", "pi", ")", "\n", "\n", "for", "ann", "in", "annotations", ":", "\n", "            ", "if", "isinstance", "(", "ann", ",", "AnnotationDet", ")", ":", "\n", "                ", "Preprocess", ".", "anndet_inverse", "(", "ann", ",", "meta", ")", "\n", "continue", "\n", "\n", "# rotation", "\n", "", "if", "angle", "!=", "0.0", ":", "\n", "                ", "xy", "=", "ann", ".", "data", "[", ":", ",", ":", "2", "]", "\n", "x_old", "=", "xy", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "-", "(", "rw", "-", "1", ")", "/", "2", "\n", "y_old", "=", "xy", "[", ":", ",", "1", "]", ".", "copy", "(", ")", "-", "(", "rh", "-", "1", ")", "/", "2", "\n", "xy", "[", ":", ",", "0", "]", "=", "(", "rw", "-", "1", ")", "/", "2", "+", "cangle", "*", "x_old", "+", "sangle", "*", "y_old", "\n", "xy", "[", ":", ",", "1", "]", "=", "(", "rh", "-", "1", ")", "/", "2", "-", "sangle", "*", "x_old", "+", "cangle", "*", "y_old", "\n", "\n", "# offset", "\n", "", "ann", ".", "data", "[", ":", ",", "0", "]", "+=", "meta", "[", "'offset'", "]", "[", "0", "]", "\n", "ann", ".", "data", "[", ":", ",", "1", "]", "+=", "meta", "[", "'offset'", "]", "[", "1", "]", "\n", "\n", "# scale", "\n", "ann", ".", "data", "[", ":", ",", "0", "]", "=", "ann", ".", "data", "[", ":", ",", "0", "]", "/", "meta", "[", "'scale'", "]", "[", "0", "]", "\n", "ann", ".", "data", "[", ":", ",", "1", "]", "=", "ann", ".", "data", "[", ":", ",", "1", "]", "/", "meta", "[", "'scale'", "]", "[", "1", "]", "\n", "ann", ".", "joint_scales", "/=", "meta", "[", "'scale'", "]", "[", "0", "]", "\n", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "ann", ".", "data", ")", ")", "\n", "\n", "if", "meta", "[", "'hflip'", "]", ":", "\n", "                ", "w", "=", "meta", "[", "'width_height'", "]", "[", "0", "]", "\n", "ann", ".", "data", "[", ":", ",", "0", "]", "=", "-", "ann", ".", "data", "[", ":", ",", "0", "]", "+", "(", "w", "-", "1", ")", "\n", "if", "meta", ".", "get", "(", "'horizontal_swap'", ")", ":", "\n", "                    ", "ann", ".", "data", "[", ":", "]", "=", "meta", "[", "'horizontal_swap'", "]", "(", "ann", ".", "data", ")", "\n", "\n", "", "", "for", "_", ",", "__", ",", "c1", ",", "c2", "in", "ann", ".", "decoding_order", ":", "\n", "                ", "c1", "[", ":", "2", "]", "+=", "meta", "[", "'offset'", "]", "\n", "c2", "[", ":", "2", "]", "+=", "meta", "[", "'offset'", "]", "\n", "\n", "c1", "[", ":", "2", "]", "/=", "meta", "[", "'scale'", "]", "\n", "c2", "[", ":", "2", "]", "/=", "meta", "[", "'scale'", "]", "\n", "\n", "", "", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.anndet_inverse": [[85, 96], ["utils.rotate_box"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.utils.rotate_box"], ["", "@", "staticmethod", "\n", "def", "anndet_inverse", "(", "ann", ",", "meta", ")", ":", "\n", "        ", "angle", "=", "-", "meta", "[", "'rotation'", "]", "[", "'angle'", "]", "\n", "if", "angle", "!=", "0.0", ":", "\n", "            ", "rw", "=", "meta", "[", "'rotation'", "]", "[", "'width'", "]", "\n", "rh", "=", "meta", "[", "'rotation'", "]", "[", "'height'", "]", "\n", "ann", ".", "bbox", "=", "utils", ".", "rotate_box", "(", "ann", ".", "bbox", ",", "rw", "-", "1", ",", "rh", "-", "1", ",", "angle", ")", "\n", "\n", "", "ann", ".", "bbox", "[", ":", "2", "]", "+=", "meta", "[", "'offset'", "]", "\n", "ann", ".", "bbox", "[", ":", "2", "]", "/=", "meta", "[", "'scale'", "]", "\n", "ann", ".", "bbox", "[", "2", ":", "]", "/=", "meta", "[", "'scale'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_annotation_inverse": [[97, 107], ["copy.deepcopy", "cv2.resize", "int", "int", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "semantic_annotation_inverse", "(", "mask", ",", "target_size", ",", "meta", ")", ":", "\n", "        ", "mask", "=", "copy", ".", "deepcopy", "(", "mask", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "meta", "[", "'valid_area'", "]", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "int", "(", "x", ")", ",", "int", "(", "y", ")", ",", "int", "(", "w", ")", ",", "int", "(", "h", ")", "\n", "mask", "=", "mask", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "target_size", "[", "1", "]", ",", "target_size", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.offset_annotation_inverse": [[108, 118], ["copy.deepcopy", "cv2.resize", "int", "int", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "offset_annotation_inverse", "(", "mask", ",", "target_size", ",", "meta", ")", ":", "\n", "        ", "mask", "=", "copy", ".", "deepcopy", "(", "mask", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "meta", "[", "'valid_area'", "]", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "int", "(", "x", ")", ",", "int", "(", "y", ")", ",", "int", "(", "w", ")", ",", "int", "(", "h", ")", "\n", "mask", "=", "mask", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "target_size", "[", "1", "]", ",", "target_size", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.preprocess.Preprocess.semantic_scores_inverse": [[119, 135], ["copy.deepcopy", "torch.nn.functional.interpolate", "torch.Tensor.numpy().squeeze", "isinstance", "torch.Tensor", "int", "int", "int", "int", "torch.Tensor.numpy"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.dcn.interpolate"], ["", "@", "staticmethod", "\n", "def", "semantic_scores_inverse", "(", "scores", ",", "target_size", ",", "meta", ")", ":", "\n", "        ", "import", "torch", "\n", "if", "not", "isinstance", "(", "scores", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "scores", "=", "torch", ".", "Tensor", "(", "scores", ")", "\n", "scores", "=", "scores", "[", "None", ",", "...", "]", "\n", "\n", "", "scores", "=", "copy", ".", "deepcopy", "(", "scores", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "meta", "[", "'valid_area'", "]", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "int", "(", "x", ")", ",", "int", "(", "y", ")", ",", "int", "(", "w", ")", ",", "int", "(", "h", ")", "\n", "scores", "=", "scores", "[", ":", ",", ":", ",", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "scores", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "scores", ",", "target_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scores", "=", "scores", ".", "numpy", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "return", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.unclipped.UnclippedSides.__init__": [[12, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "margin", "=", "10", ",", "clipped_sides_okay", "=", "2", ")", ":", "\n", "        ", "self", ".", "margin", "=", "margin", "\n", "self", ".", "clipped_sides_okay", "=", "clipped_sides_okay", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.unclipped.UnclippedSides.__call__": [[16, 38], ["copy.deepcopy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "meta_rb", "=", "(", "meta", "[", "'valid_area'", "]", "[", "0", "]", "+", "meta", "[", "'valid_area'", "]", "[", "2", "]", ",", "\n", "meta", "[", "'valid_area'", "]", "[", "1", "]", "+", "meta", "[", "'valid_area'", "]", "[", "3", "]", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "ann_rb", "=", "(", "ann", "[", "'bbox'", "]", "[", "0", "]", "+", "ann", "[", "'bbox'", "]", "[", "2", "]", ",", "\n", "ann", "[", "'bbox'", "]", "[", "1", "]", "+", "ann", "[", "'bbox'", "]", "[", "3", "]", ")", "\n", "clipped_sides", "=", "0", "\n", "if", "ann", "[", "'bbox'", "]", "[", "0", "]", "-", "meta", "[", "'valid_area'", "]", "[", "0", "]", "<", "self", ".", "margin", ":", "\n", "                ", "clipped_sides", "+=", "1", "\n", "", "if", "ann", "[", "'bbox'", "]", "[", "1", "]", "-", "meta", "[", "'valid_area'", "]", "[", "1", "]", "<", "self", ".", "margin", ":", "\n", "                ", "clipped_sides", "+=", "1", "\n", "", "if", "meta_rb", "[", "0", "]", "-", "ann_rb", "[", "0", "]", "<", "self", ".", "margin", ":", "\n", "                ", "clipped_sides", "+=", "1", "\n", "", "if", "meta_rb", "[", "1", "]", "-", "ann_rb", "[", "1", "]", "<", "self", ".", "margin", ":", "\n", "                ", "clipped_sides", "+=", "1", "\n", "\n", "", "if", "clipped_sides", "<=", "self", ".", "clipped_sides_okay", ":", "\n", "                ", "continue", "\n", "", "ann", "[", "'iscrowd'", "]", "=", "True", "\n", "\n", "", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.unclipped.UnclippedArea.__init__": [[41, 43], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "threshold", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.unclipped.UnclippedArea.__call__": [[44, 57], ["copy.deepcopy", "numpy.prod", "numpy.prod", "LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "area_original", "=", "np", ".", "prod", "(", "ann", "[", "'bbox_original'", "]", "[", "2", ":", "]", ")", "\n", "area_origscale", "=", "np", ".", "prod", "(", "ann", "[", "'bbox'", "]", "[", "2", ":", "]", "/", "meta", "[", "'scale'", "]", ")", "\n", "LOG", ".", "debug", "(", "'clipped = %.0f, orig = %.0f'", ",", "area_origscale", ",", "area_original", ")", "\n", "\n", "if", "area_original", ">", "0.0", "and", "area_origscale", "/", "area_original", ">", "self", ".", "threshold", ":", "\n", "                ", "continue", "\n", "\n", "", "ann", "[", "'iscrowd'", "]", "=", "True", "\n", "\n", "", "return", "image", ",", "anns", ",", "meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.pad.CenterPad.__init__": [[14, 18], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "target_size", ")", ":", "\n", "        ", "if", "isinstance", "(", "target_size", ",", "int", ")", ":", "\n", "            ", "target_size", "=", "(", "target_size", ",", "target_size", ")", "\n", "", "self", ".", "target_size", "=", "target_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.pad.CenterPad.__call__": [[19, 30], ["copy.deepcopy", "copy.deepcopy", "LOG.debug", "pad.CenterPad.center_pad", "LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.pad.CenterPadTight.center_pad", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "meta", "=", "copy", ".", "deepcopy", "(", "meta", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "\n", "LOG", ".", "debug", "(", "'valid area before pad: %s, image size = %s'", ",", "meta", "[", "'valid_area'", "]", ",", "image", ".", "size", ")", "\n", "image", ",", "anns", ",", "ltrb", "=", "self", ".", "center_pad", "(", "image", ",", "anns", ")", "\n", "meta", "[", "'offset'", "]", "-=", "ltrb", "[", ":", "2", "]", "\n", "meta", "[", "'valid_area'", "]", "[", ":", "2", "]", "+=", "ltrb", "[", ":", "2", "]", "\n", "LOG", ".", "debug", "(", "'valid area after pad: %s, image size = %s'", ",", "meta", "[", "'valid_area'", "]", ",", "image", ".", "size", ")", "\n", "\n", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.pad.CenterPad.center_pad": [[31, 78], ["int", "int", "LOG.debug", "torchvision.transforms.functional.pad", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.copyMakeBorder"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "center_pad", "(", "self", ",", "image", ",", "anns", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "left", "=", "int", "(", "(", "self", ".", "target_size", "[", "0", "]", "-", "w", ")", "/", "2.0", ")", "\n", "top", "=", "int", "(", "(", "self", ".", "target_size", "[", "1", "]", "-", "h", ")", "/", "2.0", ")", "\n", "if", "left", "<", "0", ":", "\n", "            ", "left", "=", "0", "\n", "", "if", "top", "<", "0", ":", "\n", "            ", "top", "=", "0", "\n", "\n", "", "right", "=", "self", ".", "target_size", "[", "0", "]", "-", "w", "-", "left", "\n", "bottom", "=", "self", ".", "target_size", "[", "1", "]", "-", "h", "-", "top", "\n", "if", "right", "<", "0", ":", "\n", "            ", "right", "=", "0", "\n", "", "if", "bottom", "<", "0", ":", "\n", "            ", "bottom", "=", "0", "\n", "", "ltrb", "=", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", "\n", "LOG", ".", "debug", "(", "'pad with %s'", ",", "ltrb", ")", "\n", "\n", "# pad image", "\n", "image", "=", "torchvision", ".", "transforms", ".", "functional", ".", "pad", "(", "\n", "image", ",", "ltrb", ",", "fill", "=", "(", "124", ",", "116", ",", "104", ")", ")", "\n", "\n", "# pad annotations", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "ann", "[", "'keypoints'", "]", "[", ":", ",", "0", "]", "+=", "ltrb", "[", "0", "]", "\n", "ann", "[", "'keypoints'", "]", "[", ":", ",", "1", "]", "+=", "ltrb", "[", "1", "]", "\n", "ann", "[", "'bbox'", "]", "[", "0", "]", "+=", "ltrb", "[", "0", "]", "\n", "ann", "[", "'bbox'", "]", "[", "1", "]", "+=", "ltrb", "[", "1", "]", "\n", "\n", "if", "'parsing'", "in", "ann", ":", "\n", "                ", "ann", "[", "'parsing'", "]", "=", "cv2", ".", "copyMakeBorder", "(", "\n", "ann", "[", "'parsing'", "]", ",", "\n", "top", ",", "bottom", ",", "left", ",", "right", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "255", ",", ")", ")", "\n", "", "if", "'segment_mask'", "in", "ann", ":", "\n", "                ", "ann", "[", "'segment_mask'", "]", "=", "cv2", ".", "copyMakeBorder", "(", "\n", "ann", "[", "'segment_mask'", "]", ",", "\n", "top", ",", "bottom", ",", "left", ",", "right", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "255", ",", ")", ")", "\n", "", "if", "'edge'", "in", "ann", ":", "\n", "                ", "ann", "[", "'edge'", "]", "=", "cv2", ".", "copyMakeBorder", "(", "\n", "ann", "[", "'edge'", "]", ",", "\n", "top", ",", "bottom", ",", "left", ",", "right", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "255", ",", ")", ")", "\n", "\n", "", "", "return", "image", ",", "anns", ",", "ltrb", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.pad.CenterPadTight.__init__": [[81, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "multiple", ")", ":", "\n", "        ", "self", ".", "multiple", "=", "multiple", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.pad.CenterPadTight.__call__": [[84, 95], ["copy.deepcopy", "copy.deepcopy", "LOG.debug", "pad.CenterPadTight.center_pad", "LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.pad.CenterPadTight.center_pad", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "meta", "=", "copy", ".", "deepcopy", "(", "meta", ")", "\n", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "\n", "LOG", ".", "debug", "(", "'valid area before pad: %s, image size = %s'", ",", "meta", "[", "'valid_area'", "]", ",", "image", ".", "size", ")", "\n", "image", ",", "anns", ",", "ltrb", "=", "self", ".", "center_pad", "(", "image", ",", "anns", ")", "\n", "meta", "[", "'offset'", "]", "-=", "ltrb", "[", ":", "2", "]", "\n", "meta", "[", "'valid_area'", "]", "[", ":", "2", "]", "+=", "ltrb", "[", ":", "2", "]", "\n", "LOG", ".", "debug", "(", "'valid area after pad: %s, image size = %s'", ",", "meta", "[", "'valid_area'", "]", ",", "image", ".", "size", ")", "\n", "\n", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.pad.CenterPadTight.center_pad": [[96, 129], ["int", "int", "LOG.debug", "torchvision.transforms.functional.pad", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["", "def", "center_pad", "(", "self", ",", "image", ",", "anns", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "target_width", "=", "math", ".", "ceil", "(", "(", "w", "-", "1", ")", "/", "self", ".", "multiple", ")", "*", "self", ".", "multiple", "+", "1", "\n", "target_height", "=", "math", ".", "ceil", "(", "(", "h", "-", "1", ")", "/", "self", ".", "multiple", ")", "*", "self", ".", "multiple", "+", "1", "\n", "\n", "left", "=", "int", "(", "(", "target_width", "-", "w", ")", "/", "2.0", ")", "\n", "top", "=", "int", "(", "(", "target_height", "-", "h", ")", "/", "2.0", ")", "\n", "if", "left", "<", "0", ":", "\n", "            ", "left", "=", "0", "\n", "", "if", "top", "<", "0", ":", "\n", "            ", "top", "=", "0", "\n", "\n", "", "right", "=", "target_width", "-", "w", "-", "left", "\n", "bottom", "=", "target_height", "-", "h", "-", "top", "\n", "if", "right", "<", "0", ":", "\n", "            ", "right", "=", "0", "\n", "", "if", "bottom", "<", "0", ":", "\n", "            ", "bottom", "=", "0", "\n", "", "ltrb", "=", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", "\n", "LOG", ".", "debug", "(", "'pad with %s'", ",", "ltrb", ")", "\n", "\n", "# pad image", "\n", "image", "=", "torchvision", ".", "transforms", ".", "functional", ".", "pad", "(", "\n", "image", ",", "ltrb", ",", "fill", "=", "(", "124", ",", "116", ",", "104", ")", ")", "\n", "\n", "# pad annotations", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "ann", "[", "'keypoints'", "]", "[", ":", ",", "0", "]", "+=", "ltrb", "[", "0", "]", "\n", "ann", "[", "'keypoints'", "]", "[", ":", ",", "1", "]", "+=", "ltrb", "[", "1", "]", "\n", "ann", "[", "'bbox'", "]", "[", "0", "]", "+=", "ltrb", "[", "0", "]", "\n", "ann", "[", "'bbox'", "]", "[", "1", "]", "+=", "ltrb", "[", "1", "]", "\n", "\n", "", "return", "image", ",", "anns", ",", "ltrb", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.pad.SquarePad.__call__": [[132, 135], ["pad.CenterPad", "CenterPad.", "max"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "center_pad", "=", "CenterPad", "(", "max", "(", "image", ".", "size", ")", ")", "\n", "return", "center_pad", "(", "image", ",", "anns", ",", "meta", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.minsize.MinSize.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_side", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "min_side", "=", "min_side", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.minsize.MinSize.__call__": [[13, 22], ["copy.deepcopy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "anns", "=", "copy", ".", "deepcopy", "(", "anns", ")", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "if", "ann", "[", "'bbox'", "]", "[", "2", "]", ">", "self", ".", "min_side", "and", "ann", "[", "'bbox'", "]", "[", "3", "]", ">", "self", ".", "min_side", ":", "\n", "                ", "continue", "\n", "", "ann", "[", "'iscrowd'", "]", "=", "True", "\n", "\n", "", "return", "image", ",", "anns", ",", "meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.utils.rotate_box": [[6, 30], ["math.cos", "math.sin", "numpy.array", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.array", "four_corners[].copy", "four_corners[].copy"], "function", ["None"], ["@", "functools", ".", "lru_cache", "(", "maxsize", "=", "64", ")", "\n", "def", "create_sink", "(", "side", ")", ":", "\n", "    ", "if", "side", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "2", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "sink1d", "=", "np", ".", "linspace", "(", "(", "side", "-", "1.0", ")", "/", "2.0", ",", "-", "(", "side", "-", "1.0", ")", "/", "2.0", ",", "num", "=", "side", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sink", "=", "np", ".", "stack", "(", "(", "\n", "sink1d", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "side", ",", "axis", "=", "0", ")", ",", "\n", "sink1d", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "side", ",", "axis", "=", "1", ")", ",", "\n", ")", ",", "axis", "=", "0", ")", "\n", "return", "sink", "\n", "\n", "\n", "", "def", "mask_valid_area", "(", "intensities", ",", "valid_area", ",", "*", ",", "fill_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Mask area.\n\n    Intensities is either a feature map or an image.\n    \"\"\"", "\n", "if", "valid_area", "is", "None", ":", "\n", "        ", "return", "\n", "\n", "", "if", "valid_area", "[", "1", "]", ">=", "1.0", ":", "\n", "        ", "intensities", "[", ":", ",", ":", "int", "(", "valid_area", "[", "1", "]", ")", ",", ":", "]", "=", "fill_value", "\n", "", "if", "valid_area", "[", "0", "]", ">=", "1.0", ":", "\n", "        ", "intensities", "[", ":", ",", ":", ",", ":", "int", "(", "valid_area", "[", "0", "]", ")", "]", "=", "fill_value", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.utils.generate_edge": [[32, 62], ["numpy.zeros", "cv2.getStructuringElement", "cv2.dilate"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros"], ["", "max_i", "=", "int", "(", "math", ".", "ceil", "(", "valid_area", "[", "1", "]", "+", "valid_area", "[", "3", "]", ")", ")", "+", "1", "\n", "max_j", "=", "int", "(", "math", ".", "ceil", "(", "valid_area", "[", "0", "]", "+", "valid_area", "[", "2", "]", ")", ")", "+", "1", "\n", "if", "0", "<", "max_i", "<", "intensities", ".", "shape", "[", "1", "]", ":", "\n", "        ", "intensities", "[", ":", ",", "max_i", ":", ",", ":", "]", "=", "fill_value", "\n", "", "if", "0", "<", "max_j", "<", "intensities", ".", "shape", "[", "2", "]", ":", "\n", "        ", "intensities", "[", ":", ",", ":", ",", "max_j", ":", "]", "=", "fill_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.image.ImageTransform.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_transform", ")", ":", "\n", "        ", "self", ".", "image_transform", "=", "image_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.image.ImageTransform.__call__": [[18, 21], ["image.ImageTransform.ImageTransform.image_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "image", "=", "self", ".", "image_transform", "(", "image", ")", "\n", "return", "image", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.image.JpegCompression.__init__": [[24, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "quality", "=", "50", ")", ":", "\n", "        ", "self", ".", "quality", "=", "quality", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.image.JpegCompression.__call__": [[27, 31], ["io.BytesIO", "image.save", "PIL.Image.open"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "f", "=", "io", ".", "BytesIO", "(", ")", "\n", "image", ".", "save", "(", "f", ",", "'jpeg'", ",", "quality", "=", "self", ".", "quality", ")", "\n", "return", "PIL", ".", "Image", ".", "open", "(", "f", ")", ",", "anns", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.image.Blur.__init__": [[34, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_sigma", "=", "5.0", ")", ":", "\n", "        ", "self", ".", "max_sigma", "=", "max_sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.image.Blur.__call__": [[37, 42], ["numpy.asarray", "scipy.ndimage.filters.gaussian_filter", "float", "PIL.Image.fromarray", "torch.rand().item", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "im_np", "=", "np", ".", "asarray", "(", "image", ")", "\n", "sigma", "=", "self", ".", "max_sigma", "*", "float", "(", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", ")", "\n", "im_np", "=", "scipy", ".", "ndimage", ".", "filters", ".", "gaussian_filter", "(", "im_np", ",", "sigma", "=", "(", "sigma", ",", "sigma", ",", "0", ")", ")", "\n", "return", "PIL", ".", "Image", ".", "fromarray", "(", "im_np", ")", ",", "anns", ",", "meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.compose.Compose.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "preprocess_list", ")", ":", "\n", "        ", "self", ".", "preprocess_list", "=", "preprocess_list", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.transforms.compose.Compose.__call__": [[8, 15], ["p"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "preprocess_list", ":", "\n", "            ", "if", "p", "is", "None", ":", "\n", "                ", "continue", "\n", "", "image", ",", "anns", ",", "meta", "=", "p", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n", "", "return", "image", ",", "anns", ",", "meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.GlobalMetrics.__init__": [[13, 20], ["metrics.GlobalMetrics._compute_hist"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.GlobalMetrics._compute_hist"], ["def", "__init__", "(", "self", ",", "global_result_paths", ",", "global_gt_paths", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"\n    \"\"\"", "\n", "self", ".", "global_result_paths", "=", "global_result_paths", "\n", "self", ".", "global_gt_paths", "=", "global_gt_paths", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "_compute_hist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.GlobalMetrics.get_pixel_accuray": [[21, 25], ["metrics.GlobalMetrics.num_correct_pix.sum", "metrics.GlobalMetrics.hist.sum"], "methods", ["None"], ["", "def", "get_pixel_accuray", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    \"\"\"", "\n", "return", "self", ".", "num_correct_pix", ".", "sum", "(", ")", "/", "self", ".", "hist", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.GlobalMetrics.get_mean_pixel_accuracy": [[26, 32], ["numpy.nanmean"], "methods", ["None"], ["", "def", "get_mean_pixel_accuracy", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    \"\"\"", "\n", "# Pixel accuracy for each class.", "\n", "pixel_accuracys", "=", "self", ".", "num_correct_pix", "/", "self", ".", "num_gt_pix", "\n", "return", "np", ".", "nanmean", "(", "pixel_accuracys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.GlobalMetrics.get_mean_IoU": [[33, 40], ["numpy.nanmean", "metrics.GlobalMetrics.hist.sum"], "methods", ["None"], ["", "def", "get_mean_IoU", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    \"\"\"", "\n", "union", "=", "self", ".", "num_gt_pix", "+", "self", ".", "hist", ".", "sum", "(", "0", ")", "-", "self", ".", "num_correct_pix", "\n", "# IoU for each class.", "\n", "IoUs", "=", "self", ".", "num_correct_pix", "/", "union", "\n", "return", "np", ".", "nanmean", "(", "IoUs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.GlobalMetrics.get_frequency_weighted_IoU": [[41, 49], ["metrics.GlobalMetrics.hist.sum", "metrics.GlobalMetrics.hist.sum"], "methods", ["None"], ["", "def", "get_frequency_weighted_IoU", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    \"\"\"", "\n", "freq", "=", "self", ".", "num_gt_pix", "/", "self", ".", "hist", ".", "sum", "(", ")", "\n", "union", "=", "self", ".", "num_gt_pix", "+", "self", ".", "hist", ".", "sum", "(", "0", ")", "-", "self", ".", "num_correct_pix", "\n", "IoUs", "=", "self", ".", "num_correct_pix", "/", "union", "\n", "\n", "return", "(", "freq", "[", "freq", ">", "0", "]", "*", "IoUs", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.GlobalMetrics._compute_hist": [[50, 77], ["numpy.zeros", "zip", "numpy.diag", "metrics.GlobalMetrics.hist.sum", "PIL.Image.open", "numpy.array", "PIL.Image.open", "numpy.array", "metrics.GlobalMetrics._fast_hist"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.GlobalMetrics._fast_hist"], ["", "def", "_compute_hist", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n    \"\"\"", "\n", "# Number of classes(include background).", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "\n", "# hist[i, j] means the number of pixels that are predicted to class j,", "\n", "# whose actual label are class i.", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "for", "res_path", ",", "gt_path", "in", "zip", "(", "self", ".", "global_result_paths", ",", "\n", "self", ".", "global_gt_paths", ")", ":", "\n", "            ", "gt", "=", "PILImage", ".", "open", "(", "gt_path", ")", "\n", "gt", "=", "np", ".", "array", "(", "gt", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "res", "=", "PILImage", ".", "open", "(", "res_path", ")", "\n", "res", "=", "np", ".", "array", "(", "res", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "gt_size", "=", "gt", ".", "shape", "\n", "res_size", "=", "res", ".", "shape", "\n", "assert", "(", "gt_size", "==", "res_size", ")", "\n", "\n", "hist", "+=", "self", ".", "_fast_hist", "(", "gt", ",", "res", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "hist", "=", "hist", "\n", "# Number of correctly classified pixels.", "\n", "self", ".", "num_correct_pix", "=", "np", ".", "diag", "(", "self", ".", "hist", ")", "\n", "# Number of pixels of each classes in groundtruth.", "\n", "self", ".", "num_gt_pix", "=", "self", ".", "hist", ".", "sum", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.GlobalMetrics._fast_hist": [[78, 84], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "methods", ["None"], ["", "def", "_fast_hist", "(", "self", ",", "a", ",", "b", ",", "n", ")", ":", "\n", "        ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "\n", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "\n", "minlength", "=", "n", "**", "2", "\n", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics.__init__": [[87, 93], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "instance_pred_folder", ",", "instance_gt_folder", ",", "num_classes", ",", "categories", ")", ":", "\n", "        ", "self", ".", "INSTANCE_PRED_FOLDER", "=", "instance_pred_folder", "\n", "self", ".", "INSTANCE_GT_FOLDER", "=", "instance_gt_folder", "\n", "self", ".", "NUM_CLASSES", "=", "num_classes", "\n", "self", ".", "IoU_TH", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "self", ".", "categories", "=", "categories", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics.compute_AP": [[94, 122], ["numpy.zeros", "numpy.mean", "enumerate", "numpy.nanmean", "enumerate", "tqdm.tqdm.tqdm", "pbar.set_description", "range", "print", "os.listdir", "len", "metrics.InstanceMetrics._compute_class_ap", "pbar.update"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.network.lovasz_loss.mean", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._compute_class_ap", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.message_passing.MessagePassing.update"], ["", "def", "compute_AP", "(", "self", ")", ":", "\n", "        ", "image_name_list", "=", "[", "\n", "x", "[", ":", "-", "4", "]", "for", "x", "in", "os", ".", "listdir", "(", "self", ".", "INSTANCE_PRED_FOLDER", ")", "if", "x", "[", "-", "3", ":", "]", "==", "'txt'", "\n", "]", "\n", "\n", "# For every class(except for background, 0),", "\n", "# compute APs under different IoU threshold.", "\n", "AP", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_CLASSES", "-", "1", ",", "len", "(", "self", ".", "IoU_TH", ")", ")", ")", "\n", "with", "tqdm", "(", "total", "=", "self", ".", "NUM_CLASSES", "-", "1", ")", "as", "pbar", ":", "\n", "            ", "pbar", ".", "set_description", "(", "'Computing AP^r'", ")", "\n", "for", "class_id", "in", "range", "(", "1", ",", "self", ".", "NUM_CLASSES", ")", ":", "\n", "                ", "AP", "[", "class_id", "-", "1", ",", ":", "]", "=", "self", ".", "_compute_class_ap", "(", "image_name_list", ",", "class_id", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "", "mAP_per_class", "=", "np", ".", "mean", "(", "AP", ",", "axis", "=", "1", ")", "\n", "for", "i", ",", "cat", "in", "enumerate", "(", "self", ".", "categories", ")", ":", "\n", "            ", "print", "(", "cat", ",", "': '", ",", "mAP_per_class", "[", "i", "]", ")", "\n", "#print(AP[i, :])", "\n", "\n", "# AP under each threshold", "\n", "", "mAP", "=", "np", ".", "nanmean", "(", "AP", ",", "axis", "=", "0", ")", "\n", "\n", "AP_map", "=", "{", "}", "\n", "for", "i", ",", "thre", "in", "enumerate", "(", "self", ".", "IoU_TH", ")", ":", "\n", "            ", "AP_map", "[", "thre", "]", "=", "mAP", "[", "i", "]", "\n", "# print('mAP: {}, {}'.format(mAP, np.nanmean(mAP)))", "\n", "\n", "", "return", "AP_map", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._compute_class_ap": [[123, 237], ["len", "numpy.zeros", "range", "range", "true_pos.append", "false_pos.append", "PIL.Image.open", "numpy.array", "open", "open.readlines", "open.close", "PIL.Image.open", "numpy.array", "open", "enumerate", "open.close", "metrics.InstanceMetrics._split_masks", "metrics.InstanceMetrics._split_masks", "numpy.stack", "numpy.stack", "metrics.InstanceMetrics._compute_mask_overlaps", "numpy.argmax", "numpy.arange", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "metrics.InstanceMetrics._voc_ap", "os.path.join", "os.path.join", "line.strip().split.strip().split.strip().split", "gt_part_id.append", "os.path.join", "os.path.join", "open.readlines", "line.strip().split.strip().split.strip().split", "set", "set", "range", "len", "range", "numpy.array", "numpy.array", "float", "numpy.maximum", "int", "gt_id.append", "int", "pred_id.append", "pred_scores.append", "range", "line.strip().split.strip().split.strip", "int", "int", "int", "line.strip().split.strip().split.strip", "float", "false_pos[].append", "true_pos[].append", "true_pos[].append", "false_pos[].append", "true_pos[].append", "false_pos[].append", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._split_masks", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._split_masks", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._compute_mask_overlaps", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._voc_ap", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["", "def", "_compute_class_ap", "(", "self", ",", "image_name_list", ",", "class_id", ")", ":", "\n", "        ", "\"\"\"\n    \"\"\"", "\n", "num_IoU_TH", "=", "len", "(", "self", ".", "IoU_TH", ")", "\n", "AP", "=", "np", ".", "zeros", "(", "(", "num_IoU_TH", ")", ")", "\n", "\n", "num_gt_masks", "=", "0", "\n", "num_pred_masks", "=", "0", "\n", "true_pos", "=", "[", "]", "\n", "false_pos", "=", "[", "]", "\n", "# [TODO] What's this mean?", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_IoU_TH", ")", ":", "\n", "            ", "true_pos", ".", "append", "(", "[", "]", ")", "\n", "false_pos", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "for", "image_name", "in", "image_name_list", ":", "\n", "            ", "instance_img_gt", "=", "PILImage", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "INSTANCE_GT_FOLDER", ",", "image_name", "+", "'.png'", ")", "\n", ")", "\n", "instance_img_gt", "=", "np", ".", "array", "(", "instance_img_gt", ")", "\n", "\n", "# File for accelerating computation.", "\n", "# Each line has three numbers: \"instance_part_id class_id human_id\".", "\n", "rfp", "=", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "INSTANCE_GT_FOLDER", ",", "image_name", "+", "'.txt'", ")", ",", "\n", "'r'", "\n", ")", "\n", "# Instance ID from groundtruth file.", "\n", "gt_part_id", "=", "[", "]", "\n", "gt_id", "=", "[", "]", "\n", "for", "line", "in", "rfp", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "gt_part_id", ".", "append", "(", "[", "int", "(", "line", "[", "0", "]", ")", ",", "int", "(", "line", "[", "1", "]", ")", "]", ")", "\n", "if", "int", "(", "line", "[", "1", "]", ")", "==", "class_id", ":", "\n", "                    ", "gt_id", ".", "append", "(", "int", "(", "line", "[", "0", "]", ")", ")", "\n", "", "", "rfp", ".", "close", "(", ")", "\n", "\n", "instance_img_pred", "=", "PILImage", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "INSTANCE_PRED_FOLDER", ",", "image_name", "+", "'.png'", ")", "\n", ")", "\n", "instance_img_pred", "=", "np", ".", "array", "(", "instance_img_pred", ")", "\n", "# Each line has two numbers: \"class_id score\"", "\n", "rfp", "=", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "INSTANCE_PRED_FOLDER", ",", "image_name", "+", "'.txt'", ")", ",", "\n", "'r'", "\n", ")", "\n", "# Instance ID from predicted file.", "\n", "pred_id", "=", "[", "]", "\n", "pred_scores", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "rfp", ".", "readlines", "(", ")", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "int", "(", "line", "[", "0", "]", ")", "==", "class_id", ":", "\n", "                    ", "pred_id", ".", "append", "(", "i", "+", "1", ")", "\n", "pred_scores", ".", "append", "(", "float", "(", "line", "[", "1", "]", ")", ")", "\n", "", "", "rfp", ".", "close", "(", ")", "\n", "\n", "# Mask for specified class, i.e., *class_id*", "\n", "gt_masks", ",", "num_gt_instance", "=", "self", ".", "_split_masks", "(", "instance_img_gt", ",", "\n", "set", "(", "gt_id", ")", ")", "\n", "pred_masks", ",", "num_pred_instance", "=", "self", ".", "_split_masks", "(", "instance_img_pred", ",", "\n", "set", "(", "pred_id", ")", ")", "\n", "\n", "num_gt_masks", "+=", "num_gt_instance", "\n", "num_pred_masks", "+=", "num_pred_instance", "\n", "\n", "if", "num_pred_instance", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "# Collect scores from all the test images that", "\n", "# belong to class *class_id*", "\n", "", "scores", "+=", "pred_scores", "\n", "\n", "if", "num_gt_instance", "==", "0", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_pred_instance", ")", ":", "\n", "                    ", "for", "k", "in", "range", "(", "num_IoU_TH", ")", ":", "\n", "                        ", "false_pos", "[", "k", "]", ".", "append", "(", "1", ")", "\n", "true_pos", "[", "k", "]", ".", "append", "(", "0", ")", "\n", "", "", "continue", "\n", "\n", "", "gt_masks", "=", "np", ".", "stack", "(", "gt_masks", ")", "\n", "pred_masks", "=", "np", ".", "stack", "(", "pred_masks", ")", "\n", "# Compute IoU overlaps [pred_masks, gt_makss]", "\n", "# overlaps[i, j]: IoU between predicted mask i and gt mask j", "\n", "overlaps", "=", "self", ".", "_compute_mask_overlaps", "(", "pred_masks", ",", "gt_masks", ")", "\n", "\n", "max_overlap_index", "=", "np", ".", "argmax", "(", "overlaps", ",", "axis", "=", "1", ")", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "max_overlap_index", ")", ")", ":", "\n", "                ", "max_IoU", "=", "overlaps", "[", "i", "]", "[", "max_overlap_index", "[", "i", "]", "]", "\n", "for", "k", "in", "range", "(", "num_IoU_TH", ")", ":", "\n", "                    ", "if", "max_IoU", ">", "self", ".", "IoU_TH", "[", "k", "]", ":", "\n", "                        ", "true_pos", "[", "k", "]", ".", "append", "(", "1", ")", "\n", "false_pos", "[", "k", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                        ", "true_pos", "[", "k", "]", ".", "append", "(", "0", ")", "\n", "false_pos", "[", "k", "]", ".", "append", "(", "1", ")", "\n", "\n", "", "", "", "", "ind", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "for", "k", "in", "range", "(", "num_IoU_TH", ")", ":", "\n", "            ", "m_tp", "=", "np", ".", "array", "(", "true_pos", "[", "k", "]", ")", "[", "ind", "]", "\n", "m_fp", "=", "np", ".", "array", "(", "false_pos", "[", "k", "]", ")", "[", "ind", "]", "\n", "\n", "m_tp", "=", "np", ".", "cumsum", "(", "m_tp", ")", "\n", "m_fp", "=", "np", ".", "cumsum", "(", "m_fp", ")", "\n", "recall", "=", "m_tp", "/", "float", "(", "num_gt_masks", ")", "\n", "precision", "=", "m_tp", "/", "np", ".", "maximum", "(", "m_fp", "+", "m_tp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "\n", "# Compute mean AP over recall range", "\n", "AP", "[", "k", "]", "=", "self", ".", "_voc_ap", "(", "recall", ",", "precision", ",", "False", ")", "\n", "\n", "", "return", "AP", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._voc_ap": [[238, 271], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "methods", ["None"], ["", "def", "_voc_ap", "(", "self", ",", "recall", ",", "precision", ",", "use_07_metric", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n    Compute VOC AP given precision and recall. If use_07_metric is true,\n    uses the VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "            ", "ap", "=", "0.", "\n", "# arange([start, ]stop, [step, ]dtype=None)", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "                ", "if", "np", ".", "sum", "(", "recall", ">=", "t", ")", "==", "0", ":", "\n", "                    ", "p", "=", "0", "\n", "", "else", ":", "\n", "                    ", "p", "=", "np", ".", "max", "(", "precision", "[", "recall", ">=", "t", "]", ")", "\n", "", "ap", "+=", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "            ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "recall", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "precision", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._compute_mask_overlaps": [[272, 291], ["metrics.InstanceMetrics._count_nonzero", "metrics.InstanceMetrics._count_nonzero", "numpy.zeros", "range", "metrics.InstanceMetrics._compute_mask_IoU"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._count_nonzero", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._count_nonzero", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.inits.zeros", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._compute_mask_IoU"], ["", "def", "_compute_mask_overlaps", "(", "self", ",", "pred_masks", ",", "gt_masks", ")", ":", "\n", "        ", "\"\"\"\n    Computes IoU overlaps between two sets of masks.\n    For better performance, pass the largest set first and the smaller second.\n\n    Input:\n      pred_masks --  [num_instances, h, width], Instance masks\n      gt_masks   --  [num_instances, h, width], ground truth\n    \"\"\"", "\n", "pred_areas", "=", "self", ".", "_count_nonzero", "(", "pred_masks", ")", "\n", "gt_areas", "=", "self", ".", "_count_nonzero", "(", "gt_masks", ")", "\n", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "pred_masks", ".", "shape", "[", "0", "]", ",", "gt_masks", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "overlaps", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "gt_mask", "=", "gt_masks", "[", "i", "]", "\n", "overlaps", "[", ":", ",", "i", "]", "=", "self", ".", "_compute_mask_IoU", "(", "gt_mask", ",", "pred_masks", ",", "\n", "gt_areas", "[", "i", "]", ",", "pred_areas", ")", "\n", "\n", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._compute_mask_IoU": [[292, 319], ["numpy.logical_and", "numpy.where().astype", "metrics.InstanceMetrics._count_nonzero", "numpy.full", "len", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._count_nonzero"], ["", "def", "_compute_mask_IoU", "(", "self", ",", "gt_mask", ",", "pred_masks", ",", "\n", "gt_mask_area", ",", "pred_mask_areas", ")", ":", "\n", "        ", "\"\"\"\n    Calculates IoU of the specific groundtruth mask\n    with the array of all the predicted mask.\n\n    Input:\n      gt_mask         -- A mask of groundtruth with shape of [h, w].\n      pred_masks      -- An array represents a set of masks,\n                         with shape [num_instances, h, w].\n      gt_mask_area    -- An integer represents the area of gt_mask.\n      pred_mask_areas -- A set of integers represents areas of pred_masks.\n    \"\"\"", "\n", "\n", "# logical_and() can be broadcasting.", "\n", "intersection", "=", "np", ".", "logical_and", "(", "gt_mask", ",", "pred_masks", ")", "\n", "# True then the corresponding position of output is 1, otherwise is 0.", "\n", "intersection", "=", "np", ".", "where", "(", "intersection", "==", "True", ",", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# noqa", "\n", "intersection", "=", "self", ".", "_count_nonzero", "(", "intersection", ")", "\n", "\n", "mask_gt_areas", "=", "np", ".", "full", "(", "len", "(", "pred_mask_areas", ")", ",", "gt_mask_area", ")", "\n", "\n", "union", "=", "mask_gt_areas", "+", "pred_mask_areas", "[", ":", "]", "-", "intersection", "[", ":", "]", "\n", "\n", "iou", "=", "intersection", "/", "union", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._split_masks": [[320, 348], ["numpy.unique", "numpy.delete", "numpy.where", "len", "masks.append", "masks.append"], "methods", ["None"], ["", "def", "_split_masks", "(", "self", ",", "instance_img", ",", "id_to_convert", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n    Split a single mixed mask into several class-specified masks.\n\n    Input:\n      instance_img  -- An index map with shape [h, w]\n      id_to_convert -- A list of instance part IDs that suppose to\n                       extract from instance_img, if *None*, extract all the\n                       ID maps except for background.\n\n    Return:\n      masks -- A collection of masks with shape [num_instance, h, w]\n    \"\"\"", "\n", "masks", "=", "[", "]", "\n", "\n", "instance_ids", "=", "np", ".", "unique", "(", "instance_img", ")", "\n", "background_id_index", "=", "np", ".", "where", "(", "instance_ids", "==", "0", ")", "[", "0", "]", "\n", "instance_ids", "=", "np", ".", "delete", "(", "instance_ids", ",", "background_id_index", ")", "\n", "\n", "if", "id_to_convert", "is", "None", ":", "\n", "            ", "for", "i", "in", "instance_ids", ":", "\n", "                ", "masks", ".", "append", "(", "(", "instance_img", "==", "i", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "instance_ids", ":", "\n", "                ", "if", "i", "in", "id_to_convert", ":", "\n", "                    ", "masks", ".", "append", "(", "(", "instance_img", "==", "i", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "", "", "", "return", "masks", ",", "len", "(", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.evaluation.metrics.InstanceMetrics._count_nonzero": [[349, 367], ["tuple", "numpy.nonzero", "tuple.append"], "methods", ["None"], ["", "def", "_count_nonzero", "(", "self", ",", "masks", ")", ":", "\n", "        ", "\"\"\"\n    Compute the total number of nonzero items in each mask.\n\n    Input:\n      masks -- a three-dimension array with shape [num_instance, h, w],\n               includes *num_instance* of two-dimension mask arrays.\n\n    Return:\n      nonzero_count -- A tuple with *num_instance* digital elements,\n                       each of which represents the area of specific instance.\n    \"\"\"", "\n", "area", "=", "[", "]", "\n", "for", "i", "in", "masks", ":", "\n", "            ", "_", ",", "a", "=", "np", ".", "nonzero", "(", "i", ")", "\n", "area", ".", "append", "(", "a", ".", "shape", "[", "0", "]", ")", "\n", "", "area", "=", "tuple", "(", "area", ")", "\n", "return", "area", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.__init__": [[28, 33], ["LOG.debug"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug"], ["def", "__init__", "(", "self", ",", "head_name", ")", ":", "\n", "        ", "self", ".", "head_name", "=", "head_name", "\n", "self", ".", "_ax", "=", "None", "\n", "\n", "LOG", ".", "debug", "(", "'%s: indices = %s'", ",", "head_name", ",", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image": [[34, 41], ["numpy.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "image", "(", "image", ")", ":", "\n", "        ", "if", "image", "is", "None", ":", "\n", "            ", "BaseVisualizer", ".", "_image", "=", "None", "\n", "return", "\n", "\n", "", "BaseVisualizer", ".", "_image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.processed_image": [[42, 51], ["numpy.moveaxis", "numpy.clip", "numpy.asarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "processed_image", "(", "image", ")", ":", "\n", "        ", "if", "image", "is", "None", ":", "\n", "            ", "BaseVisualizer", ".", "_processed_image", "=", "None", "\n", "return", "\n", "\n", "", "image", "=", "np", ".", "moveaxis", "(", "np", ".", "asarray", "(", "image", ")", ",", "0", ",", "-", "1", ")", "\n", "image", "=", "np", ".", "clip", "(", "image", "*", "0.25", "+", "0.5", ",", "0.0", ",", "1.0", ")", "\n", "BaseVisualizer", ".", "_processed_image", "=", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.reset": [[52, 56], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "reset", "(", ")", ":", "\n", "        ", "BaseVisualizer", ".", "_image", "=", "None", "\n", "BaseVisualizer", ".", "_processed_image", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.indices": [[57, 63], ["isinstance"], "methods", ["None"], ["", "@", "property", "\n", "def", "indices", "(", "self", ")", ":", "\n", "        ", "head_names", "=", "self", ".", "head_name", "\n", "if", "not", "isinstance", "(", "head_names", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "head_names", "=", "(", "head_names", ",", ")", "\n", "", "return", "[", "f", "for", "hn", ",", "f", "in", "self", ".", "all_indices", "if", "hn", "in", "head_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.colorbar": [[64, 69], ["make_axes_locatable", "make_axes_locatable.append_axes", "plt.colorbar"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.colorbar"], ["", "@", "staticmethod", "\n", "def", "colorbar", "(", "ax", ",", "colored_element", ",", "size", "=", "'3%'", ",", "pad", "=", "0.05", ")", ":", "\n", "        ", "divider", "=", "make_axes_locatable", "(", "ax", ")", "\n", "cax", "=", "divider", ".", "append_axes", "(", "'right'", ",", "size", "=", "size", ",", "pad", "=", "pad", ")", "\n", "plt", ".", "colorbar", "(", "colored_element", ",", "cax", "=", "cax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas": [[70, 81], ["ax.set_axis_off", "ax.imshow", "show.image_canvas", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas"], ["", "@", "contextmanager", "\n", "def", "image_canvas", "(", "self", ",", "image", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ax", "=", "self", ".", "_ax", "or", "self", ".", "common_ax", "\n", "if", "ax", "is", "not", "None", ":", "\n", "            ", "ax", ".", "set_axis_off", "(", ")", "\n", "ax", ".", "imshow", "(", "np", ".", "asarray", "(", "image", ")", ")", "\n", "yield", "ax", "\n", "return", "\n", "\n", "", "with", "show", ".", "image_canvas", "(", "image", ",", "*", "args", ",", "**", "kwargs", ")", "as", "ax", ":", "\n", "            ", "yield", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas": [[82, 91], ["show.canvas"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.canvas"], ["", "", "@", "contextmanager", "\n", "def", "canvas", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ax", "=", "self", ".", "_ax", "or", "self", ".", "common_ax", "\n", "if", "ax", "is", "not", "None", ":", "\n", "            ", "yield", "ax", "\n", "return", "\n", "\n", "", "with", "show", ".", "canvas", "(", "*", "args", ",", "**", "kwargs", ")", "as", "ax", ":", "\n", "            ", "yield", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.scale_scalar": [[92, 100], ["numpy.repeat", "numpy.repeat"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "scale_scalar", "(", "field", ",", "stride", ")", ":", "\n", "        ", "field", "=", "np", ".", "repeat", "(", "field", ",", "stride", ",", "0", ")", "\n", "field", "=", "np", ".", "repeat", "(", "field", ",", "stride", ",", "1", ")", "\n", "\n", "# center (the result is technically still off by half a pixel)", "\n", "half_stride", "=", "stride", "//", "2", "\n", "return", "field", "[", "half_stride", ":", "-", "half_stride", "+", "1", ",", "half_stride", ":", "-", "half_stride", "+", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.cli": [[10, 22], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["group", ".", "add_argument", "(", "'--show-box'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-joint-scales'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-joint-confidences'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-decoding-order'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-frontier-order'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "group", ".", "add_argument", "(", "'--show-only-decoded-connections'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n", "\n", "", "def", "configure", "(", "args", ")", ":", "\n", "    ", "KeypointPainter", ".", "show_box", "=", "args", ".", "show_box", "\n", "KeypointPainter", ".", "show_joint_scales", "=", "args", ".", "show_joint_scales", "\n", "KeypointPainter", ".", "show_joint_confidences", "=", "args", ".", "show_joint_confidences", "\n", "KeypointPainter", ".", "show_decoding_order", "=", "args", ".", "show_decoding_order", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.enable_all_plots": [[25, 38], ["None"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.configure": [[40, 56], ["di.partition", "cli.enable_all_plots", "int"], "function", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cli.enable_all_plots"], []], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifhr.CifHr.__init__": [[11, 16], ["base.BaseVisualizer.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "stride", "=", "1", ",", "field_names", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "'cif'", ",", "'cifdet'", ")", ")", "\n", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "field_names", "=", "field_names", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifhr.CifHr.predicted": [[17, 27], ["LOG.debug", "cifhr.CifHr.image_canvas", "ax.imshow", "cifhr.CifHr.colorbar"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.colorbar"], ["", "def", "predicted", "(", "self", ",", "fields", ")", ":", "\n", "        ", "if", "not", "self", ".", "show", ":", "\n", "            ", "return", "\n", "\n", "", "for", "f", "in", "self", ".", "indices", ":", "\n", "            ", "LOG", ".", "debug", "(", "'%d (field name: %s)'", ",", "\n", "f", ",", "self", ".", "field_names", "[", "f", "]", "if", "self", ".", "field_names", "else", "'unknown'", ")", "\n", "with", "self", ".", "image_canvas", "(", "self", ".", "_processed_image", ")", "as", "ax", ":", "\n", "                ", "o", "=", "ax", ".", "imshow", "(", "fields", "[", "f", "]", ",", "alpha", "=", "0.9", ",", "vmin", "=", "0.0", ",", "vmax", "=", "1.0", ",", "cmap", "=", "'Oranges'", ")", "\n", "self", ".", "colorbar", "(", "ax", ",", "o", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.caf.Caf.__init__": [[16, 24], ["base.BaseVisualizer.__init__", "show.KeypointPainter"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["@", "dataclasses", ".", "dataclass", "\n", "class", "Caf", ":", "\n", "    ", "rescaler", ":", "AnnRescaler", "\n", "headname", ":", "str", "\n", "skeleton", ":", "list", "\n", "sigmas", ":", "list", "\n", "headname", ":", "str", "\n", "sparse_skeleton", ":", "list", "=", "None", "\n", "dense_to_sparse_radius", ":", "float", "=", "2.0", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.caf.Caf.targets": [[25, 36], ["caf.Caf._confidences", "caf.Caf._regressions", "annotation.Annotation().set", "annotation.Annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._confidences", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._regressions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["only_in_field_of_view", ":", "bool", "=", "False", "\n", "v_threshold", ":", "int", "=", "0", "\n", "visualizer", ":", "CafVisualizer", "=", "None", "\n", "\n", "min_size", ":", "ClassVar", "[", "int", "]", "=", "3", "\n", "fixed_size", ":", "ClassVar", "[", "bool", "]", "=", "False", "\n", "aspect_ratio", ":", "ClassVar", "[", "float", "]", "=", "0.0", "\n", "padding", ":", "ClassVar", "[", "int", "]", "=", "10", "\n", "\n", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "CafGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.caf.Caf.predicted": [[37, 43], ["caf.Caf._confidences", "caf.Caf._regressions"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._confidences", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._regressions"], ["\n", "", "", "class", "CafGenerator", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ":", "Caf", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "skeleton_m1", "=", "np", ".", "asarray", "(", "config", ".", "skeleton", ")", "-", "1", "\n", "self", ".", "sparse_skeleton_m1", "=", "(", "\n", "np", ".", "asarray", "(", "config", ".", "sparse_skeleton", ")", "-", "1", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.caf.Caf._confidences": [[44, 57], ["LOG.debug", "caf.Caf.image_canvas", "ax.imshow", "caf.Caf.colorbar", "caf.Caf.scale_scalar"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.colorbar", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.scale_scalar"], ["if", "config", ".", "sparse_skeleton", "else", "None", ")", "\n", "\n", "if", "self", ".", "config", ".", "fixed_size", ":", "\n", "            ", "assert", "self", ".", "config", ".", "aspect_ratio", "==", "0.0", "\n", "\n", "", "LOG", ".", "debug", "(", "'only_in_field_of_view = %s, paf min size = %d'", ",", "\n", "config", ".", "only_in_field_of_view", ",", "\n", "self", ".", "config", ".", "min_size", ")", "\n", "\n", "self", ".", "headname", "=", "config", ".", "headname", "\n", "self", ".", "intensities", "=", "None", "\n", "self", ".", "fields_reg1", "=", "None", "\n", "self", ".", "fields_reg2", "=", "None", "\n", "self", ".", "fields_scale1", "=", "None", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.caf.Caf._regressions": [[58, 99], ["LOG.debug", "caf.Caf.image_canvas", "show.white_screen", "show.quiver", "show.quiver", "show.boxes", "show.boxes", "caf.Caf.colorbar", "caf.Caf.keypoint_painter.annotations", "show.margins", "show.margins"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.quiver", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.quiver", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.boxes", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.boxes", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.colorbar", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.margins", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.margins"], ["self", ".", "fields_scale2", "=", "None", "\n", "self", ".", "fields_reg_l", "=", "None", "\n", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "width_height_original", "=", "image", ".", "shape", "[", "2", ":", "0", ":", "-", "1", "]", "\n", "\n", "keypoint_sets", "=", "self", ".", "config", ".", "rescaler", ".", "keypoint_sets", "(", "anns", ")", "\n", "bg_mask", "=", "self", ".", "config", ".", "rescaler", ".", "bg_mask", "(", "anns", ",", "width_height_original", ",", "\n", "crowd_margin", "=", "(", "self", ".", "config", ".", "min_size", "-", "1", ")", "/", "2", ")", "\n", "valid_area", "=", "self", ".", "config", ".", "rescaler", ".", "valid_area", "(", "meta", ")", "\n", "LOG", ".", "debug", "(", "'valid area: %s\b'", ",", "valid_area", ")", "\n", "\n", "self", ".", "init_fields", "(", "bg_mask", ")", "\n", "self", ".", "fill", "(", "keypoint_sets", ")", "\n", "fields", "=", "self", ".", "fields", "(", "valid_area", ")", "\n", "\n", "self", ".", "config", ".", "visualizer", ".", "processed_image", "(", "image", ")", "\n", "self", ".", "config", ".", "visualizer", ".", "targets", "(", "fields", ",", "keypoint_sets", "=", "keypoint_sets", ")", "\n", "\n", "return", "{", "self", ".", "headname", ":", "fields", "}", "\n", "\n", "", "def", "init_fields", "(", "self", ",", "bg_mask", ")", ":", "\n", "        ", "n_fields", "=", "len", "(", "self", ".", "skeleton_m1", ")", "\n", "field_w", "=", "bg_mask", ".", "shape", "[", "1", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "field_h", "=", "bg_mask", ".", "shape", "[", "0", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "self", ".", "intensities", "=", "np", ".", "zeros", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg1", "=", "np", ".", "full", "(", "(", "n_fields", ",", "6", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg2", "=", "np", ".", "full", "(", "(", "n_fields", ",", "6", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg1", "[", ":", ",", "2", ":", "]", "=", "np", ".", "inf", "\n", "self", ".", "fields_reg2", "[", ":", ",", "2", ":", "]", "=", "np", ".", "inf", "\n", "self", ".", "fields_scale1", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_scale2", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg_l", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "inf", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# bg_mask", "\n", "p", "=", "self", ".", "config", ".", "padding", "\n", "self", ".", "fields_reg_l", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", ":", ",", "bg_mask", "==", "0", "]", "=", "1.0", "\n", "self", ".", "intensities", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", ":", ",", "bg_mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "\n", "", "def", "fill", "(", "self", ",", "keypoint_sets", ")", ":", "\n", "        ", "for", "kps_i", ",", "keypoints", "in", "enumerate", "(", "keypoint_sets", ")", ":", "\n", "            ", "self", ".", "fill_keypoints", "(", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.occupancy.Occupancy.__init__": [[11, 14], ["base.BaseVisualizer.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "reduction", ",", "*", ",", "min_scale", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "shape", ")", "==", "3", "\n", "if", "min_scale", "is", "None", ":", "\n", "            ", "min_scale", "=", "reduction", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.occupancy.Occupancy.predicted": [[15, 31], ["LOG.debug", "occupancy.Occupancy.image_canvas", "occupancy.occupancy[].copy", "ax.imshow"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas"], ["", "assert", "min_scale", ">=", "reduction", "\n", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "min_scale_reduced", "=", "min_scale", "/", "reduction", "\n", "\n", "self", ".", "occupancy", "=", "np", ".", "zeros", "(", "(", "\n", "shape", "[", "0", "]", ",", "\n", "int", "(", "shape", "[", "1", "]", "/", "reduction", ")", ",", "\n", "int", "(", "shape", "[", "2", "]", "/", "reduction", ")", ",", "\n", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "LOG", ".", "debug", "(", "'shape = %s, min_scale = %d'", ",", "self", ".", "occupancy", ".", "shape", ",", "self", ".", "min_scale_reduced", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "occupancy", ")", "\n", "\n", "", "def", "set", "(", "self", ",", "f", ",", "x", ",", "y", ",", "sigma", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cif.Cif.__init__": [[24, 32], ["base.BaseVisualizer.__init__", "show.KeypointPainter"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["\n", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "CifGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n", "\n", "", "", "class", "CifGenerator", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ":", "Cif", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cif.Cif.targets": [[33, 45], ["cif.Cif._confidences", "cif.Cif._regressions", "annotation.Annotation().set", "annotation.Annotation"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._confidences", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._regressions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["self", ".", "intensities", "=", "None", "\n", "self", ".", "fields_reg", "=", "None", "\n", "self", ".", "fields_scale", "=", "None", "\n", "self", ".", "fields_reg_l", "=", "None", "\n", "\n", "self", ".", "sink", "=", "create_sink", "(", "config", ".", "side_length", ")", "\n", "self", ".", "s_offset", "=", "(", "config", ".", "side_length", "-", "1.0", ")", "/", "2.0", "\n", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "width_height_original", "=", "image", ".", "shape", "[", "2", ":", "0", ":", "-", "1", "]", "\n", "\n", "keypoint_sets", "=", "self", ".", "config", ".", "rescaler", ".", "keypoint_sets", "(", "anns", ")", "\n", "bg_mask", "=", "self", ".", "config", ".", "rescaler", ".", "bg_mask", "(", "anns", ",", "width_height_original", ",", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cif.Cif.predicted": [[46, 52], ["cif.Cif._confidences", "cif.Cif._regressions"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._confidences", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._regressions"], ["crowd_margin", "=", "(", "self", ".", "config", ".", "side_length", "-", "1", ")", "/", "2", ")", "\n", "valid_area", "=", "self", ".", "config", ".", "rescaler", ".", "valid_area", "(", "meta", ")", "\n", "LOG", ".", "debug", "(", "'valid area: %s\b, pif side length = %d'", ",", "valid_area", ",", "self", ".", "config", ".", "side_length", ")", "\n", "\n", "n_fields", "=", "keypoint_sets", ".", "shape", "[", "1", "]", "\n", "self", ".", "init_fields", "(", "n_fields", ",", "bg_mask", ")", "\n", "self", ".", "fill", "(", "keypoint_sets", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cif.Cif._confidences": [[53, 64], ["LOG.debug", "cif.Cif.image_canvas", "ax.imshow", "cif.Cif.colorbar", "cif.Cif.scale_scalar"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.colorbar", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.scale_scalar"], ["fields", "=", "self", ".", "fields", "(", "valid_area", ")", "\n", "\n", "self", ".", "config", ".", "visualizer", ".", "processed_image", "(", "image", ")", "\n", "self", ".", "config", ".", "visualizer", ".", "targets", "(", "fields", ",", "annotation_dicts", "=", "anns", ")", "\n", "\n", "return", "{", "'cif'", ":", "fields", "}", "\n", "\n", "", "def", "init_fields", "(", "self", ",", "n_fields", ",", "bg_mask", ")", ":", "\n", "        ", "field_w", "=", "bg_mask", ".", "shape", "[", "1", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "field_h", "=", "bg_mask", ".", "shape", "[", "0", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "self", ".", "intensities", "=", "np", ".", "zeros", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg", "=", "np", ".", "full", "(", "(", "n_fields", ",", "6", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cif.Cif._regressions": [[65, 92], ["LOG.debug", "cif.Cif.image_canvas", "show.white_screen", "show.quiver", "show.boxes", "cif.Cif.colorbar", "cif.Cif.keypoint_painter.annotations", "show.margins"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.quiver", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.boxes", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.colorbar", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.margins"], ["self", ".", "fields_reg", "[", ":", ",", "2", ":", "]", "=", "np", ".", "inf", "\n", "self", ".", "fields_scale", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg_l", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "inf", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# bg_mask", "\n", "p", "=", "self", ".", "config", ".", "padding", "\n", "self", ".", "fields_reg_l", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", ":", ",", "bg_mask", "==", "0", "]", "=", "1.0", "\n", "self", ".", "intensities", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", ":", ",", "bg_mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "\n", "", "def", "fill", "(", "self", ",", "keypoint_sets", ")", ":", "\n", "        ", "for", "kps_i", ",", "keypoints", "in", "enumerate", "(", "keypoint_sets", ")", ":", "\n", "            ", "self", ".", "fill_keypoints", "(", "\n", "keypoints", ",", "\n", "[", "kps", "for", "i", ",", "kps", "in", "enumerate", "(", "keypoint_sets", ")", "if", "i", "!=", "kps_i", "]", ",", "\n", ")", "\n", "\n", "", "", "@", "staticmethod", "\n", "def", "quadrant", "(", "xys", ")", ":", "\n", "        ", "q", "=", "np", ".", "zeros", "(", "(", "xys", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "q", "[", "xys", "[", ":", ",", "0", "]", "<", "0.0", "]", "+=", "1", "\n", "q", "[", "xys", "[", ":", ",", "1", "]", "<", "0.0", "]", "+=", "2", "\n", "return", "q", "\n", "\n", "", "@", "classmethod", "\n", "def", "max_r", "(", "cls", ",", "xyv", ",", "other_xyv", ")", ":", "\n", "        ", "out", "=", "np", ".", "array", "(", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "not", "other_xyv", ":", "\n", "            ", "return", "out", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet.__init__": [[16, 23], ["base.BaseVisualizer.__init__", "show.DetectionPainter"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["class", "CifDet", ":", "\n", "    ", "n_categories", ":", "int", "\n", "rescaler", ":", "AnnRescaler", "\n", "v_threshold", ":", "int", "=", "0", "\n", "visualizer", ":", "CifDetVisualizer", "=", "None", "\n", "\n", "side_length", ":", "ClassVar", "[", "int", "]", "=", "5", "\n", "padding", ":", "ClassVar", "[", "int", "]", "=", "10", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet.targets": [[24, 34], ["cifdet.CifDet._confidences", "cifdet.CifDet._regressions", "annotation.AnnotationDet().set", "annotation.AnnotationDet"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._confidences", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._regressions", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.occupancy.Occupancy.set"], ["\n", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n", "        ", "return", "CifDetGenerator", "(", "self", ")", "(", "image", ",", "anns", ",", "meta", ")", "\n", "\n", "\n", "", "", "class", "CifDetGenerator", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ":", "CifDet", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "intensities", "=", "None", "\n", "self", ".", "fields_reg", "=", "None", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet.predicted": [[35, 41], ["cifdet.CifDet._confidences", "cifdet.CifDet._regressions"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._confidences", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._regressions"], ["self", ".", "fields_wh", "=", "None", "\n", "self", ".", "fields_reg_l", "=", "None", "\n", "\n", "self", ".", "sink", "=", "create_sink", "(", "config", ".", "side_length", ")", "\n", "self", ".", "s_offset", "=", "(", "config", ".", "side_length", "-", "1.0", ")", "/", "2.0", "\n", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "anns", ",", "meta", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._confidences": [[42, 53], ["LOG.debug", "cifdet.CifDet.image_canvas", "ax.imshow", "cifdet.CifDet.colorbar", "cifdet.CifDet.scale_scalar"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.colorbar", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.scale_scalar"], ["        ", "width_height_original", "=", "image", ".", "shape", "[", "2", ":", "0", ":", "-", "1", "]", "\n", "\n", "detections", "=", "self", ".", "config", ".", "rescaler", ".", "detections", "(", "anns", ")", "\n", "bg_mask", "=", "self", ".", "config", ".", "rescaler", ".", "bg_mask", "(", "anns", ",", "width_height_original", ",", "\n", "crowd_margin", "=", "(", "self", ".", "config", ".", "side_length", "-", "1", ")", "/", "2", ")", "\n", "valid_area", "=", "self", ".", "config", ".", "rescaler", ".", "valid_area", "(", "meta", ")", "\n", "LOG", ".", "debug", "(", "'valid area: %s\b, pif side length = %d'", ",", "valid_area", ",", "self", ".", "config", ".", "side_length", ")", "\n", "\n", "n_fields", "=", "self", ".", "config", ".", "n_categories", "\n", "self", ".", "init_fields", "(", "n_fields", ",", "bg_mask", ")", "\n", "self", ".", "fill", "(", "detections", ")", "\n", "fields", "=", "self", ".", "fields", "(", "valid_area", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.cifdet.CifDet._regressions": [[54, 81], ["LOG.debug", "cifdet.CifDet.image_canvas", "show.white_screen", "show.quiver", "show.boxes_wh", "cifdet.CifDet.colorbar", "cifdet.CifDet.detection_painter.annotations", "show.margins"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.modules.logger.Logger.debug", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.quiver", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.boxes_wh", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.colorbar", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.decoder.nms.Detection.annotations", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.fields.margins"], ["\n", "self", ".", "config", ".", "visualizer", ".", "processed_image", "(", "image", ")", "\n", "self", ".", "config", ".", "visualizer", ".", "targets", "(", "fields", ",", "detections", "=", "detections", ")", "\n", "\n", "return", "{", "'cifdet'", ":", "fields", "}", "\n", "\n", "", "def", "init_fields", "(", "self", ",", "n_fields", ",", "bg_mask", ")", ":", "\n", "        ", "field_w", "=", "bg_mask", ".", "shape", "[", "-", "1", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "field_h", "=", "bg_mask", ".", "shape", "[", "-", "2", "]", "+", "2", "*", "self", ".", "config", ".", "padding", "\n", "self", ".", "intensities", "=", "np", ".", "zeros", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg", "=", "np", ".", "full", "(", "(", "n_fields", ",", "2", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_wh", "=", "np", ".", "full", "(", "(", "n_fields", ",", "2", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "fields_reg_l", "=", "np", ".", "full", "(", "(", "n_fields", ",", "field_h", ",", "field_w", ")", ",", "np", ".", "inf", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# bg_mask", "\n", "p", "=", "self", ".", "config", ".", "padding", "\n", "self", ".", "fields_reg_l", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", "bg_mask", "==", "0", "]", "=", "1.0", "\n", "self", ".", "intensities", "[", ":", ",", "p", ":", "-", "p", ",", "p", ":", "-", "p", "]", "[", "bg_mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "\n", "", "def", "fill", "(", "self", ",", "detections", ")", ":", "\n", "        ", "for", "category_id", ",", "bbox", "in", "detections", ":", "\n", "            ", "xy", "=", "bbox", "[", ":", "2", "]", "+", "0.5", "*", "bbox", "[", "2", ":", "]", "\n", "wh", "=", "bbox", "[", "2", ":", "]", "\n", "self", ".", "fill_detection", "(", "category_id", "-", "1", ",", "xy", ",", "wh", ")", "\n", "\n", "", "", "def", "fill_detection", "(", "self", ",", "f", ",", "xy", ",", "wh", ")", ":", "\n", "        ", "ij", "=", "np", ".", "round", "(", "xy", "-", "self", ".", "s_offset", ")", ".", "astype", "(", "np", ".", "int", ")", "+", "self", ".", "config", ".", "padding", "\n", "minx", ",", "miny", "=", "int", "(", "ij", "[", "0", "]", ")", ",", "int", "(", "ij", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__": [[13, 16], ["base.BaseVisualizer.__init__"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'seeds'", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.seeds.Seeds.predicted": [[17, 34], ["seeds.Seeds.image_canvas", "show.white_screen", "ax.plot", "zip", "ax.text"], "methods", ["home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.visualizer.base.BaseVisualizer.image_canvas", "home.repos.pwc.inspect_result.tfzhou_MG-HumanParsing.show.canvas.white_screen"], ["", "def", "predicted", "(", "self", ",", "seeds", ")", ":", "\n", "        ", "\"\"\"Seeds are: confidence, field_index, x, y, ...\"\"\"", "\n", "if", "not", "self", ".", "show", ":", "\n", "            ", "return", "\n", "\n", "", "field_indices", "=", "{", "s", "[", "1", "]", "for", "s", "in", "seeds", "}", "\n", "\n", "with", "self", ".", "image_canvas", "(", "self", ".", "_processed_image", ")", "as", "ax", ":", "\n", "            ", "show", ".", "white_screen", "(", "ax", ")", "\n", "for", "f", "in", "field_indices", ":", "\n", "                ", "x", "=", "[", "s", "[", "2", "]", "*", "self", ".", "stride", "for", "s", "in", "seeds", "if", "s", "[", "1", "]", "==", "f", "]", "\n", "y", "=", "[", "s", "[", "3", "]", "*", "self", ".", "stride", "for", "s", "in", "seeds", "if", "s", "[", "1", "]", "==", "f", "]", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "'o'", ")", "\n", "if", "self", ".", "show_confidences", ":", "\n", "                    ", "c", "=", "[", "s", "[", "0", "]", "for", "s", "in", "seeds", "if", "s", "[", "1", "]", "==", "f", "]", "\n", "for", "xx", ",", "yy", ",", "cc", "in", "zip", "(", "x", ",", "y", ",", "c", ")", ":", "\n", "                        ", "ax", ".", "text", "(", "xx", ",", "yy", ",", "'{:.2f}'", ".", "format", "(", "cc", ")", ")", "\n", "", "", "", "", "", "", ""]]}