{"home.repos.pwc.inspect_result.jchibane_if-net.None.generation_iterator.gen_iterator": [[14, 60], ["print", "dataset.get_loader", "tqdm.tqdm", "os.path.exists", "os.makedirs", "enumerate", "os.path.normpath", "os.path.exists", "generation_iterator.create_meshes", "gen.generate_mesh", "data_tupels.append", "print", "gen.generate_mesh", "data_tupels.append", "print", "len", "generation_iterator.create_meshes", "print", "os.path.normpath.split", "os.path.normpath.split", "traceback.format_exc", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.get_loader", "home.repos.pwc.inspect_result.jchibane_if-net.None.generation_iterator.create_meshes", "home.repos.pwc.inspect_result.jchibane_if-net.models.generation.Generator.generate_mesh", "home.repos.pwc.inspect_result.jchibane_if-net.models.generation.Generator.generate_mesh", "home.repos.pwc.inspect_result.jchibane_if-net.None.generation_iterator.create_meshes"], ["def", "gen_iterator", "(", "out_path", ",", "dataset", ",", "gen_p", ")", ":", "\n", "\n", "    ", "global", "gen", "\n", "gen", "=", "gen_p", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_path", ")", "\n", "", "print", "(", "out_path", ")", "\n", "\n", "\n", "# can be run on multiple machines: dataset is shuffled and already generated objects are skipped.", "\n", "loader", "=", "dataset", ".", "get_loader", "(", "shuffle", "=", "True", ")", "\n", "\n", "data_tupels", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "tqdm", "(", "enumerate", "(", "loader", ")", ")", ":", "\n", "\n", "\n", "        ", "path", "=", "os", ".", "path", ".", "normpath", "(", "data", "[", "'path'", "]", "[", "0", "]", ")", "\n", "export_path", "=", "out_path", "+", "'/generation/{}/{}/'", ".", "format", "(", "path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", ",", "path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", ")", "\n", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "export_path", ")", ":", "\n", "            ", "print", "(", "'Path exists - skip! {}'", ".", "format", "(", "export_path", ")", ")", "\n", "continue", "\n", "\n", "", "try", ":", "\n", "            ", "if", "len", "(", "data_tupels", ")", ">", "20", ":", "\n", "                ", "create_meshes", "(", "data_tupels", ")", "\n", "data_tupels", "=", "[", "]", "\n", "", "logits", "=", "gen", ".", "generate_mesh", "(", "data", ")", "\n", "data_tupels", ".", "append", "(", "(", "logits", ",", "data", ",", "out_path", ")", ")", "\n", "\n", "\n", "", "except", "Exception", "as", "err", ":", "\n", "            ", "print", "(", "'Error with {}: {}'", ".", "format", "(", "data", "[", "'path'", "]", "[", "0", "]", ",", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "\n", "", "", "try", ":", "\n", "\n", "        ", "create_meshes", "(", "data_tupels", ")", "\n", "data_tupels", "=", "[", "]", "\n", "logits", "=", "gen", ".", "generate_mesh", "(", "data", ")", "\n", "data_tupels", ".", "append", "(", "(", "logits", ",", "data", ",", "out_path", ")", ")", "\n", "\n", "\n", "", "except", "Exception", "as", "err", ":", "\n", "        ", "print", "(", "'Error with {}: {}'", ".", "format", "(", "data", "[", "'path'", "]", "[", "0", "]", ",", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.None.generation_iterator.save_mesh": [[62, 74], ["gen.mesh_from_logits", "os.path.normpath", "gen.mesh_from_logits.export", "os.path.exists", "os.makedirs", "os.path.normpath.split", "os.path.normpath.split"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.models.generation.Generator.mesh_from_logits"], ["", "", "def", "save_mesh", "(", "data_tupel", ")", ":", "\n", "    ", "logits", ",", "data", ",", "out_path", "=", "data_tupel", "\n", "\n", "mesh", "=", "gen", ".", "mesh_from_logits", "(", "logits", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "normpath", "(", "data", "[", "'path'", "]", "[", "0", "]", ")", "\n", "export_path", "=", "out_path", "+", "'/generation/{}/{}/'", ".", "format", "(", "path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", ",", "path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "export_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "export_path", ")", "\n", "\n", "", "mesh", ".", "export", "(", "export_path", "+", "'surface_reconstruction.off'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.None.generation_iterator.create_meshes": [[75, 79], ["multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.cpu_count"], "function", ["None"], ["", "def", "create_meshes", "(", "data_tupels", ")", ":", "\n", "    ", "p", "=", "Pool", "(", "mp", ".", "cpu_count", "(", ")", ")", "\n", "p", ".", "map", "(", "save_mesh", ",", "data_tupels", ")", "\n", "p", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluate.eval": [[16, 76], ["os.path.exists", "print", "os.path.normpath", "pickle.dump", "print", "print", "os.path.normpath.split", "os.path.normpath.split", "trimesh.load", "trimesh.load", "evaluation.eval_mesh", "open", "numpy.unpackbits", "numpy.reshape", "voxels.VoxelGrid().to_mesh", "VoxelGrid().to_mesh.export", "trimesh.load", "evaluation.eval_mesh", "[].astype", "trimesh.load", "trimesh.load.sample", "pointcloud_gt.astype.astype", "evaluation.eval_pointcloud", "traceback.format_exc", "numpy.load", "voxels.VoxelGrid", "numpy.load"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluation.eval_mesh", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.VoxelGrid.to_mesh", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluation.eval_mesh", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluation.eval_pointcloud"], ["def", "eval", "(", "path", ")", ":", "\n", "\n", "    ", "if", "args", ".", "reconst", ":", "\n", "        ", "eval_file_name", "=", "\"/eval.pkl\"", "\n", "", "elif", "args", ".", "voxels", ":", "\n", "        ", "eval_file_name", "=", "\"/eval_voxelization_{}.pkl\"", ".", "format", "(", "args", ".", "res", ")", "\n", "", "else", ":", "\n", "        ", "eval_file_name", "=", "\"/eval_pointcloud_{}.pkl\"", ".", "format", "(", "args", ".", "points", ")", "\n", "\n", "", "try", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", "+", "eval_file_name", ")", ":", "\n", "            ", "print", "(", "'File exists. Done.'", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "normpath", "(", "path", ")", "\n", "folder", "=", "path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", "\n", "file_name", "=", "path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "\n", "if", "args", ".", "reconst", ":", "\n", "                ", "pred_mesh_path", "=", "path", "+", "'/surface_reconstruction.off'", "\n", "pred_mesh", "=", "trimesh", ".", "load", "(", "pred_mesh_path", ",", "process", "=", "False", ")", "\n", "\n", "gt_mesh_path", "=", "data_path", "+", "'/{}/{}/isosurf_scaled.off'", ".", "format", "(", "folder", ",", "file_name", ")", "\n", "gt_mesh", "=", "trimesh", ".", "load", "(", "gt_mesh_path", ",", "process", "=", "False", ")", "\n", "\n", "eval", "=", "eval_mesh", "(", "pred_mesh", ",", "gt_mesh", ",", "min", ",", "max", ")", "\n", "\n", "", "elif", "args", ".", "voxels", ":", "\n", "                ", "voxel_path", "=", "path", "+", "'/voxelization_{}.npy'", ".", "format", "(", "args", ".", "res", ")", "\n", "occ", "=", "np", ".", "unpackbits", "(", "np", ".", "load", "(", "voxel_path", ")", ")", "\n", "voxels", "=", "np", ".", "reshape", "(", "occ", ",", "(", "args", ".", "res", ",", ")", "*", "3", ")", "\n", "\n", "off_path", "=", "path", "+", "'/voxelization_{}.off'", ".", "format", "(", "args", ".", "res", ")", "\n", "input_mesh", "=", "VoxelGrid", "(", "voxels", ",", "[", "0", ",", "0", ",", "0", "]", ",", "1", ")", ".", "to_mesh", "(", ")", "\n", "input_mesh", ".", "export", "(", "off_path", ")", "\n", "\n", "gt_mesh_path", "=", "data_path", "+", "'/{}/{}/isosurf_scaled.off'", ".", "format", "(", "folder", ",", "file_name", ")", "\n", "gt_mesh", "=", "trimesh", ".", "load", "(", "gt_mesh_path", ",", "process", "=", "False", ")", "\n", "\n", "eval", "=", "eval_mesh", "(", "input_mesh", ",", "gt_mesh", ",", "min", ",", "max", ")", "\n", "\n", "", "else", ":", "\n", "                ", "input_points_path", "=", "path", "+", "'/voxelized_point_cloud_128res_{}points.npz'", ".", "format", "(", "args", ".", "points", ")", "\n", "input_points", "=", "np", ".", "load", "(", "input_points_path", ")", "[", "'point_cloud'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gt_mesh_path", "=", "data_path", "+", "'/{}/{}/isosurf_scaled.off'", ".", "format", "(", "folder", ",", "file_name", ")", "\n", "\n", "gt_mesh", "=", "trimesh", ".", "load", "(", "gt_mesh_path", ",", "process", "=", "False", ")", "\n", "pointcloud_gt", ",", "idx", "=", "gt_mesh", ".", "sample", "(", "100000", ",", "return_index", "=", "True", ")", "\n", "pointcloud_gt", "=", "pointcloud_gt", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "eval", "=", "eval_pointcloud", "(", "input_points", ",", "pointcloud_gt", ")", "\n", "\n", "\n", "\n", "", "pkl", ".", "dump", "(", "eval", ",", "open", "(", "path", "+", "eval_file_name", ",", "'wb'", ")", ")", "\n", "print", "(", "'Finished {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "", "", "except", "Exception", "as", "err", ":", "\n", "\n", "        ", "print", "(", "'Error with {}: {}'", ".", "format", "(", "path", ",", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.filter_corrupted.filter": [[12, 18], ["os.path.exists", "print", "shutil.rmtree"], "function", ["None"], ["def", "filter", "(", "path", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'{}/{}'", ".", "format", "(", "path", ",", "file", ")", ")", ":", "\n", "        ", "print", "(", "'Remove: {}'", ".", "format", "(", "path", ",", "file", ")", ")", "\n", "if", "delete", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "'{}'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.filter_corrupted.update_split": [[35, 48], ["numpy.load", "numpy.savez", "split[].copy", "os.path.exists", "print", "numpy.delete", "numpy.where"], "function", ["None"], ["def", "update_split", "(", ")", ":", "\n", "\n", "    ", "split", "=", "np", ".", "load", "(", "'shapenet/split.npz'", ")", "\n", "split_dict", "=", "{", "}", "\n", "for", "set", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", ":", "\n", "        ", "filterd_set", "=", "split", "[", "set", "]", ".", "copy", "(", ")", "\n", "for", "path", "in", "split", "[", "set", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "'shapenet/data/'", "+", "path", ")", ":", "\n", "                ", "print", "(", "'Filtered: '", "+", "path", ")", "\n", "filterd_set", "=", "np", ".", "delete", "(", "filterd_set", ",", "np", ".", "where", "(", "filterd_set", "==", "path", ")", ")", "\n", "", "", "split_dict", "[", "set", "]", "=", "filterd_set", "\n", "\n", "", "np", ".", "savez", "(", "'shapenet/split.npz'", ",", "**", "split_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.create_voxel_off.create_voxel_off": [[11, 29], ["voxels.VoxelGrid().to_mesh().export", "print", "numpy.unpackbits", "numpy.reshape", "numpy.reshape", "numpy.load", "voxels.VoxelGrid().to_mesh", "numpy.load", "voxels.VoxelGrid"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.VoxelGrid.to_mesh"], ["def", "create_voxel_off", "(", "path", ")", ":", "\n", "\n", "\n", "    ", "voxel_path", "=", "path", "+", "'/voxelization_{}.npy'", ".", "format", "(", "res", ")", "\n", "off_path", "=", "path", "+", "'/voxelization_{}.off'", ".", "format", "(", "res", ")", "\n", "\n", "\n", "if", "unpackbits", ":", "\n", "        ", "occ", "=", "np", ".", "unpackbits", "(", "np", ".", "load", "(", "voxel_path", ")", ")", "\n", "voxels", "=", "np", ".", "reshape", "(", "occ", ",", "(", "res", ",", ")", "*", "3", ")", "\n", "", "else", ":", "\n", "        ", "voxels", "=", "np", ".", "reshape", "(", "np", ".", "load", "(", "voxel_path", ")", "[", "'occupancies'", "]", ",", "(", "res", ",", ")", "*", "3", ")", "\n", "\n", "", "loc", "=", "(", "(", "min", "+", "max", ")", "/", "2", ",", ")", "*", "3", "\n", "scale", "=", "max", "-", "min", "\n", "\n", "VoxelGrid", "(", "voxels", ",", "loc", ",", "scale", ")", ".", "to_mesh", "(", ")", ".", "export", "(", "off_path", ")", "\n", "print", "(", "'Finished: {}'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxelized_pointcloud_sampling.voxelized_pointcloud_sampling": [[15, 42], ["os.path.exists", "trimesh.load", "trimesh.load.sample", "numpy.zeros", "kdtree.query", "numpy.packbits", "numpy.savez", "print", "print", "len", "print", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.TriangleIntersector2d.query"], ["def", "voxelized_pointcloud_sampling", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "out_file", "=", "path", "+", "'/voxelized_point_cloud_{}res_{}points.npz'", ".", "format", "(", "args", ".", "res", ",", "args", ".", "num_points", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_file", ")", ":", "\n", "            ", "print", "(", "'File exists. Done.'", ")", "\n", "return", "\n", "", "off_path", "=", "path", "+", "'/isosurf_scaled.off'", "\n", "\n", "\n", "mesh", "=", "trimesh", ".", "load", "(", "off_path", ")", "\n", "point_cloud", "=", "mesh", ".", "sample", "(", "args", ".", "num_points", ")", "\n", "\n", "\n", "occupancies", "=", "np", ".", "zeros", "(", "len", "(", "grid_points", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "\n", "_", ",", "idx", "=", "kdtree", ".", "query", "(", "point_cloud", ")", "\n", "occupancies", "[", "idx", "]", "=", "1", "\n", "\n", "compressed_occupancies", "=", "np", ".", "packbits", "(", "occupancies", ")", "\n", "\n", "\n", "np", ".", "savez", "(", "out_file", ",", "point_cloud", "=", "point_cloud", ",", "compressed_occupancies", "=", "compressed_occupancies", ",", "bb_min", "=", "bb_min", ",", "bb_max", "=", "bb_max", ",", "res", "=", "args", ".", "res", ")", "\n", "print", "(", "'Finished {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "", "except", "Exception", "as", "err", ":", "\n", "        ", "print", "(", "'Error with {}: {}'", ".", "format", "(", "path", ",", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.convert_to_scaled_off.to_off": [[9, 21], ["os.path.exists", "os.system"], "function", ["None"], ["def", "to_off", "(", "path", ")", ":", "\n", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", "+", "'/isosurf.off'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "input_file", "=", "path", "+", "'/isosurf.obj'", "\n", "output_file", "=", "path", "+", "'/isosurf.off'", "\n", "\n", "cmd", "=", "'meshlabserver -i {} -o {}'", ".", "format", "(", "input_file", ",", "output_file", ")", "\n", "# if you run this script on a server: comment out above line and uncomment the next line", "\n", "# cmd = 'xvfb-run -a -s \"-screen 0 800x600x24\" meshlabserver -i {} -o {}'.format(input_file,output_file)", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.convert_to_scaled_off.scale": [[27, 43], ["os.path.exists", "print", "trimesh.load", "trimesh.load.apply_translation", "trimesh.load.apply_scale", "trimesh.load.export", "print"], "function", ["None"], ["def", "scale", "(", "path", ")", ":", "\n", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", "+", "'/isosurf_scaled.off'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "try", ":", "\n", "        ", "mesh", "=", "trimesh", ".", "load", "(", "path", "+", "'/isosurf.off'", ",", "process", "=", "False", ")", "\n", "total_size", "=", "(", "mesh", ".", "bounds", "[", "1", "]", "-", "mesh", ".", "bounds", "[", "0", "]", ")", ".", "max", "(", ")", "\n", "centers", "=", "(", "mesh", ".", "bounds", "[", "1", "]", "+", "mesh", ".", "bounds", "[", "0", "]", ")", "/", "2", "\n", "\n", "mesh", ".", "apply_translation", "(", "-", "centers", ")", "\n", "mesh", ".", "apply_scale", "(", "1", "/", "total_size", ")", "\n", "mesh", ".", "export", "(", "path", "+", "'/isosurf_scaled.off'", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "'Error with {}'", ".", "format", "(", "path", ")", ")", "\n", "", "print", "(", "'Finished {}'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.to_rotation_matrix": [[10, 29], ["numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.sin"], "function", ["None"], ["def", "to_rotation_matrix", "(", "euler_angles", ")", ":", "\n", "    ", "R_x", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "math", ".", "cos", "(", "euler_angles", "[", "0", "]", ")", ",", "-", "math", ".", "sin", "(", "euler_angles", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "math", ".", "sin", "(", "euler_angles", "[", "0", "]", ")", ",", "math", ".", "cos", "(", "euler_angles", "[", "0", "]", ")", "]", "\n", "]", ")", "\n", "\n", "R_y", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "euler_angles", "[", "1", "]", ")", ",", "0", ",", "math", ".", "sin", "(", "euler_angles", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "euler_angles", "[", "1", "]", ")", ",", "0", ",", "math", ".", "cos", "(", "euler_angles", "[", "1", "]", ")", "]", "\n", "]", ")", "\n", "\n", "R_z", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "euler_angles", "[", "2", "]", ")", ",", "-", "math", ".", "sin", "(", "euler_angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "math", ".", "sin", "(", "euler_angles", "[", "2", "]", ")", ",", "math", ".", "cos", "(", "euler_angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "\n", "R", "=", "np", ".", "dot", "(", "R_z", ",", "np", ".", "dot", "(", "R_y", ",", "R_x", ")", ")", "\n", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.implicit_waterproofing": [[31, 53], ["data_processing.libmesh.inside_mesh.check_mesh_contains", "numpy.array", "print", "mesh_source.copy", "implicit_waterproofing.to_rotation_matrix", "numpy.pad", "mesh_source.copy.apply_transform", "data_processing.libmesh.inside_mesh.check_mesh_contains", "numpy.full", "holes_list.any", "numpy.dot", "len"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.check_mesh_contains", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.to_rotation_matrix", "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.check_mesh_contains"], ["", "def", "implicit_waterproofing", "(", "mesh_source", ",", "query_points", ")", ":", "\n", "    ", "occ_list", ",", "holes_list", "=", "check_mesh_contains", "(", "mesh_source", ",", "query_points", ")", "\n", "\n", "for", "euler_angles", "in", "np", ".", "array", "(", "[", "[", "0", ",", "np", ".", "pi", "/", "2", ",", "0", "]", ",", "[", "np", ".", "pi", "/", "2", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "np", ".", "pi", "/", "2", "]", "]", ")", ":", "\n", "\n", "        ", "if", "not", "holes_list", ".", "any", "(", ")", ":", "\n", "            ", "break", "\n", "", "print", "(", "'iteration start'", ")", "\n", "\n", "mesh", "=", "mesh_source", ".", "copy", "(", ")", "\n", "r", "=", "to_rotation_matrix", "(", "euler_angles", ")", "\n", "r", "=", "np", ".", "pad", "(", "r", ",", "[", "(", "0", ",", "1", ")", ",", "(", "0", ",", "1", ")", "]", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "mesh", ".", "apply_transform", "(", "r", ")", "\n", "points", "=", "np", ".", "dot", "(", "r", "[", ":", "3", ",", ":", "3", "]", ",", "query_points", "[", "holes_list", "]", ".", "T", ")", ".", "T", "\n", "occ_list_rot", ",", "holes_list_rot", "=", "check_mesh_contains", "(", "mesh", ",", "points", ")", "\n", "\n", "occ_list", "[", "holes_list", "]", "=", "occ_list_rot", "\n", "holes_list_updated", "=", "np", ".", "full", "(", "len", "(", "query_points", ")", ",", "False", ")", "\n", "holes_list_updated", "[", "holes_list", "]", "=", "holes_list_rot", "\n", "holes_list", "=", "holes_list_updated", "\n", "\n", "", "return", "occ_list", ",", "holes_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.create_grid_points": [[56, 69], ["min", "max", "numpy.linspace", "numpy.meshgrid", "X.reshape.reshape", "Y.reshape.reshape", "Z.reshape.reshape", "numpy.column_stack", "numpy.prod", "numpy.prod", "numpy.prod"], "function", ["None"], ["", "def", "create_grid_points", "(", "mesh", ",", "res", ")", ":", "\n", "    ", "bottom_cotner", ",", "upper_corner", "=", "mesh", ".", "bounds", "\n", "minimun", "=", "min", "(", "bottom_cotner", ")", "\n", "maximum", "=", "max", "(", "upper_corner", ")", "\n", "x", "=", "np", ".", "linspace", "(", "minimun", ",", "maximum", ",", "res", ")", "\n", "X", ",", "Y", ",", "Z", "=", "np", ".", "meshgrid", "(", "x", ",", "x", ",", "x", ",", "indexing", "=", "'ij'", ")", "\n", "X", "=", "X", ".", "reshape", "(", "(", "np", ".", "prod", "(", "X", ".", "shape", ")", ",", ")", ")", "\n", "Y", "=", "Y", ".", "reshape", "(", "(", "np", ".", "prod", "(", "Y", ".", "shape", ")", ",", ")", ")", "\n", "Z", "=", "Z", ".", "reshape", "(", "(", "np", ".", "prod", "(", "Z", ".", "shape", ")", ",", ")", ")", "\n", "\n", "points_list", "=", "np", ".", "column_stack", "(", "(", "X", ",", "Y", ",", "Z", ")", ")", "\n", "del", "X", ",", "Y", ",", "Z", ",", "x", "\n", "return", "points_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.create_grid_points_from_bounds": [[70, 80], ["numpy.linspace", "numpy.meshgrid", "X.reshape.reshape", "Y.reshape.reshape", "Z.reshape.reshape", "numpy.column_stack", "numpy.prod", "numpy.prod", "numpy.prod"], "function", ["None"], ["", "def", "create_grid_points_from_bounds", "(", "minimun", ",", "maximum", ",", "res", ")", ":", "\n", "    ", "x", "=", "np", ".", "linspace", "(", "minimun", ",", "maximum", ",", "res", ")", "\n", "X", ",", "Y", ",", "Z", "=", "np", ".", "meshgrid", "(", "x", ",", "x", ",", "x", ",", "indexing", "=", "'ij'", ")", "\n", "X", "=", "X", ".", "reshape", "(", "(", "np", ".", "prod", "(", "X", ".", "shape", ")", ",", ")", ")", "\n", "Y", "=", "Y", ".", "reshape", "(", "(", "np", ".", "prod", "(", "Y", ".", "shape", ")", ",", ")", ")", "\n", "Z", "=", "Z", ".", "reshape", "(", "(", "np", ".", "prod", "(", "Z", ".", "shape", ")", ",", ")", ")", "\n", "\n", "points_list", "=", "np", ".", "column_stack", "(", "(", "X", ",", "Y", ",", "Z", ")", ")", "\n", "del", "X", ",", "Y", ",", "Z", ",", "x", "\n", "return", "points_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.to_occ": [[83, 87], ["implicit_waterproofing.implicit_waterproofing", "numpy.reshape", "implicit_waterproofing.create_grid_points"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.implicit_waterproofing", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.create_grid_points"], ["", "def", "to_occ", "(", "mesh", ",", "res", ")", ":", "\n", "    ", "occ", ",", "holes", "=", "implicit_waterproofing", "(", "mesh", ",", "create_grid_points", "(", "mesh", ",", "res", ")", ")", "\n", "occ", "=", "np", ".", "reshape", "(", "occ", ",", "(", "res", ",", "res", ",", "res", ")", ")", "\n", "return", "occ", "", "", ""]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxelize.voxelize": [[13, 35], ["print", "os.path.join", "os.path.exists", "trimesh.load", "numpy.reshape", "numpy.packbits", "numpy.save", "voxels.VoxelGrid.from_mesh", "np.packbits.any", "ValueError", "os.path.normpath", "print", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.VoxelGrid.from_mesh"], ["def", "voxelize", "(", "in_path", ",", "res", ")", ":", "\n", "    ", "try", ":", "\n", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "in_path", ",", "'voxelization_{}.npy'", ".", "format", "(", "res", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "return", "\n", "\n", "", "mesh", "=", "trimesh", ".", "load", "(", "in_path", "+", "'/isosurf_scaled.off'", ",", "process", "=", "False", ")", "\n", "occupancies", "=", "voxels", ".", "VoxelGrid", ".", "from_mesh", "(", "mesh", ",", "res", ",", "loc", "=", "[", "0", ",", "0", ",", "0", "]", ",", "scale", "=", "1", ")", ".", "data", "\n", "occupancies", "=", "np", ".", "reshape", "(", "occupancies", ",", "-", "1", ")", "\n", "\n", "if", "not", "occupancies", ".", "any", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'No empty voxel grids allowed.'", ")", "\n", "\n", "", "occupancies", "=", "np", ".", "packbits", "(", "occupancies", ")", "\n", "np", ".", "save", "(", "filename", ",", "occupancies", ")", "\n", "\n", "", "except", "Exception", "as", "err", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "normpath", "(", "in_path", ")", "\n", "print", "(", "'Error with {}: {}'", ".", "format", "(", "path", ",", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "", "print", "(", "'finished {}'", ".", "format", "(", "in_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.VoxelGrid.__init__": [[34, 41], ["numpy.asarray", "numpy.asarray"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "loc", "=", "(", "0.", ",", "0.", ",", "0.", ")", ",", "scale", "=", "1", ")", ":", "\n", "        ", "assert", "(", "data", ".", "shape", "[", "0", "]", "==", "data", ".", "shape", "[", "1", "]", "==", "data", ".", "shape", "[", "2", "]", ")", "\n", "data", "=", "np", ".", "asarray", "(", "data", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "loc", "=", "np", ".", "asarray", "(", "loc", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "loc", "=", "loc", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.VoxelGrid.from_mesh": [[42, 69], ["numpy.asarray", "float", "mesh.copy.copy.copy", "mesh.copy.copy.apply_translation", "mesh.copy.copy.apply_scale", "cls", "voxels.voxelize_ray", "voxels.voxelize_fill"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.voxelize_ray", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.voxelize_fill"], ["", "@", "classmethod", "\n", "def", "from_mesh", "(", "cls", ",", "mesh", ",", "resolution", ",", "loc", "=", "None", ",", "scale", "=", "None", ",", "method", "=", "'ray'", ")", ":", "\n", "        ", "bounds", "=", "mesh", ".", "bounds", "\n", "# Default location is center", "\n", "if", "loc", "is", "None", ":", "\n", "            ", "loc", "=", "(", "bounds", "[", "0", "]", "+", "bounds", "[", "1", "]", ")", "/", "2", "\n", "\n", "# Default scale, scales the mesh to [-0.45, 0.45]^3", "\n", "", "if", "scale", "is", "None", ":", "\n", "            ", "scale", "=", "(", "bounds", "[", "1", "]", "-", "bounds", "[", "0", "]", ")", ".", "max", "(", ")", "/", "0.9", "\n", "\n", "", "loc", "=", "np", ".", "asarray", "(", "loc", ")", "\n", "scale", "=", "float", "(", "scale", ")", "\n", "\n", "# Transform mesh", "\n", "mesh", "=", "mesh", ".", "copy", "(", ")", "\n", "mesh", ".", "apply_translation", "(", "-", "loc", ")", "\n", "mesh", ".", "apply_scale", "(", "1", "/", "scale", ")", "\n", "\n", "# Apply method", "\n", "if", "method", "==", "'ray'", ":", "\n", "            ", "voxel_data", "=", "voxelize_ray", "(", "mesh", ",", "resolution", ")", "\n", "", "elif", "method", "==", "'fill'", ":", "\n", "            ", "voxel_data", "=", "voxelize_fill", "(", "mesh", ",", "resolution", ")", "\n", "\n", "", "voxels", "=", "cls", "(", "voxel_data", ",", "loc", ",", "scale", ")", "\n", "return", "voxels", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.VoxelGrid.down_sample": [[70, 75], ["skimage.measure.block_reduce", "voxels.VoxelGrid", "ValueError"], "methods", ["None"], ["", "def", "down_sample", "(", "self", ",", "factor", "=", "2", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "resolution", "%", "factor", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Resolution must be divisible by factor.'", ")", "\n", "", "new_data", "=", "block_reduce", "(", "self", ".", "data", ",", "(", "factor", ",", ")", "*", "3", ",", "np", ".", "max", ")", "\n", "return", "VoxelGrid", "(", "new_data", ",", "self", ".", "loc", ",", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.VoxelGrid.to_mesh": [[76, 195], ["numpy.pad", "numpy.full", "numpy.full.sum", "numpy.full", "numpy.arange", "numpy.where", "numpy.stack", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.concatenate", "trimesh.Trimesh"], "methods", ["None"], ["", "def", "to_mesh", "(", "self", ")", ":", "\n", "# Shorthand", "\n", "        ", "occ", "=", "self", ".", "data", "\n", "\n", "# Shape of voxel grid", "\n", "nx", ",", "ny", ",", "nz", "=", "occ", ".", "shape", "\n", "# Shape of corresponding occupancy grid", "\n", "grid_shape", "=", "(", "nx", "+", "1", ",", "ny", "+", "1", ",", "nz", "+", "1", ")", "\n", "\n", "# Convert values to occupancies", "\n", "occ", "=", "np", ".", "pad", "(", "occ", ",", "1", ",", "'constant'", ")", "\n", "\n", "# Determine if face present", "\n", "f1_r", "=", "(", "occ", "[", ":", "-", "1", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "&", "~", "occ", "[", "1", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ")", "\n", "f2_r", "=", "(", "occ", "[", "1", ":", "-", "1", ",", ":", "-", "1", ",", "1", ":", "-", "1", "]", "&", "~", "occ", "[", "1", ":", "-", "1", ",", "1", ":", ",", "1", ":", "-", "1", "]", ")", "\n", "f3_r", "=", "(", "occ", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", ",", ":", "-", "1", "]", "&", "~", "occ", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", ",", "1", ":", "]", ")", "\n", "\n", "f1_l", "=", "(", "~", "occ", "[", ":", "-", "1", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "&", "occ", "[", "1", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ")", "\n", "f2_l", "=", "(", "~", "occ", "[", "1", ":", "-", "1", ",", ":", "-", "1", ",", "1", ":", "-", "1", "]", "&", "occ", "[", "1", ":", "-", "1", ",", "1", ":", ",", "1", ":", "-", "1", "]", ")", "\n", "f3_l", "=", "(", "~", "occ", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", ",", ":", "-", "1", "]", "&", "occ", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", ",", "1", ":", "]", ")", "\n", "\n", "f1", "=", "f1_r", "|", "f1_l", "\n", "f2", "=", "f2_r", "|", "f2_l", "\n", "f3", "=", "f3_r", "|", "f3_l", "\n", "\n", "assert", "(", "f1", ".", "shape", "==", "(", "nx", "+", "1", ",", "ny", ",", "nz", ")", ")", "\n", "assert", "(", "f2", ".", "shape", "==", "(", "nx", ",", "ny", "+", "1", ",", "nz", ")", ")", "\n", "assert", "(", "f3", ".", "shape", "==", "(", "nx", ",", "ny", ",", "nz", "+", "1", ")", ")", "\n", "\n", "# Determine if vertex present", "\n", "v", "=", "np", ".", "full", "(", "grid_shape", ",", "False", ")", "\n", "\n", "v", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "|=", "f1", "\n", "v", "[", ":", ",", ":", "-", "1", ",", "1", ":", "]", "|=", "f1", "\n", "v", "[", ":", ",", "1", ":", ",", ":", "-", "1", "]", "|=", "f1", "\n", "v", "[", ":", ",", "1", ":", ",", "1", ":", "]", "|=", "f1", "\n", "\n", "v", "[", ":", "-", "1", ",", ":", ",", ":", "-", "1", "]", "|=", "f2", "\n", "v", "[", ":", "-", "1", ",", ":", ",", "1", ":", "]", "|=", "f2", "\n", "v", "[", "1", ":", ",", ":", ",", ":", "-", "1", "]", "|=", "f2", "\n", "v", "[", "1", ":", ",", ":", ",", "1", ":", "]", "|=", "f2", "\n", "\n", "v", "[", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", "|=", "f3", "\n", "v", "[", ":", "-", "1", ",", "1", ":", ",", ":", "]", "|=", "f3", "\n", "v", "[", "1", ":", ",", ":", "-", "1", ",", ":", "]", "|=", "f3", "\n", "v", "[", "1", ":", ",", "1", ":", ",", ":", "]", "|=", "f3", "\n", "\n", "# Calculate indices for vertices", "\n", "n_vertices", "=", "v", ".", "sum", "(", ")", "\n", "v_idx", "=", "np", ".", "full", "(", "grid_shape", ",", "-", "1", ")", "\n", "v_idx", "[", "v", "]", "=", "np", ".", "arange", "(", "n_vertices", ")", "\n", "\n", "# Vertices", "\n", "v_x", ",", "v_y", ",", "v_z", "=", "np", ".", "where", "(", "v", ")", "\n", "v_x", "=", "v_x", "/", "nx", "-", "0.5", "\n", "v_y", "=", "v_y", "/", "ny", "-", "0.5", "\n", "v_z", "=", "v_z", "/", "nz", "-", "0.5", "\n", "vertices", "=", "np", ".", "stack", "(", "[", "v_x", ",", "v_y", ",", "v_z", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Face indices", "\n", "f1_l_x", ",", "f1_l_y", ",", "f1_l_z", "=", "np", ".", "where", "(", "f1_l", ")", "\n", "f2_l_x", ",", "f2_l_y", ",", "f2_l_z", "=", "np", ".", "where", "(", "f2_l", ")", "\n", "f3_l_x", ",", "f3_l_y", ",", "f3_l_z", "=", "np", ".", "where", "(", "f3_l", ")", "\n", "\n", "f1_r_x", ",", "f1_r_y", ",", "f1_r_z", "=", "np", ".", "where", "(", "f1_r", ")", "\n", "f2_r_x", ",", "f2_r_y", ",", "f2_r_z", "=", "np", ".", "where", "(", "f2_r", ")", "\n", "f3_r_x", ",", "f3_r_y", ",", "f3_r_z", "=", "np", ".", "where", "(", "f3_r", ")", "\n", "\n", "faces_1_l", "=", "np", ".", "stack", "(", "[", "\n", "v_idx", "[", "f1_l_x", ",", "f1_l_y", ",", "f1_l_z", "]", ",", "\n", "v_idx", "[", "f1_l_x", ",", "f1_l_y", ",", "f1_l_z", "+", "1", "]", ",", "\n", "v_idx", "[", "f1_l_x", ",", "f1_l_y", "+", "1", ",", "f1_l_z", "+", "1", "]", ",", "\n", "v_idx", "[", "f1_l_x", ",", "f1_l_y", "+", "1", ",", "f1_l_z", "]", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "faces_1_r", "=", "np", ".", "stack", "(", "[", "\n", "v_idx", "[", "f1_r_x", ",", "f1_r_y", ",", "f1_r_z", "]", ",", "\n", "v_idx", "[", "f1_r_x", ",", "f1_r_y", "+", "1", ",", "f1_r_z", "]", ",", "\n", "v_idx", "[", "f1_r_x", ",", "f1_r_y", "+", "1", ",", "f1_r_z", "+", "1", "]", ",", "\n", "v_idx", "[", "f1_r_x", ",", "f1_r_y", ",", "f1_r_z", "+", "1", "]", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "faces_2_l", "=", "np", ".", "stack", "(", "[", "\n", "v_idx", "[", "f2_l_x", ",", "f2_l_y", ",", "f2_l_z", "]", ",", "\n", "v_idx", "[", "f2_l_x", "+", "1", ",", "f2_l_y", ",", "f2_l_z", "]", ",", "\n", "v_idx", "[", "f2_l_x", "+", "1", ",", "f2_l_y", ",", "f2_l_z", "+", "1", "]", ",", "\n", "v_idx", "[", "f2_l_x", ",", "f2_l_y", ",", "f2_l_z", "+", "1", "]", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "faces_2_r", "=", "np", ".", "stack", "(", "[", "\n", "v_idx", "[", "f2_r_x", ",", "f2_r_y", ",", "f2_r_z", "]", ",", "\n", "v_idx", "[", "f2_r_x", ",", "f2_r_y", ",", "f2_r_z", "+", "1", "]", ",", "\n", "v_idx", "[", "f2_r_x", "+", "1", ",", "f2_r_y", ",", "f2_r_z", "+", "1", "]", ",", "\n", "v_idx", "[", "f2_r_x", "+", "1", ",", "f2_r_y", ",", "f2_r_z", "]", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "faces_3_l", "=", "np", ".", "stack", "(", "[", "\n", "v_idx", "[", "f3_l_x", ",", "f3_l_y", ",", "f3_l_z", "]", ",", "\n", "v_idx", "[", "f3_l_x", ",", "f3_l_y", "+", "1", ",", "f3_l_z", "]", ",", "\n", "v_idx", "[", "f3_l_x", "+", "1", ",", "f3_l_y", "+", "1", ",", "f3_l_z", "]", ",", "\n", "v_idx", "[", "f3_l_x", "+", "1", ",", "f3_l_y", ",", "f3_l_z", "]", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "faces_3_r", "=", "np", ".", "stack", "(", "[", "\n", "v_idx", "[", "f3_r_x", ",", "f3_r_y", ",", "f3_r_z", "]", ",", "\n", "v_idx", "[", "f3_r_x", "+", "1", ",", "f3_r_y", ",", "f3_r_z", "]", ",", "\n", "v_idx", "[", "f3_r_x", "+", "1", ",", "f3_r_y", "+", "1", ",", "f3_r_z", "]", ",", "\n", "v_idx", "[", "f3_r_x", ",", "f3_r_y", "+", "1", ",", "f3_r_z", "]", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "faces", "=", "np", ".", "concatenate", "(", "[", "\n", "faces_1_l", ",", "faces_1_r", ",", "\n", "faces_2_l", ",", "faces_2_r", ",", "\n", "faces_3_l", ",", "faces_3_r", ",", "\n", "]", ",", "axis", "=", "0", ")", "\n", "\n", "vertices", "=", "self", ".", "loc", "+", "self", ".", "scale", "*", "vertices", "\n", "mesh", "=", "trimesh", ".", "Trimesh", "(", "vertices", ",", "faces", ",", "process", "=", "False", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.VoxelGrid.resolution": [[196, 200], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "resolution", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "data", ".", "shape", "[", "0", "]", "==", "self", ".", "data", ".", "shape", "[", "1", "]", "==", "self", ".", "data", ".", "shape", "[", "2", "]", ")", "\n", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.VoxelGrid.contains": [[201, 225], ["numpy.zeros"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "points", ")", ":", "\n", "        ", "nx", "=", "self", ".", "resolution", "\n", "\n", "# Rescale bounding box to [-0.5, 0.5]^3", "\n", "points", "=", "(", "points", "-", "self", ".", "loc", ")", "/", "self", ".", "scale", "\n", "# Discretize points to [0, nx-1]^3", "\n", "points_i", "=", "(", "(", "points", "+", "0.5", ")", "*", "nx", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# i1, i2, i3 have sizes (batch_size, T)", "\n", "i1", ",", "i2", ",", "i3", "=", "points_i", "[", "...", ",", "0", "]", ",", "points_i", "[", "...", ",", "1", "]", ",", "points_i", "[", "...", ",", "2", "]", "\n", "# Only use indices inside bounding box", "\n", "mask", "=", "(", "\n", "(", "i1", ">=", "0", ")", "&", "(", "i2", ">=", "0", ")", "&", "(", "i3", ">=", "0", ")", "\n", "&", "(", "nx", ">", "i1", ")", "&", "(", "nx", ">", "i2", ")", "&", "(", "nx", ">", "i3", ")", "\n", ")", "\n", "# Prevent out of bounds error", "\n", "i1", "=", "i1", "[", "mask", "]", "\n", "i2", "=", "i2", "[", "mask", "]", "\n", "i3", "=", "i3", "[", "mask", "]", "\n", "\n", "# Compute values, default value outside box is 0", "\n", "occ", "=", "np", ".", "zeros", "(", "points", ".", "shape", "[", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "occ", "[", "mask", "]", "=", "self", ".", "data", "[", "i1", ",", "i2", ",", "i3", "]", "\n", "\n", "return", "occ", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.make_3d_grid": [[11, 31], ["torch.linspace", "torch.linspace", "torch.linspace", "pxs.view().expand().contiguous().view.view().expand().contiguous().view", "pys.view().expand().contiguous().view.view().expand().contiguous().view", "pzs.view().expand().contiguous().view.view().expand().contiguous().view", "torch.stack", "pxs.view().expand().contiguous().view.view().expand().contiguous", "pys.view().expand().contiguous().view.view().expand().contiguous", "pzs.view().expand().contiguous().view.view().expand().contiguous", "pxs.view().expand().contiguous().view.view().expand", "pys.view().expand().contiguous().view.view().expand", "pzs.view().expand().contiguous().view.view().expand", "pxs.view().expand().contiguous().view.view", "pys.view().expand().contiguous().view.view", "pzs.view().expand().contiguous().view.view"], "function", ["None"], ["def", "make_3d_grid", "(", "bb_min", ",", "bb_max", ",", "shape", ")", ":", "\n", "    ", "''' Makes a 3D grid.\n\n    Args:\n        bb_min (tuple): bounding box minimum\n        bb_max (tuple): bounding box maximum\n        shape (tuple): output shape\n    '''", "\n", "size", "=", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", "\n", "\n", "pxs", "=", "torch", ".", "linspace", "(", "bb_min", "[", "0", "]", ",", "bb_max", "[", "0", "]", ",", "shape", "[", "0", "]", ")", "\n", "pys", "=", "torch", ".", "linspace", "(", "bb_min", "[", "1", "]", ",", "bb_max", "[", "1", "]", ",", "shape", "[", "1", "]", ")", "\n", "pzs", "=", "torch", ".", "linspace", "(", "bb_min", "[", "2", "]", ",", "bb_max", "[", "2", "]", ",", "shape", "[", "2", "]", ")", "\n", "\n", "pxs", "=", "pxs", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "*", "shape", ")", ".", "contiguous", "(", ")", ".", "view", "(", "size", ")", "\n", "pys", "=", "pys", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ".", "expand", "(", "*", "shape", ")", ".", "contiguous", "(", ")", ".", "view", "(", "size", ")", "\n", "pzs", "=", "pzs", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", ".", "expand", "(", "*", "shape", ")", ".", "contiguous", "(", ")", ".", "view", "(", "size", ")", "\n", "p", "=", "torch", ".", "stack", "(", "[", "pxs", ",", "pys", ",", "pzs", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.voxelize_ray": [[227, 233], ["voxels.voxelize_surface", "voxels.voxelize_interior"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.voxelize_surface", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.voxelize_interior"], ["", "", "def", "voxelize_ray", "(", "mesh", ",", "resolution", ")", ":", "\n", "    ", "occ_surface", "=", "voxelize_surface", "(", "mesh", ",", "resolution", ")", "\n", "# TODO: use surface voxels here?", "\n", "occ_interior", "=", "voxelize_interior", "(", "mesh", ",", "resolution", ")", "\n", "occ", "=", "(", "occ_interior", "|", "occ_surface", ")", "\n", "return", "occ", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.voxelize_fill": [[235, 243], ["voxels.voxelize_surface", "scipy.ndimage.morphology.binary_fill_holes", "ValueError", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.voxelize_surface"], ["", "def", "voxelize_fill", "(", "mesh", ",", "resolution", ")", ":", "\n", "    ", "bounds", "=", "mesh", ".", "bounds", "\n", "if", "(", "np", ".", "abs", "(", "bounds", ")", ">=", "0.5", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'voxelize fill is only supported if mesh is inside [-0.5, 0.5]^3/'", ")", "\n", "\n", "", "occ", "=", "voxelize_surface", "(", "mesh", ",", "resolution", ")", "\n", "occ", "=", "ndimage", ".", "morphology", ".", "binary_fill_holes", "(", "occ", ")", "\n", "return", "occ", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.voxelize_surface": [[245, 259], ["numpy.full", "face_loc.astype.astype", "libvoxelize.voxelize.voxelize_mesh_"], "function", ["None"], ["", "def", "voxelize_surface", "(", "mesh", ",", "resolution", ")", ":", "\n", "    ", "vertices", "=", "mesh", ".", "vertices", "\n", "faces", "=", "mesh", ".", "faces", "\n", "\n", "vertices", "=", "(", "vertices", "+", "0.5", ")", "*", "resolution", "\n", "\n", "face_loc", "=", "vertices", "[", "faces", "]", "\n", "occ", "=", "np", ".", "full", "(", "(", "resolution", ",", ")", "*", "3", ",", "0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "face_loc", "=", "face_loc", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "voxelize_mesh_", "(", "occ", ",", "face_loc", ")", "\n", "occ", "=", "(", "occ", "!=", "0", ")", "\n", "\n", "return", "occ", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.voxelize_interior": [[261, 272], ["make_3d_grid().numpy", "occ.reshape.reshape", "libmesh.inside_mesh.check_mesh_contains", "voxels.make_3d_grid", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.check_mesh_contains", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.make_3d_grid"], ["", "def", "voxelize_interior", "(", "mesh", ",", "resolution", ")", ":", "\n", "    ", "shape", "=", "(", "resolution", ",", ")", "*", "3", "\n", "bb_min", "=", "(", "0.5", ",", ")", "*", "3", "\n", "bb_max", "=", "(", "resolution", "-", "0.5", ",", ")", "*", "3", "\n", "# Create points. Add noise to break symmetry", "\n", "points", "=", "make_3d_grid", "(", "bb_min", ",", "bb_max", ",", "shape", "=", "shape", ")", ".", "numpy", "(", ")", "\n", "points", "=", "points", "+", "0.1", "*", "(", "np", ".", "random", ".", "rand", "(", "*", "points", ".", "shape", ")", "-", "0.5", ")", "\n", "points", "=", "(", "points", "/", "resolution", "-", "0.5", ")", "\n", "occ", "=", "check_mesh_contains", "(", "mesh", ",", "points", ")", "[", "0", "]", "\n", "occ", "=", "occ", ".", "reshape", "(", "shape", ")", "\n", "return", "occ", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.check_voxel_occupied": [[274, 288], ["None"], "function", ["None"], ["", "def", "check_voxel_occupied", "(", "occupancy_grid", ")", ":", "\n", "    ", "occ", "=", "occupancy_grid", "\n", "\n", "occupied", "=", "(", "\n", "occ", "[", "...", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "&", "occ", "[", "...", ",", ":", "-", "1", ",", ":", "-", "1", ",", "1", ":", "]", "\n", "&", "occ", "[", "...", ",", ":", "-", "1", ",", "1", ":", ",", ":", "-", "1", "]", "\n", "&", "occ", "[", "...", ",", ":", "-", "1", ",", "1", ":", ",", "1", ":", "]", "\n", "&", "occ", "[", "...", ",", "1", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "&", "occ", "[", "...", ",", "1", ":", ",", ":", "-", "1", ",", "1", ":", "]", "\n", "&", "occ", "[", "...", ",", "1", ":", ",", "1", ":", ",", ":", "-", "1", "]", "\n", "&", "occ", "[", "...", ",", "1", ":", ",", "1", ":", ",", "1", ":", "]", "\n", ")", "\n", "return", "occupied", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.check_voxel_unoccupied": [[290, 304], ["None"], "function", ["None"], ["", "def", "check_voxel_unoccupied", "(", "occupancy_grid", ")", ":", "\n", "    ", "occ", "=", "occupancy_grid", "\n", "\n", "unoccupied", "=", "~", "(", "\n", "occ", "[", "...", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "|", "occ", "[", "...", ",", ":", "-", "1", ",", ":", "-", "1", ",", "1", ":", "]", "\n", "|", "occ", "[", "...", ",", ":", "-", "1", ",", "1", ":", ",", ":", "-", "1", "]", "\n", "|", "occ", "[", "...", ",", ":", "-", "1", ",", "1", ":", ",", "1", ":", "]", "\n", "|", "occ", "[", "...", ",", "1", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "|", "occ", "[", "...", ",", "1", ":", ",", ":", "-", "1", ",", "1", ":", "]", "\n", "|", "occ", "[", "...", ",", "1", ":", ",", "1", ":", ",", ":", "-", "1", "]", "\n", "|", "occ", "[", "...", ",", "1", ":", ",", "1", ":", ",", "1", ":", "]", "\n", ")", "\n", "return", "unoccupied", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.check_voxel_boundary": [[306, 310], ["voxels.check_voxel_occupied", "voxels.check_voxel_unoccupied"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.check_voxel_occupied", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.voxels.check_voxel_unoccupied"], ["", "def", "check_voxel_boundary", "(", "occupancy_grid", ")", ":", "\n", "    ", "occupied", "=", "check_voxel_occupied", "(", "occupancy_grid", ")", "\n", "unoccupied", "=", "check_voxel_unoccupied", "(", "occupancy_grid", ")", "\n", "return", "~", "occupied", "&", "~", "unoccupied", "\n", "", ""]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.create_pc_off.create_voxel_off": [[9, 19], ["trimesh.Trimesh().export", "print", "numpy.load", "trimesh.Trimesh"], "function", ["None"], ["def", "create_voxel_off", "(", "path", ")", ":", "\n", "\n", "    ", "pc_path", "=", "path", "+", "'/voxelized_point_cloud_{}res_{}points.npz'", ".", "format", "(", "args", ".", "res", ",", "args", ".", "num_points", ")", "\n", "off_path", "=", "path", "+", "'/voxelized_point_cloud_{}res_{}points.off'", ".", "format", "(", "args", ".", "res", ",", "args", ".", "num_points", ")", "\n", "\n", "pc", "=", "np", ".", "load", "(", "pc_path", ")", "[", "'point_cloud'", "]", "\n", "\n", "\n", "trimesh", ".", "Trimesh", "(", "vertices", "=", "pc", ",", "faces", "=", "[", "]", ")", ".", "export", "(", "off_path", ")", "\n", "print", "(", "'Finished: {}'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.boundary_sampling.boundary_sampling": [[14, 38], ["os.path.exists", "trimesh.load", "trimesh.load.sample", "boundary_points.copy", "numpy.savez", "print", "implicit_waterproofing.implicit_waterproofing", "print", "numpy.random.randn", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.implicit_waterproofing"], ["def", "boundary_sampling", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", "+", "'/boundary_{}_samples.npz'", ".", "format", "(", "args", ".", "sigma", ")", ")", ":", "\n", "            ", "return", "\n", "\n", "", "off_path", "=", "path", "+", "'/isosurf_scaled.off'", "\n", "out_file", "=", "path", "+", "'/boundary_{}_samples.npz'", ".", "format", "(", "args", ".", "sigma", ")", "\n", "\n", "mesh", "=", "trimesh", ".", "load", "(", "off_path", ")", "\n", "points", "=", "mesh", ".", "sample", "(", "sample_num", ")", "\n", "\n", "boundary_points", "=", "points", "+", "args", ".", "sigma", "*", "np", ".", "random", ".", "randn", "(", "sample_num", ",", "3", ")", "\n", "grid_coords", "=", "boundary_points", ".", "copy", "(", ")", "\n", "grid_coords", "[", ":", ",", "0", "]", ",", "grid_coords", "[", ":", ",", "2", "]", "=", "boundary_points", "[", ":", ",", "2", "]", ",", "boundary_points", "[", ":", ",", "0", "]", "\n", "\n", "grid_coords", "=", "2", "*", "grid_coords", "\n", "\n", "occupancies", "=", "iw", ".", "implicit_waterproofing", "(", "mesh", ",", "boundary_points", ")", "[", "0", "]", "\n", "\n", "np", ".", "savez", "(", "out_file", ",", "points", "=", "boundary_points", ",", "occupancies", "=", "occupancies", ",", "grid_coords", "=", "grid_coords", ")", "\n", "print", "(", "'Finished {}'", ".", "format", "(", "path", ")", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "'Error with {}: {}'", ".", "format", "(", "path", ",", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluation.eval_mesh": [[8, 33], ["mesh_pred.sample", "pointcloud_pred.astype.astype", "mesh_gt.sample", "pointcloud_gt.astype.astype", "evaluation.eval_pointcloud", "data_processing.implicit_waterproofing.implicit_waterproofing", "data_processing.implicit_waterproofing.implicit_waterproofing", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluation.eval_pointcloud", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.implicit_waterproofing", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.implicit_waterproofing"], ["def", "eval_mesh", "(", "mesh_pred", ",", "mesh_gt", ",", "bb_min", ",", "bb_max", ",", "n_points", "=", "100000", ")", ":", "\n", "\n", "    ", "pointcloud_pred", ",", "idx", "=", "mesh_pred", ".", "sample", "(", "n_points", ",", "return_index", "=", "True", ")", "\n", "pointcloud_pred", "=", "pointcloud_pred", ".", "astype", "(", "np", ".", "float32", ")", "\n", "normals_pred", "=", "mesh_pred", ".", "face_normals", "[", "idx", "]", "\n", "\n", "pointcloud_gt", ",", "idx", "=", "mesh_gt", ".", "sample", "(", "n_points", ",", "return_index", "=", "True", ")", "\n", "pointcloud_gt", "=", "pointcloud_gt", ".", "astype", "(", "np", ".", "float32", ")", "\n", "normals_gt", "=", "mesh_gt", ".", "face_normals", "[", "idx", "]", "\n", "\n", "out_dict", "=", "eval_pointcloud", "(", "pointcloud_pred", ",", "pointcloud_gt", ",", "normals_pred", ",", "normals_gt", ")", "\n", "\n", "\n", "bb_len", "=", "bb_max", "-", "bb_min", "\n", "bb_samples", "=", "np", ".", "random", ".", "rand", "(", "n_points", "*", "10", ",", "3", ")", "*", "bb_len", "+", "bb_min", "\n", "\n", "occ_pred", "=", "implicit_waterproofing", "(", "mesh_pred", ",", "bb_samples", ")", "[", "0", "]", "\n", "occ_gt", "=", "implicit_waterproofing", "(", "mesh_gt", ",", "bb_samples", ")", "[", "0", "]", "\n", "\n", "area_union", "=", "(", "occ_pred", "|", "occ_gt", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "sum", "(", ")", "\n", "area_intersect", "=", "(", "occ_pred", "&", "occ_gt", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "sum", "(", ")", "\n", "\n", "out_dict", "[", "'iou'", "]", "=", "(", "area_intersect", "/", "area_union", ")", "\n", "\n", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluation.eval_pointcloud": [[35, 93], ["numpy.asarray", "numpy.asarray", "evaluation.distance_p2p", "completeness.mean.mean", "completeness2.mean.mean", "evaluation.distance_p2p", "accuracy.mean.mean", "accuracy2.mean.mean", "accuracy_normals.mean.mean", "completeness_normals.mean.mean"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluation.distance_p2p", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluation.distance_p2p"], ["", "def", "eval_pointcloud", "(", "pointcloud_pred", ",", "pointcloud_gt", ",", "\n", "normals_pred", "=", "None", ",", "normals_gt", "=", "None", ")", ":", "\n", "\n", "    ", "pointcloud_pred", "=", "np", ".", "asarray", "(", "pointcloud_pred", ")", "\n", "pointcloud_gt", "=", "np", ".", "asarray", "(", "pointcloud_gt", ")", "\n", "\n", "# Completeness: how far are the points of the target point cloud", "\n", "# from thre predicted point cloud", "\n", "completeness", ",", "completeness_normals", "=", "distance_p2p", "(", "\n", "pointcloud_gt", ",", "pointcloud_pred", ",", "\n", "normals_gt", ",", "normals_pred", "\n", ")", "\n", "completeness2", "=", "completeness", "**", "2", "\n", "\n", "completeness", "=", "completeness", ".", "mean", "(", ")", "\n", "completeness2", "=", "completeness2", ".", "mean", "(", ")", "\n", "\n", "\n", "# Accuracy: how far are th points of the predicted pointcloud", "\n", "# from the target pointcloud", "\n", "accuracy", ",", "accuracy_normals", "=", "distance_p2p", "(", "\n", "pointcloud_pred", ",", "pointcloud_gt", ",", "\n", "normals_pred", ",", "normals_gt", "\n", ")", "\n", "accuracy2", "=", "accuracy", "**", "2", "\n", "\n", "accuracy", "=", "accuracy", ".", "mean", "(", ")", "\n", "accuracy2", "=", "accuracy2", ".", "mean", "(", ")", "\n", "\n", "\n", "# Chamfer distance", "\n", "chamfer_l2", "=", "0.5", "*", "completeness2", "+", "0.5", "*", "accuracy2", "\n", "\n", "if", "not", "normals_pred", "is", "None", ":", "\n", "        ", "accuracy_normals", "=", "accuracy_normals", ".", "mean", "(", ")", "\n", "completeness_normals", "=", "completeness_normals", ".", "mean", "(", ")", "\n", "normals_correctness", "=", "(", "\n", "0.5", "*", "completeness_normals", "+", "0.5", "*", "accuracy_normals", "\n", ")", "\n", "", "else", ":", "\n", "        ", "accuracy_normals", "=", "np", ".", "nan", "\n", "completeness_normals", "=", "np", ".", "nan", "\n", "normals_correctness", "=", "np", ".", "nan", "\n", "\n", "\n", "", "out_dict", "=", "{", "\n", "'completeness'", ":", "completeness", ",", "\n", "'accuracy'", ":", "accuracy", ",", "\n", "'normals completeness'", ":", "completeness_normals", ",", "\n", "'normals accuracy'", ":", "accuracy_normals", ",", "\n", "'normals'", ":", "normals_correctness", ",", "\n", "'completeness2'", ":", "completeness2", ",", "\n", "'accuracy2'", ":", "accuracy2", ",", "\n", "'chamfer_l2'", ":", "chamfer_l2", ",", "\n", "'iou'", ":", "np", ".", "nan", "\n", "}", "\n", "\n", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluation.distance_p2p": [[95, 119], ["pykdtree.kdtree.KDTree", "pykdtree.kdtree.KDTree.query", "numpy.abs", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.TriangleIntersector2d.query"], ["", "def", "distance_p2p", "(", "pointcloud_pred", ",", "pointcloud_gt", ",", "\n", "normals_pred", ",", "normals_gt", ")", ":", "\n", "    ", "''' Computes minimal distances of each point in points_src to points_tgt.\n    Args:\n        points_src (numpy array): source points\n        normals_src (numpy array): source normals\n        points_tgt (numpy array): target points\n        normals_tgt (numpy array): target normals\n    '''", "\n", "kdtree", "=", "KDTree", "(", "pointcloud_gt", ")", "\n", "dist", ",", "idx", "=", "kdtree", ".", "query", "(", "pointcloud_pred", ")", "\n", "\n", "if", "normals_pred", "is", "None", ":", "\n", "        ", "return", "dist", ",", "None", "\n", "\n", "", "normals_pred", "=", "normals_pred", "/", "np", ".", "linalg", ".", "norm", "(", "normals_pred", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "normals_gt", "=", "normals_gt", "/", "np", ".", "linalg", ".", "norm", "(", "normals_gt", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "normals_dot_product", "=", "(", "normals_gt", "[", "idx", "]", "*", "normals_pred", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "# Handle normals that point into wrong direction gracefully", "\n", "# (mostly due to mehtod not caring about this in generation)", "\n", "normals_dot_product", "=", "np", ".", "abs", "(", "normals_dot_product", ")", "\n", "\n", "return", "dist", ",", "normals_dot_product", "", "", ""]], "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluate_gather.repair_nans": [[106, 123], ["pickle.load", "pickle.dump", "pickle.dump", "open", "numpy.array", "open", "open", "pkl_file[].sum", "len", "os.path.dirname", "os.path.dirname", "numpy.isnan"], "function", ["None"], ["", "def", "repair_nans", "(", "path", ")", ":", "\n", "\n", "    ", "pkl_file", "=", "pkl", ".", "load", "(", "open", "(", "path", ")", ")", "\n", "\n", "for", "key", "in", "pkl_file", ":", "\n", "\n", "        ", "arr", "=", "np", ".", "array", "(", "pkl_file", "[", "key", "]", ")", "\n", "arr", "=", "arr", "[", "~", "np", ".", "isnan", "(", "arr", ")", "]", "\n", "pkl_file", "[", "key", "]", "=", "arr", "\n", "\n", "", "eval_avg", "=", "{", "}", "\n", "\n", "for", "key", "in", "pkl_file", ":", "\n", "        ", "eval_avg", "[", "key", "]", "=", "pkl_file", "[", "key", "]", ".", "sum", "(", ")", "/", "len", "(", "pkl_file", "[", "key", "]", ")", "\n", "\n", "", "pkl", ".", "dump", "(", "pkl_file", ",", "open", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", "+", "'/eval_repaired.pkl'", ",", "'wb'", ")", ")", "\n", "pkl", ".", "dump", "(", "eval_avg", ",", "open", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", "+", "'/eval_avg_repaired.pkl'", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.MeshIntersector.__init__": [[12, 30], ["mesh.vertices[].astype", "inside_mesh.MeshIntersector.reshape().min", "inside_mesh.MeshIntersector.reshape().max", "inside_mesh.MeshIntersector.rescale", "inside_mesh.TriangleIntersector2d", "inside_mesh.MeshIntersector.reshape", "inside_mesh.MeshIntersector.reshape"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.MeshIntersector.rescale"], ["    ", "def", "__init__", "(", "self", ",", "mesh", ",", "resolution", "=", "512", ")", ":", "\n", "        ", "triangles", "=", "mesh", ".", "vertices", "[", "mesh", ".", "faces", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "n_tri", "=", "triangles", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "bbox_min", "=", "triangles", ".", "reshape", "(", "3", "*", "n_tri", ",", "3", ")", ".", "min", "(", "axis", "=", "0", ")", "\n", "self", ".", "bbox_max", "=", "triangles", ".", "reshape", "(", "3", "*", "n_tri", ",", "3", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "# Tranlate and scale it to [0.5, self.resolution - 0.5]^3", "\n", "self", ".", "scale", "=", "(", "resolution", "-", "1", ")", "/", "(", "self", ".", "bbox_max", "-", "self", ".", "bbox_min", ")", "\n", "self", ".", "translate", "=", "0.5", "-", "self", ".", "scale", "*", "self", ".", "bbox_min", "\n", "\n", "self", ".", "_triangles", "=", "triangles", "=", "self", ".", "rescale", "(", "triangles", ")", "\n", "# assert(np.allclose(triangles.reshape(-1, 3).min(0), 0.5))", "\n", "# assert(np.allclose(triangles.reshape(-1, 3).max(0), resolution - 0.5))", "\n", "\n", "triangles2d", "=", "triangles", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "self", ".", "_tri_intersector2d", "=", "TriangleIntersector2d", "(", "\n", "triangles2d", ",", "resolution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.MeshIntersector.query": [[31, 76], ["inside_mesh.MeshIntersector.rescale", "numpy.zeros", "numpy.zeros", "numpy.all", "inside_mesh.MeshIntersector._tri_intersector2d.query", "inside_mesh.MeshIntersector.compute_intersection_depth", "numpy.bincount", "numpy.bincount", "numpy.logical_xor", "len", "len", "numpy.all.any", "numpy.mod", "numpy.mod", "print"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.MeshIntersector.rescale", "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.TriangleIntersector2d.query", "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.MeshIntersector.compute_intersection_depth"], ["", "def", "query", "(", "self", ",", "points", ")", ":", "\n", "# Rescale points", "\n", "        ", "points", "=", "self", ".", "rescale", "(", "points", ")", "\n", "\n", "# placeholder result with no hits we'll fill in later", "\n", "contains", "=", "np", ".", "zeros", "(", "len", "(", "points", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "hole_points", "=", "np", ".", "zeros", "(", "len", "(", "points", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# cull points outside of the axis aligned bounding box", "\n", "# this avoids running ray tests unless points are close", "\n", "inside_aabb", "=", "np", ".", "all", "(", "\n", "(", "0", "<=", "points", ")", "&", "(", "points", "<=", "self", ".", "resolution", ")", ",", "axis", "=", "1", ")", "\n", "if", "not", "inside_aabb", ".", "any", "(", ")", ":", "\n", "            ", "return", "contains", ",", "hole_points", "\n", "\n", "# Only consider points inside bounding box", "\n", "", "mask", "=", "inside_aabb", "\n", "points", "=", "points", "[", "mask", "]", "\n", "\n", "# Compute intersection depth and check order", "\n", "points_indices", ",", "tri_indices", "=", "self", ".", "_tri_intersector2d", ".", "query", "(", "points", "[", ":", ",", ":", "2", "]", ")", "\n", "\n", "triangles_intersect", "=", "self", ".", "_triangles", "[", "tri_indices", "]", "\n", "points_intersect", "=", "points", "[", "points_indices", "]", "\n", "\n", "depth_intersect", ",", "abs_n_2", "=", "self", ".", "compute_intersection_depth", "(", "\n", "points_intersect", ",", "triangles_intersect", ")", "\n", "\n", "# Count number of intersections in both directions", "\n", "smaller_depth", "=", "depth_intersect", ">=", "points_intersect", "[", ":", ",", "2", "]", "*", "abs_n_2", "\n", "bigger_depth", "=", "depth_intersect", "<", "points_intersect", "[", ":", ",", "2", "]", "*", "abs_n_2", "\n", "points_indices_0", "=", "points_indices", "[", "smaller_depth", "]", "\n", "points_indices_1", "=", "points_indices", "[", "bigger_depth", "]", "\n", "\n", "nintersect0", "=", "np", ".", "bincount", "(", "points_indices_0", ",", "minlength", "=", "points", ".", "shape", "[", "0", "]", ")", "\n", "nintersect1", "=", "np", ".", "bincount", "(", "points_indices_1", ",", "minlength", "=", "points", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Check if point contained in mesh", "\n", "contains1", "=", "(", "np", ".", "mod", "(", "nintersect0", ",", "2", ")", "==", "1", ")", "\n", "contains2", "=", "(", "np", ".", "mod", "(", "nintersect1", ",", "2", ")", "==", "1", ")", "\n", "if", "(", "contains1", "!=", "contains2", ")", ".", "any", "(", ")", ":", "\n", "            ", "print", "(", "'Warning: contains1 != contains2 for some points.'", ")", "\n", "", "contains", "[", "mask", "]", "=", "(", "contains1", "&", "contains2", ")", "\n", "hole_points", "[", "mask", "]", "=", "np", ".", "logical_xor", "(", "contains1", ",", "contains2", ")", "\n", "return", "contains", ",", "hole_points", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.MeshIntersector.compute_intersection_depth": [[77, 109], ["numpy.cross", "numpy.sum", "numpy.sign", "numpy.abs", "numpy.full"], "methods", ["None"], ["", "def", "compute_intersection_depth", "(", "self", ",", "points", ",", "triangles", ")", ":", "\n", "        ", "t1", "=", "triangles", "[", ":", ",", "0", ",", ":", "]", "\n", "t2", "=", "triangles", "[", ":", ",", "1", ",", ":", "]", "\n", "t3", "=", "triangles", "[", ":", ",", "2", ",", ":", "]", "\n", "\n", "v1", "=", "t3", "-", "t1", "\n", "v2", "=", "t2", "-", "t1", "\n", "# v1 = v1 / np.linalg.norm(v1, axis=-1, keepdims=True)", "\n", "# v2 = v2 / np.linalg.norm(v2, axis=-1, keepdims=True)", "\n", "\n", "normals", "=", "np", ".", "cross", "(", "v1", ",", "v2", ")", "\n", "alpha", "=", "np", ".", "sum", "(", "normals", "[", ":", ",", ":", "2", "]", "*", "(", "t1", "[", ":", ",", ":", "2", "]", "-", "points", "[", ":", ",", ":", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "n_2", "=", "normals", "[", ":", ",", "2", "]", "\n", "t1_2", "=", "t1", "[", ":", ",", "2", "]", "\n", "s_n_2", "=", "np", ".", "sign", "(", "n_2", ")", "\n", "abs_n_2", "=", "np", ".", "abs", "(", "n_2", ")", "\n", "\n", "mask", "=", "(", "abs_n_2", "!=", "0", ")", "\n", "\n", "depth_intersect", "=", "np", ".", "full", "(", "points", ".", "shape", "[", "0", "]", ",", "np", ".", "nan", ")", "\n", "depth_intersect", "[", "mask", "]", "=", "t1_2", "[", "mask", "]", "*", "abs_n_2", "[", "mask", "]", "+", "alpha", "[", "mask", "]", "*", "s_n_2", "[", "mask", "]", "\n", "\n", "# Test the depth:", "\n", "# TODO: remove and put into tests", "\n", "# points_new = np.concatenate([points[:, :2], depth_intersect[:, None]], axis=1)", "\n", "# alpha = (normals * t1).sum(-1)", "\n", "# mask = (depth_intersect == depth_intersect)", "\n", "# assert(np.allclose((points_new[mask] * normals[mask]).sum(-1),", "\n", "#                    alpha[mask]))", "\n", "return", "depth_intersect", ",", "abs_n_2", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.MeshIntersector.rescale": [[110, 113], ["None"], "methods", ["None"], ["", "def", "rescale", "(", "self", ",", "array", ")", ":", "\n", "        ", "array", "=", "self", ".", "scale", "*", "array", "+", "self", ".", "translate", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.TriangleIntersector2d.__init__": [[116, 119], ["triangle_hash.TriangleHash"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "triangles", ",", "resolution", "=", "128", ")", ":", "\n", "        ", "self", ".", "triangles", "=", "triangles", "\n", "self", ".", "tri_hash", "=", "_TriangleHash", "(", "triangles", ",", "resolution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.TriangleIntersector2d.query": [[120, 130], ["inside_mesh.TriangleIntersector2d.tri_hash.query", "numpy.array", "numpy.array", "inside_mesh.TriangleIntersector2d.check_triangles"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.TriangleIntersector2d.query", "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.TriangleIntersector2d.check_triangles"], ["", "def", "query", "(", "self", ",", "points", ")", ":", "\n", "        ", "point_indices", ",", "tri_indices", "=", "self", ".", "tri_hash", ".", "query", "(", "points", ")", "\n", "point_indices", "=", "np", ".", "array", "(", "point_indices", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "tri_indices", "=", "np", ".", "array", "(", "tri_indices", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "points", "=", "points", "[", "point_indices", "]", "\n", "triangles", "=", "self", ".", "triangles", "[", "tri_indices", "]", "\n", "mask", "=", "self", ".", "check_triangles", "(", "points", ",", "triangles", ")", "\n", "point_indices", "=", "point_indices", "[", "mask", "]", "\n", "tri_indices", "=", "tri_indices", "[", "mask", "]", "\n", "return", "point_indices", ",", "tri_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.TriangleIntersector2d.check_triangles": [[131, 156], ["numpy.zeros", "A.transpose.transpose.transpose", "numpy.sign", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "check_triangles", "(", "self", ",", "points", ",", "triangles", ")", ":", "\n", "        ", "contains", "=", "np", ".", "zeros", "(", "points", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "A", "=", "triangles", "[", ":", ",", ":", "2", "]", "-", "triangles", "[", ":", ",", "2", ":", "]", "\n", "A", "=", "A", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "y", "=", "points", "-", "triangles", "[", ":", ",", "2", "]", "\n", "\n", "detA", "=", "A", "[", ":", ",", "0", ",", "0", "]", "*", "A", "[", ":", ",", "1", ",", "1", "]", "-", "A", "[", ":", ",", "0", ",", "1", "]", "*", "A", "[", ":", ",", "1", ",", "0", "]", "\n", "\n", "mask", "=", "(", "np", ".", "abs", "(", "detA", ")", "!=", "0.", ")", "\n", "A", "=", "A", "[", "mask", "]", "\n", "y", "=", "y", "[", "mask", "]", "\n", "detA", "=", "detA", "[", "mask", "]", "\n", "\n", "s_detA", "=", "np", ".", "sign", "(", "detA", ")", "\n", "abs_detA", "=", "np", ".", "abs", "(", "detA", ")", "\n", "\n", "u", "=", "(", "A", "[", ":", ",", "1", ",", "1", "]", "*", "y", "[", ":", ",", "0", "]", "-", "A", "[", ":", ",", "0", ",", "1", "]", "*", "y", "[", ":", ",", "1", "]", ")", "*", "s_detA", "\n", "v", "=", "(", "-", "A", "[", ":", ",", "1", ",", "0", "]", "*", "y", "[", ":", ",", "0", "]", "+", "A", "[", ":", ",", "0", ",", "0", "]", "*", "y", "[", ":", ",", "1", "]", ")", "*", "s_detA", "\n", "\n", "sum_uv", "=", "u", "+", "v", "\n", "contains", "[", "mask", "]", "=", "(", "\n", "(", "0", "<", "u", ")", "&", "(", "u", "<", "abs_detA", ")", "&", "(", "0", "<", "v", ")", "&", "(", "v", "<", "abs_detA", ")", "\n", "&", "(", "0", "<", "sum_uv", ")", "&", "(", "sum_uv", "<", "abs_detA", ")", "\n", ")", "\n", "return", "contains", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.check_mesh_contains": [[5, 9], ["inside_mesh.MeshIntersector", "inside_mesh.MeshIntersector.query"], "function", ["home.repos.pwc.inspect_result.jchibane_if-net.libmesh.inside_mesh.TriangleIntersector2d.query"], ["def", "check_mesh_contains", "(", "mesh", ",", "points", ",", "hash_resolution", "=", "512", ")", ":", "\n", "    ", "intersector", "=", "MeshIntersector", "(", "mesh", ",", "hash_resolution", ")", "\n", "contains", ",", "hole_points", "=", "intersector", ".", "query", "(", "points", ")", "\n", "return", "contains", ",", "hole_points", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.local_model.ShapeNet32Vox.__init__": [[16, 50], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "displacments.append", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "displacments.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "ShapeNet32Vox", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv3d", "(", "1", ",", "32", ",", "3", ",", "padding", "=", "1", ")", "# out: 32", "\n", "self", ".", "conv_1_1", "=", "nn", ".", "Conv3d", "(", "32", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "# out: 32", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "# out: 16", "\n", "self", ".", "conv_2_1", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "# out: 16", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "# out: 8", "\n", "self", ".", "conv_3_1", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "# out: 8", "\n", "\n", "feature_size", "=", "(", "1", "+", "64", "+", "128", "+", "128", ")", "*", "7", "\n", "self", ".", "fc_0", "=", "nn", ".", "Conv1d", "(", "feature_size", ",", "hidden_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "fc_1", "=", "nn", ".", "Conv1d", "(", "hidden_dim", "*", "2", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_2", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "1", ",", "1", ")", "\n", "self", ".", "actvn", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "2", ")", "\n", "\n", "self", ".", "conv1_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "conv2_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "conv3_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "\n", "\n", "displacment", "=", "0.035", "\n", "displacments", "=", "[", "]", "\n", "displacments", ".", "append", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "for", "x", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "y", "in", "[", "-", "1", ",", "1", "]", ":", "\n", "                ", "input", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "input", "[", "x", "]", "=", "y", "*", "displacment", "\n", "displacments", ".", "append", "(", "input", ")", "\n", "\n", "", "", "self", ".", "displacments", "=", "torch", ".", "Tensor", "(", "displacments", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.local_model.ShapeNet32Vox.forward": [[51, 92], ["x.unsqueeze.unsqueeze.unsqueeze", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNet32Vox.actvn", "local_model.ShapeNet32Vox.actvn", "local_model.ShapeNet32Vox.conv1_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNet32Vox.maxpool", "local_model.ShapeNet32Vox.actvn", "local_model.ShapeNet32Vox.actvn", "local_model.ShapeNet32Vox.conv2_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNet32Vox.maxpool", "local_model.ShapeNet32Vox.actvn", "local_model.ShapeNet32Vox.actvn", "local_model.ShapeNet32Vox.conv3_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "local_model.ShapeNet32Vox.actvn", "local_model.ShapeNet32Vox.actvn", "local_model.ShapeNet32Vox.actvn", "local_model.ShapeNet32Vox.fc_out", "local_model.ShapeNet32Vox.squeeze", "local_model.ShapeNet32Vox.conv_1", "local_model.ShapeNet32Vox.conv_1_1", "local_model.ShapeNet32Vox.conv_2", "local_model.ShapeNet32Vox.conv_2_1", "local_model.ShapeNet32Vox.conv_3", "local_model.ShapeNet32Vox.conv_3_1", "local_model.ShapeNet32Vox.fc_0", "local_model.ShapeNet32Vox.fc_1", "local_model.ShapeNet32Vox.fc_2", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "p", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "p_features", "=", "p", ".", "transpose", "(", "1", ",", "-", "1", ")", "\n", "p", "=", "p", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "torch", ".", "cat", "(", "[", "p", "+", "d", "for", "d", "in", "self", ".", "displacments", "]", ",", "dim", "=", "2", ")", "# (B,1,7,num_samples,3)", "\n", "feature_0", "=", "F", ".", "grid_sample", "(", "x", ",", "p", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_1", "(", "x", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_1_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv1_1_bn", "(", "net", ")", "\n", "feature_1", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_2", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_2_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv2_1_bn", "(", "net", ")", "\n", "feature_2", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ")", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_3", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_3_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv3_1_bn", "(", "net", ")", "\n", "feature_3", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ")", "\n", "\n", "# here every channel corresponse to one feature.", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "(", "feature_0", ",", "feature_1", ",", "feature_2", ",", "feature_3", ")", ",", "\n", "dim", "=", "1", ")", "# (B, features, 1,7,sample_num)", "\n", "shape", "=", "features", ".", "shape", "\n", "features", "=", "torch", ".", "reshape", "(", "features", ",", "\n", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "*", "shape", "[", "3", "]", ",", "shape", "[", "4", "]", ")", ")", "# (B, featues_per_sample, samples_num)", "\n", "#features = torch.cat((features, p_features), dim=1)  # (B, featue_size, samples_num)", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_0", "(", "features", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_2", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "fc_out", "(", "net", ")", "\n", "out", "=", "net", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.local_model.ShapeNet128Vox.__init__": [[95, 134], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "displacments.append", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "displacments.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "ShapeNet128Vox", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# accepts 128**3 res input", "\n", "self", ".", "conv_in", "=", "nn", ".", "Conv3d", "(", "1", ",", "16", ",", "3", ",", "padding", "=", "1", ")", "# out: 128", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv3d", "(", "16", ",", "32", ",", "3", ",", "padding", "=", "1", ")", "# out: 64", "\n", "self", ".", "conv_0_1", "=", "nn", ".", "Conv3d", "(", "32", ",", "32", ",", "3", ",", "padding", "=", "1", ")", "# out: 64", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv3d", "(", "32", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "# out: 32", "\n", "self", ".", "conv_1_1", "=", "nn", ".", "Conv3d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "# out: 32", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "# out: 16", "\n", "self", ".", "conv_2_1", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "# out: 16", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "# out: 8", "\n", "self", ".", "conv_3_1", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "# out: 8", "\n", "\n", "feature_size", "=", "(", "1", "+", "16", "+", "32", "+", "64", "+", "128", "+", "128", ")", "*", "7", "\n", "self", ".", "fc_0", "=", "nn", ".", "Conv1d", "(", "feature_size", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_1", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_2", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "1", ",", "1", ")", "\n", "self", ".", "actvn", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "2", ")", "\n", "\n", "self", ".", "conv_in_bn", "=", "nn", ".", "BatchNorm3d", "(", "16", ")", "\n", "self", ".", "conv0_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "32", ")", "\n", "self", ".", "conv1_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "conv2_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "conv3_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "\n", "\n", "displacment", "=", "0.0722", "\n", "displacments", "=", "[", "]", "\n", "displacments", ".", "append", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "for", "x", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "y", "in", "[", "-", "1", ",", "1", "]", ":", "\n", "                ", "input", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "input", "[", "x", "]", "=", "y", "*", "displacment", "\n", "displacments", ".", "append", "(", "input", ")", "\n", "\n", "", "", "self", ".", "displacments", "=", "torch", ".", "Tensor", "(", "displacments", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.local_model.ShapeNet128Vox.forward": [[135, 187], ["x.unsqueeze.unsqueeze.unsqueeze", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.conv_in_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNet128Vox.maxpool", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.conv0_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNet128Vox.maxpool", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.conv1_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNet128Vox.maxpool", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.conv2_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNet128Vox.maxpool", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.conv3_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.actvn", "local_model.ShapeNet128Vox.fc_out", "local_model.ShapeNet128Vox.squeeze", "local_model.ShapeNet128Vox.conv_in", "local_model.ShapeNet128Vox.conv_0", "local_model.ShapeNet128Vox.conv_0_1", "local_model.ShapeNet128Vox.conv_1", "local_model.ShapeNet128Vox.conv_1_1", "local_model.ShapeNet128Vox.conv_2", "local_model.ShapeNet128Vox.conv_2_1", "local_model.ShapeNet128Vox.conv_3", "local_model.ShapeNet128Vox.conv_3_1", "local_model.ShapeNet128Vox.fc_0", "local_model.ShapeNet128Vox.fc_1", "local_model.ShapeNet128Vox.fc_2", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "p", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "p_features", "=", "p", ".", "transpose", "(", "1", ",", "-", "1", ")", "\n", "p", "=", "p", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "torch", ".", "cat", "(", "[", "p", "+", "d", "for", "d", "in", "self", ".", "displacments", "]", ",", "dim", "=", "2", ")", "# (B,1,7,num_samples,3)", "\n", "feature_0", "=", "F", ".", "grid_sample", "(", "x", ",", "p", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_in", "(", "x", ")", ")", "\n", "net", "=", "self", ".", "conv_in_bn", "(", "net", ")", "\n", "feature_1", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_0", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_0_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv0_1_bn", "(", "net", ")", "\n", "feature_2", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_1_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv1_1_bn", "(", "net", ")", "\n", "feature_3", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_2", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_2_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv2_1_bn", "(", "net", ")", "\n", "feature_4", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ")", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_3", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_3_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv3_1_bn", "(", "net", ")", "\n", "feature_5", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ")", "\n", "\n", "# here every channel corresponse to one feature.", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "(", "feature_0", ",", "feature_1", ",", "feature_2", ",", "feature_3", ",", "feature_4", ",", "feature_5", ")", ",", "\n", "dim", "=", "1", ")", "# (B, features, 1,7,sample_num)", "\n", "shape", "=", "features", ".", "shape", "\n", "features", "=", "torch", ".", "reshape", "(", "features", ",", "\n", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "*", "shape", "[", "3", "]", ",", "shape", "[", "4", "]", ")", ")", "# (B, featues_per_sample, samples_num)", "\n", "#features = torch.cat((features, p_features), dim=1)  # (B, featue_size, samples_num)", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_0", "(", "features", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_2", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "fc_out", "(", "net", ")", "\n", "out", "=", "net", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.local_model.ShapeNetPoints.__init__": [[196, 235], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "displacments.append", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "displacments.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "ShapeNetPoints", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 128**3 res input", "\n", "self", ".", "conv_in", "=", "nn", ".", "Conv3d", "(", "1", ",", "16", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv3d", "(", "16", ",", "32", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "\n", "self", ".", "conv_0_1", "=", "nn", ".", "Conv3d", "(", "32", ",", "32", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv3d", "(", "32", ",", "64", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "\n", "self", ".", "conv_1_1", "=", "nn", ".", "Conv3d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "\n", "self", ".", "conv_2_1", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "\n", "self", ".", "conv_3_1", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "feature_size", "=", "(", "1", "+", "16", "+", "32", "+", "64", "+", "128", "+", "128", ")", "*", "7", "\n", "self", ".", "fc_0", "=", "nn", ".", "Conv1d", "(", "feature_size", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_1", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_2", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "1", ",", "1", ")", "\n", "self", ".", "actvn", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "2", ")", "\n", "\n", "self", ".", "conv_in_bn", "=", "nn", ".", "BatchNorm3d", "(", "16", ")", "\n", "self", ".", "conv0_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "32", ")", "\n", "self", ".", "conv1_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "conv2_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "conv3_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "\n", "\n", "displacment", "=", "0.0722", "\n", "displacments", "=", "[", "]", "\n", "displacments", ".", "append", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "for", "x", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "y", "in", "[", "-", "1", ",", "1", "]", ":", "\n", "                ", "input", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "input", "[", "x", "]", "=", "y", "*", "displacment", "\n", "displacments", ".", "append", "(", "input", ")", "\n", "\n", "", "", "self", ".", "displacments", "=", "torch", ".", "Tensor", "(", "displacments", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.local_model.ShapeNetPoints.forward": [[236, 288], ["x.unsqueeze.unsqueeze.unsqueeze", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.conv_in_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNetPoints.maxpool", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.conv0_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNetPoints.maxpool", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.conv1_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNetPoints.maxpool", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.conv2_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.ShapeNetPoints.maxpool", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.conv3_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.actvn", "local_model.ShapeNetPoints.fc_out", "local_model.ShapeNetPoints.squeeze", "local_model.ShapeNetPoints.conv_in", "local_model.ShapeNetPoints.conv_0", "local_model.ShapeNetPoints.conv_0_1", "local_model.ShapeNetPoints.conv_1", "local_model.ShapeNetPoints.conv_1_1", "local_model.ShapeNetPoints.conv_2", "local_model.ShapeNetPoints.conv_2_1", "local_model.ShapeNetPoints.conv_3", "local_model.ShapeNetPoints.conv_3_1", "local_model.ShapeNetPoints.fc_0", "local_model.ShapeNetPoints.fc_1", "local_model.ShapeNetPoints.fc_2", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "p", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "p_features", "=", "p", ".", "transpose", "(", "1", ",", "-", "1", ")", "\n", "p", "=", "p", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "torch", ".", "cat", "(", "[", "p", "+", "d", "for", "d", "in", "self", ".", "displacments", "]", ",", "dim", "=", "2", ")", "# (B,1,7,num_samples,3)", "\n", "feature_0", "=", "F", ".", "grid_sample", "(", "x", ",", "p", ",", "padding_mode", "=", "'border'", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_in", "(", "x", ")", ")", "\n", "net", "=", "self", ".", "conv_in_bn", "(", "net", ")", "\n", "feature_1", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_0", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_0_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv0_1_bn", "(", "net", ")", "\n", "feature_2", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_1_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv1_1_bn", "(", "net", ")", "\n", "feature_3", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "# out : (B,C (of x), 1,1,sample_num)", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_2", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_2_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv2_1_bn", "(", "net", ")", "\n", "feature_4", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_3", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_3_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv3_1_bn", "(", "net", ")", "\n", "feature_5", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "# here every channel corresponds to one feature.", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "(", "feature_0", ",", "feature_1", ",", "feature_2", ",", "feature_3", ",", "feature_4", ",", "feature_5", ")", ",", "\n", "dim", "=", "1", ")", "# (B, features, 1,7,sample_num)", "\n", "shape", "=", "features", ".", "shape", "\n", "features", "=", "torch", ".", "reshape", "(", "features", ",", "\n", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "*", "shape", "[", "3", "]", ",", "shape", "[", "4", "]", ")", ")", "# (B, featues_per_sample, samples_num)", "\n", "#features = torch.cat((features, p_features), dim=1)  # (B, featue_size, samples_num)", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_0", "(", "features", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_2", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "fc_out", "(", "net", ")", "\n", "out", "=", "net", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.local_model.SVR.__init__": [[298, 340], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "displacments.append", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "displacments.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "SVR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_in", "=", "nn", ".", "Conv3d", "(", "1", ",", "16", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 256 ->m.p. 128", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv3d", "(", "16", ",", "32", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 128", "\n", "self", ".", "conv_0_1", "=", "nn", ".", "Conv3d", "(", "32", ",", "32", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 128 ->m.p. 64", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv3d", "(", "32", ",", "64", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 64", "\n", "self", ".", "conv_1_1", "=", "nn", ".", "Conv3d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 64 -> mp 32", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 32", "\n", "self", ".", "conv_2_1", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 32 -> mp 16", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 16", "\n", "self", ".", "conv_3_1", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 16 -> mp 8", "\n", "self", ".", "conv_4", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 8", "\n", "self", ".", "conv_4_1", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "padding_mode", "=", "'border'", ")", "# out: 8", "\n", "\n", "feature_size", "=", "(", "1", "+", "16", "+", "32", "+", "64", "+", "128", "+", "128", "+", "128", ")", "*", "7", "+", "3", "\n", "self", ".", "fc_0", "=", "nn", ".", "Conv1d", "(", "feature_size", ",", "hidden_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "fc_1", "=", "nn", ".", "Conv1d", "(", "hidden_dim", "*", "2", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_2", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "1", ",", "1", ")", "\n", "self", ".", "actvn", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "2", ")", "\n", "\n", "self", ".", "conv_in_bn", "=", "nn", ".", "BatchNorm3d", "(", "16", ")", "\n", "self", ".", "conv0_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "32", ")", "\n", "self", ".", "conv1_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "conv2_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "conv3_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "conv4_1_bn", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "\n", "\n", "displacment", "=", "0.0722", "\n", "displacments", "=", "[", "]", "\n", "displacments", ".", "append", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "for", "x", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "y", "in", "[", "-", "1", ",", "1", "]", ":", "\n", "                ", "input", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "input", "[", "x", "]", "=", "y", "*", "displacment", "\n", "displacments", ".", "append", "(", "input", ")", "\n", "\n", "", "", "self", ".", "displacments", "=", "torch", ".", "Tensor", "(", "displacments", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.local_model.SVR.forward": [[341, 399], ["x.unsqueeze.unsqueeze.unsqueeze", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.SVR.actvn", "local_model.SVR.conv_in_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.SVR.maxpool", "local_model.SVR.actvn", "local_model.SVR.actvn", "local_model.SVR.conv0_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.SVR.maxpool", "local_model.SVR.actvn", "local_model.SVR.actvn", "local_model.SVR.conv1_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.SVR.maxpool", "local_model.SVR.actvn", "local_model.SVR.actvn", "local_model.SVR.conv2_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.SVR.maxpool", "local_model.SVR.actvn", "local_model.SVR.actvn", "local_model.SVR.conv3_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "local_model.SVR.maxpool", "local_model.SVR.actvn", "local_model.SVR.actvn", "local_model.SVR.conv4_1_bn", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "local_model.SVR.actvn", "local_model.SVR.actvn", "local_model.SVR.actvn", "local_model.SVR.fc_out", "local_model.SVR.squeeze", "local_model.SVR.conv_in", "local_model.SVR.conv_0", "local_model.SVR.conv_0_1", "local_model.SVR.conv_1", "local_model.SVR.conv_1_1", "local_model.SVR.conv_2", "local_model.SVR.conv_2_1", "local_model.SVR.conv_3", "local_model.SVR.conv_3_1", "local_model.SVR.conv_4", "local_model.SVR.conv_4_1", "local_model.SVR.fc_0", "local_model.SVR.fc_1", "local_model.SVR.fc_2", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "p", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "p_features", "=", "p", ".", "transpose", "(", "1", ",", "-", "1", ")", "\n", "p", "=", "p", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "torch", ".", "cat", "(", "[", "p", "+", "d", "for", "d", "in", "self", ".", "displacments", "]", ",", "dim", "=", "2", ")", "\n", "feature_0", "=", "F", ".", "grid_sample", "(", "x", ",", "p", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_in", "(", "x", ")", ")", "\n", "net", "=", "self", ".", "conv_in_bn", "(", "net", ")", "\n", "feature_1", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "#out 128", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_0", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_0_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv0_1_bn", "(", "net", ")", "\n", "feature_2", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "#out 64", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_1_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv1_1_bn", "(", "net", ")", "\n", "feature_3", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_2", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_2_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv2_1_bn", "(", "net", ")", "\n", "feature_4", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_3", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_3_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv3_1_bn", "(", "net", ")", "\n", "feature_5", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "\n", "net", "=", "self", ".", "maxpool", "(", "net", ")", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_4", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "conv_4_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "conv4_1_bn", "(", "net", ")", "\n", "feature_6", "=", "F", ".", "grid_sample", "(", "net", ",", "p", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "# here every channel corresponse to one feature.", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "(", "feature_0", ",", "feature_1", ",", "feature_2", ",", "feature_3", ",", "feature_4", ",", "feature_5", ",", "feature_6", ")", ",", "\n", "dim", "=", "1", ")", "# (B, features, 1,7,sample_num)", "\n", "shape", "=", "features", ".", "shape", "\n", "features", "=", "torch", ".", "reshape", "(", "features", ",", "\n", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "*", "shape", "[", "3", "]", ",", "shape", "[", "4", "]", ")", ")", "# (B, featues_per_sample, samples_num)", "\n", "features", "=", "torch", ".", "cat", "(", "(", "features", ",", "p_features", ")", ",", "dim", "=", "1", ")", "# (B, featue_size, samples_num)", "\n", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_0", "(", "features", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_1", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "actvn", "(", "self", ".", "fc_2", "(", "net", ")", ")", "\n", "net", "=", "self", ".", "fc_out", "(", "net", ")", "\n", "out", "=", "net", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.jchibane_if-net.models.generation.Generator.__init__": [[10, 37], ["torch.device", "model.to", "generation.Generator.model.eval", "generation.Generator.load_checkpoint", "data_processing.create_grid_points_from_bounds", "torch.from_numpy().to", "torch.reshape().to", "torch.split", "os.path.dirname", "grid_points[].copy", "torch.from_numpy", "torch.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluate.eval", "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.load_checkpoint", "home.repos.pwc.inspect_result.jchibane_if-net.data_processing.implicit_waterproofing.create_grid_points_from_bounds"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "threshold", ",", "exp_name", ",", "checkpoint", "=", "None", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ",", "resolution", "=", "16", ",", "batch_points", "=", "1000000", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "checkpoint_path", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "+", "'/../experiments/{}/checkpoints/'", ".", "format", "(", "exp_name", ")", "\n", "self", ".", "load_checkpoint", "(", "checkpoint", ")", "\n", "self", ".", "batch_points", "=", "batch_points", "\n", "\n", "self", ".", "min", "=", "-", "0.5", "\n", "self", ".", "max", "=", "0.5", "\n", "\n", "\n", "grid_points", "=", "iw", ".", "create_grid_points_from_bounds", "(", "self", ".", "min", ",", "self", ".", "max", ",", "self", ".", "resolution", ")", "\n", "grid_points", "[", ":", ",", "0", "]", ",", "grid_points", "[", ":", ",", "2", "]", "=", "grid_points", "[", ":", ",", "2", "]", ",", "grid_points", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "\n", "a", "=", "self", ".", "max", "+", "self", ".", "min", "\n", "b", "=", "self", ".", "max", "-", "self", ".", "min", "\n", "\n", "grid_coords", "=", "2", "*", "grid_points", "-", "a", "\n", "grid_coords", "=", "grid_coords", "/", "b", "\n", "\n", "grid_coords", "=", "torch", ".", "from_numpy", "(", "grid_coords", ")", ".", "to", "(", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "grid_coords", "=", "torch", ".", "reshape", "(", "grid_coords", ",", "(", "1", ",", "len", "(", "grid_points", ")", ",", "3", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "grid_points_split", "=", "torch", ".", "split", "(", "grid_coords", ",", "self", ".", "batch_points", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.generation.Generator.generate_mesh": [[39, 72], ["data[].to", "torch.cat", "generation.Generator.numpy", "numpy.reshape", "numpy.pad", "mcubes.marching_cubes", "numpy.multiply", "trimesh.Trimesh", "logits_list.append", "generation.Generator.numpy", "numpy.log", "numpy.log", "torch.no_grad", "generation.Generator.model", "generation.Generator.squeeze().detach().cpu", "generation.Generator.squeeze().detach", "generation.Generator.squeeze"], "methods", ["None"], ["", "def", "generate_mesh", "(", "self", ",", "data", ")", ":", "\n", "\n", "\n", "        ", "inputs", "=", "data", "[", "'inputs'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "\n", "logits_list", "=", "[", "]", "\n", "for", "points", "in", "self", ".", "grid_points_split", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "model", "(", "points", ",", "inputs", ")", "\n", "", "logits_list", ".", "append", "(", "logits", ".", "squeeze", "(", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "logits", "=", "torch", ".", "cat", "(", "logits_list", ",", "dim", "=", "0", ")", "\n", "\n", "return", "logits", ".", "numpy", "(", ")", "\n", "logits", "=", "np", ".", "reshape", "(", "logits", ".", "numpy", "(", ")", ",", "(", "self", ".", "resolution", ",", ")", "*", "3", ")", "\n", "\n", "#padding to be able to retrieve object close to bounding box bondary", "\n", "logits", "=", "np", ".", "pad", "(", "logits", ",", "(", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "threshold", "=", "np", ".", "log", "(", "self", ".", "threshold", ")", "-", "np", ".", "log", "(", "1.", "-", "self", ".", "threshold", ")", "\n", "vertices", ",", "triangles", "=", "mcubes", ".", "marching_cubes", "(", "\n", "logits", ",", "threshold", ")", "\n", "\n", "#remove translation due to padding", "\n", "vertices", "-=", "1", "\n", "\n", "#rescale to original scale", "\n", "step", "=", "(", "self", ".", "max", "-", "self", ".", "min", ")", "/", "(", "self", ".", "resolution", "-", "1", ")", "\n", "vertices", "=", "np", ".", "multiply", "(", "vertices", ",", "step", ")", "\n", "vertices", "+=", "[", "self", ".", "min", ",", "self", ".", "min", ",", "self", ".", "min", "]", "\n", "\n", "mesh", "=", "trimesh", ".", "Trimesh", "(", "vertices", ",", "triangles", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.generation.Generator.mesh_from_logits": [[73, 91], ["numpy.reshape", "numpy.pad", "mcubes.marching_cubes", "numpy.multiply", "trimesh.Trimesh", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "mesh_from_logits", "(", "self", ",", "logits", ")", ":", "\n", "        ", "logits", "=", "np", ".", "reshape", "(", "logits", ",", "(", "self", ".", "resolution", ",", ")", "*", "3", ")", "\n", "\n", "# padding to ba able to retrieve object close to bounding box bondary", "\n", "logits", "=", "np", ".", "pad", "(", "logits", ",", "(", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "threshold", "=", "np", ".", "log", "(", "self", ".", "threshold", ")", "-", "np", ".", "log", "(", "1.", "-", "self", ".", "threshold", ")", "\n", "vertices", ",", "triangles", "=", "mcubes", ".", "marching_cubes", "(", "\n", "logits", ",", "threshold", ")", "\n", "\n", "# remove translation due to padding", "\n", "vertices", "-=", "1", "\n", "\n", "# rescale to original scale", "\n", "step", "=", "(", "self", ".", "max", "-", "self", ".", "min", ")", "/", "(", "self", ".", "resolution", "-", "1", ")", "\n", "vertices", "=", "np", ".", "multiply", "(", "vertices", ",", "step", ")", "\n", "vertices", "+=", "[", "self", ".", "min", ",", "self", ".", "min", ",", "self", ".", "min", "]", "\n", "\n", "return", "trimesh", ".", "Trimesh", "(", "vertices", ",", "triangles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.generation.Generator.load_checkpoint": [[92, 107], ["print", "torch.load", "generation.Generator.model.load_state_dict", "glob.glob.glob", "numpy.array", "numpy.sort", "len", "print", "os.path.splitext", "os.path.basename"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "if", "checkpoint", "is", "None", ":", "\n", "            ", "checkpoints", "=", "glob", "(", "self", ".", "checkpoint_path", "+", "'/*'", ")", "\n", "if", "len", "(", "checkpoints", ")", "==", "0", ":", "\n", "                ", "print", "(", "'No checkpoints found at {}'", ".", "format", "(", "self", ".", "checkpoint_path", ")", ")", "\n", "\n", "", "checkpoints", "=", "[", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "[", "0", "]", "[", "17", ":", "]", "for", "path", "in", "checkpoints", "]", "\n", "checkpoints", "=", "np", ".", "array", "(", "checkpoints", ",", "dtype", "=", "int", ")", "\n", "checkpoints", "=", "np", ".", "sort", "(", "checkpoints", ")", "\n", "path", "=", "self", ".", "checkpoint_path", "+", "'checkpoint_epoch_{}.tar'", ".", "format", "(", "checkpoints", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "path", "=", "self", ".", "checkpoint_path", "+", "'checkpoint_epoch_{}.tar'", ".", "format", "(", "checkpoint", ")", "\n", "", "print", "(", "'Loaded checkpoint from: {}'", ".", "format", "(", "path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.__init__": [[15, 34], ["model.to", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.Adam", "torch.Adam", "torch.Adadelta", "torch.Adadelta", "torch.RMSprop", "torch.RMSprop", "os.path.dirname", "os.path.exists", "print", "os.makedirs", "training.Trainer.model.parameters", "training.Trainer.model.parameters", "training.Trainer.model.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "device", ",", "train_dataset", ",", "val_dataset", ",", "exp_name", ",", "optimizer", "=", "'Adam'", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "if", "optimizer", "==", "'Adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ")", "\n", "", "if", "optimizer", "==", "'Adadelta'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adadelta", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "if", "optimizer", "==", "'RMSprop'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "RMSprop", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "momentum", "=", "0.9", ")", "\n", "\n", "", "self", ".", "train_dataset", "=", "train_dataset", "\n", "self", ".", "val_dataset", "=", "val_dataset", "\n", "self", ".", "exp_path", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "+", "'/../experiments/{}/'", ".", "format", "(", "exp_name", ")", "\n", "self", ".", "checkpoint_path", "=", "self", ".", "exp_path", "+", "'checkpoints/'", ".", "format", "(", "exp_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "checkpoint_path", ")", ":", "\n", "            ", "print", "(", "self", ".", "checkpoint_path", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "checkpoint_path", ")", "\n", "", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "exp_path", "+", "'summary'", ".", "format", "(", "exp_name", ")", ")", "\n", "self", ".", "val_min", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.train_step": [[36, 44], ["training.Trainer.model.train", "training.Trainer.optimizer.zero_grad", "training.Trainer.compute_loss", "training.Trainer.backward", "training.Trainer.optimizer.step", "training.Trainer.item"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.compute_loss"], ["", "def", "train_step", "(", "self", ",", "batch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "compute_loss", "(", "batch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.compute_loss": [[45, 62], ["batch.get().to", "batch.get().to", "batch.get().to", "training.Trainer.model", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits.sum().mean", "batch.get", "batch.get", "batch.get", "torch.nn.functional.binary_cross_entropy_with_logits.sum"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "device", "=", "self", ".", "device", "\n", "\n", "p", "=", "batch", ".", "get", "(", "'grid_coords'", ")", ".", "to", "(", "device", ")", "\n", "occ", "=", "batch", ".", "get", "(", "'occupancies'", ")", ".", "to", "(", "device", ")", "\n", "inputs", "=", "batch", ".", "get", "(", "'inputs'", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "# General points", "\n", "logits", "=", "self", ".", "model", "(", "p", ",", "inputs", ")", "\n", "loss_i", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "logits", ",", "occ", ",", "reduction", "=", "'none'", ")", "# out = (B,num_points) by componentwise comparing vecots of size num_samples:", "\n", "# l(logits[n],occ[n]) for each n in B. i.e. l(logits[n],occ[n]) is vector of size num_points again.", "\n", "\n", "loss", "=", "loss_i", ".", "sum", "(", "-", "1", ")", ".", "mean", "(", ")", "# loss_i summed over all #num_samples samples -> out = (B,1) and mean over batch -> out = (1)", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.train_model": [[63, 97], ["training.Trainer.load_checkpoint", "range", "print", "training.Trainer.train_dataset.get_loader", "training.Trainer.writer.add_scalar", "training.Trainer.writer.add_scalar", "training.Trainer.save_checkpoint", "training.Trainer.compute_val_loss", "training.Trainer.writer.add_scalar", "training.Trainer.train_step", "print", "glob.glob.glob", "numpy.save", "len", "os.remove"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.load_checkpoint", "home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.get_loader", "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.save_checkpoint", "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.compute_val_loss", "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.train_step"], ["", "def", "train_model", "(", "self", ",", "epochs", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "start", "=", "self", ".", "load_checkpoint", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start", ",", "epochs", ")", ":", "\n", "            ", "sum_loss", "=", "0", "\n", "print", "(", "'Start epoch {}'", ".", "format", "(", "epoch", ")", ")", "\n", "train_data_loader", "=", "self", ".", "train_dataset", ".", "get_loader", "(", ")", "\n", "\n", "if", "epoch", "%", "1", "==", "0", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", "epoch", ")", "\n", "val_loss", "=", "self", ".", "compute_val_loss", "(", ")", "\n", "\n", "if", "self", ".", "val_min", "is", "None", ":", "\n", "                    ", "self", ".", "val_min", "=", "val_loss", "\n", "\n", "", "if", "val_loss", "<", "self", ".", "val_min", ":", "\n", "                    ", "self", ".", "val_min", "=", "val_loss", "\n", "for", "path", "in", "glob", "(", "self", ".", "exp_path", "+", "'val_min=*'", ")", ":", "\n", "                        ", "os", ".", "remove", "(", "path", ")", "\n", "", "np", ".", "save", "(", "self", ".", "exp_path", "+", "'val_min={}'", ".", "format", "(", "epoch", ")", ",", "[", "epoch", ",", "val_loss", "]", ")", "\n", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "'val loss batch avg'", ",", "val_loss", ",", "epoch", ")", "\n", "\n", "\n", "", "for", "batch", "in", "train_data_loader", ":", "\n", "                ", "loss", "=", "self", ".", "train_step", "(", "batch", ")", "\n", "print", "(", "\"Current loss: {}\"", ".", "format", "(", "loss", ")", ")", "\n", "sum_loss", "+=", "loss", "\n", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "'training loss last batch'", ",", "loss", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'training loss batch avg'", ",", "sum_loss", "/", "len", "(", "train_data_loader", ")", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.save_checkpoint": [[100, 105], ["os.path.exists", "torch.save", "torch.save", "torch.save", "torch.save", "training.Trainer.model.state_dict", "training.Trainer.optimizer.state_dict"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "path", "=", "self", ".", "checkpoint_path", "+", "'checkpoint_epoch_{}.tar'", ".", "format", "(", "epoch", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'model_state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.load_checkpoint": [[106, 123], ["glob.glob.glob", "numpy.array", "numpy.sort", "print", "torch.load", "torch.load", "torch.load", "torch.load", "training.Trainer.model.load_state_dict", "training.Trainer.optimizer.load_state_dict", "len", "print", "os.path.splitext", "os.path.basename"], "methods", ["None"], ["", "", "def", "load_checkpoint", "(", "self", ")", ":", "\n", "        ", "checkpoints", "=", "glob", "(", "self", ".", "checkpoint_path", "+", "'/*'", ")", "\n", "if", "len", "(", "checkpoints", ")", "==", "0", ":", "\n", "            ", "print", "(", "'No checkpoints found at {}'", ".", "format", "(", "self", ".", "checkpoint_path", ")", ")", "\n", "return", "0", "\n", "\n", "", "checkpoints", "=", "[", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "[", "0", "]", "[", "17", ":", "]", "for", "path", "in", "checkpoints", "]", "\n", "checkpoints", "=", "np", ".", "array", "(", "checkpoints", ",", "dtype", "=", "int", ")", "\n", "checkpoints", "=", "np", ".", "sort", "(", "checkpoints", ")", "\n", "path", "=", "self", ".", "checkpoint_path", "+", "'checkpoint_epoch_{}.tar'", ".", "format", "(", "checkpoints", "[", "-", "1", "]", ")", "\n", "\n", "print", "(", "'Loaded checkpoint from: {}'", ".", "format", "(", "path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "return", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.compute_val_loss": [[124, 139], ["training.Trainer.model.eval", "range", "training.Trainer.compute_loss().item", "training.Trainer.val_data_iterator.next", "training.Trainer.val_dataset.get_loader().__iter__", "training.Trainer.val_data_iterator.next", "training.Trainer.compute_loss", "training.Trainer.val_dataset.get_loader"], "methods", ["home.repos.pwc.inspect_result.jchibane_if-net.data_processing.evaluate.eval", "home.repos.pwc.inspect_result.jchibane_if-net.models.training.Trainer.compute_loss", "home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.get_loader"], ["", "def", "compute_val_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "sum_val_loss", "=", "0", "\n", "num_batches", "=", "15", "\n", "for", "_", "in", "range", "(", "num_batches", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "val_batch", "=", "self", ".", "val_data_iterator", ".", "next", "(", ")", "\n", "", "except", ":", "\n", "                ", "self", ".", "val_data_iterator", "=", "self", ".", "val_dataset", ".", "get_loader", "(", ")", ".", "__iter__", "(", ")", "\n", "val_batch", "=", "self", ".", "val_data_iterator", ".", "next", "(", ")", "\n", "\n", "", "sum_val_loss", "+=", "self", ".", "compute_loss", "(", "val_batch", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "sum_val_loss", "/", "num_batches", "", "", "", ""]], "home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.__init__": [[15, 39], ["numpy.array", "numpy.array", "numpy.load", "numpy.rint().astype", "numpy.sum", "numpy.any", "len", "len", "numpy.rint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "res", "=", "32", ",", "voxelized_pointcloud", "=", "False", ",", "pointcloud_samples", "=", "3000", ",", "data_path", "=", "'shapenet/data/'", ",", "split_file", "=", "'shapenet/split.npz'", ",", "\n", "batch_size", "=", "64", ",", "num_sample_points", "=", "1024", ",", "num_workers", "=", "12", ",", "sample_distribution", "=", "[", "1", "]", ",", "sample_sigmas", "=", "[", "0.015", "]", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "sample_distribution", "=", "np", ".", "array", "(", "sample_distribution", ")", "\n", "self", ".", "sample_sigmas", "=", "np", ".", "array", "(", "sample_sigmas", ")", "\n", "\n", "assert", "np", ".", "sum", "(", "self", ".", "sample_distribution", ")", "==", "1", "\n", "assert", "np", ".", "any", "(", "self", ".", "sample_distribution", "<", "0", ")", "==", "False", "\n", "assert", "len", "(", "self", ".", "sample_distribution", ")", "==", "len", "(", "self", ".", "sample_sigmas", ")", "\n", "\n", "self", ".", "path", "=", "data_path", "\n", "self", ".", "split", "=", "np", ".", "load", "(", "split_file", ")", "\n", "\n", "self", ".", "data", "=", "self", ".", "split", "[", "mode", "]", "\n", "self", ".", "res", "=", "res", "\n", "\n", "self", ".", "num_sample_points", "=", "num_sample_points", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "voxelized_pointcloud", "=", "voxelized_pointcloud", "\n", "self", ".", "pointcloud_samples", "=", "pointcloud_samples", "\n", "\n", "# compute number of samples per sampling method", "\n", "self", ".", "num_samples", "=", "np", ".", "rint", "(", "self", ".", "sample_distribution", "*", "num_sample_points", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.__getitem__": [[45, 77], ["enumerate", "numpy.load", "numpy.unpackbits", "numpy.reshape", "numpy.unpackbits", "numpy.reshape", "numpy.load", "numpy.random.randint", "points.extend", "coords.extend", "numpy.unpackbits.extend", "len", "len", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.load"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "path", "=", "self", ".", "path", "+", "self", ".", "data", "[", "idx", "]", "\n", "\n", "if", "not", "self", ".", "voxelized_pointcloud", ":", "\n", "            ", "occupancies", "=", "np", ".", "load", "(", "path", "+", "'/voxelization_{}.npy'", ".", "format", "(", "self", ".", "res", ")", ")", "\n", "occupancies", "=", "np", ".", "unpackbits", "(", "occupancies", ")", "\n", "input", "=", "np", ".", "reshape", "(", "occupancies", ",", "(", "self", ".", "res", ",", ")", "*", "3", ")", "\n", "", "else", ":", "\n", "            ", "voxel_path", "=", "path", "+", "'/voxelized_point_cloud_{}res_{}points.npz'", ".", "format", "(", "self", ".", "res", ",", "self", ".", "pointcloud_samples", ")", "\n", "occupancies", "=", "np", ".", "unpackbits", "(", "np", ".", "load", "(", "voxel_path", ")", "[", "'compressed_occupancies'", "]", ")", "\n", "input", "=", "np", ".", "reshape", "(", "occupancies", ",", "(", "self", ".", "res", ",", ")", "*", "3", ")", "\n", "\n", "", "points", "=", "[", "]", "\n", "coords", "=", "[", "]", "\n", "occupancies", "=", "[", "]", "\n", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "self", ".", "num_samples", ")", ":", "\n", "            ", "boundary_samples_path", "=", "path", "+", "'/boundary_{}_samples.npz'", ".", "format", "(", "self", ".", "sample_sigmas", "[", "i", "]", ")", "\n", "boundary_samples_npz", "=", "np", ".", "load", "(", "boundary_samples_path", ")", "\n", "boundary_sample_points", "=", "boundary_samples_npz", "[", "'points'", "]", "\n", "boundary_sample_coords", "=", "boundary_samples_npz", "[", "'grid_coords'", "]", "\n", "boundary_sample_occupancies", "=", "boundary_samples_npz", "[", "'occupancies'", "]", "\n", "subsample_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "boundary_sample_points", ")", ",", "num", ")", "\n", "points", ".", "extend", "(", "boundary_sample_points", "[", "subsample_indices", "]", ")", "\n", "coords", ".", "extend", "(", "boundary_sample_coords", "[", "subsample_indices", "]", ")", "\n", "occupancies", ".", "extend", "(", "boundary_sample_occupancies", "[", "subsample_indices", "]", ")", "\n", "\n", "", "assert", "len", "(", "points", ")", "==", "self", ".", "num_sample_points", "\n", "assert", "len", "(", "occupancies", ")", "==", "self", ".", "num_sample_points", "\n", "assert", "len", "(", "coords", ")", "==", "self", ".", "num_sample_points", "\n", "\n", "return", "{", "'grid_coords'", ":", "np", ".", "array", "(", "coords", ",", "dtype", "=", "np", ".", "float32", ")", ",", "'occupancies'", ":", "np", ".", "array", "(", "occupancies", ",", "dtype", "=", "np", ".", "float32", ")", ",", "'points'", ":", "np", ".", "array", "(", "points", ",", "dtype", "=", "np", ".", "float32", ")", ",", "'inputs'", ":", "np", ".", "array", "(", "input", ",", "dtype", "=", "np", ".", "float32", ")", ",", "'path'", ":", "path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.get_loader": [[78, 83], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "get_loader", "(", "self", ",", "shuffle", "=", "True", ")", ":", "\n", "\n", "        ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ",", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "self", ".", "num_workers", ",", "shuffle", "=", "shuffle", ",", "\n", "worker_init_fn", "=", "self", ".", "worker_init_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jchibane_if-net.data.voxelized_data_shapenet.VoxelizedDataset.worker_init_fn": [[84, 88], ["os.urandom", "int.from_bytes", "numpy.random.seed"], "methods", ["None"], ["", "def", "worker_init_fn", "(", "self", ",", "worker_id", ")", ":", "\n", "        ", "random_data", "=", "os", ".", "urandom", "(", "4", ")", "\n", "base_seed", "=", "int", ".", "from_bytes", "(", "random_data", ",", "byteorder", "=", "\"big\"", ")", "\n", "np", ".", "random", ".", "seed", "(", "base_seed", "+", "worker_id", ")", "\n", "", "", ""]]}