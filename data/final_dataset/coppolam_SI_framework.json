{"home.repos.pwc.inspect_result.coppolam_SI_framework.None.main_mbe.fitnessfunction": [[20, 54], ["sim.save_policy", "numpy.random.randint", "range", "print", "numpy.array", "sim.run", "sim.save_learning_data", "numpy.append", "np.append.mean", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_policy", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.run", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_learning_data"], ["def", "fitnessfunction", "(", "individual", ")", ":", "\n", "\t", "'''\n\tFitness function that evaluates the average \n\tperformance of the individuals\n\t'''", "\n", "# Save a temp policy file for the individual", "\n", "policy_filename", "=", "sim", ".", "save_policy", "(", "np", ".", "array", "(", "individual", ")", ",", "pr_actions", ")", "\n", "random_id", "=", "np", ".", "random", ".", "randint", "(", "100000", ")", "\n", "\n", "# Run simulator in batches", "\n", "flist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "reruns", ")", ":", "\n", "\t\t", "if", "args", ".", "nmin", "<", "args", ".", "nmax", ":", "\n", "# Random number of robots within bounds", "\n", "\t\t\t", "robots", "=", "np", ".", "random", ".", "randint", "(", "args", ".", "nmin", ",", "args", ".", "nmax", ")", "\n", "", "else", ":", "\n", "\t\t\t", "robots", "=", "args", ".", "nmin", "\n", "\n", "", "f", "=", "sim", ".", "run", "(", "time_limit", "=", "args", ".", "t", ",", "\n", "robots", "=", "robots", ",", "\n", "environment", "=", "args", ".", "environment", ",", "\n", "policy_filename", "=", "policy_filename", ",", "\n", "pr_states", "=", "pr_states", ",", "\n", "pr_actions", "=", "pr_actions", ",", "\n", "run_id", "=", "args", ".", "id", ",", "\n", "fitness", "=", "fitness", ")", "\n", "\n", "# Save the data", "\n", "sim", ".", "save_learning_data", "(", "filename_ext", "=", "\"evo_temp_%i_%i\"", "%", "(", "i", ",", "random_id", ")", ")", "\n", "\n", "flist", "=", "np", ".", "append", "(", "flist", ",", "f", ")", "\n", "\n", "", "print", "(", "flist", ")", "# Just to keep track", "\n", "return", "flist", ".", "mean", "(", ")", ",", "# Fitness = average", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.runtime_evaluation.wall_clock_test": [[18, 30], ["sim.make", "print", "numpy.zeros", "tqdm.tqdm", "range", "range", "time.time", "sim.run", "time.time"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.make", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.run"], ["def", "wall_clock_test", "(", "n", ",", "m", ")", ":", "\n", "\t", "'''Test the wall clock time of single runs'''", "\n", "sim", ".", "make", "(", "clean", "=", "True", ",", "verbose", "=", "False", ")", ";", "\n", "print", "(", "\"Wall-clock test (single simulation mode)\"", ")", "\n", "t", "=", "np", ".", "zeros", "(", "[", "n", ",", "m", "]", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "1", ",", "n", "+", "1", ")", ")", ":", "# Iterate over number of robots", "\n", "\t\t", "for", "j", "in", "range", "(", "0", ",", "m", ")", ":", "# Do multiple runs to average out", "\n", "\t\t\t", "tic", "=", "time", ".", "time", "(", ")", "\n", "f", "=", "sim", ".", "run", "(", "i", ")", "# Launch simulation run", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "t", "[", "i", "-", "1", ",", "j", "]", "=", "toc", "-", "tic", "# Runtime", "\n", "", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.runtime_evaluation.wall_clock_batch_test": [[31, 43], ["sim.make", "print", "numpy.zeros", "tqdm.tqdm", "range", "range", "time.time", "sim.batch_run", "time.time"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.make", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.batch_run"], ["", "def", "wall_clock_batch_test", "(", "n", ",", "m", ",", "batchsize", ")", ":", "\n", "\t", "'''Test the wall clock time of batch (parallel) runs'''", "\n", "sim", ".", "make", "(", "clean", "=", "True", ",", "verbose", "=", "False", ")", ";", "\n", "print", "(", "\"Wall-clock test (batch simulation mode)\"", ")", "\n", "t", "=", "np", ".", "zeros", "(", "[", "n", ",", "m", "]", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "1", ",", "n", "+", "1", ")", ")", ":", "# Iterate over number of robots", "\n", "\t\t", "for", "j", "in", "range", "(", "0", ",", "m", ")", ":", "# Do multiple runs to average out", "\n", "\t\t\t", "tic", "=", "time", ".", "time", "(", ")", "\n", "f", "=", "sim", ".", "batch_run", "(", "i", ",", "batchsize", ")", "# Launch batch", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "t", "[", "i", "-", "1", ",", "j", "]", "=", "toc", "-", "tic", "# Runtime", "\n", "", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.runtime_evaluation.run": [[44, 52], ["runtime_evaluation.wall_clock_test", "runtime_evaluation.wall_clock_batch_test"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.None.runtime_evaluation.wall_clock_test", "home.repos.pwc.inspect_result.coppolam_SI_framework.None.runtime_evaluation.wall_clock_batch_test"], ["", "def", "run", "(", "n", ",", "m", ",", "batch", ",", "filename", ")", ":", "\n", "# Test wall-clock time for single runs without animation", "\n", "\t", "t", "=", "wall_clock_test", "(", "n", ",", "m", ")", "\n", "\n", "# Test wall-clock time for batch runs, without animation", "\n", "t_batch", "=", "wall_clock_batch_test", "(", "n", ",", "m", ",", "batch", ")", "\n", "\n", "return", "t", ",", "t_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.runtime_evaluation.load": [[53, 58], ["numpy.load", "data[].astype", "data[].astype"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load"], ["", "def", "load", "(", "filename", ")", ":", "\n", "\t", "data", "=", "np", ".", "load", "(", "filename", ")", "\n", "t", "=", "data", "[", "'t'", "]", ".", "astype", "(", "float", ")", "\n", "t_batch", "=", "data", "[", "'t_batch'", "]", ".", "astype", "(", "float", ")", "\n", "return", "t", ",", "t_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.runtime_evaluation.plot_evaluationtime": [[59, 85], ["tools.prettyplot.setup", "runtime_evaluation.load", "t.mean", "t_batch.mean", "pp.adjust.plot", "pp.adjust.plot", "pp.adjust.plot", "pp.adjust.fill_between", "pp.adjust.fill_between", "pp.adjust.fill_between", "pp.adjust.xlabel", "pp.adjust.ylabel", "pp.adjust.legend", "pp.adjust.xlim", "tools.prettyplot.adjust", "pp.adjust.close", "range", "range", "range", "range", "t.min", "t.max", "range", "range", "t_batch.min", "t_batch.max", "pp.adjust.savefig", "pp.adjust.show", "t_batch.min", "t_batch.max", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust"], ["", "def", "plot_evaluationtime", "(", "filename", ",", "figurename", "=", "None", ")", ":", "\n", "\t", "plt", "=", "pp", ".", "setup", "(", "h", "=", "8", ")", "\n", "t", ",", "t_batch", "=", "load", "(", "filename", ")", "\n", "tmean", "=", "t", ".", "mean", "(", "axis", "=", "1", ")", "\n", "batchsize", "=", "t_batch", ".", "shape", "[", "1", "]", "\n", "alpha", "=", "0.2", "\n", "tmean_batch", "=", "t_batch", ".", "mean", "(", "axis", "=", "1", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "t", ".", "shape", "[", "0", "]", "+", "1", ")", ",", "tmean", ",", "linestyle", "=", "'solid'", ",", "color", "=", "'blue'", ",", "label", "=", "\"Single\"", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "t_batch", ".", "shape", "[", "0", "]", "+", "1", ")", ",", "tmean_batch", "/", "batchsize", ",", "linestyle", "=", "'dotted'", ",", "color", "=", "'orange'", ",", "label", "=", "\"Batch (%i), individual\"", "%", "batchsize", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "t_batch", ".", "shape", "[", "0", "]", "+", "1", ")", ",", "tmean_batch", ",", "linestyle", "=", "'dashed'", ",", "color", "=", "'red'", ",", "label", "=", "\"Batch (%i), cumulative\"", "%", "batchsize", ")", "\n", "plt", ".", "fill_between", "(", "range", "(", "1", ",", "len", "(", "tmean", ")", "+", "1", ")", ",", "\n", "t", ".", "min", "(", "axis", "=", "1", ")", ",", "t", ".", "max", "(", "axis", "=", "1", ")", ",", "\n", "color", "=", "'blue'", ",", "alpha", "=", "alpha", ")", "\n", "plt", ".", "fill_between", "(", "range", "(", "1", ",", "len", "(", "tmean", ")", "+", "1", ")", ",", "\n", "t_batch", ".", "min", "(", "axis", "=", "1", ")", "/", "batchsize", ",", "t_batch", ".", "max", "(", "axis", "=", "1", ")", "/", "batchsize", ",", "\n", "color", "=", "'orange'", ",", "alpha", "=", "alpha", ")", "\n", "plt", ".", "fill_between", "(", "range", "(", "1", ",", "len", "(", "tmean", ")", "+", "1", ")", ",", "\n", "t_batch", ".", "min", "(", "axis", "=", "1", ")", ",", "t_batch", ".", "max", "(", "axis", "=", "1", ")", ",", "\n", "color", "=", "'red'", ",", "alpha", "=", "alpha", ")", "\n", "plt", ".", "xlabel", "(", "\"Number of robots\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Wall-clock time [s]\"", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper left\"", ")", "\n", "plt", ".", "xlim", "(", "[", "0", ",", "50", "]", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", ";", "\n", "plt", ".", "savefig", "(", "figurename", ")", "if", "figurename", "is", "not", "None", "else", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.runtime_evaluation.plot_realtimefactor": [[86, 107], ["tools.prettyplot.setup", "runtime_evaluation.load", "pp.adjust.plot", "pp.adjust.plot", "pp.adjust.plot", "pp.adjust.fill_between", "pp.adjust.fill_between", "pp.adjust.fill_between", "pp.adjust.xlabel", "pp.adjust.ylabel", "pp.adjust.legend", "pp.adjust.xlim", "tools.prettyplot.adjust", "pp.adjust.close", "t.mean", "t_batch.mean", "range", "range", "range", "range", "range", "range", "pp.adjust.savefig", "pp.adjust.show", "t_batch.mean", "len", "t.min", "t.max", "len", "t_batch.min", "t_batch.max", "len", "t_batch.min", "t_batch.max"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust"], ["", "def", "plot_realtimefactor", "(", "filename", ",", "tl", ",", "figurename", "=", "None", ")", ":", "\n", "\t", "plt", "=", "pp", ".", "setup", "(", "h", "=", "8", ")", "\n", "t", ",", "t_batch", "=", "load", "(", "filename", ")", "\n", "batchsize", "=", "t_batch", ".", "shape", "[", "1", "]", "\n", "alpha", "=", "0.2", "\n", "tmean", "=", "t", ".", "mean", "(", "axis", "=", "1", ")", "/", "tl", "\n", "tmean_batch", "=", "t_batch", ".", "mean", "(", "axis", "=", "1", ")", "/", "tl", "\n", "tmean_batch_adj", "=", "t_batch", ".", "mean", "(", "axis", "=", "1", ")", "/", "tl", "/", "batchsize", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "t", ".", "shape", "[", "0", "]", "+", "1", ")", ",", "1", "/", "tmean", ",", "linestyle", "=", "'solid'", ",", "color", "=", "'blue'", ",", "label", "=", "\"Single\"", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "t_batch", ".", "shape", "[", "0", "]", "+", "1", ")", ",", "1", "/", "tmean_batch", ",", "linestyle", "=", "'dotted'", ",", "color", "=", "'orange'", ",", "label", "=", "\"Batch (%i), individual\"", "%", "batchsize", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "t_batch", ".", "shape", "[", "0", "]", "+", "1", ")", ",", "1", "/", "tmean_batch_adj", ",", "linestyle", "=", "'dashed'", ",", "color", "=", "'red'", ",", "label", "=", "\"Batch (%i), cumulative\"", "%", "batchsize", ")", "\n", "plt", ".", "fill_between", "(", "range", "(", "1", ",", "len", "(", "tmean", ")", "+", "1", ")", ",", "1", "/", "(", "t", ".", "min", "(", "axis", "=", "1", ")", "/", "tl", ")", ",", "1", "/", "(", "t", ".", "max", "(", "axis", "=", "1", ")", "/", "tl", ")", ",", "color", "=", "'blue'", ",", "alpha", "=", "alpha", ")", "\n", "plt", ".", "fill_between", "(", "range", "(", "1", ",", "len", "(", "tmean", ")", "+", "1", ")", ",", "1", "/", "(", "t_batch", ".", "min", "(", "axis", "=", "1", ")", "/", "tl", ")", ",", "1", "/", "(", "t_batch", ".", "max", "(", "axis", "=", "1", ")", "/", "tl", ")", ",", "color", "=", "'orange'", ",", "alpha", "=", "alpha", ")", "\n", "plt", ".", "fill_between", "(", "range", "(", "1", ",", "len", "(", "tmean", ")", "+", "1", ")", ",", "1", "/", "(", "t_batch", ".", "min", "(", "axis", "=", "1", ")", "/", "tl", "/", "batchsize", ")", ",", "1", "/", "(", "t_batch", ".", "max", "(", "axis", "=", "1", ")", "/", "tl", "/", "batchsize", ")", ",", "color", "=", "'red'", ",", "alpha", "=", "alpha", ")", "\n", "plt", ".", "xlabel", "(", "\"Number of robots\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Real time factor\"", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "xlim", "(", "[", "0", ",", "50", "]", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", ";", "\n", "plt", ".", "savefig", "(", "figurename", ")", "if", "figurename", "is", "not", "None", "else", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.plot_all.main": [[20, 78], ["print", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "plot.plot_nn.main", "plot.plot_model.main", "main_nn_training.main", "plot.plot_benchmark.main", "plot.plot_logs.main", "main_verification.main", "plot.plot_evolution.main", "plot.plot_onlinelearning.main"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.main", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.main", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.main", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.main", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.main", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.main", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.main", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.main"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "print", "(", "\"(Re-)generating all figures\"", ")", "\n", "\n", "# Parse the arguments", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Make all the plots with one command'", ")", "\n", "parser", ".", "add_argument", "(", "'-format'", ",", "type", "=", "str", ",", "default", "=", "\"pdf\"", ",", "\n", "help", "=", "\"(str) desired format, default=pdf\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Controller names", "\n", "controllers", "=", "[", "\"aggregation\"", ",", "\n", "\"pfsm_exploration\"", ",", "\n", "\"pfsm_exploration_mod\"", ",", "\n", "\"forage\"", "]", "\n", "\n", "# Make relevant plots for each controller", "\n", "for", "c", "in", "controllers", ":", "\n", "# ## Plot neural network prediction performance", "\n", "# ## (Figure 4)", "\n", "        ", "plot_nn", ".", "main", "(", "[", "c", ",", "\"-format\"", ",", "args", ".", "format", "]", ")", "\n", "\n", "# ## Plot model convergence", "\n", "# ## (Figure 5)", "\n", "plot_model", ".", "main", "(", "[", "c", ",", "\"data/%s/training_data/\"", "%", "c", ",", "\"-format\"", ",", "args", ".", "format", "]", ")", "\n", "\n", "# ## Plot neural network prediction performance over validation runs ", "\n", "# ##(Figure 6)", "\n", "plot_prediction", ".", "main", "(", "[", "\"data/%s/training_data/\"", "%", "c", ",", "\n", "\"data/%s/validation_data_1/\"", "%", "c", ",", "\n", "\"data/%s/\"", "%", "c", ",", "\n", "\"-evaluate\"", ",", "\"-plot\"", "]", ")", "\n", "\n", "# ## Plot benchmarks", "\n", "# ## (Figure 7)", "\n", "plot_benchmark", ".", "main", "(", "[", "c", ",", "\"-format\"", ",", "args", ".", "format", "]", ")", "\n", "\n", "# ## Plot logs of benchmark sims", "\n", "# ## (Figure 8)", "\n", "plot_logs", ".", "main", "(", "[", "c", ",", "\"data/%s/optimization_1/\"", "%", "c", ",", "\n", "\"data/%s/evolution/\"", "%", "c", ",", "\"-format\"", ",", "args", ".", "format", "]", ")", "\n", "\n", "# ## Plot verification pagerank results", "\n", "# ## (Figure 9 + 10)", "\n", "plot_verification", ".", "main", "(", "[", "c", ",", "\"data/%s/optimization_1/\"", "%", "c", ",", "\"-plot\"", ",", "\n", "\"-format\"", ",", "args", ".", "format", "]", ")", "\n", "\n", "# ## Plot evolutions", "\n", "# ## (Figure 11)", "\n", "plot_evolution", ".", "main", "(", "[", "\"data/%s/\"", "%", "c", "]", ")", "\n", "\n", "## Plot onlinelearning", "\n", "## (Figure 12)", "\n", "if", "c", "==", "\"aggregation\"", "or", "c", "==", "\"pfsm_exploration\"", ":", "\n", "            ", "plot_onlinelearning", ".", "main", "(", "[", "c", ",", "\"-format\"", ",", "args", ".", "format", "]", ")", "\n", "\n", "", "", "print", "(", "\"...done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.parameters.get": [[7, 73], ["ValueError"], "function", ["None"], ["def", "get", "(", "c", ")", ":", "\n", "\t", "'''\n\tLoads the desired parameters used throughout this paper for different tasks.\n\n\tThe tasks are called according to their controller name in swarmulator.\n\tStudy Case A = \"aggregation\"\n\tStudy Case B = \"forage\"\n\tStudy Case C1 = \"pfsm_exploration\"\n\tStudy Case C2 = \"pfsm_exploration_mod\"\n\n\t@author: Mario Coppola, 2020\n\t'''", "\n", "\n", "# Study Case A", "\n", "if", "c", "==", "\"aggregation\"", ":", "\n", "\t\t", "fitness", "=", "\"aggregation_clusters\"", "\n", "controller", "=", "\"aggregation\"", "\n", "agent", "=", "\"particle\"", "\n", "pr_states", "=", "8", "\n", "pr_actions", "=", "1", "\n", "\n", "# Study Case C", "\n", "", "elif", "c", "==", "\"forage\"", ":", "\n", "\t\t", "fitness", "=", "\"food\"", "\n", "controller", "=", "\"forage\"", "\n", "agent", "=", "\"particle_oriented\"", "\n", "pr_states", "=", "30", "\n", "pr_actions", "=", "1", "\n", "\n", "# Study Case B1", "\n", "", "elif", "c", "==", "\"pfsm_exploration\"", ":", "\n", "\t\t", "fitness", "=", "\"aggregation_clusters\"", "\n", "controller", "=", "\"pfsm_exploration\"", "\n", "agent", "=", "\"particle_oriented\"", "\n", "pr_states", "=", "16", "\n", "pr_actions", "=", "8", "\n", "\n", "# Study Case B2", "\n", "", "elif", "c", "==", "\"pfsm_exploration_mod\"", ":", "\n", "\t\t", "fitness", "=", "\"aggregation_clusters\"", "\n", "controller", "=", "\"pfsm_exploration_mod\"", "\n", "agent", "=", "\"particle_oriented\"", "\n", "pr_states", "=", "16", "\n", "pr_actions", "=", "8", "\n", "\n", "# Study Case A -- online learning", "\n", "", "elif", "c", "==", "\"onlinelearning_aggregation\"", ":", "\n", "\t\t", "fitness", "=", "\"aggregation_clusters\"", "\n", "controller", "=", "\"onlinelearning_aggregation\"", "\n", "agent", "=", "\"particle\"", "\n", "pr_states", "=", "8", "\n", "pr_actions", "=", "1", "\n", "\n", "# Study Case B1 -- online learning", "\n", "", "elif", "c", "==", "\"onlinelearning_pfsm\"", ":", "\n", "\t\t", "fitness", "=", "\"aggregation_clusters\"", "\n", "controller", "=", "\"onlinelearning_pfsm\"", "\n", "agent", "=", "\"particle_oriented\"", "\n", "pr_states", "=", "16", "\n", "pr_actions", "=", "8", "\n", "\n", "", "else", ":", "\n", "\t\t", "ValueError", "(", "\"Unknown controller!\"", ")", "\n", "\n", "# Returna tuple with all relevant data", "\n", "", "return", "fitness", ",", "controller", ",", "agent", ",", "pr_states", ",", "pr_actions", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.main_nn_training.main": [[23, 153], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "classes.desired_states_extractor.desired_states_extractor", "os.path.exists", "os.makedirs", "tqdm.tqdm", "tools.fileHandler.save_pkl", "tools.fileHandler.load_pkl", "tqdm.tqdm", "os.path.basename", "tools.fileHandler.save_pkl", "enumerate", "numpy.random.randint", "os.path.dirname", "os.path.dirname", "os.listdir", "f.endswith", "os.listdir", "f.endswith", "sorted", "desired_states_extractor.desired_states_extractor.train", "print", "fh.load_pkl.append", "sorted", "v.append", "print", "os.path.dirname", "sorted", "desired_states_extractor.desired_states_extractor.extract_states", "desired_states_extractor.desired_states_extractor.evaluate_model", "e.append", "print", "print", "print", "copy.deepcopy", "desired_states_extractor.desired_states_extractor.extract_states", "desired_states_extractor.desired_states_extractor.evaluate_model", "e.append", "numpy.mean", "tools.prettyplot.setup", "pp.adjust.plot", "pp.adjust.plot", "pp.adjust.ylabel", "pp.adjust.xlabel", "pp.adjust.legend", "tools.prettyplot.adjust", "pp.adjust.savefig", "pp.adjust.close", "numpy.mean", "os.path.exists", "os.makedirs", "os.path.splitext", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.save_pkl", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.save_pkl", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.train", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.extract_states", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.evaluate_model", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.extract_states", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.evaluate_model", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust"], ["def", "main", "(", "args", ")", ":", "\n", "####################################################################", "\n", "# Initialize", "\n", "# Input arguments", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\n", "'Simulate a task to gather the data for optimization'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'folder_train'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"(str) Training data folder\"", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'folder_test'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"(str) Validation data folder\"", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'savefolder'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"(str) Save folder\"", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-id'", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Model ID (for save/load)\"", ",", "default", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "parser", ".", "add_argument", "(", "'-train'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"(bool) Train flag to true\"", ")", "\n", "parser", ".", "add_argument", "(", "'-validate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"(bool) Validate flag to true (checks all models)\"", ")", "\n", "parser", ".", "add_argument", "(", "'-evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"(bool) Evaluate flag to true (checks last model only)\"", ")", "\n", "parser", ".", "add_argument", "(", "'-plot'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"(bool) Plot all validation sets (checks last model only)\"", ")", "\n", "parser", ".", "add_argument", "(", "'-layer_size'", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Nodes in hidden layers\"", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'-layers'", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of hiddent layers\"", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Number of hiddent layers\"", ",", "default", "=", "1e-6", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Load files", "\n", "folder_train", "=", "args", ".", "folder_train", "\n", "folder_test", "=", "args", ".", "folder_test", "\n", "save_folder", "=", "args", ".", "savefolder", "\n", "\n", "# Make the save_folder if it does not exist", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "save_folder", ")", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_folder", ")", ")", "\n", "\n", "", "files_train", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "folder_train", ")", "if", "f", ".", "endswith", "(", "'.npz'", ")", "]", "\n", "files_test", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "folder_test", "+", "\"/\"", ")", "if", "f", ".", "endswith", "(", "'.npz'", ")", "]", "\n", "\n", "# Initialize desired states extractor", "\n", "dse", "=", "desired_states_extractor", ".", "desired_states_extractor", "(", ")", "\n", "####################################################################", "\n", "\n", "\n", "####################################################################", "\n", "# if -train", "\n", "# Else try to load pre-trained sets in a file called \"models.pkl\"", "\n", "if", "args", ".", "train", ":", "\n", "\t\t", "nets", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "filename", "in", "tqdm", "(", "sorted", "(", "files_train", ")", ")", ":", "\n", "\t\t\t", "model", "=", "dse", ".", "train", "(", "folder_train", "+", "filename", ",", "\n", "layer_size", "=", "args", ".", "layer_size", ",", "\n", "layers", "=", "args", ".", "layers", ",", "\n", "lr", "=", "args", ".", "lr", ")", "\n", "print", "(", "model", "[", "0", "]", ".", "network", ")", "\n", "nets", ".", "append", "(", "copy", ".", "deepcopy", "(", "model", ")", ")", "\n", "i", "+=", "1", "\n", "", "fh", ".", "save_pkl", "(", "nets", ",", "\"%s/models.pkl\"", "%", "(", "save_folder", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "nets", "=", "fh", ".", "load_pkl", "(", "\"%s/models.pkl\"", "%", "(", "save_folder", ")", ")", "\n", "####################################################################", "\n", "\n", "\n", "####################################################################", "\n", "# If -validate", "\n", "# Crosscheck all models against all validation files", "\n", "", "if", "args", ".", "validate", ":", "\n", "\t\t", "v", "=", "[", "]", "\n", "for", "model", "in", "tqdm", "(", "nets", ")", ":", "\n", "\t\t\t", "e", "=", "[", "]", "\n", "for", "filename", "in", "sorted", "(", "files_test", ")", ":", "\n", "\t\t\t\t", "_", ",", "s", ",", "f", "=", "dse", ".", "extract_states", "(", "folder_test", "+", "\"/\"", "+", "filename", ",", "load_pkl", "=", "True", ")", "\n", "_", ",", "corr", ",", "_", "=", "dse", ".", "evaluate_model", "(", "model", "[", "0", "]", ",", "s", ",", "f", ")", "\n", "e", ".", "append", "(", "corr", ")", "\n", "", "v", ".", "append", "(", "e", ")", "\n", "print", "(", "np", ".", "mean", "(", "e", ")", ")", "# Display progress", "\n", "\n", "# Save to file", "\n", "", "vname", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "folder_test", ")", ")", "\n", "fh", ".", "save_pkl", "(", "v", ",", "\"%s/validation_%s_id%i.pkl\"", "%", "(", "save_folder", ",", "vname", ",", "args", ".", "id", ")", ")", "\n", "####################################################################", "\n", "\n", "\n", "####################################################################", "\n", "# If -evaluate", "\n", "# Crosscheck the correlation of the last model against validation set", "\n", "# This is mainly for debugging purposes on the last model", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "# Get the most recent network", "\n", "\t\t", "model", "=", "nets", "[", "-", "1", "]", "\n", "\n", "# Evaluate the correlation for the most recent network", "\n", "# to the validation dataset", "\n", "e", "=", "[", "]", "\n", "y_pred", "=", "[", "]", "\n", "for", "i", ",", "filename", "in", "enumerate", "(", "sorted", "(", "files_test", ")", ")", ":", "\n", "\t\t\t", "t", ",", "s", ",", "f", "=", "dse", ".", "extract_states", "(", "\n", "args", ".", "folder_test", "+", "\"/\"", "+", "filename", ",", "\n", "load_pkl", "=", "True", ")", "\n", "_", ",", "corr", ",", "y_pred_i", "=", "dse", ".", "evaluate_model", "(", "model", "[", "0", "]", ",", "s", ",", "f", ")", "\n", "e", ".", "append", "(", "corr", ")", "\n", "if", "args", ".", "plot", ":", "\n", "\t\t\t\t", "fname", "=", "\"nn_test_%s_%i.%s\"", "%", "(", "os", ".", "path", ".", "dirname", "(", "save_folder", ")", ",", "i", ",", "\"pdf\"", ")", "\n", "folder", "=", "\"figures/nn/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", ":", "\n", "\t\t\t\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", "\n", "", "filename_raw", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", "[", "0", "]", "\n", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "plt", ".", "plot", "(", "t", ",", "f", ",", "\n", "color", "=", "\"blue\"", ",", "label", "=", "\"Real\"", ")", "\n", "plt", ".", "plot", "(", "t", ",", "y_pred_i", ",", "\n", "color", "=", "\"red\"", ",", "label", "=", "\"Predicted\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Fitness\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Time [s]\"", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"upper left\"", ",", "ncol", "=", "2", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", "\n", "plt", ".", "savefig", "(", "folder", "+", "\"%s.%s\"", "%", "(", "filename_raw", ",", "\"pdf\"", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# Display some data", "\n", "", "", "if", "args", ".", "plot", "is", "False", ":", "\n", "\t\t\t", "print", "(", "np", ".", "mean", "(", "e", ")", ")", "# Mean error", "\n", "print", "(", "model", "[", "0", "]", ".", "optimizer", ")", "# Optimizer parameters", "\n", "print", "(", "model", "[", "0", "]", ".", "network", ")", "# Network parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.None.main_verification.main": [[26, 176], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parameters.get", "numpy.load", "data[].astype", "data[].astype", "tools.matrixOperations.normalize_rows", "H0.astype.astype", "H1.astype.astype", "E.astype.astype", "classes.verification.verification", "verification.verification.verify", "tools.matrixOperations.pagerank", "tools.matrixOperations.pagerank", "tools.matrixOperations.pagerank", "tools.matrixOperations.pagerank", "classes.pagerank_evolve.pagerank_evolve", "propt.pagerank_evolve.pagerank_fitness", "propt.pagerank_evolve.pagerank_fitness", "range", "tools.prettyplot.setup", "pp.adjust.bar", "pp.adjust.bar", "tools.prettyplot.adjust", "pp.adjust.xlabel", "pp.adjust.ylabel", "matplotlib.pyplot.xticks", "matplotlib.pyplot.xticks", "pp.adjust.legend", "pp.adjust.savefig", "pp.adjust.close", "tools.prettyplot.setup", "list", "tools.prettyplot.adjust", "pp.adjust.xlabel", "matplotlib.pyplot.xticks", "matplotlib.pyplot.xticks", "pp.adjust.legend", "pp.adjust.savefig", "pp.adjust.close", "print", "print", "print", "print", "print", "print", "os.listdir", "numpy.diag().dot", "numpy.diag().dot", "numpy.diag().dot", "numpy.diag().dot", "numpy.array", "os.path.exists", "os.makedirs", "math.ceil", "numpy.array", "numpy.array", "map", "pp.adjust.bar", "pp.adjust.ylabel", "pp.adjust.bar", "pp.adjust.ylabel", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "f.startswith", "f.endswith", "os.path.dirname", "os.path.dirname", "range", "range", "range", "range", "numpy.diag", "numpy.diag", "numpy.diag", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.network.net.get", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification.verify", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.pagerank", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.pagerank", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.pagerank", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.pagerank", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.pagerank_fitness", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.pagerank_fitness", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust"], ["def", "main", "(", "args", ")", ":", "\n", "####################################################################", "\n", "# Initialize", "\n", "\n", "# Argument parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Simulate a task to gather the data for optimization'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'controller'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"(str) Controller to use\"", ")", "\n", "parser", ".", "add_argument", "(", "'folder'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"(str) Folder to use\"", ")", "\n", "parser", ".", "add_argument", "(", "'-format'", ",", "type", "=", "str", ",", "default", "=", "\"pdf\"", ",", "\n", "help", "=", "\"(str) Save figure format\"", ")", "\n", "parser", ".", "add_argument", "(", "'-plot'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"(bool) Animate flag to true\"", ")", "\n", "parser", ".", "add_argument", "(", "'-verbose'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"(bool) Animate flag to true\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Load parameters", "\n", "fitness", ",", "controller", ",", "agent", ",", "pr_states", ",", "pr_actions", "=", "parameters", ".", "get", "(", "args", ".", "controller", ")", "\n", "####################################################################", "\n", "\n", "\n", "####################################################################", "\n", "# Load optimization files", "\n", "files_train", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "args", ".", "folder", ")", "if", "f", ".", "startswith", "(", "\"optimization\"", ")", "and", "f", ".", "endswith", "(", "'.npz'", ")", "]", "\n", "\n", "# Unpack last file", "\n", "data", "=", "np", ".", "load", "(", "args", ".", "folder", "+", "files_train", "[", "-", "1", "]", ")", "\n", "H0", "=", "data", "[", "\"H0\"", "]", ".", "astype", "(", "float", ")", "\n", "H1", "=", "data", "[", "\"H1\"", "]", ".", "astype", "(", "float", ")", "\n", "# Fix rounding errors", "\n", "H0", "[", "H0", "<", "0.01", "]", "=", "0.00000", "\n", "H1", "[", "H1", "<", "0.01", "]", "=", "0.00000", "\n", "E", "=", "matop", ".", "normalize_rows", "(", "data", "[", "\"E\"", "]", ")", "\n", "policy", "=", "data", "[", "\"policy\"", "]", "\n", "des", "=", "data", "[", "\"des\"", "]", "\n", "alpha", "=", "data", "[", "\"alpha\"", "]", "\n", "####################################################################", "\n", "\n", "\n", "####################################################################", "\n", "# if -plot", "\n", "# Plot and display relevant results", "\n", "\n", "if", "args", ".", "plot", ":", "\n", "\n", "# Calculate parameters", "\n", "## Calculate Google matrices", "\n", "\t\t", "G0", "=", "np", ".", "diag", "(", "alpha", ")", ".", "dot", "(", "H0", ")", "+", "np", ".", "diag", "(", "1", "-", "alpha", ")", ".", "dot", "(", "E", ")", "\n", "G1", "=", "np", ".", "diag", "(", "alpha", ")", ".", "dot", "(", "H1", ")", "+", "np", ".", "diag", "(", "1", "-", "alpha", ")", ".", "dot", "(", "E", ")", "\n", "\n", "## PageRank scores", "\n", "prH0", "=", "matop", ".", "pagerank", "(", "H0", ")", "\n", "prE", "=", "matop", ".", "pagerank", "(", "E", ")", "\n", "pr0", "=", "matop", ".", "pagerank", "(", "G0", ")", "\n", "pr1", "=", "matop", ".", "pagerank", "(", "G1", ")", "\n", "\n", "## Initialize pagerank optimizer for evaluation", "\n", "## Using dummy inputs, since init not needed", "\n", "p", "=", "propt", ".", "pagerank_evolve", "(", "des", ",", "np", ".", "array", "(", "[", "H0", ",", "H1", "]", ")", ",", "E", ")", "\n", "\n", "## Get original fitness and new fitness", "\n", "f0", "=", "p", ".", "pagerank_fitness", "(", "pr0", ",", "des", ")", "\n", "f1", "=", "p", ".", "pagerank_fitness", "(", "pr1", ",", "des", ")", "\n", "\n", "# Make a folder to store the figures", "\n", "folder", "=", "\"figures/pagerank\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", "\n", "\n", "#Now let's plot some figures", "\n", "", "import", "math", "\n", "xint", "=", "range", "(", "0", ",", "math", ".", "ceil", "(", "pr1", "[", "0", "]", ".", "size", ")", ",", "2", ")", "\n", "\n", "# Figure: Plot pagerank H and E", "\n", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "plt", ".", "bar", "(", "np", ".", "array", "(", "range", "(", "prH0", "[", "0", "]", ".", "size", ")", ")", ",", "prH0", "[", "0", "]", ",", "\n", "alpha", "=", "0.5", ",", "\n", "label", "=", "\"$PR^\\pi$, $\\mathbf{H^\\pi}$ only\"", ")", "\n", "plt", ".", "bar", "(", "np", ".", "array", "(", "range", "(", "prE", "[", "0", "]", ".", "size", ")", ")", ",", "prE", "[", "0", "]", ",", "\n", "alpha", "=", "0.5", ",", "\n", "label", "=", "\"$PR^\\pi$, $\\mathbf{E}$ only\"", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", "\n", "plt", ".", "xlabel", "(", "\"State\"", ")", "\n", "plt", ".", "ylabel", "(", "\"PageRank [-]\"", ")", "\n", "matplotlib", ".", "pyplot", ".", "xticks", "(", "xint", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "\"%s/pagerank_original_%s.%s\"", "%", "(", "folder", ",", "controller", ",", "args", ".", "format", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# Figure: Diff plot of pagerank values", "\n", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "c", "=", "[", "\"blue\"", ",", "\"green\"", "]", "\n", "color_list", "=", "list", "(", "map", "(", "lambda", "x", ":", "c", "[", "1", "]", "if", "x", ">", "0.01", "else", "c", "[", "0", "]", ",", "des", ")", ")", "\n", "if", "controller", "==", "\"forage\"", ":", "\n", "\t\t\t", "plt", ".", "bar", "(", "range", "(", "pr1", "[", "0", "]", ".", "size", ")", ",", "(", "pr1", "[", "0", "]", "-", "pr0", "[", "0", "]", ")", "*", "1000", ",", "\n", "label", "=", "\"$PR^\\pi-PR^{\\pi^\\star}$\"", ",", "\n", "color", "=", "color_list", ")", "\n", "plt", ".", "ylabel", "(", "\"$\\Delta$ PageRank (\"", "r\"$\\times$\"", "r\"1000) [-]\"", ")", "\n", "", "else", ":", "\n", "\t\t\t", "plt", ".", "bar", "(", "range", "(", "pr1", "[", "0", "]", ".", "size", ")", ",", "(", "pr1", "[", "0", "]", "-", "pr0", "[", "0", "]", ")", ",", "\n", "label", "=", "\"$PR^\\pi-PR^{\\pi^\\star}$\"", ",", "\n", "color", "=", "color_list", ")", "\n", "plt", ".", "ylabel", "(", "\"$\\Delta$ PageRank [-]\"", ")", "\n", "", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", "\n", "plt", ".", "xlabel", "(", "\"State [-]\"", ")", "\n", "matplotlib", ".", "pyplot", ".", "xticks", "(", "xint", ")", "\n", "\n", "# Custom legend", "\n", "custom_lines", "=", "[", "\n", "matplotlib", ".", "lines", ".", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"blue\"", ",", "lw", "=", "20", ")", ",", "\n", "matplotlib", ".", "lines", ".", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"green\"", ",", "lw", "=", "20", ")", "\n", "]", "\n", "plt", ".", "legend", "(", "custom_lines", ",", "[", "'Transitional'", ",", "'Desired'", "]", ")", "\n", "plt", ".", "savefig", "(", "\"%s/pagerank_diff_%s.%s\"", "%", "(", "folder", ",", "controller", ",", "args", ".", "format", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "\n", "####################################################################", "\n", "\n", "\n", "####################################################################", "\n", "# if -verbose", "\n", "# Display relevant results to terminal", "\n", "", "if", "args", ".", "verbose", ":", "\n", "\t\t", "print", "(", "\"\\n------- MODEL -------\\n\"", ")", "\n", "print", "(", "\"\\nH0 matrix:\\n\"", ",", "H0", ")", "\n", "print", "(", "\"\\nH1 matrix:\\n\"", ",", "H1", ")", "\n", "print", "(", "\"\\nE matrix:\\n\"", ",", "E", ")", "\n", "print", "(", "\"\\nalpha vector:\\n\"", ",", "alpha", ")", "\n", "print", "(", "\"\\n------- POLICY -------\\n\"", ",", "policy", ")", "\n", "# print(\"\\n------- STATS -------\\n\")", "\n", "# print(\"Original fitness =\", f0[0])", "\n", "# print(\"New fitness =\", f1[0])", "\n", "\n", "# Check conditions on last file", "\n", "", "e", "=", "0.00000001", "\n", "H0", "[", "H0", ">", "e", "]", "=", "1", "\n", "H1", "[", "H1", ">", "e", "]", "=", "1", "\n", "E", "[", "E", ">", "e", "]", "=", "1", "\n", "H0", "=", "H0", ".", "astype", "(", "int", ")", "\n", "H1", "=", "H1", ".", "astype", "(", "int", ")", "\n", "E", "=", "E", ".", "astype", "(", "int", ")", "\n", "c", "=", "verification", ".", "verification", "(", "H0", ",", "H1", ",", "E", ",", "policy", ",", "des", ")", "\n", "c", ".", "verify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.__init__": [[18, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "'''Initialize with an empty network'''", "\n", "self", ".", "network", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.train_model": [[22, 52], ["enumerate", "print", "network.net", "torch.tensor().float", "torch.tensor().float", "desired_states_extractor.desired_states_extractor.network.run", "numpy.append", "loss.item", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.run"], ["", "def", "train_model", "(", "self", ",", "x", ",", "y", ",", "layers", "=", "3", ",", "layer_size", "=", "30", ",", "lr", "=", "1e-5", ")", ":", "\n", "\t\t", "'''\n\t\tGenerate and/or train model using stochastic gradient descent.\n\t\tTrain inputs x to match output y.\n\t\t'''", "\n", "\n", "# Create an empty network if it does not exist", "\n", "if", "self", ".", "network", "is", "None", ":", "\n", "\t\t\t", "print", "(", "\"Network model does not exist, generating the NN\"", ")", "\n", "self", ".", "network", "=", "network", ".", "net", "(", "n_inputs", "=", "x", ".", "shape", "[", "1", "]", ",", "\n", "n_outputs", "=", "1", ",", "\n", "layers", "=", "layers", ",", "\n", "layer_size", "=", "layer_size", ",", "\n", "lr", "=", "lr", ")", "\n", "\n", "# Train over all data", "\n", "## TODO: Add variable batch sizes", "\n", "", "loss_history", "=", "[", "]", "\n", "for", "i", ",", "element", "in", "enumerate", "(", "y", ")", ":", "\n", "# Set up tensors", "\n", "\t\t\t", "in_tensor", "=", "torch", ".", "tensor", "(", "[", "x", "[", "i", "]", "]", ")", ".", "float", "(", ")", "\n", "out_tensor", "=", "torch", ".", "tensor", "(", "[", "[", "element", "]", "]", ")", ".", "float", "(", ")", "\n", "\n", "# Run training steps", "\n", "_", ",", "loss", "=", "self", ".", "network", ".", "run", "(", "in_tensor", ",", "out_tensor", ")", "\n", "\n", "# Store loss", "\n", "loss_history", "=", "np", ".", "append", "(", "loss_history", ",", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "self", ".", "network", ",", "loss_history", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.evaluate_model": [[53, 78], ["numpy.corrcoef", "numpy.isnan", "torch.tensor().float", "numpy.append", "network.network().item", "torch.tensor", "network.network"], "methods", ["None"], ["", "def", "evaluate_model", "(", "self", ",", "network", ",", "x", ",", "y", ")", ":", "\n", "\t\t", "'''Evaluate the model against validation data'''", "\n", "\n", "# Set up a prediction list", "\n", "y_pred", "=", "[", "]", "\n", "\n", "# Iterate over all test data", "\n", "for", "element", "in", "x", ":", "\n", "\t\t\t", "in_tensor", "=", "torch", ".", "tensor", "(", "[", "element", "]", ")", ".", "float", "(", ")", "\n", "y_pred", "=", "np", ".", "append", "(", "y_pred", ",", "network", ".", "network", "(", "in_tensor", ")", ".", "item", "(", ")", ")", "\n", "\n", "# Get the error vector", "\n", "", "error", "=", "y_pred", "-", "y", "\n", "\n", "# Get the Pearson correlation, [-1, 1]", "\n", "corr", "=", "np", ".", "corrcoef", "(", "y_pred", ",", "y", ")", "\n", "\n", "# If the values are exactly the same throughout and constant, ", "\n", "# then we have a nan problem, but this is actually good correlation", "\n", "# for our purposes.", "\n", "if", "np", ".", "isnan", "(", "corr", "[", "0", "]", "[", "1", "]", ")", ":", "\n", "\t\t\t", "corr", "[", "0", "]", "[", "1", "]", "=", "1.", "\n", "\n", "# Return tuple with outputs", "\n", "", "return", "error", ",", "corr", "[", "0", "]", "[", "1", "]", ",", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.load_model": [[79, 98], ["deap.tools.fileHandler.load_pkl", "print"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl"], ["", "def", "load_model", "(", "self", ",", "modelsfile", ",", "modelnumber", "=", "-", "1", ")", ":", "\n", "\t\t", "'''Load the latest model from the trained pkl file\n\t\t\n\t\tdefault modelnumber = -1, which is the last (assumed newest) \n\t\t\t\t\t\t\t\t  model in the list\n\n\t\tIt then returns the model\n\t\t'''", "\n", "# Load the file with all the models", "\n", "try", ":", "\n", "\t\t\t", "m", "=", "fh", ".", "load_pkl", "(", "modelsfile", ")", "\n", "", "except", ":", "\n", "\t\t\t", "print", "(", "\"Model not specified!\"", ")", "\n", "\n", "# Set the desired model", "\n", "# (default=-1, highest on the list, assumed newest)", "\n", "", "self", ".", "network", "=", "m", "[", "modelnumber", "]", "[", "0", "]", "\n", "\n", "return", "self", ".", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.extract_states": [[99, 131], ["simulator.simulator", "simulator.simulator.load", "simulator.simulator.extract", "deap.tools.matrixOperations.normalize_rows", "deap.tools.fileHandler.load_pkl", "os.path.exists", "deap.tools.fileHandler.save_pkl"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.extract", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.save_pkl"], ["", "def", "extract_states", "(", "self", ",", "file", ",", "load_pkl", "=", "False", ",", "store_pkl", "=", "True", ")", ":", "\n", "\t\t", "'''Extract the inputs needed to maximize output'''", "\n", "\n", "# If a pkl file does not exist, then we still need to do some dirty", "\n", "# work and load everything from the log files.", "\n", "# We will also store the pkl version to save time in future runs.", "\n", "if", "load_pkl", "is", "False", "or", "os", ".", "path", ".", "exists", "(", "file", "+", "\".pkl\"", ")", "is", "False", ":", "\n", "# Pre-process data", "\n", "\t\t\t", "sim", "=", "simulator", ".", "simulator", "(", ")", "# Environment", "\n", "sim", ".", "load", "(", "file", ",", "verbose", "=", "False", ")", "# Load npz log file", "\n", "time", ",", "local_states", ",", "fitness", "=", "sim", ".", "extract", "(", ")", "# Pre-process data", "\n", "s", "=", "matop", ".", "normalize_rows", "(", "local_states", ")", "# Normalize rows", "\n", "\n", "# Save a pkl file with the pre-processed data", "\n", "# so that we can be faster later", "\n", "# if we want to reuse the same logfile", "\n", "if", "store_pkl", ":", "\n", "\t\t\t\t", "fh", ".", "save_pkl", "(", "[", "time", ",", "s", ",", "fitness", "]", ",", "file", "+", "\".pkl\"", ")", "\n", "\n", "# If the pkl file exists, we are in luck, we can just ", "\n", "# use the processed log files directly.", "\n", "", "", "else", ":", "\n", "\t\t\t", "data", "=", "fh", ".", "load_pkl", "(", "file", "+", "\".pkl\"", ")", "\n", "time", "=", "data", "[", "0", "]", "\n", "s", "=", "data", "[", "1", "]", "\n", "fitness", "=", "data", "[", "2", "]", "\n", "\n", "# Set dimensions of state vector", "\n", "", "self", ".", "dim", "=", "s", ".", "shape", "[", "1", "]", "\n", "\n", "# Return tuple with data", "\n", "return", "time", ",", "s", ",", "fitness", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor._fitness": [[132, 143], ["torch.tensor().float", "desired_states_extractor.desired_states_extractor.network.network().item", "torch.tensor", "desired_states_extractor.desired_states_extractor.network.network"], "methods", ["None"], ["", "def", "_fitness", "(", "self", ",", "individual", ")", ":", "\n", "\t\t", "'''Fitness function for the evolution'''", "\n", "\n", "# Normalize", "\n", "# individual = matop.normalize_rows(individual)", "\n", "\n", "# Set up tensor", "\n", "in_tensor", "=", "torch", ".", "tensor", "(", "[", "individual", "]", ")", ".", "float", "(", ")", "\n", "\n", "# Return estimated fitness from network", "\n", "return", "self", ".", "network", ".", "network", "(", "in_tensor", ")", ".", "item", "(", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.get_des": [[144, 174], ["evolution.evolution", "evolution.evolution.setup", "evolution.evolution.evolve", "evolution.evolution.get_best", "evolution.evolution.plot_evolution"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.evolve", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.get_best", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_evolution.plot_evolution"], ["", "def", "get_des", "(", "self", ",", "dim", "=", "None", ",", "popsize", "=", "100", ",", "gens", "=", "500", ",", "debug", "=", "False", ")", ":", "\n", "\t\t", "'''\n\t\tRuns an evolutionary optimization to extract \n\t\tthe states that maximize the fitness\n\t\t'''", "\n", "\n", "# Initialize evolution", "\n", "e", "=", "evolution", ".", "evolution", "(", ")", "\n", "\n", "# Set desired dimensions if specified", "\n", "if", "dim", "is", "None", ":", "\n", "\t\t\t", "d", "=", "self", ".", "dim", "\n", "", "else", ":", "\n", "\t\t\t", "d", "=", "dim", "\n", "\n", "# Set up boolean evolution", "\n", "", "e", ".", "setup", "(", "self", ".", "_fitness", ",", "GENOME_LENGTH", "=", "d", ",", "\n", "POPULATION_SIZE", "=", "popsize", ",", "vartype", "=", "\"boolean\"", ")", "\n", "\n", "# Evolve", "\n", "e", ".", "evolve", "(", "verbose", "=", "True", ",", "generations", "=", "gens", ")", "\n", "\n", "# Get desired observation set", "\n", "des", "=", "e", ".", "get_best", "(", ")", "\n", "\n", "# Show a plot of the evolution, if plot=True", "\n", "if", "debug", ":", "\n", "\t\t\t", "e", ".", "plot_evolution", "(", ")", "\n", "\n", "", "return", "des", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.train": [[175, 201], ["desired_states_extractor.desired_states_extractor.extract_states", "range", "print", "desired_states_extractor.desired_states_extractor.train_model"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.extract_states", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.train_model"], ["", "def", "train", "(", "self", ",", "file", ",", "load_pkl", "=", "True", ",", "store_pkl", "=", "True", ",", "\n", "verbose", "=", "False", ",", "replay", "=", "1", ",", "\n", "layers", "=", "3", ",", "layer_size", "=", "100", ",", "lr", "=", "1e-6", ")", ":", "\n", "\t\t", "'''\n\t\tTrains a model based on an npz simulation log file\n\t\t\n\t\tUse replay to re-iterate over the same data\n\t\t'''", "\n", "\n", "# Extract t = time, o = local observations, f = global fitness", "\n", "t", ",", "o", ",", "f", "=", "self", ".", "extract_states", "(", "file", ",", "\n", "load_pkl", "=", "load_pkl", ",", "\n", "store_pkl", "=", "store_pkl", ")", "\n", "\n", "# Optimize to get the desired observation set", "\n", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"Training the NN model\"", ")", "\n", "\n", "# Train the feedforward model", "\n", "", "for", "i", "in", "range", "(", "replay", ")", ":", "\n", "\t\t\t", "model", "=", "self", ".", "train_model", "(", "o", ",", "f", ",", "\n", "layers", "=", "layers", ",", "\n", "layer_size", "=", "layer_size", ",", "\n", "lr", "=", "lr", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.run": [[202, 224], ["desired_states_extractor.desired_states_extractor.train", "desired_states_extractor.desired_states_extractor.get_des", "print", "print", "str"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.train", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.get_des"], ["", "def", "run", "(", "self", ",", "file", ",", "load", "=", "True", ",", "replay", "=", "1", ",", "verbose", "=", "False", ")", ":", "\n", "\t\t", "'''\n\t\tRun the whole process with one function: \n\t\t1) Train, \n\t\t2) Get desired set Odes\n\n\t\tUse replay to re-iterate over the same data\n\t\t'''", "\n", "\n", "# Train the model", "\n", "self", ".", "train", "(", "file", ",", "replay", "=", "replay", ")", "\n", "\n", "# Get the desired states from the trained network", "\n", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"Optimizing for desired observations\"", ")", "\n", "\n", "", "des", "=", "self", ".", "get_des", "(", "plot", "=", "verbose", ",", "popsize", "=", "500", ")", "\n", "\n", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"Desired observations: \"", "+", "str", "(", "des", ")", ")", "\n", "\n", "", "return", "des", "\n", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.network.ffnetwork.__init__": [[9, 24], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.__init__"], ["\t", "def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "layer_size", "=", "30", ",", "layers", "=", "3", ")", ":", "\n", "\t\t", "'''Initialization function. Set here the hyperparameters'''", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Number of layers", "\n", "self", ".", "layers", "=", "layers", "\n", "\n", "# Define layers", "\n", "## Input, middle, and output layers", "\n", "self", ".", "fc_in", "=", "torch", ".", "nn", ".", "Linear", "(", "n_inputs", ",", "layer_size", ")", "\n", "self", ".", "fc_mid", "=", "torch", ".", "nn", ".", "Linear", "(", "layer_size", ",", "layer_size", ")", "\n", "self", ".", "fc_out", "=", "torch", ".", "nn", ".", "Linear", "(", "layer_size", ",", "n_outputs", ")", "\n", "\n", "## ReLU", "\n", "self", ".", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.network.ffnetwork.forward": [[25, 35], ["network.ffnetwork.relu", "range", "network.ffnetwork.fc_out", "network.ffnetwork.fc_in", "network.ffnetwork.relu", "network.ffnetwork.fc_mid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Run input layer", "\n", "\t\t", "x", "=", "self", ".", "relu", "(", "self", ".", "fc_in", "(", "x", ")", ")", "\n", "\n", "# Run middle layers", "\n", "for", "i", "in", "range", "(", "self", ".", "layers", ")", ":", "\n", "\t\t\t", "x", "=", "self", ".", "relu", "(", "self", ".", "fc_mid", "(", "x", ")", ")", "\n", "\n", "# Run output layer", "\n", "", "return", "self", ".", "fc_out", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.network.net.__init__": [[37, 49], ["network.ffnetwork", "torch.nn.MSELoss", "torch.optim.Adam", "network.net.network.parameters"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "layers", ",", "layer_size", ",", "lr", "=", "1e-5", ")", ":", "\n", "\t\t", "'''Initialization function. Set here the hyperparameters'''", "\n", "# Define network", "\n", "self", ".", "network", "=", "ffnetwork", "(", "n_inputs", ",", "n_outputs", ",", "\n", "layer_size", "=", "layer_size", ",", "\n", "layers", "=", "layers", ")", "\n", "\n", "# MSE Loss function, to recreate desired outputs values", "\n", "self", ".", "loss_fn", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# Adam optimizer", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.network.net.run": [[50, 64], ["network.net.network", "network.net.loss_fn", "network.net.optimizer.zero_grad", "network.net.backward", "network.net.optimizer.step"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\t\t", "'''Runs the network with some new x and y data and optimizes it'''", "\n", "# Forward", "\n", "y_pred", "=", "self", ".", "network", "(", "x", ")", "\n", "\n", "# Loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "y_pred", ",", "y", ")", "\n", "\n", "# Backward and optimize", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "y_pred", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.network.net.get": [[65, 68], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "\t\t", "'''Returns the current network'''", "\n", "return", "self", ".", "network", "", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.__init__": [[25, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "'''Itialize the DEAP wrapper'''", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.setup": [[29, 97], ["deap.base.Toolbox", "evolution.evolution.toolbox.register", "evolution.evolution.toolbox.register", "evolution.evolution.toolbox.register", "evolution.evolution.toolbox.register", "evolution.evolution.toolbox.register", "evolution.evolution.toolbox.register", "evolution.evolution.toolbox.register", "evolution.evolution.toolbox.decorate", "evolution.evolution.toolbox.register", "evolution.evolution.toolbox.register", "evolution.evolution.toolbox.register", "deap.tools.DeltaPenalty"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "fitness_function_handle", ",", "\n", "constraint", "=", "None", ",", "\n", "GENOME_LENGTH", "=", "20", ",", "\n", "POPULATION_SIZE", "=", "100", ",", "\n", "P_CROSSOVER", "=", "0.5", ",", "\n", "P_MUTATION", "=", "0.2", ",", "\n", "vartype", "=", "\"float\"", ")", ":", "\n", "\t\t", "'''Set up the standard parameters'''", "\n", "\n", "# Set the main variables", "\n", "self", ".", "GENOME_LENGTH", "=", "GENOME_LENGTH", "\n", "self", ".", "POPULATION_SIZE", "=", "POPULATION_SIZE", "\n", "self", ".", "P_CROSSOVER", "=", "P_CROSSOVER", "\n", "self", ".", "P_MUTATION", "=", "P_MUTATION", "\n", "\n", "# Set the lower level parameters", "\n", "self", ".", "toolbox", "=", "base", ".", "Toolbox", "(", ")", "\n", "\n", "# Boolean or float evolution", "\n", "if", "vartype", "==", "\"boolean\"", ":", "\n", "\t\t\t", "self", ".", "toolbox", ".", "register", "(", "\"attr_bool\"", ",", "\n", "random", ".", "randint", ",", "0", ",", "1", ")", "\n", "self", ".", "toolbox", ".", "register", "(", "\"individual\"", ",", "\n", "tools", ".", "initRepeat", ",", "\n", "creator", ".", "Individual", ",", "\n", "self", ".", "toolbox", ".", "attr_bool", ",", "\n", "GENOME_LENGTH", ")", "\n", "self", ".", "toolbox", ".", "register", "(", "\"mutate\"", ",", "\n", "tools", ".", "mutUniformInt", ",", "\n", "low", "=", "0", ",", "\n", "up", "=", "1", ",", "\n", "indpb", "=", "0.05", ")", "\n", "", "elif", "vartype", "==", "\"float\"", ":", "\n", "\t\t\t", "self", ".", "toolbox", ".", "register", "(", "\"attr_float\"", ",", "\n", "random", ".", "random", ")", "\n", "self", ".", "toolbox", ".", "register", "(", "\"individual\"", ",", "\n", "tools", ".", "initRepeat", ",", "\n", "creator", ".", "Individual", ",", "\n", "self", ".", "toolbox", ".", "attr_float", ",", "\n", "self", ".", "GENOME_LENGTH", ")", "\n", "\n", "self", ".", "toolbox", ".", "register", "(", "\"mutate\"", ",", "\n", "tools", ".", "mutPolynomialBounded", ",", "\n", "eta", "=", "0.1", ",", "\n", "low", "=", "0.0", ",", "\n", "up", "=", "1.0", ",", "\n", "indpb", "=", "0.1", ")", "\n", "\n", "", "self", ".", "toolbox", ".", "register", "(", "\"population\"", ",", "\n", "tools", ".", "initRepeat", ",", "\n", "list", ",", "\n", "self", ".", "toolbox", ".", "individual", ")", "\n", "\n", "self", ".", "toolbox", ".", "register", "(", "\"evaluate\"", ",", "\n", "fitness_function_handle", ")", "\n", "\n", "self", ".", "toolbox", ".", "register", "(", "\"mate\"", ",", "\n", "tools", ".", "cxUniform", ",", "indpb", "=", "0.1", ")", "\n", "\n", "self", ".", "toolbox", ".", "register", "(", "\"select\"", ",", "\n", "tools", ".", "selTournament", ",", "\n", "tournsize", "=", "3", ")", "\n", "\n", "if", "constraint", "is", "not", "None", ":", "\n", "\t\t\t\t", "self", ".", "toolbox", ".", "decorate", "(", "\"evaluate\"", ",", "\n", "tools", ".", "DeltaPenalty", "(", "constraint", ",", "0", ",", "self", ".", "distance", ")", ")", "\n", "\n", "", "self", ".", "stats", "=", "[", "]", "# Initialize stats vector", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.store_stats": [[98, 110], ["numpy.mean", "numpy.std", "numpy.max", "numpy.min"], "methods", ["None"], ["", "def", "store_stats", "(", "self", ",", "population", ",", "iteration", "=", "0", ")", ":", "\n", "\t\t", "'''Store the current stats and return a dict'''", "\n", "# Gather the fitnesses in a population", "\n", "fitnesses", "=", "[", "individual", ".", "fitness", ".", "values", "[", "0", "]", "for", "individual", "in", "population", "]", "\n", "\n", "# Store the main values", "\n", "return", "{", "\n", "'g'", ":", "iteration", ",", "\n", "'mu'", ":", "np", ".", "mean", "(", "fitnesses", ")", ",", "\n", "'std'", ":", "np", ".", "std", "(", "fitnesses", ")", ",", "\n", "'max'", ":", "np", ".", "max", "(", "fitnesses", ")", ",", "\n", "'min'", ":", "np", ".", "min", "(", "fitnesses", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.disp_stats": [[112, 126], ["sys.stdout.write", "sys.stdout.flush"], "methods", ["None"], ["", "def", "disp_stats", "(", "self", ",", "iteration", "=", "0", ")", ":", "\n", "\t\t", "'''Print the current stats to the terminal'''", "\n", "\n", "# String to print", "\n", "p", "=", "\"\\r >> gen = %i, mu = %.2f, std = %.2f, max = %.2f, min = %.2f\"", "%", "(", "\n", "self", ".", "stats", "[", "iteration", "]", "[", "'g'", "]", ",", "\n", "self", ".", "stats", "[", "iteration", "]", "[", "'mu'", "]", ",", "\n", "self", ".", "stats", "[", "iteration", "]", "[", "'std'", "]", ",", "\n", "self", ".", "stats", "[", "iteration", "]", "[", "'max'", "]", ",", "\n", "self", ".", "stats", "[", "iteration", "]", "[", "'min'", "]", ")", "\n", "\n", "# Sys write + flush", "\n", "sys", ".", "stdout", ".", "write", "(", "p", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.plot_evolution": [[127, 164], ["matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.figure", "matplotlib.figure", "matplotlib.gcf().subplots_adjust", "matplotlib.gcf().subplots_adjust", "matplotlib.plot", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.fill_between", "matplotlib.fill_between", "matplotlib.fill_between", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.legend", "matplotlib.xlim", "matplotlib.xlim", "range", "range", "range", "len", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "matplotlib.show", "matplotlib.show", "matplotlib.close", "matplotlib.close", "matplotlib.gcf", "matplotlib.gcf", "len", "len", "len"], "methods", ["None"], ["", "def", "plot_evolution", "(", "self", ",", "figurename", "=", "None", ")", ":", "\n", "\t\t", "'''Plot the evolution outcome'''", "\n", "\n", "# Set up latex", "\n", "plt", ".", "rc", "(", "'text'", ",", "usetex", "=", "True", ")", "\n", "plt", ".", "rc", "(", "'font'", ",", "family", "=", "'serif'", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "3", ")", ")", "\n", "plt", ".", "gcf", "(", ")", ".", "subplots_adjust", "(", "bottom", "=", "0.15", ")", "\n", "\n", "# Plot", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "len", "(", "self", ".", "stats", ")", "+", "1", ")", ",", "\n", "[", "s", "[", "'mu'", "]", "for", "s", "in", "self", ".", "stats", "]", ",", "\n", "label", "=", "\"Mean\"", ")", "\n", "plt", ".", "fill_between", "(", "range", "(", "1", ",", "len", "(", "self", ".", "stats", ")", "+", "1", ")", ",", "\n", "[", "s", "[", "'min'", "]", "for", "s", "in", "self", ".", "stats", "]", ",", "\n", "[", "s", "[", "'max'", "]", "for", "s", "in", "self", ".", "stats", "]", ",", "\n", "color", "=", "'green'", ",", "\n", "alpha", "=", "0.2", ",", "\n", "label", "=", "\"Min Max\"", ")", "\n", "plt", ".", "fill_between", "(", "range", "(", "1", ",", "len", "(", "self", ".", "stats", ")", "+", "1", ")", ",", "\n", "[", "s", "[", "'mu'", "]", "-", "s", "[", "'std'", "]", "for", "s", "in", "self", ".", "stats", "]", ",", "\n", "[", "s", "[", "'mu'", "]", "+", "s", "[", "'std'", "]", "for", "s", "in", "self", ".", "stats", "]", ",", "\n", "color", "=", "'gray'", ",", "\n", "alpha", "=", "0.5", ",", "\n", "label", "=", "\"Std\"", ")", "\n", "plt", ".", "xlabel", "(", "'Iterations'", ")", "\n", "plt", ".", "ylabel", "(", "'Fitness'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "len", "(", "self", ".", "stats", ")", ")", "\n", "\n", "# Save if a figurename was given, else just show it", "\n", "if", "figurename", "is", "not", "None", ":", "\n", "\t\t\t", "plt", ".", "savefig", "(", "figurename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.evolve": [[165, 246], ["random.seed", "list", "zip", "len", "evolution.evolution.get_best", "evolution.evolution.toolbox.population", "print", "map", "len", "evolution.evolution.toolbox.select", "list", "zip", "map", "zip", "evolution.evolution.stats.append", "evolution.evolution.save", "print", "print", "len", "map", "evolution.evolution.store_stats", "evolution.evolution.disp_stats", "evolution.evolution.save", "random.random", "evolution.evolution.toolbox.mate", "random.random", "evolution.evolution.toolbox.mutate"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.get_best", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.save", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.store_stats", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.disp_stats", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.save"], ["", "", "def", "evolve", "(", "self", ",", "generations", "=", "100", ",", "\n", "verbose", "=", "False", ",", "population", "=", "None", ",", "checkpoint", "=", "None", ")", ":", "\n", "\t\t", "'''\n\t\tRun the evolution. Use checkpoint=\"filename.pkl\" to \n\t\tsave the status to a file after each generation, \n\t\tjust in case.\n\t\t'''", "\n", "\n", "# Set up a random seed", "\n", "random", ".", "seed", "(", ")", "\n", "\n", "# Initialize the population (if not given)", "\n", "pop", "=", "population", "if", "population", "is", "not", "None", "else", "self", ".", "toolbox", ".", "population", "(", "n", "=", "self", ".", "POPULATION_SIZE", ")", "\n", "\n", "# Inform the user of what's happening", "\n", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "'{:=^40}'", ".", "format", "(", "' Start of evolution '", ")", ")", "\n", "\n", "# Evaluate the initial population", "\n", "", "fitnesses", "=", "list", "(", "map", "(", "self", ".", "toolbox", ".", "evaluate", ",", "pop", ")", ")", "\n", "for", "ind", ",", "fit", "in", "zip", "(", "pop", ",", "fitnesses", ")", ":", "\n", "\t\t\t", "ind", ".", "fitness", ".", "values", "=", "fit", "\n", "\n", "# Start the evoution", "\n", "", "g", "=", "len", "(", "self", ".", "stats", ")", "# Number of generations", "\n", "gmax", "=", "len", "(", "self", ".", "stats", ")", "+", "generations", "# Max number to reach", "\n", "while", "g", "<", "gmax", ":", "\n", "\n", "# Determine offspring", "\n", "\t\t\t", "offspring", "=", "self", ".", "toolbox", ".", "select", "(", "pop", ",", "len", "(", "pop", ")", ")", "\n", "offspring", "=", "list", "(", "map", "(", "self", ".", "toolbox", ".", "clone", ",", "offspring", ")", ")", "\n", "for", "child1", ",", "child2", "in", "zip", "(", "offspring", "[", ":", ":", "2", "]", ",", "offspring", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "\t\t\t\t", "if", "random", ".", "random", "(", ")", "<", "self", ".", "P_CROSSOVER", ":", "\n", "\t\t\t\t\t", "self", ".", "toolbox", ".", "mate", "(", "child1", ",", "child2", ")", "\n", "", "del", "child1", ".", "fitness", ".", "values", "\n", "del", "child2", ".", "fitness", ".", "values", "\n", "\n", "# Mutate", "\n", "", "for", "mutant", "in", "offspring", ":", "\n", "\t\t\t\t", "if", "random", ".", "random", "(", ")", "<", "self", ".", "P_MUTATION", ":", "\n", "\t\t\t\t\t", "self", ".", "toolbox", ".", "mutate", "(", "mutant", ")", "\n", "", "del", "mutant", ".", "fitness", ".", "values", "\n", "\n", "# Evaluate the individuals with an invalid fitness", "\n", "", "invalid_ind", "=", "[", "ind", "for", "ind", "in", "offspring", "if", "not", "ind", ".", "fitness", ".", "valid", "]", "\n", "fitnesses", "=", "map", "(", "self", ".", "toolbox", ".", "evaluate", ",", "invalid_ind", ")", "\n", "for", "ind", ",", "fit", "in", "zip", "(", "invalid_ind", ",", "fitnesses", ")", ":", "\n", "\t\t\t\t", "ind", ".", "fitness", ".", "values", "=", "fit", "\n", "\n", "# Replace population", "\n", "", "pop", "[", ":", "]", "=", "offspring", "\n", "\n", "# Store stats", "\n", "self", ".", "stats", ".", "append", "(", "self", ".", "store_stats", "(", "pop", ",", "g", ")", ")", "\n", "\n", "# Print to terminal", "\n", "if", "verbose", ":", "self", ".", "disp_stats", "(", "g", ")", "\n", "\n", "# Store progress", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "\t\t\t\t", "self", ".", "save", "(", "checkpoint", ",", "pop", "=", "pop", ",", "gen", "=", "g", ",", "stats", "=", "self", ".", "stats", ")", "\n", "\n", "# Move to next generation", "\n", "", "g", "+=", "1", "\n", "\n", "# Store oucomes", "\n", "", "self", ".", "pop", "=", "pop", "\n", "self", ".", "best_ind", "=", "self", ".", "get_best", "(", ")", "\n", "self", ".", "g", "=", "g", "\n", "\n", "# Save to checkpoint file", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "save", "(", "checkpoint", ")", "\n", "\n", "# Display outcome", "\n", "", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "'\\n{:=^40}'", ".", "format", "(", "' End of evolution '", ")", ")", "\n", "print", "(", "\"Best individual is %s, %s\"", "%", "(", "self", ".", "best_ind", ",", "self", ".", "best_ind", ".", "fitness", ".", "values", ")", ")", "\n", "\n", "", "return", "pop", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.save": [[247, 263], ["dict", "open", "pickle.dump"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ",", "pop", "=", "None", ",", "gen", "=", "None", ",", "stats", "=", "None", ")", ":", "\n", "\t\t", "'''Save the current status in a pkl file'''", "\n", "\n", "# Population", "\n", "p", "=", "self", ".", "pop", "if", "pop", "is", "None", "else", "pop", "\n", "\n", "# Generation", "\n", "g", "=", "self", ".", "g", "if", "gen", "is", "None", "else", "gen", "\n", "\n", "# Statistics", "\n", "s", "=", "self", ".", "stats", "if", "stats", "is", "None", "else", "stats", "\n", "\n", "# Store in a dict file and save as pkl", "\n", "cp", "=", "dict", "(", "population", "=", "p", ",", "generation", "=", "g", ",", "stats", "=", "s", ")", "\n", "with", "open", "(", "filename", "+", "\".pkl\"", ",", "\"wb\"", ")", "as", "cp_file", ":", "\n", "\t\t\t", "pickle", ".", "dump", "(", "cp", ",", "cp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.load": [[264, 277], ["open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load"], ["", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "'''Load the status from a pkl file'''", "\n", "# Load a pkl file with the same structure as in the save() function", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "cp_file", ":", "\n", "\t\t\t", "cp", "=", "pickle", ".", "load", "(", "cp_file", ")", "\n", "\n", "# Unpack", "\n", "", "self", ".", "stats", "=", "cp", "[", "\"stats\"", "]", "\n", "self", ".", "g", "=", "cp", "[", "\"generation\"", "]", "\n", "self", ".", "pop", "=", "cp", "[", "\"population\"", "]", "\n", "\n", "# Return the population", "\n", "return", "self", ".", "pop", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.get_best": [[278, 285], ["deap.tools.selBest"], "methods", ["None"], ["", "def", "get_best", "(", "self", ",", "pop", "=", "None", ")", ":", "\n", "\t\t", "'''Returns the fittest element of a population'''", "\n", "# Get population", "\n", "p", "=", "self", ".", "pop", "if", "pop", "is", "None", "else", "pop", "\n", "\n", "# Return the best", "\n", "return", "tools", ".", "selBest", "(", "p", ",", "1", ")", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.__init__": [[31, 47], ["evolution.evolution.__init__", "simulator.simulator", "desired_states_extractor.desired_states_extractor", "mbe.mbe.clear_model_data"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.__init__", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.clear_model_data"], ["def", "__init__", "(", "self", ",", "model_temp_folder", ")", ":", "\n", "\t\t", "'''Initialize'''", "\n", "\n", "# Load up the evolution class. ", "\n", "# We only wish to replace the evolve function", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Set up the simulator API which includes the model-based optimization", "\n", "self", ".", "sim", "=", "simulator", ".", "simulator", "(", ")", "\n", "\n", "# Desired states neural network model", "\n", "self", ".", "dse", "=", "desired_states_extractor", ".", "desired_states_extractor", "(", ")", "\n", "\n", "# Set up a temp folder used to store the logs during the evolution", "\n", "self", ".", "temp_folder", "=", "model_temp_folder", "\n", "self", ".", "clear_model_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.store_stats": [[48, 66], ["numpy.mean", "numpy.std", "numpy.max", "numpy.min"], "methods", ["None"], ["", "def", "store_stats", "(", "self", ",", "population", ",", "iteration", "=", "0", ",", "\n", "transition_model", "=", "None", ",", "nn", "=", "None", ")", ":", "\n", "\t\t", "'''\n\t\tStore the current stats and return a dict.\n\t\tIn this subclass, also store the transition model and the NN model\n\t\t'''", "\n", "# Gather the fitnesses in a population", "\n", "fitnesses", "=", "[", "individual", ".", "fitness", ".", "values", "[", "0", "]", "for", "individual", "in", "population", "]", "\n", "\n", "# Store the main values", "\n", "return", "{", "\n", "'g'", ":", "iteration", ",", "\n", "'mu'", ":", "np", ".", "mean", "(", "fitnesses", ")", ",", "\n", "'std'", ":", "np", ".", "std", "(", "fitnesses", ")", ",", "\n", "'max'", ":", "np", ".", "max", "(", "fitnesses", ")", ",", "\n", "'min'", ":", "np", ".", "min", "(", "fitnesses", ")", ",", "\n", "'transition_model'", ":", "transition_model", ",", "\n", "'nn_model'", ":", "nn", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe._mate": [[68, 78], ["mbe.mbe.toolbox.select", "list", "zip", "len", "map", "random.random", "mbe.mbe.toolbox.mate"], "methods", ["None"], ["", "def", "_mate", "(", "self", ",", "pop", ")", ":", "\n", "\t\t", "'''Mate the population and generate offspring'''", "\n", "offspring", "=", "self", ".", "toolbox", ".", "select", "(", "pop", ",", "len", "(", "pop", ")", ")", "\n", "offspring", "=", "list", "(", "map", "(", "self", ".", "toolbox", ".", "clone", ",", "offspring", ")", ")", "\n", "for", "child1", ",", "child2", "in", "zip", "(", "offspring", "[", ":", ":", "2", "]", ",", "offspring", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "\t\t\t", "if", "random", ".", "random", "(", ")", "<", "self", ".", "P_CROSSOVER", ":", "\n", "\t\t\t\t", "self", ".", "toolbox", ".", "mate", "(", "child1", ",", "child2", ")", "\n", "", "del", "child1", ".", "fitness", ".", "values", "\n", "del", "child2", ".", "fitness", ".", "values", "\n", "", "return", "offspring", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe._mutate": [[79, 86], ["random.random", "mbe.mbe.toolbox.mutate"], "methods", ["None"], ["", "def", "_mutate", "(", "self", ",", "offspring", ")", ":", "\n", "\t\t", "'''Mutate the offspring'''", "\n", "for", "mutant", "in", "offspring", ":", "\n", "\t\t\t", "if", "random", ".", "random", "(", ")", "<", "self", ".", "P_MUTATION", ":", "\n", "\t\t\t\t", "self", ".", "toolbox", ".", "mutate", "(", "mutant", ")", "\n", "", "del", "mutant", ".", "fitness", ".", "values", "\n", "", "return", "offspring", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe._evaluate": [[87, 94], ["map", "zip"], "methods", ["None"], ["", "def", "_evaluate", "(", "self", ",", "offspring", ")", ":", "\n", "\t\t", "'''Evaluate the offspring with unknown fitness'''", "\n", "invalid_ind", "=", "[", "ind", "for", "ind", "in", "offspring", "if", "not", "ind", ".", "fitness", ".", "valid", "]", "\n", "fitnesses", "=", "map", "(", "self", ".", "toolbox", ".", "evaluate", ",", "invalid_ind", ")", "\n", "for", "ind", ",", "fit", "in", "zip", "(", "invalid_ind", ",", "fitnesses", ")", ":", "\n", "\t\t\t", "ind", ".", "fitness", ".", "values", "=", "fit", "\n", "", "return", "offspring", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.evolve": [[95, 229], ["random.seed", "len", "mbe.mbe.get_best", "mbe.mbe.toolbox.population", "len", "list", "zip", "print", "mbe.mbe._mate", "mbe.mbe._mutate", "mbe.mbe._evaluate", "enumerate", "numpy.random.rand", "list", "mbe.mbe.toolbox.individual", "mbe.mbe.toolbox.evaluate", "mbe.mbe.clear_model_data", "mbe.mbe.stats.append", "mbe.mbe.save", "print", "print", "map", "mbe.mbe.dse.load_model", "mbe.mbe.sim.optimize().flatten", "mbe.mbe.store_stats", "mbe.mbe.disp_stats", "mbe.mbe.save", "os.listdir", "f.endswith", "mbe.mbe.sim.load", "mbe.mbe.sim.load_update", "mbe.mbe.dse.train", "copy.deepcopy", "copy.deepcopy", "mbe.mbe.sim.optimize"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.get_best", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe._mate", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe._mutate", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe._evaluate", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.clear_model_data", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.save", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.load_model", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.store_stats", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.disp_stats", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.save", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.load_update", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.train", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.optimize"], ["", "def", "evolve", "(", "self", ",", "generations", "=", "100", ",", "\n", "verbose", "=", "False", ",", "\n", "population", "=", "None", ",", "\n", "checkpoint", "=", "None", ",", "\n", "settings", "=", "None", ",", "\n", "pretrained", "=", "False", ")", ":", "\n", "\t\t", "'''\n\t\tRun the evolution. Use checkpoint=\"filename.pkl\" to \n\t\tsave the status to a file after each generation, \n\t\tjust in case.\n\t\t'''", "\n", "\n", "# Set up a random seed", "\n", "random", ".", "seed", "(", ")", "\n", "\n", "# Initialize the population (if not given)", "\n", "pop", "=", "population", "if", "population", "is", "not", "None", "else", "self", ".", "toolbox", ".", "population", "(", "n", "=", "self", ".", "POPULATION_SIZE", ")", "\n", "\n", "g", "=", "len", "(", "self", ".", "stats", ")", "# Number of generations", "\n", "gmax", "=", "len", "(", "self", ".", "stats", ")", "+", "generations", "# Max number to reach", "\n", "\n", "# If it's the first generation, evaluate the initial population", "\n", "if", "g", "is", "0", ":", "\n", "# Evaluate the initial population", "\n", "\t\t\t", "fitnesses", "=", "list", "(", "map", "(", "self", ".", "toolbox", ".", "evaluate", ",", "pop", ")", ")", "\n", "for", "ind", ",", "fit", "in", "zip", "(", "pop", ",", "fitnesses", ")", ":", "\n", "\t\t\t\t", "ind", ".", "fitness", ".", "values", "=", "fit", "\n", "\n", "# Inform the user of what's happening", "\n", "", "", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "'{:=^40}'", ".", "format", "(", "' Start of evolution '", ")", ")", "\n", "\n", "# Start the evoution", "\n", "", "while", "g", "<", "gmax", ":", "\n", "\n", "# Create the next generation: 1) mate, 2) mutate, 3) evaluate", "\n", "\t\t\t", "offspring", "=", "self", ".", "_mate", "(", "pop", ")", "\n", "offspring", "=", "self", ".", "_mutate", "(", "offspring", ")", "\n", "offspring", "=", "self", ".", "_evaluate", "(", "offspring", ")", "\n", "\n", "# Replace population", "\n", "pop", "[", ":", "]", "=", "offspring", "\n", "\n", "#################################################################", "\n", "# Model-based section.", "\n", "# We use the data from the population to extract 2 models:", "\n", "# 1) A model of the transitions", "\n", "# 2) A function relating global fitness to local states", "\n", "\n", "# Load log files from evolution", "\n", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "temp_folder", ")", "if", "f", ".", "endswith", "(", "'.npz'", ")", "]", "\n", "\n", "# 1) Transition model", "\n", "# The very first time, initialize the model, then just update it", "\n", "for", "j", ",", "f", "in", "enumerate", "(", "files", ")", ":", "\n", "\t\t\t\t", "if", "g", "is", "0", "and", "j", "is", "0", ":", "\n", "# This is the very first time", "\n", "\t\t\t\t\t", "self", ".", "sim", ".", "load", "(", "self", ".", "temp_folder", "+", "f", ",", "verbose", "=", "False", ")", "\n", "", "else", ":", "\n", "# From now on, we just update", "\n", "\t\t\t\t\t", "self", ".", "sim", ".", "load_update", "(", "self", ".", "temp_folder", "+", "f", ",", "verbose", "=", "False", ")", "\n", "\n", "# 2) Neural network function", "\n", "## Initial policy to optimize from a random point", "\n", "", "", "p", "=", "np", ".", "random", ".", "rand", "(", "settings", "[", "\"pr_states\"", "]", ",", "settings", "[", "\"pr_actions\"", "]", ")", "\n", "\n", "## Train the feedforward model with new data", "\n", "if", "pretrained", "is", "False", ":", "\n", "\t\t\t\t", "for", "f", "in", "files", ":", "\n", "\t\t\t\t\t", "self", ".", "dse", ".", "train", "(", "\"data/evo_temp/\"", "+", "f", ",", "\n", "load_pkl", "=", "False", ",", "store_pkl", "=", "False", ")", "\n", "", "model", "=", "self", ".", "dse", ".", "network", "\n", "", "else", ":", "\n", "\t\t\t\t", "model", "=", "self", ".", "dse", ".", "load_model", "(", "\"data/%s/models.pkl\"", "%", "\n", "settings", "[", "\"controller\"", "]", ",", "modelnumber", "=", "499", ")", "\n", "\n", "## Use the models to do model-based optimization", "\n", "", "p", "=", "list", "(", "self", ".", "sim", ".", "optimize", "(", "p", ",", "\n", "settings", "=", "settings", ",", "\n", "model", "=", "model", ",", "\n", "debug", "=", "False", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "## Evaluate model-based solution", "\n", "### Create an individual", "\n", "ind", "=", "self", ".", "toolbox", ".", "individual", "(", ")", "\n", "\n", "### Replace individual with the model optimized solution", "\n", "ind", "[", ":", "]", "=", "p", "\n", "\n", "### Evaluate individual", "\n", "ind", ".", "fitness", ".", "values", "=", "self", ".", "toolbox", ".", "evaluate", "(", "ind", ")", "\n", "\n", "## Replace optimized policy in population", "\n", "pop", "[", "-", "1", "]", "=", "ind", "\n", "\n", "## Clear temp folder", "\n", "self", ".", "clear_model_data", "(", ")", "\n", "#################################################################", "\n", "\n", "# Store stats", "\n", "self", ".", "stats", ".", "append", "(", "self", ".", "store_stats", "(", "\n", "pop", ",", "\n", "g", ",", "\n", "copy", ".", "deepcopy", "(", "self", ".", "sim", ")", ",", "\n", "copy", ".", "deepcopy", "(", "model", ")", ")", ")", "\n", "\n", "# Print to terminal", "\n", "if", "verbose", ":", "\n", "\t\t\t\t", "self", ".", "disp_stats", "(", "g", ")", "\n", "\n", "# Store progress", "\n", "", "if", "checkpoint", "is", "not", "None", ":", "\n", "\t\t\t\t", "self", ".", "save", "(", "checkpoint", ",", "pop", "=", "pop", ",", "gen", "=", "g", ",", "stats", "=", "self", ".", "stats", ")", "\n", "\n", "# Move to next generation", "\n", "", "g", "+=", "1", "\n", "\n", "# Store oucomes", "\n", "", "self", ".", "pop", "=", "pop", "\n", "self", ".", "best_ind", "=", "self", ".", "get_best", "(", ")", "\n", "self", ".", "g", "=", "g", "\n", "\n", "# Save to checkpoint file", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "save", "(", "checkpoint", ")", "\n", "\n", "# Display outcome", "\n", "", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "'\\n{:=^40}'", ".", "format", "(", "' End of evolution '", ")", ")", "\n", "print", "(", "\"Best individual is %s, %s\"", "%", "(", "self", ".", "best_ind", ",", "self", ".", "best_ind", ".", "fitness", ".", "values", ")", ")", "\n", "\n", "", "return", "pop", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.clear_model_data": [[230, 232], ["deap.tools.fileHandler.clear_folder"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.clear_folder"], ["", "def", "clear_model_data", "(", "self", ")", ":", "\n", "\t\t", "fh", ".", "clear_folder", "(", "self", ".", "temp_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.save": [[233, 255], ["dict", "open", "pickle.dump"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ",", "pop", "=", "None", ",", "gen", "=", "None", ",", "stats", "=", "None", ",", "sim", "=", "None", ",", "dse", "=", "None", ")", ":", "\n", "\t\t", "'''Save the current status in a pkl file'''", "\n", "\n", "# Population", "\n", "p", "=", "self", ".", "pop", "if", "pop", "is", "None", "else", "pop", "\n", "\n", "# Generation", "\n", "g", "=", "self", ".", "g", "if", "gen", "is", "None", "else", "gen", "\n", "\n", "# Statistics", "\n", "s", "=", "self", ".", "stats", "if", "stats", "is", "None", "else", "stats", "\n", "\n", "# Transition model", "\n", "m", "=", "self", ".", "sim", "if", "sim", "is", "None", "else", "sim", "\n", "\n", "# NN model", "\n", "d", "=", "self", ".", "dse", "if", "dse", "is", "None", "else", "dse", "\n", "\n", "# Store in a dict file and save as pkl", "\n", "cp", "=", "dict", "(", "population", "=", "p", ",", "generation", "=", "g", ",", "stats", "=", "s", ",", "sim", "=", "m", ",", "dse", "=", "d", ")", "\n", "with", "open", "(", "filename", "+", "\".pkl\"", ",", "\"wb\"", ")", "as", "cp_file", ":", "\n", "\t\t\t", "pickle", ".", "dump", "(", "cp", ",", "cp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.load": [[256, 274], ["print", "mbe.mbe.sim.disp", "print", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification.disp", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load"], ["", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "'''Load the status from a pkl file'''", "\n", "# Load a pkl file with the same structure as in the save() function", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "cp_file", ":", "\n", "\t\t\t", "cp", "=", "pickle", ".", "load", "(", "cp_file", ")", "\n", "\n", "# Unpack", "\n", "", "self", ".", "stats", "=", "cp", "[", "\"stats\"", "]", "\n", "self", ".", "g", "=", "cp", "[", "\"generation\"", "]", "\n", "self", ".", "pop", "=", "cp", "[", "\"population\"", "]", "\n", "self", ".", "sim", "=", "cp", "[", "\"sim\"", "]", "\n", "self", ".", "dse", "=", "cp", "[", "\"dse\"", "]", "\n", "\n", "print", "(", "\"Loaded\"", ")", "\n", "self", ".", "sim", ".", "disp", "(", ")", "\n", "print", "(", "self", ".", "dse", ".", "network", ")", "\n", "# Return the population", "\n", "return", "self", ".", "pop", "\n", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.__init__": [[15, 42], ["classes.evolution.evolution", "numpy.sum", "numpy.nan_to_num", "numpy.copy", "range", "tools.matrixOperations.normalize_rows", "numpy.errstate", "tools.matrixOperations.normalize_rows", "numpy.sum.sum", "E.sum"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows"], ["def", "__init__", "(", "self", ",", "des", ",", "A", ",", "E", ")", ":", "\n", "\t\t", "'''Initializer'''", "\n", "\n", "# Initialize the evolution API", "\n", "self", ".", "e", "=", "evolution", ".", "evolution", "(", ")", "\n", "\n", "# Calculate estimated alpha using ratio of H to E for each row", "\n", "## Solve for alpha as follows", "\n", "## Use: r = H/E = alpha/(1-alpha)", "\n", "## (based on alpha = probability of H, (1-alpha) = probability of E)", "\n", "## Then: solve for alpha --> alpha = H/E / (1+H/E)", "\n", "H", "=", "np", ".", "sum", "(", "A", ",", "axis", "=", "0", ")", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "\t\t\t", "r", "=", "H", ".", "sum", "(", "axis", "=", "1", ")", "/", "E", ".", "sum", "(", "axis", "=", "1", ")", "\n", "", "r", "=", "np", ".", "nan_to_num", "(", "r", ")", "# Remove NaN Just in case", "\n", "self", ".", "alpha", "=", "r", "/", "(", "1", "+", "r", ")", "\n", "\n", "# Set the row normalized set of A matrices for each action", "\n", "self", ".", "A", "=", "np", ".", "copy", "(", "A", ")", "# copy to avoid rewriting A due to shallow copy", "\n", "for", "i", "in", "range", "(", "0", ",", "A", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t", "self", ".", "A", "[", "i", "]", "=", "matop", ".", "normalize_rows", "(", "self", ".", "A", "[", "i", "]", ")", "\n", "\n", "# Set row normalized E matrix", "\n", "", "self", ".", "E", "=", "matop", ".", "normalize_rows", "(", "E", ")", "\n", "\n", "# Set desired states", "\n", "self", ".", "des", "=", "des", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.reshape_policy": [[43, 58], ["numpy.array", "numpy.reshape", "tools.matrixOperations.normalize_rows"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows"], ["", "def", "reshape_policy", "(", "self", ",", "A", ",", "policy", ")", ":", "\n", "\t\t", "'''Reshape the stochastic policy to the correct dimensions'''", "\n", "\n", "# Get the number of columns and the policy as a numpy array", "\n", "cols", "=", "A", ".", "shape", "[", "0", "]", "\n", "policy", "=", "np", ".", "array", "(", "policy", ")", "\n", "\n", "# Resize policy", "\n", "policy", "=", "np", ".", "reshape", "(", "policy", ",", "(", "policy", ".", "size", "//", "cols", ",", "cols", ")", ")", "\n", "\n", "# If more than 1 column, normalize rows", "\n", "if", "cols", ">", "1", ":", "\n", "\t\t\t", "policy", "=", "matop", ".", "normalize_rows", "(", "policy", ")", "\n", "\n", "", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.update_H": [[59, 91], ["pagerank_evolve.pagerank_evolve.reshape_policy", "numpy.zeros", "enumerate", "tools.matrixOperations.normalize_rows"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.reshape_policy", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows"], ["", "def", "update_H", "(", "self", ",", "A", ",", "policy", ")", ":", "\n", "\t\t", "'''\n\t\tUpdate the H matrix for the chosen policy\n\t\t\n\t\tUpdate H matrix\n\t\tMatrix H1 holds the cumulative probability of the transition \n\t\thappening for a current policy.\n\t\tThis is the probability of the action being taken times the \n\t\tprobability of the state transition caused by the action, \n\t\tand then the sum of that.\n\t\tFor example:\n\t\tH[0,0] = P((e00 and a00) or (e00 and a1) or ... or (e00 and aN))\n\t\t\t\t= P(e00|a0)*P(a0) +  P(e00|a1)*P(a1) + ... + P(e00|aN)*P(aN))\n\t\twhere e00 is a state transition from state 0 to state 0\n\t\tand a0... aN are the actions 0 to N\n\t\tIn essence H[0,0] = P(e00), given that the actions \n\t\tare independent at the local level.\n\t\t'''", "\n", "# Ensure policy has the correct dimensions", "\n", "policy", "=", "self", ".", "reshape_policy", "(", "A", ",", "policy", ")", "\n", "\n", "## In this routine, we will iterate over each action (columns of policy)", "\n", "H", "=", "np", ".", "zeros", "(", "A", "[", "0", "]", ".", "shape", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "policy", ".", "T", ")", ":", "\n", "\t\t\t", "H", "+=", "A", "[", "i", "]", "*", "p", "[", ":", ",", "np", ".", "newaxis", "]", "# [:,np.newaxis] makes p vertical", "\n", "\n", "# Normalize for multiple actions", "\n", "", "if", "A", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "\t\t\t", "H", "=", "matop", ".", "normalize_rows", "(", "H", ")", "\n", "\n", "# Return updated H", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.pagerank_fitness": [[92, 98], ["numpy.average", "pr.mean"], "methods", ["None"], ["", "def", "pagerank_fitness", "(", "self", ",", "pr", ",", "des", ")", ":", "\n", "\t\t", "'''\n\t\tGet the PageRank fitness.\n\t\tThe fitness is the weighted average over the desired states\n\t\t'''", "\n", "return", "np", ".", "average", "(", "pr", ",", "axis", "=", "1", ",", "weights", "=", "des", ")", "/", "pr", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve._fitness": [[99, 115], ["pagerank_evolve.pagerank_evolve.update_H", "tools.matrixOperations.pagerank", "pagerank_evolve.pagerank_evolve.pagerank_fitness", "numpy.diag().dot", "numpy.diag().dot", "numpy.diag", "numpy.diag"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.update_H", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.pagerank", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.pagerank_fitness"], ["", "def", "_fitness", "(", "self", ",", "policy", ")", ":", "\n", "\t\t", "'''Evaluate the fitness'''", "\n", "\n", "# Update H with new policy", "\n", "H1", "=", "self", ".", "update_H", "(", "self", ".", "A", ",", "policy", ")", "\n", "\n", "# Google matrix", "\n", "G", "=", "np", ".", "diag", "(", "self", ".", "alpha", ")", ".", "dot", "(", "H1", ")", "+", "np", ".", "diag", "(", "1", "-", "self", ".", "alpha", ")", ".", "dot", "(", "self", ".", "E", ")", "\n", "\n", "# Evaluate pagerank vector", "\n", "pr", "=", "matop", ".", "pagerank", "(", "G", ")", "\n", "\n", "# Get fitness", "\n", "f", "=", "self", ".", "pagerank_fitness", "(", "pr", ",", "self", ".", "des", ")", "\n", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve._optimize": [[116, 131], ["pagerank_evolve.pagerank_evolve.e.setup", "pagerank_evolve.pagerank_evolve.e.evolve", "pagerank_evolve.pagerank_evolve.e.get_best"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.mbe.mbe.evolve", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.evolution.evolution.get_best"], ["", "def", "_optimize", "(", "self", ",", "policy", ",", "generations", "=", "500", ",", "plot", "=", "False", ")", ":", "\n", "\t\t", "'''Run the optimization'''", "\n", "\n", "# Set up the parameters", "\n", "self", ".", "e", ".", "setup", "(", "self", ".", "_fitness", ",", "\n", "GENOME_LENGTH", "=", "policy", ".", "size", ",", "POPULATION_SIZE", "=", "20", ")", "\n", "\n", "# Run the evolution", "\n", "self", ".", "e", ".", "evolve", "(", "verbose", "=", "True", ",", "generations", "=", "generations", ",", "population", "=", "None", ")", "\n", "\n", "# Plot", "\n", "# if plot:", "\n", "# \tself.e.plot_evolution()", "\n", "\n", "return", "self", ".", "e", ".", "get_best", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.run": [[132, 140], ["pagerank_evolve.pagerank_evolve._optimize", "numpy.array", "pagerank_evolve.pagerank_evolve.reshape_policy"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve._optimize", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.reshape_policy"], ["", "def", "run", "(", "self", ",", "policy0", ",", "generations", "=", "500", ",", "plot", "=", "False", ")", ":", "\n", "\t\t", "'''Get a policy and optimize it according to the PageRank scheme'''", "\n", "\n", "# Optimize using pagerank fitness", "\n", "policy", "=", "self", ".", "_optimize", "(", "policy0", ",", "generations", "=", "generations", ",", "plot", "=", "plot", ")", "\n", "\n", "# Format and return the optimized policy", "\n", "return", "np", ".", "array", "(", "self", ".", "reshape_policy", "(", "self", ".", "A", ",", "policy", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.__init__": [[25, 48], ["str", "os.path.dirname", "tools.swarmulator.swarmulator", "random.randrange", "os.path.exists", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "folder", "=", "\"../swarmulator\"", ",", "savefolder", "=", "\"data/\"", ")", ":", "\n", "\t\t", "'''Load simulator'''", "\n", "\n", "# Simulator folder", "\n", "self", ".", "folder", "=", "folder", "\n", "\n", "# Load logs folder in simulator", "\n", "self", ".", "logs_folder", "=", "folder", "+", "\"/logs/\"", "\n", "\n", "# Set up a runtime ID for a simulation", "\n", "self", ".", "run_id", "=", "str", "(", "random", ".", "randrange", "(", "100000", ")", ")", "\n", "\n", "# Set up a folder which will be used to save the outputs", "\n", "# and set up the directory for the folder if it doesn't exist", "\n", "self", ".", "savefolder", "=", "savefolder", "\n", "directory", "=", "os", ".", "path", ".", "dirname", "(", "self", ".", "savefolder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "self", ".", "save_id", "=", "self", ".", "savefolder", "+", "self", ".", "run_id", "\n", "\n", "# Initialize simulator", "\n", "self", ".", "sim", "=", "swarmulator", ".", "swarmulator", "(", "folder", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.make": [[49, 59], ["simulator.simulator.sim.make"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.make"], ["", "def", "make", "(", "self", ",", "controller", ",", "agent", ",", "\n", "clean", "=", "True", ",", "animation", "=", "False", ",", "logger", "=", "True", ",", "verbose", "=", "True", ")", ":", "\n", "\t\t", "''' Build simulator with the desired settings'''", "\n", "# Build (if already built, you can skip this)", "\n", "self", ".", "sim", ".", "make", "(", "controller", "=", "controller", ",", "\n", "agent", "=", "agent", ",", "\n", "clean", "=", "clean", ",", "\n", "animation", "=", "animation", ",", "\n", "logger", "=", "logger", ",", "\n", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_policy": [[60, 83], ["numpy.reshape", "tools.fileHandler.save_to_txt", "tools.fileHandler.save_to_txt", "tools.matrixOperations.normalize_rows"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.save_to_txt", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.save_to_txt", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows"], ["", "def", "save_policy", "(", "self", ",", "policy", ",", "pr_actions", "=", "None", ",", "name", "=", "\"temp\"", ")", ":", "\n", "\t\t", "'''Save the policy in the correct format for use in Swarmulator'''", "\n", "\n", "# Resize policy to correct dimensions and normalize,", "\n", "# else assume it's already correct.", "\n", "if", "pr_actions", "is", "not", "None", ":", "\n", "\t\t\t", "policy", "=", "np", ".", "reshape", "(", "policy", ",", "(", "policy", ".", "size", "//", "pr_actions", ",", "pr_actions", ")", ")", "\n", "# Normalize rows if needed", "\n", "if", "pr_actions", ">", "1", ":", "\n", "\t\t\t\t", "policy", "=", "matop", ".", "normalize_rows", "(", "policy", ")", "\n", "\n", "# Save the policy so it can be used by the simulator", "\n", "", "", "policy_filename", "=", "\"conf/policies/%s.txt\"", "%", "name", "\n", "policy_file", "=", "self", ".", "sim", ".", "path", "+", "\"/\"", "+", "policy_filename", "\n", "\n", "# Write in the correct format for reading", "\n", "if", "policy", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "\t\t\t", "fh", ".", "save_to_txt", "(", "policy", ".", "T", ",", "policy_file", ")", "\n", "", "else", ":", "\n", "\t\t\t", "fh", ".", "save_to_txt", "(", "policy", ",", "policy_file", ")", "\n", "\n", "# Return the filename", "\n", "", "return", "policy_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_log": [[84, 99], ["simulator.simulator.sim.load", "numpy.savez", "print", "str"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load"], ["", "def", "save_log", "(", "self", ",", "filename_ext", "=", "None", ")", ":", "\n", "\t\t", "'''Save a logfile'''", "\n", "\n", "# Load the log from the txt file", "\n", "filename", "=", "self", ".", "logs_folder", "+", "\"log_\"", "+", "str", "(", "self", ".", "sim", ".", "run_id", ")", "+", "\".txt\"", "\n", "self", ".", "log", "=", "self", ".", "sim", ".", "load", "(", "file", "=", "filename", ")", "\n", "\n", "# Set up filename in the folder", "\n", "save_filename", "=", "self", ".", "savefolder", "+", "filename_ext", "\n", "\n", "# Save", "\n", "np", ".", "savez", "(", "save_filename", ",", "log", "=", "self", ".", "log", ")", "\n", "\n", "# Confirmation", "\n", "print", "(", "\"Saved to %s\"", "%", "save_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_learning_data": [[100, 129], ["tools.fileHandler.read_matrix", "range", "tools.fileHandler.read_matrix", "simulator.simulator.sim.load", "numpy.savez", "print", "len", "A.append", "glob.glob", "tools.fileHandler.read_matrix", "str"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.read_matrix", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.read_matrix", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.read_matrix"], ["", "def", "save_learning_data", "(", "self", ",", "filename_ext", "=", "None", ")", ":", "\n", "\t\t", "'''Save the models from a log file'''", "\n", "\n", "# Read the H matrix", "\n", "H", "=", "fh", ".", "read_matrix", "(", "self", ".", "logs_folder", ",", "\"H_\"", "+", "self", ".", "sim", ".", "run_id", ")", "\n", "\n", "# Read the A matrices", "\n", "A", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "glob", ".", "glob", "(", "\n", "self", ".", "logs_folder", "+", "\"A_\"", "+", "self", ".", "sim", ".", "run_id", "+", "\"_*\"", ")", ")", ")", ":", "\n", "\t\t\t\t\t\t", "A", ".", "append", "(", "fh", ".", "read_matrix", "(", "\n", "self", ".", "logs_folder", ",", "\"A_\"", "+", "self", ".", "sim", ".", "run_id", "+", "\"_\"", "+", "str", "(", "i", ")", ")", ")", "\n", "\n", "# Read the E matrix", "\n", "", "E", "=", "fh", ".", "read_matrix", "(", "self", ".", "logs_folder", ",", "\"E_\"", "+", "self", ".", "sim", ".", "run_id", ")", "\n", "\n", "# Load the logfile", "\n", "log", "=", "self", ".", "sim", ".", "load", "(", "file", "=", "self", ".", "logs_folder", "+", "\"log_\"", "+", "self", ".", "sim", ".", "run_id", "+", "\".txt\"", ")", "\n", "\n", "# Set up name", "\n", "save_filename", "=", "self", ".", "savefolder", "+", "filename_ext", "\n", "\n", "# Save the data", "\n", "np", ".", "savez", "(", "save_filename", ",", "H", "=", "H", ",", "A", "=", "A", ",", "E", "=", "E", ",", "log", "=", "log", ")", "\n", "\n", "# Confirmation", "\n", "print", "(", "\"Saved to %s\"", "%", "save_filename", ")", "\n", "\n", "return", "save_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.load": [[130, 153], ["numpy.load", "data[].astype", "numpy.sum", "data[].astype", "data[].astype", "print", "datetime.datetime.fromtimestamp", "os.path.getmtime"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load"], ["", "def", "load", "(", "self", ",", "file", ",", "verbose", "=", "True", ")", ":", "\n", "\t\t", "''' Load the model from a swarmulator log file '''", "\n", "\n", "# Load all data from the npz file", "\n", "data", "=", "np", ".", "load", "(", "file", ")", "\n", "\n", "# Load the A matrices", "\n", "self", ".", "A", "=", "data", "[", "'A'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "# H matrix = sum of all A matrices", "\n", "self", ".", "H", "=", "np", ".", "sum", "(", "self", ".", "A", ",", "axis", "=", "0", ")", "\n", "\n", "# E matrix", "\n", "self", ".", "E", "=", "data", "[", "'E'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "# Run log", "\n", "self", ".", "log", "=", "data", "[", "'log'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "# Print to terminal", "\n", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"Loaded %s (from %s)\"", "\n", "%", "(", "file", ",", "\n", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "os", ".", "path", ".", "getmtime", "(", "file", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.load_update": [[154, 181], ["numpy.load", "data[].astype", "range", "numpy.sum", "data[].astype", "print", "datetime.datetime.fromtimestamp", "os.path.getmtime"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load"], ["", "", "def", "load_update", "(", "self", ",", "file", ",", "discount", "=", "1.0", ",", "verbose", "=", "False", ")", ":", "\n", "\t\t", "''' \n\t\tLoad the model from a swarmulator log file \n\t\ton top of the existing one\n\t\t'''", "\n", "\n", "# Load all data from the npz file", "\n", "data", "=", "np", ".", "load", "(", "file", ")", "\n", "\n", "# Load the A matrices (to temp list Am)", "\n", "Am", "=", "data", "[", "'A'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "# Update A matrices", "\n", "for", "i", "in", "range", "(", "self", ".", "A", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t", "self", ".", "A", "[", "i", "]", "=", "discount", "*", "self", ".", "A", "[", "i", "]", "+", "Am", "[", "i", "]", "\n", "\n", "# Update H matrix", "\n", "", "self", ".", "H", "=", "np", ".", "sum", "(", "self", ".", "A", ",", "axis", "=", "0", ")", "\n", "\n", "# Update E matrix", "\n", "self", ".", "E", "=", "discount", "*", "self", ".", "E", "+", "data", "[", "'E'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "# Print to terminal", "\n", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"Loaded %s (from %s)\"", "\n", "%", "(", "file", ",", "\n", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "os", ".", "path", ".", "getmtime", "(", "file", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_optimization_data": [[182, 201], ["numpy.sum", "pagerank_evolve.pagerank_evolve", "pagerank_evolve.pagerank_evolve.update_H", "numpy.savez", "numpy.errstate", "numpy.nan_to_num", "numpy.sum.sum", "E.sum"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.pagerank_evolve.pagerank_evolve.update_H"], ["", "", "def", "save_optimization_data", "(", "self", ",", "policy", ",", "des", ",", "filename_ext", "=", "None", ")", ":", "\n", "# Load up sim variables locally", "\n", "\t\t", "A", "=", "self", ".", "A", "\n", "E", "=", "self", ".", "E", "\n", "H0", "=", "np", ".", "sum", "(", "A", ",", "axis", "=", "0", ")", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "\t\t\t", "r", "=", "H0", ".", "sum", "(", "axis", "=", "1", ")", "/", "E", ".", "sum", "(", "axis", "=", "1", ")", "\n", "r", "=", "np", ".", "nan_to_num", "(", "r", ")", "# Remove NaN Just in case", "\n", "", "alpha", "=", "r", "/", "(", "1", "+", "r", ")", "\n", "\n", "# Get optimized policy", "\n", "o", "=", "opt", ".", "pagerank_evolve", "(", "des", ",", "self", ".", "A", ",", "self", ".", "E", ")", "\n", "H1", "=", "o", ".", "update_H", "(", "A", ",", "policy", ")", "\n", "del", "o", "\n", "\n", "# Save ", "\n", "save_filename", "=", "self", ".", "savefolder", "+", "filename_ext", "\n", "np", ".", "savez", "(", "save_filename", ",", "H0", "=", "H0", ",", "H1", "=", "H1", ",", "A", "=", "A", ",", "E", "=", "E", ",", "\n", "policy", "=", "policy", ",", "alpha", "=", "alpha", ",", "des", "=", "des", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.optimize": [[202, 229], ["desired_states_extractor.desired_states_extractor", "desired_states_extractor.desired_states_extractor.get_des", "pagerank_evolve.pagerank_evolve", "pagerank_evolve.pagerank_evolve.run", "simulator.simulator.save_optimization_data", "desired_states_extractor.desired_states_extractor.load_model"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.get_des", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.run", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_optimization_data", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.desired_states_extractor.desired_states_extractor.load_model"], ["", "def", "optimize", "(", "self", ",", "p0", ",", "iterations", "=", "0", ",", "model", "=", "None", ",", "settings", "=", "None", ",", "debug", "=", "True", ")", ":", "\n", "\t\t", "'''Optimize the policy based on the desired states'''", "\n", "i", "=", "0", "\n", "\n", "# Get the desired states using the trained feed-forward network", "\n", "dse", "=", "desired_states_extractor", ".", "desired_states_extractor", "(", ")", "\n", "\n", "## Load a neural network model if needed", "\n", "## If a model is not specified, try to load it", "\n", "if", "model", "is", "not", "None", ":", "\n", "\t\t\t", "dse", ".", "network", "=", "model", "\n", "", "else", ":", "\n", "\t\t\t", "dse", ".", "load_model", "(", "\"data/%s/models.pkl\"", "%", "settings", "[", "\"controller\"", "]", ",", "modelnumber", "=", "499", ")", "\n", "\n", "## Get desired states", "\n", "", "des", "=", "dse", ".", "get_des", "(", "dim", "=", "settings", "[", "\"pr_states\"", "]", ")", "\n", "\n", "# Initialize and run the optimizer", "\n", "o", "=", "opt", ".", "pagerank_evolve", "(", "des", ",", "self", ".", "A", ",", "self", ".", "E", ")", "\n", "policy", "=", "o", ".", "run", "(", "p0", ",", "generations", "=", "500", ",", "plot", "=", "debug", ")", "\n", "del", "o", "\n", "\n", "# Save", "\n", "self", ".", "save_optimization_data", "(", "policy", ",", "des", ",", "\"optimization_%i\"", "%", "i", ")", "\n", "\n", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.disp": [[230, 243], ["print", "print", "enumerate", "print", "print"], "methods", ["None"], ["", "def", "disp", "(", "self", ")", ":", "\n", "\t\t", "'''Display the model to the terminal'''", "\n", "\n", "# Print the H matrix", "\n", "print", "(", "\"H:\\n\"", ",", "self", ".", "H", ")", "\n", "\n", "# Print the E matrix", "\n", "print", "(", "\"E:\\n\"", ",", "self", ".", "E", ")", "\n", "\n", "# Print all matrices in the set A", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "self", ".", "A", ")", ":", "\n", "\t\t\t", "print", "(", "\"A%i:\"", "%", "i", ")", "\n", "print", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.run": [[244, 280], ["subprocess.call", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "print", "simulator.simulator.sim.run", "float", "str", "str", "str", "str", "str", "str", "str", "random.randrange"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.run"], ["", "", "def", "run", "(", "self", ",", "pr_states", "=", "0", ",", "pr_actions", "=", "0", ",", "policy_filename", "=", "\"\"", ",", "fitness", "=", "\"\"", ",", "\n", "logger_updatefreq", "=", "2", ",", "robots", "=", "30", ",", "time_limit", "=", "10000", ",", "\n", "realtimefactor", "=", "300", ",", "environment", "=", "\"square20\"", ",", "run_id", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "''' Run simulator with specified settings '''", "\n", "\n", "# Clear out the folder", "\n", "subprocess", ".", "call", "(", "\"cd \"", "+", "self", ".", "logs_folder", "+", "\" && rm *.csv\"", ",", "shell", "=", "True", ")", "\n", "\n", "# Set all the relevant runtime settings", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"time_limit\"", ",", "str", "(", "time_limit", ")", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"simulation_realtimefactor\"", ",", "\n", "str", "(", "realtimefactor", ")", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"logger_updatefreq\"", ",", "str", "(", "logger_updatefreq", ")", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"environment\"", ",", "environment", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"policy\"", ",", "policy_filename", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"fitness\"", ",", "fitness", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"pr_states\"", ",", "str", "(", "pr_states", ")", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"pr_actions\"", ",", "str", "(", "pr_actions", ")", ")", "\n", "\n", "# Set up the number of robots", "\n", "self", ".", "robots", "=", "robots", "\n", "\n", "# Set up the runtime ID, if not already set", "\n", "self", ".", "run_id", "=", "str", "(", "run_id", ")", "if", "run_id", "is", "not", "None", "else", "str", "(", "random", ".", "randrange", "(", "100000", ")", ")", "\n", "print", "(", "\"Runtime ID: %s\"", "%", "self", ".", "run_id", ")", "\n", "\n", "# Set up the save_id", "\n", "self", ".", "save_id", "=", "self", ".", "savefolder", "+", "self", ".", "run_id", "\n", "\n", "# Run it", "\n", "f", "=", "self", ".", "sim", ".", "run", "(", "robots", ",", "run_id", "=", "self", ".", "run_id", ")", "\n", "\n", "# Return fitness", "\n", "return", "float", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.benchmark": [[281, 317], ["simulator.simulator.save_policy", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "range", "simulator.simulator.sim.make", "str", "str", "str", "str", "numpy.append", "print", "simulator.simulator.save_log", "simulator.simulator.sim.run"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_policy", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.make", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_log", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.run"], ["", "def", "benchmark", "(", "self", ",", "policy", ",", "controller", ",", "agent", ",", "fitness", ",", "robots", "=", "30", ",", "\n", "time_limit", "=", "1000", ",", "realtimefactor", "=", "300", ",", "environment", "=", "\"square20\"", ",", "\n", "runs", "=", "100", ",", "make", "=", "True", ",", "pr_states", "=", "0", ",", "pr_actions", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "'''Perform many runs of the simulator to benchmark the behavior'''", "\n", "\n", "# Save policy file to test", "\n", "policy_file", "=", "self", ".", "save_policy", "(", "policy", ")", "\n", "\n", "# Build with correct settings", "\n", "if", "make", "==", "True", ":", "\n", "\t\t\t", "self", ".", "sim", ".", "make", "(", "controller", "=", "controller", ",", "agent", "=", "agent", ",", "\n", "clean", "=", "True", ",", "animation", "=", "False", ",", "logger", "=", "True", ",", "verbose", "=", "False", ")", "\n", "\n", "# Set the runtime settings", "\n", "", "self", ".", "sim", ".", "runtime_setting", "(", "\"time_limit\"", ",", "str", "(", "time_limit", ")", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"simulation_realtimefactor\"", ",", "\n", "str", "(", "realtimefactor", ")", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"environment\"", ",", "environment", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"policy\"", ",", "policy_file", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"fitness\"", ",", "fitness", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"pr_states\"", ",", "str", "(", "pr_states", ")", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"pr_actions\"", ",", "str", "(", "pr_actions", ")", ")", "\n", "\n", "# Run one by one, comment out and uncomment above for batches", "\n", "f", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "runs", ")", ":", "\n", "# Run it, and receive the fitness", "\n", "\t\t\t", "f", "=", "np", ".", "append", "(", "f", ",", "self", ".", "sim", ".", "run", "(", "robots", ",", "run_id", "=", "self", ".", "run_id", ")", ")", "\n", "\n", "# Print the fitness list, just to show progress", "\n", "print", "(", "f", ")", "\n", "\n", "# Save the log", "\n", "self", ".", "save_log", "(", "filename_ext", "=", "\"sample_log_%i\"", "%", "i", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.observe": [[318, 345], ["simulator.simulator.save_policy", "simulator.simulator.sim.make", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.runtime_setting", "simulator.simulator.sim.run", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.save_policy", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.make", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.run"], ["", "def", "observe", "(", "self", ",", "controller", ",", "agent", ",", "policy", ",", "fitness", ",", "robots", "=", "30", ",", "\n", "time_limit", "=", "0", ",", "realtimefactor", "=", "300", ",", "environment", "=", "\"square20\"", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "'''\n\t\tLaunch a single run of the simulator with \n\t\tanimation to observe what happens\n\t\t'''", "\n", "\n", "# Save policy file to test", "\n", "policy_file", "=", "self", ".", "save_policy", "(", "policy", ")", "\n", "\n", "# Build with correct settings (Animation=ON!)", "\n", "self", ".", "sim", ".", "make", "(", "controller", ",", "agent", ",", "\n", "clean", "=", "True", ",", "animation", "=", "True", ",", "logger", "=", "False", ",", "verbose", "=", "False", ")", "\n", "\n", "# Runtime settings", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"time_limit\"", ",", "str", "(", "time_limit", ")", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"simulation_realtimefactor\"", ",", "\n", "str", "(", "realtimefactor", ")", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"environment\"", ",", "environment", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"policy\"", ",", "policy_file", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"fitness\"", ",", "fitness", ")", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"pr_states\"", ",", "str", "(", "0", ")", ")", "# 0 = No PR estimator", "\n", "self", ".", "sim", ".", "runtime_setting", "(", "\"pr_actions\"", ",", "str", "(", "0", ")", ")", "# 0 = No PR estimator", "\n", "\n", "# Run", "\n", "self", ".", "sim", ".", "run", "(", "robots", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.extract": [[346, 380], ["numpy.unique", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "simulator.simulator.log[].max", "d[].astype().mean", "d[].astype", "numpy.arange().astype", "numpy.where", "d[].astype", "numpy.arange", "numpy.count_nonzero", "numpy.max"], "methods", ["None"], ["", "def", "extract", "(", "self", ")", ":", "\n", "\t\t", "''' \n\t\tExtract data from the log file that has already been \n\t\tloaded using the load method\n\t\t'''", "\n", "\n", "# The 0th column is the time column, the 1st column is the IDs", "\n", "time_column", "=", "0", "\n", "id_column", "=", "1", "\n", "\n", "# Get the time vector", "\n", "t", "=", "np", ".", "unique", "(", "self", ".", "log", "[", ":", ",", "time_column", "]", ")", "\n", "\n", "# Get the number of robots", "\n", "robots", "=", "int", "(", "self", ".", "log", "[", ":", ",", "id_column", "]", ".", "max", "(", ")", ")", "\n", "\n", "# Set up empty arrays where we will store the fitness and the states", "\n", "fitness", "=", "np", ".", "zeros", "(", "t", ".", "shape", ")", "\n", "states", "=", "np", ".", "zeros", "(", "[", "t", ".", "size", ",", "robots", "]", ")", "\n", "states_count", "=", "np", ".", "zeros", "(", "[", "t", ".", "size", ",", "self", ".", "H", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "# Extract what is relevant from each log ", "\n", "for", "a", ",", "step", "in", "enumerate", "(", "t", ")", ":", "\n", "\t\t\t", "d", "=", "self", ".", "log", "[", "np", ".", "where", "(", "self", ".", "log", "[", ":", ",", "time_column", "]", "==", "step", ")", "]", "\n", "fitness", "[", "a", "]", "=", "d", "[", ":", ",", "5", "]", ".", "astype", "(", "float", ")", ".", "mean", "(", ")", "\n", "states", "[", "a", "]", "=", "d", "[", "0", ":", "robots", ",", "4", "]", ".", "astype", "(", "int", ")", "\n", "\n", "for", "r", "in", "np", ".", "arange", "(", "0", ",", "np", ".", "max", "(", "states", "[", "a", "]", ")", "+", "1", ")", ".", "astype", "(", "int", ")", ":", "\n", "# Guard for max state in case inconsistent with Swarmulator", "\n", "\t\t\t\t", "if", "r", "<", "self", ".", "H", ".", "shape", "[", "0", "]", ":", "\n", "\t\t\t\t\t", "states_count", "[", "a", ",", "r", "]", "=", "np", ".", "count_nonzero", "(", "states", "[", "a", "]", "==", "r", ")", "\n", "\n", "# Return it", "\n", "", "", "", "return", "t", ",", "states_count", ",", "fitness", "\n", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification.__init__": [[15, 47], ["networkx.from_numpy_matrix", "networkx.from_numpy_matrix", "networkx.from_numpy_matrix", "list", "numpy.delete", "verification.verification.GH.remove_nodes_from", "verification.verification.GE.remove_nodes_from", "numpy.delete", "numpy.argwhere().flatten", "numpy.argwhere().flatten", "numpy.argwhere().flatten", "numpy.setdiff1d", "numpy.setdiff1d", "numpy.setdiff1d", "H0.astype", "H1.astype", "E.astype", "networkx.isolates", "networkx.MultiDiGraph", "networkx.DiGraph", "networkx.MultiDiGraph", "numpy.argwhere", "numpy.argwhere", "numpy.argwhere", "numpy.array", "numpy.array", "numpy.array", "numpy.sum", "numpy.sum"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "H0", ",", "H1", ",", "E", ",", "policy", ",", "des", ")", ":", "\n", "\t\t", "'''Initialize the verifier'''", "\n", "\n", "# Make directed graphs from adjacency matrices", "\n", "H0", "[", "H0", ">", "0", "]", "=", "1.", "\n", "H1", "[", "H1", ">", "0", "]", "=", "1.", "\n", "E", "[", "E", ">", "0", "]", "=", "1.", "\n", "# print(H1)", "\n", "# print(E)", "\n", "\n", "self", ".", "GH0", "=", "nx", ".", "from_numpy_matrix", "(", "H0", ".", "astype", "(", "int", ")", ",", "create_using", "=", "nx", ".", "MultiDiGraph", "(", ")", ")", "\n", "self", ".", "GH", "=", "nx", ".", "from_numpy_matrix", "(", "H1", ".", "astype", "(", "int", ")", ",", "create_using", "=", "nx", ".", "DiGraph", "(", ")", ")", "\n", "self", ".", "GE", "=", "nx", ".", "from_numpy_matrix", "(", "E", ".", "astype", "(", "int", ")", ",", "create_using", "=", "nx", ".", "MultiDiGraph", "(", ")", ")", "\n", "# graph.print_graph(self.GH)", "\n", "\n", "# Ignore unknown nodes with no information", "\n", "# Get unknown nodes (d) and delete them", "\n", "d", "=", "list", "(", "nx", ".", "isolates", "(", "self", ".", "GH0", ")", ")", "\n", "policy", "=", "np", ".", "delete", "(", "policy", ",", "d", ",", "axis", "=", "0", ")", "\n", "self", ".", "GH", ".", "remove_nodes_from", "(", "d", ")", "\n", "self", ".", "GE", ".", "remove_nodes_from", "(", "d", ")", "\n", "self", ".", "des", "=", "np", ".", "delete", "(", "des", ",", "d", ")", "\n", "\n", "# Extract observation sets", "\n", "self", ".", "static", "=", "np", ".", "argwhere", "(", "\n", "np", ".", "array", "(", "np", ".", "sum", "(", "policy", ",", "axis", "=", "1", ")", ")", "<", "0.001", ")", ".", "flatten", "(", ")", "\n", "self", ".", "active", "=", "np", ".", "argwhere", "(", "\n", "np", ".", "array", "(", "np", ".", "sum", "(", "policy", ",", "axis", "=", "1", ")", ")", ">", "0.001", ")", ".", "flatten", "(", ")", "\n", "self", ".", "desired", "=", "np", ".", "argwhere", "(", "np", ".", "array", "(", "self", ".", "des", ")", ">", "0.01", ")", ".", "flatten", "(", ")", "\n", "self", ".", "static_undesired", "=", "np", ".", "setdiff1d", "(", "self", ".", "static", ",", "self", ".", "desired", ")", "\n", "self", ".", "undesired", "=", "np", ".", "setdiff1d", "(", "self", ".", "GH", ".", "nodes", ",", "self", ".", "desired", ")", "\n", "self", ".", "active_undesired", "=", "np", ".", "setdiff1d", "(", "self", ".", "active", ",", "self", ".", "desired", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._check_to_all": [[48, 74], ["networkx.has_path", "print"], "methods", ["None"], ["", "def", "_check_to_all", "(", "self", ",", "G", ",", "set1", ",", "set2", ",", "find_all", "=", "True", ")", ":", "\n", "\t\t", "'''\n\t\tChecks that in graph G, all nodes in set1 have a \n\t\tdirected path to all nodes in set2\n\n\t\tThe find_all flag indicates whether you want to find\n\t\tall counterexamples or just the first one.\n\t\t'''", "\n", "# Initialize flag to False", "\n", "counterexample_flag", "=", "False", "\n", "\n", "# Foe each set check whether a link exists", "\n", "for", "s1", "in", "set1", ":", "\n", "\t\t\t", "for", "s2", "in", "set2", ":", "\n", "\t\t\t\t", "if", "nx", ".", "has_path", "(", "G", ",", "s1", ",", "s2", ")", "is", "False", ":", "\n", "\t\t\t\t\t", "print", "(", "\"(%i, %i), \\n\"", "%", "(", "s1", ",", "s2", ")", ",", "end", "=", "''", ")", "\n", "counterexample_flag", "=", "True", "\n", "\n", "# Find all counterexamples? ", "\n", "# If false, just stop here.", "\n", "if", "find_all", "is", "False", ":", "\n", "\t\t\t\t\t\t", "break", "\n", "\n", "# Return False if fail, True if passed", "\n", "", "", "", "", "return", "not", "counterexample_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._check_to_any": [[75, 99], ["print", "networkx.has_path"], "methods", ["None"], ["", "def", "_check_to_any", "(", "self", ",", "G", ",", "set1", ",", "set2", ")", ":", "\n", "\t\t", "'''\n\t\tChecks that in graph G, all nodes in set1 have a directed \n\t\tpath to at least one node in set2\n\t\t'''", "\n", "# Initialize flag to False", "\n", "counterexample_flag", "=", "False", "\n", "\n", "for", "s1", "in", "set1", ":", "\n", "\n", "# For a node, find a path to any s2 in set2", "\n", "\t\t\t", "any_flag", "=", "False", "\n", "for", "s2", "in", "set2", ":", "\n", "\t\t\t\t", "if", "nx", ".", "has_path", "(", "G", ",", "s1", ",", "s2", ")", "is", "True", ":", "\n", "\t\t\t\t\t", "any_flag", "=", "True", "\n", "break", "# Connection found", "\n", "\n", "# If you reach here, then no connection was found", "\n", "", "", "if", "any_flag", "is", "False", ":", "\n", "\t\t\t\t", "print", "(", "\"Counterexample found for node %i\"", "%", "(", "s1", ")", ")", "\n", "counterexample_flag", "=", "True", "\n", "\n", "# Return False if fail, True if passed", "\n", "", "", "return", "not", "counterexample_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._check_edge": [[100, 125], ["print", "G.has_edge"], "methods", ["None"], ["", "def", "_check_edge", "(", "self", ",", "G", ",", "set1", ",", "set2", ")", ":", "\n", "\t\t", "'''\n\t\tChecks that in graph G, all nodes in set1 have a directed \n\t\tpath to at least one node in set2\n\t\t'''", "\n", "# Initialize flag to False", "\n", "counterexample_flag", "=", "False", "\n", "\n", "for", "s1", "in", "set1", ":", "\n", "\n", "# For a node, find a path to any s2 in set2", "\n", "\t\t\t", "any_flag", "=", "False", "\n", "for", "s2", "in", "set2", ":", "\n", "\n", "\t\t\t\t", "if", "G", ".", "has_edge", "(", "s1", ",", "s2", ")", "is", "True", ":", "\n", "\t\t\t\t\t", "any_flag", "=", "True", "\n", "break", "# Connection found", "\n", "\n", "# If you reach here, then no connection was found", "\n", "", "", "if", "any_flag", "is", "False", ":", "\n", "\t\t\t\t", "print", "(", "\"Counterexample found for node %i\"", "%", "(", "s1", ")", ")", "\n", "counterexample_flag", "=", "True", "\n", "\n", "# Return False if fail, True if passed", "\n", "", "", "return", "not", "counterexample_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._condition_1": [[127, 133], ["verification.verification._check_to_all"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._check_to_all"], ["", "def", "_condition_1", "(", "self", ")", ":", "\n", "\t\t", "'''\n\t\tGS1 (H), shows that ALL desired states \n\t\tcan be reached from ALL states\n\t\t'''", "\n", "return", "self", ".", "_check_to_all", "(", "self", ".", "GH", ",", "self", ".", "undesired", ",", "self", ".", "desired", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._condition_2": [[134, 140], ["verification.verification._check_edge"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._check_edge"], ["", "def", "_condition_2", "(", "self", ")", ":", "\n", "\t\t", "'''\n\t\tGS2 (E) shows that ALL static states that are not \n\t\tdesired can become active via the environment\n\t\t'''", "\n", "return", "self", ".", "_check_edge", "(", "self", ".", "GE", ",", "self", ".", "static_undesired", ",", "self", ".", "active", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._condition_3": [[141, 147], ["verification.verification._check_to_all"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._check_to_all"], ["", "def", "_condition_3", "(", "self", ")", ":", "\n", "\t\t", "'''\n\t\tGS1 (H) shows that an active simplicial state can \n\t\ttransition \"freely\" to any other state\n\t\t'''", "\n", "return", "self", ".", "_check_to_all", "(", "self", ".", "GH", ",", "self", ".", "active_undesired", ",", "self", ".", "GH", ".", "nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification.disp": [[148, 156], ["print", "print", "print"], "methods", ["None"], ["", "def", "disp", "(", "self", ")", ":", "\n", "\t\t", "'''\n\t\tPrint the set of static, active, and desired \n\t\tobservations to the terminal\n\t\t'''", "\n", "print", "(", "\"Static states:\\n\"", ",", "self", ".", "static", ")", "\n", "print", "(", "\"Active states:\\n\"", ",", "self", ".", "active", ")", "\n", "print", "(", "\"Desired states:\\n\"", ",", "self", ".", "desired", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification.verify": [[157, 176], ["c.append", "c.append", "c.append", "print", "all", "verification.verification.disp", "print", "verification.verification._condition_1", "print", "verification.verification._condition_2", "print", "verification.verification._condition_3"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification.disp", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._condition_1", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._condition_2", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.verification.verification._condition_3"], ["", "def", "verify", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "\t\t", "'''Verify all conditions and return the result'''", "\n", "\n", "c", "=", "[", "]", "\n", "\n", "if", "verbose", ":", "self", ".", "disp", "(", ")", "\n", "\n", "if", "verbose", ":", "print", "(", "\"\\nChecking Proposition 1\"", ")", "\n", "c", ".", "append", "(", "self", ".", "_condition_1", "(", ")", ")", "\n", "\n", "if", "verbose", ":", "print", "(", "\"\\nChecking Proposition 2, Condition 1\"", ")", "\n", "c", ".", "append", "(", "self", ".", "_condition_2", "(", ")", ")", "\n", "\n", "if", "verbose", ":", "print", "(", "\"\\nChecking Proposition 2, Condition 2\"", ")", "\n", "c", ".", "append", "(", "self", ".", "_condition_3", "(", ")", ")", "\n", "\n", "print", "(", "\"\\nResult:\"", ",", "c", ")", "\n", "\n", "return", "all", "(", "c", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_matrix": [[15, 24], ["numpy.loadtxt", "open", "ValueError"], "function", ["None"], ["def", "load_matrix", "(", "file", ",", "delimiter", "=", "\",\"", ",", "skiprows", "=", "0", ")", ":", "\n", "\t", "'''Loads a matrix from a file and returns the matrix'''", "\n", "try", ":", "\n", "\t\t", "matrix", "=", "np", ".", "loadtxt", "(", "open", "(", "file", ",", "\"rb\"", ")", ",", "\n", "delimiter", "=", "delimiter", ",", "skiprows", "=", "skiprows", ")", "\n", "return", "matrix", "\n", "", "except", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"Matrix \"", "+", "file", "+", "\n", "\" could not be loaded! Exiting.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.read_matrix": [[25, 30], ["fileHandler.load_matrix"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_matrix"], ["", "", "def", "read_matrix", "(", "folder", ",", "name", ",", "file_format", "=", "\".csv\"", ")", ":", "\n", "\t", "'''Reads a matrix file and returns the matrix'''", "\n", "# LOad a csv file", "\n", "mat", "=", "load_matrix", "(", "folder", "+", "name", "+", "file_format", ")", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.make_folder": [[31, 48], ["os.mkdir", "os.mkdir", "time.strftime"], "function", ["None"], ["", "def", "make_folder", "(", "folder", ")", ":", "\n", "\t", "'''Generates a folder if it doesn not exist'''", "\n", "# Try to make a main folder ", "\n", "# (if it fails then the directory exists!)", "\n", "try", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "folder", ")", "\n", "", "except", ":", "\n", "\t\t", "None", "\n", "\n", "# Make subfolder with the time of a simulation", "\n", "", "folder", "=", "folder", "+", "\"/sim_\"", "+", "time", ".", "strftime", "(", "\"%Y_%m_%d_%T\"", ")", "\n", "\n", "# Make it", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n", "# Return the final folder name", "\n", "return", "folder", "+", "\"/\"", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.save_to_txt": [[49, 57], ["open", "numpy.savetxt", "fout.seek", "fout.truncate"], "function", ["None"], ["", "def", "save_to_txt", "(", "mat", ",", "name", ")", ":", "\n", "\t", "'''Saves data to a txt file'''", "\n", "NEWLINE_SIZE_IN_BYTES", "=", "-", "1", "# -2 on Windows?", "\n", "with", "open", "(", "name", ",", "'wb'", ")", "as", "fout", ":", "\n", "# Note 'wb' instead of 'w'", "\n", "\t\t", "np", ".", "savetxt", "(", "fout", ",", "mat", ",", "delimiter", "=", "\" \"", ",", "fmt", "=", "'%.3f'", ")", "\n", "fout", ".", "seek", "(", "NEWLINE_SIZE_IN_BYTES", ",", "2", ")", "\n", "fout", ".", "truncate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.get_latest_file": [[58, 65], ["glob.glob", "max"], "function", ["None"], ["", "", "def", "get_latest_file", "(", "path", ")", ":", "\n", "\t", "'''Gets the newest file in a specified path'''", "\n", "# Get a list of files from the path", "\n", "list_of_files", "=", "glob", ".", "glob", "(", "path", ")", "\n", "\n", "# Extract the one with the highest time", "\n", "return", "max", "(", "list_of_files", ",", "key", "=", "os", ".", "path", ".", "getctime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.save_pkl": [[66, 70], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_pkl", "(", "var", ",", "name", ")", ":", "\n", "\t", "'''Stores a variable to a specified pkl file'''", "\n", "with", "open", "(", "name", ",", "\"wb\"", ")", "as", "file", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "var", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl": [[71, 77], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load"], ["", "", "def", "load_pkl", "(", "name", ")", ":", "\n", "\t", "'''Loads data from a specified pkl file'''", "\n", "# Open the file and load the pkl file", "\n", "with", "open", "(", "name", ",", "\"rb\"", ")", "as", "file", ":", "\n", "\t\t", "data", "=", "pickle", ".", "load", "(", "file", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.clear_folder": [[78, 88], ["os.remove", "os.listdir", "f.endswith", "os.path.join"], "function", ["None"], ["", "def", "clear_folder", "(", "_dir", ",", "_type", "=", "\"npz\"", ")", ":", "\n", "\t", "'''\n\tClears all files in a folder for a specified format\n\t\n\tBy default it will clear ALL files. Specify type=<format> to\n\tindicate the file format.\n\t'''", "\n", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "_dir", ")", "if", "f", ".", "endswith", "(", "\".\"", "+", "_type", ")", "]", "\n", "for", "f", "in", "files", ":", "\n", "\t\t", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "_dir", ",", "f", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.__init__": [[20, 33], ["swarmulator.swarmulator._clear_pipes"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._clear_pipes"], ["def", "__init__", "(", "self", ",", "path", "=", "\"../swarmulator\"", ",", "verbose", "=", "True", ")", ":", "\n", "\t\t", "''' Load swarmulator object.\n\t\t\tEnsure that the correct path to swarmulator is given as input\n\t\t'''", "\n", "\n", "# Set path to swarmulator", "\n", "self", ".", "path", "=", "path", "\n", "\n", "# Set whether this API will be in verbose mode or note", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "# Clear all current pipes", "\n", "self", ".", "_clear_pipes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.make": [[34, 56], ["subprocess.call", "print", "subprocess.call"], "methods", ["None"], ["", "def", "make", "(", "self", ",", "controller", "=", "None", ",", "agent", "=", "None", ",", "speed", "=", "True", ",", "animation", "=", "False", ",", "\n", "logger", "=", "False", ",", "verbose", "=", "False", ",", "clean", "=", "False", ")", ":", "\n", "\t\t", "'''Build swarmulator'''", "\n", "\n", "# Set the build parameters", "\n", "spd", "=", "\" -j\"", "if", "speed", "else", "\"\"", "\n", "ani", "=", "\" ANIMATION=ON\"", "if", "animation", "else", "\"\"", "\n", "log", "=", "\" LOG=ON\"", "if", "logger", "else", "\"\"", "\n", "vrb", "=", "\" VERBOSE=ON\"", "if", "verbose", "else", "\"\"", "\n", "ctrl", "=", "\" CONTROLLER=\"", "+", "controller", "if", "controller", "else", "\"\"", "\n", "agnt", "=", "\" AGENT=\"", "+", "agent", "if", "controller", "else", "\"\"", "\n", "\n", "# Clean previous build", "\n", "if", "clean", ":", "\n", "\t\t\t", "subprocess", ".", "call", "(", "\"cd \"", "+", "self", ".", "path", "+", "\" && make clean \"", ",", "shell", "=", "True", ")", "\n", "\n", "# Build", "\n", "", "subprocess", ".", "call", "(", "\"cd \"", "+", "self", ".", "path", "+", "\n", "\" && make\"", "+", "spd", "+", "ani", "+", "log", "+", "vrb", "+", "ctrl", "+", "agnt", ",", "\n", "shell", "=", "True", ")", "\n", "\n", "print", "(", "\"# Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._get_log": [[57, 71], ["swarmulator.swarmulator.load", "swarmulator.swarmulator.load"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load"], ["", "def", "_get_log", "(", "self", ",", "file", ")", ":", "\n", "\t\t", "'''\n\t\tTakes in a txt file logged from swarmulator and loads it.\n\t\tIf no argument is given it uses the most recent log in the folder.\n\t\t'''", "\n", "if", "file", "is", "None", ":", "\n", "# Load the most recent file", "\n", "\t\t\t", "log", "=", "self", ".", "load", "(", ")", "\n", "", "else", ":", "\n", "# Load the specified file", "\n", "\t\t\t", "log", "=", "self", ".", "load", "(", "file", ")", "\n", "\n", "# Return the log (numpy array)", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._clear_pipes": [[72, 84], ["glob.glob", "os.remove", "print"], "methods", ["None"], ["", "def", "_clear_pipes", "(", "self", ",", "folder", "=", "\"/tmp/\"", ")", ":", "\n", "\t\t", "'''Clear all current swarmulaotor FIFO pipes'''", "\n", "\n", "# Get a list of all relevant FIFO pipes that have been created", "\n", "fileList", "=", "glob", ".", "glob", "(", "folder", "+", "\"swarmulator_*\"", ")", "\n", "\n", "# Iterate over the list of filepaths and try to remove each file", "\n", "for", "filePath", "in", "fileList", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "os", ".", "remove", "(", "filePath", ")", "\n", "", "except", "OSError", ":", "\n", "\t\t\t\t", "print", "(", "\"Error while deleting file\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._launch": [[85, 98], ["subprocess.call", "print", "str", "str"], "methods", ["None"], ["", "", "", "def", "_launch", "(", "self", ",", "n", ",", "run_id", ")", ":", "\n", "\t\t", "'''Launches an instance of a swarmulator simulation'''", "\n", "\n", "# Set up and launch the command", "\n", "cmd", "=", "\"cd \"", "+", "self", ".", "path", "+", "\" && ./swarmulator \"", "+", "str", "(", "n", ")", "+", "\" \"", "+", "str", "(", "run_id", ")", "+", "\" &\"", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n", "# Write some info to the terminal", "\n", "if", "self", ".", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"Launched instance of swarmulator with %s robots \\\n\t\t\t\t\tand pipe ID %s\"", "%", "(", "n", ",", "run_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._get_fitness": [[99, 115], ["open().read", "float", "os.path.lexists", "time.sleep", "print", "open", "str"], "methods", ["None"], ["", "", "def", "_get_fitness", "(", "self", ",", "pipe", ")", ":", "\n", "\t\t", "'''Awaits to receive the fitness from a run'''", "\n", "\n", "# Wait for swarmulator to complete and create the pipe", "\n", "while", "not", "os", ".", "path", ".", "lexists", "(", "pipe", ")", ":", "\n", "\t\t\t", "time", ".", "sleep", "(", "0.0001", ")", "\n", "\n", "# Get fitness from pipe", "\n", "", "f", "=", "open", "(", "pipe", ")", ".", "read", "(", ")", "\n", "\n", "# Write some info to the terminal", "\n", "if", "self", ".", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"Received fitness %s from pipe %s\"", "%", "(", "str", "(", "f", ")", ",", "pipe", ")", ")", "\n", "\n", "# Return the received value, ensure float", "\n", "", "return", "float", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.run": [[116, 134], ["swarmulator.swarmulator._launch", "swarmulator.swarmulator._get_fitness", "float", "random.randrange", "str"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._launch", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._get_fitness"], ["", "def", "run", "(", "self", ",", "n", ",", "run_id", "=", "None", ")", ":", "\n", "\t\t", "'''Runs swarmulator. If run_id is not specified, it will assign a random id'''", "\n", "\n", "# Give a random ID if not specified", "\n", "self", ".", "run_id", "=", "random", ".", "randrange", "(", "10000000000", ")", "if", "run_id", "is", "None", "else", "run_id", "\n", "\n", "# Set up a pipe object for the fitness to be communicated ", "\n", "# back to the API", "\n", "pipe", "=", "\"/tmp/swarmulator_\"", "+", "str", "(", "self", ".", "run_id", ")", "\n", "\n", "# Launch", "\n", "self", ".", "_launch", "(", "n", ",", "run_id", "=", "self", ".", "run_id", ")", "\n", "\n", "# Wait for fitness from the pipe", "\n", "f", "=", "self", ".", "_get_fitness", "(", "pipe", ")", "\n", "\n", "# Return the received value, ensure float", "\n", "return", "float", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load": [[135, 158], ["numpy.loadtxt", "fileHandler.get_latest_file", "numpy.loadtxt", "[].astype", "ValueError", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.get_latest_file", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load"], ["", "def", "load", "(", "self", ",", "file", "=", "None", ")", ":", "\n", "\t\t", "'''Loads the log of a swarmulator run. \n\t\tIf id is not specified, it will take the most recent log'''", "\n", "\n", "# If the file is not specified, get the latest file", "\n", "if", "file", "is", "None", ":", "\n", "\t\t\t", "file", "=", "self", ".", "path", "+", "\"/\"", "+", "fh", ".", "get_latest_file", "(", "self", ".", "path", "+", "\"/logs/log_*.txt\"", ")", "\n", "log", "=", "np", ".", "loadtxt", "(", "file", ")", "\n", "\n", "# If the file is a txt file, load it as txt", "\n", "", "elif", "'.txt'", "in", "file", ":", "\n", "\t\t\t", "log", "=", "np", ".", "loadtxt", "(", "file", ")", "\n", "\n", "# If the file is an npz file (assumed made by this API, then load the log)", "\n", "", "elif", "'.npz'", "in", "file", ":", "\n", "\t\t\t", "log", "=", "np", ".", "load", "(", "file", ")", "[", "\"log\"", "]", ".", "astype", "(", "float", ")", "\n", "\n", "# Something wrong, exit", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "\"File format unknown!\"", ")", "\n", "return", "-", "1", "\n", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.plot_log": [[159, 194], ["int", "matplotlib.figure", "matplotlib.figure.gca", "range", "plt.figure.gca.set_xlabel", "plt.figure.gca.set_ylabel", "plt.figure.gca.set_zlabel", "plt.figure.gca.view_init", "swarmulator.swarmulator._get_log", "log[].max", "plt.figure.gca.plot", "matplotlib.show", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._get_log"], ["", "def", "plot_log", "(", "self", ",", "log", "=", "None", ",", "file", "=", "None", ",", "time_column", "=", "0", ",", "\n", "id_column", "=", "1", ",", "x_column", "=", "2", ",", "y_column", "=", "3", ",", "show", "=", "True", ")", ":", "\n", "\t\t", "'''Visualizes the log of a swarmulator run'''", "\n", "if", "log", "is", "None", ":", "\n", "\t\t\t", "log", "=", "self", ".", "_get_log", "(", "file", ")", "\n", "\n", "# Extract the number of robots", "\n", "", "robots", "=", "int", "(", "log", "[", ":", ",", "id_column", "]", ".", "max", "(", ")", ")", "\n", "\n", "# Set up a 3D figure", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "\n", "# Plot the path of each robot", "\n", "for", "x", "in", "range", "(", "1", ",", "robots", "+", "1", ")", ":", "\n", "\t\t\t", "d", "=", "log", "[", "np", ".", "where", "(", "log", "[", ":", ",", "id_column", "]", "==", "x", ")", "]", "\n", "ax", ".", "plot", "(", "d", "[", ":", ",", "time_column", "]", ",", "d", "[", ":", ",", "x_column", "]", ",", "d", "[", ":", ",", "y_column", "]", ")", "\n", "\n", "# Do some formatting, these values work quite well", "\n", "", "ax", ".", "set_xlabel", "(", "\"Time [s]\"", ")", "# Depth axis 3d plot", "\n", "ax", ".", "set_ylabel", "(", "\"N [m]\"", ")", "# Vertical axis 3d plot", "\n", "ax", ".", "set_zlabel", "(", "\"E [m]\"", ")", "# Horizontal axis 3d plot", "\n", "\n", "# Some pretty formatting that should work for many logs", "\n", "ax", ".", "xaxis", ".", "labelpad", "=", "pad", "\n", "ax", ".", "yaxis", ".", "labelpad", "=", "pad", "\n", "ax", ".", "zaxis", ".", "labelpad", "=", "pad", "\n", "ax", ".", "view_init", "(", "elev", "=", "36.", ",", "azim", "=", "-", "38.", ")", "\n", "\n", "# Show the plot if desired", "\n", "if", "show", "is", "True", ":", "\n", "\t\t\t", "plt", ".", "show", "(", ")", "\n", "\n", "# Return the plot object", "\n", "", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load_column": [[195, 206], ["swarmulator.swarmulator._get_log", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._get_log"], ["", "def", "load_column", "(", "self", ",", "log", "=", "None", ",", "file", "=", "None", ",", "time_column", "=", "0", ",", "id_column", "=", "1", ",", "column", "=", "2", ")", ":", "\n", "\t\t", "'''Visualizes the log of a swarmulator run'''", "\n", "\n", "if", "log", "is", "None", ":", "\n", "\t\t\t", "log", "=", "self", ".", "_get_log", "(", "file", ")", "\n", "\n", "# Use the first robot as reference", "\n", "", "d", "=", "log", "[", "np", ".", "where", "(", "log", "[", ":", ",", "id_column", "]", "==", "1", ")", "]", "\n", "\n", "# Return tuple with data", "\n", "return", "d", "[", ":", ",", "time_column", "]", ",", "d", "[", ":", ",", "column", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.plot_log_column": [[207, 232], ["prettyplot.setup.plot", "prettyplot.setup.xlabel", "prettyplot.setup.ylabel", "swarmulator.swarmulator._get_log", "prettyplot.setup", "prettyplot.setup.show", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._get_log", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup"], ["", "def", "plot_log_column", "(", "self", ",", "log", "=", "None", ",", "file", "=", "None", ",", "time_column", "=", "0", ",", "id_column", "=", "1", ",", "column", "=", "2", ",", "colname", "=", "\"parameter [-]\"", ",", "show", "=", "True", ",", "plot", "=", "None", ")", ":", "\n", "\t\t", "'''Visualizes the log of a swarmulator run'''", "\n", "\n", "if", "log", "is", "None", ":", "\n", "\t\t\t", "log", "=", "self", ".", "_get_log", "(", "file", ")", "\n", "\n", "# Initialize a new plot", "\n", "", "if", "plot", "is", "None", ":", "\n", "\t\t\t", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "plt", "=", "plot", "\n", "\n", "# Get data from first robot", "\n", "", "d", "=", "log", "[", "np", ".", "where", "(", "log", "[", ":", ",", "id_column", "]", "==", "1", ")", "]", "\n", "\n", "# Plot the data", "\n", "plt", ".", "plot", "(", "d", "[", ":", ",", "time_column", "]", ",", "d", "[", ":", ",", "column", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"Time [s]\"", ")", "\n", "plt", ".", "ylabel", "(", "colname", ")", "\n", "\n", "# Show", "\n", "if", "show", "is", "True", ":", "\n", "\t\t\t", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.runtime_setting": [[233, 250], ["subprocess.call", "print"], "methods", ["None"], ["", "def", "runtime_setting", "(", "self", ",", "setting", ",", "value", ")", ":", "\n", "\t\t", "'''Assigns a value to a runtime setting of conf/parameters.xml'''", "\n", "\n", "# Set up an xmlstarlet command to change the value", "\n", "s", "=", "\"xmlstarlet edit -L -u \\\"/parameters/\"", "+", "setting", "+", "\"\\\" -v \\\"\"", "+", "value", "+", "\"\\\" \"", "+", "self", ".", "path", "+", "\"/conf/parameters.xml\"", "\n", "\n", "# Call the subprocess", "\n", "subprocess", ".", "call", "(", "s", ",", "shell", "=", "True", ")", "\n", "\n", "# Print", "\n", "if", "self", ".", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"Runtime setting \\\"\"", "+", "setting", "+", "\"\\\" has been set to \\\"\"", "+", "value", "+", "\"\\\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.get_runtime_setting": [[251, 270], ["subprocess.getoutput", "print"], "methods", ["None"], ["", "", "def", "get_runtime_setting", "(", "self", ",", "setting", ")", ":", "\n", "\t\t", "'''\n\t\tReturns the value of a runtime parameter currently \n\t\tspecified in swarmulator conf/parameters.xml\n\t\t'''", "\n", "\n", "# Set up an xmlstarlet command to get a value", "\n", "s", "=", "\"xmlstarlet sel -t -v \\\"parameters/\"", "+", "setting", "+", "\"\\\" \"", "+", "self", ".", "path", "+", "\"/conf/parameters.xml\"", "\n", "\n", "# Run the xmlstarlet call", "\n", "value", "=", "subprocess", ".", "getoutput", "(", "s", ")", "\n", "\n", "# Print", "\n", "if", "self", ".", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"Runtime setting \\\"\"", "+", "setting", "+", "\"\\\" is \\\"\"", "+", "value", "+", "\"\\\"\"", ")", "\n", "\n", "", "return", "value", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.batch_run": [[271, 304], ["swarmulator.swarmulator._clear_pipes", "isinstance", "numpy.zeros", "numpy.repeat", "print", "concurrent.futures.ProcessPoolExecutor", "zip", "len", "numpy.random.randint", "executor.map", "float"], "methods", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator._clear_pipes"], ["", "def", "batch_run", "(", "self", ",", "n", ",", "runs", ")", ":", "\n", "\t\t", "'''\n\t\tRuns a batch of parallel simulations in parallel. \n\t\tBy being different processes, the simulations can run unobstructed.\n\t\t'''", "\n", "\n", "# Clear all the pipes for good housekeeping", "\n", "self", ".", "_clear_pipes", "(", ")", "\n", "\n", "# Get the number of robots, if n=scalar then it's known, ", "\n", "# if it's a list [ll, ul] use that", "\n", "if", "isinstance", "(", "n", ",", "int", ")", ":", "\n", "\t\t\t", "robots", "=", "np", ".", "repeat", "(", "n", ",", "runs", ")", "\n", "", "elif", "len", "(", "n", ")", "==", "2", ":", "\n", "\t\t\t", "robots", "=", "np", ".", "random", ".", "randint", "(", "n", "[", "0", "]", ",", "n", "[", "1", "]", ",", "runs", ")", "\n", "\n", "# Tell the user in case they are batching with only one runs", "\n", "", "if", "runs", "==", "1", ":", "\n", "\t\t\t", "print", "(", "\"INFO: Running simulator.batch_run but only using 1 run.\\\n\t\t\t\t\tConsider just using \\\"swarmulator.run\\\" instead\"", ")", "\n", "\n", "# Set up a fitness vector to store all outputs", "\n", "", "fitness_vector", "=", "np", ".", "zeros", "(", "runs", ")", "\n", "\n", "# Launch multiple threads and fill in the fitness_vector", "\n", "c", "=", "0", "\n", "with", "concurrent", ".", "futures", ".", "ProcessPoolExecutor", "(", ")", "as", "executor", ":", "\n", "\t\t\t", "for", "i", ",", "f", "in", "zip", "(", "robots", ",", "executor", ".", "map", "(", "self", ".", "run", ",", "robots", ")", ")", ":", "\n", "\t\t\t\t", "out", "[", "c", "]", "=", "float", "(", "f", ")", "\n", "c", "+=", "1", "\n", "\n", "# Return array with fitness values", "\n", "", "", "return", "fitness_vector", "\n", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.graph.print_graph": [[12, 17], ["networkx.drawing.nx_agraph.to_agraph", "nx.drawing.nx_agraph.to_agraph.layout", "nx.drawing.nx_agraph.to_agraph.draw"], "function", ["None"], ["def", "print_graph", "(", "G", ",", "name", "=", "\"graph.eps\"", ")", ":", "\n", "    ", "'''Draws a pretty representation of a networkx graph'''", "\n", "A", "=", "nx", ".", "drawing", ".", "nx_agraph", ".", "to_agraph", "(", "G", ")", "\n", "A", ".", "layout", "(", "\"circo\"", ")", "\n", "A", ".", "draw", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.graph.make_digraph": [[18, 37], ["networkx.OrderedMultiDiGraph", "list", "nx.OrderedMultiDiGraph.add_edges_from", "list", "nx.OrderedMultiDiGraph.add_weighted_edges_from", "zip", "zip"], "function", ["None"], ["", "def", "make_digraph", "(", "s", ",", "t", ",", "w", "=", "None", ")", ":", "\n", "    ", "'''\n    Makes a digraph with potential weights w\n    It takes in two required arguments:\n    s: A list indicating start nodes of all edges\n    t: A list indicating end nodes of all edges\n    '''", "\n", "# Set up a NetworkX graph", "\n", "G", "=", "nx", ".", "OrderedMultiDiGraph", "(", ")", "\n", "\n", "# If weights are not specified, make the graph without weights", "\n", "if", "w", "is", "None", ":", "\n", "        ", "edge_list", "=", "list", "(", "zip", "(", "s", ",", "t", ")", ")", "\n", "G", ".", "add_edges_from", "(", "edge_list", ")", "\n", "# Else make weighted edges", "\n", "", "else", ":", "\n", "        ", "edge_list", "=", "list", "(", "zip", "(", "s", ",", "t", ",", "w", ")", ")", "\n", "G", ".", "add_weighted_edges_from", "(", "edge_list", ")", "\n", "", "return", "G", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup": [[17, 28], ["matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rc", "matplotlib.figure"], "function", ["None"], ["def", "setup", "(", "w", "=", "12", ",", "h", "=", "6", ",", "fs", "=", "30", ",", "font", "=", "'serif'", ")", ":", "\n", "\t", "'''\n\tSets up a figure with a good size. \n\tThe default values are pretty good for papers.\n\t'''", "\n", "\n", "matplotlib", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "fs", "}", ")", "\n", "plt", ".", "rc", "(", "'font'", ",", "family", "=", "font", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust": [[29, 35], ["matplotlib.gcf().subplots_adjust", "matplotlib.gcf"], "function", ["None"], ["", "def", "adjust", "(", "plt", ")", ":", "\n", "\t", "'''Adjusts parameters for better layout in a paper'''", "\n", "\n", "plt", ".", "gcf", "(", ")", ".", "subplots_adjust", "(", "bottom", "=", "0.15", ")", "\n", "\n", "return", "plt", "\n", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.round_to_multiple": [[11, 22], ["numpy.floor", "numpy.round"], "function", ["None"], ["def", "round_to_multiple", "(", "a", ",", "mult", ",", "floor", "=", "True", ")", ":", "\n", "\t", "'''Rounds a number to its closest multiple'''", "\n", "\n", "# If floor=True, floor the values, otherwise round them", "\n", "if", "floor", ":", "\n", "\t\t", "a", "=", "np", ".", "floor", "(", "a", "/", "mult", ")", "\n", "", "else", ":", "\n", "\t\t", "a", "=", "np", ".", "round", "(", "a", "/", "mult", ")", "\n", "\n", "# Return the rounded one", "\n", "", "return", "a", "*", "mult", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows": [[23, 60], ["isinstance", "numpy.sum", "numpy.any", "isinstance", "isinstance", "print", "numpy.isscalar", "numpy.divide", "numpy.divide", "numpy.zeros_like"], "function", ["None"], ["", "def", "normalize_rows", "(", "mat", ")", ":", "\n", "\t", "'''Normalizies the rows of a matrix'''", "\n", "\n", "# Get the sum of the rows", "\n", "## If the input is 2D, then we take row wise sums", "\n", "## Otherwise we sum all elements", "\n", "if", "isinstance", "(", "mat", ",", "list", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "mat", "[", "0", "]", ",", "list", ")", ":", "\n", "\t\t\t", "axis", "=", "1", "\n", "", "else", ":", "\n", "\t\t\t", "axis", "=", "0", "\n", "", "", "elif", "isinstance", "(", "mat", ",", "np", ".", "ndarray", ")", ":", "\n", "\t\t", "if", "mat", ".", "ndim", "==", "2", ":", "\n", "\t\t\t", "axis", "=", "1", "\n", "", "else", ":", "\n", "\t\t\t", "axis", "=", "0", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"Warning: normalize_rows unrecognized type. \\\n\t\t\t\tExpected list or numpy array.\"", ")", "\n", "axis", "=", "1", "\n", "\n", "", "row_sums", "=", "np", ".", "sum", "(", "mat", ",", "axis", "=", "axis", ")", "\n", "\n", "# If any of the matrices has elements larger than 0", "\n", "if", "np", ".", "any", "(", "row_sums", ">", "0", ")", ":", "\n", "\n", "# If the row_sums is not a scalar then we want to be a bit fancier", "\n", "\t\t", "if", "not", "np", ".", "isscalar", "(", "row_sums", ")", ":", "\n", "# Normalize (but ignore a row that is entirely 0s)", "\n", "\t\t\t", "mat", "=", "np", ".", "divide", "(", "mat", ",", "row_sums", "[", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "out", "=", "np", ".", "zeros_like", "(", "mat", ")", ",", "\n", "where", "=", "row_sums", "[", ":", ",", "np", ".", "newaxis", "]", "!=", "0", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "mat", "=", "np", ".", "divide", "(", "mat", ",", "row_sums", ")", "\n", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.pagerank": [[61, 92], ["matrixOperations.normalize_rows", "matrixOperations.normalize_rows", "numpy.matmul", "numpy.linalg.norm", "numpy.asarray", "numpy.ones", "numpy.subtract"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows"], ["", "def", "pagerank", "(", "G", ",", "pr", "=", "None", ",", "tol", "=", "1e-8", ",", "maxiter", "=", "5000", ")", ":", "\n", "\t", "'''Iterative procedure to solve for the PageRank vector'''", "\n", "\n", "# Normalize the rows of the Google Matrix", "\n", "G", "=", "normalize_rows", "(", "G", ")", "\n", "\n", "# If the pagerank vector is not specified, initialize it", "\n", "if", "pr", "is", "None", ":", "\n", "\t\t", "n", "=", "G", ".", "shape", "[", "0", "]", "\n", "pr", "=", "1", "/", "n", "*", "np", ".", "ones", "(", "(", "1", ",", "n", ")", ")", "\n", "\n", "# Initialize residual", "\n", "", "residual", "=", "1", "\n", "\n", "# Run the PageRank iteration for a maximum number of iterations", "\n", "# or until the residual is smaller than the tolerance value tol", "\n", "\n", "i", "=", "0", "\n", "while", "residual", ">=", "tol", "and", "i", "<", "maxiter", ":", "\n", "# Update pagerank vector", "\n", "\t\t", "pr_previous", "=", "pr", "\n", "\n", "# Pagerank formula", "\n", "pr", "=", "np", ".", "matmul", "(", "pr", ",", "G", ")", "\n", "\n", "# Calculate residual", "\n", "residual", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "subtract", "(", "pr", ",", "pr_previous", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "# Return the normalized pagerank vector", "\n", "", "return", "normalize_rows", "(", "np", ".", "asarray", "(", "pr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.pretty_print": [[93, 97], ["print"], "function", ["None"], ["", "def", "pretty_print", "(", "mat", ")", ":", "\n", "\t", "'''Prints a matrix to the terminal but it looks a little better'''", "\n", "for", "x", "in", "mat", ":", "\n", "\t\t", "print", "(", "*", "x", ",", "sep", "=", "\" \"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.get_positions": [[30, 40], ["int", "log[].max"], "function", ["None"], ["def", "get_positions", "(", "log", ")", ":", "\n", "\t", "'''Returns the number of robots and an array of x and y positions'''", "\n", "\n", "# Get the number of robots (max ID in the log)", "\n", "robots", "=", "int", "(", "log", "[", ":", ",", "id_column", "]", ".", "max", "(", ")", ")", "\n", "\n", "# Positions x and y from the log at columns 2 and 3", "\n", "p", "=", "log", "[", "0", ":", "robots", ",", "(", "x_column", ",", "y_column", ")", "]", "\n", "\n", "return", "robots", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.get_distance": [[41, 44], ["numpy.sqrt"], "function", ["None"], ["", "def", "get_distance", "(", "p_rel", ")", ":", "\n", "\t", "'''Get the distance from a nested list of x and y positions'''", "\n", "return", "np", ".", "sqrt", "(", "p_rel", "[", ":", ",", "0", "]", "**", "2", "+", "p_rel", "[", ":", ",", "1", "]", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.neighbors_adjacency_map": [[45, 60], ["fitness_functions.get_positions", "numpy.zeros", "range", "fitness_functions.get_distance"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.get_positions", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.get_distance"], ["", "def", "neighbors_adjacency_map", "(", "log", ")", ":", "\n", "\t", "'''Returns the adjacency matrix for the swarm'''", "\n", "\n", "# Get the number of robots and their positions", "\n", "robots", ",", "p", "=", "get_positions", "(", "log", ")", "\n", "\n", "# Make an adjacency matrix of their connectivity", "\n", "## Initialize", "\n", "A", "=", "np", ".", "zeros", "(", "[", "robots", ",", "robots", "]", ")", "\n", "## Fill it in", "\n", "for", "r", "in", "range", "(", "0", ",", "robots", ")", ":", "\n", "\t\t", "p_rel", "=", "p", "[", "r", ",", ":", "]", "-", "p", "\n", "A", "[", "r", ",", ":", "]", "=", "(", "get_distance", "(", "p_rel", ")", "<", "rangesensor", ")", "\n", "\n", "", "return", "A", ",", "robots", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.mean_distance_to_all": [[61, 79], ["fitness_functions.get_positions", "range", "fitness_functions.get_distance", "get_distance.mean"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.get_positions", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.get_distance"], ["", "def", "mean_distance_to_all", "(", "log", ")", ":", "\n", "\t", "'''\n\tGlobal fitness function to get the mean distance \n\tto all other robots in a swarm\n\t'''", "\n", "\n", "# Get the number of robots and their positions", "\n", "robots", ",", "p", "=", "get_positions", "(", "log", ")", "\n", "\n", "# Return a fitness = mean distance between all robots", "\n", "## Initialize the fitness f", "\n", "f", "=", "0", "\n", "## Add to it", "\n", "for", "r", "in", "range", "(", "0", ",", "robots", ")", ":", "\n", "\t\t", "d", "=", "get_distance", "(", "p", "[", "r", ",", ":", "]", "-", "p", ")", "\n", "f", "+=", "d", ".", "mean", "(", ")", "/", "robots", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.number_of_clusters": [[80, 95], ["fitness_functions.neighbors_adjacency_map", "networkx.from_numpy_array", "networkx.components.number_connected_components"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.neighbors_adjacency_map"], ["", "def", "number_of_clusters", "(", "log", ")", ":", "\n", "\t", "'''\n\tGlobal fitness function to get number of clusters, \n\trelative to the size of the swarm\n\t'''", "\n", "# Get an adjacency map of all robots", "\n", "A", ",", "robots", "=", "neighbors_adjacency_map", "(", "log", ")", "\n", "\n", "# Set up a graph G showing their connections with networkx", "\n", "G", "=", "nx", ".", "from_numpy_array", "(", "A", ")", "\n", "\n", "# Use networkx to get the number of connected components", "\n", "f", "=", "nx", ".", "components", ".", "number_connected_components", "(", "G", ")", "\n", "\n", "return", "1", "/", "(", "f", "/", "robots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.largest_cluster": [[96, 115], ["fitness_functions.neighbors_adjacency_map", "networkx.from_numpy_array", "max", "len", "networkx.connected_components"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.neighbors_adjacency_map"], ["", "def", "largest_cluster", "(", "log", ")", ":", "\n", "\t", "'''\n\tGlobal fitness function to get size of the largest cluster, \n\trelative to the size of the swarm\n\t'''", "\n", "\n", "# Get an adjacency map of all robots", "\n", "A", ",", "robots", "=", "neighbors_adjacency_map", "(", "log", ")", "\n", "\n", "# Set up a graph G showing their connections with networkx", "\n", "G", "=", "nx", ".", "from_numpy_array", "(", "A", ")", "\n", "\n", "# Use networkx to get the largest clusters in G", "\n", "largest_cc", "=", "max", "(", "nx", ".", "connected_components", "(", "G", ")", ",", "key", "=", "len", ")", "\n", "\n", "# Get fitness = size of the largest cluster", "\n", "f", "=", "len", "(", "largest_cc", ")", "\n", "\n", "return", "f", "/", "robots", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.mean_number_of_neighbors": [[116, 140], ["fitness_functions.get_positions", "range", "numpy.where", "fitness_functions.get_distance"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.get_positions", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fitness_functions.get_distance"], ["", "def", "mean_number_of_neighbors", "(", "log", ")", ":", "\n", "\t", "'''\n\tLocal fitness function to get the mean number\n\tof neighbors that each robot has\n\t'''", "\n", "# Get positions of robots", "\n", "robots", ",", "p", "=", "get_positions", "(", "log", ")", "\n", "\n", "# Get fitness", "\n", "## Initialize fitness", "\n", "f", "=", "0", "\n", "\n", "## Add to it", "\n", "for", "r", "in", "range", "(", "0", ",", "robots", ")", ":", "\n", "### Distance to robots", "\n", "\t\t", "d", "=", "np", ".", "where", "(", "(", "get_distance", "(", "p", "[", "r", ",", ":", "]", "-", "p", ")", "<", "rangesensor", ")", ")", "[", "0", "]", "\n", "\n", "### Size of neighborhood (exclude current robot, hence the -1)", "\n", "n_neighbors", "=", "d", ".", "size", "-", "1", "\n", "\n", "### Add to fitness", "\n", "f", "+=", "(", "n_neighbors", ")", "/", "robots", "\n", "\n", "", "return", "f", "", "", ""]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_logs.transpose_list": [[17, 20], ["range", "len"], "function", ["None"], ["def", "transpose_list", "(", "data", ")", ":", "\n", "\t", "'''List comprehension to rotate a 2D list object'''", "\n", "return", "[", "[", "row", "[", "i", "]", "for", "row", "in", "data", "]", "for", "i", "in", "range", "(", "len", "(", "data", "[", "0", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_logs.process_logs": [[21, 47], ["tools.swarmulator.swarmulator", "list", "plot_logs.transpose_list", "numpy.mean", "numpy.std", "swarmulator.swarmulator.load_column", "tv.append", "transpose_list.append", "map", "os.listdir", "f.startswith", "numpy.interp"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_onlinelearning.transpose_list", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load_column"], ["", "def", "process_logs", "(", "folder", ",", "startswith", ")", ":", "\n", "# Swarmulator API (to extract the log files)", "\n", "\t", "s", "=", "swarmulator", ".", "swarmulator", "(", "verbose", "=", "False", ")", "\n", "\n", "# Get all data", "\n", "tv", "=", "[", "]", "# Time vectors", "\n", "fv", "=", "[", "]", "# Fitness vectors", "\n", "## Log file list optimized", "\n", "filelist", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "folder", ")", "\n", "if", "f", ".", "startswith", "(", "startswith", ")", "]", "\n", "\n", "for", "file", "in", "filelist", ":", "\n", "# Load the data from a log file, column=5 is the fitness", "\n", "\t\t", "t", ",", "f", "=", "s", ".", "load_column", "(", "file", "=", "folder", "+", "file", ",", "column", "=", "5", ")", "\n", "tv", ".", "append", "(", "t", ")", "\n", "fv", ".", "append", "(", "f", ")", "\n", "\n", "# Align values and transpose", "\n", "", "fv", "=", "list", "(", "map", "(", "lambda", "t", ",", "x", ":", "np", ".", "interp", "(", "tv", "[", "0", "]", ",", "t", ",", "x", ")", ",", "tv", ",", "fv", ")", ")", "\n", "fv", "=", "transpose_list", "(", "fv", ")", "\n", "\n", "# Get the mean and the standard deviation at each recorded time step", "\n", "f_mean", "=", "np", ".", "mean", "(", "fv", ",", "1", ")", "\n", "f_std", "=", "np", ".", "std", "(", "fv", ",", "1", ")", "\n", "\n", "return", "tv", ",", "fv", ",", "f_mean", ",", "f_std", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_logs.main": [[49, 91], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "plot_logs.process_logs", "plot_logs.process_logs", "tools.prettyplot.setup", "pp.adjust.plot", "pp.adjust.fill_between", "pp.adjust.plot", "pp.adjust.fill_between", "tools.prettyplot.adjust", "pp.adjust.xlabel", "pp.adjust.ylabel", "pp.adjust.savefig", "pp.adjust.close", "pp.adjust.show", "pp.adjust.close", "os.path.exists", "os.makedirs", "os.path.splitext", "os.path.dirname", "os.path.dirname", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_onlinelearning.process_logs", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_onlinelearning.process_logs", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust"], ["", "def", "main", "(", "args", ")", ":", "\n", "# Input argument parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Simulate a task to gather the data for optimization'", ")", "\n", "parser", ".", "add_argument", "(", "'controller'", ",", "type", "=", "str", ",", "help", "=", "\"(str) controller\"", ")", "\n", "parser", ".", "add_argument", "(", "'folder'", ",", "type", "=", "str", ",", "help", "=", "\"(str) path to logs folder\"", ")", "\n", "parser", ".", "add_argument", "(", "'folder2'", ",", "type", "=", "str", ",", "help", "=", "\"(str) path to logs folder\"", ")", "\n", "parser", ".", "add_argument", "(", "'-format'", ",", "type", "=", "str", ",", "default", "=", "\"pdf\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "tv", ",", "fv", ",", "f_mean", ",", "f_std", "=", "process_logs", "(", "args", ".", "folder", ",", "\"sample_log\"", ")", "\n", "tv_e", ",", "fv_e", ",", "f_mean_e", ",", "f_std_e", "=", "process_logs", "(", "args", ".", "folder2", ",", "\"evo_log\"", ")", "\n", "\n", "# Plot", "\n", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "plt", ".", "plot", "(", "tv", "[", "0", "]", ",", "f_mean", ",", "color", "=", "\"blue\"", ")", "\n", "plt", ".", "fill_between", "(", "tv", "[", "0", "]", ",", "\n", "f_mean", "-", "f_std", ",", "\n", "f_mean", "+", "f_std", ",", "\n", "alpha", "=", "0.2", ",", "\n", "color", "=", "\"blue\"", ")", "\n", "plt", ".", "plot", "(", "tv_e", "[", "0", "]", ",", "f_mean_e", ",", "color", "=", "\"red\"", ")", "\n", "plt", ".", "fill_between", "(", "tv_e", "[", "0", "]", ",", "\n", "f_mean_e", "-", "f_std_e", ",", "\n", "f_mean_e", "+", "f_std_e", ",", "\n", "alpha", "=", "0.2", ",", "\n", "color", "=", "\"red\"", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", "\n", "plt", ".", "xlabel", "(", "\"Time [s]\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Fitness [-]\"", ")", "\n", "\n", "# Save or show", "\n", "fname", "=", "\"fitness_logs_%s.%s\"", "%", "(", "args", ".", "controller", ",", "args", ".", "format", ")", "\n", "if", "fname", "is", "not", "None", ":", "\n", "\t\t", "folder", "=", "\"figures/fitness_logs/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", "\n", "", "filename_raw", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", "[", "0", "]", "\n", "plt", ".", "savefig", "(", "folder", "+", "\"%s.%s\"", "%", "(", "filename_raw", ",", "args", ".", "format", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_onlinelearning.transpose_list": [[19, 22], ["range", "len"], "function", ["None"], ["def", "transpose_list", "(", "data", ")", ":", "\n", "\t", "'''List comprehension to rotate a 2D list object'''", "\n", "return", "[", "[", "row", "[", "i", "]", "for", "row", "in", "data", "]", "for", "i", "in", "range", "(", "len", "(", "data", "[", "0", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_onlinelearning.process_logs": [[23, 49], ["tools.swarmulator.swarmulator", "list", "plot_onlinelearning.transpose_list", "numpy.mean", "numpy.std", "swarmulator.swarmulator.load_column", "tv.append", "transpose_list.append", "map", "len", "os.listdir", "f.startswith", "numpy.interp"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_onlinelearning.transpose_list", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load_column"], ["", "def", "process_logs", "(", "folder", ",", "startswith", ")", ":", "\n", "# Swarmulator API (to extract the log files)", "\n", "\t", "s", "=", "swarmulator", ".", "swarmulator", "(", "verbose", "=", "False", ")", "\n", "\n", "# Get all data", "\n", "tv", "=", "[", "]", "# Time vectors", "\n", "fv", "=", "[", "]", "# Fitness vectors", "\n", "## Log file list optimized", "\n", "filelist", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "folder", ")", "\n", "if", "f", ".", "startswith", "(", "startswith", ")", "]", "\n", "\n", "for", "file", "in", "filelist", ":", "\n", "# Load the data from a log file, column=5 is the fitness", "\n", "\t\t", "t", ",", "f", "=", "s", ".", "load_column", "(", "file", "=", "folder", "+", "file", ",", "column", "=", "5", ")", "\n", "tv", ".", "append", "(", "t", ")", "\n", "fv", ".", "append", "(", "f", ")", "\n", "\n", "# Align values and transpose", "\n", "", "fv", "=", "list", "(", "map", "(", "lambda", "t", ",", "x", ":", "np", ".", "interp", "(", "tv", "[", "0", "]", ",", "t", ",", "x", ")", ",", "tv", ",", "fv", ")", ")", "\n", "fv", "=", "transpose_list", "(", "fv", ")", "\n", "\n", "# Get the mean and the standard deviation at each recorded time step", "\n", "f_mean", "=", "np", ".", "mean", "(", "fv", ",", "1", ")", "\n", "f_std", "=", "np", ".", "std", "(", "fv", ",", "1", ")", "\n", "\n", "return", "tv", ",", "fv", ",", "f_mean", ",", "f_std", ",", "len", "(", "filelist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_onlinelearning.main": [[51, 95], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "tools.prettyplot.setup", "enumerate", "pp.adjust.legend", "tools.prettyplot.adjust", "pp.adjust.xlabel", "pp.adjust.ylabel", "pp.adjust.savefig", "pp.adjust.close", "plot_onlinelearning.process_logs", "pp.adjust.plot", "pp.adjust.plot", "pp.adjust.fill_between", "os.path.exists", "os.makedirs", "os.path.splitext", "os.path.dirname", "os.path.dirname", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_onlinelearning.process_logs"], ["", "def", "main", "(", "args", ")", ":", "\n", "# Input argument parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Simulate a task to gather the data for optimization'", ")", "\n", "parser", ".", "add_argument", "(", "'controller'", ",", "type", "=", "str", ",", "help", "=", "\"(str) path to logs folder\"", ")", "\n", "parser", ".", "add_argument", "(", "'-format'", ",", "type", "=", "str", ",", "default", "=", "\"pdf\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "pf", "=", "\"data/%s/\"", "%", "args", ".", "controller", "\n", "folders", "=", "[", "\"onlinelearning_detach_false_shared_false_iter_10_boost_1/\"", ",", "\"onlinelearning_detach_false_shared_true_iter_10_boost_1/\"", "]", "\n", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "li", "=", "[", "]", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "folders", ")", ":", "\n", "\t\t", "tv", ",", "fv", ",", "f_mean", ",", "f_std", ",", "nlogs", "=", "process_logs", "(", "pf", "+", "f", ",", "\"log\"", ")", "\n", "\n", "if", "i", "==", "0", ":", "c", "=", "\"red\"", "\n", "else", ":", "c", "=", "\"blue\"", "\n", "\n", "# Plot", "\n", "l", "=", "plt", ".", "plot", "(", "tv", "[", "0", "]", ",", "fv", ",", "alpha", "=", "0.2", ",", "color", "=", "\"gray\"", ")", "\n", "l2", "=", "plt", ".", "plot", "(", "tv", "[", "0", "]", ",", "f_mean", ",", "color", "=", "c", ")", "\n", "li", "+=", "l2", "\n", "plt", ".", "fill_between", "(", "tv", "[", "0", "]", ",", "\n", "f_mean", "-", "f_std", ",", "\n", "f_mean", "+", "f_std", ",", "\n", "alpha", "=", "0.2", ",", "\n", "color", "=", "c", ")", "\n", "\n", "\n", "# Axis", "\n", "# plt.legend()", "\n", "", "plt", ".", "legend", "(", "[", "li", "[", "0", "]", ",", "li", "[", "-", "1", "]", "]", ",", "[", "'Local model'", ",", "'Shared local model'", "]", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", "\n", "plt", ".", "xlabel", "(", "\"Time [s]\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Fitness [-]\"", ")", "\n", "\n", "# # Save or show", "\n", "fname", "=", "\"fitness_logs_%s.%s\"", "%", "(", "args", ".", "controller", ",", "args", ".", "format", ")", "\n", "folder", "=", "\"figures/onlinelearning/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", "\n", "", "filename_raw", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", "[", "0", "]", "\n", "plt", ".", "savefig", "(", "folder", "+", "\"onlinelearning_%s.%s\"", "%", "(", "filename_raw", ",", "args", ".", "format", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_nn.main": [[13, 119], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "tools.prettyplot.setup", "enumerate", "pp.adjust.xlabel", "pp.adjust.ylabel", "pp.adjust.legend", "tools.prettyplot.adjust", "pp.adjust.savefig", "pp.adjust.close", "filenames.append", "filenames.append", "filenames.append", "name.append", "name.append", "name.append", "data.append", "pp.adjust.plot", "pp.adjust.fill_between", "os.path.exists", "os.makedirs", "os.path.splitext", "filenames.append", "filenames.append", "filenames.append", "filenames.append", "filenames.append", "filenames.append", "name.append", "name.append", "name.append", "name.append", "name.append", "name.append", "m.append", "s.append", "plot_nn.main.process"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust"], ["def", "main", "(", "args", ")", ":", "\n", "# Input argument parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Simulate a task to gather \\\n\t\t\t\t\t\t the data for optimization'", ")", "\n", "parser", ".", "add_argument", "(", "'controller'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"(str) Controller\"", ")", "\n", "parser", ".", "add_argument", "(", "'-format'", ",", "type", "=", "str", ",", "default", "=", "\"pdf\"", ",", "\n", "help", "=", "\"(str) Figure file format, default pdf\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Default character init", "\n", "df", "=", "\"data/%s/validation_%s_\"", "%", "(", "args", ".", "controller", ",", "args", ".", "controller", ")", "\n", "\n", "filenames", "=", "[", "]", "\n", "name", "=", "[", "]", "\n", "if", "args", ".", "controller", "==", "\"aggregation\"", ":", "\n", "\t\t", "filenames", ".", "append", "(", "df", "+", "\"aggregation_1.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"aggregation_2.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"aggregation_3.pkl\"", ")", "\n", "# Plot names", "\n", "name", ".", "append", "(", "\"VS 1\"", ")", "\n", "name", ".", "append", "(", "\"VS 2\"", ")", "\n", "name", ".", "append", "(", "\"VS 3\"", ")", "\n", "", "elif", "args", ".", "controller", "==", "\"pfsm_exploration\"", ":", "\n", "# Files where it evaluates against itself", "\n", "\t\t", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_1.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_2.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_3.pkl\"", ")", "\n", "# Files where it evaluates against different dynamics", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_mod_1.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_mod_2.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_mod_3.pkl\"", ")", "\n", "name", ".", "append", "(", "\"VS 1 (B1)\"", ")", "\n", "name", ".", "append", "(", "\"VS 2 (B1)\"", ")", "\n", "name", ".", "append", "(", "\"VS 3 (B1)\"", ")", "\n", "name", ".", "append", "(", "\"VS 1 (B2)\"", ")", "\n", "name", ".", "append", "(", "\"VS 2 (B2)\"", ")", "\n", "name", ".", "append", "(", "\"VS 3 (B2)\"", ")", "\n", "", "elif", "args", ".", "controller", "==", "\"pfsm_exploration_mod\"", ":", "\n", "# Files where it evaluates against itself", "\n", "\t\t", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_mod_1.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_mod_2.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_mod_3.pkl\"", ")", "\n", "# Files where it evaluates against different dynamics", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_1.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_2.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"pfsm_exploration_3.pkl\"", ")", "\n", "name", ".", "append", "(", "\"VS 1 (B2)\"", ")", "\n", "name", ".", "append", "(", "\"VS 2 (B2)\"", ")", "\n", "name", ".", "append", "(", "\"VS 3 (B2)\"", ")", "\n", "name", ".", "append", "(", "\"VS 1 (B1)\"", ")", "\n", "name", ".", "append", "(", "\"VS 2 (B1)\"", ")", "\n", "name", ".", "append", "(", "\"VS 3 (B1)\"", ")", "\n", "", "elif", "args", ".", "controller", "==", "\"forage\"", ":", "\n", "\t\t", "filenames", ".", "append", "(", "df", "+", "\"forage_1.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"forage_2.pkl\"", ")", "\n", "filenames", ".", "append", "(", "df", "+", "\"forage_3.pkl\"", ")", "\n", "name", ".", "append", "(", "\"VS 1\"", ")", "\n", "name", ".", "append", "(", "\"VS 2\"", ")", "\n", "name", ".", "append", "(", "\"VS 3\"", ")", "\n", "", "else", ":", "\n", "\t\t", "print", "(", "\"Not a valid mode!!!!\"", ")", "\n", "\n", "", "def", "process", "(", "file", ")", ":", "\n", "\t\t", "m", "=", "[", "]", "# Mean", "\n", "s", "=", "[", "]", "# Standard deviation", "\n", "for", "e", "in", "file", ":", "\n", "\t\t\t", "m", ".", "append", "(", "np", ".", "nanmean", "(", "e", ")", ")", "\n", "s", ".", "append", "(", "np", ".", "nanstd", "(", "e", ")", ")", "\n", "", "return", "m", ",", "s", "\n", "\n", "# Load and process the data in each file", "\n", "", "data", "=", "[", "]", "\n", "for", "f", "in", "filenames", ":", "\n", "\t\t", "data", ".", "append", "(", "process", "(", "fh", ".", "load_pkl", "(", "f", ")", ")", ")", "\n", "\n", "# Plot", "\n", "", "color", "=", "[", "\"blue\"", ",", "\"red\"", ",", "\"green\"", ",", "\"black\"", ",", "\"magenta\"", ",", "\"lime\"", "]", "\n", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "\n", "# Plot line", "\n", "\t\t", "plt", ".", "plot", "(", "d", "[", "0", "]", ",", "label", "=", "name", "[", "i", "]", ",", "color", "=", "color", "[", "i", "]", ")", "\n", "\n", "# Error margin", "\n", "plt", ".", "fill_between", "(", "range", "(", "len", "(", "d", "[", "0", "]", ")", ")", ",", "\n", "np", ".", "array", "(", "d", "[", "0", "]", ")", "-", "np", ".", "array", "(", "d", "[", "1", "]", ")", ",", "\n", "np", ".", "array", "(", "d", "[", "0", "]", ")", "+", "np", ".", "array", "(", "d", "[", "1", "]", ")", ",", "\n", "alpha", "=", "0.2", ",", "\n", "color", "=", "color", "[", "i", "]", ")", "\n", "\n", "# Plot deets", "\n", "", "plt", ".", "xlabel", "(", "\"Simulation\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Correlation\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", "\n", "\n", "# Save", "\n", "fname", "=", "\"nn_correlation_%s.%s\"", "%", "(", "args", ".", "controller", ",", "args", ".", "format", ")", "\n", "folder", "=", "\"figures/nn/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", "\n", "", "filename_raw", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", "[", "0", "]", "\n", "plt", ".", "savefig", "(", "folder", "+", "\"%s.%s\"", "%", "(", "filename_raw", ",", "args", ".", "format", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_benchmark.plot_benchmark": [[14, 21], ["enumerate", "numpy.append"], "function", ["None"], ["def", "plot_benchmark", "(", "f", ")", ":", "\n", "\t", "data", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "f", ")", ":", "\n", "\t\t", "data", "=", "np", ".", "append", "(", "data", ",", "d", ")", "\n", "# plt.hist(d,alpha=0.1, label='Random' if i==0 else None)", "\n", "# plt.boxplot(data)", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_benchmark.benchmark": [[26, 50], ["tools.prettyplot.setup", "tools.fileHandler.load_pkl", "plot_benchmark.plot_benchmark", "pp.adjust.boxplot", "pp.adjust.ylabel", "pp.adjust.gca", "plt.gca.set_xticklabels", "tools.prettyplot.adjust", "pp.adjust.savefig", "pp.adjust.close", "pp.adjust.show", "pp.adjust.close", "tools.fileHandler.load_pkl", "tools.fileHandler.load_pkl", "tools.fileHandler.load_pkl", "tools.fileHandler.load_pkl", "tools.fileHandler.load_pkl", "os.path.exists", "os.makedirs", "os.path.splitext", "os.path.dirname", "os.path.dirname", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_benchmark.plot_benchmark", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.fileHandler.load_pkl"], ["", "def", "benchmark", "(", "benchmarkfile", ",", "om", "=", "None", ",", "om_2", "=", "None", ",", "em", "=", "None", ",", "filename", "=", "None", ",", "fileformat", "=", "\"pdf\"", ")", ":", "\n", "\t", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "f", "=", "fh", ".", "load_pkl", "(", "benchmarkfile", ")", "\n", "bm", "=", "plot_benchmark", "(", "f", ")", "\n", "if", "om_2", "is", "None", ":", "data", "=", "[", "bm", ",", "fh", ".", "load_pkl", "(", "om", ")", ",", "fh", ".", "load_pkl", "(", "em", ")", "]", "\n", "else", ":", "data", "=", "[", "bm", ",", "fh", ".", "load_pkl", "(", "om", ")", ",", "fh", ".", "load_pkl", "(", "om_2", ")", ",", "fh", ".", "load_pkl", "(", "em", ")", "]", "\n", "plt", ".", "boxplot", "(", "data", ")", "\n", "plt", ".", "ylabel", "(", "\"Fitness $F_g$\"", ")", "\n", "labels", "=", "[", "\"Random\"", ",", "\"PR\"", ",", "\"Evolved\"", "]", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticklabels", "(", "labels", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", "\n", "\n", "# Save or show", "\n", "if", "filename", "is", "not", "None", ":", "\n", "\t\t", "folder", "=", "\"figures/benchmark/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", "\n", "", "filename_raw", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filename", ")", ")", "[", "0", "]", "\n", "plt", ".", "savefig", "(", "folder", "+", "\"%s.%s\"", "%", "(", "filename_raw", ",", "fileformat", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_benchmark.main": [[51, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "plot_benchmark.benchmark", "print"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_benchmark.benchmark"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Simulate a task to gather the data for optimization'", ")", "\n", "parser", ".", "add_argument", "(", "'controller'", ",", "type", "=", "str", ",", "help", "=", "\"(str) Benchmark fitness logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'-format'", ",", "type", "=", "str", ",", "help", "=", "\"(str) Controller\"", ",", "default", "=", "\"pdf\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "filename", "=", "[", "]", "\n", "name", "=", "[", "]", "\n", "om_2", "=", "None", "\n", "pref", "=", "\"data/\"", "+", "args", ".", "controller", "+", "\"/benchmark_\"", "\n", "if", "args", ".", "controller", "==", "\"aggregation\"", ":", "\n", "\t\t", "bm", "=", "pref", "+", "\"random_aggregation_t200_r30_runs100_1.pkl\"", "\n", "om", "=", "pref", "+", "\"optimized_aggregation_t200_r30_runs100_1.pkl\"", "\n", "em", "=", "pref", "+", "\"evolution_aggregation_t200_r30_runs100_1.pkl\"", "\n", "", "elif", "args", ".", "controller", "==", "\"pfsm_exploration\"", ":", "\n", "\t\t", "bm", "=", "pref", "+", "\"random_pfsm_exploration_t200_r30_runs100_1.pkl\"", "\n", "om", "=", "pref", "+", "\"optimized_pfsm_exploration_t200_r30_runs100_1.pkl\"", "\n", "em", "=", "pref", "+", "\"evolution_pfsm_exploration_t200_r30_runs100_1.pkl\"", "\n", "", "elif", "args", ".", "controller", "==", "\"pfsm_exploration_mod\"", ":", "\n", "\t\t", "bm", "=", "pref", "+", "\"random_pfsm_exploration_mod_t200_r30_runs100_1.pkl\"", "\n", "om", "=", "pref", "+", "\"optimized_pfsm_exploration_mod_t200_r30_runs100_1.pkl\"", "\n", "em", "=", "pref", "+", "\"evolution_pfsm_exploration_mod_t200_r30_runs100_1.pkl\"", "\n", "", "elif", "args", ".", "controller", "==", "\"forage\"", ":", "\n", "\t\t", "bm", "=", "pref", "+", "\"random_forage_t500_r20_runs100_1.pkl\"", "\n", "om", "=", "pref", "+", "\"optimized_forage_t500_r20_runs100_1.pkl\"", "\n", "em", "=", "pref", "+", "\"evolution_forage_t500_r20_runs100_1.pkl\"", "\n", "", "else", ":", "\n", "\t\t", "print", "(", "\"\\n\\n\\nNot a valid\\n\\n\\n\"", ")", "\n", "\n", "", "f", "=", "\"benchmark_%s.%s\"", "%", "(", "args", ".", "controller", ",", "args", ".", "format", ")", "\n", "benchmark", "(", "bm", ",", "om", "=", "om", ",", "om_2", "=", "om_2", ",", "em", "=", "em", ",", "filename", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_evolution.plot_evolution": [[17, 48], ["label.startswith", "matplotlib.semilogx", "range", "len", "matplotlib.plt", "matplotlib.plt"], "function", ["None"], ["def", "plot_evolution", "(", "plt", ",", "e", ",", "label", "=", "None", ")", ":", "\n", "\t", "'''Plot the evolution outcome'''", "\n", "if", "label", ".", "startswith", "(", "\"evolution_mbe\"", ")", ":", "\n", "\t\t", "color", "=", "\"green\"", "\n", "ls", "=", "'-'", "\n", "lw", "=", "3", "\n", "", "else", ":", "\n", "\t\t", "color", "=", "\"gray\"", "\n", "ls", "=", "'--'", "\n", "lw", "=", "1", "\n", "\n", "# Mean performance", "\n", "", "l", "=", "plt", ".", "semilogx", "(", "range", "(", "1", ",", "len", "(", "e", ".", "stats", ")", "+", "1", ")", ",", "\n", "[", "s", "[", "'mu'", "]", "for", "s", "in", "e", ".", "stats", "]", ",", "\n", "color", "=", "color", ",", "ls", "=", "ls", ",", "lw", "=", "lw", ")", "\n", "\n", "# Standard deviation", "\n", "# plt.fill_between(range(1, len(e.stats)+1),", "\n", "# \t\t\t[ s['mu']-s['std'] for s in e.stats ],", "\n", "# \t\t\t[ s['mu']+s['std'] for s in e.stats ], ", "\n", "# \t\t\talpha=0.2)", "\n", "\n", "# Min-max performance", "\n", "# plt.fill_between(range(1, len(e.stats)+1),", "\n", "# \t\t\t[ s['min'] for s in e.stats ],", "\n", "# \t\t\t[ s['max'] for s in e.stats ], ", "\n", "# \t\t\talpha=0.1, ", "\n", "# \t\t\tcolor=\"green\")", "\n", "\n", "# Return", "\n", "return", "plt", ",", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_evolution.main": [[50, 101], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "classes.evolution.evolution", "tools.prettyplot.setup", "sorted", "pp.adjust.xlim", "pp.adjust.xlabel", "pp.adjust.ylabel", "pp.adjust.legend", "tools.prettyplot.adjust", "os.path.dirname", "pp.adjust.savefig", "pp.adjust.close", "evolution.evolution.load", "print", "plot_evolution.plot_evolution", "os.path.exists", "os.makedirs", "os.path.splitext", "len", "len", "os.path.dirname", "os.path.dirname", "os.path.basename", "os.listdir", "str", "f.startswith", "f.endswith"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_evolution.plot_evolution"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Simulate a task to gather the data for optimization'", ")", "\n", "parser", ".", "add_argument", "(", "'folder'", ",", "type", "=", "str", ",", "help", "=", "\"(str) folder\"", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-format'", ",", "type", "=", "str", ",", "default", "=", "\"pdf\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Load evolution API", "\n", "e", "=", "evolution", ".", "evolution", "(", ")", "\n", "\n", "# Initalize plot", "\n", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "\n", "# Initialize baseline limit in x axis", "\n", "lim", "=", "0", "\n", "\n", "# Plot all evolution files found in the given folder together", "\n", "## Extract all evolution files in the indicated folder", "\n", "filelist", "=", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "args", ".", "folder", ")", "if", "\n", "f", ".", "startswith", "(", "'evolution_'", ")", "and", "f", ".", "endswith", "(", "'pkl'", ")", "]", ")", "\n", "\n", "# filelist = [f for f in os.listdir(args.folder) if ", "\n", "# \t\t\t\tf.startswith('evolution_') and f.endswith('pkl')]", "\n", "li", "=", "[", "]", "\n", "## For each file in the list, add the evolution to the plot", "\n", "for", "file", "in", "filelist", ":", "\n", "## Load the file", "\n", "\t\t", "e", ".", "load", "(", "args", ".", "folder", "+", "file", ")", "\n", "\n", "## Plot it", "\n", "print", "(", "file", ")", "\n", "plt", ",", "l", "=", "plot_evolution", "(", "plt", ",", "e", ",", "label", "=", "str", "(", "file", ")", ")", "\n", "li", "+=", "l", "\n", "## Fix lim according to the highest number of generations", "\n", "if", "len", "(", "e", ".", "stats", ")", ">", "lim", ":", "\n", "\t\t\t", "lim", "=", "len", "(", "e", ".", "stats", ")", "\n", "\n", "# Axis labels and dimensions", "\n", "", "", "plt", ".", "xlim", "(", "0", ",", "lim", ")", "\n", "plt", ".", "xlabel", "(", "'Generation'", ")", "\n", "plt", ".", "ylabel", "(", "'Fitness'", ")", "\n", "plt", ".", "legend", "(", "[", "li", "[", "0", "]", ",", "li", "[", "-", "1", "]", "]", ",", "[", "'Model-based runs'", ",", "'Standard runs'", "]", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", "\n", "\n", "# Save figure", "\n", "fname", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "folder", ")", "\n", "folder", "=", "\"figures/evolution/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", "\n", "", "filename_raw", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", "[", "0", "]", "\n", "plt", ".", "savefig", "(", "folder", "+", "\"evolution_%s.%s\"", "%", "(", "filename_raw", ",", "args", ".", "format", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.load_filelist": [[16, 19], ["sorted", "os.listdir", "f.endswith"], "function", ["None"], ["def", "load_filelist", "(", "f", ")", ":", "\n", "\t", "'''Loads all npz files from the specified folder'''", "\n", "return", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "f", ")", "if", "f", ".", "endswith", "(", "'.npz'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.evaluate_model_values": [[20, 37], ["plot_model.load_filelist", "enumerate", "sim.load", "v.append", "numpy.array", "tools.matrixOperations.normalize_rows().flatten", "tools.matrixOperations.normalize_rows"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.load_filelist", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.matrixOperations.normalize_rows"], ["", "def", "evaluate_model_values", "(", "f", ",", "a", "=", "0", ")", ":", "\n", "# Get all the files", "\n", "\t", "filelist", "=", "load_filelist", "(", "f", ")", "\n", "\n", "# Load a transition model", "\n", "v", "=", "[", "]", "\n", "for", "j", ",", "filename", "in", "enumerate", "(", "filelist", ")", ":", "\n", "\t\t", "sim", ".", "load", "(", "f", "+", "filename", ",", "verbose", "=", "False", ")", "\n", "if", "j", "==", "0", ":", "\n", "\t\t\t", "m", "=", "sim", ".", "A", "[", "a", "]", "\n", "", "else", ":", "\n", "\t\t\t", "m", "+=", "sim", ".", "A", "[", "a", "]", "\n", "", "v", ".", "append", "(", "matop", ".", "normalize_rows", "(", "m", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "", "data", "=", "np", ".", "array", "(", "v", ")", ".", "T", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.learn_model": [[38, 49], ["plot_model.load_filelist", "enumerate", "sim.load", "sim.load_update"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.load_filelist", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.swarmulator.swarmulator.load", "home.repos.pwc.inspect_result.coppolam_SI_framework.classes.simulator.simulator.load_update"], ["", "def", "learn_model", "(", "sim", ",", "f", ")", ":", "\n", "\t", "filelist", "=", "load_filelist", "(", "f", ")", "\n", "\n", "v", "=", "[", "]", "\n", "for", "j", ",", "filename", "in", "enumerate", "(", "filelist", ")", ":", "\n", "\t\t", "if", "j", "==", "0", ":", "\n", "\t\t\t", "sim", ".", "load", "(", "f", "+", "filename", ",", "verbose", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t", "sim", ".", "load_update", "(", "f", "+", "filename", ",", "verbose", "=", "False", ")", "\n", "\n", "", "", "return", "sim", ".", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.main": [[50, 96], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "plot_model.evaluate_model_values", "tools.prettyplot.setup", "pp.adjust.xlabel", "pp.adjust.ylabel", "tools.prettyplot.adjust", "pp.adjust.ylim", "os.path.basename", "pp.adjust.savefig", "pp.adjust.close", "os.path.exists", "os.makedirs", "os.path.dirname", "pp.adjust.plot", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.coppolam_SI_framework.plot.plot_model.evaluate_model_values", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.setup", "home.repos.pwc.inspect_result.coppolam_SI_framework.tools.prettyplot.adjust"], ["", "def", "main", "(", "args", ")", ":", "\n", "# Parse arguments", "\n", "\n", "## Load parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Simulate a task to gather the data for optimization'", "\n", ")", "\n", "\n", "## Main arguments", "\n", "parser", ".", "add_argument", "(", "'controller'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"(str) Training data folder\"", ")", "\n", "parser", ".", "add_argument", "(", "'folder_training'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"(str) Training data folder\"", ")", "\n", "parser", ".", "add_argument", "(", "'-format'", ",", "type", "=", "str", ",", "default", "=", "\"pdf\"", ",", "\n", "help", "=", "\"(str) Training data folder\"", ")", "\n", "\n", "## Parse", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Load data", "\n", "data", "=", "evaluate_model_values", "(", "args", ".", "folder_training", ")", "\n", "\n", "# Set folder", "\n", "folder", "=", "\"figures/model/\"", "\n", "\n", "# Plot the difference to the last estimate to check the convergence", "\n", "plt", "=", "pp", ".", "setup", "(", ")", "\n", "for", "d", "in", "data", ":", "\n", "\n", "# Only plot the ones that showed transitions", "\n", "\t\t", "if", "d", "[", "-", "1", "]", ">", "0", ":", "\n", "\t\t\t", "plt", ".", "plot", "(", "d", "-", "(", "d", "[", "-", "1", "]", ")", ")", "# Residual", "\n", "\n", "", "", "plt", ".", "xlabel", "(", "\"Simulation number\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Difference to final estimate\"", ")", "\n", "plt", "=", "pp", ".", "adjust", "(", "plt", ")", "\n", "plt", ".", "ylim", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "# Create a directory if it doesn't exist", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "folder", ")", ")", "\n", "", "vname", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "folder_training", ")", ")", "\n", "\n", "# Save the figure", "\n", "plt", ".", "savefig", "(", "folder", "+", "\"model_%s_%s.%s\"", "%", "(", "args", ".", "controller", ",", "vname", ",", "args", ".", "format", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]]}