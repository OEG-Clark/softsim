{"home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate.FPN_GATE.__init__": [[21, 140], ["detectron2.modeling.backbone.backbone.Backbone.__init__", "fpn_gate._assert_strides_are_log2_contiguous", "enumerate", "list", "tuple", "bottom_up[].output_shape", "bottom_up.output_shape", "enumerate", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "fvcore.c2_xavier_fill", "fvcore.c2_xavier_fill", "int", "fpn_gate.FPN_GATE.add_module", "fpn_gate.FPN_GATE.add_module", "lateral_convs.append", "output_convs.append", "range", "range", "fpn_gate.FPN_GATE._out_feature_strides.keys", "detectron2.layers.get_norm", "detectron2.layers.Conv2d", "fvcore.c2_xavier_fill", "int", "fpn_gate.FPN_GATE.add_module", "fpn_gate.FPN_GATE.distillation_cnvs.append", "math.log2", "len", "fpn_gate.FPN_GATE.bottom_ups.append", "int", "len", "math.log2", "fpn_gate.FPN_GATE.add_module", "fpn_gate.FPN_GATE.add_module", "math.log2"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate._assert_strides_are_log2_contiguous", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.output_shape", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.output_shape"], ["def", "__init__", "(", "\n", "self", ",", "bottom_up", ",", "in_features", ",", "out_channels", ",", "norm", "=", "\"\"", ",", "top_block", "=", "None", ",", "fuse_type", "=", "\"sum\"", ",", "gate", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            bottom_up (Backbone): module representing the bottom up subnetwork.\n                Must be a subclass of :class:`Backbone`. The multi-scale feature\n                maps generated by the bottom up network, and listed in `in_features`,\n                are used to generate FPN levels.\n            in_features (list[str]): names of the input feature maps coming\n                from the backbone to which FPN is attached. For example, if the\n                backbone produces [\"res2\", \"res3\", \"res4\"], any *contiguous* sublist\n                of these may be used; order must be from high to low resolution.\n            out_channels (int): number of channels in the output feature maps.\n            norm (str): the normalization to use.\n            top_block (nn.Module or None): if provided, an extra operation will\n                be performed on the output of the last (smallest resolution)\n                FPN output, and the result will extend the result list. The top_block\n                further downsamples the feature map. It must have an attribute\n                \"num_levels\", meaning the number of extra FPN levels added by\n                this block, and \"in_feature\", which is a string representing\n                its input feature (e.g., p5).\n            fuse_type (str): types for fusing the top down features and the lateral\n                ones. It can be \"sum\" (default), which sums up element-wise; or \"avg\",\n                which takes the element-wise mean of the two.\n        \"\"\"", "\n", "super", "(", "FPN_GATE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_features", ",", "in_features", "\n", "self", ".", "gate", "=", "gate", "\n", "self", ".", "in_features", "=", "in_features", "\n", "# Feature map strides and channels from the bottom up network (e.g. ResNet)", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "input_shapes", "=", "bottom_up", "[", "0", "]", ".", "output_shape", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_shapes", "=", "bottom_up", ".", "output_shape", "(", ")", "\n", "", "strides", "=", "[", "input_shapes", "[", "f", "]", ".", "stride", "for", "f", "in", "in_features", "]", "\n", "in_channels_per_feature", "=", "[", "input_shapes", "[", "f", "]", ".", "channels", "for", "f", "in", "in_features", "]", "\n", "_assert_strides_are_log2_contiguous", "(", "strides", ")", "\n", "self", ".", "distillation_cnvs", "=", "[", "]", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "norm", "=", "\"\"", "\n", "use_bias", "=", "norm", "==", "\"\"", "\n", "for", "idx", ",", "channels", "in", "enumerate", "(", "in_channels_per_feature", ")", ":", "\n", "                ", "output_norm", "=", "get_norm", "(", "norm", ",", "channels", ")", "\n", "cat_channels", "=", "channels", "*", "len", "(", "bottom_up", ")", "\n", "distillation_cnv", "=", "Conv2d", "(", "\n", "cat_channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ",", "\n", "norm", "=", "output_norm", ",", "\n", ")", "\n", "weight_init", ".", "c2_xavier_fill", "(", "distillation_cnv", ")", "\n", "stage", "=", "int", "(", "math", ".", "log2", "(", "strides", "[", "idx", "]", ")", ")", "\n", "self", ".", "add_module", "(", "\"distillation_cnv{}\"", ".", "format", "(", "stage", ")", ",", "distillation_cnv", ")", "\n", "self", ".", "distillation_cnvs", ".", "append", "(", "distillation_cnv", ")", "\n", "\n", "", "", "lateral_convs", "=", "[", "]", "\n", "output_convs", "=", "[", "]", "\n", "\n", "use_bias", "=", "norm", "==", "\"\"", "\n", "for", "idx", ",", "in_channels", "in", "enumerate", "(", "in_channels_per_feature", ")", ":", "\n", "            ", "lateral_norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", "\n", "output_norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", "\n", "\n", "lateral_conv", "=", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "use_bias", ",", "norm", "=", "lateral_norm", "\n", ")", "\n", "output_conv", "=", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ",", "\n", "norm", "=", "output_norm", ",", "\n", ")", "\n", "weight_init", ".", "c2_xavier_fill", "(", "lateral_conv", ")", "\n", "weight_init", ".", "c2_xavier_fill", "(", "output_conv", ")", "\n", "stage", "=", "int", "(", "math", ".", "log2", "(", "strides", "[", "idx", "]", ")", ")", "\n", "self", ".", "add_module", "(", "\"fpn_lateral{}\"", ".", "format", "(", "stage", ")", ",", "lateral_conv", ")", "\n", "self", ".", "add_module", "(", "\"fpn_output{}\"", ".", "format", "(", "stage", ")", ",", "output_conv", ")", "\n", "\n", "lateral_convs", ".", "append", "(", "lateral_conv", ")", "\n", "output_convs", ".", "append", "(", "output_conv", ")", "\n", "# Place convs into top-down order (from low to high resolution)", "\n", "# to make the top-down computation in forward clearer.", "\n", "", "self", ".", "lateral_convs", "=", "lateral_convs", "[", ":", ":", "-", "1", "]", "\n", "self", ".", "output_convs", "=", "output_convs", "[", ":", ":", "-", "1", "]", "\n", "self", ".", "top_block", "=", "top_block", "\n", "self", ".", "in_features", "=", "in_features", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "self", ".", "bottom_ups", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bottom_up", ")", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "add_module", "(", "\"bottom_up\"", ",", "bottom_up", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "add_module", "(", "\"bottom_up{}\"", ".", "format", "(", "i", ")", ",", "bottom_up", "[", "i", "]", ")", "\n", "", "self", ".", "bottom_ups", ".", "append", "(", "bottom_up", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "bottom_up", "=", "bottom_up", "\n", "\n", "# Return feature names are \"p<stage>\", like [\"p2\", \"p3\", ..., \"p6\"]", "\n", "", "self", ".", "_out_feature_strides", "=", "{", "\"p{}\"", ".", "format", "(", "int", "(", "math", ".", "log2", "(", "s", ")", ")", ")", ":", "s", "for", "s", "in", "strides", "}", "\n", "# top block output feature maps.", "\n", "if", "self", ".", "top_block", "is", "not", "None", ":", "\n", "            ", "for", "s", "in", "range", "(", "stage", ",", "stage", "+", "self", ".", "top_block", ".", "num_levels", ")", ":", "\n", "                ", "self", ".", "_out_feature_strides", "[", "\"p{}\"", ".", "format", "(", "s", "+", "1", ")", "]", "=", "2", "**", "(", "s", "+", "1", ")", "\n", "\n", "", "", "self", ".", "_out_features", "=", "list", "(", "self", ".", "_out_feature_strides", ".", "keys", "(", ")", ")", "\n", "self", ".", "_out_feature_channels", "=", "{", "k", ":", "out_channels", "for", "k", "in", "self", ".", "_out_features", "}", "\n", "self", ".", "_size_divisibility", "=", "strides", "[", "-", "1", "]", "\n", "assert", "fuse_type", "in", "{", "\"avg\"", ",", "\"sum\"", "}", "\n", "self", ".", "_fuse_type", "=", "fuse_type", "\n", "\n", "# have to do it in __init__ instead.", "\n", "self", ".", "rev_in_features", "=", "tuple", "(", "in_features", "[", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate.FPN_GATE.size_divisibility": [[141, 144], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size_divisibility", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_size_divisibility", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate.FPN_GATE.forward": [[145, 199], ["zip", "results.append", "zip", "range", "fpn_gate.FPN_GATE.bottom_up", "distillation_cnv", "torch.interpolate", "lateral_conv.forward", "results.insert", "results.extend", "len", "len", "dict", "len", "output_conv.forward", "fpn_gate.FPN_GATE.top_block", "list", "bottom_up_features.items", "zip", "torch.cat", "fpn_gate.FPN_GATE._out_features.index", "len"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.forward", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input (dict[str->Tensor]): mapping feature map name (e.g., \"res5\") to\n                feature map tensor for each feature level in high to low resolution order.\n\n        Returns:\n            dict[str->Tensor]:\n                mapping from feature map name to FPN feature map tensor\n                in high to low resolution order. Returned feature names follow the FPN\n                paper convention: \"p<stage>\", where stage has stride = 2 ** stage e.g.,\n                [\"p2\", \"p3\", ..., \"p6\"].\n        \"\"\"", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "bottom_ups", ")", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "bottom_up_features", ",", "gate_loss", ",", "gate_list", ",", "diversity_loss", ",", "dis_feature", "=", "self", ".", "bottom_ups", "[", "i", "]", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "bottom_up_features_add", ",", "gate_loss_add", ",", "gate_list_add", ",", "diversity_loss_add", ",", "dis_feature_add", "=", "self", ".", "bottom_ups", "[", "i", "]", "(", "x", ")", "\n", "for", "key", ",", "value", "in", "bottom_up_features", ".", "items", "(", ")", ":", "\n", "                        ", "bottom_up_features", "[", "key", "]", "=", "torch", ".", "cat", "(", "(", "bottom_up_features", "[", "key", "]", ",", "bottom_up_features_add", "[", "key", "]", ")", ",", "1", ")", "\n", "", "gate_loss", "+=", "gate_loss_add", "\n", "gate_list", "+=", "gate_list_add", "\n", "if", "i", "==", "(", "len", "(", "self", ".", "bottom_ups", ")", "-", "1", ")", ":", "\n", "                        ", "diversity_loss", "=", "diversity_loss_add", "\n", "", "", "", "", "else", ":", "\n", "            ", "bottom_up_features", ",", "gate_loss", ",", "gate_list", ",", "diversity_loss", ",", "dis_feature", "=", "self", ".", "bottom_up", "(", "x", ")", "\n", "", "for", "name", ",", "distillation_cnv", "in", "zip", "(", "self", ".", "in_features", ",", "self", ".", "distillation_cnvs", ")", ":", "\n", "            ", "bottom_up_features", "[", "name", "]", "=", "distillation_cnv", "(", "bottom_up_features", "[", "name", "]", ")", "\n", "", "results", "=", "[", "]", "\n", "prev_features", "=", "self", ".", "lateral_convs", "[", "0", "]", "(", "bottom_up_features", "[", "self", ".", "in_features", "[", "-", "1", "]", "]", ")", "\n", "results", ".", "append", "(", "self", ".", "output_convs", "[", "0", "]", "(", "prev_features", ")", ")", "\n", "\n", "# Reverse feature maps into top-down order (from low to high resolution)", "\n", "for", "features", ",", "lateral_conv", ",", "output_conv", "in", "zip", "(", "\n", "self", ".", "rev_in_features", "[", "1", ":", "]", ",", "self", ".", "lateral_convs", "[", "1", ":", "]", ",", "self", ".", "output_convs", "[", "1", ":", "]", "\n", ")", ":", "\n", "            ", "features", "=", "bottom_up_features", "[", "features", "]", "\n", "top_down_features", "=", "F", ".", "interpolate", "(", "prev_features", ",", "scale_factor", "=", "2.0", ",", "mode", "=", "\"nearest\"", ")", "\n", "# Has to use explicit forward due to https://github.com/pytorch/pytorch/issues/47336", "\n", "lateral_features", "=", "lateral_conv", ".", "forward", "(", "features", ")", "\n", "prev_features", "=", "lateral_features", "+", "top_down_features", "\n", "if", "self", ".", "_fuse_type", "==", "\"avg\"", ":", "\n", "                ", "prev_features", "/=", "2", "\n", "", "results", ".", "insert", "(", "0", ",", "output_conv", ".", "forward", "(", "prev_features", ")", ")", "\n", "\n", "", "if", "self", ".", "top_block", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "top_block", ".", "in_feature", "in", "bottom_up_features", ":", "\n", "                ", "top_block_in_feature", "=", "bottom_up_features", "[", "self", ".", "top_block", ".", "in_feature", "]", "\n", "", "else", ":", "\n", "                ", "top_block_in_feature", "=", "results", "[", "self", ".", "_out_features", ".", "index", "(", "self", ".", "top_block", ".", "in_feature", ")", "]", "\n", "", "results", ".", "extend", "(", "self", ".", "top_block", "(", "top_block_in_feature", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "_out_features", ")", "==", "len", "(", "results", ")", "\n", "return", "dict", "(", "list", "(", "zip", "(", "self", ".", "_out_features", ",", "results", ")", ")", ")", ",", "gate_loss", ",", "bottom_up_features", ",", "gate_list", ",", "diversity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate.FPN_GATE.output_shape": [[200, 206], ["detectron2.layers.ShapeSpec"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "name", ":", "ShapeSpec", "(", "\n", "channels", "=", "self", ".", "_out_feature_channels", "[", "name", "]", ",", "stride", "=", "self", ".", "_out_feature_strides", "[", "name", "]", "\n", ")", "\n", "for", "name", "in", "self", ".", "_out_features", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate.LastLevelMaxPool.__init__": [[225, 229], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_levels", "=", "1", "\n", "self", ".", "in_feature", "=", "\"p5\"", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate.LastLevelMaxPool.forward": [[230, 232], ["torch.max_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate.LastLevelP6P7.__init__": [[240, 248], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "fvcore.c2_xavier_fill"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "in_feature", "=", "\"res5\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_levels", "=", "2", "\n", "self", ".", "in_feature", "=", "in_feature", "\n", "self", ".", "p6", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "p7", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "2", ",", "1", ")", "\n", "for", "module", "in", "[", "self", ".", "p6", ",", "self", ".", "p7", "]", ":", "\n", "            ", "weight_init", ".", "c2_xavier_fill", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate.LastLevelP6P7.forward": [[249, 253], ["fpn_gate.LastLevelP6P7.p6", "fpn_gate.LastLevelP6P7.p7", "torch.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "c5", ")", ":", "\n", "        ", "p6", "=", "self", ".", "p6", "(", "c5", ")", "\n", "p7", "=", "self", ".", "p7", "(", "F", ".", "relu", "(", "p6", ")", ")", "\n", "return", "[", "p6", ",", "p7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate._assert_strides_are_log2_contiguous": [[209, 216], ["enumerate"], "function", ["None"], ["", "", "def", "_assert_strides_are_log2_contiguous", "(", "strides", ")", ":", "\n", "    ", "\"\"\"\n    Assert that each stride is 2x times its preceding stride, i.e. \"contiguous in log2\".\n    \"\"\"", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", "[", "1", ":", "]", ",", "1", ")", ":", "\n", "        ", "assert", "stride", "==", "2", "*", "strides", "[", "i", "-", "1", "]", ",", "\"Strides {} {} are not log2 contiguous\"", ".", "format", "(", "\n", "stride", ",", "strides", "[", "i", "-", "1", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.fpn_gate.build_resnet_fpn_backbone_gate": [[255, 284], ["detectron2.modeling.BACKBONE_REGISTRY.register", "fpn_gate.FPN_GATE", "range", "resnet_gate.build_resnet_backbone_gate", "resnet_gate.build_resnet_backbone_gate", "resnet_gate.build_resnet_backbone_gate.append", "fpn_gate.LastLevelMaxPool"], "function", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.build_resnet_backbone_gate", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.build_resnet_backbone_gate"], ["", "", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "build_resnet_fpn_backbone_gate", "(", "cfg", ",", "input_shape", ":", "ShapeSpec", ",", "gate", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        cfg: a detectron2 CfgNode\n\n    Returns:\n        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.\n    \"\"\"", "\n", "if", "gate", ":", "\n", "        ", "bottom_ups", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "NUM_BACKBONE", ")", ":", "\n", "            ", "gate", "=", "i", "+", "1", "\n", "bottom_up", "=", "build_resnet_backbone_gate", "(", "cfg", ",", "input_shape", ",", "gate", ")", "\n", "bottom_ups", ".", "append", "(", "bottom_up", ")", "\n", "", "", "else", ":", "\n", "        ", "bottom_ups", "=", "build_resnet_backbone_gate", "(", "cfg", ",", "input_shape", ",", "gate", ")", "\n", "", "in_features", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "IN_FEATURES", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "OUT_CHANNELS", "\n", "backbone", "=", "FPN_GATE", "(", "\n", "bottom_up", "=", "bottom_ups", ",", "\n", "in_features", "=", "in_features", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "NORM", ",", "\n", "top_block", "=", "LastLevelMaxPool", "(", ")", ",", "\n", "fuse_type", "=", "cfg", ".", "MODEL", ".", "FPN", ".", "FUSE_TYPE", ",", "\n", "gate", "=", "gate", "\n", ")", "\n", "return", "backbone", "\n", "", ""]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.BasicBlock_Gate.__init__": [[39, 85], ["detectron2.layers.CNNBlockBase.__init__", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "fvcore.c2_msra_fill", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "*", ",", "stride", "=", "1", ",", "norm", "=", "\"BN\"", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_channels (int): Number of input channels.\n            out_channels (int): Number of output channels.\n            stride (int): Stride for the first conv.\n            norm (str or callable): normalization for all conv layers.\n                See :func:`layers.get_norm` for supported format.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "stride", ")", "\n", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n", "", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "\n", "for", "layer", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "shortcut", "]", ":", "\n", "            ", "if", "layer", "is", "not", "None", ":", "# shortcut can be None", "\n", "                ", "weight_init", ".", "c2_msra_fill", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.BasicBlock_Gate.forward": [[86, 99], ["resnet_gate.BasicBlock_Gate.conv1", "torch.relu_", "torch.relu_", "torch.relu_", "resnet_gate.BasicBlock_Gate.conv2", "torch.relu_", "torch.relu_", "torch.relu_", "resnet_gate.BasicBlock_Gate.shortcut"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "\n", "", "out", "+=", "shortcut", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.BottleneckBlock_Gate.__init__": [[108, 212], ["detectron2.layers.CNNBlockBase.__init__", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "class_embedding.cuda", "detectron2.layers.Conv2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "fvcore.c2_msra_fill", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "*", ",", "\n", "bottleneck_channels", ",", "\n", "gate", "=", "False", ",", "\n", "pre_class", "=", "0", ",", "\n", "num_class", "=", "80", ",", "\n", "class_embedding", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "num_groups", "=", "1", ",", "\n", "norm", "=", "\"BN\"", ",", "\n", "stride_in_1x1", "=", "False", ",", "\n", "dilation", "=", "1", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            bottleneck_channels (int): number of output channels for the 3x3\n                \"bottleneck\" conv layers.\n            num_groups (int): number of groups for the 3x3 conv layer.\n            norm (str or callable): normalization for all conv layers.\n                See :func:`layers.get_norm` for supported format.\n            stride_in_1x1 (bool): when stride>1, whether to put stride in the\n                first 1x1 convolution or the bottleneck 3x3 convolution.\n            dilation (int): the dilation rate of the 3x3 conv layer.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "stride", ")", "\n", "self", ".", "gate", "=", "gate", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "\n", "self", ".", "bottleneck_channels", "=", "bottleneck_channels", "\n", "if", "gate", "!=", "False", ":", "\n", "            ", "self", ".", "class_embedding_total", "=", "class_embedding", ".", "cuda", "(", ")", "\n", "self", ".", "class_embedding", "=", "self", ".", "class_embedding_total", "[", "pre_class", ":", "pre_class", "+", "num_class", "]", "[", ":", "]", "\n", "\n", "", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "if", "gate", ":", "\n", "                ", "self", ".", "gate_short_fc1", "=", "nn", ".", "Linear", "(", "in_channels", ",", "16", ")", "\n", "self", ".", "gate_short_fc2", "=", "nn", ".", "Linear", "(", "16", ",", "out_channels", ")", "\n", "self", ".", "gate_short_class_embedding_fc", "=", "nn", ".", "Linear", "(", "300", ",", "in_channels", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n", "# The original MSRA ResNet models have stride in the first 1x1 conv", "\n", "# The subsequent fb.torch.resnet and Caffe2 ResNe[X]t implementations have", "\n", "# stride in the 3x3 conv", "\n", "", "stride_1x1", ",", "stride_3x3", "=", "(", "stride", ",", "1", ")", "if", "stride_in_1x1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride_1x1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "bottleneck_channels", ")", ",", "\n", ")", "\n", "if", "gate", ":", "\n", "            ", "self", ".", "gate1_fc1", "=", "nn", ".", "Linear", "(", "in_channels", ",", "16", ")", "\n", "self", ".", "gate1_fc2", "=", "nn", ".", "Linear", "(", "16", ",", "bottleneck_channels", ")", "\n", "self", ".", "gate1_class_embedding_fc", "=", "nn", ".", "Linear", "(", "300", ",", "in_channels", ")", "\n", "\n", "", "self", ".", "conv2", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride_3x3", ",", "\n", "padding", "=", "1", "*", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_groups", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "bottleneck_channels", ")", ",", "\n", ")", "\n", "\n", "if", "gate", ":", "\n", "            ", "self", ".", "gate2_fc1", "=", "nn", ".", "Linear", "(", "bottleneck_channels", ",", "16", ")", "\n", "self", ".", "gate2_fc2", "=", "nn", ".", "Linear", "(", "16", ",", "bottleneck_channels", ")", "\n", "self", ".", "gate2_class_embedding_fc", "=", "nn", ".", "Linear", "(", "300", ",", "bottleneck_channels", ")", "\n", "\n", "", "self", ".", "conv3", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", "\n", ")", "\n", "if", "gate", ":", "\n", "            ", "self", ".", "gate3_fc1", "=", "nn", ".", "Linear", "(", "bottleneck_channels", ",", "16", ")", "\n", "self", ".", "gate3_fc2", "=", "nn", ".", "Linear", "(", "16", ",", "out_channels", ")", "\n", "self", ".", "gate3_class_embedding_fc", "=", "nn", ".", "Linear", "(", "300", ",", "bottleneck_channels", ")", "\n", "\n", "", "for", "layer", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "shortcut", "]", ":", "\n", "            ", "if", "layer", "is", "not", "None", ":", "# shortcut can be None", "\n", "                ", "weight_init", ".", "c2_msra_fill", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.BottleneckBlock_Gate.forward": [[225, 427], ["resnet_gate.BottleneckBlock_Gate.conv1", "torch.relu_", "torch.relu_", "torch.relu_", "resnet_gate.BottleneckBlock_Gate.conv2", "torch.relu_", "torch.relu_", "torch.relu_", "resnet_gate.BottleneckBlock_Gate.conv3", "torch.relu_", "torch.relu_", "torch.relu_", "resnet_gate.BottleneckBlock_Gate.shortcut", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "gate1.unsqueeze.unsqueeze.view", "resnet_gate.BottleneckBlock_Gate.gate1_class_embedding_fc", "class_embedding.repeat.repeat.unsqueeze", "class_embedding.repeat.repeat.repeat", "torch.relu", "torch.relu", "torch.relu", "resnet_gate.BottleneckBlock_Gate.gate1_fc1", "torch.relu", "torch.relu", "torch.relu", "resnet_gate.BottleneckBlock_Gate.gate1_fc2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "gate_list.append", "out.permute.permute.permute", "out.permute.permute.permute", "fre_gate_list.pop().cuda", "gate1.unsqueeze.unsqueeze.unsqueeze", "gate1.unsqueeze.unsqueeze.unsqueeze", "gate1.unsqueeze.unsqueeze.unsqueeze", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "gate2.unsqueeze.unsqueeze.view", "resnet_gate.BottleneckBlock_Gate.gate2_class_embedding_fc", "class_embedding.repeat.repeat.unsqueeze", "class_embedding.repeat.repeat.repeat", "torch.relu", "torch.relu", "torch.relu", "resnet_gate.BottleneckBlock_Gate.gate2_fc1", "torch.relu", "torch.relu", "torch.relu", "resnet_gate.BottleneckBlock_Gate.gate2_fc2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "gate_list.append", "out2.permute.permute.permute", "out2.permute.permute.permute", "fre_gate_list.pop().cuda", "gate2.unsqueeze.unsqueeze.unsqueeze", "gate2.unsqueeze.unsqueeze.unsqueeze", "gate2.unsqueeze.unsqueeze.unsqueeze", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "gate3.unsqueeze.unsqueeze.view", "resnet_gate.BottleneckBlock_Gate.gate3_class_embedding_fc", "class_embedding.repeat.repeat.unsqueeze", "class_embedding.repeat.repeat.repeat", "torch.relu", "torch.relu", "torch.relu", "resnet_gate.BottleneckBlock_Gate.gate3_fc1", "torch.relu", "torch.relu", "torch.relu", "resnet_gate.BottleneckBlock_Gate.gate3_fc2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "gate_list.append", "out3.permute.permute.permute", "out3.permute.permute.permute", "fre_gate_list.pop().cuda", "gate3.unsqueeze.unsqueeze.unsqueeze", "gate3.unsqueeze.unsqueeze.unsqueeze", "gate3.unsqueeze.unsqueeze.unsqueeze", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "gate_short.unsqueeze.unsqueeze.view", "resnet_gate.BottleneckBlock_Gate.gate_short_class_embedding_fc", "class_embedding.repeat.repeat.unsqueeze", "class_embedding.repeat.repeat.repeat", "torch.relu", "torch.relu", "torch.relu", "resnet_gate.BottleneckBlock_Gate.gate_short_fc1", "torch.relu", "torch.relu", "torch.relu", "resnet_gate.BottleneckBlock_Gate.gate_short_fc2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "gate_list.append", "shortcut.permute.permute.permute", "shortcut.permute.permute.permute", "fre_gate_list.pop().cuda", "gate_short.unsqueeze.unsqueeze.unsqueeze", "gate_short.unsqueeze.unsqueeze.unsqueeze", "gate_short.unsqueeze.unsqueeze.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "gate1.unsqueeze.unsqueeze.sum", "range", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "gate2.unsqueeze.unsqueeze.sum", "range", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "gate3.unsqueeze.unsqueeze.sum", "range", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "gate_short.unsqueeze.unsqueeze.sum", "range", "gate1.unsqueeze.unsqueeze.sum", "len", "pre_gate_list[].pop().cuda", "pre_gate.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "fre_gate_list.pop", "gate2.unsqueeze.unsqueeze.sum", "len", "pre_gate_list[].pop().cuda", "pre_gate.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "fre_gate_list.pop", "gate3.unsqueeze.unsqueeze.sum", "len", "pre_gate_list[].pop().cuda", "pre_gate.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "fre_gate_list.pop", "gate_short.unsqueeze.unsqueeze.sum", "len", "pre_gate_list[].pop().cuda", "pre_gate.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "fre_gate_list.pop", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "p.mul", "diversity_loss_total.append", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "p.mul", "diversity_loss_total.append", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "p.mul", "diversity_loss_total.append", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "p.mul", "diversity_loss_total.append", "pre_gate_list[].pop", "pre_gate.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.where.detach", "torch.where.detach", "torch.where.detach", "nnow_gate.sum", "torch.where.sum", "torch.where.sum", "torch.where.sum", "p.log", "pre_gate_list[].pop", "pre_gate.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.where.detach", "torch.where.detach", "torch.where.detach", "nnow_gate.sum", "torch.where.sum", "torch.where.sum", "torch.where.sum", "p.log", "pre_gate_list[].pop", "pre_gate.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.where.detach", "torch.where.detach", "torch.where.detach", "nnow_gate.sum", "torch.where.sum", "torch.where.sum", "torch.where.sum", "p.log", "pre_gate_list[].pop", "pre_gate.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.where.detach", "torch.where.detach", "torch.where.detach", "nnow_gate.sum", "torch.where.sum", "torch.where.sum", "torch.where.sum", "p.log", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "fre_gate_list", "=", "None", ",", "fre_gate", "=", "None", ",", "pre_gate_list", "=", "None", ")", ":", "\n", "        ", "gate_loss", "=", "0", "\n", "gate_list", "=", "[", "]", "\n", "diversity_loss_total", "=", "[", "]", "\n", "number", "=", "0", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "if", "self", ".", "gate", ":", "\n", "                ", "if", "fre_gate", "==", "None", ":", "\n", "                    ", "gate_short", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "gate_short", "=", "gate_short", ".", "view", "(", "-", "1", ",", "self", ".", "in_channels", ")", "\n", "class_embedding", "=", "self", ".", "gate_short_class_embedding_fc", "(", "self", ".", "class_embedding", ")", "\n", "class_embedding", "=", "torch", ".", "max", "(", "class_embedding", ",", "0", ")", "[", "0", "]", "\n", "class_embedding", "=", "class_embedding", ".", "unsqueeze", "(", "0", ")", "\n", "class_embedding", "=", "class_embedding", ".", "repeat", "(", "gate_short", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "gate_short", "=", "F", ".", "relu", "(", "gate_short", "+", "class_embedding", ")", "\n", "gate_short", "=", "self", ".", "gate_short_fc1", "(", "gate_short", ")", "\n", "gate_short", "=", "F", ".", "relu", "(", "gate_short", ")", "\n", "gate_short", "=", "self", ".", "gate_short_fc2", "(", "gate_short", ")", "\n", "noise_short", "=", "(", "-", "torch", ".", "empty_like", "(", "gate_short", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", ")", "\n", "gate_short", "=", "noise_short", "+", "gate_short", "\n", "gate_short", "=", "torch", ".", "sigmoid", "(", "gate_short", ")", "\n", "gate_loss", "=", "gate_loss", "+", "gate_short", ".", "sum", "(", ")", "/", "self", ".", "out_channels", "\n", "gate_list", ".", "append", "(", "gate_short", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "shortcut", "=", "shortcut", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "shortcut", "=", "shortcut", "*", "gate_short", "\n", "shortcut", "=", "shortcut", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "if", "pre_gate_list", "!=", "None", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "pre_gate_list", ")", ")", ":", "\n", "                            ", "pre_gate", "=", "pre_gate_list", "[", "i", "]", ".", "pop", "(", "0", ")", ".", "cuda", "(", ")", "\n", "pre_gate", "=", "pre_gate", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "gate_short", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "a", "=", "torch", ".", "ones_like", "(", "pre_gate", ")", "\n", "b", "=", "torch", ".", "zeros_like", "(", "pre_gate", ")", "\n", "con_pre_gate", "=", "torch", ".", "where", "(", "pre_gate", "==", "1", ",", "b", ",", "a", ")", "\n", "mid_gate", "=", "torch", ".", "where", "(", "con_pre_gate", "==", "0", ",", "b", ",", "gate_short", ")", "\n", "now_gate", "=", "torch", ".", "where", "(", "mid_gate", ">", "0.5", ",", "a", ",", "b", ")", "\n", "nnow_gate", "=", "now_gate", "-", "mid_gate", ".", "detach", "(", ")", "+", "mid_gate", "\n", "p", "=", "(", "nnow_gate", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.01", ")", "/", "(", "con_pre_gate", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.1", ")", "\n", "diversity_loss", "=", "(", "p", ".", "mul", "(", "p", ".", "log", "(", ")", ")", "+", "(", "1", "-", "p", ")", ".", "mul", "(", "(", "1", "-", "p", ")", ".", "log", "(", ")", ")", ")", "\n", "if", "number", "==", "0", ":", "\n", "                                ", "diversity_loss_total", ".", "append", "(", "diversity_loss", ")", "\n", "", "else", ":", "\n", "                                ", "diversity_loss_total", "[", "i", "]", "+=", "diversity_loss", "\n", "", "", "number", "+=", "1", "\n", "\n", "\n", "\n", "", "", "else", ":", "\n", "                    ", "gate_short", "=", "fre_gate_list", ".", "pop", "(", "0", ")", ".", "cuda", "(", ")", "\n", "gate_short", "=", "gate_short", ".", "unsqueeze", "(", "0", ")", "\n", "gate_short", "=", "gate_short", ".", "unsqueeze", "(", "-", "1", ")", "\n", "gate_short", "=", "gate_short", ".", "unsqueeze", "(", "-", "1", ")", "\n", "shortcut", "=", "gate_short", "*", "shortcut", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "if", "fre_gate", "==", "None", ":", "\n", "                ", "gate1", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "gate1", "=", "gate1", ".", "view", "(", "-", "1", ",", "self", ".", "in_channels", ")", "\n", "class_embedding", "=", "self", ".", "gate1_class_embedding_fc", "(", "self", ".", "class_embedding", ")", "\n", "class_embedding", "=", "torch", ".", "max", "(", "class_embedding", ",", "0", ")", "[", "0", "]", "\n", "class_embedding", "=", "class_embedding", ".", "unsqueeze", "(", "0", ")", "\n", "class_embedding", "=", "class_embedding", ".", "repeat", "(", "gate1", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "gate1", "=", "F", ".", "relu", "(", "gate1", "+", "class_embedding", ")", "\n", "gate1", "=", "self", ".", "gate1_fc1", "(", "gate1", ")", "\n", "gate1", "=", "F", ".", "relu", "(", "gate1", ")", "\n", "gate1", "=", "self", ".", "gate1_fc2", "(", "gate1", ")", "\n", "noise1", "=", "(", "-", "torch", ".", "empty_like", "(", "gate1", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", ")", "\n", "gate1", "=", "noise1", "+", "gate1", "\n", "gate1", "=", "torch", ".", "sigmoid", "(", "gate1", ")", "\n", "gate_loss", "=", "gate_loss", "+", "gate1", ".", "sum", "(", ")", "/", "self", ".", "bottleneck_channels", "\n", "gate_list", ".", "append", "(", "gate1", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "out", "=", "out", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "out", "=", "out", "*", "gate1", "\n", "out", "=", "out", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "if", "pre_gate_list", "!=", "None", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "pre_gate_list", ")", ")", ":", "\n", "                        ", "pre_gate", "=", "pre_gate_list", "[", "i", "]", ".", "pop", "(", "0", ")", ".", "cuda", "(", ")", "\n", "pre_gate", "=", "pre_gate", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "gate1", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "a", "=", "torch", ".", "ones_like", "(", "pre_gate", ")", "\n", "b", "=", "torch", ".", "zeros_like", "(", "pre_gate", ")", "\n", "con_pre_gate", "=", "torch", ".", "where", "(", "pre_gate", "==", "1", ",", "b", ",", "a", ")", "\n", "mid_gate", "=", "torch", ".", "where", "(", "con_pre_gate", "==", "0", ",", "b", ",", "gate1", ")", "\n", "now_gate", "=", "torch", ".", "where", "(", "mid_gate", ">", "0.5", ",", "a", ",", "b", ")", "\n", "nnow_gate", "=", "now_gate", "-", "mid_gate", ".", "detach", "(", ")", "+", "mid_gate", "\n", "p", "=", "(", "nnow_gate", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.01", ")", "/", "(", "con_pre_gate", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.1", ")", "\n", "diversity_loss", "=", "(", "p", ".", "mul", "(", "p", ".", "log", "(", ")", ")", "+", "(", "1", "-", "p", ")", ".", "mul", "(", "(", "1", "-", "p", ")", ".", "log", "(", ")", ")", ")", "\n", "if", "number", "==", "0", ":", "\n", "                            ", "diversity_loss_total", ".", "append", "(", "diversity_loss", ")", "\n", "", "else", ":", "\n", "                            ", "diversity_loss_total", "[", "i", "]", "+=", "diversity_loss", "\n", "", "", "number", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "gate1", "=", "fre_gate_list", ".", "pop", "(", "0", ")", ".", "cuda", "(", ")", "\n", "gate1", "=", "gate1", ".", "unsqueeze", "(", "0", ")", "\n", "gate1", "=", "gate1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "gate1", "=", "gate1", ".", "unsqueeze", "(", "-", "1", ")", "\n", "out", "=", "gate1", "*", "out", "\n", "", "", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out2", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "if", "fre_gate", "==", "None", ":", "\n", "                ", "gate2", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", "\n", "gate2", "=", "gate2", ".", "view", "(", "-", "1", ",", "self", ".", "bottleneck_channels", ")", "\n", "class_embedding", "=", "self", ".", "gate2_class_embedding_fc", "(", "self", ".", "class_embedding", ")", "\n", "class_embedding", "=", "torch", ".", "max", "(", "class_embedding", ",", "0", ")", "[", "0", "]", "\n", "class_embedding", "=", "class_embedding", ".", "unsqueeze", "(", "0", ")", "\n", "class_embedding", "=", "class_embedding", ".", "repeat", "(", "gate2", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "gate2", "=", "F", ".", "relu", "(", "gate2", "+", "class_embedding", ")", "\n", "gate2", "=", "self", ".", "gate2_fc1", "(", "gate2", ")", "\n", "gate2", "=", "F", ".", "relu", "(", "gate2", ")", "\n", "gate2", "=", "self", ".", "gate2_fc2", "(", "gate2", ")", "\n", "noise2", "=", "(", "-", "torch", ".", "empty_like", "(", "gate2", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", ")", "\n", "gate2", "=", "noise2", "+", "gate2", "\n", "gate2", "=", "torch", ".", "sigmoid", "(", "gate2", ")", "\n", "gate_loss", "=", "gate_loss", "+", "gate2", ".", "sum", "(", ")", "/", "self", ".", "bottleneck_channels", "\n", "gate_list", ".", "append", "(", "gate2", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "out2", "=", "out2", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "out2", "=", "out2", "*", "gate2", "\n", "out2", "=", "out2", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "if", "pre_gate_list", "!=", "None", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "pre_gate_list", ")", ")", ":", "\n", "                        ", "pre_gate", "=", "pre_gate_list", "[", "i", "]", ".", "pop", "(", "0", ")", ".", "cuda", "(", ")", "\n", "pre_gate", "=", "pre_gate", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "gate2", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "a", "=", "torch", ".", "ones_like", "(", "pre_gate", ")", "\n", "b", "=", "torch", ".", "zeros_like", "(", "pre_gate", ")", "\n", "con_pre_gate", "=", "torch", ".", "where", "(", "pre_gate", "==", "1", ",", "b", ",", "a", ")", "\n", "mid_gate", "=", "torch", ".", "where", "(", "con_pre_gate", "==", "0", ",", "b", ",", "gate2", ")", "\n", "now_gate", "=", "torch", ".", "where", "(", "mid_gate", ">", "0.5", ",", "a", ",", "b", ")", "\n", "# print(f'now_gate.sum(){now_gate.sum()}')", "\n", "# print(f'con_pre_gate.sum(){con_pre_gate.sum()}')", "\n", "nnow_gate", "=", "now_gate", "-", "mid_gate", ".", "detach", "(", ")", "+", "mid_gate", "\n", "p", "=", "(", "nnow_gate", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.01", ")", "/", "(", "con_pre_gate", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.1", ")", "\n", "# print(f'p{p}')", "\n", "diversity_loss", "=", "(", "p", ".", "mul", "(", "p", ".", "log", "(", ")", ")", "+", "(", "1", "-", "p", ")", ".", "mul", "(", "(", "1", "-", "p", ")", ".", "log", "(", ")", ")", ")", "\n", "if", "number", "==", "0", ":", "\n", "                            ", "diversity_loss_total", ".", "append", "(", "diversity_loss", ")", "\n", "", "else", ":", "\n", "                            ", "diversity_loss_total", "[", "i", "]", "+=", "diversity_loss", "\n", "", "", "number", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "gate2", "=", "fre_gate_list", ".", "pop", "(", "0", ")", ".", "cuda", "(", ")", "\n", "gate2", "=", "gate2", ".", "unsqueeze", "(", "0", ")", "\n", "gate2", "=", "gate2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "gate2", "=", "gate2", ".", "unsqueeze", "(", "-", "1", ")", "\n", "out2", "=", "gate2", "*", "out2", "\n", "\n", "", "", "out2", "=", "F", ".", "relu_", "(", "out2", ")", "\n", "\n", "out3", "=", "self", ".", "conv3", "(", "out2", ")", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "if", "fre_gate", "==", "None", ":", "\n", "                ", "gate3", "=", "F", ".", "adaptive_avg_pool2d", "(", "out2", ",", "(", "1", ",", "1", ")", ")", "\n", "gate3", "=", "gate3", ".", "view", "(", "-", "1", ",", "self", ".", "bottleneck_channels", ")", "\n", "class_embedding", "=", "self", ".", "gate3_class_embedding_fc", "(", "self", ".", "class_embedding", ")", "\n", "class_embedding", "=", "torch", ".", "max", "(", "class_embedding", ",", "0", ")", "[", "0", "]", "\n", "class_embedding", "=", "class_embedding", ".", "unsqueeze", "(", "0", ")", "\n", "class_embedding", "=", "class_embedding", ".", "repeat", "(", "gate3", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "gate3", "=", "F", ".", "relu", "(", "gate3", "+", "class_embedding", ")", "\n", "gate3", "=", "self", ".", "gate3_fc1", "(", "gate3", ")", "\n", "gate3", "=", "F", ".", "relu", "(", "gate3", ")", "\n", "gate3", "=", "self", ".", "gate3_fc2", "(", "gate3", ")", "\n", "noise3", "=", "(", "-", "torch", ".", "empty_like", "(", "gate3", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", ")", "\n", "gate3", "=", "noise3", "+", "gate3", "\n", "gate3", "=", "torch", ".", "sigmoid", "(", "gate3", ")", "\n", "gate_loss", "=", "gate_loss", "+", "gate3", ".", "sum", "(", ")", "/", "self", ".", "out_channels", "\n", "gate_list", ".", "append", "(", "gate3", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "out3", "=", "out3", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "out3", "=", "out3", "*", "gate3", "\n", "out3", "=", "out3", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "if", "pre_gate_list", "!=", "None", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "pre_gate_list", ")", ")", ":", "\n", "                        ", "pre_gate", "=", "pre_gate_list", "[", "i", "]", ".", "pop", "(", "0", ")", ".", "cuda", "(", ")", "\n", "pre_gate", "=", "pre_gate", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "gate3", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "a", "=", "torch", ".", "ones_like", "(", "pre_gate", ")", "\n", "b", "=", "torch", ".", "zeros_like", "(", "pre_gate", ")", "\n", "con_pre_gate", "=", "torch", ".", "where", "(", "pre_gate", "==", "1", ",", "b", ",", "a", ")", "\n", "mid_gate", "=", "torch", ".", "where", "(", "con_pre_gate", "==", "0", ",", "b", ",", "gate3", ")", "\n", "now_gate", "=", "torch", ".", "where", "(", "mid_gate", ">", "0.5", ",", "a", ",", "b", ")", "\n", "nnow_gate", "=", "now_gate", "-", "mid_gate", ".", "detach", "(", ")", "+", "mid_gate", "\n", "p", "=", "(", "nnow_gate", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.01", ")", "/", "(", "con_pre_gate", ".", "sum", "(", "dim", "=", "1", ")", "+", "0.1", ")", "\n", "diversity_loss", "=", "(", "p", ".", "mul", "(", "p", ".", "log", "(", ")", ")", "+", "(", "1", "-", "p", ")", ".", "mul", "(", "(", "1", "-", "p", ")", ".", "log", "(", ")", ")", ")", "\n", "if", "number", "==", "0", ":", "\n", "                            ", "diversity_loss_total", ".", "append", "(", "diversity_loss", ")", "\n", "", "else", ":", "\n", "                            ", "diversity_loss_total", "[", "i", "]", "+=", "diversity_loss", "\n", "", "", "number", "+=", "1", "\n", "\n", "", "", "else", ":", "\n", "                ", "gate3", "=", "fre_gate_list", ".", "pop", "(", "0", ")", ".", "cuda", "(", ")", "\n", "gate3", "=", "gate3", ".", "unsqueeze", "(", "0", ")", "\n", "gate3", "=", "gate3", ".", "unsqueeze", "(", "-", "1", ")", "\n", "gate3", "=", "gate3", ".", "unsqueeze", "(", "-", "1", ")", "\n", "out3", "=", "gate3", "*", "out3", "\n", "\n", "", "", "out3", "+=", "shortcut", "\n", "out3", "=", "F", ".", "relu_", "(", "out3", ")", "\n", "return", "out3", ",", "gate_loss", ",", "diversity_loss_total", ",", "gate_list", ",", "pre_gate_list", ",", "fre_gate_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.DeformBottleneckBlock.__init__": [[435, 518], ["detectron2.layers.CNNBlockBase.__init__", "detectron2.layers.Conv2d", "detectron2.layers.Conv2d", "deform_conv_op", "detectron2.layers.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "detectron2.layers.Conv2d", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "detectron2.layers.get_norm", "fvcore.c2_msra_fill", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "*", ",", "\n", "bottleneck_channels", ",", "\n", "stride", "=", "1", ",", "\n", "num_groups", "=", "1", ",", "\n", "norm", "=", "\"BN\"", ",", "\n", "stride_in_1x1", "=", "False", ",", "\n", "dilation", "=", "1", ",", "\n", "deform_modulated", "=", "False", ",", "\n", "deform_num_groups", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "stride", ")", "\n", "self", ".", "deform_modulated", "=", "deform_modulated", "\n", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n", "", "stride_1x1", ",", "stride_3x3", "=", "(", "stride", ",", "1", ")", "if", "stride_in_1x1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride_1x1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "bottleneck_channels", ")", ",", "\n", ")", "\n", "\n", "if", "deform_modulated", ":", "\n", "            ", "deform_conv_op", "=", "ModulatedDeformConv", "\n", "# offset channels are 2 or 3 (if with modulated) * kernel_size * kernel_size", "\n", "offset_channels", "=", "27", "\n", "", "else", ":", "\n", "            ", "deform_conv_op", "=", "DeformConv", "\n", "offset_channels", "=", "18", "\n", "\n", "", "self", ".", "conv2_offset", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "\n", "offset_channels", "*", "deform_num_groups", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride_3x3", ",", "\n", "padding", "=", "1", "*", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "deform_conv_op", "(", "\n", "bottleneck_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride_3x3", ",", "\n", "padding", "=", "1", "*", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_groups", ",", "\n", "dilation", "=", "dilation", ",", "\n", "deformable_groups", "=", "deform_num_groups", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "bottleneck_channels", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "\n", "for", "layer", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "shortcut", "]", ":", "\n", "            ", "if", "layer", "is", "not", "None", ":", "# shortcut can be None", "\n", "                ", "weight_init", ".", "c2_msra_fill", "(", "layer", ")", "\n", "\n", "", "", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv2_offset", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv2_offset", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.DeformBottleneckBlock.forward": [[519, 544], ["resnet_gate.DeformBottleneckBlock.conv1", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "resnet_gate.DeformBottleneckBlock.conv3", "torch.relu_", "torch.relu_", "torch.relu_", "resnet_gate.DeformBottleneckBlock.conv2_offset", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.sigmoid.sigmoid.sigmoid", "resnet_gate.DeformBottleneckBlock.conv2", "resnet_gate.DeformBottleneckBlock.conv2_offset", "resnet_gate.DeformBottleneckBlock.conv2", "resnet_gate.DeformBottleneckBlock.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "if", "self", ".", "deform_modulated", ":", "\n", "            ", "offset_mask", "=", "self", ".", "conv2_offset", "(", "out", ")", "\n", "offset_x", ",", "offset_y", ",", "mask", "=", "torch", ".", "chunk", "(", "offset_mask", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "offset_x", ",", "offset_y", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "mask", ".", "sigmoid", "(", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "offset", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "offset", "=", "self", ".", "conv2_offset", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "offset", ")", "\n", "", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "\n", "", "out", "+=", "shortcut", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.BasicStem_Gate.__init__": [[551, 575], ["detectron2.layers.CNNBlockBase.__init__", "detectron2.layers.Conv2d", "fvcore.c2_msra_fill", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "detectron2.layers.get_norm"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["def", "__init__", "(", "self", ",", "gate", "=", "False", ",", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "norm", "=", "\"BN\"", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            norm (str or callable): norm after the first conv layer.\n                See :func:`layers.get_norm` for supported format.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "4", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "gate", "=", "gate", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", "norm", "=", "get_norm", "(", "norm", ",", "out_channels", ")", ",", "\n", ")", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "self", ".", "gate1_fc1", "=", "nn", ".", "Linear", "(", "in_channels", ",", "16", ")", "\n", "self", ".", "gate1_fc2", "=", "nn", ".", "Linear", "(", "16", ",", "out_channels", ")", "\n", "\n", "", "weight_init", ".", "c2_msra_fill", "(", "self", ".", "conv1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.BasicStem_Gate.forward": [[576, 609], ["resnet_gate.BasicStem_Gate.conv1", "torch.relu_", "torch.relu_", "torch.relu_", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "gate_list_fre.pop().cuda.view", "resnet_gate.BasicStem_Gate.gate1_fc1", "torch.relu", "torch.relu", "torch.relu", "resnet_gate.BasicStem_Gate.gate1_fc2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "gate_list.append", "out.permute.permute.permute", "out.permute.permute.permute", "gate_list_fre.pop().cuda", "out.permute.permute.permute", "out.permute.permute.permute", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "gate_list_fre.pop().cuda.sum", "gate_list_fre.pop().cuda.sum", "gate_list_fre.pop", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "gate_list_fre", "=", "None", ")", ":", "\n", "        ", "gate_loss", "=", "0", "\n", "gate_list", "=", "[", "]", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "if", "gate_list_fre", "==", "None", ":", "\n", "\n", "                ", "gate1", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "gate1", "=", "gate1", ".", "view", "(", "-", "1", ",", "self", ".", "in_channels", ")", "\n", "gate1", "=", "self", ".", "gate1_fc1", "(", "gate1", ")", "\n", "gate1", "=", "F", ".", "relu", "(", "gate1", ")", "\n", "gate1", "=", "self", ".", "gate1_fc2", "(", "gate1", ")", "\n", "noise1", "=", "-", "torch", ".", "empty_like", "(", "gate1", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "gate1", "=", "noise1", "+", "gate1", "\n", "gate1", "=", "torch", ".", "sigmoid", "(", "gate1", ")", "\n", "gate_loss", "=", "gate1", ".", "sum", "(", ")", "/", "self", ".", "out_channels", "\n", "gate_list", ".", "append", "(", "gate1", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "out", "=", "out", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "out", "=", "out", "*", "gate1", "\n", "out", "=", "out", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "gate1", "=", "gate_list_fre", ".", "pop", "(", "0", ")", ".", "cuda", "(", ")", "\n", "out", "=", "out", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "out", "=", "out", "*", "gate1", "\n", "out", "=", "out", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "\n", "", "", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "if", "gate_list_fre", "==", "None", ":", "\n", "            ", "return", "out", ",", "gate_loss", ",", "gate_list", "\n", "", "else", ":", "\n", "            ", "return", "out", ",", "gate_loss", ",", "gate_list_fre", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.__init__": [[616, 691], ["detectron2.modeling.backbone.backbone.Backbone.__init__", "enumerate", "tuple", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "len", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "resnet_gate.ResNet_Gate.add_module", "resnet_gate.ResNet_Gate.stage_names.append", "resnet_gate.ResNet_Gate.stages.append", "int", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "len", "isinstance", "str", "resnet_gate.ResNet_Gate.named_children", "int", "int", "numpy.prod", "torch.get_rank", "torch.get_rank", "torch.get_rank", "len", "len", "torch.get_rank", "torch.get_rank", "torch.get_rank"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "stem", ",", "stages", ",", "gate", "=", "False", ",", "num_classes", "=", "None", ",", "out_features", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            stem (nn.Module): a stem module\n            stages (list[list[CNNBlockBase]]): several (typically 4) stages,\n                each contains multiple :class:`CNNBlockBase`.\n            num_classes (None or int): if None, will not perform classification.\n                Otherwise, will create a linear layer.\n            out_features (list[str]): name of the layers whose outputs should\n                be returned in forward. Can be anything in \"stem\", \"linear\", or \"res2\" ...\n                If None, will return the output of the last layer.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fre_gate_input", "=", "cfg", ".", "MODEL", ".", "BACKBONE_FRE_GATE_INPUT", "\n", "self", ".", "gate_list_fre_name", "=", "cfg", ".", "MODEL", ".", "BACKBONE_GATELIST_FRE", "\n", "self", ".", "gate_list_pre_name", "=", "cfg", ".", "MODEL", ".", "BACKBONE_GATELIST_TRAIN", "\n", "if", "self", ".", "gate_list_fre_name", "==", "None", ":", "\n", "            ", "self", ".", "gate_list_fre", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "gate_list_fre", "=", "torch", ".", "load", "(", "self", ".", "gate_list_fre_name", ",", "map_location", "=", "f'cuda:{dist.get_rank()}'", ")", "\n", "self", ".", "gate_list_fre", "=", "self", ".", "gate_list_fre", "[", "int", "(", "(", "gate", "-", "1", ")", "*", "len", "(", "self", ".", "gate_list_fre", ")", "/", "cfg", ".", "MODEL", ".", "NUM_BACKBONE", ")", ":", "int", "(", "gate", "*", "len", "(", "self", ".", "gate_list_fre", ")", "/", "cfg", ".", "MODEL", ".", "NUM_BACKBONE", ")", "]", "\n", "", "if", "self", ".", "gate_list_pre_name", "==", "None", ":", "\n", "            ", "self", ".", "gate_list_pre", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "gate", "==", "cfg", ".", "MODEL", ".", "NUM_BACKBONE", ":", "\n", "                ", "self", ".", "gate_list_pre", "=", "torch", ".", "load", "(", "self", ".", "gate_list_pre_name", ",", "map_location", "=", "f'cuda:{dist.get_rank()}'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "gate_list_pre", "=", "None", "\n", "\n", "\n", "", "", "self", ".", "freeze_at", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "FREEZE_AT", "\n", "self", ".", "stem", "=", "stem", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dis_name", "=", "cfg", ".", "MODEL", ".", "DISTILLATION_FEATURE", "\n", "\n", "current_stride", "=", "self", ".", "stem", ".", "stride", "\n", "self", ".", "_out_feature_strides", "=", "{", "\"stem\"", ":", "current_stride", "}", "\n", "self", ".", "_out_feature_channels", "=", "{", "\"stem\"", ":", "self", ".", "stem", ".", "out_channels", "}", "\n", "\n", "self", ".", "stage_names", ",", "self", ".", "stages", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "blocks", "in", "enumerate", "(", "stages", ")", ":", "\n", "            ", "assert", "len", "(", "blocks", ")", ">", "0", ",", "len", "(", "blocks", ")", "\n", "for", "block", "in", "blocks", ":", "\n", "                ", "assert", "isinstance", "(", "block", ",", "CNNBlockBase", ")", ",", "block", "\n", "\n", "", "name", "=", "\"res\"", "+", "str", "(", "i", "+", "2", ")", "\n", "stage", "=", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "\n", "self", ".", "add_module", "(", "name", ",", "stage", ")", "\n", "self", ".", "stage_names", ".", "append", "(", "name", ")", "\n", "self", ".", "stages", ".", "append", "(", "stage", ")", "\n", "\n", "self", ".", "_out_feature_strides", "[", "name", "]", "=", "current_stride", "=", "int", "(", "\n", "current_stride", "*", "np", ".", "prod", "(", "[", "k", ".", "stride", "for", "k", "in", "blocks", "]", ")", "\n", ")", "\n", "self", ".", "_out_feature_channels", "[", "name", "]", "=", "curr_channels", "=", "blocks", "[", "-", "1", "]", ".", "out_channels", "\n", "", "self", ".", "stage_names", "=", "tuple", "(", "self", ".", "stage_names", ")", "# Make it static for scripting", "\n", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "curr_channels", ",", "num_classes", ")", "\n", "\n", "# Sec 5.1 in \"Accurate, Large Minibatch SGD: Training ImageNet in 1 Hour\":", "\n", "# \"The 1000-way fully-connected layer is initialized by", "\n", "# drawing weights from a zero-mean Gaussian with standard deviation of 0.01.\"", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "linear", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "name", "=", "\"linear\"", "\n", "\n", "", "if", "out_features", "is", "None", ":", "\n", "            ", "out_features", "=", "[", "name", "]", "\n", "", "self", ".", "_out_features", "=", "out_features", "\n", "assert", "len", "(", "self", ".", "_out_features", ")", "\n", "children", "=", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "named_children", "(", ")", "]", "\n", "for", "out_feature", "in", "self", ".", "_out_features", ":", "\n", "            ", "assert", "out_feature", "in", "children", ",", "\"Available children: {}\"", ".", "format", "(", "\", \"", ".", "join", "(", "children", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.forward": [[692, 770], ["resnet_gate.ResNet_Gate.dim", "copy.deepcopy", "copy.deepcopy", "resnet_gate.ResNet_Gate.stem", "zip", "resnet_gate.ResNet_Gate.stem", "zip", "len", "len", "resnet_gate.ResNet_Gate.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_gate.ResNet_Gate.linear", "len", "block", "range", "block", "block", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: Tensor of shape (N,C,H,W). H, W must be a multiple of ``self.size_divisibility``.\n\n        Returns:\n            dict[str->Tensor]: names and the corresponding features\n        \"\"\"", "\n", "assert", "x", ".", "dim", "(", ")", "==", "4", ",", "f\"ResNet takes an input of shape (N, C, H, W). Got {x.shape} instead!\"", "\n", "outputs", "=", "{", "}", "\n", "dis_feature", "=", "{", "}", "\n", "gate_list_total", "=", "[", "]", "\n", "gate_loss_total", "=", "0", "\n", "diversity_loss_total", "=", "[", "]", "\n", "if", "self", ".", "gate_list_fre", "==", "None", ":", "\n", "            ", "gate_list_fre", "=", "None", "\n", "", "else", ":", "\n", "            ", "gate_list_fre", "=", "copy", ".", "deepcopy", "(", "self", ".", "gate_list_fre", ")", "\n", "", "if", "self", ".", "gate_list_pre", "==", "None", ":", "\n", "            ", "gate_list_pre", "=", "None", "\n", "", "else", ":", "\n", "            ", "gate_list_pre", "=", "copy", ".", "deepcopy", "(", "self", ".", "gate_list_pre", ")", "\n", "", "if", "self", ".", "fre_gate_input", "==", "None", ":", "\n", "            ", "x", ",", "gate_loss", ",", "gate_stem", "=", "self", ".", "stem", "(", "x", ")", "\n", "gate_list_total", "=", "gate_list_total", "+", "gate_stem", "\n", "if", "\"stem\"", "in", "self", ".", "_out_features", ":", "\n", "                ", "outputs", "[", "\"stem\"", "]", "=", "x", "\n", "\n", "", "for", "name", ",", "stage", "in", "zip", "(", "self", ".", "stage_names", ",", "self", ".", "stages", ")", ":", "\n", "                ", "for", "block", "in", "stage", ":", "\n", "                    ", "x", ",", "gate_loss", ",", "diversity_loss", ",", "gate_list", ",", "gate_list_pre", ",", "gate_list_fre", "=", "block", "(", "x", ",", "fre_gate_list", "=", "gate_list_fre", ",", "\n", "fre_gate", "=", "self", ".", "fre_gate_input", ",", "pre_gate_list", "=", "gate_list_pre", ")", "\n", "gate_loss_total", "=", "gate_loss_total", "+", "gate_loss", "\n", "gate_list_total", "=", "gate_list_total", "+", "gate_list", "\n", "if", "diversity_loss_total", "==", "[", "]", ":", "\n", "                        ", "diversity_loss_total", "=", "diversity_loss", "\n", "", "else", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "diversity_loss_total", ")", ")", ":", "\n", "                            ", "diversity_loss_total", "[", "i", "]", "+=", "diversity_loss", "[", "i", "]", "\n", "\n", "", "", "", "if", "name", "in", "self", ".", "_out_features", ":", "\n", "                    ", "outputs", "[", "name", "]", "=", "x", "\n", "", "if", "name", "in", "self", ".", "dis_name", ":", "\n", "                    ", "dis_feature", "[", "name", "]", "=", "x", "\n", "", "", "", "else", ":", "\n", "            ", "x", ",", "gate_loss", ",", "gate_stem", "=", "self", ".", "stem", "(", "x", ")", "\n", "if", "\"stem\"", "in", "self", ".", "_out_features", ":", "\n", "                ", "outputs", "[", "\"stem\"", "]", "=", "x", "\n", "\n", "", "i", "=", "2", "\n", "\n", "for", "name", ",", "stage", "in", "zip", "(", "self", ".", "stage_names", ",", "self", ".", "stages", ")", ":", "\n", "                ", "for", "block", "in", "stage", ":", "\n", "                    ", "if", "i", ">", "self", ".", "freeze_at", ":", "\n", "                        ", "x", ",", "gate_loss", ",", "diversity_loss", ",", "gate_list", ",", "_", ",", "gate_list_fre", "=", "block", "(", "x", ",", "fre_gate_list", "=", "gate_list_fre", ",", "\n", "fre_gate", "=", "self", ".", "fre_gate_input", ",", "pre_gate_list", "=", "gate_list_pre", ")", "\n", "", "else", ":", "\n", "                        ", "x", ",", "gate_loss", ",", "diversity_loss", ",", "gate_list", ",", "_", ",", "_", "=", "block", "(", "x", ",", "fre_gate_list", "=", "None", ",", "fre_gate", "=", "None", ",", "pre_gate_list", "=", "None", ")", "\n", "\n", "", "", "if", "name", "in", "self", ".", "_out_features", ":", "\n", "                    ", "outputs", "[", "name", "]", "=", "x", "\n", "", "if", "name", "in", "self", ".", "dis_name", ":", "\n", "                    ", "dis_feature", "[", "name", "]", "=", "x", "\n", "", "i", "=", "i", "+", "1", "\n", "\n", "", "", "if", "len", "(", "gate_list_total", ")", "!=", "0", ":", "\n", "            ", "gate_loss_total", "/=", "len", "(", "gate_list_total", ")", "\n", "for", "diversity_loss", "in", "diversity_loss_total", ":", "\n", "                ", "diversity_loss", "/=", "len", "(", "gate_list_total", ")", "\n", "\n", "", "", "if", "self", ".", "num_classes", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "\"linear\"", "in", "self", ".", "_out_features", ":", "\n", "                ", "outputs", "[", "\"linear\"", "]", "=", "x", "\n", "\n", "", "", "return", "outputs", ",", "gate_loss_total", ",", "gate_list_total", ",", "diversity_loss_total", ",", "dis_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.dis_feature_shape": [[771, 777], ["detectron2.layers.ShapeSpec"], "methods", ["None"], ["", "def", "dis_feature_shape", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "name", ":", "ShapeSpec", "(", "\n", "channels", "=", "self", ".", "_out_feature_channels", "[", "name", "]", ",", "stride", "=", "self", ".", "_out_feature_strides", "[", "name", "]", "\n", ")", "\n", "for", "name", "in", "self", ".", "dis_name", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.output_shape": [[779, 785], ["detectron2.layers.ShapeSpec"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "name", ":", "ShapeSpec", "(", "\n", "channels", "=", "self", ".", "_out_feature_channels", "[", "name", "]", ",", "stride", "=", "self", ".", "_out_feature_strides", "[", "name", "]", "\n", ")", "\n", "for", "name", "in", "self", ".", "_out_features", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.freeze": [[787, 810], ["enumerate", "resnet_gate.ResNet_Gate.stem.freeze", "stage.children", "block.freeze"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.freeze", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.freeze"], ["", "def", "freeze", "(", "self", ",", "freeze_at", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Freeze the first several stages of the ResNet. Commonly used in\n        fine-tuning.\n\n        Layers that produce the same feature map spatial size are defined as one\n        \"stage\" by :paper:`FPN`.\n\n        Args:\n            freeze_at (int): number of stages to freeze.\n                `1` means freezing the stem. `2` means freezing the stem and\n                one residual stage, etc.\n\n        Returns:\n            nn.Module: this ResNet itself\n        \"\"\"", "\n", "if", "freeze_at", ">=", "1", ":", "\n", "            ", "self", ".", "stem", ".", "freeze", "(", ")", "\n", "", "for", "idx", ",", "stage", "in", "enumerate", "(", "self", ".", "stages", ",", "start", "=", "2", ")", ":", "\n", "            ", "if", "freeze_at", ">=", "idx", ":", "\n", "                ", "for", "block", "in", "stage", ".", "children", "(", ")", ":", "\n", "                    ", "block", ".", "freeze", "(", ")", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.make_stage": [[811, 879], ["range", "logging.getLogger", "logging.getLogger.warning", "kwargs.items", "blocks.append", "k.endswith", "block_class", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "make_stage", "(", "\n", "block_class", ",", "num_blocks", ",", "first_stride", "=", "None", ",", "*", ",", "in_channels", ",", "out_channels", ",", "gate", ",", "pre_class", ",", "num_class", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Create a list of blocks of the same type that forms one ResNet stage.\n\n        Args:\n            block_class (type): a subclass of CNNBlockBase that's used to create all blocks in this\n                stage. A module of this type must not change spatial resolution of inputs unless its\n                stride != 1.\n            num_blocks (int): number of blocks in this stage\n            first_stride (int): deprecated\n            in_channels (int): input channels of the entire stage.\n            out_channels (int): output channels of **every block** in the stage.\n            kwargs: other arguments passed to the constructor of\n                `block_class`. If the argument name is \"xx_per_block\", the\n                argument is a list of values to be passed to each block in the\n                stage. Otherwise, the same argument is passed to every block\n                in the stage.\n\n        Returns:\n            list[nn.Module]: a list of block module.\n\n        Examples:\n        ::\n            stages = ResNet.make_stage(\n                BottleneckBlock, 3, in_channels=16, out_channels=64,\n                bottleneck_channels=16, num_groups=1,\n                stride_per_block=[2, 1, 1],\n                dilations_per_block=[1, 1, 2]\n            )\n\n        Usually, layers that produce the same feature map spatial size are defined as one\n        \"stage\" (in :paper:`FPN`). Under such definition, ``stride_per_block[1:]`` should\n        all be 1.\n        \"\"\"", "\n", "if", "first_stride", "is", "not", "None", ":", "\n", "            ", "assert", "\"stride\"", "not", "in", "kwargs", "and", "\"stride_per_block\"", "not", "in", "kwargs", "\n", "kwargs", "[", "\"stride_per_block\"", "]", "=", "[", "first_stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "warning", "(", "\n", "\"ResNet.make_stage(first_stride=) is deprecated!  \"", "\n", "\"Use 'stride_per_block' or 'stride' instead.\"", "\n", ")", "\n", "\n", "", "blocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "curr_kwargs", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", ".", "endswith", "(", "\"_per_block\"", ")", ":", "\n", "                    ", "assert", "len", "(", "v", ")", "==", "num_blocks", ",", "(", "\n", "f\"Argument '{k}' of make_stage should have the \"", "\n", "f\"same length as num_blocks={num_blocks}.\"", "\n", ")", "\n", "newk", "=", "k", "[", ":", "-", "len", "(", "\"_per_block\"", ")", "]", "\n", "assert", "newk", "not", "in", "kwargs", ",", "f\"Cannot call make_stage with both {k} and {newk}!\"", "\n", "curr_kwargs", "[", "newk", "]", "=", "v", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "curr_kwargs", "[", "k", "]", "=", "v", "\n", "\n", "", "", "blocks", ".", "append", "(", "\n", "block_class", "(", "gate", "=", "gate", ",", "pre_class", "=", "pre_class", ",", "num_class", "=", "num_class", ",", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "**", "curr_kwargs", ")", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.make_stage": [[887, 892], ["resnet_gate.ResNet_Gate.make_stage"], "function", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.make_stage"], ["def", "make_stage", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Deprecated alias for backward compatibiltiy.\n    \"\"\"", "\n", "return", "ResNet_Gate", ".", "make_stage", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.build_resnet_backbone_gate": [[894, 1002], ["detectron2.modeling.BACKBONE_REGISTRY.register", "torch.load", "torch.load", "torch.load", "resnet_gate.BasicStem_Gate", "max", "enumerate", "resnet_gate.ResNet_Gate.freeze", "range", "resnet_gate.ResNet_Gate.make_stage", "stages.append", "any", "resnet_gate.ResNet_Gate", "torch.get_rank"], "function", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.freeze", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.make_stage"], ["", "@", "BACKBONE_REGISTRY", ".", "register", "(", ")", "\n", "def", "build_resnet_backbone_gate", "(", "cfg", ",", "input_shape", ",", "gate", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Create a ResNet instance from config.\n\n    Returns:\n        ResNet: a :class:`ResNet` instance.\n    \"\"\"", "\n", "# need registration of new blocks/stems?", "\n", "# fmt: off", "\n", "freeze_at", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "FREEZE_AT", "\n", "out_features", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "OUT_FEATURES", "\n", "depth", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEPTH", "\n", "num_groups", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NUM_GROUPS", "\n", "width_per_group", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "WIDTH_PER_GROUP", "\n", "bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "in_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "stride_in_1x1", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STRIDE_IN_1X1", "\n", "res5_dilation", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES5_DILATION", "\n", "deform_on_per_stage", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_ON_PER_STAGE", "\n", "deform_modulated", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_MODULATED", "\n", "deform_num_groups", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_NUM_GROUPS", "\n", "norm", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NORM", "\n", "pre_class", "=", "cfg", ".", "MODEL", ".", "PRE_CLASSES", "\n", "num_class", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "\n", "dataset_name", "=", "cfg", ".", "MODEL", ".", "DATASETNAME", "\n", "class_embedding", "=", "torch", ".", "load", "(", "f'class_embedding/{dataset_name}_classembedding.pt'", ",", "map_location", "=", "f'cuda:{dist.get_rank()}'", ")", "\n", "\n", "if", "freeze_at", ">", "0", ":", "\n", "        ", "gate_stem", "=", "False", "\n", "", "else", ":", "\n", "        ", "gate_stem", "=", "gate", "\n", "\n", "", "stem", "=", "BasicStem_Gate", "(", "\n", "gate", "=", "gate_stem", ",", "\n", "in_channels", "=", "input_shape", ".", "channels", ",", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", ",", "\n", "norm", "=", "norm", ",", "\n", ")", "\n", "\n", "# fmt: on", "\n", "assert", "res5_dilation", "in", "{", "1", ",", "2", "}", ",", "\"res5_dilation cannot be {}.\"", ".", "format", "(", "res5_dilation", ")", "\n", "\n", "num_blocks_per_stage", "=", "{", "\n", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "34", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "101", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "152", ":", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "}", "[", "depth", "]", "\n", "\n", "if", "depth", "in", "[", "18", ",", "34", "]", ":", "\n", "        ", "assert", "out_channels", "==", "64", ",", "\"Must set MODEL.RESNETS.RES2_OUT_CHANNELS = 64 for R18/R34\"", "\n", "assert", "not", "any", "(", "\n", "deform_on_per_stage", "\n", ")", ",", "\"MODEL.RESNETS.DEFORM_ON_PER_STAGE unsupported for R18/R34\"", "\n", "assert", "res5_dilation", "==", "1", ",", "\"Must set MODEL.RESNETS.RES5_DILATION = 1 for R18/R34\"", "\n", "assert", "num_groups", "==", "1", ",", "\"Must set MODEL.RESNETS.NUM_GROUPS = 1 for R18/R34\"", "\n", "\n", "", "stages", "=", "[", "]", "\n", "\n", "# Avoid creating variables without gradients", "\n", "# It consumes extra memory and may cause allreduce to fail", "\n", "out_stage_idx", "=", "[", "\n", "{", "\"res2\"", ":", "2", ",", "\"res3\"", ":", "3", ",", "\"res4\"", ":", "4", ",", "\"res5\"", ":", "5", "}", "[", "f", "]", "for", "f", "in", "out_features", "if", "f", "!=", "\"stem\"", "\n", "]", "\n", "max_stage_idx", "=", "max", "(", "out_stage_idx", ")", "\n", "for", "idx", ",", "stage_idx", "in", "enumerate", "(", "range", "(", "2", ",", "max_stage_idx", "+", "1", ")", ")", ":", "\n", "        ", "dilation", "=", "res5_dilation", "if", "stage_idx", "==", "5", "else", "1", "\n", "first_stride", "=", "1", "if", "idx", "==", "0", "or", "(", "stage_idx", "==", "5", "and", "dilation", "==", "2", ")", "else", "2", "\n", "\n", "stage_kargs", "=", "{", "\n", "\"num_blocks\"", ":", "num_blocks_per_stage", "[", "idx", "]", ",", "\n", "\"stride_per_block\"", ":", "[", "first_stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks_per_stage", "[", "idx", "]", "-", "1", ")", ",", "\n", "\"in_channels\"", ":", "in_channels", ",", "\n", "\"out_channels\"", ":", "out_channels", ",", "\n", "\n", "\"norm\"", ":", "norm", ",", "\n", "}", "\n", "# Use BasicBlock for R18 and R34.", "\n", "if", "(", "idx", "+", "1", ")", ">=", "freeze_at", ":", "\n", "            ", "stage_kargs", "[", "\"gate\"", "]", "=", "gate", "\n", "", "else", ":", "\n", "            ", "stage_kargs", "[", "\"gate\"", "]", "=", "False", "\n", "", "if", "depth", "in", "[", "18", ",", "34", "]", ":", "\n", "            ", "stage_kargs", "[", "\"block_class\"", "]", "=", "BasicBlock_Gate", "\n", "", "else", ":", "\n", "            ", "stage_kargs", "[", "\"bottleneck_channels\"", "]", "=", "bottleneck_channels", "\n", "stage_kargs", "[", "\"pre_class\"", "]", "=", "pre_class", "\n", "stage_kargs", "[", "\"num_class\"", "]", "=", "num_class", "\n", "stage_kargs", "[", "\"class_embedding\"", "]", "=", "class_embedding", "\n", "stage_kargs", "[", "\"stride_in_1x1\"", "]", "=", "stride_in_1x1", "\n", "stage_kargs", "[", "\"dilation\"", "]", "=", "dilation", "\n", "stage_kargs", "[", "\"num_groups\"", "]", "=", "num_groups", "\n", "if", "deform_on_per_stage", "[", "idx", "]", ":", "\n", "                ", "stage_kargs", "[", "\"block_class\"", "]", "=", "DeformBottleneckBlock", "\n", "stage_kargs", "[", "\"deform_modulated\"", "]", "=", "deform_modulated", "\n", "stage_kargs", "[", "\"deform_num_groups\"", "]", "=", "deform_num_groups", "\n", "", "else", ":", "\n", "                ", "stage_kargs", "[", "\"block_class\"", "]", "=", "BottleneckBlock_Gate", "\n", "\n", "", "", "blocks", "=", "ResNet_Gate", ".", "make_stage", "(", "**", "stage_kargs", ")", "\n", "in_channels", "=", "out_channels", "\n", "out_channels", "*=", "2", "\n", "bottleneck_channels", "*=", "2", "\n", "stages", ".", "append", "(", "blocks", ")", "\n", "", "return", "ResNet_Gate", "(", "cfg", ",", "stem", ",", "stages", ",", "gate", "=", "gate", ",", "out_features", "=", "out_features", ")", ".", "freeze", "(", "freeze_at", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion.__init__": [[22, 46], ["torch.nn.Module.__init__", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "loss.SetCriterion.register_buffer"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", ",", "matcher", ",", "weight_dict", ",", "eos_coef", ",", "losses", ",", "use_focal", ")", ":", "\n", "        ", "\"\"\" Create the criterion.\n        Parameters:\n            num_classes: number of object categories, omitting the special no-object category\n            matcher: module able to compute a matching between targets and proposals\n            weight_dict: dict containing as key the names of the losses and as values their relative weight.\n            eos_coef: relative classification weight applied to the no-object category\n            losses: list of all the losses to be applied. See get_loss for list of available losses.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "matcher", "=", "matcher", "\n", "self", ".", "weight_dict", "=", "weight_dict", "\n", "self", ".", "eos_coef", "=", "eos_coef", "\n", "self", ".", "losses", "=", "losses", "\n", "self", ".", "use_focal", "=", "use_focal", "\n", "if", "self", ".", "use_focal", ":", "\n", "            ", "self", ".", "focal_loss_alpha", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "ALPHA", "\n", "self", ".", "focal_loss_gamma", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "GAMMA", "\n", "", "else", ":", "\n", "            ", "empty_weight", "=", "torch", ".", "ones", "(", "self", ".", "num_classes", "+", "1", ")", "\n", "empty_weight", "[", "-", "1", "]", "=", "self", ".", "eos_coef", "\n", "self", ".", "register_buffer", "(", "'empty_weight'", ",", "empty_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion.loss_labels": [[47, 84], ["loss.SetCriterion._get_src_permutation_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full", "torch.full", "torch.full", "torch.full", "src_logits.flatten.flatten.flatten", "target_classes.flatten.flatten.flatten", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cross_entropy", "torch.cross_entropy", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "fvcore.nn.sigmoid_focal_loss_jit", "src_logits.flatten.flatten.transpose", "zip", "util.misc.accuracy"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion._get_src_permutation_idx"], ["", "", "def", "loss_labels", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "log", "=", "False", ")", ":", "\n", "        ", "\"\"\"Classification loss (NLL)\n        targets dicts must contain the key \"labels\" containing a tensor of dim [nb_target_boxes]\n        \"\"\"", "\n", "assert", "'pred_logits'", "in", "outputs", "\n", "src_logits", "=", "outputs", "[", "'pred_logits'", "]", "\n", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "target_classes_o", "=", "torch", ".", "cat", "(", "[", "t", "[", "\"labels\"", "]", "[", "J", "]", "for", "t", ",", "(", "_", ",", "J", ")", "in", "zip", "(", "targets", ",", "indices", ")", "]", ")", "\n", "target_classes", "=", "torch", ".", "full", "(", "src_logits", ".", "shape", "[", ":", "2", "]", ",", "self", ".", "num_classes", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "src_logits", ".", "device", ")", "\n", "target_classes", "[", "idx", "]", "=", "target_classes_o", "\n", "\n", "if", "self", ".", "use_focal", ":", "\n", "            ", "src_logits", "=", "src_logits", ".", "flatten", "(", "0", ",", "1", ")", "\n", "# prepare one_hot target.", "\n", "target_classes", "=", "target_classes", ".", "flatten", "(", "0", ",", "1", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "target_classes", "!=", "self", ".", "num_classes", ",", "as_tuple", "=", "True", ")", "[", "0", "]", "\n", "labels", "=", "torch", ".", "zeros_like", "(", "src_logits", ")", "\n", "labels", "[", "pos_inds", ",", "target_classes", "[", "pos_inds", "]", "]", "=", "1", "\n", "# comp focal loss.", "\n", "class_loss", "=", "sigmoid_focal_loss_jit", "(", "\n", "src_logits", ",", "\n", "labels", ",", "\n", "alpha", "=", "self", ".", "focal_loss_alpha", ",", "\n", "gamma", "=", "self", ".", "focal_loss_gamma", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "/", "num_boxes", "\n", "losses", "=", "{", "'loss_ce'", ":", "class_loss", "}", "\n", "", "else", ":", "\n", "            ", "loss_ce", "=", "F", ".", "cross_entropy", "(", "src_logits", ".", "transpose", "(", "1", ",", "2", ")", ",", "target_classes", ",", "self", ".", "empty_weight", ")", "\n", "losses", "=", "{", "'loss_ce'", ":", "loss_ce", "}", "\n", "\n", "", "if", "log", ":", "\n", "# TODO this should probably be a separate loss, not hacked in this one here", "\n", "            ", "losses", "[", "'class_error'", "]", "=", "100", "-", "accuracy", "(", "src_logits", "[", "idx", "]", ",", "target_classes_o", ")", "[", "0", "]", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion.loss_boxes": [[85, 107], ["loss.SetCriterion._get_src_permutation_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.l1_loss", "torch.l1_loss", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "loss_giou.sum", "torch.l1_loss.sum", "util.box_ops.generalized_box_iou", "zip"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion._get_src_permutation_idx"], ["", "def", "loss_boxes", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ":", "\n", "        ", "\"\"\"Compute the losses related to the bounding boxes, the L1 regression loss and the GIoU loss\n           targets dicts must contain the key \"boxes\" containing a tensor of dim [nb_target_boxes, 4]\n           The target boxes are expected in format (center_x, center_y, w, h), normalized by the image size.\n        \"\"\"", "\n", "assert", "'pred_boxes'", "in", "outputs", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "src_boxes", "=", "outputs", "[", "'pred_boxes'", "]", "[", "idx", "]", "\n", "target_boxes", "=", "torch", ".", "cat", "(", "[", "t", "[", "'boxes_xyxy'", "]", "[", "i", "]", "for", "t", ",", "(", "_", ",", "i", ")", "in", "zip", "(", "targets", ",", "indices", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "loss_giou", "=", "1", "-", "torch", ".", "diag", "(", "box_ops", ".", "generalized_box_iou", "(", "src_boxes", ",", "target_boxes", ")", ")", "\n", "losses", "[", "'loss_giou'", "]", "=", "loss_giou", ".", "sum", "(", ")", "/", "num_boxes", "\n", "\n", "image_size", "=", "torch", ".", "cat", "(", "[", "v", "[", "\"image_size_xyxy_tgt\"", "]", "for", "v", "in", "targets", "]", ")", "\n", "src_boxes_", "=", "src_boxes", "/", "image_size", "\n", "target_boxes_", "=", "target_boxes", "/", "image_size", "\n", "\n", "loss_bbox", "=", "F", ".", "l1_loss", "(", "src_boxes_", ",", "target_boxes_", ",", "reduction", "=", "'none'", ")", "\n", "losses", "[", "'loss_bbox'", "]", "=", "loss_bbox", ".", "sum", "(", ")", "/", "num_boxes", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion._get_src_permutation_idx": [[108, 113], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "enumerate"], "methods", ["None"], ["", "def", "_get_src_permutation_idx", "(", "self", ",", "indices", ")", ":", "\n", "# permute predictions following indices", "\n", "        ", "batch_idx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "full_like", "(", "src", ",", "i", ")", "for", "i", ",", "(", "src", ",", "_", ")", "in", "enumerate", "(", "indices", ")", "]", ")", "\n", "src_idx", "=", "torch", ".", "cat", "(", "[", "src", "for", "(", "src", ",", "_", ")", "in", "indices", "]", ")", "\n", "return", "batch_idx", ",", "src_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion._get_tgt_permutation_idx": [[114, 119], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "enumerate"], "methods", ["None"], ["", "def", "_get_tgt_permutation_idx", "(", "self", ",", "indices", ")", ":", "\n", "# permute targets following indices", "\n", "        ", "batch_idx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "full_like", "(", "tgt", ",", "i", ")", "for", "i", ",", "(", "_", ",", "tgt", ")", "in", "enumerate", "(", "indices", ")", "]", ")", "\n", "tgt_idx", "=", "torch", ".", "cat", "(", "[", "tgt", "for", "(", "_", ",", "tgt", ")", "in", "indices", "]", ")", "\n", "return", "batch_idx", ",", "tgt_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion.get_loss": [[120, 127], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "loss", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss_map", "=", "{", "\n", "'labels'", ":", "self", ".", "loss_labels", ",", "\n", "'boxes'", ":", "self", ".", "loss_boxes", ",", "\n", "}", "\n", "assert", "loss", "in", "loss_map", ",", "f'do you really want to compute {loss} loss?'", "\n", "return", "loss_map", "[", "loss", "]", "(", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion.forward": [[128, 175], ["loss.SetCriterion.matcher", "sum", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "util.misc.is_dist_avail_and_initialized", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "losses.update", "losses.update", "losses.update", "losses.update", "enumerate", "outputs.items", "len", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss.SetCriterion.get_loss", "loss.SetCriterion.matcher", "next", "loss.SetCriterion.get_loss", "losses.update", "iter", "util.misc.get_world_size", "outputs.values", "loss.SetCriterion.items"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion.get_loss", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.SetCriterion.get_loss"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ",", "gate_loss", ",", "distillation_loss", ",", "diversity_loss", ")", ":", "\n", "        ", "\"\"\" This performs the loss computation.\n        Parameters:\n             outputs: dict of tensors, see the output specification of the model for the format\n             targets: list of dicts, such that len(targets) == batch_size.\n                      The expected keys in each dict depends on the losses applied, see each loss' doc\n        \"\"\"", "\n", "outputs_without_aux", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "outputs", ".", "items", "(", ")", "if", "k", "!=", "'aux_outputs'", "}", "\n", "\n", "# Retrieve the matching between the outputs of the last layer and the targets", "\n", "indices", "=", "self", ".", "matcher", "(", "outputs_without_aux", ",", "targets", ")", "\n", "\n", "# Compute the average number of target boxes accross all nodes, for normalization purposes", "\n", "num_boxes", "=", "sum", "(", "len", "(", "t", "[", "\"labels\"", "]", ")", "for", "t", "in", "targets", ")", "\n", "num_boxes", "=", "torch", ".", "as_tensor", "(", "[", "num_boxes", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "next", "(", "iter", "(", "outputs", ".", "values", "(", ")", ")", ")", ".", "device", ")", "\n", "if", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "torch", ".", "distributed", ".", "all_reduce", "(", "num_boxes", ")", "\n", "", "num_boxes", "=", "torch", ".", "clamp", "(", "num_boxes", "/", "get_world_size", "(", ")", ",", "min", "=", "1", ")", ".", "item", "(", ")", "\n", "\n", "# Compute all the requested losses", "\n", "losses", "=", "{", "}", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "losses", ".", "update", "(", "self", ".", "get_loss", "(", "loss", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ")", "\n", "", "if", "gate_loss", "!=", "None", ":", "\n", "            ", "losses", ".", "update", "(", "{", "\"loss_gate\"", ":", "gate_loss", "}", ")", "\n", "", "if", "distillation_loss", "!=", "None", ":", "\n", "            ", "losses", ".", "update", "(", "{", "\"loss_distillation\"", ":", "distillation_loss", "}", ")", "\n", "", "if", "diversity_loss", "!=", "None", ":", "\n", "            ", "losses", ".", "update", "(", "{", "\"loss_diversity\"", ":", "diversity_loss", "}", ")", "\n", "\n", "# In case of auxiliary losses, we repeat this process with the output of each intermediate layer.", "\n", "", "if", "'aux_outputs'", "in", "outputs", ":", "\n", "            ", "for", "i", ",", "aux_outputs", "in", "enumerate", "(", "outputs", "[", "'aux_outputs'", "]", ")", ":", "\n", "                ", "indices", "=", "self", ".", "matcher", "(", "aux_outputs", ",", "targets", ")", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "                    ", "if", "loss", "==", "'masks'", ":", "\n", "# Intermediate masks losses are too costly to compute, we ignore them.", "\n", "                        ", "continue", "\n", "", "kwargs", "=", "{", "}", "\n", "if", "loss", "==", "'labels'", ":", "\n", "# Logging is enabled only for the last layer", "\n", "                        ", "kwargs", "=", "{", "'log'", ":", "False", "}", "\n", "", "l_dict", "=", "self", ".", "get_loss", "(", "loss", ",", "aux_outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", "\n", "l_dict", "=", "{", "k", "+", "f'_{i}'", ":", "v", "for", "k", ",", "v", "in", "l_dict", ".", "items", "(", ")", "}", "\n", "losses", ".", "update", "(", "l_dict", ")", "\n", "\n", "", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.HungarianMatcher.__init__": [[185, 202], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "cost_class", ":", "float", "=", "1", ",", "cost_bbox", ":", "float", "=", "1", ",", "cost_giou", ":", "float", "=", "1", ",", "use_focal", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Creates the matcher\n\n        Params:\n            cost_class: This is the relative weight of the classification error in the matching cost\n            cost_bbox: This is the relative weight of the L1 error of the bounding box coordinates in the matching cost\n            cost_giou: This is the relative weight of the giou loss of the bounding box in the matching cost\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cost_class", "=", "cost_class", "\n", "self", ".", "cost_bbox", "=", "cost_bbox", "\n", "self", ".", "cost_giou", "=", "cost_giou", "\n", "self", ".", "use_focal", "=", "use_focal", "\n", "if", "self", ".", "use_focal", ":", "\n", "            ", "self", ".", "focal_loss_alpha", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "ALPHA", "\n", "self", ".", "focal_loss_gamma", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "GAMMA", "\n", "", "assert", "cost_class", "!=", "0", "or", "cost_bbox", "!=", "0", "or", "cost_giou", "!=", "0", ",", "\"all costs cant be 0\"", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.loss.HungarianMatcher.forward": [[203, 271], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "image_size_out.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "C.view().cpu.view().cpu.view().cpu", "outputs[].flatten().sigmoid", "outputs[].flatten", "outputs[].flatten().softmax", "outputs[].flatten", "util.box_ops.generalized_box_iou", "len", "scipy.optimize.linear_sum_assignment", "v[].unsqueeze", "image_size_out.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat", "C.view().cpu.view().cpu.view", "enumerate", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "outputs[].flatten", "outputs[].flatten", "C.view().cpu.view().cpu.split", "image_size_out.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\" Performs the matching\n\n        Params:\n            outputs: This is a dict that contains at least these entries:\n                 \"pred_logits\": Tensor of dim [batch_size, num_queries, num_classes] with the classification logits\n                 \"pred_boxes\": Tensor of dim [batch_size, num_queries, 4] with the predicted box coordinates\n\n            targets: This is a list of targets (len(targets) = batch_size), where each target is a dict containing:\n                 \"labels\": Tensor of dim [num_target_boxes] (where num_target_boxes is the number of ground-truth\n                           objects in the target) containing the class labels\n                 \"boxes\": Tensor of dim [num_target_boxes, 4] containing the target box coordinates\n\n        Returns:\n            A list of size batch_size, containing tuples of (index_i, index_j) where:\n                - index_i is the indices of the selected predictions (in order)\n                - index_j is the indices of the corresponding selected targets (in order)\n            For each batch element, it holds:\n                len(index_i) = len(index_j) = min(num_queries, num_target_boxes)\n        \"\"\"", "\n", "bs", ",", "num_queries", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# We flatten to compute the cost matrices in a batch", "\n", "if", "self", ".", "use_focal", ":", "\n", "            ", "out_prob", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ".", "sigmoid", "(", ")", "# [batch_size * num_queries, num_classes]", "\n", "out_bbox", "=", "outputs", "[", "\"pred_boxes\"", "]", ".", "flatten", "(", "0", ",", "1", ")", "# [batch_size * num_queries, 4]", "\n", "", "else", ":", "\n", "            ", "out_prob", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ".", "softmax", "(", "-", "1", ")", "# [batch_size * num_queries, num_classes]", "\n", "out_bbox", "=", "outputs", "[", "\"pred_boxes\"", "]", ".", "flatten", "(", "0", ",", "1", ")", "# [batch_size * num_queries, 4]", "\n", "\n", "# Also concat the target labels and boxes", "\n", "", "tgt_ids", "=", "torch", ".", "cat", "(", "[", "v", "[", "\"labels\"", "]", "for", "v", "in", "targets", "]", ")", "\n", "tgt_bbox", "=", "torch", ".", "cat", "(", "[", "v", "[", "\"boxes_xyxy\"", "]", "for", "v", "in", "targets", "]", ")", "\n", "\n", "# Compute the classification cost. Contrary to the loss, we don't use the NLL,", "\n", "# but approximate it in 1 - proba[target class].", "\n", "# The 1 is a constant that doesn't change the matching, it can be ommitted.", "\n", "if", "self", ".", "use_focal", ":", "\n", "# Compute the classification cost.", "\n", "            ", "alpha", "=", "self", ".", "focal_loss_alpha", "\n", "gamma", "=", "self", ".", "focal_loss_gamma", "\n", "neg_cost_class", "=", "(", "1", "-", "alpha", ")", "*", "(", "out_prob", "**", "gamma", ")", "*", "(", "-", "(", "1", "-", "out_prob", "+", "1e-8", ")", ".", "log", "(", ")", ")", "\n", "pos_cost_class", "=", "alpha", "*", "(", "(", "1", "-", "out_prob", ")", "**", "gamma", ")", "*", "(", "-", "(", "out_prob", "+", "1e-8", ")", ".", "log", "(", ")", ")", "\n", "cost_class", "=", "pos_cost_class", "[", ":", ",", "tgt_ids", "]", "-", "neg_cost_class", "[", ":", ",", "tgt_ids", "]", "\n", "", "else", ":", "\n", "            ", "cost_class", "=", "-", "out_prob", "[", ":", ",", "tgt_ids", "]", "\n", "\n", "# Compute the L1 cost between boxes", "\n", "", "image_size_out", "=", "torch", ".", "cat", "(", "[", "v", "[", "\"image_size_xyxy\"", "]", ".", "unsqueeze", "(", "0", ")", "for", "v", "in", "targets", "]", ")", "\n", "image_size_out", "=", "image_size_out", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_queries", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "image_size_tgt", "=", "torch", ".", "cat", "(", "[", "v", "[", "\"image_size_xyxy_tgt\"", "]", "for", "v", "in", "targets", "]", ")", "\n", "\n", "out_bbox_", "=", "out_bbox", "/", "image_size_out", "\n", "tgt_bbox_", "=", "tgt_bbox", "/", "image_size_tgt", "\n", "cost_bbox", "=", "torch", ".", "cdist", "(", "out_bbox_", ",", "tgt_bbox_", ",", "p", "=", "1", ")", "\n", "\n", "# Compute the giou cost betwen boxes", "\n", "# cost_giou = -generalized_box_iou(box_cxcywh_to_xyxy(out_bbox), box_cxcywh_to_xyxy(tgt_bbox))", "\n", "cost_giou", "=", "-", "generalized_box_iou", "(", "out_bbox", ",", "tgt_bbox", ")", "\n", "\n", "# Final cost matrix", "\n", "C", "=", "self", ".", "cost_bbox", "*", "cost_bbox", "+", "self", ".", "cost_class", "*", "cost_class", "+", "self", ".", "cost_giou", "*", "cost_giou", "\n", "C", "=", "C", ".", "view", "(", "bs", ",", "num_queries", ",", "-", "1", ")", ".", "cpu", "(", ")", "\n", "\n", "sizes", "=", "[", "len", "(", "v", "[", "\"boxes\"", "]", ")", "for", "v", "in", "targets", "]", "\n", "indices", "=", "[", "linear_sum_assignment", "(", "c", "[", "i", "]", ")", "for", "i", ",", "c", "in", "enumerate", "(", "C", ".", "split", "(", "sizes", ",", "-", "1", ")", ")", "]", "\n", "return", "[", "(", "torch", ".", "as_tensor", "(", "i", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "torch", ".", "as_tensor", "(", "j", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "for", "i", ",", "j", "in", "indices", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.DynamicHead.__init__": [[18, 44], ["torch.nn.Module.__init__", "head.DynamicHead._init_box_pooler", "head.RCNNHead", "head._get_clones", "head.DynamicHead._reset_parameters", "math.log"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.DynamicHead._init_box_pooler", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head._get_clones", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.DynamicHead._reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "roi_input_shape", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Build RoI.", "\n", "box_pooler", "=", "self", ".", "_init_box_pooler", "(", "cfg", ",", "roi_input_shape", ")", "\n", "self", ".", "box_pooler", "=", "box_pooler", "\n", "\n", "# Build heads.", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NUM_CLASSES", "\n", "d_model", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "HIDDEN_DIM", "\n", "dim_feedforward", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "DIM_FEEDFORWARD", "\n", "nhead", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NHEADS", "\n", "dropout", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "DROPOUT", "\n", "activation", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "ACTIVATION", "\n", "num_heads", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NUM_HEADS", "\n", "rcnn_head", "=", "RCNNHead", "(", "cfg", ",", "d_model", ",", "num_classes", ",", "dim_feedforward", ",", "nhead", ",", "dropout", ",", "activation", ")", "\n", "self", ".", "head_series", "=", "_get_clones", "(", "rcnn_head", ",", "num_heads", ")", "\n", "self", ".", "return_intermediate", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "DEEP_SUPERVISION", "\n", "\n", "# Init parameters.", "\n", "self", ".", "use_focal", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "USE_FOCAL", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "self", ".", "use_focal", ":", "\n", "            ", "prior_prob", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "PRIOR_PROB", "\n", "self", ".", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.DynamicHead._reset_parameters": [[45, 55], ["head.DynamicHead.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "# init all parameters.", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "# initialize the bias for focal loss.", "\n", "", "if", "self", ".", "use_focal", ":", "\n", "                ", "if", "p", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "num_classes", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "self", ".", "bias_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.DynamicHead._init_box_pooler": [[56, 78], ["tuple", "detectron2.modeling.poolers.ROIPooler", "len", "set"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "_init_box_pooler", "(", "cfg", ",", "input_shape", ")", ":", "\n", "\n", "        ", "in_features", "=", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "IN_FEATURES", "\n", "pooler_resolution", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "pooler_scales", "=", "tuple", "(", "1.0", "/", "input_shape", "[", "k", "]", ".", "stride", "for", "k", "in", "in_features", ")", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler_type", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_TYPE", "\n", "\n", "# If StandardROIHeads is applied on multiple feature maps (as in FPN),", "\n", "# then we share the same predictors and therefore the channel counts must be the same", "\n", "in_channels", "=", "[", "input_shape", "[", "f", "]", ".", "channels", "for", "f", "in", "in_features", "]", "\n", "# Check all channel counts are equal", "\n", "assert", "len", "(", "set", "(", "in_channels", ")", ")", "==", "1", ",", "in_channels", "\n", "\n", "box_pooler", "=", "ROIPooler", "(", "\n", "output_size", "=", "pooler_resolution", ",", "\n", "scales", "=", "pooler_scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "pooler_type", "=", "pooler_type", ",", "\n", ")", "\n", "return", "box_pooler", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.DynamicHead.forward": [[79, 103], ["len", "init_features[].repeat", "init_features[].repeat.clone", "rcnn_head", "pred_bboxes.detach", "inter_class_logits.append", "inter_pred_bboxes.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "init_bboxes", ",", "init_features", ")", ":", "\n", "\n", "        ", "inter_class_logits", "=", "[", "]", "\n", "inter_pred_bboxes", "=", "[", "]", "\n", "\n", "bs", "=", "len", "(", "features", "[", "0", "]", ")", "\n", "bboxes", "=", "init_bboxes", "\n", "\n", "init_features", "=", "init_features", "[", "None", "]", ".", "repeat", "(", "1", ",", "bs", ",", "1", ")", "\n", "proposal_features", "=", "init_features", ".", "clone", "(", ")", "\n", "\n", "for", "rcnn_head", "in", "self", ".", "head_series", ":", "\n", "            ", "class_logits", ",", "pred_bboxes", ",", "proposal_features", "=", "rcnn_head", "(", "features", ",", "bboxes", ",", "proposal_features", ",", "self", ".", "box_pooler", ")", "\n", "prototypes", "=", "proposal_features", "\n", "\n", "if", "self", ".", "return_intermediate", ":", "\n", "                ", "inter_class_logits", ".", "append", "(", "class_logits", ")", "\n", "inter_pred_bboxes", ".", "append", "(", "pred_bboxes", ")", "\n", "", "bboxes", "=", "pred_bboxes", ".", "detach", "(", ")", "\n", "\n", "", "if", "self", ".", "return_intermediate", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "inter_class_logits", ")", ",", "torch", ".", "stack", "(", "inter_pred_bboxes", ")", ",", "prototypes", "\n", "\n", "", "return", "class_logits", "[", "None", "]", ",", "pred_bboxes", "[", "None", "]", ",", "prototypes", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.RCNNHead.__init__": [[107, 157], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "head.DynamicConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "head._get_activation_fn", "list", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "list", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "d_model", ",", "num_classes", ",", "dim_feedforward", "=", "2048", ",", "nhead", "=", "8", ",", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "\n", "scale_clamp", ":", "float", "=", "_DEFAULT_SCALE_CLAMP", ",", "bbox_weights", "=", "(", "2.0", ",", "2.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n", "# dynamic.", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "inst_interact", "=", "DynamicConv", "(", "cfg", ")", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "\n", "# cls.", "\n", "num_cls", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NUM_CLS", "\n", "cls_module", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "num_cls", ")", ":", "\n", "            ", "cls_module", ".", "append", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ",", "False", ")", ")", "\n", "cls_module", ".", "append", "(", "nn", ".", "LayerNorm", "(", "d_model", ")", ")", "\n", "cls_module", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "self", ".", "cls_module", "=", "nn", ".", "ModuleList", "(", "cls_module", ")", "\n", "\n", "# reg.", "\n", "num_reg", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NUM_REG", "\n", "reg_module", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "num_reg", ")", ":", "\n", "            ", "reg_module", ".", "append", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ",", "False", ")", ")", "\n", "reg_module", ".", "append", "(", "nn", ".", "LayerNorm", "(", "d_model", ")", ")", "\n", "reg_module", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "self", ".", "reg_module", "=", "nn", ".", "ModuleList", "(", "reg_module", ")", "\n", "\n", "# pred.", "\n", "self", ".", "use_focal", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "USE_FOCAL", "\n", "if", "self", ".", "use_focal", ":", "\n", "            ", "self", ".", "class_logits", "=", "nn", ".", "Linear", "(", "d_model", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "class_logits", "=", "nn", ".", "Linear", "(", "d_model", ",", "num_classes", "+", "1", ")", "\n", "", "self", ".", "bboxes_delta", "=", "nn", ".", "Linear", "(", "d_model", ",", "4", ")", "\n", "self", ".", "scale_clamp", "=", "scale_clamp", "\n", "self", ".", "bbox_weights", "=", "bbox_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.RCNNHead.forward": [[159, 201], ["list", "range", "pooler", "roi_features.view().permute.view().permute.view().permute", "pro_features.view().permute().reshape.view().permute().reshape.view().permute", "head.RCNNHead.norm1", "pro_features.view().permute().reshape.view().permute().reshape.view().permute().reshape", "head.RCNNHead.inst_interact", "head.RCNNHead.norm2", "head.RCNNHead.linear2", "head.RCNNHead.norm3", "head.RCNNHead.transpose().reshape", "head.RCNNHead.transpose().reshape.clone", "head.RCNNHead.transpose().reshape.clone", "head.RCNNHead.class_logits", "head.RCNNHead.bboxes_delta", "head.RCNNHead.apply_deltas", "list.append", "head.RCNNHead.self_attn", "head.RCNNHead.dropout1", "head.RCNNHead.dropout2", "head.RCNNHead.dropout", "head.RCNNHead.dropout3", "cls_layer", "reg_layer", "bboxes.view", "head.RCNNHead.view", "head.RCNNHead.view", "detectron2.structures.Boxes", "roi_features.view().permute.view().permute.view", "pro_features.view().permute().reshape.view().permute().reshape.view", "pro_features.view().permute().reshape.view().permute().reshape.view().permute", "head.RCNNHead.activation", "head.RCNNHead.transpose", "head.RCNNHead.linear1", "pro_features.view().permute().reshape.view().permute().reshape.view"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.RCNNHead.apply_deltas"], ["", "def", "forward", "(", "self", ",", "features", ",", "bboxes", ",", "pro_features", ",", "pooler", ")", ":", "\n", "        ", "\"\"\"\n        :param bboxes: (N, nr_boxes, 4)\n        :param pro_features: (N, nr_boxes, d_model)\n        \"\"\"", "\n", "\n", "N", ",", "nr_boxes", "=", "bboxes", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# roi_feature.", "\n", "proposal_boxes", "=", "list", "(", ")", "\n", "for", "b", "in", "range", "(", "N", ")", ":", "\n", "            ", "proposal_boxes", ".", "append", "(", "Boxes", "(", "bboxes", "[", "b", "]", ")", ")", "\n", "", "roi_features", "=", "pooler", "(", "features", ",", "proposal_boxes", ")", "\n", "roi_features", "=", "roi_features", ".", "view", "(", "N", "*", "nr_boxes", ",", "self", ".", "d_model", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "# self_att.", "\n", "pro_features", "=", "pro_features", ".", "view", "(", "N", ",", "nr_boxes", ",", "self", ".", "d_model", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "pro_features2", "=", "self", ".", "self_attn", "(", "pro_features", ",", "pro_features", ",", "value", "=", "pro_features", ")", "[", "0", "]", "\n", "pro_features", "=", "pro_features", "+", "self", ".", "dropout1", "(", "pro_features2", ")", "\n", "pro_features", "=", "self", ".", "norm1", "(", "pro_features", ")", "\n", "\n", "# inst_interact.", "\n", "pro_features", "=", "pro_features", ".", "view", "(", "nr_boxes", ",", "N", ",", "self", ".", "d_model", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "reshape", "(", "1", ",", "N", "*", "nr_boxes", ",", "self", ".", "d_model", ")", "\n", "pro_features2", "=", "self", ".", "inst_interact", "(", "pro_features", ",", "roi_features", ")", "\n", "pro_features", "=", "pro_features", "+", "self", ".", "dropout2", "(", "pro_features2", ")", "\n", "obj_features", "=", "self", ".", "norm2", "(", "pro_features", ")", "\n", "\n", "# obj_feature.", "\n", "obj_features2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "obj_features", ")", ")", ")", ")", "\n", "obj_features", "=", "obj_features", "+", "self", ".", "dropout3", "(", "obj_features2", ")", "\n", "obj_features", "=", "self", ".", "norm3", "(", "obj_features", ")", "\n", "fc_feature", "=", "obj_features", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "N", "*", "nr_boxes", ",", "-", "1", ")", "\n", "cls_feature", "=", "fc_feature", ".", "clone", "(", ")", "\n", "reg_feature", "=", "fc_feature", ".", "clone", "(", ")", "\n", "for", "cls_layer", "in", "self", ".", "cls_module", ":", "\n", "            ", "cls_feature", "=", "cls_layer", "(", "cls_feature", ")", "\n", "", "for", "reg_layer", "in", "self", ".", "reg_module", ":", "\n", "            ", "reg_feature", "=", "reg_layer", "(", "reg_feature", ")", "\n", "", "class_logits", "=", "self", ".", "class_logits", "(", "cls_feature", ")", "\n", "bboxes_deltas", "=", "self", ".", "bboxes_delta", "(", "reg_feature", ")", "\n", "pred_bboxes", "=", "self", ".", "apply_deltas", "(", "bboxes_deltas", ",", "bboxes", ".", "view", "(", "-", "1", ",", "4", ")", ")", "\n", "\n", "return", "class_logits", ".", "view", "(", "N", ",", "nr_boxes", ",", "-", "1", ")", ",", "pred_bboxes", ".", "view", "(", "N", ",", "nr_boxes", ",", "-", "1", ")", ",", "obj_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.RCNNHead.apply_deltas": [[203, 242], ["boxes.to.to.to", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "apply_deltas", "(", "self", ",", "deltas", ",", "boxes", ")", ":", "\n", "        ", "\"\"\"\n        Apply transformation `deltas` (dx, dy, dw, dh) to `boxes`.\n\n        Args:\n            deltas (Tensor): transformation deltas of shape (N, k*4), where k >= 1.\n                deltas[i] represents k potentially different class-specific\n                box transformations for the single box boxes[i].\n            boxes (Tensor): boxes to transform, of shape (N, 4)\n        \"\"\"", "\n", "boxes", "=", "boxes", ".", "to", "(", "deltas", ".", "dtype", ")", "\n", "\n", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "\n", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "wx", ",", "wy", ",", "ww", ",", "wh", "=", "self", ".", "bbox_weights", "\n", "dx", "=", "deltas", "[", ":", ",", "0", ":", ":", "4", "]", "/", "wx", "\n", "dy", "=", "deltas", "[", ":", ",", "1", ":", ":", "4", "]", "/", "wy", "\n", "dw", "=", "deltas", "[", ":", ",", "2", ":", ":", "4", "]", "/", "ww", "\n", "dh", "=", "deltas", "[", ":", ",", "3", ":", ":", "4", "]", "/", "wh", "\n", "\n", "# Prevent sending too large values into torch.exp()", "\n", "dw", "=", "torch", ".", "clamp", "(", "dw", ",", "max", "=", "self", ".", "scale_clamp", ")", "\n", "dh", "=", "torch", ".", "clamp", "(", "dh", ",", "max", "=", "self", ".", "scale_clamp", ")", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", "[", ":", ",", "None", "]", "+", "ctr_x", "[", ":", ",", "None", "]", "\n", "pred_ctr_y", "=", "dy", "*", "heights", "[", ":", ",", "None", "]", "+", "ctr_y", "[", ":", ",", "None", "]", "\n", "pred_w", "=", "torch", ".", "exp", "(", "dw", ")", "*", "widths", "[", ":", ",", "None", "]", "\n", "pred_h", "=", "torch", ".", "exp", "(", "dh", ")", "*", "heights", "[", ":", ",", "None", "]", "\n", "\n", "pred_boxes", "=", "torch", ".", "zeros_like", "(", "deltas", ")", "\n", "pred_boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "# x1", "\n", "pred_boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "# y1", "\n", "pred_boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "# x2", "\n", "pred_boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "# y2", "\n", "\n", "return", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.DynamicConv.__init__": [[246, 264], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_dim", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "HIDDEN_DIM", "\n", "self", ".", "dim_dynamic", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "DIM_DYNAMIC", "\n", "self", ".", "num_dynamic", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NUM_DYNAMIC", "\n", "self", ".", "num_params", "=", "self", ".", "hidden_dim", "*", "self", ".", "dim_dynamic", "\n", "self", ".", "dynamic_layer", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "num_dynamic", "*", "self", ".", "num_params", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "dim_dynamic", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "self", ".", "hidden_dim", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "pooler_resolution", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "num_output", "=", "self", ".", "hidden_dim", "*", "pooler_resolution", "**", "2", "\n", "self", ".", "out_layer", "=", "nn", ".", "Linear", "(", "num_output", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "self", ".", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head.DynamicConv.forward": [[265, 290], ["roi_features.permute", "head.DynamicConv.dynamic_layer().permute", "parameters[].view", "parameters[].view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "head.DynamicConv.norm1", "head.DynamicConv.activation", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "head.DynamicConv.norm2", "head.DynamicConv.activation", "head.DynamicConv.flatten", "head.DynamicConv.out_layer", "head.DynamicConv.norm3", "head.DynamicConv.activation", "head.DynamicConv.dynamic_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pro_features", ",", "roi_features", ")", ":", "\n", "        ", "'''\n        pro_features: (1,  N * nr_boxes, self.d_model)\n        roi_features: (49, N * nr_boxes, self.d_model)\n        '''", "\n", "features", "=", "roi_features", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "parameters", "=", "self", ".", "dynamic_layer", "(", "pro_features", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "param1", "=", "parameters", "[", ":", ",", ":", ",", ":", "self", ".", "num_params", "]", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_dim", ",", "self", ".", "dim_dynamic", ")", "\n", "param2", "=", "parameters", "[", ":", ",", ":", ",", "self", ".", "num_params", ":", "]", ".", "view", "(", "-", "1", ",", "self", ".", "dim_dynamic", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "features", "=", "torch", ".", "bmm", "(", "features", ",", "param1", ")", "\n", "features", "=", "self", ".", "norm1", "(", "features", ")", "\n", "features", "=", "self", ".", "activation", "(", "features", ")", "\n", "\n", "features", "=", "torch", ".", "bmm", "(", "features", ",", "param2", ")", "\n", "features", "=", "self", ".", "norm2", "(", "features", ")", "\n", "features", "=", "self", ".", "activation", "(", "features", ")", "\n", "\n", "features", "=", "features", ".", "flatten", "(", "1", ")", "\n", "features", "=", "self", ".", "out_layer", "(", "features", ")", "\n", "features", "=", "self", ".", "norm3", "(", "features", ")", "\n", "features", "=", "self", ".", "activation", "(", "features", ")", "\n", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head._get_clones": [[292, 294], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.head._get_activation_fn": [[296, 305], ["RuntimeError"], "function", ["None"], ["", "def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "\"\"\"Return an activation function given a string\"\"\"", "\n", "if", "activation", "==", "\"relu\"", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "if", "activation", "==", "\"gelu\"", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "", "if", "activation", "==", "\"glu\"", ":", "\n", "        ", "return", "F", ".", "glu", "\n", "", "raise", "RuntimeError", "(", "F\"activation should be relu/gelu, not {activation}.\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__": [[38, 128], ["torch.nn.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "build.build_backbone_gate", "detector.SparseRCNN_ROSETTA.backbone.parameters", "detector.SparseRCNN_ROSETTA.backbone.bottom_up.dis_feature_shape", "build.build_backbone_gate", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "head.DynamicHead", "loss.HungarianMatcher", "loss.SetCriterion", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "torch.Tensor().to().view", "detector.SparseRCNN_ROSETTA.to", "range", "range", "weight_dict.update", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "detector.SparseRCNN_ROSETTA.prototpyes_pre_task.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "matrix.mean.mean.mean", "detector.SparseRCNN_ROSETTA.prototpyes_pre_task_threshold.append", "detector.SparseRCNN_ROSETTA.backbone_model.output_shape", "aux_weight_dict.update", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "range", "matrix.mean.mean.min", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "weight_dict.items", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.__init__", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.dis_feature_shape", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.resnet_gate.ResNet_Gate.output_shape"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "\n", "self", ".", "in_features", "=", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "IN_FEATURES", "\n", "self", ".", "num_classes", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NUM_CLASSES", "\n", "self", ".", "num_proposals", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NUM_PROPOSALS", "\n", "self", ".", "hidden_dim", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "HIDDEN_DIM", "\n", "self", ".", "num_heads", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NUM_HEADS", "\n", "self", ".", "task", "=", "cfg", ".", "MODEL", ".", "TASK", "\n", "self", ".", "fre", "=", "cfg", ".", "MODEL", ".", "BACKBONE_FRE_GATE_INPUT", "\n", "\n", "# Build distillation", "\n", "self", ".", "backbone", "=", "build_backbone_gate", "(", "cfg", ")", "\n", "for", "i", "in", "self", ".", "backbone", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "distillation_shape", "=", "self", ".", "backbone", ".", "bottom_up", ".", "dis_feature_shape", "(", ")", "\n", "self", ".", "names", "=", "cfg", ".", "MODEL", ".", "DISTILLATION_FEATURE", "\n", "if", "self", ".", "task", "!=", "1", ":", "\n", "            ", "self", ".", "prototpyes_pre_task", "=", "[", "]", "\n", "self", ".", "prototpyes_pre_task_threshold", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "task", "-", "1", ")", ":", "\n", "                ", "prototpye", "=", "torch", ".", "load", "(", "f'prototypes/task{i + 1}.pt'", ",", "map_location", "=", "f'cuda:{dist.get_rank()}'", ")", "\n", "self", ".", "prototpyes_pre_task", ".", "append", "(", "prototpye", ")", "\n", "matrix", "=", "torch", ".", "zeros", "(", "prototpye", ".", "shape", "[", "0", "]", ",", "prototpye", ".", "shape", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "prototpye", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "for", "k", "in", "range", "(", "prototpye", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "matrix", "[", "j", "]", "[", "k", "]", "=", "(", "prototpye", "[", "j", "]", "-", "prototpye", "[", "k", "]", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "if", "j", "==", "k", ":", "\n", "                            ", "matrix", "[", "j", "]", "[", "k", "]", "=", "1000000", "\n", "", "", "", "matrix", "=", "matrix", ".", "min", "(", "0", ")", "[", "0", "]", "\n", "matrix", "=", "matrix", ".", "mean", "(", ")", "\n", "#matrix = matrix.max(0)[0]", "\n", "self", ".", "prototpyes_pre_task_threshold", ".", "append", "(", "matrix", ")", "\n", "\n", "\n", "# Build Backbone.", "\n", "", "", "self", ".", "backbone_model", "=", "build_backbone_gate", "(", "cfg", ",", "gate", "=", "True", ")", "\n", "self", ".", "size_divisibility", "=", "self", ".", "backbone", ".", "size_divisibility", "\n", "\n", "# Build Proposals.", "\n", "self", ".", "init_proposal_features", "=", "nn", ".", "Embedding", "(", "self", ".", "num_proposals", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "init_proposal_boxes", "=", "nn", ".", "Embedding", "(", "self", ".", "num_proposals", ",", "4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "init_proposal_boxes", ".", "weight", "[", ":", ",", ":", "2", "]", ",", "0.5", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "init_proposal_boxes", ".", "weight", "[", ":", ",", "2", ":", "]", ",", "1.0", ")", "\n", "\n", "# Build Dynamic Head.", "\n", "self", ".", "head", "=", "DynamicHead", "(", "cfg", "=", "cfg", ",", "roi_input_shape", "=", "self", ".", "backbone_model", ".", "output_shape", "(", ")", ")", "\n", "\n", "# Loss parameters:", "\n", "class_weight", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "CLASS_WEIGHT", "\n", "distillation_weight", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "DISTILLATION_WEIGHT", "\n", "diversity_weight", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "DIVERSITY_WEIGHT", "\n", "gate_weight", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "GATE_WEIGHT", "\n", "giou_weight", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "GIOU_WEIGHT", "\n", "l1_weight", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "L1_WEIGHT", "\n", "no_object_weight", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "NO_OBJECT_WEIGHT", "\n", "self", ".", "deep_supervision", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "DEEP_SUPERVISION", "\n", "self", ".", "use_focal", "=", "cfg", ".", "MODEL", ".", "SparseRCNN", ".", "USE_FOCAL", "\n", "\n", "# Build Criterion.", "\n", "matcher", "=", "HungarianMatcher", "(", "cfg", "=", "cfg", ",", "\n", "cost_class", "=", "class_weight", ",", "\n", "cost_bbox", "=", "l1_weight", ",", "\n", "cost_giou", "=", "giou_weight", ",", "\n", "use_focal", "=", "self", ".", "use_focal", ")", "\n", "weight_dict", "=", "{", "\"loss_ce\"", ":", "class_weight", ",", "\"loss_bbox\"", ":", "l1_weight", ",", "\"loss_giou\"", ":", "giou_weight", ",", "\n", "\"loss_gate\"", ":", "gate_weight", ",", "\"loss_distillation\"", ":", "distillation_weight", ",", "\n", "\"loss_diversity\"", ":", "diversity_weight", "}", "\n", "if", "self", ".", "deep_supervision", ":", "\n", "            ", "aux_weight_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_heads", "-", "1", ")", ":", "\n", "                ", "aux_weight_dict", ".", "update", "(", "{", "k", "+", "f\"_{i}\"", ":", "v", "for", "k", ",", "v", "in", "weight_dict", ".", "items", "(", ")", "}", ")", "\n", "", "weight_dict", ".", "update", "(", "aux_weight_dict", ")", "\n", "\n", "", "losses", "=", "[", "\"labels\"", ",", "\"boxes\"", "]", "\n", "\n", "self", ".", "criterion", "=", "SetCriterion", "(", "cfg", "=", "cfg", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "matcher", "=", "matcher", ",", "\n", "weight_dict", "=", "weight_dict", ",", "\n", "eos_coef", "=", "no_object_weight", ",", "\n", "losses", "=", "losses", ",", "\n", "use_focal", "=", "self", ".", "use_focal", ")", "\n", "\n", "pixel_mean", "=", "torch", ".", "Tensor", "(", "cfg", ".", "MODEL", ".", "PIXEL_MEAN", ")", ".", "to", "(", "self", ".", "device", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "pixel_std", "=", "torch", ".", "Tensor", "(", "cfg", ".", "MODEL", ".", "PIXEL_STD", ")", ".", "to", "(", "self", ".", "device", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "normalizer", "=", "lambda", "x", ":", "(", "x", "-", "pixel_mean", ")", "/", "pixel_std", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.forward": [[129, 259], ["detector.SparseRCNN_ROSETTA.preprocess_image", "isinstance", "detector.SparseRCNN_ROSETTA.backbone_model", "detector.SparseRCNN_ROSETTA.backbone", "list", "len", "os.path.exists", "detector.SparseRCNN_ROSETTA.init_proposal_boxes.weight.clone", "util.box_ops.box_cxcywh_to_xyxy", "detector.SparseRCNN_ROSETTA.head", "util.misc.nested_tensor_from_tensor_list", "list.append", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "zip", "len", "detector.SparseRCNN_ROSETTA.prepare_targets", "detector.SparseRCNN_ROSETTA.criterion", "detector.SparseRCNN_ROSETTA.keys", "detector.SparseRCNN_ROSETTA.inference", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "zip", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "matrix.mean.mean.mean", "diversity_loss_control_list.append", "x[].to", "print", "len", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "range", "input_per_image.get", "input_per_image.get", "detectron2.modeling.detector_postprocess", "processed_results.append", "range", "matrix.mean.mean.min", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "zip", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank"], "methods", ["home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.preprocess_image", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.prepare_targets", "home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.inference"], ["", "def", "forward", "(", "self", ",", "batched_inputs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batched_inputs: a list, batched outputs of :class:`DatasetMapper` .\n                Each item in the list contains the inputs for one image.\n                For now, each item in the list is a dict that contains:\n\n                * image: Tensor, image in (C, H, W) format.\n                * instances: Instances\n\n                Other information that's included in the original dicts, such as:\n\n                * \"height\", \"width\" (int): the output resolution of the model, used in inference.\n                  See :meth:`postprocess` for details.\n        \"\"\"", "\n", "images", ",", "images_whwh", "=", "self", ".", "preprocess_image", "(", "batched_inputs", ")", "\n", "if", "isinstance", "(", "images", ",", "(", "list", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "images", "=", "nested_tensor_from_tensor_list", "(", "images", ")", "\n", "\n", "# Feature Extraction.", "\n", "", "src", ",", "gate_loss", ",", "feature_gate_distillation", ",", "gate_list", ",", "diversity_loss_total", "=", "self", ".", "backbone_model", "(", "images", ".", "tensor", ")", "\n", "free_src", ",", "free_gate_loss", ",", "feature_nogate_distillation", ",", "free_gate_list", ",", "free_diversity_loss", "=", "self", ".", "backbone", "(", "\n", "images", ".", "tensor", ")", "\n", "features", "=", "list", "(", ")", "\n", "for", "f", "in", "self", ".", "in_features", ":", "\n", "            ", "feature", "=", "src", "[", "f", "]", "\n", "features", ".", "append", "(", "feature", ")", "\n", "\n", "# Distillation", "\n", "\n", "", "loss_distillation", "=", "0", "\n", "for", "name", "in", "self", ".", "names", ":", "\n", "            ", "loss_distillation", "=", "loss_distillation", "+", "(", "feature_nogate_distillation", "[", "name", "]", "-", "feature_gate_distillation", "[", "name", "]", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "", "loss_distillation", "/=", "len", "(", "self", ".", "names", ")", "\n", "if", "self", ".", "fre", "==", "1", ":", "\n", "            ", "loss_distillation", "=", "None", "\n", "gate_loss", "=", "None", "\n", "\n", "\n", "\n", "# Diversity", "\n", "", "diversity_loss_control", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "f'prototypes/task{self.task}_0.pt'", ")", ":", "\n", "            ", "prototpye", "=", "torch", ".", "load", "(", "f'prototypes/task{self.task}_0.pt'", ",", "map_location", "=", "f'cuda:{dist.get_rank()}'", ")", "\n", "", "else", ":", "\n", "            ", "prototpye", "=", "None", "\n", "", "if", "(", "self", ".", "task", "==", "1", "or", "self", ".", "fre", "==", "1", "or", "prototpye", "==", "None", ")", ":", "\n", "            ", "diversity_loss", "=", "None", "\n", "diversity_loss_control_list", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "diversity_loss", "=", "0", "\n", "diversity_loss_control_list", "=", "[", "]", "\n", "for", "prototpye_pre_task", ",", "prototpye_pre_task_threshold", ",", "diversity_loss_one", "in", "zip", "(", "\n", "self", ".", "prototpyes_pre_task", ",", "self", ".", "prototpyes_pre_task_threshold", ",", "diversity_loss_total", ")", ":", "\n", "                ", "matrix", "=", "torch", ".", "zeros", "(", "prototpye_pre_task", ".", "shape", "[", "0", "]", ",", "prototpye", ".", "shape", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "prototpye_pre_task", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "for", "k", "in", "range", "(", "prototpye", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "matrix", "[", "j", "]", "[", "k", "]", "=", "(", "prototpye_pre_task", "[", "j", "]", "-", "prototpye", "[", "k", "]", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "", "", "matrix", "=", "matrix", ".", "min", "(", "0", ")", "[", "0", "]", "\n", "matrix", "=", "matrix", ".", "mean", "(", ")", "\n", "diversity_loss_control", "=", "(", "(", "matrix", "-", "prototpye_pre_task_threshold", ")", "/", "matrix", ")", ".", "detach", "(", ")", "\n", "diversity_loss_control_list", ".", "append", "(", "diversity_loss_control", ")", "\n", "\n", "if", "diversity_loss_control", "<=", "0", ":", "\n", "                    ", "diversity_loss_control", "=", "0.000000001", "\n", "", "diversity_loss", "+=", "(", "diversity_loss_control", "*", "diversity_loss_one", ")", ".", "sum", "(", ")", "\n", "", "diversity_loss", "/=", "len", "(", "diversity_loss_total", ")", "\n", "\n", "\n", "\n", "\n", "# Prepare Proposals.", "\n", "", "proposal_boxes", "=", "self", ".", "init_proposal_boxes", ".", "weight", ".", "clone", "(", ")", "\n", "proposal_boxes", "=", "box_cxcywh_to_xyxy", "(", "proposal_boxes", ")", "\n", "proposal_boxes", "=", "proposal_boxes", "[", "None", "]", "*", "images_whwh", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "# Prediction.", "\n", "outputs_class", ",", "outputs_coord", ",", "prototypes", "=", "self", ".", "head", "(", "features", ",", "proposal_boxes", ",", "self", ".", "init_proposal_features", ".", "weight", ")", "\n", "output", "=", "{", "'pred_logits'", ":", "outputs_class", "[", "-", "1", "]", ",", "'pred_boxes'", ":", "outputs_coord", "[", "-", "1", "]", "}", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "gt_instances", "=", "[", "x", "[", "\"instances\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "targets", "=", "self", ".", "prepare_targets", "(", "gt_instances", ")", "\n", "if", "self", ".", "deep_supervision", ":", "\n", "                ", "output", "[", "'aux_outputs'", "]", "=", "[", "{", "'pred_logits'", ":", "a", ",", "'pred_boxes'", ":", "b", "}", "\n", "for", "a", ",", "b", "in", "zip", "(", "outputs_class", "[", ":", "-", "1", "]", ",", "outputs_coord", "[", ":", "-", "1", "]", ")", "]", "\n", "\n", "", "loss_dict", "=", "self", ".", "criterion", "(", "output", ",", "targets", ",", "gate_loss", ",", "loss_distillation", ",", "diversity_loss", ")", "\n", "weight_dict", "=", "self", ".", "criterion", ".", "weight_dict", "\n", "for", "k", "in", "loss_dict", ".", "keys", "(", ")", ":", "\n", "                ", "if", "k", "in", "weight_dict", ":", "\n", "                    ", "loss_dict", "[", "k", "]", "*=", "weight_dict", "[", "k", "]", "\n", "", "", "return", "loss_dict", "\n", "\n", "", "else", ":", "\n", "            ", "if", "diversity_loss_control_list", "!=", "None", ":", "\n", "                ", "print", "(", "diversity_loss_control_list", ")", "\n", "", "box_cls", "=", "output", "[", "\"pred_logits\"", "]", "\n", "box_pred", "=", "output", "[", "\"pred_boxes\"", "]", "\n", "results", "=", "self", ".", "inference", "(", "box_cls", ",", "box_pred", ",", "images", ".", "image_sizes", ")", "\n", "\n", "\n", "\n", "prototypes_tensor", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "prototypes", ".", "shape", "[", "2", "]", ")", ".", "cuda", "(", ")", "\n", "prototypes_number", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "                ", "prototype", "=", "prototypes", "[", "i", "]", "\n", "zero", "=", "torch", ".", "zeros_like", "(", "results", "[", "i", "]", ".", "pred_classes", ")", "-", "1", "\n", "cls", "=", "torch", ".", "where", "(", "results", "[", "i", "]", ".", "scores", ">", "0.5", ",", "results", "[", "i", "]", ".", "pred_classes", ",", "zero", ")", "\n", "for", "j", "in", "range", "(", "cls", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "cls", "[", "j", "]", "!=", "-", "1", ":", "\n", "                        ", "prototypes_tensor", "[", "cls", "[", "j", "]", "]", "+=", "prototype", "[", "j", "]", "\n", "prototypes_number", "[", "cls", "[", "j", "]", "]", "+=", "1", "\n", "", "", "", "prototypes_dict", "=", "{", "}", "\n", "prototypes_dict", "[", "'prototypes_tensor'", "]", "=", "prototypes_tensor", "\n", "prototypes_dict", "[", "'prototypes_number'", "]", "=", "prototypes_number", "\n", "\n", "\n", "\n", "\n", "processed_results", "=", "[", "]", "\n", "for", "results_per_image", ",", "input_per_image", ",", "image_size", "in", "zip", "(", "results", ",", "batched_inputs", ",", "images", ".", "image_sizes", ")", ":", "\n", "                ", "height", "=", "input_per_image", ".", "get", "(", "\"height\"", ",", "image_size", "[", "0", "]", ")", "\n", "width", "=", "input_per_image", ".", "get", "(", "\"width\"", ",", "image_size", "[", "1", "]", ")", "\n", "r", "=", "detector_postprocess", "(", "results_per_image", ",", "height", ",", "width", ")", "\n", "processed_results", ".", "append", "(", "{", "\"instances\"", ":", "r", "}", ")", "\n", "\n", "", "return", "processed_results", ",", "gate_list", ",", "prototypes_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.prepare_targets": [[260, 279], ["torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "util.box_ops.box_xyxy_to_cxcywh", "gt_classes.to", "util.box_ops.box_xyxy_to_cxcywh.to", "targets_per_image.gt_boxes.tensor.to", "torch.as_tensor.to", "torch.as_tensor.to", "torch.as_tensor.to", "torch.as_tensor.to", "torch.as_tensor.unsqueeze().repeat", "torch.as_tensor.unsqueeze().repeat", "torch.as_tensor.unsqueeze().repeat", "torch.as_tensor.unsqueeze().repeat", "torch.as_tensor.unsqueeze().repeat.to", "targets_per_image.gt_boxes.area().to", "new_targets.append", "len", "torch.as_tensor.unsqueeze", "torch.as_tensor.unsqueeze", "torch.as_tensor.unsqueeze", "torch.as_tensor.unsqueeze", "targets_per_image.gt_boxes.area"], "methods", ["None"], ["", "", "def", "prepare_targets", "(", "self", ",", "targets", ")", ":", "\n", "        ", "new_targets", "=", "[", "]", "\n", "for", "targets_per_image", "in", "targets", ":", "\n", "            ", "target", "=", "{", "}", "\n", "h", ",", "w", "=", "targets_per_image", ".", "image_size", "\n", "image_size_xyxy", "=", "torch", ".", "as_tensor", "(", "[", "w", ",", "h", ",", "w", ",", "h", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "gt_classes", "=", "targets_per_image", ".", "gt_classes", "\n", "gt_boxes", "=", "targets_per_image", ".", "gt_boxes", ".", "tensor", "/", "image_size_xyxy", "\n", "gt_boxes", "=", "box_xyxy_to_cxcywh", "(", "gt_boxes", ")", "\n", "target", "[", "\"labels\"", "]", "=", "gt_classes", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "gt_boxes", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "[", "\"boxes_xyxy\"", "]", "=", "targets_per_image", ".", "gt_boxes", ".", "tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "[", "\"image_size_xyxy\"", "]", "=", "image_size_xyxy", ".", "to", "(", "self", ".", "device", ")", "\n", "image_size_xyxy_tgt", "=", "image_size_xyxy", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "len", "(", "gt_boxes", ")", ",", "1", ")", "\n", "target", "[", "\"image_size_xyxy_tgt\"", "]", "=", "image_size_xyxy_tgt", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "[", "\"area\"", "]", "=", "targets_per_image", ".", "gt_boxes", ".", "area", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "new_targets", ".", "append", "(", "target", ")", "\n", "\n", "", "return", "new_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.inference": [[280, 331], ["len", "len", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "enumerate", "[].max", "enumerate", "zip", "detectron2.structures.Instances", "scores_per_image.flatten().topk", "box_pred_per_image.view().repeat().view.view().repeat().view.view().repeat().view", "detectron2.structures.Boxes", "results.append", "zip", "detectron2.structures.Instances", "detectron2.structures.Boxes", "detectron2.structures.Instances.pred_boxes.scale", "results.append", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "scores_per_image.flatten", "box_pred_per_image.view().repeat().view.view().repeat().view.view().repeat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "box_pred_per_image.view().repeat().view.view().repeat().view.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "box_cls", ",", "box_pred", ",", "image_sizes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            box_cls (Tensor): tensor of shape (batch_size, num_proposals, K).\n                The tensor predicts the classification probability for each proposal.\n            box_pred (Tensor): tensors of shape (batch_size, num_proposals, 4).\n                The tensor predicts 4-vector (x,y,w,h) box\n                regression values for every proposal\n            image_sizes (List[torch.Size]): the input image sizes\n\n        Returns:\n            results (List[Instances]): a list of #images elements.\n        \"\"\"", "\n", "assert", "len", "(", "box_cls", ")", "==", "len", "(", "image_sizes", ")", "\n", "results", "=", "[", "]", "\n", "\n", "if", "self", ".", "use_focal", ":", "\n", "            ", "scores", "=", "torch", ".", "sigmoid", "(", "box_cls", ")", "\n", "labels", "=", "torch", ".", "arange", "(", "self", ".", "num_classes", ",", "device", "=", "self", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "num_proposals", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "\n", "for", "i", ",", "(", "scores_per_image", ",", "box_pred_per_image", ",", "image_size", ")", "in", "enumerate", "(", "zip", "(", "\n", "scores", ",", "box_pred", ",", "image_sizes", "\n", ")", ")", ":", "\n", "                ", "result", "=", "Instances", "(", "image_size", ")", "\n", "scores_per_image", ",", "topk_indices", "=", "scores_per_image", ".", "flatten", "(", "0", ",", "1", ")", ".", "topk", "(", "self", ".", "num_proposals", ",", "sorted", "=", "False", ")", "\n", "labels_per_image", "=", "labels", "[", "topk_indices", "]", "\n", "box_pred_per_image", "=", "box_pred_per_image", ".", "view", "(", "-", "1", ",", "1", ",", "4", ")", ".", "repeat", "(", "1", ",", "self", ".", "num_classes", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "box_pred_per_image", "=", "box_pred_per_image", "[", "topk_indices", "]", "\n", "\n", "result", ".", "pred_boxes", "=", "Boxes", "(", "box_pred_per_image", ")", "\n", "result", ".", "scores", "=", "scores_per_image", "\n", "result", ".", "pred_classes", "=", "labels_per_image", "\n", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "", "else", ":", "\n", "# For each box we assign the best class or the second best if the best on is `no_object`.", "\n", "            ", "scores", ",", "labels", "=", "F", ".", "softmax", "(", "box_cls", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", ":", "-", "1", "]", ".", "max", "(", "-", "1", ")", "\n", "\n", "for", "i", ",", "(", "scores_per_image", ",", "labels_per_image", ",", "box_pred_per_image", ",", "image_size", ")", "in", "enumerate", "(", "zip", "(", "\n", "scores", ",", "labels", ",", "box_pred", ",", "image_sizes", "\n", ")", ")", ":", "\n", "                ", "result", "=", "Instances", "(", "image_size", ")", "\n", "result", ".", "pred_boxes", "=", "Boxes", "(", "box_pred_per_image", ")", "\n", "result", ".", "pred_boxes", ".", "scale", "(", "scale_x", "=", "image_size", "[", "1", "]", ",", "scale_y", "=", "image_size", "[", "0", "]", ")", "\n", "\n", "result", ".", "scores", "=", "scores_per_image", "\n", "result", ".", "pred_classes", "=", "labels_per_image", "\n", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dkxocl_rosseta.None.detector.SparseRCNN_ROSETTA.preprocess_image": [[332, 346], ["detectron2.structures.ImageList.from_tensors", "list", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "detector.SparseRCNN_ROSETTA.normalizer", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "x[].to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "preprocess_image", "(", "self", ",", "batched_inputs", ")", ":", "\n", "        ", "\"\"\"\n        Normalize, pad and batch the input images.\n        \"\"\"", "\n", "images", "=", "[", "self", ".", "normalizer", "(", "x", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", ")", "for", "x", "in", "batched_inputs", "]", "\n", "images", "=", "ImageList", ".", "from_tensors", "(", "images", ",", "self", ".", "size_divisibility", ")", "\n", "\n", "images_whwh", "=", "list", "(", ")", "\n", "for", "bi", "in", "batched_inputs", ":", "\n", "            ", "h", ",", "w", "=", "bi", "[", "\"image\"", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "images_whwh", ".", "append", "(", "torch", ".", "tensor", "(", "[", "w", ",", "h", ",", "w", ",", "h", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "", "images_whwh", "=", "torch", ".", "stack", "(", "images_whwh", ")", "\n", "\n", "return", "images", ",", "images_whwh", "\n", "", "", ""]]}