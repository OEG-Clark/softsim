{"home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.train.seed_random": [[13, 18], ["torch.manual_seed", "numpy.random.seed"], "function", ["None"], ["def", "seed_random", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "10101", ")", "\n", "np", ".", "random", ".", "seed", "(", "10101", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.train.create_dirs": [[19, 26], ["os.path.exists", "os.makedirs", "shutil.rmtree", "os.makedirs"], "function", ["None"], ["", "def", "create_dirs", "(", "directories", ",", "clean_flag", ")", ":", "\n", "    ", "for", "direc", "in", "directories", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "direc", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "direc", ")", "\n", "", "elif", "clean_flag", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "direc", ")", "\n", "os", ".", "makedirs", "(", "direc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.train.main": [[28, 99], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "configparser.ConfigParser", "configparser.ConfigParser.read", "train.create_dirs", "train.seed_random", "models.model.Xvector_UAI.init_model", "scripts.trainer.Trainer", "scripts.trainer.Trainer.train_model", "scripts.trainer.Trainer.writer.flush", "scripts.trainer.Trainer.writer.close", "[].split", "os.path.join", "os.path.join", "datasets.fairvoice.FairVoice_embeddings", "datasets.fairvoice.FairVoice_embeddings", "datasets.xvectors.Xvectors", "datasets.xvectors.Xvectors", "models.model_unifai.Xvector_UnifAI", "models.model.Xvector_UAI", "models.model.Xvector_UAI.init_model_weights", "parser.parse_args.config_path.split"], "function", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.create_dirs", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.train.seed_random", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.init_model", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.train_model", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.init_model_weights"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config_path'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'Should contain train_data.npy, val_data.npy,'", "\n", "'train_labels.npy and val_labels.npy'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_data_root'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'If not provided, it defaults to args.data_root/out_exp_<exp_id>'", ")", "\n", "parser", ".", "add_argument", "(", "'--weights_root'", ",", "type", "=", "str", ",", "default", "=", "'./saved_models/'", ")", "\n", "parser", ".", "add_argument", "(", "'--logs_root'", ",", "type", "=", "str", ",", "default", "=", "'./logs/'", ")", "\n", "parser", ".", "add_argument", "(", "'--clean_flag'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Load configuration file", "\n", "config", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "config", ".", "read", "(", "args", ".", "config_path", ")", "\n", "model_config", "=", "config", "[", "'model_params'", "]", "\n", "train_config", "=", "config", "[", "'train_params'", "]", "\n", "loss_config", "=", "config", "[", "'loss_params'", "]", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "train_config", "[", "'visible_devices'", "]", "\n", "\n", "exp_id", "=", "args", ".", "config_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.cfg'", ")", "[", "0", "]", "\n", "\n", "log_dir", "=", "\"{}/{}\"", ".", "format", "(", "args", ".", "logs_root", ",", "exp_id", ")", "\n", "model_dir", "=", "\"{}/{}\"", ".", "format", "(", "args", ".", "weights_root", ",", "exp_id", ")", "\n", "if", "args", ".", "out_data_root", ":", "\n", "        ", "out_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_data_root", ",", "'out_{}'", ".", "format", "(", "exp_id", ")", ")", "\n", "", "else", ":", "\n", "        ", "out_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'out_{}'", ".", "format", "(", "exp_id", ")", ")", "\n", "\n", "# Create necessary directories if they do not exist", "\n", "", "create_dirs", "(", "[", "log_dir", ",", "model_dir", ",", "out_dir", "]", ",", "clean_flag", "=", "args", ".", "clean_flag", ")", "\n", "\n", "# Seed all randomization", "\n", "seed_random", "(", ")", "\n", "# Load data", "\n", "if", "train_config", "[", "'mode'", "]", "!=", "'NLDR'", "and", "train_config", "[", "'mode'", "]", "!=", "'UAI'", ":", "\n", "#train_config.getboolean('bias_FLAG') or model_config.getboolean('indirect_bias_FLAG') or train_config.getboolean('bias_only_FLAG'):", "\n", "        ", "train_data", "=", "FairVoice_embeddings", "(", "args", ".", "data_root", ",", "bias_type", "=", "train_config", "[", "'bias_type'", "]", ")", "\n", "val_data", "=", "FairVoice_embeddings", "(", "args", ".", "data_root", ",", "bias_type", "=", "train_config", "[", "'bias_type'", "]", ",", "valFlag", "=", "True", ")", "\n", "", "else", ":", "# Not using bias labels", "\n", "        ", "train_data", "=", "Xvectors", "(", "args", ".", "data_root", ")", "\n", "val_data", "=", "Xvectors", "(", "args", ".", "data_root", ",", "valFlag", "=", "True", ")", "\n", "\n", "# Initialize model", "\n", "", "if", "train_config", "[", "'mode'", "]", "!=", "'NLDR'", "and", "train_config", "[", "'mode'", "]", "!=", "'UAI'", ":", "\n", "#train_config.getboolean('bias_FLAG') or model_config.getboolean('indirect_bias_FLAG') or train_config.getboolean('bias_only_FLAG'):", "\n", "        ", "model_UAI", "=", "Xvector_UnifAI", "(", ")", "\n", "model_UAI", ".", "n_bias", "=", "train_data", ".", "num_bias", "\n", "", "else", ":", "\n", "        ", "model_UAI", "=", "Xvector_UAI", "(", ")", "\n", "", "model_UAI", ".", "n_spk", "=", "train_data", ".", "num_spk", "\n", "model_UAI", ".", "x_shape", "=", "(", "train_data", ".", "feat_dim", ",", ")", "\n", "model_UAI", ".", "init_model", "(", "model_config", ")", "\n", "if", "train_config", "[", "'mode'", "]", "==", "'UAI'", ":", "\n", "#not (train_config.getboolean('bias_FLAG') or model_config.getboolean('indirect_bias_FLAG') or train_config.getboolean('bias_only_FLAG')):", "\n", "        ", "model_UAI", ".", "init_model_weights", "(", ")", "\n", "\n", "", "trainer", "=", "Trainer", "(", "model_UAI", ",", "train_config", "=", "train_config", ",", "loss_config", "=", "loss_config", ",", "model_config", "=", "model_config", ",", "\n", "log_dir", "=", "log_dir", ",", "model_dir", "=", "model_dir", ",", "out_dir", "=", "out_dir", ")", "\n", "\n", "# Train model", "\n", "if", "train_config", "[", "'mode'", "]", "!=", "'NLDR'", "and", "train_config", "[", "'mode'", "]", "!=", "'UAI'", ":", "\n", "#train_config.getboolean('bias_FLAG') or train_config.getboolean('bias_only_FLAG'):", "\n", "        ", "trainer", ".", "prob_bias", "=", "train_data", ".", "prob_bias", "\n", "", "trainer", ".", "train_model", "(", "train_data", ",", "val_data", ")", "\n", "\n", "trainer", ".", "writer", ".", "flush", "(", ")", "\n", "trainer", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.create_dirs": [[15, 19], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "create_dirs", "(", "directories", ")", ":", "\n", "    ", "for", "direc", "in", "directories", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "direc", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "direc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save": [[20, 24], ["numpy.save", "numpy.save", "numpy.save", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save"], ["", "", "", "def", "save", "(", "out_dir", ",", "var", ")", ":", "\n", "    ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'emb1'", ")", ",", "var", "[", "0", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'emb2'", ")", ",", "var", "[", "1", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'spk_pred'", ")", ",", "var", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save_bias": [[25, 27], ["numpy.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save"], ["", "def", "save_bias", "(", "out_dir", ",", "var", ")", ":", "\n", "    ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'bias_pred'", ")", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.main": [[34, 94], ["utils.basic_utils.get_device", "configparser.ConfigParser", "configparser.ConfigParser.read", "int", "transform.pad_data", "torch.load", "models.model_unifai.Xvector_UnifAI.init_model", "models.model_unifai.Xvector_UnifAI.load_state_dict", "models.model_unifai.Xvector_UnifAI.to", "models.model_unifai.Xvector_UnifAI.eval", "transform.forward_pass", "print", "os.path.exists", "print", "sys.exit", "os.path.exists", "print", "sys.exit", "datasets.xvectors.Xvectors_test", "datasets.fairvoice.FairVoice_embeddings_test", "int", "models.model.Xvector_UAI", "models.model_unifai.Xvector_UnifAI", "transform.forward_pass_bias", "transform.save", "transform.save", "transform.save_bias", "transform.save_bias"], "function", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.get_device", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.pad_data", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.init_model", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.forward_pass", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.forward_pass_bias", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save_bias", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save_bias"], ["def", "main", "(", "args", ")", ":", "\n", "# Check existence of required files", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "inp_feats", ")", ":", "\n", "        ", "print", "(", "\"Input file provided doesn't exist in {}. Exiting\"", ".", "format", "(", "args", ".", "inp_feats", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint_file", ")", ":", "\n", "        ", "print", "(", "\"Model checkpoint file provided doesn't exist in {}. Exiting\"", ".", "format", "(", "args", ".", "checkpoint_file", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "device", "=", "get_device", "(", ")", "# Function defined in utils/basic_utils.py", "\n", "\n", "\n", "# Load configuration file", "\n", "config", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "config", ".", "read", "(", "args", ".", "config_path", ")", "\n", "model_config", "=", "config", "[", "'model_params'", "]", "\n", "test_config", "=", "config", "[", "'test_params'", "]", "\n", "test_gen_params", "[", "'batch_size'", "]", "=", "int", "(", "test_config", "[", "'batch_size'", "]", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "test_config", "[", "'visible_devices'", "]", "\n", "\n", "# Load data", "\n", "#feats = torch.from_numpy(np.load(args.inp_feats)).type(torch.FloatTensor).to(device)", "\n", "if", "args", ".", "mode", "==", "'UAI'", ":", "\n", "        ", "test_data", "=", "Xvectors_test", "(", "args", ".", "inp_feats", ")", "\n", "", "else", ":", "\n", "        ", "test_data", "=", "FairVoice_embeddings_test", "(", "args", ".", "inp_feats", ")", "\n", "", "test_data", ".", "data", ",", "num_pad", "=", "pad_data", "(", "test_data", ".", "data", ",", "int", "(", "test_config", "[", "'batch_size'", "]", ")", ")", "\n", "\n", "# Initialize and load model", "\n", "if", "args", ".", "mode", "==", "'UAI'", ":", "\n", "        ", "model", "=", "Xvector_UAI", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "Xvector_UnifAI", "(", ")", "\n", "", "model", ".", "x_shape", "=", "(", "test_data", ".", "feat_dim", ",", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_file", ",", "map_location", "=", "device", ")", "\n", "model", ".", "n_spk", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'pred_final.0.bias'", "]", ".", "shape", "[", "0", "]", "\n", "if", "args", ".", "mode", "!=", "'UAI'", ":", "\n", "        ", "model", ".", "n_bias", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'pred_bias_final.0.bias'", "]", ".", "shape", "[", "0", "]", "\n", "", "model", ".", "init_model", "(", "model_config", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# Evaluate model on test input", "\n", "y_hat", ",", "e1", ",", "e2", "=", "forward_pass", "(", "model", ",", "test_data", ")", "\n", "if", "args", ".", "mode", "!=", "'UAI'", ":", "\n", "        ", "b_hat", "=", "forward_pass_bias", "(", "model", ",", "e1", ")", "\n", "\n", "# Save predictions and embeddings", "\n", "", "out_dir", "=", "args", ".", "out_dir", "\n", "if", "num_pad", "!=", "0", ":", "\n", "        ", "save", "(", "out_dir", ",", "(", "e1", "[", "0", ":", "-", "num_pad", ",", ":", "]", ",", "e2", "[", "0", ":", "-", "num_pad", ",", ":", "]", ",", "y_hat", "[", "0", ":", "-", "num_pad", "]", ")", ")", "\n", "if", "args", ".", "mode", "!=", "'UAI'", ":", "\n", "            ", "save_bias", "(", "out_dir", ",", "b_hat", "[", "0", ":", "-", "num_pad", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "save", "(", "out_dir", ",", "(", "e1", ",", "e2", ",", "y_hat", ")", ")", "\n", "if", "args", ".", "mode", "!=", "'UAI'", ":", "\n", "            ", "save_bias", "(", "out_dir", ",", "b_hat", ")", "\n", "\n", "", "", "print", "(", "\"Done predicting. Saved predictions in {}\"", ".", "format", "(", "out_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.pad_data": [[96, 106], ["torch.empty"], "function", ["None"], ["", "def", "pad_data", "(", "feats", ",", "batch_size", ")", ":", "\n", "    ", "num_samples", "=", "feats", ".", "shape", "[", "0", "]", "\n", "if", "num_samples", "%", "batch_size", "==", "0", ":", "\n", "        ", "return", "feats", ",", "0", "\n", "", "else", ":", "\n", "        ", "num_extra", "=", "(", "num_samples", "//", "batch_size", "+", "1", ")", "*", "batch_size", "-", "num_samples", "\n", "feats_new", "=", "torch", ".", "empty", "(", "(", "num_samples", "//", "batch_size", "+", "1", ")", "*", "batch_size", ",", "feats", ".", "shape", "[", "1", "]", ")", "\n", "feats_new", "[", "0", ":", "num_samples", ",", ":", "]", "=", "feats", "[", ":", ",", ":", "]", "\n", "feats_new", "[", "num_samples", ":", ",", ":", "]", "=", "feats", "[", "-", "num_extra", ":", ",", ":", "]", "\n", "return", "feats_new", ",", "num_extra", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.forward_pass": [[107, 120], ["utils.basic_utils.get_device", "torch.utils.data.DataLoader", "enumerate", "batch_data.to.to", "model.forward_prim", "e1_all.append", "e2_all.append", "spk_pred.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "e1.detach().cpu().numpy", "e2.detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "e1.detach().cpu", "e2.detach().cpu", "torch.argmax().detach().cpu", "e1.detach", "e2.detach", "torch.argmax().detach", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.get_device", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.forward_prim"], ["", "", "def", "forward_pass", "(", "model", ",", "test_data", ")", ":", "\n", "    ", "device", "=", "get_device", "(", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "**", "test_gen_params", ")", "\n", "e1_all", "=", "[", "]", "\n", "e2_all", "=", "[", "]", "\n", "spk_pred", "=", "[", "]", "\n", "for", "batch_idx", ",", "batch_data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "batch_data", "=", "batch_data", ".", "to", "(", "device", ")", "\n", "y_hat", ",", "x_hat", ",", "e1", ",", "e2", "=", "model", ".", "forward_prim", "(", "batch_data", ")", "\n", "e1_all", ".", "append", "(", "e1", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "e2_all", ".", "append", "(", "e2", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "spk_pred", ".", "append", "(", "torch", ".", "argmax", "(", "y_hat", ",", "axis", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "spk_pred", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "e1_all", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "e2_all", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.forward_pass_bias": [[121, 129], ["utils.basic_utils.get_device", "enumerate", "numpy.concatenate", "torch.from_numpy", "sample_data.to().unsqueeze.to().unsqueeze", "model.forward_bias", "bias_pred.append", "torch.argmax().detach().cpu().numpy", "sample_data.to().unsqueeze.to", "torch.argmax().detach().cpu", "torch.argmax().detach", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.get_device", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.forward_bias"], ["", "def", "forward_pass_bias", "(", "model", ",", "e1", ")", ":", "\n", "    ", "device", "=", "get_device", "(", ")", "\n", "bias_pred", "=", "[", "]", "\n", "for", "sample_idx", ",", "sample_data", "in", "enumerate", "(", "torch", ".", "from_numpy", "(", "e1", ")", ")", ":", "\n", "        ", "sample_data", "=", "sample_data", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "b_hat", "=", "model", ".", "forward_bias", "(", "sample_data", ")", "\n", "bias_pred", ".", "append", "(", "torch", ".", "argmax", "(", "b_hat", ",", "axis", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "bias_pred", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.find_best_epoch.main": [[13, 30], ["os.path.join", "pandas.read_csv", "numpy.argmax", "print", "print", "os.path.join"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "exp", "=", "args", ".", "exp_id", "\n", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_root", ",", "\"exp_{}\"", ".", "format", "(", "exp", ")", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'output.log'", ")", ",", "delimiter", "=", "' '", ")", "\n", "epochs", "=", "df", "[", "'Epoch'", "]", ".", "values", "\n", "val_acc", "=", "df", "[", "'Validation_accuracy'", "]", ".", "values", "\n", "\n", "best_idx", "=", "np", ".", "argmax", "(", "val_acc", ")", "\n", "best_ep", "=", "epochs", "[", "best_idx", "]", "\n", "\n", "if", "'Validation_accuracy_bias'", "in", "df", ".", "columns", ":", "\n", "        ", "val_acc_bias", "=", "df", "[", "'Validation_accuracy_bias'", "]", ".", "values", "[", "best_idx", "]", "\n", "", "else", ":", "\n", "        ", "val_acc_bias", "=", "0", "\n", "", "print", "(", "\"best epoch for exp = {} is {}\"", ".", "format", "(", "exp", ",", "best_ep", ")", ")", "\n", "print", "(", "\"Val spk acc = {}. Val bias acc = {}\"", ".", "format", "(", "df", "[", "'Validation_accuracy'", "]", ".", "values", "[", "best_idx", "]", ",", "val_acc_bias", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.get_device": [[4, 6], ["torch.device", "torch.cuda.is_available"], "function", ["None"], ["def", "get_device", "(", ")", ":", "\n", "    ", "return", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.compute_spk_accuracy": [[7, 9], ["sklearn.metrics.accuracy_score"], "function", ["None"], ["", "def", "compute_spk_accuracy", "(", "true_lab", ",", "pred_lab", ")", ":", "\n", "    ", "return", "accuracy_score", "(", "true_lab", ",", "pred_lab", ")", "", "", ""]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.fairvoice.FairVoice_embeddings.__init__": [[9, 28], ["numpy.load", "numpy.load", "numpy.load", "collections.Counter", "enumerate", "numpy.sum", "enumerate", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "list", "list", "os.path.join", "os.path.join", "os.path.join", "numpy.unique", "numpy.unique", "collections.Counter.keys", "collections.Counter.keys", "collections.Counter.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "bias_type", "=", "'gender'", ",", "valFlag", "=", "False", ")", ":", "\n", "        ", "if", "not", "valFlag", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'train_data.npy'", ")", ")", "\n", "self", ".", "labels_spk", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'train_labels.npy'", ")", ")", "\n", "self", ".", "labels_bias", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'train_labels_{}.npy'", ".", "format", "(", "bias_type", ")", ")", ")", "\n", "counts", "=", "Counter", "(", "self", ".", "labels_bias", ")", "\n", "self", ".", "prob_bias", "=", "{", "}", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "list", "(", "counts", ".", "keys", "(", ")", ")", ")", ":", "\n", "                ", "self", ".", "prob_bias", "[", "key", "]", "=", "self", ".", "labels_bias", ".", "shape", "[", "0", "]", "/", "counts", "[", "key", "]", "\n", "", "total", "=", "np", ".", "sum", "(", "[", "self", ".", "prob_bias", "[", "key", "]", "for", "key", "in", "counts", ".", "keys", "(", ")", "]", ")", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "list", "(", "counts", ".", "keys", "(", ")", ")", ")", ":", "\n", "                ", "self", ".", "prob_bias", "[", "key", "]", "=", "self", ".", "prob_bias", "[", "key", "]", "/", "total", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'val_data.npy'", ")", ")", "\n", "self", ".", "labels_spk", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'val_labels.npy'", ")", ")", "\n", "self", ".", "labels_bias", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'val_labels_{}.npy'", ".", "format", "(", "bias_type", ")", ")", ")", "\n", "", "self", ".", "feat_dim", "=", "self", ".", "data", ".", "shape", "[", "1", "]", "\n", "self", ".", "num_spk", "=", "np", ".", "unique", "(", "self", ".", "labels_spk", ")", ".", "shape", "[", "0", "]", "#np.unique(self.labels).shape[0]", "\n", "self", ".", "num_bias", "=", "np", ".", "unique", "(", "self", ".", "labels_bias", ")", ".", "shape", "[", "0", "]", "#np.unique(self.labels).shape[0]", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.fairvoice.FairVoice_embeddings.__len__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.fairvoice.FairVoice_embeddings.__getitem__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "idx", ",", ":", "]", ",", "self", ".", "labels_spk", "[", "idx", "]", ",", "self", ".", "labels_bias", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.fairvoice.FairVoice_embeddings_test.__init__": [[35, 38], ["torch.from_numpy().type", "torch.from_numpy", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "self", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "data_path", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "self", ".", "feat_dim", "=", "self", ".", "data", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.fairvoice.FairVoice_embeddings_test.__len__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.fairvoice.FairVoice_embeddings_test.__getitem__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "idx", ",", ":", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.xvectors.Xvectors.__init__": [[8, 17], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.unique"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "valFlag", "=", "False", ")", ":", "\n", "        ", "if", "not", "valFlag", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'train_data.npy'", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'train_labels.npy'", ")", ")", "\n", "self", ".", "feat_dim", "=", "self", ".", "data", ".", "shape", "[", "1", "]", "\n", "self", ".", "num_spk", "=", "np", ".", "unique", "(", "self", ".", "labels", ")", ".", "shape", "[", "0", "]", "#np.unique(self.labels).shape[0]", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'val_data.npy'", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'val_labels.npy'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.xvectors.Xvectors.__len__": [[19, 21], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.xvectors.Xvectors.__getitem__": [[22, 24], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "idx", ",", ":", "]", ",", "self", ".", "labels", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.xvectors.Xvectors_test.__init__": [[26, 29], ["torch.from_numpy().type", "torch.from_numpy", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "self", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "data_path", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "self", ".", "feat_dim", "=", "self", ".", "data", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.xvectors.Xvectors_test.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.datasets.xvectors.Xvectors_test.__getitem__": [[33, 35], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "idx", ",", ":", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_scores": [[18, 52], ["tqdm.tqdm", "sklearn.metrics.roc_curve", "numpy.mean", "numpy.array", "numpy.array", "enumerate", "similarity_scores.append", "np.array.append", "evaluate_FDR.compute_fpr_fnr", "df_.iterrows", "print", "print", "scipy.spatial.distance.cosine", "numpy.nanargmin", "numpy.nanargmin", "numpy.nanargmin", "emb_mapping.keys", "emb_mapping.keys", "numpy.absolute", "numpy.absolute", "numpy.absolute"], "function", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_fpr_fnr"], ["def", "compute_scores", "(", "df_", ",", "eer_threshold_overall", "=", "0", ",", "agnostic_FLAG", "=", "False", ",", "emb_FLAG", "=", "True", ")", ":", "\n", "    ", "if", "emb_FLAG", ":", "\n", "        ", "emb_mapping", "=", "emb_map", "\n", "", "else", ":", "\n", "        ", "emb_mapping", "=", "xvec_map", "\n", "", "similarity_scores", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "idx", ",", "row", "in", "tqdm", "(", "enumerate", "(", "df_", ".", "iterrows", "(", ")", ")", ")", ":", "\n", "        ", "enrol", "=", "row", "[", "1", "]", "[", "'audio_1'", "]", "\n", "test", "=", "row", "[", "1", "]", "[", "'audio_2'", "]", "\n", "label", "=", "row", "[", "1", "]", "[", "'label'", "]", "\n", "if", "not", "enrol", "in", "emb_mapping", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "enrol", ")", "\n", "", "if", "not", "test", "in", "emb_mapping", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "test", ")", "\n", "\n", "", "sim", "=", "1", "-", "cosine", "(", "emb_mapping", "[", "enrol", "]", ",", "emb_mapping", "[", "test", "]", ")", "\n", "\n", "similarity_scores", ".", "append", "(", "sim", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "fpr", ",", "tpr", ",", "threshold", "=", "roc_curve", "(", "labels", ",", "similarity_scores", ")", "\n", "fnr", "=", "1", "-", "tpr", "\n", "eer_threshold", "=", "threshold", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "eer1", "=", "fpr", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "eer2", "=", "fnr", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "eer", "=", "np", ".", "mean", "(", "(", "eer1", ",", "eer2", ")", ")", "\n", "\n", "sim", "=", "np", ".", "array", "(", "similarity_scores", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "if", "not", "agnostic_FLAG", ":", "\n", "       ", "fpr", ",", "fnr", "=", "compute_fpr_fnr", "(", "sim", ",", "labels", ",", "eer_threshold_overall", ")", "\n", "return", "sim", ",", "labels", ",", "eer", ",", "fpr", ",", "fnr", "\n", "", "else", ":", "\n", "       ", "return", "sim", ",", "labels", ",", "eer", ",", "eer_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_fpr_fnr": [[53, 61], ["numpy.zeros", "sklearn.metrics.confusion_matrix().ravel", "sklearn.metrics.confusion_matrix"], "function", ["None"], ["", "", "def", "compute_fpr_fnr", "(", "sim", ",", "labels_e1", ",", "thresh", ")", ":", "\n", "\n", "    ", "preds", "=", "np", ".", "zeros", "(", "labels_e1", ".", "shape", "[", "0", "]", ")", "\n", "preds", "[", "sim", ">", "thresh", "]", "=", "1", "\n", "tn", ",", "fp", ",", "fn", ",", "tp", "=", "confusion_matrix", "(", "labels_e1", ",", "preds", ")", ".", "ravel", "(", ")", "\n", "fpr", "=", "fp", "/", "(", "fp", "+", "tn", ")", "\n", "fnr", "=", "fn", "/", "(", "fn", "+", "tp", ")", "\n", "return", "fpr", ",", "fnr", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_fdr": [[62, 67], ["numpy.absolute", "numpy.absolute"], "function", ["None"], ["", "def", "compute_fdr", "(", "fprs", ",", "fnrs", ",", "omega", "=", "0.5", ")", ":", "\n", "    ", "A", "=", "np", ".", "absolute", "(", "fprs", "[", "0", "]", "-", "fprs", "[", "1", "]", ")", "\n", "B", "=", "np", ".", "absolute", "(", "fnrs", "[", "0", "]", "-", "fnrs", "[", "1", "]", ")", "\n", "\n", "return", "1", "-", "(", "omega", "*", "A", "+", "(", "1", "-", "omega", ")", "*", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_auFDR": [[68, 93], ["tqdm.tqdm", "sklearn.metrics.auc", "sklearn.metrics.auc", "pandas.DataFrame", "evaluate_FDR.compute_fpr_fnr", "evaluate_FDR.compute_fpr_fnr", "evaluate_FDR.compute_fdr", "fdrs.append", "fnrs.append", "zip", "print", "print", "pd.DataFrame.to_csv", "print", "print", "pd.DataFrame.to_csv", "float", "numpy.round", "numpy.round", "os.path.join", "os.path.join", "numpy.nanargmin", "numpy.absolute", "numpy.nanargmin", "numpy.absolute"], "function", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_fpr_fnr", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_fpr_fnr", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_fdr"], ["", "def", "compute_auFDR", "(", "fpr_ov", ",", "tpr_ov", ",", "threshold_ov", ",", "sim_g0", ",", "sim_g1", ",", "labels_g0", ",", "labels_g1", ",", "\n", "score_dir", ",", "emb_FLAG", "=", "True", ",", "omega", "=", "0.5", ")", ":", "\n", "# FDRs at various thersholds", "\n", "    ", "fdrs", "=", "[", "]", "\n", "fnrs", "=", "[", "]", "\n", "for", "fpr", "in", "tqdm", "(", "fprs", ")", ":", "\n", "        ", "thresh", "=", "threshold_ov", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fpr_ov", "-", "fpr", ")", ")", ")", "]", "\n", "fnr", "=", "1", "-", "tpr_ov", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fpr_ov", "-", "fpr", ")", ")", ")", "]", "\n", "fpr_g0", ",", "fnr_g0", "=", "compute_fpr_fnr", "(", "sim_g0", ",", "labels_g0", ",", "thresh", ")", "\n", "fpr_g1", ",", "fnr_g1", "=", "compute_fpr_fnr", "(", "sim_g1", ",", "labels_g1", ",", "thresh", ")", "\n", "fdr", "=", "compute_fdr", "(", "(", "fpr_g0", ",", "fpr_g1", ")", ",", "(", "fnr_g0", ",", "fnr_g1", ")", ",", "float", "(", "omega", ")", ")", "\n", "fdrs", ".", "append", "(", "np", ".", "round", "(", "fdr", "*", "100", ",", "2", ")", ")", "\n", "fnrs", ".", "append", "(", "np", ".", "round", "(", "fnr", "*", "100", ",", "2", ")", ")", "\n", "", "auFDR", "=", "auc", "(", "[", "x", "*", "100", "for", "x", "in", "fprs", "]", ",", "fdrs", ")", "\n", "auFDR_10", "=", "auc", "(", "[", "x", "*", "100", "for", "x", "in", "fprs", "[", "0", ":", "10", "]", "]", ",", "fdrs", "[", "0", ":", "10", "]", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "zip", "(", "fprs", ",", "fdrs", ",", "fnrs", ")", ",", "columns", "=", "[", "'fpr'", ",", "'fdr'", ",", "'fnr'", "]", ")", "\n", "if", "emb_FLAG", ":", "\n", "        ", "print", "(", "\"Alpha = {} auFDR auFDR_10\"", ".", "format", "(", "omega", ")", ")", "\n", "print", "(", "\"Embeddings: {} {}\\n\"", ".", "format", "(", "auFDR", ",", "auFDR_10", ")", ")", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "score_dir", ",", "'fdr_at_fpr_gender_omega_{}.csv'", ".", "format", "(", "omega", ")", ")", ",", "index", "=", "None", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Alpha = {} auFDR auFDR_10\"", ".", "format", "(", "omega", ")", ")", "\n", "print", "(", "\"xvectors: {} {}\\n\"", ".", "format", "(", "auFDR", ",", "auFDR_10", ")", ")", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "score_dir", ",", "'fdr_at_fpr_gender_omega_{}.csv'", ".", "format", "(", "omega", ")", ")", ",", "index", "=", "None", ")", "\n", "", "return", "auFDR", ",", "auFDR_10", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.main": [[94, 231], ["os.path.join", "pandas.read_csv", "pandas.to_numeric", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "numpy.load", "numpy.load", "enumerate", "print", "print", "sklearn.metrics.roc_curve", "pandas.DataFrame", "pd.DataFrame.to_csv", "pdb.set_trace", "os.path.exists", "df_m.to_csv", "os.path.exists", "df_f.to_csv", "os.path.exists", "df_m_m.to_csv", "os.path.exists", "df_f_f.to_csv", "os.path.join", "os.path.join", "numpy.load", "enumerate", "os.path.exists", "os.path.exists", "os.path.exists", "numpy.load", "numpy.load", "sklearn.metrics.roc_curve", "print", "evaluate_FDR.compute_scores", "numpy.save", "numpy.save", "print", "evaluate_FDR.compute_scores", "evaluate_FDR.compute_scores", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print", "print", "print", "print", "evaluate_FDR.compute_auFDR", "aus.append", "au10s.append", "zip", "os.path.join", "sklearn.metrics.roc_curve", "pandas.DataFrame", "pd.DataFrame.to_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.load", "sklearn.metrics.roc_curve", "os.path.join", "os.path.join", "evaluate_FDR.compute_scores", "numpy.save", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "sim_e1.append", "labels.append", "print", "evaluate_FDR.compute_scores", "evaluate_FDR.compute_scores", "numpy.save", "numpy.save", "print", "print", "print", "evaluate_FDR.compute_auFDR", "aus.append", "au10s.append", "zip", "os.path.join", "numpy.nanargmin", "numpy.nanargmin", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.round", "numpy.round", "numpy.round", "numpy.load", "numpy.load", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "sim_xvec.append", "numpy.absolute", "numpy.absolute", "numpy.nanargmin", "numpy.nanargmin", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.round", "numpy.round", "numpy.round", "numpy.load", "numpy.absolute", "numpy.absolute", "os.path.join"], "function", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_scores", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_scores", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_scores", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_auFDR", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_scores", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_scores", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_scores", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.evaluate.evaluate_FDR.compute_auFDR"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "xvec_FLAG", "=", "args", ".", "eval_xvector", "\n", "\n", "# Creating necessary trials for gender-specific evaluations   ", "\n", "trial_dir", "=", "args", ".", "trials_root", "\n", "trials", "=", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "'Test-Combined.csv'", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "trials", ")", "\n", "df", "[", "'label'", "]", "=", "pd", ".", "to_numeric", "(", "df", "[", "'label'", "]", ")", "\n", "\n", "df_m", "=", "df", ".", "loc", "[", "df", "[", "\"gender_1\"", "]", "==", "'male'", "]", "\n", "df_f", "=", "df", ".", "loc", "[", "df", "[", "\"gender_1\"", "]", "==", "'female'", "]", "\n", "df_m_m", "=", "df_m", ".", "loc", "[", "df_m", "[", "\"gender_2\"", "]", "==", "'male'", "]", "\n", "df_f_f", "=", "df_f", ".", "loc", "[", "df_f", "[", "\"gender_2\"", "]", "==", "'female'", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "'Test-male-all.csv'", ")", ")", ":", "\n", "        ", "df_m", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "'Test-male-all.csv'", ")", ",", "index", "=", "None", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "'Test-female-all.csv'", ")", ")", ":", "\n", "        ", "df_f", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "'Test-female-all.csv'", ")", ",", "index", "=", "None", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "'Test-male-male.csv'", ")", ")", ":", "\n", "        ", "df_m_m", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "'Test-male-male.csv'", ")", ",", "index", "=", "None", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "'Test-female-female.csv'", ")", ")", ":", "\n", "        ", "df_f_f", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "trial_dir", ",", "'Test-female-female.csv'", ")", ",", "index", "=", "None", ")", "\n", "\n", "# Create directories to save ASV scores", "\n", "", "scores_dir_base", "=", "args", ".", "scores_root", "\n", "scores_dir_xvec", "=", "os", ".", "path", ".", "join", "(", "scores_dir_base", ",", "'baseline'", ")", "\n", "scores_dir", "=", "os", ".", "path", ".", "join", "(", "scores_dir_base", ",", "'{}'", ".", "format", "(", "args", ".", "mode", ")", ")", "\n", "os", ".", "makedirs", "(", "scores_dir_xvec", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "scores_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Load extracted embeddings and xvectors", "\n", "test_utts", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'test_utts.npy'", ")", ")", "\n", "\n", "pred_dir", "=", "args", ".", "pred_root", "\n", "e1", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'emb1.npy'", ")", ")", "\n", "for", "idx", ",", "utt", "in", "enumerate", "(", "test_utts", ")", ":", "\n", "        ", "emb_map", "[", "utt", "]", "=", "e1", "[", "idx", ",", ":", "]", "\n", "", "if", "xvec_FLAG", ":", "\n", "        ", "xvec", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'test_data.npy'", ")", ")", "\n", "for", "idx", ",", "utt", "in", "enumerate", "(", "test_utts", ")", ":", "\n", "            ", "xvec_map", "[", "utt", "]", "=", "xvec", "[", "idx", ",", ":", "]", "\n", "\n", "\n", "# Gender-agnostic scoring", "\n", "", "", "print", "(", "\"Computing Gender-agnostic scores\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'sim_xvec_overall.npy'", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "scores_dir", ",", "'sim_e1_overall.npy'", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'labels_overall.npy'", ")", ")", ":", "\n", "        ", "sim_e1_ov", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "scores_dir", ",", "'sim_e1_overall.npy'", ")", ")", "\n", "labels_ov", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'labels_overall.npy'", ")", ")", "\n", "fpr", ",", "tpr", ",", "threshold", "=", "roc_curve", "(", "labels_ov", ",", "sim_e1_ov", ")", "\n", "fnr", "=", "1", "-", "tpr", "\n", "eer_threshold_e1_ov", "=", "threshold", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "eer_e1_ov", "=", "fpr", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "\n", "if", "xvec_FLAG", ":", "\n", "            ", "sim_xvec_ov", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'sim_xvec_overall.npy'", ")", ")", "\n", "fpr", ",", "tpr", ",", "threshold", "=", "roc_curve", "(", "labels_ov", ",", "sim_xvec_ov", ")", "\n", "fnr", "=", "1", "-", "tpr", "\n", "eer_threshold_xvec_ov", "=", "threshold", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "eer_xvec_ov", "=", "fpr", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "", "print", "(", "\"Done scoring Gender-agnostic trials\"", ")", "\n", "", "else", ":", "\n", "        ", "sim_e1_ov", ",", "labels_ov", ",", "eer_e1_ov", ",", "eer_threshold_e1_ov", "=", "compute_scores", "(", "df", ",", "agnostic_FLAG", "=", "True", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scores_dir", ",", "'sim_e1_overall'", ")", ",", "sim_e1_ov", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'labels_overall'", ")", ",", "labels_ov", ")", "\n", "if", "xvec_FLAG", ":", "\n", "            ", "sim_xvec_ov", ",", "labels_xvec_ov", ",", "eer_xvec_ov", ",", "eer_threshold_xvec_ov", "=", "compute_scores", "(", "df", ",", "agnostic_FLAG", "=", "True", ",", "emb_FLAG", "=", "False", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'sim_xvec_overall'", ")", ",", "sim_xvec_ov", ")", "\n", "", "print", "(", "\"Done scoring Gender-agnostic trials\"", ")", "\n", "\n", "#Gender-specific scoring", "\n", "", "print", "(", "\"Computing Gender-specific scores\"", ")", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "scores_dir", ",", "'sim_e1_male_male.npy'", ")", ")", ")", "or", "(", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "scores_dir", ",", "'sim_e1_female_female.npy'", ")", ")", ")", ":", "\n", "        ", "sim_e1_m", ",", "labels_e1_m", ",", "eer_e1_m", ",", "fpr_e1_m", ",", "fnr_e1_m", "=", "compute_scores", "(", "df_m_m", ",", "eer_threshold_e1_ov", ")", "\n", "sim_e1_f", ",", "labels_e1_f", ",", "eer_e1_f", ",", "fpr_e1_f", ",", "fnr_e1_f", "=", "compute_scores", "(", "df_f_f", ",", "eer_threshold_e1_ov", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scores_dir", ",", "'sim_e1_male_male'", ")", ",", "sim_e1_m", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scores_dir", ",", "'sim_e1_female_female'", ")", ",", "sim_e1_f", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'labels_male_male'", ")", ",", "labels_e1_m", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'labels_female_female'", ")", ",", "labels_e1_f", ")", "\n", "\n", "print", "(", "\"EER_all EER_Male EER_Female\"", ")", "\n", "print", "(", "\"Embeddings: {} {} {}\\n\"", ".", "format", "(", "np", ".", "round", "(", "eer_e1_ov", "*", "100", ",", "2", ")", ",", "np", ".", "round", "(", "eer_e1_m", "*", "100", ",", "2", ")", ",", "np", ".", "round", "(", "eer_e1_f", "*", "100", ",", "2", ")", ")", ")", "\n", "\n", "sim_e1_g0", "=", "sim_e1_m", "\n", "sim_e1_g1", "=", "sim_e1_f", "\n", "labels_g0", "=", "labels_e1_m", "\n", "labels_g1", "=", "labels_e1_f", "\n", "print", "(", "\"Done scoring Gender-specific trials\"", ")", "\n", "", "else", ":", "\n", "        ", "sim_e1", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "group", "in", "groups", ":", "\n", "            ", "sim_e1", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "scores_dir", ",", "'sim_e1_{}.npy'", ".", "format", "(", "group", ")", ")", ")", ")", "\n", "labels", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'labels_{}.npy'", ".", "format", "(", "group", ")", ")", ")", ")", "\n", "", "sim_e1_g0", "=", "sim_e1", "[", "0", "]", "\n", "sim_e1_g1", "=", "sim_e1", "[", "1", "]", "\n", "labels_g0", "=", "labels", "[", "0", "]", "\n", "labels_g1", "=", "labels", "[", "1", "]", "\n", "print", "(", "\"Done scoring Gender-specific trials\"", ")", "\n", "", "if", "xvec_FLAG", ":", "\n", "        ", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'sim_xvec_male_male.npy'", ")", ")", ")", "or", "(", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'sim_xvec_female_female.npy'", ")", ")", ")", ":", "\n", "            ", "print", "(", "\"Computing Gender-specific scores for x-vectors\"", ")", "\n", "sim_xvec_m", ",", "labels_xvec_m", ",", "eer_xvec_m", ",", "fpr_xvec_m", ",", "fnr_xvec_m", "=", "compute_scores", "(", "df_m_m", ",", "eer_threshold_xvec_ov", ",", "emb_FLAG", "=", "False", ")", "\n", "sim_xvec_f", ",", "labels_xvec_f", ",", "eer_xvec_f", ",", "fpr_xvec_f", ",", "fnr_xvec_f", "=", "compute_scores", "(", "df_f_f", ",", "eer_threshold_xvec_ov", ",", "emb_FLAG", "=", "False", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'sim_xvec_male_male'", ")", ",", "sim_xvec_m", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'sim_xvec_female_female'", ")", ",", "sim_xvec_f", ")", "\n", "sim_xvec_g0", "=", "sim_xvec_m", "\n", "sim_xvec_g1", "=", "sim_xvec_f", "\n", "print", "(", "\"x-vector: {} {} {}\\n\"", ".", "format", "(", "np", ".", "round", "(", "eer_xvec_ov", "*", "100", ",", "2", ")", ",", "np", ".", "round", "(", "eer_xvec_m", "*", "100", ",", "2", ")", ",", "np", ".", "round", "(", "eer_xvec_f", "*", "100", ",", "2", ")", ")", ")", "\n", "print", "(", "\"Done scoring Gender-specific trials for x-vectors\"", ")", "\n", "", "else", ":", "\n", "            ", "sim_xvec", "=", "[", "]", "\n", "for", "group", "in", "groups", ":", "\n", "                ", "sim_xvec", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'sim_xvec_{}.npy'", ".", "format", "(", "group", ")", ")", ")", ")", "\n", "", "sim_xvec_g0", "=", "sim_xvec", "[", "0", "]", "\n", "sim_xvec_g1", "=", "sim_xvec", "[", "1", "]", "\n", "print", "(", "\"Done scoring Gender-specific trials for x-vectors\"", ")", "\n", "\n", "# Compute area under FDR-FPR curve", "\n", "", "", "fpr_ov", ",", "tpr_ov", ",", "threshold_ov", "=", "roc_curve", "(", "labels_ov", ",", "sim_e1_ov", ")", "\n", "aus", ",", "au10s", "=", "[", "]", ",", "[", "]", "\n", "for", "omega", "in", "omegas", ":", "\n", "        ", "au", ",", "au10", "=", "compute_auFDR", "(", "fpr_ov", ",", "tpr_ov", ",", "threshold_ov", ",", "sim_e1_g0", ",", "sim_e1_g1", ",", "labels_g0", ",", "labels_g1", ",", "scores_dir", ",", "emb_FLAG", "=", "True", ",", "omega", "=", "omega", ")", "\n", "aus", ".", "append", "(", "au", ")", "\n", "au10s", ".", "append", "(", "au10", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "zip", "(", "omegas", ",", "aus", ",", "au10s", ")", ",", "columns", "=", "[", "'omega'", ",", "'au'", ",", "'au10'", "]", ")", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "scores_dir", ",", "'au_fdrs.csv'", ")", ",", "index", "=", "None", ")", "\n", "\n", "if", "xvec_FLAG", ":", "\n", "        ", "fpr_ov", ",", "tpr_ov", ",", "threshold_ov", "=", "roc_curve", "(", "labels_ov", ",", "sim_xvec_ov", ")", "\n", "aus", ",", "aus10", "=", "[", "]", ",", "[", "]", "\n", "for", "omega", "in", "omegas", ":", "\n", "            ", "compute_auFDR", "(", "fpr_ov", ",", "tpr_ov", ",", "threshold_ov", ",", "sim_xvec_g0", ",", "sim_xvec_g1", ",", "labels_g0", ",", "labels_g1", ",", "scores_dir_xvec", ",", "emb_FLAG", "=", "False", ",", "omega", "=", "omega", ")", "\n", "aus", ".", "append", "(", "au", ")", "\n", "au10s", ".", "append", "(", "au10", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "zip", "(", "omegas", ",", "aus", ",", "au10s", ")", ",", "columns", "=", "[", "'omega'", ",", "'au'", ",", "'au10'", "]", ")", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "scores_dir_xvec", ",", "'aufdrs.csv'", ")", ",", "index", "=", "None", ")", "\n", "", "pdb", ".", "set_trace", "(", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.__init__": [[19, 111], ["torch.utils.tensorboard.SummaryWriter", "os.path.join", "get_device", "model.to", "int", "int", "float", "float", "train_config.getboolean", "torch.optim.Adam", "list", "torch.optim.Adam", "train_config.getboolean", "torch.nn.CrossEntropyLoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "int", "float", "float", "train_config.getint", "train_config.getint", "list", "trainer.Trainer.model.pred_final.parameters", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "list", "trainer.Trainer.model.emb1_layer.parameters", "list", "train_config.getfloat", "train_config.getfloat", "train_config.getfloat", "list", "list", "list", "list", "list", "trainer.Trainer.model.pred_fc2.parameters", "list", "trainer.Trainer.model.dec_fc3.parameters", "trainer.Trainer.model.dis_1to2.parameters", "trainer.Trainer.model.dis_2to1.parameters", "trainer.Trainer.model.pred_bias_fc1.parameters", "trainer.Trainer.model.pred_bias_final.parameters", "train_config.getfloat", "train_config.getfloat", "train_config.getfloat", "train_config.getfloat", "train_config.getfloat", "train_config.getfloat", "list", "list", "trainer.Trainer.model.pred_fc1.parameters", "list", "list", "trainer.Trainer.model.dec_fc2.parameters", "trainer.Trainer.model.enc_fc1.parameters", "trainer.Trainer.model.enc_fc2.parameters", "trainer.Trainer.model.emb2_layer.parameters", "trainer.Trainer.model.dec_fc1.parameters"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.get_device"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "train_config", ",", "loss_config", ",", "model_config", ",", "log_dir", ",", "model_dir", ",", "out_dir", ",", "model_spk_embed", "=", "None", ")", ":", "\n", "# model refers to the uai model after speaker embeddings", "\n", "\n", "        ", "self", ".", "mode", "=", "'train'", "# 'val'", "\n", "\n", "self", ".", "ep_idx", "=", "0", "\n", "self", ".", "pre_trained", "=", "False", "\n", "self", ".", "idx", "=", "0", "\n", "self", ".", "train_size", "=", "0", "\n", "self", ".", "val_size", "=", "0", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "\n", "self", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'output.log'", ")", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "out_dir", "=", "out_dir", "\n", "self", ".", "device", "=", "get_device", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "train_mode", "=", "train_config", "[", "'mode'", "]", "\n", "if", "train_config", "[", "'batch_size'", "]", "==", "'None'", ":", "\n", "            ", "self", ".", "batch_size", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_size", "=", "int", "(", "train_config", "[", "'batch_size'", "]", ")", "\n", "", "self", ".", "num_epochs", "=", "int", "(", "train_config", "[", "'num_epochs'", "]", ")", "\n", "self", ".", "num_sec_updates", "=", "int", "(", "train_config", "[", "'num_sec_updates'", "]", ")", "\n", "self", ".", "weight_pred", "=", "float", "(", "loss_config", "[", "'weight_pred'", "]", ")", "\n", "self", ".", "weight_recon", "=", "float", "(", "loss_config", "[", "'weight_recon'", "]", ")", "\n", "if", "self", ".", "train_mode", "!=", "'UAI'", "and", "self", ".", "train_mode", "!=", "'NLDR'", ":", "\n", "            ", "self", ".", "weight_bias", "=", "float", "(", "loss_config", "[", "'weight_bias'", "]", ")", "\n", "", "if", "self", ".", "train_mode", "!=", "'NLDR'", ":", "\n", "            ", "self", ".", "weight_secondary", "=", "float", "(", "loss_config", "[", "'weight_secondary'", "]", ")", "\n", "\n", "", "self", ".", "save_val_embeddings_FLAG", "=", "train_config", ".", "getboolean", "(", "'save_val_embeddings_FLAG'", ")", "\n", "\n", "self", ".", "sec_update", "=", "False", "\n", "self", ".", "train_gen_params", "=", "{", "\n", "'batch_size'", ":", "self", ".", "batch_size", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "train_config", ".", "getint", "(", "'num_workers_train'", ")", ",", "\n", "'worker_init_fn'", ":", "worker_init_fn", ",", "\n", "'pin_memory'", ":", "True", "\n", "}", "\n", "self", ".", "val_gen_params", "=", "{", "\n", "'batch_size'", ":", "self", ".", "batch_size", ",", "\n", "'shuffle'", ":", "False", ",", "\n", "'num_workers'", ":", "train_config", ".", "getint", "(", "'num_workers_val'", ")", ",", "\n", "'worker_init_fn'", ":", "worker_init_fn", ",", "\n", "'pin_memory'", ":", "False", "\n", "}", "\n", "if", "self", ".", "batch_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "train_gen_params", "[", "'drop_last'", "]", "=", "True", "\n", "self", ".", "val_gen_params", "[", "'drop_last'", "]", "=", "True", "\n", "\n", "#params = self.model.parameters()  # All model parameters", "\n", "# Primary branch parameters", "\n", "", "params_prim", "=", "list", "(", "self", ".", "model", ".", "enc_fc1", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "model", ".", "enc_fc2", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "model", ".", "pred_fc1", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "model", ".", "pred_fc2", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "model", ".", "emb1_layer", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'AT'", "and", "self", ".", "train_mode", "!=", "'MTL'", ":", "\n", "            ", "params_prim", "+=", "list", "(", "self", ".", "model", ".", "emb2_layer", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "model", ".", "dec_fc1", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "model", ".", "dec_fc2", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "model", ".", "dec_fc3", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params_prim", ",", "lr", "=", "train_config", ".", "getfloat", "(", "'prim_lr'", ")", ",", "weight_decay", "=", "train_config", ".", "getfloat", "(", "'prim_decay'", ")", ")", "\n", "\n", "params_pred_final", "=", "list", "(", "self", ".", "model", ".", "pred_final", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_pred_final", "=", "optim", ".", "Adam", "(", "params_pred_final", ",", "lr", "=", "1e-3", ",", "weight_decay", "=", "train_config", ".", "getfloat", "(", "'prim_decay'", ")", ")", "\n", "\n", "# Also create an optimizer for disentangler and bias predictor only updates", "\n", "params_sec", "=", "[", "]", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'AT'", "and", "self", ".", "train_mode", "!=", "'MTL'", ":", "\n", "            ", "params_sec", "+=", "list", "(", "self", ".", "model", ".", "dis_1to2", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "model", ".", "dis_2to1", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "            ", "params_sec", "+=", "list", "(", "self", ".", "model", ".", "pred_bias_fc1", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "model", ".", "pred_bias_final", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "train_mode", "!=", "'NLDR'", ":", "\n", "            ", "self", ".", "optimizer_secondary", "=", "optim", ".", "Adam", "(", "params_sec", ",", "lr", "=", "train_config", ".", "getfloat", "(", "'sec_lr'", ")", ",", "weight_decay", "=", "train_config", ".", "getfloat", "(", "'sec_decay'", ")", ")", "\n", "\n", "", "self", ".", "lr_decay_FLAG", "=", "train_config", ".", "getboolean", "(", "'lr_decay_FLAG'", ")", "\n", "if", "self", ".", "lr_decay_FLAG", ":", "\n", "            ", "self", ".", "scheduler", "=", "StepLR", "(", "self", ".", "optimizer", ",", "step_size", "=", "train_config", ".", "getfloat", "(", "'lr_scheduler_step'", ")", ",", "gamma", "=", "train_config", ".", "getfloat", "(", "'lr_scheduler_gamma'", ")", ")", "# halve the learning rate every 10 epochs", "\n", "self", ".", "scheduler_secondary", "=", "StepLR", "(", "self", ".", "optimizer_secondary", ",", "step_size", "=", "train_config", ".", "getfloat", "(", "'lr_scheduler_step'", ")", ",", "gamma", "=", "train_config", ".", "getfloat", "(", "'lr_scheduler_gamma'", ")", ")", "# halve the learning rate every 10 epochs", "\n", "\n", "# Loss functions to be optimized", "\n", "", "self", ".", "criterion_pred", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "criterion_recon", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "criterion_dis", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "criterion_bias", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.train_model": [[112, 342], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "range", "print", "sys.exit", "print", "trainer.Trainer.model.train", "time.time", "enumerate", "compute_spk_accuracy", "trainer.Trainer.write_acc", "print", "trainer.Trainer.model.eval", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "collections.Counter", "list", "compute_spk_accuracy", "compute_spk_accuracy", "compute_spk_accuracy", "trainer.Trainer.write_acc", "collections.defaultdict", "collections.defaultdict", "numpy.unique", "sklearn.metrics.pairwise_distances", "numpy.mean", "collections.defaultdict.keys", "numpy.mean", "trainer.Trainer.write_distances", "tqdm.tqdm.tqdm", "batch_data.type().to.type().to.type().to", "spk_labels.to.to.to", "trainer.Trainer.forward_pass_prim", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.optimizer_pred_final.zero_grad", "numpy.array.append", "numpy.array.append", "compute_spk_accuracy", "tqdm.tqdm.tqdm", "batch_data.type().to.type().to.type().to", "spk_labels.to.to.to", "trainer.Trainer.forward_pass_prim", "numpy.array.append", "numpy.array.append", "numpy.array", "numpy.array", "collections.Counter.keys", "compute_spk_accuracy", "numpy.mean", "numpy.array", "numpy.min", "numpy.mean.append", "os.path.join", "trainer.Trainer.save_model", "print", "print", "trainer.Trainer.write_log", "trainer.Trainer.write_log", "bias_labels.to.to.to", "trainer.Trainer.optimizer_secondary.zero_grad", "loss_prim.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.optimizer_pred_final.step", "spk_labels.to.to.data.cpu().numpy().tolist", "torch.argmax().data.cpu().numpy().tolist", "numpy.array.append", "numpy.array.append", "trainer.Trainer.scheduler.step", "trainer.Trainer.scheduler_secondary.step", "bias_labels.to.to.to", "spk_labels.to.to.data.cpu().numpy().tolist", "torch.argmax().data.cpu().numpy().tolist", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.array.append", "numpy.array.append", "range", "range", "numpy.where", "list", "numpy.median", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "os.path.exists", "os.remove", "batch_data.type().to.type().to.type", "loss_overall.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.optimizer_pred_final.step", "trainer.Trainer.backward", "trainer.Trainer.optimizer_secondary.step", "bias_labels.to.to.data.cpu().numpy().tolist", "torch.argmax().data.cpu().numpy().tolist", "batch_data.type().to.type().to.type", "trainer.Trainer.forward_pass_secondary", "trainer.Trainer.forward_pass_secondary", "bias_labels.to.to.data.cpu().numpy().tolist", "torch.argmax().data.cpu().numpy().tolist", "x_inp.data.cpu().numpy().tolist", "e1.data.cpu().numpy().tolist", "e2.data.cpu().numpy().tolist", "numpy.min", "collections.defaultdict.values", "sklearn.metrics.pairwise_distances", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.save", "open", "o.write", "os.path.join", "os.path.join", "trainer.Trainer.forward_pass_secondary", "trainer.Trainer.forward_pass_secondary", "trainer.Trainer.forward_pass_secondary", "trainer.Trainer.forward_pass_secondary", "spk_labels.to.to.data.cpu().numpy", "torch.argmax().data.cpu().numpy", "spk_labels.to.to.data.cpu().numpy", "torch.argmax().data.cpu().numpy", "list", "mean_e1[].reshape", "os.path.join", "os.path.join", "bias_labels.to.to.data.cpu().numpy", "torch.argmax().data.cpu().numpy", "bias_labels.to.to.data.cpu().numpy", "torch.argmax().data.cpu().numpy", "x_inp.data.cpu().numpy", "e1.data.cpu().numpy", "e2.data.cpu().numpy", "collections.Counter.values", "spk_labels.to.to.data.cpu", "torch.argmax().data.cpu", "spk_labels.to.to.data.cpu", "torch.argmax().data.cpu", "bias_labels.to.to.data.cpu", "torch.argmax().data.cpu", "bias_labels.to.to.data.cpu", "torch.argmax().data.cpu", "x_inp.data.cpu", "e1.data.cpu", "e2.data.cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.compute_spk_accuracy", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_acc", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.compute_spk_accuracy", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.compute_spk_accuracy", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.compute_spk_accuracy", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_acc", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_distances", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_prim", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.compute_spk_accuracy", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_prim", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.utils.basic_utils.compute_spk_accuracy", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.save_model", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_log", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_log", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_secondary", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_secondary", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_secondary", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_secondary", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_secondary", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_secondary"], ["", "def", "train_model", "(", "self", ",", "train_data", ",", "val_data", ")", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "train_data", ",", "**", "self", ".", "train_gen_params", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_data", ",", "**", "self", ".", "val_gen_params", ")", "\n", "\n", "self", ".", "train_size", "=", "len", "(", "train_loader", ")", "\n", "self", ".", "val_size", "=", "len", "(", "val_loader", ")", "\n", "val_acc_best", "=", "0.0", "\n", "if", "self", ".", "ep_idx", ">=", "self", ".", "num_epochs", "-", "1", ":", "\n", "            ", "print", "(", "\"Already trained for {} epochs. Exiting\"", ".", "format", "(", "self", ".", "num_epochs", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "best_ep", "=", "self", ".", "ep_idx", "\n", "if", "self", ".", "pre_trained", ":", "\n", "            ", "self", ".", "ep_idx", "+=", "1", "\n", "", "for", "e", "in", "range", "(", "self", ".", "ep_idx", ",", "self", ".", "num_epochs", ")", ":", "\n", "# Training", "\n", "            ", "print", "(", "\"Training. Epoch {}\"", ".", "format", "(", "e", ")", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "ep_idx", "=", "e", "\n", "true_spk_labels", "=", "[", "]", "\n", "true_bias_labels", "=", "[", "]", "\n", "pred_spk_labels", "=", "[", "]", "\n", "pred_bias_labels", "=", "[", "]", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "                ", "self", ".", "idx", "=", "batch_idx", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                    ", "batch_data", ",", "spk_labels", ",", "bias_labels", "=", "batch", "\n", "bias_labels", "=", "bias_labels", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "batch_data", ",", "spk_labels", "=", "batch", "\n", "", "batch_data", "=", "batch_data", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "spk_labels", "=", "spk_labels", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Forward pass and loss computation of primary model", "\n", "loss_prim", ",", "y_hat", ",", "x_hat", ",", "e1", ",", "e2", ",", "x_inp", "=", "self", ".", "forward_pass_prim", "(", "batch_data", ",", "spk_labels", ")", "\n", "\n", "# Model updates", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_pred_final", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", ":", "\n", "                    ", "self", ".", "optimizer_secondary", ".", "zero_grad", "(", ")", "\n", "", "if", "self", ".", "train_mode", "==", "'NLDR'", ":", "# Only in the case of NLDR, the secondary model is not required", "\n", "                    ", "loss_prim", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer_pred_final", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "if", "batch_idx", "%", "(", "self", ".", "num_sec_updates", "+", "1", ")", "==", "0", ":", "\n", "# Update the primary model. Note that the loss computation involves primary and secondary model", "\n", "# However, only the weights corresponding to modules in primary model are updated", "\n", "                        ", "self", ".", "sec_update", "=", "False", "\n", "# Forward pass and loss computation of secondary model", "\n", "if", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                            ", "loss_secondary", ",", "b_hat", "=", "self", ".", "forward_pass_secondary", "(", "e1", ",", "e2", ",", "bias_labels", ",", "self", ".", "sec_update", ")", "\n", "", "else", ":", "\n", "                            ", "loss_secondary", "=", "self", ".", "forward_pass_secondary", "(", "e1", ",", "e2", ",", "self", ".", "sec_update", ")", "\n", "\n", "", "loss_overall", "=", "loss_prim", "+", "self", ".", "weight_secondary", "*", "loss_secondary", "\n", "loss_overall", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "# Update only the encoder, predictor and decoder", "\n", "self", ".", "optimizer_pred_final", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "# Note that the loss computation involves only secondary branch", "\n", "# And only the weights corresponding to modules in secondary branch are updated", "\n", "                        ", "self", ".", "sec_update", "=", "True", "\n", "\n", "# Forward pass and loss computation of secondary model", "\n", "if", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                            ", "loss_secondary", ",", "b_hat", "=", "self", ".", "forward_pass_secondary", "(", "e1", ",", "e2", ",", "bias_labels", ",", "self", ".", "sec_update", ")", "\n", "", "else", ":", "\n", "                            ", "loss_secondary", "=", "self", ".", "forward_pass_secondary", "(", "e1", ",", "e2", ",", "self", ".", "sec_update", ")", "\n", "\n", "# Update only secondary branch", "\n", "", "loss_secondary", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_secondary", ".", "step", "(", ")", "# Update only the disentanglers and bias discriminator", "\n", "", "", "true_spk_labels", ".", "append", "(", "spk_labels", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "pred_spk_labels", ".", "append", "(", "torch", ".", "argmax", "(", "y_hat", ",", "axis", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                    ", "true_bias_labels", ".", "append", "(", "bias_labels", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "pred_bias_labels", ".", "append", "(", "torch", ".", "argmax", "(", "b_hat", ",", "axis", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "", "true_spk_labels", "=", "[", "x", "for", "y", "in", "true_spk_labels", "for", "x", "in", "y", "]", "\n", "pred_spk_labels", "=", "[", "x", "for", "y", "in", "pred_spk_labels", "for", "x", "in", "y", "]", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                ", "pred_bias_labels", "=", "[", "x", "for", "y", "in", "pred_bias_labels", "for", "x", "in", "y", "]", "\n", "true_bias_labels", "=", "[", "x", "for", "y", "in", "true_bias_labels", "for", "x", "in", "y", "]", "\n", "train_acc_bias", "=", "compute_spk_accuracy", "(", "true_bias_labels", ",", "pred_bias_labels", ")", "\n", "", "else", ":", "\n", "                ", "train_acc_bias", "=", "None", "\n", "", "train_acc", "=", "compute_spk_accuracy", "(", "true_spk_labels", ",", "pred_spk_labels", ")", "\n", "self", ".", "write_acc", "(", "train_acc", ",", "train_acc_bias", ")", "# For tensorboard", "\n", "\n", "# Learning rate scheduler step", "\n", "if", "self", ".", "lr_decay_FLAG", ":", "\n", "                ", "if", "self", ".", "ep_idx", "<", "50", ":", "\n", "                    ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "scheduler_secondary", ".", "step", "(", ")", "\n", "\n", "# Validation", "\n", "", "", "print", "(", "\"Validating\"", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "mode", "=", "'val'", "\n", "true_spk_labels", "=", "[", "]", "\n", "true_bias_labels", "=", "[", "]", "\n", "pred_spk_labels", "=", "[", "]", "\n", "pred_bias_labels", "=", "[", "]", "\n", "if", "self", ".", "save_val_embeddings_FLAG", ":", "\n", "                ", "val_inp", "=", "[", "]", "\n", "val_e1", "=", "[", "]", "\n", "val_e2", "=", "[", "]", "\n", "val_x", "=", "[", "]", "\n", "", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "val_loader", ")", ")", ":", "\n", "                ", "self", ".", "idx", "=", "batch_idx", "\n", "#if batch_idx % 100 == 0:", "\n", "#    print(\"{}/{}\".format(batch_idx, len(val_loader)))", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                    ", "batch_data", ",", "spk_labels", ",", "bias_labels", "=", "batch", "\n", "bias_labels", "=", "bias_labels", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "batch_data", ",", "spk_labels", "=", "batch", "\n", "", "batch_data", "=", "batch_data", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "spk_labels", "=", "spk_labels", ".", "to", "(", "self", ".", "device", ")", "\n", "# Forward pass and loss computation of primary model", "\n", "loss_prim", ",", "y_hat", ",", "x_hat", ",", "e1", ",", "e2", ",", "x_inp", "=", "self", ".", "forward_pass_prim", "(", "batch_data", ",", "spk_labels", ")", "\n", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", ":", "# For NLDR, secondary loss doesn't exist", "\n", "# Forward pass and loss computation of secondary model", "\n", "                    ", "if", "self", ".", "train_mode", "!=", "'UAI'", ":", "# i.e. if it is UAI-AT, UAI-MTL, AT or MTL", "\n", "                        ", "loss_secondary", ",", "b_hat", "=", "self", ".", "forward_pass_secondary", "(", "e1", ",", "e2", ",", "bias_labels", ")", "\n", "", "else", ":", "\n", "                        ", "loss_secondary", "=", "self", ".", "forward_pass_secondary", "(", "e1", ",", "e2", ")", "\n", "\n", "", "", "true_spk_labels", ".", "append", "(", "spk_labels", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "pred_spk_labels", ".", "append", "(", "torch", ".", "argmax", "(", "y_hat", ",", "axis", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                    ", "true_bias_labels", ".", "append", "(", "bias_labels", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "pred_bias_labels", ".", "append", "(", "torch", ".", "argmax", "(", "b_hat", ",", "axis", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "if", "self", ".", "save_val_embeddings_FLAG", ":", "\n", "                    ", "val_inp", ".", "append", "(", "x_inp", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "val_e1", ".", "append", "(", "e1", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "val_e2", ".", "append", "(", "e2", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "val_inp", "=", "np", ".", "array", "(", "[", "x", "for", "y", "in", "val_inp", "for", "x", "in", "y", "]", ",", "dtype", "=", "float", ")", "\n", "val_e1", "=", "np", ".", "array", "(", "[", "x", "for", "y", "in", "val_e1", "for", "x", "in", "y", "]", ",", "dtype", "=", "float", ")", "\n", "val_e2", "=", "np", ".", "array", "(", "[", "x", "for", "y", "in", "val_e2", "for", "x", "in", "y", "]", ",", "dtype", "=", "float", ")", "\n", "\n", "true_spk_labels", "=", "np", ".", "array", "(", "[", "x", "for", "y", "in", "true_spk_labels", "for", "x", "in", "y", "]", ")", "\n", "pred_spk_labels", "=", "np", ".", "array", "(", "[", "x", "for", "y", "in", "pred_spk_labels", "for", "x", "in", "y", "]", ")", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                ", "pred_bias_labels", "=", "np", ".", "array", "(", "[", "x", "for", "y", "in", "pred_bias_labels", "for", "x", "in", "y", "]", ")", "\n", "true_bias_labels", "=", "np", ".", "array", "(", "[", "x", "for", "y", "in", "true_bias_labels", "for", "x", "in", "y", "]", ")", "\n", "# Compute accuracy of minority speakers (Speakers with only one sample)", "\n", "", "counts", "=", "Counter", "(", "true_spk_labels", ")", "\n", "keys", "=", "list", "(", "counts", ".", "keys", "(", ")", ")", "\n", "keys_minority", "=", "[", "k", "for", "k", "in", "keys", "if", "counts", "[", "k", "]", "==", "np", ".", "min", "(", "list", "(", "counts", ".", "values", "(", ")", ")", ")", "]", "\n", "keys_majority", "=", "[", "k", "for", "k", "in", "keys", "if", "counts", "[", "k", "]", ">=", "10", "]", "\n", "\n", "idx_minority", "=", "[", "idx", "for", "idx", "in", "range", "(", "true_spk_labels", ".", "shape", "[", "0", "]", ")", "if", "true_spk_labels", "[", "idx", "]", "in", "keys_minority", "]", "\n", "idx_majority", "=", "[", "idx", "for", "idx", "in", "range", "(", "true_spk_labels", ".", "shape", "[", "0", "]", ")", "if", "true_spk_labels", "[", "idx", "]", "in", "keys_majority", "]", "\n", "\n", "val_acc", "=", "compute_spk_accuracy", "(", "true_spk_labels", ",", "pred_spk_labels", ")", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                ", "val_acc_bias", "=", "compute_spk_accuracy", "(", "true_bias_labels", ",", "pred_bias_labels", ")", "\n", "", "else", ":", "\n", "                ", "val_acc_bias", "=", "None", "\n", "", "val_acc_minority", "=", "compute_spk_accuracy", "(", "true_spk_labels", "[", "idx_minority", "]", ",", "pred_spk_labels", "[", "idx_minority", "]", ")", "\n", "val_acc_majority", "=", "compute_spk_accuracy", "(", "true_spk_labels", "[", "idx_majority", "]", ",", "pred_spk_labels", "[", "idx_majority", "]", ")", "\n", "\n", "self", ".", "write_acc", "(", "val_acc", ",", "val_acc_bias", ",", "val_acc_minority", ",", "val_acc_majority", ")", "# For tensorboard", "\n", "\n", "# Evaluating the clustering of e1 embeddings w.r.t speaker labels", "\n", "speaker_indices", "=", "defaultdict", "(", "list", ")", "\n", "mean_e1", "=", "defaultdict", "(", "list", ")", "\n", "for", "spk", "in", "np", ".", "unique", "(", "true_spk_labels", ")", ":", "\n", "                ", "speaker_indices", "[", "spk", "]", "=", "np", ".", "where", "(", "true_spk_labels", "==", "spk", ")", "[", "0", "]", "\n", "mean_e1", "[", "spk", "]", "=", "np", ".", "mean", "(", "val_e1", "[", "speaker_indices", "[", "spk", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Compute inter-speaker distance, i.e., distance between speaker centroid for every pair of speaker ", "\n", "## The minimum distance for each speaker centroid is computed and mean of this minimum distance is taken over all speakers", "\n", "## This essentially captures the distance to the most closest speaker centroid", "\n", "", "distances", "=", "pairwise_distances", "(", "np", ".", "array", "(", "list", "(", "mean_e1", ".", "values", "(", ")", ")", ")", ")", "\n", "distances", "[", "distances", "==", "0", "]", "=", "1e10", "\n", "inter_spk_dist", "=", "np", ".", "mean", "(", "np", ".", "min", "(", "distances", ",", "axis", "=", "0", ")", ")", "\n", "\n", "# Compute median intra-speaker distance, i.e., the average distance between the centroid and the embeddings for each speaker", "\n", "# And then report the mean over all speakers.", "\n", "# Median is used to be more robust to outliers (due to noise)", "\n", "intra_spk_dist", "=", "[", "]", "\n", "for", "spk", "in", "mean_e1", ".", "keys", "(", ")", ":", "\n", "                ", "intra_spk_dist", ".", "append", "(", "np", ".", "median", "(", "pairwise_distances", "(", "mean_e1", "[", "spk", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "val_e1", "[", "speaker_indices", "[", "spk", "]", ",", ":", "]", ")", ")", ")", "\n", "", "intra_spk_dist", "=", "np", ".", "mean", "(", "intra_spk_dist", ")", "\n", "\n", "self", ".", "write_distances", "(", "intra_spk_dist", ",", "inter_spk_dist", ")", "# For tensorboard", "\n", "if", "self", ".", "save_val_embeddings_FLAG", ":", "\n", "                ", "if", "val_acc", ">", "val_acc_best", ":", "\n", "                    ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "'val_inp'", ")", ",", "val_inp", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "'val_e1'", ")", ",", "val_e1", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "'val_e2'", ")", ",", "val_e2", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "'val_spk_labels'", ")", ",", "true_spk_labels", ")", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "'val_bias_labels'", ")", ",", "true_bias_labels", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "'best_epoch.txt'", ")", ",", "'w'", ")", "as", "o", ":", "\n", "                        ", "o", ".", "write", "(", "\"Best Epoch = {}\"", ".", "format", "(", "e", ")", ")", "\n", "\n", "", "", "", "best_epoch_FLAG", "=", "False", "\n", "if", "val_acc", ">", "val_acc_best", ":", "\n", "                ", "val_acc_best", "=", "val_acc", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'Epoch_{}.pt'", ".", "format", "(", "best_ep", ")", ")", ")", "and", "self", ".", "ep_idx", "%", "50", "!=", "0", ":", "\n", "                    ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'Epoch_{}.pt'", ".", "format", "(", "best_ep", ")", ")", ")", "\n", "", "best_ep", "=", "e", "\n", "best_epoch_FLAG", "=", "True", "\n", "# Save models", "\n", "", "if", "self", ".", "ep_idx", "%", "10", "==", "0", "or", "best_epoch_FLAG", ":", "\n", "                ", "model_ckpt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'Epoch_{}.pt'", ".", "format", "(", "e", ")", ")", "\n", "self", ".", "save_model", "(", "model_ckpt", ")", "\n", "\n", "# Printing metrics", "\n", "", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                ", "print", "(", "\"Epoch:{}, Train accuracy:{}, Val accuracy:{} Train bias accuracy:{} Val bias accuracy:{}\"", ".", "format", "(", "e", ",", "train_acc", ",", "val_acc", ",", "train_acc_bias", ",", "val_acc_bias", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Epoch:{}, Train accuracy:{}, Val accuracy:{}\"", ".", "format", "(", "e", ",", "train_acc", ",", "val_acc", ")", ")", "\n", "\n", "# Logging metrics", "\n", "", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "                ", "self", ".", "write_log", "(", "train_acc", ",", "val_acc", ",", "val_acc_minority", ",", "val_acc_majority", ",", "intra_spk_dist", ",", "inter_spk_dist", ",", "val_acc_bias", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "write_log", "(", "train_acc", ",", "val_acc", ",", "val_acc_minority", ",", "val_acc_majority", ",", "intra_spk_dist", ",", "inter_spk_dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_prim": [[343, 365], ["trainer.Trainer.model.forward_prim", "trainer.Trainer.criterion_pred", "trainer.Trainer.write_loss_prim", "torch.tensor", "trainer.Trainer.criterion_recon", "trainer.Trainer.data.cpu().numpy", "trainer.Trainer.data.cpu().numpy", "loss_prim_overall.data.cpu().numpy", "trainer.Trainer.data.cpu", "trainer.Trainer.data.cpu", "loss_prim_overall.data.cpu"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.forward_prim", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_loss_prim"], ["", "", "", "def", "forward_pass_prim", "(", "self", ",", "batch_data", ",", "spk_labels", ",", "b", "=", "None", ")", ":", "\n", "        ", "'''\n        Performs forward pass of primary model on given batch\n        :return: loss\n        '''", "\n", "spk_embed", "=", "batch_data", "\n", "\n", "y_hat", ",", "x_hat", ",", "e1", ",", "e2", "=", "self", ".", "model", ".", "forward_prim", "(", "spk_embed", ")", "\n", "loss_pred", "=", "self", ".", "criterion_pred", "(", "y_hat", ",", "spk_labels", ")", "\n", "if", "self", ".", "train_mode", "==", "'NLDR'", "or", "self", ".", "train_mode", "==", "'AT'", "or", "self", ".", "train_mode", "==", "'MTL'", ":", "# STL, AT, MTL", "\n", "# Disable the decoder. Reconstrucion loss should not be considered. Only encoder and predictor should be active", "\n", "            ", "loss_recon", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "loss_prim_overall", "=", "self", ".", "weight_pred", "*", "loss_pred", "\n", "", "else", ":", "\n", "            ", "loss_recon", "=", "self", ".", "criterion_recon", "(", "x_hat", ",", "spk_embed", ")", "\n", "loss_prim_overall", "=", "self", ".", "weight_pred", "*", "loss_pred", "+", "self", ".", "weight_recon", "*", "loss_recon", "\n", "\n", "\n", "", "self", ".", "write_loss_prim", "(", "loss_pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss_recon", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "loss_prim_overall", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "loss_prim_overall", ",", "y_hat", ",", "x_hat", ",", "e1", ",", "e2", ",", "spk_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.forward_pass_secondary": [[366, 422], ["trainer.Trainer.model.forward_dis", "trainer.Trainer.model.forward_bias", "trainer.Trainer.write_loss_sec", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_bias", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_dis", "torch.Tensor", "range", "b_rand.type().to.type().to.type().to", "trainer.Trainer.criterion_bias", "trainer.Trainer.criterion_dis().data.cpu().numpy", "trainer.Trainer.criterion_dis().data.cpu().numpy", "trainer.Trainer.write_loss_sec", "trainer.Trainer.write_loss_sec", "numpy.random.choice", "trainer.Trainer.criterion_bias", "trainer.Trainer.criterion_bias().data.cpu().numpy", "trainer.Trainer.criterion_bias().data.cpu().numpy", "trainer.Trainer.criterion_dis().data.cpu().numpy", "trainer.Trainer.criterion_dis().data.cpu().numpy", "trainer.Trainer.criterion_bias().data.cpu().numpy", "b_rand.type().to.type().to.type", "trainer.Trainer.criterion_dis().data.cpu", "trainer.Trainer.criterion_dis().data.cpu", "trainer.Trainer.criterion_bias().data.cpu", "trainer.Trainer.criterion_bias().data.cpu", "trainer.Trainer.criterion_dis().data.cpu", "trainer.Trainer.criterion_dis().data.cpu", "trainer.Trainer.criterion_bias().data.cpu", "torch.rand", "torch.rand", "trainer.Trainer.prob_bias.keys", "trainer.Trainer.prob_bias.keys", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_bias", "trainer.Trainer.criterion_bias", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_bias", "trainer.Trainer.criterion_bias", "trainer.Trainer.criterion_dis", "trainer.Trainer.criterion_dis"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.forward_dis", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.forward_bias", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_loss_sec", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_loss_sec", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_loss_sec"], ["", "def", "forward_pass_secondary", "(", "self", ",", "e1", ",", "e2", ",", "b", "=", "None", ",", "sec_update", "=", "True", ")", ":", "\n", "        ", "'''\n        Does forward pass of disentanglers and\n        computes reconstruction loss of e1->e2 and e2->e1, \n        if applicable computes prediction loss of bias discriminator\n        :return: secondary branch loss\n        '''", "\n", "if", "self", ".", "train_mode", "!=", "'AT'", "and", "self", ".", "train_mode", "!=", "'MTL'", ":", "\n", "            ", "e1_hat", ",", "e2_hat", "=", "self", ".", "model", ".", "forward_dis", "(", "e1", ",", "e2", ")", "\n", "", "if", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "            ", "b_hat", "=", "self", ".", "model", ".", "forward_bias", "(", "e1", ")", "\n", "", "if", "sec_update", ":", "# Secdondary branch update", "\n", "            ", "if", "self", ".", "train_mode", "!=", "'AT'", "and", "self", ".", "train_mode", "!=", "'MTL'", ":", "# i.e. if it is either UAI,UAI-AT or UAI-MTL", "\n", "                ", "loss_dis_1to2", "=", "self", ".", "criterion_dis", "(", "e2_hat", ",", "e2", ")", "\n", "loss_dis_2to1", "=", "self", ".", "criterion_dis", "(", "e1_hat", ",", "e1", ")", "\n", "", "if", "self", ".", "train_mode", "!=", "'UAI'", ":", "# UAI, UAI-AT, UAI-MTL", "\n", "                ", "loss_bias", "=", "self", ".", "criterion_bias", "(", "b_hat", ",", "b", ")", "\n", "", "", "else", ":", "# Primary model update using disentangler and discriminator loss", "\n", "# Make predictions of disentangler close to uniform distribution", "\n", "            ", "if", "self", ".", "train_mode", "!=", "'AT'", "and", "self", ".", "train_mode", "!=", "'MTL'", ":", "\n", "                ", "e1_rand", "=", "(", "-", "2", "*", "torch", ".", "rand", "(", "e1", ".", "shape", "[", "0", "]", ",", "e1", ".", "shape", "[", "1", "]", ")", "+", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "e2_rand", "=", "(", "-", "2", "*", "torch", ".", "rand", "(", "e2", ".", "shape", "[", "0", "]", ",", "e2", ".", "shape", "[", "1", "]", ")", "+", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss_dis_1to2", "=", "self", ".", "criterion_dis", "(", "e2_hat", ",", "e2_rand", ")", "\n", "loss_dis_2to1", "=", "self", ".", "criterion_dis", "(", "e1_hat", ",", "e1_rand", ")", "\n", "", "if", "self", ".", "train_mode", "==", "'UAI-AT'", "or", "self", ".", "train_mode", "==", "'AT'", ":", "\n", "# Make predictions of bias discriminator close to uniform", "\n", "                ", "b_rand", "=", "torch", ".", "Tensor", "(", "e1", ".", "shape", "[", "0", "]", ")", "\n", "for", "idx", "in", "range", "(", "e1", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "b_rand", "[", "idx", "]", "=", "np", ".", "random", ".", "choice", "(", "[", "key", "for", "key", "in", "self", ".", "prob_bias", ".", "keys", "(", ")", "]", ",", "p", "=", "[", "self", ".", "prob_bias", "[", "key", "]", "for", "key", "in", "self", ".", "prob_bias", ".", "keys", "(", ")", "]", ")", "\n", "", "b_rand", "=", "b_rand", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss_bias", "=", "self", ".", "criterion_bias", "(", "b_hat", ",", "b_rand", ")", "\n", "", "elif", "self", ".", "train_mode", "==", "'UAI-MTL'", "or", "self", ".", "train_mode", "==", "'MTL'", ":", "\n", "                ", "loss_bias", "=", "self", ".", "criterion_bias", "(", "b_hat", ",", "b", ")", "\n", "", "", "if", "self", ".", "train_mode", "==", "'UAI'", ":", "\n", "            ", "loss_secondary", "=", "loss_dis_1to2", "+", "loss_dis_2to1", "\n", "", "elif", "self", ".", "train_mode", "==", "'AT'", "or", "self", ".", "train_mode", "==", "'MTL'", ":", "\n", "            ", "loss_secondary", "=", "self", ".", "weight_bias", "*", "loss_bias", "\n", "", "else", ":", "#UAI-AT,UAI-MTL", "\n", "            ", "loss_secondary", "=", "loss_dis_1to2", "+", "loss_dis_2to1", "+", "self", ".", "weight_bias", "*", "loss_bias", "\n", "\n", "# Write losses to tensorboard", "\n", "", "if", "self", ".", "train_mode", "==", "'UAI'", ":", "\n", "            ", "self", ".", "write_loss_sec", "(", "self", ".", "criterion_dis", "(", "e2_hat", ",", "e2", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "criterion_dis", "(", "e1_hat", ",", "e1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "self", ".", "criterion_dis", "(", "e2_hat", ",", "e2", ")", "+", "self", ".", "criterion_dis", "(", "e1_hat", ",", "e1", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "elif", "self", ".", "train_mode", "==", "'AT'", "or", "self", ".", "train_mode", "==", "'MTL'", ":", "\n", "            ", "self", ".", "write_loss_sec", "(", "0", ",", "0", ",", "self", ".", "criterion_bias", "(", "b_hat", ",", "b", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "criterion_bias", "(", "b_hat", ",", "b", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "#UAI-AT,UAI-MTL", "\n", "            ", "self", ".", "write_loss_sec", "(", "self", ".", "criterion_dis", "(", "e2_hat", ",", "e2", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "criterion_dis", "(", "e1_hat", ",", "e1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "self", ".", "criterion_dis", "(", "e2_hat", ",", "e2", ")", "+", "self", ".", "criterion_dis", "(", "e1_hat", ",", "e1", ")", "+", "self", ".", "criterion_bias", "(", "b_hat", ",", "b", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "criterion_bias", "(", "b_hat", ",", "b", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "if", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "            ", "return", "loss_secondary", ",", "b_hat", "\n", "", "else", ":", "\n", "            ", "return", "loss_secondary", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.save_model": [[423, 432], ["torch.save", "trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "trainer.Trainer.optimizer_secondary.state_dict"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.None.transform.save"], ["", "", "def", "save_model", "(", "self", ",", "ckpt", ")", ":", "\n", "        ", "state", "=", "{", "'epoch'", ":", "self", ".", "ep_idx", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_prim'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", ":", "\n", "            ", "state", "[", "'optimizer_sec'", "]", "=", "self", ".", "optimizer_secondary", ".", "state_dict", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "state", ",", "ckpt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_loss_prim": [[433, 445], ["trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar"], "methods", ["None"], ["", "def", "write_loss_prim", "(", "self", ",", "loss_pred", ",", "loss_recon", ",", "loss_overall", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "idx", "=", "self", ".", "idx", "+", "self", ".", "train_size", "*", "self", ".", "ep_idx", "\n", "", "else", ":", "\n", "            ", "idx", "=", "self", ".", "idx", "+", "self", ".", "val_size", "*", "self", ".", "ep_idx", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/Prediction/{}/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "loss_pred", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/Reconstruction/{}/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "loss_recon", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/Overall_prim/{}/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "loss_overall", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_loss_sec": [[446, 461], ["trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar"], "methods", ["None"], ["", "def", "write_loss_sec", "(", "self", ",", "loss_dis_1to2", ",", "loss_dis_2to1", ",", "loss_secondary", ",", "loss_bias", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "idx", "=", "self", ".", "idx", "+", "self", ".", "train_size", "*", "self", ".", "ep_idx", "\n", "", "else", ":", "\n", "            ", "idx", "=", "self", ".", "idx", "+", "self", ".", "val_size", "*", "self", ".", "ep_idx", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/Dis_1to2/{}/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "loss_dis_1to2", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/Dis_2to1/{}/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "loss_dis_2to1", ",", "idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/Overall_sec/{}/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "loss_secondary", ",", "idx", ")", "\n", "if", "self", ".", "train_mode", "!=", "'NLDR'", "and", "self", ".", "train_mode", "!=", "'UAI'", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/Bias/{}/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "loss_bias", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_acc": [[463, 476], ["trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar"], "methods", ["None"], ["", "", "def", "write_acc", "(", "self", ",", "accuracy", ",", "accuracy_bias", "=", "None", ",", "accuracy_minority", "=", "None", ",", "accuracy_majority", "=", "None", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "'Accuracy/{}/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "accuracy", ",", "self", ".", "ep_idx", ")", "\n", "if", "accuracy_bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'Accuracy/{}_bias'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "accuracy_bias", ",", "self", ".", "ep_idx", ")", "\n", "\n", "", "if", "accuracy_minority", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'Accuracy/{}_minority/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "accuracy_minority", ",", "self", ".", "ep_idx", ")", "\n", "", "if", "accuracy_majority", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'Accuracy/{}_majority/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "accuracy_majority", ",", "self", ".", "ep_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_distances": [[477, 482], ["trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar"], "methods", ["None"], ["", "", "def", "write_distances", "(", "self", ",", "intra_spk", ",", "inter_spk", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "'Distances/{}_intra_speaker/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "intra_spk", ",", "self", ".", "ep_idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Distances/{}_inter_speaker/'", ".", "format", "(", "self", ".", "mode", ")", ",", "\n", "inter_spk", ",", "self", ".", "ep_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.Trainer.write_log": [[483, 495], ["open", "o.write", "o.write", "o.write", "o.write"], "methods", ["None"], ["", "def", "write_log", "(", "self", ",", "train_acc", ",", "val_acc", ",", "val_acc_minority", ",", "val_acc_majority", ",", "intra_spk", ",", "inter_spk", ",", "val_acc_bias", "=", "None", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "log_file", ",", "'a'", ")", "as", "o", ":", "\n", "            ", "if", "self", ".", "ep_idx", "==", "0", ":", "\n", "                ", "if", "not", "val_acc_bias", ":", "\n", "                    ", "o", ".", "write", "(", "\"Epoch Train_accuracy Validation_accuracy Minority_accuracy Majority_accuracy Intra_speaker_distance Inter_speaker_distance\\n\"", ")", "\n", "", "else", ":", "\n", "                    ", "o", ".", "write", "(", "\"Epoch Train_accuracy Validation_accuracy Minority_accuracy Majority_accuracy Intra_speaker_distance Inter_speaker_distance Validation_accuracy_bias\\n\"", ")", "\n", "\n", "", "", "if", "not", "val_acc_bias", ":", "\n", "                ", "o", ".", "write", "(", "\"{} {} {} {} {} {} {}\\n\"", ".", "format", "(", "self", ".", "ep_idx", ",", "train_acc", ",", "val_acc", ",", "val_acc_minority", ",", "val_acc_majority", ",", "intra_spk", ",", "inter_spk", ")", ")", "\n", "", "else", ":", "\n", "                ", "o", ".", "write", "(", "\"{} {} {} {} {} {} {} {}\\n\"", ".", "format", "(", "self", ".", "ep_idx", ",", "train_acc", ",", "val_acc", ",", "val_acc_minority", ",", "val_acc_majority", ",", "intra_spk", ",", "inter_spk", ",", "val_acc_bias", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.scripts.trainer.worker_init_fn": [[15, 17], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.__init__": [[9, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_spk", "=", "1000", "\n", "self", ".", "n_bias", "=", "2", "# Number of classes in biasing factor (2 for gender, 2 for age)", "\n", "self", ".", "x_shape", "=", "(", "512", ",", ")", "\n", "self", ".", "embedding_dim_1", "=", "128", "\n", "self", ".", "embedding_dim_2", "=", "128", "\n", "self", ".", "noisy_drp_rate", "=", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.init_model": [[19, 110], ["int", "int", "float", "model_config.getboolean", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["", "def", "init_model", "(", "self", ",", "model_config", ")", ":", "\n", "        ", "self", ".", "embedding_dim_1", "=", "int", "(", "model_config", "[", "'embedding_dim_1'", "]", ")", "\n", "self", ".", "embedding_dim_2", "=", "int", "(", "model_config", "[", "'embedding_dim_2'", "]", ")", "\n", "self", ".", "noisy_drp_rate", "=", "float", "(", "model_config", "[", "'noisy_drp_rate'", "]", ")", "\n", "self", ".", "indirect_bias_FLAG", "=", "model_config", ".", "getboolean", "(", "'indirect_bias_FLAG'", ")", "\n", "\n", "# Encoder", "\n", "self", ".", "enc_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "x_shape", "[", "0", "]", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", ")", "\n", "self", ".", "enc_fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "emb1_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "emb2_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "self", ".", "embedding_dim_2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "# Predictor (Predicts speaker class from embedding_1)", "\n", "self", ".", "pred_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm1d", "(", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_1", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", ")", "\n", "self", ".", "pred_fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "256", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", ")", "\n", "self", ".", "pred_final", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "self", ".", "n_spk", ")", "\n", ")", "\n", "\n", "# Predicting biasing factor", "\n", "self", ".", "pred_bias_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_1", ",", "64", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", ")", "\n", "\n", "self", ".", "pred_bias_final", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "64", ",", "self", ".", "n_bias", ")", "\n", ")", "\n", "\n", "# Noisy transformer", "\n", "self", ".", "noisy_transformer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "noisy_drp_rate", ")", "\n", ")", "\n", "\n", "# Decoder (Reconsutrucs input from embedding_2 and noisy version of embedding_1)", "\n", "embedding_dimension", "=", "self", ".", "embedding_dim_1", "+", "self", ".", "embedding_dim_2", "\n", "self", ".", "dec_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "embedding_dimension", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "dec_fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "dec_fc3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "self", ".", "x_shape", "[", "0", "]", ")", "\n", ")", "\n", "\n", "# Disentangler_1-2", "\n", "# 1", "\n", "self", ".", "dis_1to2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_1", ",", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_1", ",", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_1", ",", "self", ".", "embedding_dim_2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "\n", "# Disentangler_2-1", "\n", "# 1", "\n", "self", ".", "dis_2to1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_2", ",", "self", ".", "embedding_dim_2", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_2", ",", "self", ".", "embedding_dim_2", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_2", ",", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.forward_prim": [[112, 124], ["model_unifai.Xvector_UnifAI.encode", "model_unifai.Xvector_UnifAI.noisy_transformer", "model_unifai.Xvector_UnifAI.decode", "model_unifai.Xvector_UnifAI.predict"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.encode", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.decode", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.predict"], ["", "def", "forward_prim", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: speaker embedding as input\n        :return: speaker prediction logits and reconstructed input\n        '''", "\n", "e1", ",", "e2", "=", "self", ".", "encode", "(", "x", ")", "\n", "e1_prime", "=", "self", ".", "noisy_transformer", "(", "e1", ")", "\n", "\n", "x_hat", "=", "self", ".", "decode", "(", "(", "e1_prime", ",", "e2", ")", ")", "\n", "y_hat", "=", "self", ".", "predict", "(", "e1", ")", "\n", "\n", "return", "y_hat", ",", "x_hat", ",", "e1", ",", "e2", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.forward_dis": [[126, 136], ["model_unifai.Xvector_UnifAI.dis_1to2", "model_unifai.Xvector_UnifAI.dis_2to1"], "methods", ["None"], ["", "def", "forward_dis", "(", "self", ",", "e1", ",", "e2", ")", ":", "\n", "        ", "'''\n        :param e1: speaker embedding\n        param e2: nuisance embedding\n        :return: predicted e1_hat and e2_hat\n        '''", "\n", "e2_hat", "=", "self", ".", "dis_1to2", "(", "e1", ")", "\n", "e1_hat", "=", "self", ".", "dis_2to1", "(", "e2", ")", "\n", "\n", "return", "e1_hat", ",", "e2_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.forward_bias": [[137, 145], ["model_unifai.Xvector_UnifAI.predict_bias"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.predict_bias"], ["", "def", "forward_bias", "(", "self", ",", "e", ")", ":", "\n", "        ", "'''\n        :param e1: speaker embedding\n        :return: predicted bias\n        '''", "\n", "b_hat", "=", "self", ".", "predict_bias", "(", "e", ")", "\n", "\n", "return", "b_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.encode": [[146, 158], ["model_unifai.Xvector_UnifAI.enc_fc1", "model_unifai.Xvector_UnifAI.enc_fc2", "model_unifai.Xvector_UnifAI.emb1_layer", "model_unifai.Xvector_UnifAI.emb2_layer"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: speaker embedding as input\n        :return: embeddings e1 and e2\n        '''", "\n", "x", "=", "self", ".", "enc_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc_fc2", "(", "x", ")", "\n", "\n", "e1", "=", "self", ".", "emb1_layer", "(", "x", ")", "\n", "e2", "=", "self", ".", "emb2_layer", "(", "x", ")", "\n", "\n", "return", "e1", ",", "e2", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.decode": [[159, 172], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_unifai.Xvector_UnifAI.dec_fc1", "model_unifai.Xvector_UnifAI.dec_fc2", "model_unifai.Xvector_UnifAI.dec_fc3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: tuple of 2 elements (e1_prime, e2)\n        :return: reconstructed input speaker embeddings\n        '''", "\n", "e1_prime", ",", "e2", "=", "x", "\n", "x", "=", "torch", ".", "cat", "(", "(", "e1_prime", ",", "e2", ")", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "dec_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "dec_fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "dec_fc3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.predict": [[173, 183], ["model_unifai.Xvector_UnifAI.pred_fc1", "model_unifai.Xvector_UnifAI.pred_fc2", "model_unifai.Xvector_UnifAI.pred_final"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: e1 as input\n        :return: speaker prediction logits\n        '''", "\n", "x", "=", "self", ".", "pred_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "pred_fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "pred_final", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model_unifai.Xvector_UnifAI.predict_bias": [[184, 193], ["model_unifai.Xvector_UnifAI.pred_bias_fc1", "model_unifai.Xvector_UnifAI.pred_bias_final"], "methods", ["None"], ["", "def", "predict_bias", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: e1 as input\n        :return: bias prediction logits\n        '''", "\n", "x", "=", "self", ".", "pred_bias_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "pred_bias_final", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.__init__": [[14, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_spk", "=", "1000", "\n", "self", ".", "x_shape", "=", "(", "512", ",", ")", "\n", "self", ".", "embedding_dim_1", "=", "128", "\n", "self", ".", "embedding_dim_2", "=", "128", "\n", "self", ".", "noisy_drp_rate", "=", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.init_model": [[23, 102], ["int", "int", "float", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["None"], ["", "def", "init_model", "(", "self", ",", "model_config", ")", ":", "\n", "        ", "self", ".", "embedding_dim_1", "=", "int", "(", "model_config", "[", "'embedding_dim_1'", "]", ")", "\n", "self", ".", "embedding_dim_2", "=", "int", "(", "model_config", "[", "'embedding_dim_2'", "]", ")", "\n", "self", ".", "noisy_drp_rate", "=", "float", "(", "model_config", "[", "'noisy_drp_rate'", "]", ")", "\n", "\n", "# Encoder", "\n", "self", ".", "enc_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "x_shape", "[", "0", "]", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", ")", "\n", "self", ".", "enc_fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "emb1_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "emb2_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "self", ".", "embedding_dim_2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "# Predictor (Predicts speaker class from embedding_1)", "\n", "self", ".", "pred_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm1d", "(", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_1", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", ")", "\n", "self", ".", "pred_fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "256", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", ")", "\n", "self", ".", "pred_final", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "self", ".", "n_spk", ")", "\n", ")", "\n", "\n", "# Noisy transformer", "\n", "self", ".", "noisy_transformer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "noisy_drp_rate", ")", "\n", ")", "\n", "\n", "# Decoder (Reconsutrucs input from embedding_2 and noisy version of embedding_1)", "\n", "embedding_dimension", "=", "self", ".", "embedding_dim_1", "+", "self", ".", "embedding_dim_2", "\n", "self", ".", "dec_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "embedding_dimension", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "dec_fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "dec_fc3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "self", ".", "x_shape", "[", "0", "]", ")", "\n", ")", "\n", "\n", "# Disentangler_1-2", "\n", "# 1", "\n", "self", ".", "dis_1to2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_1", ",", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_1", ",", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_1", ",", "self", ".", "embedding_dim_2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "# Disentangler_2-1", "\n", "# 1", "\n", "self", ".", "dis_2to1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_2", ",", "self", ".", "embedding_dim_2", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_2", ",", "self", ".", "embedding_dim_2", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_dim_2", ",", "self", ".", "embedding_dim_1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.init_model_weights": [[104, 170], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "init_model_weights", "(", "self", ")", ":", "\n", "# Initialize all weights using xavier_uniform (since, in original keras code, default was glorot_uniform),", "\n", "# except the embedding layers, which are initialized using orthogonal initializer", "\n", "# Encoder", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "enc_fc1", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "enc_fc2", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "emb1_layer", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "emb2_layer", "[", "0", "]", ".", "weight", ")", "\n", "#torch.nn.init.xavier_uniform_(self.enc_fc3[0].weight)", "\n", "#torch.nn.init.xavier_uniform_(self.enc_fc4[0].weight)", "\n", "# Predictor", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "pred_fc1", "[", "1", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "pred_fc2", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "pred_final", "[", "0", "]", ".", "weight", ")", "\n", "# Decoder", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dec_fc1", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dec_fc2", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dec_fc3", "[", "0", "]", ".", "weight", ")", "\n", "# Disentangler", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dis_1to2", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dis_1to2", "[", "3", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dis_1to2", "[", "6", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dis_2to1", "[", "0", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dis_2to1", "[", "3", "]", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dis_2to1", "[", "6", "]", ".", "weight", ")", "\n", "\n", "\n", "# Initialize bias with zeros for all layers", "\n", "# Encoder", "\n", "if", "self", ".", "enc_fc1", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "enc_fc1", "[", "0", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "enc_fc2", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "enc_fc2", "[", "0", "]", ".", "bias", ")", "\n", "#if self.enc_fc3[0].bias is not None:", "\n", "#    torch.nn.init.zeros_(self.enc_fc3[0].bias)", "\n", "#if self.enc_fc4[0].bias is not None:", "\n", "#    torch.nn.init.zeros_(self.enc_fc4[0].bias)", "\n", "", "if", "self", ".", "emb1_layer", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "emb1_layer", "[", "0", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "emb2_layer", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "emb2_layer", "[", "0", "]", ".", "bias", ")", "\n", "# Predictor", "\n", "", "if", "self", ".", "pred_fc1", "[", "1", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "pred_fc1", "[", "1", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "pred_fc2", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "pred_fc2", "[", "0", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "pred_final", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "pred_final", "[", "0", "]", ".", "bias", ")", "\n", "# Decoder", "\n", "", "if", "self", ".", "dec_fc1", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "dec_fc1", "[", "0", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "dec_fc2", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "dec_fc2", "[", "0", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "dec_fc3", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "dec_fc3", "[", "0", "]", ".", "bias", ")", "\n", "# Disentangler", "\n", "", "if", "self", ".", "dis_1to2", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "dis_1to2", "[", "0", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "dis_1to2", "[", "3", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "dis_1to2", "[", "3", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "dis_2to1", "[", "0", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "dis_2to1", "[", "0", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "dis_2to1", "[", "3", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "dis_2to1", "[", "3", "]", ".", "bias", ")", "\n", "", "if", "self", ".", "dis_2to1", "[", "6", "]", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "dis_2to1", "[", "6", "]", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.forward_prim": [[172, 184], ["model.Xvector_UAI.encode", "model.Xvector_UAI.noisy_transformer", "model.Xvector_UAI.decode", "model.Xvector_UAI.predict"], "methods", ["home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.encode", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.decode", "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.predict"], ["", "", "def", "forward_prim", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: speaker embedding as input\n        :return: speaker prediction logits and reconstructed input\n        '''", "\n", "e1", ",", "e2", "=", "self", ".", "encode", "(", "x", ")", "\n", "e1_prime", "=", "self", ".", "noisy_transformer", "(", "e1", ")", "\n", "\n", "x_hat", "=", "self", ".", "decode", "(", "(", "e1_prime", ",", "e2", ")", ")", "\n", "y_hat", "=", "self", ".", "predict", "(", "e1", ")", "\n", "\n", "return", "y_hat", ",", "x_hat", ",", "e1", ",", "e2", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.forward_dis": [[185, 195], ["model.Xvector_UAI.dis_1to2", "model.Xvector_UAI.dis_2to1"], "methods", ["None"], ["", "def", "forward_dis", "(", "self", ",", "e1", ",", "e2", ")", ":", "\n", "        ", "'''\n        :param e1: speaker embedding\n        param e2: nuisance embedding\n        :return: predicted e1_hat and e2_hat\n        '''", "\n", "e2_hat", "=", "self", ".", "dis_1to2", "(", "e1", ")", "\n", "e1_hat", "=", "self", ".", "dis_2to1", "(", "e2", ")", "\n", "\n", "return", "e1_hat", ",", "e2_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.encode": [[196, 208], ["model.Xvector_UAI.enc_fc1", "model.Xvector_UAI.enc_fc2", "model.Xvector_UAI.emb1_layer", "model.Xvector_UAI.emb2_layer"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: speaker embedding as input\n        :return: embeddings e1 and e2\n        '''", "\n", "x", "=", "self", ".", "enc_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "enc_fc2", "(", "x", ")", "\n", "\n", "e1", "=", "self", ".", "emb1_layer", "(", "x", ")", "\n", "e2", "=", "self", ".", "emb2_layer", "(", "x", ")", "\n", "\n", "return", "e1", ",", "e2", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.decode": [[209, 222], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Xvector_UAI.dec_fc1", "model.Xvector_UAI.dec_fc2", "model.Xvector_UAI.dec_fc3"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: tuple of 2 elements (e1_prime, e2)\n        :return: reconstructed input speaker embeddings\n        '''", "\n", "e1_prime", ",", "e2", "=", "x", "\n", "x", "=", "torch", ".", "cat", "(", "(", "e1_prime", ",", "e2", ")", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "dec_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "dec_fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "dec_fc3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rperi_trustworthy-asv-fairness.models.model.Xvector_UAI.predict": [[223, 233], ["model.Xvector_UAI.pred_fc1", "model.Xvector_UAI.pred_fc2", "model.Xvector_UAI.pred_final"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: e1 as input\n        :return: speaker prediction logits\n        '''", "\n", "x", "=", "self", ".", "pred_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "pred_fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "pred_final", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]]}