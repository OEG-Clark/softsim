{"home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deepgpr.DeepGaussianProcessRegression.__init__": [[41, 65], ["tensorflow.identity", "tensorflow.name_scope", "tensorflow.identity", "tensorflow.placeholder", "tensorflow.identity", "deepgpr.DeepGaussianProcessRegression._generate_k_ful", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful"], ["def", "__init__", "(", "self", ",", "input_x", ",", "output_y", ",", "weight_var", "=", "1.", ",", "bias_var", "=", "1.", ",", "use_fixed_point_norm", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"init\"", ")", ":", "\n", "      ", "self", ".", "input_x", "=", "input_x", "\n", "self", ".", "weight_var", "=", "weight_var", "\n", "self", ".", "bias_var", "=", "bias_var", "\n", "self", ".", "output_y", "=", "output_y", "\n", "self", ".", "num_train", ",", "self", ".", "input_dim", "=", "input_x", ".", "shape", "\n", "_", ",", "self", ".", "output_dim", "=", "output_y", ".", "shape", "\n", "\n", "self", ".", "use_fixed_point_norm", "=", "use_fixed_point_norm", "\n", "self", ".", "stability_eps", "=", "tf", ".", "identity", "(", "tf", ".", "placeholder", "(", "tf", ".", "float64", ")", ")", "\n", "self", ".", "current_stability_eps", "=", "1e-10", "\n", "\n", "self", ".", "y_pl", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float64", ",", "[", "self", ".", "num_train", ",", "self", ".", "output_dim", "]", ",", "name", "=", "\"y_train\"", ")", "\n", "self", ".", "x_pl", "=", "tf", ".", "identity", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float64", ",", "[", "self", ".", "num_train", ",", "self", ".", "input_dim", "]", ",", "\n", "name", "=", "\"x_train\"", ")", ")", "\n", "\n", "self", ".", "l_np", "=", "None", "\n", "self", ".", "v_np", "=", "None", "\n", "self", ".", "k_np", "=", "None", "\n", "\n", "", "self", ".", "k_data_data", "=", "tf", ".", "identity", "(", "self", ".", "_generate_k_ful", "(", "self", ".", "x_pl", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deepgpr.DeepGaussianProcessRegression._build_predict": [[66, 88], ["tensorflow.logging.info", "deepgpr.DeepGaussianProcessRegression._generate_k_ful", "tensorflow.name_scope", "tensorflow.identity", "tensorflow.name_scope", "tensorflow.matrix_triangular_solve", "tensorflow.matmul", "tensorflow.placeholder", "tensorflow.tile", "deepgpr.DeepGaussianProcessRegression._generate_k_ful", "tensorflow.matmul", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful"], ["", "def", "_build_predict", "(", "self", ",", "n_test", ",", "full_cov", "=", "True", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"build_predict\"", ")", ":", "\n", "      ", "self", ".", "x_test_pl", "=", "tf", ".", "identity", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float64", ",", "[", "n_test", ",", "self", ".", "input_dim", "]", ",", "name", "=", "\"x_test_pl\"", ")", "\n", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"Using pre-computed Kernel\"", ")", "\n", "self", ".", "k_data_test", "=", "self", ".", "_generate_k_ful", "(", "self", ".", "x_pl", ",", "self", ".", "x_test_pl", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"build_predict\"", ")", ":", "\n", "      ", "a", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "l", ",", "self", ".", "k_data_test", ")", "\n", "fmean", "=", "tf", ".", "matmul", "(", "a", ",", "self", ".", "v", ",", "transpose_a", "=", "True", ")", "\n", "\n", "if", "full_cov", ":", "\n", "        ", "fvar", "=", "self", ".", "_generate_k_ful", "(", "self", ".", "x_test_pl", ")", "-", "tf", ".", "matmul", "(", "\n", "a", ",", "a", ",", "transpose_a", "=", "True", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "self", ".", "y_pl", ".", "shape", "[", "1", "]", "]", "\n", "fvar", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "fvar", ",", "2", ")", ",", "shape", ")", "\n", "\n", "\n", "", "self", ".", "fmean", "=", "fmean", "\n", "self", ".", "fvar", "=", "fvar", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deepgpr.DeepGaussianProcessRegression._build_cholesky": [[90, 100], ["tensorflow.logging.info", "tensorflow.cholesky", "tensorflow.matrix_triangular_solve", "tensorflow.Print", "tensorflow.eye"], "methods", ["None"], ["", "", "def", "_build_cholesky", "(", "self", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Computing Kernel\"", ")", "\n", "self", ".", "k_data_data_reg", "=", "self", ".", "k_data_data", "+", "tf", ".", "eye", "(", "\n", "self", ".", "input_x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float64", ")", "*", "self", ".", "stability_eps", "\n", "if", "FLAGS", ".", "print_kernel", ":", "\n", "      ", "self", ".", "k_data_data_reg", "=", "tf", ".", "Print", "(", "\n", "self", ".", "k_data_data_reg", ",", "[", "self", ".", "k_data_data_reg", "]", ",", "\n", "message", "=", "\"K_DD = \"", ",", "summarize", "=", "100", ")", "\n", "", "self", ".", "l", "=", "tf", ".", "cholesky", "(", "self", ".", "k_data_data_reg", ")", "\n", "self", ".", "v", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "l", ",", "self", ".", "y_pl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deepgpr.DeepGaussianProcessRegression._generate_k_ful": [[103, 132], ["deepgpr.DeepGaussianProcessRegression._input_layer_normalization", "deepgpr.DeepGaussianProcessRegression._input_layer_normalization", "tensorflow.name_scope", "tensorflow.cast", "tensorflow.matmul", "tensorflow.constant", "tensorflow.sqrt", "tensorflow.ones_like", "tensorflow.pow", "tensorflow.math.acos"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization"], ["", "def", "_generate_k_ful", "(", "self", ",", "input1", ",", "input2", "=", "None", ")", ":", "\n", "    ", "\"\"\"Iteratively building the diagonal part (variance) of the NNGP kernel.\n\n    Args:\n      input_x: tensor of input of size [num_data, input_dim].\n      return_full: boolean for output to be [num_data] sized or a scalar value\n        for normalized inputs\n\n    Sets self.layer_qaa_dict of {layer #: qaa at the layer}\n\n    Returns:\n      qaa: variance at the output.\n    \"\"\"", "\n", "input1", "=", "self", ".", "_input_layer_normalization", "(", "input1", ")", "\n", "if", "input2", "is", "None", ":", "\n", "      ", "input2", "=", "input1", "\n", "", "else", ":", "\n", "      ", "input2", "=", "self", ".", "_input_layer_normalization", "(", "input2", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"k_full\"", ")", ":", "\n", "      ", "cov_init", "=", "tf", ".", "matmul", "(", "\n", "input1", ",", "input2", ",", "transpose_b", "=", "True", ")", "/", "input1", ".", "shape", "[", "1", "]", ".", "value", "\n", "\n", "kernel", "=", "self", ".", "weight_var", "*", "cov_init", "+", "self", ".", "bias_var", "\n", "\n", "pi", "=", "tf", ".", "cast", "(", "tf", ".", "constant", "(", "np", ".", "pi", ")", ",", "tf", ".", "float64", ")", "\n", "kernel", "=", "(", "tf", ".", "sqrt", "(", "tf", ".", "ones_like", "(", "kernel", ")", "-", "tf", ".", "pow", "(", "kernel", ",", "2", ")", ")", "+", "(", "pi", "-", "tf", ".", "math", ".", "acos", "(", "kernel", ")", ")", "*", "kernel", ")", "/", "(", "2", "*", "pi", ")", "\n", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deepgpr.DeepGaussianProcessRegression._input_layer_normalization": [[134, 146], ["tensorflow.name_scope", "tensorflow.nn.moments", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["None"], ["", "", "def", "_input_layer_normalization", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"Input normalization to unit variance or fixed point variance.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"input_layer_normalization\"", ")", ":", "\n", "# Layer norm, fix to unit variance", "\n", "      ", "eps", "=", "1e-15", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "x_normalized", "=", "(", "x", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "eps", ")", "\n", "if", "self", ".", "use_fixed_point_norm", ":", "\n", "        ", "x_normalized", "*=", "tf", ".", "sqrt", "(", "\n", "(", "self", ".", "var_fixed_point", "[", "0", "]", "-", "self", ".", "bias_var", ")", "/", "self", ".", "weight_var", ")", "\n", "", "return", "x_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deepgpr.DeepGaussianProcessRegression.predict": [[147, 210], ["deepgpr.DeepGaussianProcessRegression._build_predict", "time.time", "deepgpr.DeepGaussianProcessRegression._build_cholesky", "time.time", "sess.run", "tensorflow.logging.info", "ArithmeticError", "sess.run", "sess.run", "tensorflow.logging.info", "sess.run", "tensorflow.logging.info", "time.time", "sess.run", "tensorflow.logging.info", "time.time", "tensorflow.logging.info", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_predict", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_cholesky"], ["", "", "def", "predict", "(", "self", ",", "test_x", ",", "sess", ",", "get_var", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute mean and varaince prediction for test inputs.\n\n    Raises:\n      ArithmeticError: Cholesky fails even after increasing to large values of\n        stability epsilon.\n    \"\"\"", "\n", "if", "self", ".", "l_np", "is", "None", ":", "\n", "\n", "# =============================================================================", "\n", "#       print(sess.run(self.k_data_data,", "\n", "#                            feed_dict={self.x_pl: self.input_x}))", "\n", "# =============================================================================", "\n", "\n", "      ", "self", ".", "_build_cholesky", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "k_np", "=", "sess", ".", "run", "(", "self", ".", "k_data_data", ",", "\n", "feed_dict", "=", "{", "self", ".", "x_pl", ":", "self", ".", "input_x", "}", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Computed K_DD in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "while", "self", ".", "current_stability_eps", "<", "1", ":", "\n", "        ", "try", ":", "\n", "          ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "l_np", ",", "self", ".", "v_np", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "l", ",", "self", ".", "v", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "y_pl", ":", "self", ".", "output_y", ",", "\n", "self", ".", "k_data_data", ":", "self", ".", "k_np", ",", "\n", "self", ".", "stability_eps", ":", "self", ".", "current_stability_eps", "}", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"Computed L_DD in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "break", "\n", "\n", "", "except", "tf", ".", "errors", ".", "InvalidArgumentError", ":", "\n", "          ", "self", ".", "current_stability_eps", "*=", "10", "\n", "tf", ".", "logging", ".", "info", "(", "\"Cholesky decomposition failed, trying larger epsilon\"", "\n", "\": {}\"", ".", "format", "(", "self", ".", "current_stability_eps", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "current_stability_eps", ">", "0.2", ":", "\n", "      ", "raise", "ArithmeticError", "(", "\"Could not compute Cholesky decomposition.\"", ")", "\n", "\n", "", "n_test", "=", "test_x", ".", "shape", "[", "0", "]", "\n", "self", ".", "_build_predict", "(", "n_test", ")", "\n", "feed_dict", "=", "{", "\n", "self", ".", "x_pl", ":", "self", ".", "input_x", ",", "\n", "self", ".", "x_test_pl", ":", "test_x", ",", "\n", "self", ".", "l", ":", "self", ".", "l_np", ",", "\n", "self", ".", "v", ":", "self", ".", "v_np", "\n", "}", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "get_var", ":", "\n", "      ", "mean_pred", ",", "var_pred", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "fmean", ",", "self", ".", "fvar", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "k_d_d", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "k_data_data", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Did regression in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "mean_pred", ",", "var_pred", ",", "self", ".", "current_stability_eps", ",", "k_d_d", "\n", "\n", "", "else", ":", "\n", "      ", "mean_pred", "=", "sess", ".", "run", "(", "self", ".", "fmean", ",", "feed_dict", "=", "feed_dict", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Did regression in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "mean_pred", ",", "self", ".", "current_stability_eps", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.__init__": [[41, 70], ["tensorflow.identity", "tensorflow.name_scope", "tensorflow.identity", "tensorflow.placeholder", "tensorflow.identity", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression._generate_k_ful", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful"], ["def", "__init__", "(", "self", ",", "input_x", ",", "output_y", ",", "nonlin_fn", ",", "\n", "weight_var", "=", "1.", ",", "bias_var", "=", "1.", ",", "depth", "=", "500", ",", "\n", "random_seed", "=", "521", ",", "repeated_time", "=", "100", ",", "use_fixed_point_norm", "=", "False", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"init\"", ")", ":", "\n", "      ", "self", ".", "input_x", "=", "input_x", "\n", "self", ".", "weight_var", "=", "weight_var", "\n", "self", ".", "bias_var", "=", "bias_var", "\n", "self", ".", "output_y", "=", "output_y", "\n", "self", ".", "nonlin_fn", "=", "nonlin_fn", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "repeated_time", "=", "repeated_time", "\n", "self", ".", "num_train", ",", "self", ".", "input_dim", "=", "input_x", ".", "shape", "\n", "_", ",", "self", ".", "output_dim", "=", "output_y", ".", "shape", "\n", "self", ".", "use_fixed_point_norm", "=", "use_fixed_point_norm", "\n", "self", ".", "stability_eps", "=", "tf", ".", "identity", "(", "tf", ".", "placeholder", "(", "tf", ".", "float64", ")", ")", "\n", "self", ".", "current_stability_eps", "=", "1e-10", "\n", "self", ".", "middle_dim", "=", "30", "\n", "self", ".", "y_pl", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float64", ",", "[", "self", ".", "num_train", ",", "self", ".", "output_dim", "]", ",", "name", "=", "\"y_train\"", ")", "\n", "self", ".", "x_pl", "=", "tf", ".", "identity", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float64", ",", "[", "self", ".", "num_train", ",", "self", ".", "input_dim", "]", ",", "\n", "name", "=", "\"x_train\"", ")", ")", "\n", "\n", "self", ".", "l_np", "=", "None", "\n", "self", ".", "v_np", "=", "None", "\n", "self", ".", "k_np", "=", "None", "\n", "\n", "", "self", ".", "k_data_data", "=", "tf", ".", "identity", "(", "self", ".", "_generate_k_ful", "(", "self", ".", "x_pl", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression._build_predict": [[71, 93], ["tensorflow.logging.info", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression._generate_k_ful", "tensorflow.name_scope", "tensorflow.identity", "tensorflow.name_scope", "tensorflow.matrix_triangular_solve", "tensorflow.matmul", "tensorflow.placeholder", "tensorflow.tile", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression._generate_k_ful", "tensorflow.matmul", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful"], ["", "def", "_build_predict", "(", "self", ",", "n_test", ",", "full_cov", "=", "True", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"build_predict\"", ")", ":", "\n", "      ", "self", ".", "x_test_pl", "=", "tf", ".", "identity", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float64", ",", "[", "n_test", ",", "self", ".", "input_dim", "]", ",", "name", "=", "\"x_test_pl\"", ")", "\n", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"Using pre-computed Kernel\"", ")", "\n", "self", ".", "k_data_test", "=", "self", ".", "_generate_k_ful", "(", "self", ".", "x_pl", ",", "self", ".", "x_test_pl", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"build_predict\"", ")", ":", "\n", "      ", "a", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "l", ",", "self", ".", "k_data_test", ")", "\n", "fmean", "=", "tf", ".", "matmul", "(", "a", ",", "self", ".", "v", ",", "transpose_a", "=", "True", ")", "\n", "\n", "if", "full_cov", ":", "\n", "        ", "fvar", "=", "self", ".", "_generate_k_ful", "(", "self", ".", "x_test_pl", ")", "-", "tf", ".", "matmul", "(", "\n", "a", ",", "a", ",", "transpose_a", "=", "True", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "self", ".", "y_pl", ".", "shape", "[", "1", "]", "]", "\n", "fvar", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "fvar", ",", "2", ")", ",", "shape", ")", "\n", "\n", "\n", "", "self", ".", "fmean", "=", "fmean", "\n", "self", ".", "fvar", "=", "fvar", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression._build_cholesky": [[95, 105], ["tensorflow.logging.info", "tensorflow.cholesky", "tensorflow.matrix_triangular_solve", "tensorflow.Print", "tensorflow.eye"], "methods", ["None"], ["", "", "def", "_build_cholesky", "(", "self", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Computing Kernel\"", ")", "\n", "self", ".", "k_data_data_reg", "=", "self", ".", "k_data_data", "+", "tf", ".", "eye", "(", "\n", "self", ".", "input_x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float64", ")", "*", "self", ".", "stability_eps", "\n", "if", "FLAGS", ".", "print_kernel", ":", "\n", "      ", "self", ".", "k_data_data_reg", "=", "tf", ".", "Print", "(", "\n", "self", ".", "k_data_data_reg", ",", "[", "self", ".", "k_data_data_reg", "]", ",", "\n", "message", "=", "\"K_DD = \"", ",", "summarize", "=", "100", ")", "\n", "", "self", ".", "l", "=", "tf", ".", "cholesky", "(", "self", ".", "k_data_data_reg", ")", "\n", "self", ".", "v", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "l", ",", "self", ".", "y_pl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression._generate_k_ful": [[108, 183], ["tensorflow.name_scope", "numpy.arange", "tensorflow.random.normal", "tensorflow.random.normal", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.nonlin_fn", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.nonlin_fn", "range", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.nonlin_fn", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.nonlin_fn", "tensorflow.random.normal", "tensorflow.random.normal", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.nonlin_fn", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.nonlin_fn", "tensorflow.random.normal", "tensorflow.random.normal", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.nonlin_fn", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.nonlin_fn", "sum", "sum", "tensorflow.matmul", "numpy.sqrt", "numpy.sqrt", "tensorflow.matmul", "tensorflow.matmul", "output1_array.append", "output2_array.append", "numpy.sqrt", "numpy.sqrt", "tensorflow.matmul", "tensorflow.matmul", "numpy.sqrt", "numpy.sqrt", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "_generate_k_ful", "(", "self", ",", "input1", ",", "input2", "=", "None", ")", ":", "\n", "    ", "\"\"\"Iteratively building the diagonal part (variance) of the NNGP kernel.\n\n    Args:\n      input_x: tensor of input of size [num_data, input_dim].\n      return_full: boolean for output to be [num_data] sized or a scalar value\n        for normalized inputs\n\n    Sets self.layer_qaa_dict of {layer #: qaa at the layer}\n\n    Returns:\n      qaa: variance at the output.\n    \"\"\"", "\n", "\n", "if", "input2", "is", "None", ":", "\n", "      ", "input2", "=", "input1", "\n", "\n", "\n", "", "kernel", "=", "[", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"k_full\"", ")", ":", "\n", "\n", "\n", "      ", "for", "r", "in", "np", ".", "arange", "(", "self", ".", "repeated_time", ")", ":", "\n", "        ", "weight_matrix_1", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "input_dim", ",", "self", ".", "middle_dim", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "weight_var", "/", "self", ".", "input_dim", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ")", "\n", "\n", "bias_matrix_1", "=", "tf", ".", "random", ".", "normal", "(", "\n", "[", "self", ".", "middle_dim", "]", ",", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "bias_var", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ",", "seed", "=", "None", ",", "name", "=", "None", ")", "\n", "\n", "\n", "layer11", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "input1", ",", "weight_matrix_1", ")", "+", "bias_matrix_1", ")", "\n", "\n", "layer21", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "input2", ",", "weight_matrix_1", ")", "+", "bias_matrix_1", ")", "\n", "\n", "output1", "=", "layer11", "\n", "output2", "=", "layer21", "\n", "\n", "\n", "output1_array", "=", "[", "]", "\n", "output2_array", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "\n", "            ", "weight_matrix", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "middle_dim", ",", "self", ".", "middle_dim", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "weight_var", "/", "self", ".", "output_dim", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ")", "\n", "\n", "bias_matrix", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "middle_dim", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "bias_var", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ",", "seed", "=", "None", ",", "name", "=", "None", ")", "\n", "output1", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "output1", ",", "weight_matrix", ")", "+", "bias_matrix", ")", "\n", "output2", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "output2", ",", "weight_matrix", ")", "+", "bias_matrix", ")", "\n", "\n", "if", "i", "%", "2", "==", "0", ":", "\n", "                ", "output1_array", ".", "append", "(", "output1", ")", "\n", "output2_array", ".", "append", "(", "output2", ")", "\n", "\n", "", "", "output1_", "=", "self", ".", "nonlin_fn", "(", "sum", "(", "output1_array", ")", ")", "\n", "output2_", "=", "self", ".", "nonlin_fn", "(", "sum", "(", "output2_array", ")", ")", "\n", "\n", "weight_matrix_final", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "middle_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "weight_var", "/", "self", ".", "input_dim", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ")", "\n", "\n", "bias_matrix_final", "=", "tf", ".", "random", ".", "normal", "(", "\n", "[", "self", ".", "output_dim", "]", ",", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "bias_var", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ",", "seed", "=", "None", ",", "name", "=", "None", ")", "\n", "\n", "output1", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "output1_", ",", "weight_matrix_final", ")", "+", "bias_matrix_final", ")", "\n", "\n", "output2", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "output2_", ",", "weight_matrix_final", ")", "+", "bias_matrix_final", ")", "\n", "\n", "kernel", "=", "tf", ".", "matmul", "(", "\n", "output1", ",", "output2", ",", "transpose_b", "=", "True", ")", "/", "self", ".", "middle_dim", "\n", "\n", "kernel", "+=", "kernel", "\n", "\n", "", "", "return", "kernel", "/", "self", ".", "repeated_time", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression._input_layer_normalization": [[187, 199], ["tensorflow.name_scope", "tensorflow.nn.moments", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "_input_layer_normalization", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"Input normalization to unit variance or fixed point variance.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"input_layer_normalization\"", ")", ":", "\n", "# Layer norm, fix to unit variance", "\n", "      ", "eps", "=", "1e-15", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "x_normalized", "=", "(", "x", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "eps", ")", "\n", "if", "self", ".", "use_fixed_point_norm", ":", "\n", "        ", "x_normalized", "*=", "tf", ".", "sqrt", "(", "\n", "(", "self", ".", "var_fixed_point", "[", "0", "]", "-", "self", ".", "bias_var", ")", "/", "self", ".", "weight_var", ")", "\n", "", "return", "x_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression.predict": [[200, 263], ["deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression._build_predict", "time.time", "sess.run", "print", "numpy.save", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression._build_cholesky", "time.time", "sess.run", "tensorflow.logging.info", "ArithmeticError", "sess.run", "sess.run", "tensorflow.logging.info", "sess.run", "tensorflow.logging.info", "time.time", "sess.run", "tensorflow.logging.info", "time.time", "tensorflow.logging.info", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_predict", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_cholesky"], ["", "", "def", "predict", "(", "self", ",", "test_x", ",", "sess", ",", "get_var", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute mean and varaince prediction for test inputs.\n\n    Raises:\n      ArithmeticError: Cholesky fails even after increasing to large values of\n        stability epsilon.\n    \"\"\"", "\n", "if", "self", ".", "l_np", "is", "None", ":", "\n", "\n", "      ", "KKDD", "=", "sess", ".", "run", "(", "self", ".", "k_data_data", ",", "\n", "feed_dict", "=", "{", "self", ".", "x_pl", ":", "self", ".", "input_x", "}", ")", "\n", "print", "(", "KKDD", ")", "\n", "np", ".", "save", "(", "'deep_kernel_400.npy'", ",", "KKDD", ")", "\n", "\n", "self", ".", "_build_cholesky", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "k_np", "=", "sess", ".", "run", "(", "self", ".", "k_data_data", ",", "\n", "feed_dict", "=", "{", "self", ".", "x_pl", ":", "self", ".", "input_x", "}", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Computed K_DD in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "while", "self", ".", "current_stability_eps", "<", "1", ":", "\n", "        ", "try", ":", "\n", "          ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "l_np", ",", "self", ".", "v_np", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "l", ",", "self", ".", "v", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "y_pl", ":", "self", ".", "output_y", ",", "\n", "self", ".", "k_data_data", ":", "self", ".", "k_np", ",", "\n", "self", ".", "stability_eps", ":", "self", ".", "current_stability_eps", "}", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"Computed L_DD in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "break", "\n", "\n", "", "except", "tf", ".", "errors", ".", "InvalidArgumentError", ":", "\n", "          ", "self", ".", "current_stability_eps", "*=", "10", "\n", "tf", ".", "logging", ".", "info", "(", "\"Cholesky decomposition failed, trying larger epsilon\"", "\n", "\": {}\"", ".", "format", "(", "self", ".", "current_stability_eps", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "current_stability_eps", ">", "0.2", ":", "\n", "      ", "raise", "ArithmeticError", "(", "\"Could not compute Cholesky decomposition.\"", ")", "\n", "\n", "", "n_test", "=", "test_x", ".", "shape", "[", "0", "]", "\n", "self", ".", "_build_predict", "(", "n_test", ")", "\n", "feed_dict", "=", "{", "\n", "self", ".", "x_pl", ":", "self", ".", "input_x", ",", "\n", "self", ".", "x_test_pl", ":", "test_x", ",", "\n", "self", ".", "l", ":", "self", ".", "l_np", ",", "\n", "self", ".", "v", ":", "self", ".", "v_np", "\n", "}", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "get_var", ":", "\n", "      ", "mean_pred", ",", "var_pred", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "fmean", ",", "self", ".", "fvar", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "k_d_d", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "k_data_data", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Did regression in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "mean_pred", ",", "var_pred", ",", "self", ".", "current_stability_eps", ",", "k_d_d", "\n", "\n", "", "else", ":", "\n", "      ", "mean_pred", "=", "sess", ".", "run", "(", "self", ".", "fmean", ",", "feed_dict", "=", "feed_dict", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Did regression in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "mean_pred", ",", "self", ".", "current_stability_eps", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp.Deep_NNGPKernel.__init__": [[62, 90], ["deep_nngp.Deep_NNGPKernel.get_grid", "ValueError", "deep_nngp.Deep_NNGPKernel.get_var_fixed_point"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "depth", "=", "1", ",", "\n", "nonlin_fn", "=", "tf", ".", "tanh", ",", "\n", "weight_var", "=", "1.", ",", "\n", "bias_var", "=", "1.", ",", "\n", "n_gauss", "=", "101", ",", "\n", "n_var", "=", "151", ",", "\n", "n_corr", "=", "131", ",", "\n", "max_var", "=", "100", ",", "\n", "max_gauss", "=", "100", ",", "\n", "use_fixed_point_norm", "=", "False", ",", "\n", "grid_path", "=", "None", ",", "\n", "sess", "=", "None", ")", ":", "\n", "    ", "self", ".", "depth", "=", "depth", "\n", "self", ".", "weight_var", "=", "weight_var", "\n", "self", ".", "bias_var", "=", "bias_var", "\n", "self", ".", "use_fixed_point_norm", "=", "use_fixed_point_norm", "\n", "self", ".", "sess", "=", "sess", "\n", "if", "FLAGS", ".", "use_precomputed_grid", "and", "(", "grid_path", "is", "None", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"grid_path must be specified to use precomputed grid.\"", ")", "\n", "", "self", ".", "grid_path", "=", "grid_path", "\n", "\n", "self", ".", "nonlin_fn", "=", "nonlin_fn", "\n", "(", "self", ".", "var_aa_grid", ",", "self", ".", "corr_ab_grid", ",", "self", ".", "qaa_grid", ",", "\n", "self", ".", "qab_grid", ")", "=", "self", ".", "get_grid", "(", "n_gauss", ",", "n_var", ",", "n_corr", ",", "max_var", ",", "max_gauss", ")", "\n", "\n", "if", "self", ".", "use_fixed_point_norm", ":", "\n", "      ", "self", ".", "var_fixed_point_np", ",", "self", ".", "var_fixed_point", "=", "self", ".", "get_var_fixed_point", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp.Deep_NNGPKernel.network": [[93, 95], ["None"], "methods", ["None"], ["", "", "def", "network", "(", "self", ")", ":", "\n", "      ", "self", ".", "input_dimension", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp.Deep_NNGPKernel.k_diag": [[98, 132], ["tensorflow.name_scope", "range", "tensorflow.tile", "tensorflow.name_scope", "interp.interp_lin", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "k_diag", "(", "self", ",", "input_x", ",", "return_full", "=", "True", ")", ":", "\n", "    ", "\"\"\"Iteratively building the diagonal part (variance) of the NNGP kernel.\n\n    Args:\n      input_x: tensor of input of size [num_data, input_dim].\n      return_full: boolean for output to be [num_data] sized or a scalar value\n        for normalized inputs\n\n    Sets self.layer_qaa_dict of {layer #: qaa at the layer}\n\n    Returns:\n      qaa: variance at the output.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"Kdiag\"", ")", ":", "\n", "# If normalized input length starts at 1.", "\n", "      ", "if", "self", ".", "use_fixed_point_norm", ":", "\n", "        ", "current_qaa", "=", "self", ".", "var_fixed_point", "\n", "", "else", ":", "\n", "        ", "current_qaa", "=", "self", ".", "weight_var", "*", "tf", ".", "convert_to_tensor", "(", "\n", "[", "1.", "]", ",", "dtype", "=", "tf", ".", "float64", ")", "+", "self", ".", "bias_var", "\n", "", "self", ".", "layer_qaa_dict", "=", "{", "0", ":", "current_qaa", "}", "\n", "for", "l", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"layer_%d\"", "%", "l", ")", ":", "\n", "          ", "samp_qaa", "=", "interp", ".", "interp_lin", "(", "\n", "self", ".", "var_aa_grid", ",", "self", ".", "qaa_grid", ",", "current_qaa", ")", "\n", "samp_qaa", "=", "self", ".", "weight_var", "*", "samp_qaa", "+", "self", ".", "bias_var", "\n", "self", ".", "layer_qaa_dict", "[", "l", "+", "1", "]", "=", "samp_qaa", "\n", "current_qaa", "=", "samp_qaa", "\n", "\n", "", "", "if", "return_full", ":", "\n", "        ", "qaa", "=", "tf", ".", "tile", "(", "current_qaa", "[", ":", "1", "]", ",", "(", "[", "input_x", ".", "shape", "[", "0", "]", ".", "value", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "qaa", "=", "current_qaa", "[", "0", "]", "\n", "", "return", "qaa", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp.Deep_NNGPKernel.k_full": [[133, 194], ["deep_nngp.Deep_NNGPKernel._input_layer_normalization", "tensorflow.reshape", "deep_nngp.Deep_NNGPKernel._input_layer_normalization", "tensorflow.name_scope", "deep_nngp.Deep_NNGPKernel.k_diag", "tensorflow.matmul", "deep_nngp.Deep_NNGPKernel._get_batch_size_and_count", "tensorflow.name_scope", "range", "tensorflow.parallel_stack", "tensorflow.name_scope", "tensorflow.reshape", "range", "tensorflow.name_scope", "tensorflow.reshape", "range", "tensorflow.parallel_stack.append", "tensorflow.name_scope", "interp.interp_lin_2d", "tensorflow.name_scope", "interp.interp_lin_2d"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp.Deep_NNGPKernel.k_diag", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp.Deep_NNGPKernel._get_batch_size_and_count"], ["", "", "def", "k_full", "(", "self", ",", "input1", ",", "input2", "=", "None", ")", ":", "\n", "    ", "\"\"\"Iteratively building the full NNGP kernel.\n    \"\"\"", "\n", "input1", "=", "self", ".", "_input_layer_normalization", "(", "input1", ")", "\n", "if", "input2", "is", "None", ":", "\n", "      ", "input2", "=", "input1", "\n", "", "else", ":", "\n", "      ", "input2", "=", "self", ".", "_input_layer_normalization", "(", "input2", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"k_full\"", ")", ":", "\n", "      ", "cov_init", "=", "tf", ".", "matmul", "(", "\n", "input1", ",", "input2", ",", "transpose_b", "=", "True", ")", "/", "input1", ".", "shape", "[", "1", "]", ".", "value", "\n", "\n", "self", ".", "k_diag", "(", "input1", ")", "\n", "q_aa_init", "=", "self", ".", "layer_qaa_dict", "[", "0", "]", "\n", "\n", "q_ab", "=", "cov_init", "\n", "q_ab", "=", "self", ".", "weight_var", "*", "q_ab", "+", "self", ".", "bias_var", "\n", "corr", "=", "q_ab", "/", "q_aa_init", "[", "0", "]", "\n", "\n", "if", "FLAGS", ".", "fraction_of_int32", ">", "1", ":", "\n", "        ", "batch_size", ",", "batch_count", "=", "self", ".", "_get_batch_size_and_count", "(", "input1", ",", "input2", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"q_ab\"", ")", ":", "\n", "          ", "q_ab_all", "=", "[", "]", "\n", "for", "b_x", "in", "range", "(", "batch_count", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"batch_%d\"", "%", "b_x", ")", ":", "\n", "              ", "corr_flat_batch", "=", "corr", "[", "\n", "batch_size", "*", "b_x", ":", "batch_size", "*", "(", "b_x", "+", "1", ")", ",", ":", "]", "\n", "corr_flat_batch", "=", "tf", ".", "reshape", "(", "corr_flat_batch", ",", "[", "-", "1", "]", ")", "\n", "\n", "for", "l", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"layer_%d\"", "%", "l", ")", ":", "\n", "                  ", "q_aa", "=", "self", ".", "layer_qaa_dict", "[", "l", "]", "\n", "q_ab", "=", "interp", ".", "interp_lin_2d", "(", "x", "=", "self", ".", "var_aa_grid", ",", "\n", "y", "=", "self", ".", "corr_ab_grid", ",", "\n", "z", "=", "self", ".", "qab_grid", ",", "\n", "xp", "=", "q_aa", ",", "\n", "yp", "=", "corr_flat_batch", ")", "\n", "\n", "q_ab", "=", "self", ".", "weight_var", "*", "q_ab", "+", "self", ".", "bias_var", "\n", "corr_flat_batch", "=", "q_ab", "/", "self", ".", "layer_qaa_dict", "[", "l", "+", "1", "]", "[", "0", "]", "\n", "\n", "", "", "q_ab_all", ".", "append", "(", "q_ab", ")", "\n", "\n", "", "", "q_ab_all", "=", "tf", ".", "parallel_stack", "(", "q_ab_all", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"q_ab\"", ")", ":", "\n", "          ", "corr_flat", "=", "tf", ".", "reshape", "(", "corr", ",", "[", "-", "1", "]", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"layer_%d\"", "%", "l", ")", ":", "\n", "              ", "q_aa", "=", "self", ".", "layer_qaa_dict", "[", "l", "]", "\n", "q_ab", "=", "interp", ".", "interp_lin_2d", "(", "x", "=", "self", ".", "var_aa_grid", ",", "\n", "y", "=", "self", ".", "corr_ab_grid", ",", "\n", "z", "=", "self", ".", "qab_grid", ",", "\n", "xp", "=", "q_aa", ",", "\n", "yp", "=", "corr_flat", ")", "\n", "q_ab", "=", "self", ".", "weight_var", "*", "q_ab", "+", "self", ".", "bias_var", "\n", "corr_flat", "=", "q_ab", "/", "self", ".", "layer_qaa_dict", "[", "l", "+", "1", "]", "[", "0", "]", "\n", "", "q_ab_all", "=", "q_ab", "\n", "\n", "", "", "", "", "return", "tf", ".", "reshape", "(", "q_ab_all", ",", "cov_init", ".", "shape", ",", "\"qab\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp.Deep_NNGPKernel._input_layer_normalization": [[195, 207], ["tensorflow.name_scope", "tensorflow.nn.moments", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "_input_layer_normalization", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"Input normalization to unit variance or fixed point variance.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"input_layer_normalization\"", ")", ":", "\n", "# Layer norm, fix to unit variance", "\n", "      ", "eps", "=", "1e-15", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "x_normalized", "=", "(", "x", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "eps", ")", "\n", "if", "self", ".", "use_fixed_point_norm", ":", "\n", "        ", "x_normalized", "*=", "tf", ".", "sqrt", "(", "\n", "(", "self", ".", "var_fixed_point", "[", "0", "]", "-", "self", ".", "bias_var", ")", "/", "self", ".", "weight_var", ")", "\n", "", "return", "x_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp.Deep_NNGPKernel._get_batch_size_and_count": [[208, 229], ["min", "numpy.iinfo"], "methods", ["None"], ["", "", "def", "_get_batch_size_and_count", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"Compute batch size and number to split when input size is large.\n\n    Args:\n      input1: tensor, input tensor to covariance matrix\n      input2: tensor, second input tensor to covariance matrix\n\n    Returns:\n      batch_size: int, size of each batch\n      batch_count: int, number of batches\n    \"\"\"", "\n", "input1_size", "=", "input1", ".", "shape", "[", "0", "]", ".", "value", "\n", "input2_size", "=", "input2", ".", "shape", "[", "0", "]", ".", "value", "\n", "\n", "batch_size", "=", "min", "(", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", "//", "\n", "(", "FLAGS", ".", "fraction_of_int32", "*", "input2_size", ")", ",", "input1_size", ")", "\n", "while", "input1_size", "%", "batch_size", "!=", "0", ":", "\n", "      ", "batch_size", "-=", "1", "\n", "\n", "", "batch_count", "=", "input1_size", "//", "batch_size", "\n", "return", "batch_size", ",", "batch_count", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp._fill_qab_slice": [[231, 243], ["tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.Print", "tensorflow.reduce_logsumexp", "nonlin_fn", "nonlin_fn"], "function", ["None"], ["", "", "def", "_fill_qab_slice", "(", "idx", ",", "z1", ",", "z2", ",", "var_aa", ",", "corr_ab", ",", "nonlin_fn", ")", ":", "\n", "  ", "\"\"\"Helper method used for parallel computation for full qab.\"\"\"", "\n", "log_weights_ab_unnorm", "=", "-", "(", "z1", "**", "2", "+", "z2", "**", "2", "-", "2", "*", "z1", "*", "z2", "*", "corr_ab", ")", "/", "(", "\n", "2", "*", "var_aa", "[", "idx", "]", "*", "(", "1", "-", "corr_ab", "**", "2", ")", ")", "\n", "log_weights_ab", "=", "log_weights_ab_unnorm", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "log_weights_ab_unnorm", ",", "axis", "=", "[", "0", ",", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "weights_ab", "=", "tf", ".", "exp", "(", "log_weights_ab", ")", "\n", "\n", "qab_slice", "=", "tf", ".", "reduce_sum", "(", "\n", "nonlin_fn", "(", "z1", ")", "*", "nonlin_fn", "(", "z2", ")", "*", "weights_ab", ",", "axis", "=", "[", "0", ",", "1", "]", ")", "\n", "qab_slice", "=", "tf", ".", "Print", "(", "qab_slice", ",", "[", "idx", "]", ",", "\"Generating slice: \"", ")", "\n", "return", "qab_slice", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp._compute_qmap_grid": [[245, 334], ["ValueError", "tensorflow.name_scope", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.map_fn", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.linspace", "tensorflow.exp", "tensorflow.linspace", "tensorflow.linspace", "tensorflow.reduce_logsumexp", "deep_nngp._fill_qab_slice", "tensorflow.range", "tensorflow.linspace", "tensorflow.reshape", "multiprocessing.cpu_count", "tensorflow.log", "tensorflow.log", "nonlin_fn"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_nngp._fill_qab_slice"], ["", "def", "_compute_qmap_grid", "(", "nonlin_fn", ",", "\n", "n_gauss", ",", "\n", "n_var", ",", "\n", "n_corr", ",", "\n", "log_spacing", "=", "False", ",", "\n", "min_var", "=", "1e-8", ",", "\n", "max_var", "=", "100.", ",", "\n", "max_corr", "=", "0.99999", ",", "\n", "max_gauss", "=", "10.", ")", ":", "\n", "  ", "\"\"\"Construct graph for covariance grid to use for kernel computation.\n\n  Given variance and correlation (or covariance) of pre-activation, perform\n  Gaussian integration to get covariance of post-activation.\n\n  Raises:\n    ValueError: if n_gauss is even integer.\n\n  Args:\n    nonlin_fn: tf ops corresponding to point-wise non-linearity in\n      corresponding NN. e.g.) tf.nn.relu, tf.nn.sigmoid,\n      lambda x: x * tf.nn.sigmoid(x), ...\n    n_gauss: int, number of Gaussian integration points with equal spacing\n      between (-max_gauss, max_gauss). Choose odd integer, so that there is a\n      gridpoint at 0.\n    n_var: int, number of variance grid points.get_grid\n    n_corr: int, number of correlation grid points.\n    log_spacing: bool, whether to use log-linear instead of linear variance\n      grid.\n    min_var: float, smallest variance value to generate grid.\n    max_var: float, largest varaince value to generate grid.\n    max_corr: float, largest correlation value to generate grid. Should be\n      slightly smaller than 1.\n    max_gauss: float, range (-max_gauss, max_gauss) for Gaussian integration.\n\n  Returns:\n    var_grid_pts: tensor of size [n_var], grid points where variance are\n      evaluated at.\n    corr_grid_pts: tensor of size [n_corr], grid points where correlation are\n      evalutated at.\n    qaa: tensor of size [n_var], variance of post-activation at given\n      pre-activation variance.\n    qab: tensor of size [n_var, n_corr], covariance of post-activation at\n      given pre-activation variance and correlation.\n  \"\"\"", "\n", "if", "n_gauss", "%", "2", "!=", "1", ":", "\n", "    ", "raise", "ValueError", "(", "\"n_gauss=%d should be an odd integer\"", "%", "n_gauss", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"compute_qmap_grid\"", ")", ":", "\n", "    ", "min_var", "=", "tf", ".", "convert_to_tensor", "(", "min_var", ",", "dtype", "=", "tf", ".", "float64", ")", "\n", "max_var", "=", "tf", ".", "convert_to_tensor", "(", "max_var", ",", "dtype", "=", "tf", ".", "float64", ")", "\n", "max_corr", "=", "tf", ".", "convert_to_tensor", "(", "max_corr", ",", "dtype", "=", "tf", ".", "float64", ")", "\n", "max_gauss", "=", "tf", ".", "convert_to_tensor", "(", "max_gauss", ",", "dtype", "=", "tf", ".", "float64", ")", "\n", "\n", "# Evaluation points for numerical integration over a Gaussian.", "\n", "z1", "=", "tf", ".", "reshape", "(", "tf", ".", "linspace", "(", "-", "max_gauss", ",", "max_gauss", ",", "n_gauss", ")", ",", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "z2", "=", "tf", ".", "transpose", "(", "z1", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "if", "log_spacing", ":", "\n", "      ", "var_aa", "=", "tf", ".", "exp", "(", "tf", ".", "linspace", "(", "tf", ".", "log", "(", "min_var", ")", ",", "tf", ".", "log", "(", "max_var", ")", ",", "n_var", ")", ")", "\n", "", "else", ":", "\n", "# Evaluation points for pre-activations variance and correlation", "\n", "      ", "var_aa", "=", "tf", ".", "linspace", "(", "min_var", ",", "max_var", ",", "n_var", ")", "\n", "", "corr_ab", "=", "tf", ".", "reshape", "(", "tf", ".", "linspace", "(", "-", "max_corr", ",", "max_corr", ",", "n_corr", ")", ",", "(", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "\n", "# compute q_aa", "\n", "log_weights_aa_unnorm", "=", "-", "0.5", "*", "(", "z1", "**", "2", "/", "tf", ".", "reshape", "(", "var_aa", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", ")", "\n", "log_weights_aa", "=", "log_weights_aa_unnorm", "-", "tf", ".", "reduce_logsumexp", "(", "\n", "log_weights_aa_unnorm", ",", "axis", "=", "[", "0", ",", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "weights_aa", "=", "tf", ".", "exp", "(", "log_weights_aa", ")", "\n", "qaa", "=", "tf", ".", "reduce_sum", "(", "nonlin_fn", "(", "z1", ")", "**", "2", "*", "weights_aa", ",", "axis", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "# compute q_ab", "\n", "# weights to reweight uniform samples by, for q_ab.", "\n", "# (weights are probability of z1, z2 under Gaussian", "\n", "#  w/ variance var_aa and covariance var_aa*corr_ab)", "\n", "# weights_ab will have shape [n_g, n_g, n_v, n_c]", "\n", "def", "fill_qab_slice", "(", "idx", ")", ":", "\n", "      ", "return", "_fill_qab_slice", "(", "idx", ",", "z1", ",", "z2", ",", "var_aa", ",", "corr_ab", ",", "nonlin_fn", ")", "\n", "\n", "", "qab", "=", "tf", ".", "map_fn", "(", "\n", "fill_qab_slice", ",", "\n", "tf", ".", "range", "(", "n_var", ")", ",", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "parallel_iterations", "=", "multiprocessing", ".", "cpu_count", "(", ")", ")", "\n", "\n", "var_grid_pts", "=", "tf", ".", "reshape", "(", "var_aa", ",", "[", "-", "1", "]", ")", "\n", "corr_grid_pts", "=", "tf", ".", "reshape", "(", "corr_ab", ",", "[", "-", "1", "]", ")", "\n", "\n", "return", "var_grid_pts", ",", "corr_grid_pts", ",", "qaa", ",", "qab", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr.DeepGaussianProcessRegression.__init__": [[41, 70], ["tensorflow.identity", "tensorflow.name_scope", "tensorflow.identity", "tensorflow.placeholder", "tensorflow.identity", "deep_numerical_gpr.DeepGaussianProcessRegression._generate_k_ful", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful"], ["def", "__init__", "(", "self", ",", "input_x", ",", "output_y", ",", "nonlin_fn", ",", "\n", "weight_var", "=", "1.", ",", "bias_var", "=", "1.", ",", "depth", "=", "500", ",", "\n", "random_seed", "=", "521", ",", "repeated_time", "=", "100", ",", "use_fixed_point_norm", "=", "False", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"init\"", ")", ":", "\n", "      ", "self", ".", "input_x", "=", "input_x", "\n", "self", ".", "weight_var", "=", "weight_var", "\n", "self", ".", "bias_var", "=", "bias_var", "\n", "self", ".", "output_y", "=", "output_y", "\n", "self", ".", "nonlin_fn", "=", "nonlin_fn", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "repeated_time", "=", "repeated_time", "\n", "self", ".", "num_train", ",", "self", ".", "input_dim", "=", "input_x", ".", "shape", "\n", "_", ",", "self", ".", "output_dim", "=", "output_y", ".", "shape", "\n", "self", ".", "use_fixed_point_norm", "=", "use_fixed_point_norm", "\n", "self", ".", "stability_eps", "=", "tf", ".", "identity", "(", "tf", ".", "placeholder", "(", "tf", ".", "float64", ")", ")", "\n", "self", ".", "current_stability_eps", "=", "1e-10", "\n", "self", ".", "middle_dim", "=", "10", "\n", "self", ".", "y_pl", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float64", ",", "[", "self", ".", "num_train", ",", "self", ".", "output_dim", "]", ",", "name", "=", "\"y_train\"", ")", "\n", "self", ".", "x_pl", "=", "tf", ".", "identity", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float64", ",", "[", "self", ".", "num_train", ",", "self", ".", "input_dim", "]", ",", "\n", "name", "=", "\"x_train\"", ")", ")", "\n", "\n", "self", ".", "l_np", "=", "None", "\n", "self", ".", "v_np", "=", "None", "\n", "self", ".", "k_np", "=", "None", "\n", "\n", "", "self", ".", "k_data_data", "=", "tf", ".", "identity", "(", "self", ".", "_generate_k_ful", "(", "self", ".", "x_pl", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr.DeepGaussianProcessRegression._build_predict": [[71, 93], ["tensorflow.logging.info", "deep_numerical_gpr.DeepGaussianProcessRegression._generate_k_ful", "tensorflow.name_scope", "tensorflow.identity", "tensorflow.name_scope", "tensorflow.matrix_triangular_solve", "tensorflow.matmul", "tensorflow.placeholder", "tensorflow.tile", "deep_numerical_gpr.DeepGaussianProcessRegression._generate_k_ful", "tensorflow.matmul", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful"], ["", "def", "_build_predict", "(", "self", ",", "n_test", ",", "full_cov", "=", "True", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"build_predict\"", ")", ":", "\n", "      ", "self", ".", "x_test_pl", "=", "tf", ".", "identity", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float64", ",", "[", "n_test", ",", "self", ".", "input_dim", "]", ",", "name", "=", "\"x_test_pl\"", ")", "\n", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"Using pre-computed Kernel\"", ")", "\n", "self", ".", "k_data_test", "=", "self", ".", "_generate_k_ful", "(", "self", ".", "x_pl", ",", "self", ".", "x_test_pl", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"build_predict\"", ")", ":", "\n", "      ", "a", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "l", ",", "self", ".", "k_data_test", ")", "\n", "fmean", "=", "tf", ".", "matmul", "(", "a", ",", "self", ".", "v", ",", "transpose_a", "=", "True", ")", "\n", "\n", "if", "full_cov", ":", "\n", "        ", "fvar", "=", "self", ".", "_generate_k_ful", "(", "self", ".", "x_test_pl", ")", "-", "tf", ".", "matmul", "(", "\n", "a", ",", "a", ",", "transpose_a", "=", "True", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "self", ".", "y_pl", ".", "shape", "[", "1", "]", "]", "\n", "fvar", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "fvar", ",", "2", ")", ",", "shape", ")", "\n", "\n", "\n", "", "self", ".", "fmean", "=", "fmean", "\n", "self", ".", "fvar", "=", "fvar", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr.DeepGaussianProcessRegression._build_cholesky": [[95, 105], ["tensorflow.logging.info", "tensorflow.cholesky", "tensorflow.matrix_triangular_solve", "tensorflow.Print", "tensorflow.eye"], "methods", ["None"], ["", "", "def", "_build_cholesky", "(", "self", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Computing Kernel\"", ")", "\n", "self", ".", "k_data_data_reg", "=", "self", ".", "k_data_data", "+", "tf", ".", "eye", "(", "\n", "self", ".", "input_x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float64", ")", "*", "self", ".", "stability_eps", "\n", "if", "FLAGS", ".", "print_kernel", ":", "\n", "      ", "self", ".", "k_data_data_reg", "=", "tf", ".", "Print", "(", "\n", "self", ".", "k_data_data_reg", ",", "[", "self", ".", "k_data_data_reg", "]", ",", "\n", "message", "=", "\"K_DD = \"", ",", "summarize", "=", "100", ")", "\n", "", "self", ".", "l", "=", "tf", ".", "cholesky", "(", "self", ".", "k_data_data_reg", ")", "\n", "self", ".", "v", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "l", ",", "self", ".", "y_pl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr.DeepGaussianProcessRegression._generate_k_ful": [[108, 183], ["tensorflow.name_scope", "numpy.arange", "tensorflow.random.normal", "tensorflow.random.normal", "deep_numerical_gpr.DeepGaussianProcessRegression.nonlin_fn", "deep_numerical_gpr.DeepGaussianProcessRegression.nonlin_fn", "range", "deep_numerical_gpr.DeepGaussianProcessRegression.nonlin_fn", "deep_numerical_gpr.DeepGaussianProcessRegression.nonlin_fn", "tensorflow.random.normal", "tensorflow.random.normal", "deep_numerical_gpr.DeepGaussianProcessRegression.nonlin_fn", "deep_numerical_gpr.DeepGaussianProcessRegression.nonlin_fn", "tensorflow.random.normal", "tensorflow.random.normal", "deep_numerical_gpr.DeepGaussianProcessRegression.nonlin_fn", "deep_numerical_gpr.DeepGaussianProcessRegression.nonlin_fn", "output1_array.append", "output2_array.append", "sum", "sum", "tensorflow.matmul", "numpy.sqrt", "numpy.sqrt", "tensorflow.matmul", "tensorflow.matmul", "numpy.sqrt", "numpy.sqrt", "tensorflow.matmul", "tensorflow.matmul", "numpy.sqrt", "numpy.sqrt", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "_generate_k_ful", "(", "self", ",", "input1", ",", "input2", "=", "None", ")", ":", "\n", "    ", "\"\"\"Iteratively building the diagonal part (variance) of the NNGP kernel.\n\n    Args:\n      input_x: tensor of input of size [num_data, input_dim].\n      return_full: boolean for output to be [num_data] sized or a scalar value\n        for normalized inputs\n\n    Sets self.layer_qaa_dict of {layer #: qaa at the layer}\n\n    Returns:\n      qaa: variance at the output.\n    \"\"\"", "\n", "\n", "if", "input2", "is", "None", ":", "\n", "      ", "input2", "=", "input1", "\n", "\n", "\n", "", "kernel", "=", "[", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"k_full\"", ")", ":", "\n", "\n", "\n", "      ", "for", "r", "in", "np", ".", "arange", "(", "self", ".", "repeated_time", ")", ":", "\n", "        ", "weight_matrix_1", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "input_dim", ",", "self", ".", "middle_dim", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "weight_var", "/", "self", ".", "input_dim", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ")", "\n", "\n", "bias_matrix_1", "=", "tf", ".", "random", ".", "normal", "(", "\n", "[", "self", ".", "middle_dim", "]", ",", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "bias_var", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ",", "seed", "=", "None", ",", "name", "=", "None", ")", "\n", "\n", "\n", "layer11", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "input1", ",", "weight_matrix_1", ")", "+", "bias_matrix_1", ")", "\n", "\n", "layer21", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "input2", ",", "weight_matrix_1", ")", "+", "bias_matrix_1", ")", "\n", "\n", "output1", "=", "layer11", "\n", "output2", "=", "layer21", "\n", "\n", "\n", "output1_array", "=", "[", "]", "\n", "output2_array", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "\n", "            ", "weight_matrix", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "middle_dim", ",", "self", ".", "middle_dim", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "weight_var", "/", "self", ".", "output_dim", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ")", "\n", "\n", "bias_matrix", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "middle_dim", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "bias_var", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ",", "seed", "=", "None", ",", "name", "=", "None", ")", "\n", "output1", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "output1", ",", "weight_matrix", ")", "+", "bias_matrix", ")", "\n", "output2", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "output2", ",", "weight_matrix", ")", "+", "bias_matrix", ")", "\n", "\n", "output1_array", ".", "append", "(", "output1", ")", "\n", "output2_array", ".", "append", "(", "output2", ")", "\n", "\n", "\n", "", "output1_", "=", "self", ".", "nonlin_fn", "(", "sum", "(", "output1_array", ")", ")", "\n", "output2_", "=", "self", ".", "nonlin_fn", "(", "sum", "(", "output2_array", ")", ")", "\n", "\n", "weight_matrix_final", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "middle_dim", ",", "self", ".", "output_dim", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "weight_var", "/", "self", ".", "input_dim", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ")", "\n", "\n", "bias_matrix_final", "=", "tf", ".", "random", ".", "normal", "(", "\n", "[", "self", ".", "output_dim", "]", ",", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "bias_var", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ",", "seed", "=", "None", ",", "name", "=", "None", ")", "\n", "\n", "output1", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "output1_", ",", "weight_matrix_final", ")", "+", "bias_matrix_final", ")", "\n", "\n", "output2", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "output2_", ",", "weight_matrix_final", ")", "+", "bias_matrix_final", ")", "\n", "\n", "kernel", "=", "tf", ".", "matmul", "(", "\n", "output1", ",", "output2", ",", "transpose_b", "=", "True", ")", "/", "self", ".", "middle_dim", "\n", "\n", "kernel", "+=", "kernel", "\n", "\n", "", "", "return", "kernel", "/", "self", ".", "repeated_time", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr.DeepGaussianProcessRegression._input_layer_normalization": [[186, 198], ["tensorflow.name_scope", "tensorflow.nn.moments", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "_input_layer_normalization", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"Input normalization to unit variance or fixed point variance.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"input_layer_normalization\"", ")", ":", "\n", "# Layer norm, fix to unit variance", "\n", "      ", "eps", "=", "1e-15", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "x_normalized", "=", "(", "x", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "eps", ")", "\n", "if", "self", ".", "use_fixed_point_norm", ":", "\n", "        ", "x_normalized", "*=", "tf", ".", "sqrt", "(", "\n", "(", "self", ".", "var_fixed_point", "[", "0", "]", "-", "self", ".", "bias_var", ")", "/", "self", ".", "weight_var", ")", "\n", "", "return", "x_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.deep_numerical_gpr.DeepGaussianProcessRegression.predict": [[199, 261], ["deep_numerical_gpr.DeepGaussianProcessRegression._build_predict", "time.time", "sess.run", "print", "numpy.save", "deep_numerical_gpr.DeepGaussianProcessRegression._build_cholesky", "time.time", "sess.run", "tensorflow.logging.info", "ArithmeticError", "sess.run", "sess.run", "tensorflow.logging.info", "sess.run", "tensorflow.logging.info", "time.time", "sess.run", "tensorflow.logging.info", "time.time", "tensorflow.logging.info", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_predict", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_cholesky"], ["", "", "def", "predict", "(", "self", ",", "test_x", ",", "sess", ",", "get_var", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute mean and varaince prediction for test inputs.\n\n    Raises:\n      ArithmeticError: Cholesky fails even after increasing to large values of\n        stability epsilon.\n    \"\"\"", "\n", "if", "self", ".", "l_np", "is", "None", ":", "\n", "      ", "KKDD", "=", "sess", ".", "run", "(", "self", ".", "k_data_data", ",", "\n", "feed_dict", "=", "{", "self", ".", "x_pl", ":", "self", ".", "input_x", "}", ")", "\n", "print", "(", "KKDD", ")", "\n", "np", ".", "save", "(", "'deep_kernel_200.npy'", ",", "KKDD", ")", "\n", "\n", "self", ".", "_build_cholesky", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "k_np", "=", "sess", ".", "run", "(", "self", ".", "k_data_data", ",", "\n", "feed_dict", "=", "{", "self", ".", "x_pl", ":", "self", ".", "input_x", "}", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Computed K_DD in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "while", "self", ".", "current_stability_eps", "<", "1", ":", "\n", "        ", "try", ":", "\n", "          ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "l_np", ",", "self", ".", "v_np", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "l", ",", "self", ".", "v", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "y_pl", ":", "self", ".", "output_y", ",", "\n", "self", ".", "k_data_data", ":", "self", ".", "k_np", ",", "\n", "self", ".", "stability_eps", ":", "self", ".", "current_stability_eps", "}", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"Computed L_DD in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "break", "\n", "\n", "", "except", "tf", ".", "errors", ".", "InvalidArgumentError", ":", "\n", "          ", "self", ".", "current_stability_eps", "*=", "10", "\n", "tf", ".", "logging", ".", "info", "(", "\"Cholesky decomposition failed, trying larger epsilon\"", "\n", "\": {}\"", ".", "format", "(", "self", ".", "current_stability_eps", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "current_stability_eps", ">", "0.2", ":", "\n", "      ", "raise", "ArithmeticError", "(", "\"Could not compute Cholesky decomposition.\"", ")", "\n", "\n", "", "n_test", "=", "test_x", ".", "shape", "[", "0", "]", "\n", "self", ".", "_build_predict", "(", "n_test", ")", "\n", "feed_dict", "=", "{", "\n", "self", ".", "x_pl", ":", "self", ".", "input_x", ",", "\n", "self", ".", "x_test_pl", ":", "test_x", ",", "\n", "self", ".", "l", ":", "self", ".", "l_np", ",", "\n", "self", ".", "v", ":", "self", ".", "v_np", "\n", "}", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "get_var", ":", "\n", "      ", "mean_pred", ",", "var_pred", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "fmean", ",", "self", ".", "fvar", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "k_d_d", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "k_data_data", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Did regression in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "mean_pred", ",", "var_pred", ",", "self", ".", "current_stability_eps", ",", "k_d_d", "\n", "\n", "", "else", ":", "\n", "      ", "mean_pred", "=", "sess", ".", "run", "(", "self", ".", "fmean", ",", "feed_dict", "=", "feed_dict", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Did regression in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "mean_pred", ",", "self", ".", "current_stability_eps", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.load_dataset.load_mnist": [[40, 57], ["tensorflow.examples.tutorials.mnist.input_data.read_data_sets", "load_dataset._select_mnist_subset"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset._select_mnist_subset"], ["def", "load_mnist", "(", "num_train", "=", "50000", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Loads MNIST as numpy array.\"\"\"", "\n", "\n", "data_dir", "=", "FLAGS", ".", "data_dir", "\n", "datasets", "=", "input_data", ".", "read_data_sets", "(", "\n", "data_dir", ",", "False", ",", "validation_size", "=", "10000", ",", "one_hot", "=", "True", ")", "\n", "mnist_data", "=", "_select_mnist_subset", "(", "\n", "datasets", ",", "\n", "num_train", ",", "\n", "use_float64", "=", "use_float64", ",", "\n", "mean_subtraction", "=", "mean_subtraction", ",", "\n", "random_roated_labels", "=", "random_roated_labels", ")", "\n", "\n", "return", "mnist_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.load_dataset._select_mnist_subset": [[61, 123], ["list", "numpy.random.seed", "digits.sort", "copy.deepcopy", "len", "numpy.array", "numpy.argmax", "[].astype", "[].astype", "copy.deepcopy.validation.images.astype", "copy.deepcopy.validation.labels.astype", "copy.deepcopy.test.images.astype", "copy.deepcopy.test.labels.astype", "range", "numpy.random.shuffle", "numpy.argsort", "numpy.mean", "numpy.mean", "numpy.linalg.qr", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.concatenate", "numpy.concatenate", "numpy.argmax", "numpy.random.rand", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "_select_mnist_subset", "(", "datasets", ",", "\n", "num_train", "=", "100", ",", "\n", "digits", "=", "list", "(", "range", "(", "10", ")", ")", ",", "\n", "seed", "=", "9999", ",", "\n", "sort_by_class", "=", "False", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Select subset of MNIST and apply preprocessing.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "digits", ".", "sort", "(", ")", "\n", "subset", "=", "copy", ".", "deepcopy", "(", "datasets", ")", "\n", "\n", "num_class", "=", "len", "(", "digits", ")", "\n", "num_per_class", "=", "num_train", "//", "num_class", "\n", "\n", "idx_list", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "ys", "=", "np", ".", "argmax", "(", "subset", ".", "train", ".", "labels", ",", "axis", "=", "1", ")", "# undo one-hot", "\n", "\n", "for", "digit", "in", "digits", ":", "\n", "    ", "if", "datasets", ".", "train", ".", "num_examples", "==", "num_train", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "\n", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", "[", ":", "num_per_class", "]", ")", ")", "\n", "", "", "if", "not", "sort_by_class", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "\n", "", "data_precision", "=", "np", ".", "float64", "if", "use_float64", "else", "np", ".", "float32", "\n", "\n", "train_image", "=", "subset", ".", "train", ".", "images", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "train_label", "=", "subset", ".", "train", ".", "labels", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_image", "=", "subset", ".", "validation", ".", "images", ".", "astype", "(", "data_precision", ")", "\n", "valid_label", "=", "subset", ".", "validation", ".", "labels", ".", "astype", "(", "data_precision", ")", "\n", "test_image", "=", "subset", ".", "test", ".", "images", ".", "astype", "(", "data_precision", ")", "\n", "test_label", "=", "subset", ".", "test", ".", "labels", ".", "astype", "(", "data_precision", ")", "\n", "\n", "if", "sort_by_class", ":", "\n", "    ", "train_idx", "=", "np", ".", "argsort", "(", "np", ".", "argmax", "(", "train_label", ",", "axis", "=", "1", ")", ")", "\n", "train_image", "=", "train_image", "[", "train_idx", "]", "\n", "train_label", "=", "train_label", "[", "train_idx", "]", "\n", "\n", "", "if", "mean_subtraction", ":", "\n", "    ", "train_image_mean", "=", "np", ".", "mean", "(", "train_image", ")", "\n", "train_label_mean", "=", "np", ".", "mean", "(", "train_label", ")", "\n", "train_image", "-=", "train_image_mean", "\n", "train_label", "-=", "train_label_mean", "\n", "valid_image", "-=", "train_image_mean", "\n", "valid_label", "-=", "train_label_mean", "\n", "test_image", "-=", "train_image_mean", "\n", "test_label", "-=", "train_label_mean", "\n", "\n", "", "if", "random_roated_labels", ":", "\n", "    ", "r", ",", "_", "=", "np", ".", "linalg", ".", "qr", "(", "np", ".", "random", ".", "rand", "(", "10", ",", "10", ")", ")", "\n", "train_label", "=", "np", ".", "dot", "(", "train_label", ",", "r", ")", "\n", "valid_label", "=", "np", ".", "dot", "(", "valid_label", ",", "r", ")", "\n", "test_label", "=", "np", ".", "dot", "(", "test_label", ",", "r", ")", "\n", "\n", "", "return", "(", "train_image", ",", "train_label", ",", "\n", "valid_image", ",", "valid_label", ",", "\n", "test_image", ",", "test_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.load_dataset.load_fashion_mnist": [[126, 156], ["fashion_mnist.load_data", "numpy.reshape", "numpy.reshape", "numpy.arange", "numpy.zeros", "numpy.arange", "numpy.zeros", "load_dataset._select_fashion_mnist_subset"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset._select_fashion_mnist_subset"], ["", "def", "load_fashion_mnist", "(", "num_train", "=", "50000", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Loads MNIST as numpy array.\"\"\"", "\n", "\n", "data_dir", "=", "FLAGS", ".", "data_dir", "\n", "\n", "fashion_mnist", "=", "tf", ".", "keras", ".", "datasets", ".", "fashion_mnist", "\n", "\n", "(", "train_images", ",", "tr_labels", ")", ",", "(", "test_images", ",", "te_labels", ")", "=", "fashion_mnist", ".", "load_data", "(", ")", "\n", "\n", "train_images", "=", "np", ".", "reshape", "(", "train_images", ",", "(", "60000", ",", "-", "1", ")", ")", "\n", "test_images", "=", "np", ".", "reshape", "(", "test_images", ",", "(", "10000", ",", "-", "1", ")", ")", "\n", "index_tr", "=", "np", ".", "arange", "(", "60000", ")", "\n", "train_labels", "=", "np", ".", "zeros", "(", "(", "60000", ",", "10", ")", ")", "\n", "train_labels", "[", "index_tr", ",", "tr_labels", "]", "=", "1", "\n", "index_te", "=", "np", ".", "arange", "(", "10000", ")", "\n", "test_labels", "=", "np", ".", "zeros", "(", "(", "10000", ",", "10", ")", ")", "\n", "test_labels", "[", "index_te", ",", "te_labels", "]", "=", "1", "\n", "\n", "\n", "fashion_mnist_data", "=", "_select_fashion_mnist_subset", "(", "\n", "train_images", ",", "train_labels", ",", "test_images", ",", "test_labels", ",", "\n", "num_train", ",", "\n", "use_float64", "=", "use_float64", ",", "\n", "mean_subtraction", "=", "mean_subtraction", ",", "\n", "random_roated_labels", "=", "random_roated_labels", ")", "\n", "\n", "return", "fashion_mnist_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.load_dataset._select_fashion_mnist_subset": [[160, 222], ["list", "numpy.random.seed", "digits.sort", "len", "numpy.array", "numpy.argmax", "[].astype", "[].astype", "[].astype", "[].astype", "test_images.astype", "test_labels.astype", "range", "numpy.random.shuffle", "numpy.argsort", "numpy.mean", "numpy.mean", "numpy.linalg.qr", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.concatenate", "numpy.concatenate", "numpy.argmax", "numpy.random.rand", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "_select_fashion_mnist_subset", "(", "train_images", ",", "train_labels", ",", "test_images", ",", "test_labels", ",", "\n", "num_train", "=", "100", ",", "\n", "digits", "=", "list", "(", "range", "(", "10", ")", ")", ",", "\n", "seed", "=", "9999", ",", "\n", "sort_by_class", "=", "False", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Select subset of MNIST and apply preprocessing.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "digits", ".", "sort", "(", ")", "\n", "\n", "\n", "num_class", "=", "len", "(", "digits", ")", "\n", "num_per_class", "=", "num_train", "//", "num_class", "\n", "\n", "idx_list", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "ys", "=", "np", ".", "argmax", "(", "train_labels", ",", "axis", "=", "1", ")", "# undo one-hot", "\n", "\n", "for", "digit", "in", "digits", ":", "\n", "    ", "if", "50000", "==", "num_train", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "\n", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", "[", ":", "num_per_class", "]", ")", ")", "\n", "", "", "if", "not", "sort_by_class", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "\n", "", "data_precision", "=", "np", ".", "float64", "if", "use_float64", "else", "np", ".", "float32", "\n", "\n", "train_image", "=", "train_images", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "train_label", "=", "train_labels", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_image", "=", "train_images", "[", "idx_list", "]", "[", "num_train", ":", "num_train", "+", "1000", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_label", "=", "train_labels", "[", "idx_list", "]", "[", "num_train", ":", "num_train", "+", "1000", "]", ".", "astype", "(", "data_precision", ")", "\n", "test_image", "=", "test_images", ".", "astype", "(", "data_precision", ")", "\n", "test_label", "=", "test_labels", ".", "astype", "(", "data_precision", ")", "\n", "\n", "if", "sort_by_class", ":", "\n", "    ", "train_idx", "=", "np", ".", "argsort", "(", "np", ".", "argmax", "(", "train_label", ",", "axis", "=", "1", ")", ")", "\n", "train_image", "=", "train_image", "[", "train_idx", "]", "\n", "train_label", "=", "train_label", "[", "train_idx", "]", "\n", "\n", "", "if", "mean_subtraction", ":", "\n", "    ", "train_image_mean", "=", "np", ".", "mean", "(", "train_image", ")", "\n", "train_label_mean", "=", "np", ".", "mean", "(", "train_label", ")", "\n", "train_image", "-=", "train_image_mean", "\n", "train_label", "-=", "train_label_mean", "\n", "valid_image", "-=", "train_image_mean", "\n", "valid_label", "-=", "train_label_mean", "\n", "test_image", "-=", "train_image_mean", "\n", "test_label", "-=", "train_label_mean", "\n", "\n", "", "if", "random_roated_labels", ":", "\n", "    ", "r", ",", "_", "=", "np", ".", "linalg", ".", "qr", "(", "np", ".", "random", ".", "rand", "(", "10", ",", "10", ")", ")", "\n", "train_label", "=", "np", ".", "dot", "(", "train_label", ",", "r", ")", "\n", "valid_label", "=", "np", ".", "dot", "(", "valid_label", ",", "r", ")", "\n", "test_label", "=", "np", ".", "dot", "(", "test_label", ",", "r", ")", "\n", "\n", "", "return", "(", "train_image", ",", "train_label", ",", "\n", "valid_image", ",", "valid_label", ",", "\n", "test_image", ",", "test_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.load_dataset.load_cifar10": [[224, 254], ["cifar10.load_data", "numpy.reshape", "numpy.reshape", "numpy.arange", "numpy.zeros", "numpy.arange", "numpy.zeros", "load_dataset._select_cifar10_subset"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset._select_cifar10_subset"], ["", "def", "load_cifar10", "(", "num_train", "=", "40000", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Loads MNIST as numpy array.\"\"\"", "\n", "\n", "data_dir", "=", "FLAGS", ".", "data_dir", "\n", "\n", "cifar10", "=", "tf", ".", "keras", ".", "datasets", ".", "cifar10", "\n", "\n", "(", "train_images", ",", "tr_labels", ")", ",", "(", "test_images", ",", "te_labels", ")", "=", "cifar10", ".", "load_data", "(", ")", "\n", "\n", "train_images", "=", "np", ".", "reshape", "(", "train_images", ",", "(", "50000", ",", "-", "1", ")", ")", "\n", "test_images", "=", "np", ".", "reshape", "(", "test_images", ",", "(", "10000", ",", "-", "1", ")", ")", "\n", "index_tr", "=", "np", ".", "arange", "(", "50000", ")", "\n", "train_labels", "=", "np", ".", "zeros", "(", "(", "50000", ",", "10", ")", ")", "\n", "train_labels", "[", "index_tr", ",", "tr_labels", "[", ":", ",", "0", "]", "]", "=", "1", "\n", "index_te", "=", "np", ".", "arange", "(", "10000", ")", "\n", "test_labels", "=", "np", ".", "zeros", "(", "(", "10000", ",", "10", ")", ")", "\n", "test_labels", "[", "index_te", ",", "te_labels", "[", ":", ",", "0", "]", "]", "=", "1", "\n", "\n", "\n", "cifar10_data", "=", "_select_cifar10_subset", "(", "\n", "train_images", ",", "train_labels", ",", "test_images", ",", "test_labels", ",", "\n", "num_train", ",", "\n", "use_float64", "=", "use_float64", ",", "\n", "mean_subtraction", "=", "mean_subtraction", ",", "\n", "random_roated_labels", "=", "random_roated_labels", ")", "\n", "\n", "return", "cifar10_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.load_dataset._select_cifar10_subset": [[258, 320], ["list", "numpy.random.seed", "digits.sort", "len", "numpy.array", "numpy.argmax", "[].astype", "[].astype", "[].astype", "[].astype", "test_images.astype", "test_labels.astype", "range", "numpy.random.shuffle", "numpy.argsort", "numpy.mean", "numpy.mean", "numpy.linalg.qr", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.concatenate", "numpy.concatenate", "numpy.argmax", "numpy.random.rand", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "_select_cifar10_subset", "(", "train_images", ",", "train_labels", ",", "test_images", ",", "test_labels", ",", "\n", "num_train", "=", "100", ",", "\n", "digits", "=", "list", "(", "range", "(", "10", ")", ")", ",", "\n", "seed", "=", "9999", ",", "\n", "sort_by_class", "=", "False", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Select subset of MNIST and apply preprocessing.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "digits", ".", "sort", "(", ")", "\n", "\n", "\n", "num_class", "=", "len", "(", "digits", ")", "\n", "num_per_class", "=", "num_train", "//", "num_class", "\n", "\n", "idx_list", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "ys", "=", "np", ".", "argmax", "(", "train_labels", ",", "axis", "=", "1", ")", "# undo one-hot", "\n", "\n", "for", "digit", "in", "digits", ":", "\n", "    ", "if", "40000", "==", "num_train", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "\n", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", "[", ":", "num_per_class", "]", ")", ")", "\n", "", "", "if", "not", "sort_by_class", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "\n", "", "data_precision", "=", "np", ".", "float64", "if", "use_float64", "else", "np", ".", "float32", "\n", "\n", "train_image", "=", "train_images", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "train_label", "=", "train_labels", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_image", "=", "train_images", "[", "idx_list", "]", "[", "num_train", ":", "num_train", "+", "1000", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_label", "=", "train_labels", "[", "idx_list", "]", "[", "num_train", ":", "num_train", "+", "1000", "]", ".", "astype", "(", "data_precision", ")", "\n", "test_image", "=", "test_images", ".", "astype", "(", "data_precision", ")", "\n", "test_label", "=", "test_labels", ".", "astype", "(", "data_precision", ")", "\n", "\n", "if", "sort_by_class", ":", "\n", "    ", "train_idx", "=", "np", ".", "argsort", "(", "np", ".", "argmax", "(", "train_label", ",", "axis", "=", "1", ")", ")", "\n", "train_image", "=", "train_image", "[", "train_idx", "]", "\n", "train_label", "=", "train_label", "[", "train_idx", "]", "\n", "\n", "", "if", "mean_subtraction", ":", "\n", "    ", "train_image_mean", "=", "np", ".", "mean", "(", "train_image", ")", "\n", "train_label_mean", "=", "np", ".", "mean", "(", "train_label", ")", "\n", "train_image", "-=", "train_image_mean", "\n", "train_label", "-=", "train_label_mean", "\n", "valid_image", "-=", "train_image_mean", "\n", "valid_label", "-=", "train_label_mean", "\n", "test_image", "-=", "train_image_mean", "\n", "test_label", "-=", "train_label_mean", "\n", "\n", "", "if", "random_roated_labels", ":", "\n", "    ", "r", ",", "_", "=", "np", ".", "linalg", ".", "qr", "(", "np", ".", "random", ".", "rand", "(", "10", ",", "10", ")", ")", "\n", "train_label", "=", "np", ".", "dot", "(", "train_label", ",", "r", ")", "\n", "valid_label", "=", "np", ".", "dot", "(", "valid_label", ",", "r", ")", "\n", "test_label", "=", "np", ".", "dot", "(", "test_label", ",", "r", ")", "\n", "\n", "", "return", "(", "train_image", ",", "train_label", ",", "\n", "valid_image", ",", "valid_label", ",", "\n", "test_image", ",", "test_label", ")", "", "", ""]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.run_numerical_depth_hbar_2.set_default_hparams": [[91, 94], ["tensorflow.contrib.training.HParams"], "function", ["None"], ["def", "set_default_hparams", "(", ")", ":", "\n", "  ", "return", "tf", ".", "contrib", ".", "training", ".", "HParams", "(", "\n", "nonlinearity", "=", "'tanh'", ",", "weight_var", "=", "0.5", ",", "bias_var", "=", "0", ",", "depth", "=", "400", ",", "random_seed", "=", "520", ",", "repeated_time", "=", "40", ",", "use_fixed_point_norm", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.run_numerical_depth_hbar_2.do_eval": [[96, 119], ["model.predict", "print", "numpy.save", "print", "print", "numpy.argmax", "numpy.mean", "numpy.mean", "tensorflow.logging.info", "tensorflow.logging.info", "numpy.sum", "float", "numpy.mean", "numpy.linalg.norm", "len", "tensorflow.gfile.Open", "numpy.save", "numpy.argmax", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression.predict"], ["", "def", "do_eval", "(", "sess", ",", "model", ",", "x_data", ",", "y_data", ",", "save_pred", "=", "False", ")", ":", "\n", "  ", "\"\"\"Run evaluation.\"\"\"", "\n", "\n", "gp_prediction", ",", "variance", ",", "stability_eps", ",", "K_D_D", "=", "model", ".", "predict", "(", "x_data", ",", "sess", ")", "\n", "print", "(", "K_D_D", ")", "\n", "np", ".", "save", "(", "'deep_kernel_400.npy'", ",", "K_D_D", ")", "\n", "print", "(", "gp_prediction", ")", "\n", "print", "(", "y_data", ")", "\n", "\n", "pred_1", "=", "np", ".", "argmax", "(", "gp_prediction", ",", "axis", "=", "1", ")", "\n", "accuracy", "=", "np", ".", "sum", "(", "pred_1", "==", "np", ".", "argmax", "(", "y_data", ",", "axis", "=", "1", ")", ")", "/", "float", "(", "len", "(", "y_data", ")", ")", "\n", "mse", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "(", "gp_prediction", "-", "y_data", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "pred_norm", "=", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "gp_prediction", ",", "axis", "=", "1", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Accuracy: %.4f'", "%", "accuracy", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'MSE: %.8f'", "%", "mse", ")", "\n", "\n", "if", "save_pred", ":", "\n", "    ", "with", "tf", ".", "gfile", ".", "Open", "(", "\n", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "experiment_dir", ",", "'gp_prediction_stats.npy'", ")", ",", "\n", "'w'", ")", "as", "f", ":", "\n", "      ", "np", ".", "save", "(", "f", ",", "gp_prediction", ")", "\n", "\n", "", "", "return", "accuracy", ",", "variance", ",", "mse", ",", "pred_norm", ",", "stability_eps", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.run_numerical_depth_hbar_2.run_nngp_eval": [[121, 247], ["tensorflow.gfile.MakeDirs", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "os.path.join", "tensorflow.gfile.GFile", "f.write", "load_dataset.load_fashion_mnist", "print", "print", "load_dataset.load_cifar10", "print", "print", "tensorflow.Session", "deep_numerical_gpr_hbar_2.DeepGaussianProcessRegression", "time.time", "time.time", "tensorflow.logging.info", "time.time", "time.time", "time.time", "time.time", "tensorflow.logging.info", "run_numerical_depth_hbar_2.do_eval", "tensorflow.logging.info", "time.time", "time.time", "tensorflow.logging.info", "run_numerical_depth_hbar_2.do_eval", "time.time", "time.time", "print", "tensorflow.logging.info", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "tensorflow.gfile.Open", "csv.writer", "csv.writer.writerow", "hparams.to_proto().SerializeToString", "run_numerical_depth_hbar_2.do_eval", "tensorflow.logging.info", "run_numerical_depth_hbar_2.do_eval", "tensorflow.logging.info", "hparams.to_proto", "min", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset.load_fashion_mnist", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset.load_cifar10", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval"], ["", "def", "run_nngp_eval", "(", "hparams", ",", "run_dir", ")", ":", "\n", "  ", "\"\"\"Runs experiments.\"\"\"", "\n", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "run_dir", ")", "\n", "# Write hparams to experiment directory.", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "run_dir", "+", "'/hparams'", ",", "mode", "=", "'w'", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "hparams", ".", "to_proto", "(", ")", ".", "SerializeToString", "(", ")", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "'Starting job.'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Hyperparameters'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'---------------------'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "hparams", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'---------------------'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Loading data'", ")", "\n", "\n", "# Get the sets of images and labels for training, validation, and", "\n", "# # test on dataset.", "\n", "\n", "\n", "if", "FLAGS", ".", "dataset", "==", "'fashion-mnist'", ":", "\n", "    ", "(", "train_image", ",", "train_label", ",", "valid_image", ",", "valid_label", ",", "test_image", ",", "\n", "test_label", ")", "=", "load_dataset", ".", "load_fashion_mnist", "(", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "mean_subtraction", "=", "True", ",", "\n", "random_roated_labels", "=", "False", ")", "\n", "print", "(", "train_image", ".", "shape", ")", "\n", "print", "(", "train_label", ".", "shape", ")", "\n", "\n", "", "if", "FLAGS", ".", "dataset", "==", "'cifar-10'", ":", "\n", "    ", "(", "train_image", ",", "train_label", ",", "valid_image", ",", "valid_label", ",", "test_image", ",", "\n", "test_label", ")", "=", "load_dataset", ".", "load_cifar10", "(", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "mean_subtraction", "=", "True", ",", "\n", "random_roated_labels", "=", "False", ")", "\n", "print", "(", "train_image", ".", "shape", ")", "\n", "print", "(", "train_label", ".", "shape", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "'Building Model'", ")", "\n", "\n", "if", "hparams", ".", "nonlinearity", "==", "'tanh'", ":", "\n", "    ", "nonlin_fn", "=", "tf", ".", "tanh", "\n", "", "elif", "hparams", ".", "nonlinearity", "==", "'relu'", ":", "\n", "    ", "nonlin_fn", "=", "tf", ".", "nn", ".", "relu", "\n", "", "else", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "# Construct NNGP kernel", "\n", "\n", "# Construct Gaussian Process Regression model", "\n", "    ", "model", "=", "deep_numerical_gpr_hbar_2", ".", "DeepGaussianProcessRegression", "(", "\n", "train_image", ",", "train_label", ",", "nonlin_fn", ",", "weight_var", "=", "hparams", ".", "weight_var", ",", "\n", "bias_var", "=", "hparams", ".", "bias_var", ",", "depth", "=", "hparams", ".", "depth", ",", "random_seed", "=", "hparams", ".", "random_seed", ",", "repeated_time", "=", "hparams", ".", "repeated_time", ",", "\n", "use_fixed_point_norm", "=", "hparams", ".", "use_fixed_point_norm", ")", "\n", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Training'", ")", "\n", "\n", "# For large number of training points, we do not evaluate on full set to", "\n", "# save on training evaluation time.", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "FLAGS", ".", "num_train", "<=", "5000", ":", "\n", "      ", "acc_train", ",", "var_train", ",", "mse_train", ",", "norm_train", ",", "final_eps", "=", "do_eval", "(", "\n", "sess", ",", "model", ",", "train_image", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "train_label", "[", ":", "FLAGS", ".", "num_eval", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of training set (%d examples) took '", "\n", "'%.3f secs'", "%", "(", "\n", "min", "(", "FLAGS", ".", "num_train", ",", "FLAGS", ".", "num_eval", ")", ",", "\n", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "else", ":", "\n", "      ", "acc_train", ",", "var_train", ",", "mse_train", ",", "norm_train", ",", "final_eps", "=", "do_eval", "(", "\n", "sess", ",", "model", ",", "train_image", "[", ":", "1000", "]", ",", "train_label", "[", ":", "1000", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of training set (%d examples) took '", "\n", "'%.3f secs'", "%", "(", "1000", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Validation'", ")", "\n", "acc_valid", ",", "var_valid", ",", "mse_valid", ",", "norm_valid", ",", "_", "=", "do_eval", "(", "\n", "sess", ",", "model", ",", "valid_image", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "valid_label", "[", ":", "FLAGS", ".", "num_eval", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of valid set (%d examples) took %.3f secs'", "%", "(", "\n", "FLAGS", ".", "num_eval", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Test'", ")", "\n", "acc_test", ",", "var_test", ",", "mse_test", ",", "norm_test", ",", "_", "=", "do_eval", "(", "\n", "sess", ",", "\n", "model", ",", "\n", "test_image", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "test_label", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "save_pred", "=", "False", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "end", "-", "start", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of test set (%d examples) took %.3f secs'", "%", "(", "\n", "FLAGS", ".", "num_eval", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "", "metrics", "=", "{", "\n", "'train_acc'", ":", "float", "(", "acc_train", ")", ",", "\n", "'train_mse'", ":", "float", "(", "mse_train", ")", ",", "\n", "'train_norm'", ":", "float", "(", "norm_train", ")", ",", "\n", "'valid_acc'", ":", "float", "(", "acc_valid", ")", ",", "\n", "'valid_mse'", ":", "float", "(", "mse_valid", ")", ",", "\n", "'valid_norm'", ":", "float", "(", "norm_valid", ")", ",", "\n", "'test_acc'", ":", "float", "(", "acc_test", ")", ",", "\n", "'test_mse'", ":", "float", "(", "mse_test", ")", ",", "\n", "'test_norm'", ":", "float", "(", "norm_test", ")", ",", "\n", "'stability_eps'", ":", "float", "(", "final_eps", ")", ",", "\n", "}", "\n", "\n", "record_results", "=", "[", "\n", "FLAGS", ".", "num_train", ",", "hparams", ".", "weight_var", ",", "\n", "hparams", ".", "bias_var", ",", "acc_train", ",", "acc_valid", ",", "acc_test", ",", "\n", "mse_train", ",", "mse_valid", ",", "mse_test", ",", "final_eps", "\n", "]", "\n", "\n", "# Store data", "\n", "result_file", "=", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'results.csv'", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "result_file", ",", "'a'", ")", "as", "f", ":", "\n", "    ", "filewriter", "=", "csv", ".", "writer", "(", "f", ")", "\n", "filewriter", ".", "writerow", "(", "record_results", ")", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.run_numerical_depth_hbar_2.main": [[249, 253], ["set_default_hparams().parse", "run_numerical_depth_hbar_2.run_nngp_eval", "run_numerical_depth_hbar_2.set_default_hparams"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.run_nngp_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.set_default_hparams"], ["", "def", "main", "(", "argv", ")", ":", "\n", "  ", "del", "argv", "# Unused", "\n", "hparams", "=", "set_default_hparams", "(", ")", ".", "parse", "(", "FLAGS", ".", "hparams", ")", "\n", "run_nngp_eval", "(", "hparams", ",", "FLAGS", ".", "experiment_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.run_numerical_depth.set_default_hparams": [[91, 94], ["tensorflow.contrib.training.HParams"], "function", ["None"], ["def", "set_default_hparams", "(", ")", ":", "\n", "  ", "return", "tf", ".", "contrib", ".", "training", ".", "HParams", "(", "\n", "nonlinearity", "=", "'tanh'", ",", "weight_var", "=", "0.2", ",", "bias_var", "=", "0", ",", "depth", "=", "200", ",", "random_seed", "=", "520", ",", "repeated_time", "=", "1", ",", "use_fixed_point_norm", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.run_numerical_depth.do_eval": [[96, 119], ["model.predict", "print", "numpy.save", "print", "print", "numpy.argmax", "numpy.mean", "numpy.mean", "tensorflow.logging.info", "tensorflow.logging.info", "numpy.sum", "float", "numpy.mean", "numpy.linalg.norm", "len", "tensorflow.gfile.Open", "numpy.save", "numpy.argmax", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression.predict"], ["", "def", "do_eval", "(", "sess", ",", "model", ",", "x_data", ",", "y_data", ",", "save_pred", "=", "False", ")", ":", "\n", "  ", "\"\"\"Run evaluation.\"\"\"", "\n", "\n", "gp_prediction", ",", "variance", ",", "stability_eps", ",", "K_D_D", "=", "model", ".", "predict", "(", "x_data", ",", "sess", ")", "\n", "print", "(", "K_D_D", ")", "\n", "np", ".", "save", "(", "'deep_kernel_correct_200.npy'", ",", "K_D_D", ")", "\n", "print", "(", "gp_prediction", ")", "\n", "print", "(", "y_data", ")", "\n", "\n", "pred_1", "=", "np", ".", "argmax", "(", "gp_prediction", ",", "axis", "=", "1", ")", "\n", "accuracy", "=", "np", ".", "sum", "(", "pred_1", "==", "np", ".", "argmax", "(", "y_data", ",", "axis", "=", "1", ")", ")", "/", "float", "(", "len", "(", "y_data", ")", ")", "\n", "mse", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "(", "gp_prediction", "-", "y_data", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "pred_norm", "=", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "gp_prediction", ",", "axis", "=", "1", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Accuracy: %.4f'", "%", "accuracy", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'MSE: %.8f'", "%", "mse", ")", "\n", "\n", "if", "save_pred", ":", "\n", "    ", "with", "tf", ".", "gfile", ".", "Open", "(", "\n", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "experiment_dir", ",", "'gp_prediction_stats.npy'", ")", ",", "\n", "'w'", ")", "as", "f", ":", "\n", "      ", "np", ".", "save", "(", "f", ",", "gp_prediction", ")", "\n", "\n", "", "", "return", "accuracy", ",", "variance", ",", "mse", ",", "pred_norm", ",", "stability_eps", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.run_numerical_depth.run_nngp_eval": [[121, 247], ["tensorflow.gfile.MakeDirs", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "os.path.join", "tensorflow.gfile.GFile", "f.write", "load_dataset.load_fashion_mnist", "print", "print", "load_dataset.load_cifar10", "print", "print", "tensorflow.Session", "deep_numerical_gpr.DeepGaussianProcessRegression", "time.time", "time.time", "tensorflow.logging.info", "time.time", "time.time", "time.time", "time.time", "tensorflow.logging.info", "run_numerical_depth.do_eval", "tensorflow.logging.info", "time.time", "time.time", "tensorflow.logging.info", "run_numerical_depth.do_eval", "time.time", "time.time", "print", "tensorflow.logging.info", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "tensorflow.gfile.Open", "csv.writer", "csv.writer.writerow", "hparams.to_proto().SerializeToString", "run_numerical_depth.do_eval", "tensorflow.logging.info", "run_numerical_depth.do_eval", "tensorflow.logging.info", "hparams.to_proto", "min", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset.load_fashion_mnist", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset.load_cifar10", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval"], ["", "def", "run_nngp_eval", "(", "hparams", ",", "run_dir", ")", ":", "\n", "  ", "\"\"\"Runs experiments.\"\"\"", "\n", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "run_dir", ")", "\n", "# Write hparams to experiment directory.", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "run_dir", "+", "'/hparams'", ",", "mode", "=", "'w'", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "hparams", ".", "to_proto", "(", ")", ".", "SerializeToString", "(", ")", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "'Starting job.'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Hyperparameters'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'---------------------'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "hparams", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'---------------------'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Loading data'", ")", "\n", "\n", "# Get the sets of images and labels for training, validation, and", "\n", "# # test on dataset.", "\n", "\n", "\n", "if", "FLAGS", ".", "dataset", "==", "'fashion-mnist'", ":", "\n", "    ", "(", "train_image", ",", "train_label", ",", "valid_image", ",", "valid_label", ",", "test_image", ",", "\n", "test_label", ")", "=", "load_dataset", ".", "load_fashion_mnist", "(", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "mean_subtraction", "=", "True", ",", "\n", "random_roated_labels", "=", "False", ")", "\n", "print", "(", "train_image", ".", "shape", ")", "\n", "print", "(", "train_label", ".", "shape", ")", "\n", "\n", "", "if", "FLAGS", ".", "dataset", "==", "'cifar-10'", ":", "\n", "    ", "(", "train_image", ",", "train_label", ",", "valid_image", ",", "valid_label", ",", "test_image", ",", "\n", "test_label", ")", "=", "load_dataset", ".", "load_cifar10", "(", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "mean_subtraction", "=", "True", ",", "\n", "random_roated_labels", "=", "False", ")", "\n", "print", "(", "train_image", ".", "shape", ")", "\n", "print", "(", "train_label", ".", "shape", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "'Building Model'", ")", "\n", "\n", "if", "hparams", ".", "nonlinearity", "==", "'tanh'", ":", "\n", "    ", "nonlin_fn", "=", "tf", ".", "tanh", "\n", "", "elif", "hparams", ".", "nonlinearity", "==", "'relu'", ":", "\n", "    ", "nonlin_fn", "=", "tf", ".", "nn", ".", "relu", "\n", "", "else", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "# Construct NNGP kernel", "\n", "\n", "# Construct Gaussian Process Regression model", "\n", "    ", "model", "=", "deep_numerical_gpr", ".", "DeepGaussianProcessRegression", "(", "\n", "train_image", ",", "train_label", ",", "nonlin_fn", ",", "weight_var", "=", "hparams", ".", "weight_var", ",", "\n", "bias_var", "=", "hparams", ".", "bias_var", ",", "depth", "=", "hparams", ".", "depth", ",", "random_seed", "=", "hparams", ".", "random_seed", ",", "repeated_time", "=", "hparams", ".", "repeated_time", ",", "\n", "use_fixed_point_norm", "=", "hparams", ".", "use_fixed_point_norm", ")", "\n", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Training'", ")", "\n", "\n", "# For large number of training points, we do not evaluate on full set to", "\n", "# save on training evaluation time.", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "FLAGS", ".", "num_train", "<=", "5000", ":", "\n", "      ", "acc_train", ",", "var_train", ",", "mse_train", ",", "norm_train", ",", "final_eps", "=", "do_eval", "(", "\n", "sess", ",", "model", ",", "train_image", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "train_label", "[", ":", "FLAGS", ".", "num_eval", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of training set (%d examples) took '", "\n", "'%.3f secs'", "%", "(", "\n", "min", "(", "FLAGS", ".", "num_train", ",", "FLAGS", ".", "num_eval", ")", ",", "\n", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "else", ":", "\n", "      ", "acc_train", ",", "var_train", ",", "mse_train", ",", "norm_train", ",", "final_eps", "=", "do_eval", "(", "\n", "sess", ",", "model", ",", "train_image", "[", ":", "1000", "]", ",", "train_label", "[", ":", "1000", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of training set (%d examples) took '", "\n", "'%.3f secs'", "%", "(", "1000", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Validation'", ")", "\n", "acc_valid", ",", "var_valid", ",", "mse_valid", ",", "norm_valid", ",", "_", "=", "do_eval", "(", "\n", "sess", ",", "model", ",", "valid_image", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "valid_label", "[", ":", "FLAGS", ".", "num_eval", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of valid set (%d examples) took %.3f secs'", "%", "(", "\n", "FLAGS", ".", "num_eval", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Test'", ")", "\n", "acc_test", ",", "var_test", ",", "mse_test", ",", "norm_test", ",", "_", "=", "do_eval", "(", "\n", "sess", ",", "\n", "model", ",", "\n", "test_image", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "test_label", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "save_pred", "=", "False", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "end", "-", "start", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of test set (%d examples) took %.3f secs'", "%", "(", "\n", "FLAGS", ".", "num_eval", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "", "metrics", "=", "{", "\n", "'train_acc'", ":", "float", "(", "acc_train", ")", ",", "\n", "'train_mse'", ":", "float", "(", "mse_train", ")", ",", "\n", "'train_norm'", ":", "float", "(", "norm_train", ")", ",", "\n", "'valid_acc'", ":", "float", "(", "acc_valid", ")", ",", "\n", "'valid_mse'", ":", "float", "(", "mse_valid", ")", ",", "\n", "'valid_norm'", ":", "float", "(", "norm_valid", ")", ",", "\n", "'test_acc'", ":", "float", "(", "acc_test", ")", ",", "\n", "'test_mse'", ":", "float", "(", "mse_test", ")", ",", "\n", "'test_norm'", ":", "float", "(", "norm_test", ")", ",", "\n", "'stability_eps'", ":", "float", "(", "final_eps", ")", ",", "\n", "}", "\n", "\n", "record_results", "=", "[", "\n", "FLAGS", ".", "num_train", ",", "hparams", ".", "weight_var", ",", "\n", "hparams", ".", "bias_var", ",", "acc_train", ",", "acc_valid", ",", "acc_test", ",", "\n", "mse_train", ",", "mse_valid", ",", "mse_test", ",", "final_eps", "\n", "]", "\n", "\n", "# Store data", "\n", "result_file", "=", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'results.csv'", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "result_file", ",", "'a'", ")", "as", "f", ":", "\n", "    ", "filewriter", "=", "csv", ".", "writer", "(", "f", ")", "\n", "filewriter", ".", "writerow", "(", "record_results", ")", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_deep.run_numerical_depth.main": [[249, 253], ["set_default_hparams().parse", "run_numerical_depth.run_nngp_eval", "run_numerical_depth.set_default_hparams"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.run_nngp_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.set_default_hparams"], ["", "def", "main", "(", "argv", ")", ":", "\n", "  ", "del", "argv", "# Unused", "\n", "hparams", "=", "set_default_hparams", "(", ")", ".", "parse", "(", "FLAGS", ".", "hparams", ")", "\n", "run_nngp_eval", "(", "hparams", ",", "FLAGS", ".", "experiment_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression.__init__": [[41, 71], ["tensorflow.identity", "tensorflow.name_scope", "tensorflow.identity", "tensorflow.placeholder", "tensorflow.identity", "wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful"], ["def", "__init__", "(", "self", ",", "input_x", ",", "output_y", ",", "nonlin_fn", ",", "\n", "weight_var", "=", "1.", ",", "bias_var", "=", "1.", ",", "num_neuron", "=", "500", ",", "\n", "random_seed", "=", "521", ",", "repeated_time", "=", "100", ",", "use_fixed_point_norm", "=", "False", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"init\"", ")", ":", "\n", "      ", "self", ".", "input_x", "=", "input_x", "\n", "self", ".", "weight_var", "=", "weight_var", "\n", "self", ".", "bias_var", "=", "bias_var", "\n", "self", ".", "output_y", "=", "output_y", "\n", "self", ".", "nonlin_fn", "=", "nonlin_fn", "\n", "self", ".", "num_neuron", "=", "num_neuron", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "repeated_time", "=", "repeated_time", "\n", "self", ".", "num_train", ",", "self", ".", "input_dim", "=", "input_x", ".", "shape", "\n", "_", ",", "self", ".", "output_dim", "=", "output_y", ".", "shape", "\n", "self", ".", "use_fixed_point_norm", "=", "use_fixed_point_norm", "\n", "self", ".", "stability_eps", "=", "tf", ".", "identity", "(", "tf", ".", "placeholder", "(", "tf", ".", "float64", ")", ")", "\n", "self", ".", "current_stability_eps", "=", "1e-10", "\n", "\n", "self", ".", "y_pl", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float64", ",", "[", "self", ".", "num_train", ",", "self", ".", "output_dim", "]", ",", "name", "=", "\"y_train\"", ")", "\n", "self", ".", "x_pl", "=", "tf", ".", "identity", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float64", ",", "[", "self", ".", "num_train", ",", "self", ".", "input_dim", "]", ",", "\n", "name", "=", "\"x_train\"", ")", ")", "\n", "\n", "self", ".", "l_np", "=", "None", "\n", "self", ".", "v_np", "=", "None", "\n", "self", ".", "k_np", "=", "None", "\n", "\n", "", "self", ".", "k_data_data", "=", "tf", ".", "identity", "(", "self", ".", "_generate_k_ful", "(", "self", ".", "x_pl", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_predict": [[72, 94], ["tensorflow.logging.info", "wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful", "tensorflow.name_scope", "tensorflow.identity", "tensorflow.name_scope", "tensorflow.matrix_triangular_solve", "tensorflow.matmul", "tensorflow.placeholder", "tensorflow.tile", "wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful", "tensorflow.matmul", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful"], ["", "def", "_build_predict", "(", "self", ",", "n_test", ",", "full_cov", "=", "True", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"build_predict\"", ")", ":", "\n", "      ", "self", ".", "x_test_pl", "=", "tf", ".", "identity", "(", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float64", ",", "[", "n_test", ",", "self", ".", "input_dim", "]", ",", "name", "=", "\"x_test_pl\"", ")", "\n", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"Using pre-computed Kernel\"", ")", "\n", "self", ".", "k_data_test", "=", "self", ".", "_generate_k_ful", "(", "self", ".", "x_pl", ",", "self", ".", "x_test_pl", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"build_predict\"", ")", ":", "\n", "      ", "a", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "l", ",", "self", ".", "k_data_test", ")", "\n", "fmean", "=", "tf", ".", "matmul", "(", "a", ",", "self", ".", "v", ",", "transpose_a", "=", "True", ")", "\n", "\n", "if", "full_cov", ":", "\n", "        ", "fvar", "=", "self", ".", "_generate_k_ful", "(", "self", ".", "x_test_pl", ")", "-", "tf", ".", "matmul", "(", "\n", "a", ",", "a", ",", "transpose_a", "=", "True", ")", "\n", "shape", "=", "[", "1", ",", "1", ",", "self", ".", "y_pl", ".", "shape", "[", "1", "]", "]", "\n", "fvar", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "fvar", ",", "2", ")", ",", "shape", ")", "\n", "\n", "\n", "", "self", ".", "fmean", "=", "fmean", "\n", "self", ".", "fvar", "=", "fvar", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_cholesky": [[96, 106], ["tensorflow.logging.info", "tensorflow.cholesky", "tensorflow.matrix_triangular_solve", "tensorflow.Print", "tensorflow.eye"], "methods", ["None"], ["", "", "def", "_build_cholesky", "(", "self", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"Computing Kernel\"", ")", "\n", "self", ".", "k_data_data_reg", "=", "self", ".", "k_data_data", "+", "tf", ".", "eye", "(", "\n", "self", ".", "input_x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float64", ")", "*", "self", ".", "stability_eps", "\n", "if", "FLAGS", ".", "print_kernel", ":", "\n", "      ", "self", ".", "k_data_data_reg", "=", "tf", ".", "Print", "(", "\n", "self", ".", "k_data_data_reg", ",", "[", "self", ".", "k_data_data_reg", "]", ",", "\n", "message", "=", "\"K_DD = \"", ",", "summarize", "=", "100", ")", "\n", "", "self", ".", "l", "=", "tf", ".", "cholesky", "(", "self", ".", "k_data_data_reg", ")", "\n", "self", ".", "v", "=", "tf", ".", "matrix_triangular_solve", "(", "self", ".", "l", ",", "self", ".", "y_pl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._generate_k_ful": [[109, 162], ["wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "tensorflow.name_scope", "numpy.arange", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "wide_numerical_gpr.WideGaussianProcessRegression.nonlin_fn", "wide_numerical_gpr.WideGaussianProcessRegression.nonlin_fn", "wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization"], ["", "def", "_generate_k_ful", "(", "self", ",", "input1", ",", "input2", "=", "None", ")", ":", "\n", "    ", "\"\"\"Iteratively building the diagonal part (variance) of the NNGP kernel.\n\n    Args:\n      input_x: tensor of input of size [num_data, input_dim].\n      return_full: boolean for output to be [num_data] sized or a scalar value\n        for normalized inputs\n\n    Sets self.layer_qaa_dict of {layer #: qaa at the layer}\n\n    Returns:\n      qaa: variance at the output.\n    \"\"\"", "\n", "input1", "=", "self", ".", "_input_layer_normalization", "(", "input1", ")", "\n", "if", "input2", "is", "None", ":", "\n", "      ", "input2", "=", "input1", "\n", "", "else", ":", "\n", "      ", "input2", "=", "self", ".", "_input_layer_normalization", "(", "input2", ")", "\n", "\n", "", "kernel", "=", "[", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"k_full\"", ")", ":", "\n", "\n", "      ", "for", "r", "in", "np", ".", "arange", "(", "self", ".", "repeated_time", ")", ":", "\n", "\n", "        ", "weight_matrix_1", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "input_dim", ",", "self", ".", "num_neuron", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "weight_var", "/", "self", ".", "input_dim", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ")", "\n", "\n", "bias_matrix_1", "=", "tf", ".", "random", ".", "normal", "(", "\n", "[", "self", ".", "num_neuron", "]", ",", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "bias_var", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ",", "seed", "=", "None", ",", "name", "=", "None", ")", "\n", "\n", "\n", "weight_matrix_2", "=", "tf", ".", "random", ".", "normal", "(", "[", "self", ".", "num_neuron", ",", "self", ".", "output_dim", "]", ",", "\n", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "weight_var", "/", "self", ".", "num_neuron", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ")", "\n", "\n", "bias_matrix_2", "=", "tf", ".", "random", ".", "normal", "(", "\n", "[", "self", ".", "output_dim", "]", ",", "mean", "=", "0.0", ",", "stddev", "=", "np", ".", "sqrt", "(", "self", ".", "bias_var", ")", ",", "dtype", "=", "tf", ".", "dtypes", ".", "float64", ",", "seed", "=", "None", ",", "name", "=", "None", ")", "\n", "\n", "layer11", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "input1", ",", "weight_matrix_1", ")", "+", "bias_matrix_1", ")", "\n", "output1", "=", "(", "tf", ".", "matmul", "(", "layer11", ",", "weight_matrix_2", ")", "+", "bias_matrix_2", ")", "\n", "\n", "layer21", "=", "self", ".", "nonlin_fn", "(", "tf", ".", "matmul", "(", "input2", ",", "weight_matrix_1", ")", "+", "bias_matrix_1", ")", "\n", "output2", "=", "(", "tf", ".", "matmul", "(", "layer21", ",", "weight_matrix_2", ")", "+", "bias_matrix_2", ")", "\n", "\n", "output1", "=", "self", ".", "_input_layer_normalization", "(", "output1", ")", "\n", "output2", "=", "self", ".", "_input_layer_normalization", "(", "output2", ")", "\n", "\n", "kernel", "=", "tf", ".", "matmul", "(", "\n", "output1", ",", "output2", ",", "transpose_b", "=", "True", ")", "/", "self", ".", "output_dim", "\n", "\n", "kernel", "+=", "kernel", "\n", "\n", "", "", "return", "kernel", "/", "self", ".", "repeated_time", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._input_layer_normalization": [[165, 177], ["tensorflow.name_scope", "tensorflow.nn.moments", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "_input_layer_normalization", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"Input normalization to unit variance or fixed point variance.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"input_layer_normalization\"", ")", ":", "\n", "# Layer norm, fix to unit variance", "\n", "      ", "eps", "=", "1e-15", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "x_normalized", "=", "(", "x", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "eps", ")", "\n", "if", "self", ".", "use_fixed_point_norm", ":", "\n", "        ", "x_normalized", "*=", "tf", ".", "sqrt", "(", "\n", "(", "self", ".", "var_fixed_point", "[", "0", "]", "-", "self", ".", "bias_var", ")", "/", "self", ".", "weight_var", ")", "\n", "", "return", "x_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression.predict": [[178, 239], ["wide_numerical_gpr.WideGaussianProcessRegression._build_predict", "time.time", "print", "wide_numerical_gpr.WideGaussianProcessRegression._build_cholesky", "time.time", "sess.run", "tensorflow.logging.info", "ArithmeticError", "sess.run", "sess.run", "tensorflow.logging.info", "sess.run", "tensorflow.logging.info", "sess.run", "time.time", "sess.run", "tensorflow.logging.info", "time.time", "tensorflow.logging.info", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_predict", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression._build_cholesky"], ["", "", "def", "predict", "(", "self", ",", "test_x", ",", "sess", ",", "get_var", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute mean and varaince prediction for test inputs.\n\n    Raises:\n      ArithmeticError: Cholesky fails even after increasing to large values of\n        stability epsilon.\n    \"\"\"", "\n", "if", "self", ".", "l_np", "is", "None", ":", "\n", "\n", "      ", "print", "(", "sess", ".", "run", "(", "self", ".", "k_data_data", ",", "\n", "feed_dict", "=", "{", "self", ".", "x_pl", ":", "self", ".", "input_x", "}", ")", ")", "\n", "\n", "self", ".", "_build_cholesky", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "k_np", "=", "sess", ".", "run", "(", "self", ".", "k_data_data", ",", "\n", "feed_dict", "=", "{", "self", ".", "x_pl", ":", "self", ".", "input_x", "}", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Computed K_DD in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "while", "self", ".", "current_stability_eps", "<", "1", ":", "\n", "        ", "try", ":", "\n", "          ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "l_np", ",", "self", ".", "v_np", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "l", ",", "self", ".", "v", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "y_pl", ":", "self", ".", "output_y", ",", "\n", "self", ".", "k_data_data", ":", "self", ".", "k_np", ",", "\n", "self", ".", "stability_eps", ":", "self", ".", "current_stability_eps", "}", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"Computed L_DD in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "break", "\n", "\n", "", "except", "tf", ".", "errors", ".", "InvalidArgumentError", ":", "\n", "          ", "self", ".", "current_stability_eps", "*=", "10", "\n", "tf", ".", "logging", ".", "info", "(", "\"Cholesky decomposition failed, trying larger epsilon\"", "\n", "\": {}\"", ".", "format", "(", "self", ".", "current_stability_eps", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "current_stability_eps", ">", "0.2", ":", "\n", "      ", "raise", "ArithmeticError", "(", "\"Could not compute Cholesky decomposition.\"", ")", "\n", "\n", "", "n_test", "=", "test_x", ".", "shape", "[", "0", "]", "\n", "self", ".", "_build_predict", "(", "n_test", ")", "\n", "feed_dict", "=", "{", "\n", "self", ".", "x_pl", ":", "self", ".", "input_x", ",", "\n", "self", ".", "x_test_pl", ":", "test_x", ",", "\n", "self", ".", "l", ":", "self", ".", "l_np", ",", "\n", "self", ".", "v", ":", "self", ".", "v_np", "\n", "}", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "get_var", ":", "\n", "      ", "mean_pred", ",", "var_pred", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "fmean", ",", "self", ".", "fvar", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "k_d_d", "=", "sess", ".", "run", "(", "\n", "[", "self", ".", "k_data_data", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Did regression in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "mean_pred", ",", "var_pred", ",", "self", ".", "current_stability_eps", ",", "k_d_d", "\n", "\n", "", "else", ":", "\n", "      ", "mean_pred", "=", "sess", ".", "run", "(", "self", ".", "fmean", ",", "feed_dict", "=", "feed_dict", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Did regression in %.3f secs\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "mean_pred", ",", "self", ".", "current_stability_eps", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.set_default_hparams": [[90, 93], ["tensorflow.contrib.training.HParams"], "function", ["None"], ["def", "set_default_hparams", "(", ")", ":", "\n", "  ", "return", "tf", ".", "contrib", ".", "training", ".", "HParams", "(", "\n", "nonlinearity", "=", "'tanh'", ",", "weight_var", "=", "0.5", ",", "bias_var", "=", "0", ",", "num_neuron", "=", "200", ",", "random_seed", "=", "520", ",", "repeated_time", "=", "200", ",", "use_fixed_point_norm", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval": [[95, 118], ["model.predict", "print", "numpy.save", "print", "print", "numpy.argmax", "numpy.mean", "numpy.mean", "tensorflow.logging.info", "tensorflow.logging.info", "numpy.sum", "float", "numpy.mean", "numpy.linalg.norm", "len", "tensorflow.gfile.Open", "numpy.save", "numpy.argmax", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.wide_numerical_gpr.WideGaussianProcessRegression.predict"], ["", "def", "do_eval", "(", "sess", ",", "model", ",", "x_data", ",", "y_data", ",", "save_pred", "=", "False", ")", ":", "\n", "  ", "\"\"\"Run evaluation.\"\"\"", "\n", "\n", "gp_prediction", ",", "variance", ",", "stability_eps", ",", "K_D_D", "=", "model", ".", "predict", "(", "x_data", ",", "sess", ")", "\n", "print", "(", "K_D_D", ")", "\n", "np", ".", "save", "(", "'wide_kernel.npy'", ",", "K_D_D", ")", "\n", "print", "(", "gp_prediction", ")", "\n", "print", "(", "y_data", ")", "\n", "\n", "pred_1", "=", "np", ".", "argmax", "(", "gp_prediction", ",", "axis", "=", "1", ")", "\n", "accuracy", "=", "np", ".", "sum", "(", "pred_1", "==", "np", ".", "argmax", "(", "y_data", ",", "axis", "=", "1", ")", ")", "/", "float", "(", "len", "(", "y_data", ")", ")", "\n", "mse", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "(", "gp_prediction", "-", "y_data", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "pred_norm", "=", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "gp_prediction", ",", "axis", "=", "1", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Accuracy: %.4f'", "%", "accuracy", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'MSE: %.8f'", "%", "mse", ")", "\n", "\n", "if", "save_pred", ":", "\n", "    ", "with", "tf", ".", "gfile", ".", "Open", "(", "\n", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "experiment_dir", ",", "'gp_prediction_stats.npy'", ")", ",", "\n", "'w'", ")", "as", "f", ":", "\n", "      ", "np", ".", "save", "(", "f", ",", "gp_prediction", ")", "\n", "\n", "", "", "return", "accuracy", ",", "variance", ",", "mse", ",", "pred_norm", ",", "stability_eps", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.run_nngp_eval": [[120, 239], ["tensorflow.gfile.MakeDirs", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "os.path.join", "tensorflow.gfile.GFile", "f.write", "load_dataset.load_fashion_mnist", "print", "print", "load_dataset.load_cifar10", "print", "print", "tensorflow.Session", "wide_numerical_gpr.WideGaussianProcessRegression", "time.time", "tensorflow.logging.info", "time.time", "tensorflow.logging.info", "run_numerical_width.do_eval", "tensorflow.logging.info", "float", "float", "float", "float", "float", "float", "float", "tensorflow.gfile.Open", "csv.writer", "csv.writer.writerow", "hparams.to_proto().SerializeToString", "run_numerical_width.do_eval", "tensorflow.logging.info", "run_numerical_width.do_eval", "tensorflow.logging.info", "hparams.to_proto", "min", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset.load_fashion_mnist", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset.load_cifar10", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.do_eval"], ["", "def", "run_nngp_eval", "(", "hparams", ",", "run_dir", ")", ":", "\n", "  ", "\"\"\"Runs experiments.\"\"\"", "\n", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "run_dir", ")", "\n", "# Write hparams to experiment directory.", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "run_dir", "+", "'/hparams'", ",", "mode", "=", "'w'", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "hparams", ".", "to_proto", "(", ")", ".", "SerializeToString", "(", ")", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "'Starting job.'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Hyperparameters'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'---------------------'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "hparams", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'---------------------'", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Loading data'", ")", "\n", "\n", "# Get the sets of images and labels for training, validation, and", "\n", "# # test on dataset.", "\n", "\n", "\n", "if", "FLAGS", ".", "dataset", "==", "'fashion-mnist'", ":", "\n", "    ", "(", "train_image", ",", "train_label", ",", "valid_image", ",", "valid_label", ",", "test_image", ",", "\n", "test_label", ")", "=", "load_dataset", ".", "load_fashion_mnist", "(", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "mean_subtraction", "=", "True", ",", "\n", "random_roated_labels", "=", "False", ")", "\n", "print", "(", "train_image", ".", "shape", ")", "\n", "print", "(", "train_label", ".", "shape", ")", "\n", "\n", "", "if", "FLAGS", ".", "dataset", "==", "'cifar-10'", ":", "\n", "    ", "(", "train_image", ",", "train_label", ",", "valid_image", ",", "valid_label", ",", "test_image", ",", "\n", "test_label", ")", "=", "load_dataset", ".", "load_cifar10", "(", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "mean_subtraction", "=", "True", ",", "\n", "random_roated_labels", "=", "False", ")", "\n", "print", "(", "train_image", ".", "shape", ")", "\n", "print", "(", "train_label", ".", "shape", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "'Building Model'", ")", "\n", "\n", "if", "hparams", ".", "nonlinearity", "==", "'tanh'", ":", "\n", "    ", "nonlin_fn", "=", "tf", ".", "tanh", "\n", "", "elif", "hparams", ".", "nonlinearity", "==", "'relu'", ":", "\n", "    ", "nonlin_fn", "=", "tf", ".", "nn", ".", "relu", "\n", "", "else", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "# Construct NNGP kernel", "\n", "\n", "# Construct Gaussian Process Regression model", "\n", "    ", "model", "=", "wide_numerical_gpr", ".", "WideGaussianProcessRegression", "(", "\n", "train_image", ",", "train_label", ",", "nonlin_fn", ",", "weight_var", "=", "hparams", ".", "weight_var", ",", "\n", "bias_var", "=", "hparams", ".", "bias_var", ",", "num_neuron", "=", "hparams", ".", "num_neuron", ",", "random_seed", "=", "hparams", ".", "random_seed", ",", "repeated_time", "=", "hparams", ".", "repeated_time", ",", "\n", "use_fixed_point_norm", "=", "hparams", ".", "use_fixed_point_norm", ")", "\n", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Training'", ")", "\n", "\n", "# For large number of training points, we do not evaluate on full set to", "\n", "# save on training evaluation time.", "\n", "if", "FLAGS", ".", "num_train", "<=", "5000", ":", "\n", "      ", "acc_train", ",", "var_train", ",", "mse_train", ",", "norm_train", ",", "final_eps", "=", "do_eval", "(", "\n", "sess", ",", "model", ",", "train_image", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "train_label", "[", ":", "FLAGS", ".", "num_eval", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of training set (%d examples) took '", "\n", "'%.3f secs'", "%", "(", "\n", "min", "(", "FLAGS", ".", "num_train", ",", "FLAGS", ".", "num_eval", ")", ",", "\n", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "else", ":", "\n", "      ", "acc_train", ",", "var_train", ",", "mse_train", ",", "norm_train", ",", "final_eps", "=", "do_eval", "(", "\n", "sess", ",", "model", ",", "train_image", "[", ":", "1000", "]", ",", "train_label", "[", ":", "1000", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of training set (%d examples) took '", "\n", "'%.3f secs'", "%", "(", "1000", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "# =============================================================================", "\n", "#     start_time = time.time()", "\n", "#     tf.logging.info('Validation')", "\n", "#     acc_valid, var_valid, mse_valid, norm_valid, _ = do_eval(", "\n", "#         sess, model, valid_image[:FLAGS.num_eval],", "\n", "#         valid_label[:FLAGS.num_eval])", "\n", "#     tf.logging.info('Evaluation of valid set (%d examples) took %.3f secs'%(", "\n", "#         FLAGS.num_eval, time.time() - start_time))", "\n", "# =============================================================================", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Test'", ")", "\n", "acc_test", ",", "var_test", ",", "mse_test", ",", "norm_test", ",", "_", "=", "do_eval", "(", "\n", "sess", ",", "\n", "model", ",", "\n", "test_image", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "test_label", "[", ":", "FLAGS", ".", "num_eval", "]", ",", "\n", "save_pred", "=", "False", ")", "\n", "tf", ".", "logging", ".", "info", "(", "'Evaluation of test set (%d examples) took %.3f secs'", "%", "(", "\n", "FLAGS", ".", "num_eval", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "", "metrics", "=", "{", "\n", "'train_acc'", ":", "float", "(", "acc_train", ")", ",", "\n", "'train_mse'", ":", "float", "(", "mse_train", ")", ",", "\n", "'train_norm'", ":", "float", "(", "norm_train", ")", ",", "\n", "'test_acc'", ":", "float", "(", "acc_test", ")", ",", "\n", "'test_mse'", ":", "float", "(", "mse_test", ")", ",", "\n", "'test_norm'", ":", "float", "(", "norm_test", ")", ",", "\n", "'stability_eps'", ":", "float", "(", "final_eps", ")", ",", "\n", "}", "\n", "\n", "record_results", "=", "[", "\n", "FLAGS", ".", "num_train", ",", "hparams", ".", "weight_var", ",", "\n", "hparams", ".", "bias_var", ",", "acc_train", ",", "acc_test", ",", "\n", "mse_train", ",", "mse_test", ",", "final_eps", "\n", "]", "\n", "\n", "# Store data", "\n", "result_file", "=", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'results.csv'", ")", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "result_file", ",", "'a'", ")", "as", "f", ":", "\n", "    ", "filewriter", "=", "csv", ".", "writer", "(", "f", ")", "\n", "filewriter", ".", "writerow", "(", "record_results", ")", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.main": [[241, 245], ["set_default_hparams().parse", "run_numerical_width.run_nngp_eval", "run_numerical_width.set_default_hparams"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.run_nngp_eval", "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.run_numerical_width.set_default_hparams"], ["", "def", "main", "(", "argv", ")", ":", "\n", "  ", "del", "argv", "# Unused", "\n", "hparams", "=", "set_default_hparams", "(", ")", ".", "parse", "(", "FLAGS", ".", "hparams", ")", "\n", "run_nngp_eval", "(", "hparams", ",", "FLAGS", ".", "experiment_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset.load_mnist": [[40, 57], ["tensorflow.examples.tutorials.mnist.input_data.read_data_sets", "load_dataset._select_mnist_subset"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset._select_mnist_subset"], ["def", "load_mnist", "(", "num_train", "=", "50000", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Loads MNIST as numpy array.\"\"\"", "\n", "\n", "data_dir", "=", "FLAGS", ".", "data_dir", "\n", "datasets", "=", "input_data", ".", "read_data_sets", "(", "\n", "data_dir", ",", "False", ",", "validation_size", "=", "10000", ",", "one_hot", "=", "True", ")", "\n", "mnist_data", "=", "_select_mnist_subset", "(", "\n", "datasets", ",", "\n", "num_train", ",", "\n", "use_float64", "=", "use_float64", ",", "\n", "mean_subtraction", "=", "mean_subtraction", ",", "\n", "random_roated_labels", "=", "random_roated_labels", ")", "\n", "\n", "return", "mnist_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset._select_mnist_subset": [[61, 123], ["list", "numpy.random.seed", "digits.sort", "copy.deepcopy", "len", "numpy.array", "numpy.argmax", "[].astype", "[].astype", "copy.deepcopy.validation.images.astype", "copy.deepcopy.validation.labels.astype", "copy.deepcopy.test.images.astype", "copy.deepcopy.test.labels.astype", "range", "numpy.random.shuffle", "numpy.argsort", "numpy.mean", "numpy.mean", "numpy.linalg.qr", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.concatenate", "numpy.concatenate", "numpy.argmax", "numpy.random.rand", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "_select_mnist_subset", "(", "datasets", ",", "\n", "num_train", "=", "100", ",", "\n", "digits", "=", "list", "(", "range", "(", "10", ")", ")", ",", "\n", "seed", "=", "9999", ",", "\n", "sort_by_class", "=", "False", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Select subset of MNIST and apply preprocessing.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "digits", ".", "sort", "(", ")", "\n", "subset", "=", "copy", ".", "deepcopy", "(", "datasets", ")", "\n", "\n", "num_class", "=", "len", "(", "digits", ")", "\n", "num_per_class", "=", "num_train", "//", "num_class", "\n", "\n", "idx_list", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "ys", "=", "np", ".", "argmax", "(", "subset", ".", "train", ".", "labels", ",", "axis", "=", "1", ")", "# undo one-hot", "\n", "\n", "for", "digit", "in", "digits", ":", "\n", "    ", "if", "datasets", ".", "train", ".", "num_examples", "==", "num_train", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "\n", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", "[", ":", "num_per_class", "]", ")", ")", "\n", "", "", "if", "not", "sort_by_class", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "\n", "", "data_precision", "=", "np", ".", "float64", "if", "use_float64", "else", "np", ".", "float32", "\n", "\n", "train_image", "=", "subset", ".", "train", ".", "images", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "train_label", "=", "subset", ".", "train", ".", "labels", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_image", "=", "subset", ".", "validation", ".", "images", ".", "astype", "(", "data_precision", ")", "\n", "valid_label", "=", "subset", ".", "validation", ".", "labels", ".", "astype", "(", "data_precision", ")", "\n", "test_image", "=", "subset", ".", "test", ".", "images", ".", "astype", "(", "data_precision", ")", "\n", "test_label", "=", "subset", ".", "test", ".", "labels", ".", "astype", "(", "data_precision", ")", "\n", "\n", "if", "sort_by_class", ":", "\n", "    ", "train_idx", "=", "np", ".", "argsort", "(", "np", ".", "argmax", "(", "train_label", ",", "axis", "=", "1", ")", ")", "\n", "train_image", "=", "train_image", "[", "train_idx", "]", "\n", "train_label", "=", "train_label", "[", "train_idx", "]", "\n", "\n", "", "if", "mean_subtraction", ":", "\n", "    ", "train_image_mean", "=", "np", ".", "mean", "(", "train_image", ")", "\n", "train_label_mean", "=", "np", ".", "mean", "(", "train_label", ")", "\n", "train_image", "-=", "train_image_mean", "\n", "train_label", "-=", "train_label_mean", "\n", "valid_image", "-=", "train_image_mean", "\n", "valid_label", "-=", "train_label_mean", "\n", "test_image", "-=", "train_image_mean", "\n", "test_label", "-=", "train_label_mean", "\n", "\n", "", "if", "random_roated_labels", ":", "\n", "    ", "r", ",", "_", "=", "np", ".", "linalg", ".", "qr", "(", "np", ".", "random", ".", "rand", "(", "10", ",", "10", ")", ")", "\n", "train_label", "=", "np", ".", "dot", "(", "train_label", ",", "r", ")", "\n", "valid_label", "=", "np", ".", "dot", "(", "valid_label", ",", "r", ")", "\n", "test_label", "=", "np", ".", "dot", "(", "test_label", ",", "r", ")", "\n", "\n", "", "return", "(", "train_image", ",", "train_label", ",", "\n", "valid_image", ",", "valid_label", ",", "\n", "test_image", ",", "test_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset.load_fashion_mnist": [[126, 156], ["fashion_mnist.load_data", "numpy.reshape", "numpy.reshape", "numpy.arange", "numpy.zeros", "numpy.arange", "numpy.zeros", "load_dataset._select_fashion_mnist_subset"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset._select_fashion_mnist_subset"], ["", "def", "load_fashion_mnist", "(", "num_train", "=", "50000", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Loads MNIST as numpy array.\"\"\"", "\n", "\n", "data_dir", "=", "FLAGS", ".", "data_dir", "\n", "\n", "fashion_mnist", "=", "tf", ".", "keras", ".", "datasets", ".", "fashion_mnist", "\n", "\n", "(", "train_images", ",", "tr_labels", ")", ",", "(", "test_images", ",", "te_labels", ")", "=", "fashion_mnist", ".", "load_data", "(", ")", "\n", "\n", "train_images", "=", "np", ".", "reshape", "(", "train_images", ",", "(", "60000", ",", "-", "1", ")", ")", "\n", "test_images", "=", "np", ".", "reshape", "(", "test_images", ",", "(", "10000", ",", "-", "1", ")", ")", "\n", "index_tr", "=", "np", ".", "arange", "(", "60000", ")", "\n", "train_labels", "=", "np", ".", "zeros", "(", "(", "60000", ",", "10", ")", ")", "\n", "train_labels", "[", "index_tr", ",", "tr_labels", "]", "=", "1", "\n", "index_te", "=", "np", ".", "arange", "(", "10000", ")", "\n", "test_labels", "=", "np", ".", "zeros", "(", "(", "10000", ",", "10", ")", ")", "\n", "test_labels", "[", "index_te", ",", "te_labels", "]", "=", "1", "\n", "\n", "\n", "fashion_mnist_data", "=", "_select_fashion_mnist_subset", "(", "\n", "train_images", ",", "train_labels", ",", "test_images", ",", "test_labels", ",", "\n", "num_train", ",", "\n", "use_float64", "=", "use_float64", ",", "\n", "mean_subtraction", "=", "mean_subtraction", ",", "\n", "random_roated_labels", "=", "random_roated_labels", ")", "\n", "\n", "return", "fashion_mnist_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset._select_fashion_mnist_subset": [[160, 222], ["list", "numpy.random.seed", "digits.sort", "len", "numpy.array", "numpy.argmax", "[].astype", "[].astype", "[].astype", "[].astype", "test_images.astype", "test_labels.astype", "range", "numpy.random.shuffle", "numpy.argsort", "numpy.mean", "numpy.mean", "numpy.linalg.qr", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.concatenate", "numpy.concatenate", "numpy.argmax", "numpy.random.rand", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "_select_fashion_mnist_subset", "(", "train_images", ",", "train_labels", ",", "test_images", ",", "test_labels", ",", "\n", "num_train", "=", "100", ",", "\n", "digits", "=", "list", "(", "range", "(", "10", ")", ")", ",", "\n", "seed", "=", "9999", ",", "\n", "sort_by_class", "=", "False", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Select subset of MNIST and apply preprocessing.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "digits", ".", "sort", "(", ")", "\n", "\n", "\n", "num_class", "=", "len", "(", "digits", ")", "\n", "num_per_class", "=", "num_train", "//", "num_class", "\n", "\n", "idx_list", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "ys", "=", "np", ".", "argmax", "(", "train_labels", ",", "axis", "=", "1", ")", "# undo one-hot", "\n", "\n", "for", "digit", "in", "digits", ":", "\n", "    ", "if", "50000", "==", "num_train", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "\n", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", "[", ":", "num_per_class", "]", ")", ")", "\n", "", "", "if", "not", "sort_by_class", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "\n", "", "data_precision", "=", "np", ".", "float64", "if", "use_float64", "else", "np", ".", "float32", "\n", "\n", "train_image", "=", "train_images", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "train_label", "=", "train_labels", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_image", "=", "train_images", "[", "idx_list", "]", "[", "num_train", ":", "num_train", "+", "1000", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_label", "=", "train_labels", "[", "idx_list", "]", "[", "num_train", ":", "num_train", "+", "1000", "]", ".", "astype", "(", "data_precision", ")", "\n", "test_image", "=", "test_images", ".", "astype", "(", "data_precision", ")", "\n", "test_label", "=", "test_labels", ".", "astype", "(", "data_precision", ")", "\n", "\n", "if", "sort_by_class", ":", "\n", "    ", "train_idx", "=", "np", ".", "argsort", "(", "np", ".", "argmax", "(", "train_label", ",", "axis", "=", "1", ")", ")", "\n", "train_image", "=", "train_image", "[", "train_idx", "]", "\n", "train_label", "=", "train_label", "[", "train_idx", "]", "\n", "\n", "", "if", "mean_subtraction", ":", "\n", "    ", "train_image_mean", "=", "np", ".", "mean", "(", "train_image", ")", "\n", "train_label_mean", "=", "np", ".", "mean", "(", "train_label", ")", "\n", "train_image", "-=", "train_image_mean", "\n", "train_label", "-=", "train_label_mean", "\n", "valid_image", "-=", "train_image_mean", "\n", "valid_label", "-=", "train_label_mean", "\n", "test_image", "-=", "train_image_mean", "\n", "test_label", "-=", "train_label_mean", "\n", "\n", "", "if", "random_roated_labels", ":", "\n", "    ", "r", ",", "_", "=", "np", ".", "linalg", ".", "qr", "(", "np", ".", "random", ".", "rand", "(", "10", ",", "10", ")", ")", "\n", "train_label", "=", "np", ".", "dot", "(", "train_label", ",", "r", ")", "\n", "valid_label", "=", "np", ".", "dot", "(", "valid_label", ",", "r", ")", "\n", "test_label", "=", "np", ".", "dot", "(", "test_label", ",", "r", ")", "\n", "\n", "", "return", "(", "train_image", ",", "train_label", ",", "\n", "valid_image", ",", "valid_label", ",", "\n", "test_image", ",", "test_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset.load_cifar10": [[224, 254], ["cifar10.load_data", "numpy.reshape", "numpy.reshape", "numpy.arange", "numpy.zeros", "numpy.arange", "numpy.zeros", "load_dataset._select_cifar10_subset"], "function", ["home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset._select_cifar10_subset"], ["", "def", "load_cifar10", "(", "num_train", "=", "40000", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Loads MNIST as numpy array.\"\"\"", "\n", "\n", "data_dir", "=", "FLAGS", ".", "data_dir", "\n", "\n", "cifar10", "=", "tf", ".", "keras", ".", "datasets", ".", "cifar10", "\n", "\n", "(", "train_images", ",", "tr_labels", ")", ",", "(", "test_images", ",", "te_labels", ")", "=", "cifar10", ".", "load_data", "(", ")", "\n", "\n", "train_images", "=", "np", ".", "reshape", "(", "train_images", ",", "(", "50000", ",", "-", "1", ")", ")", "\n", "test_images", "=", "np", ".", "reshape", "(", "test_images", ",", "(", "10000", ",", "-", "1", ")", ")", "\n", "index_tr", "=", "np", ".", "arange", "(", "50000", ")", "\n", "train_labels", "=", "np", ".", "zeros", "(", "(", "50000", ",", "10", ")", ")", "\n", "train_labels", "[", "index_tr", ",", "tr_labels", "[", ":", ",", "0", "]", "]", "=", "1", "\n", "index_te", "=", "np", ".", "arange", "(", "10000", ")", "\n", "test_labels", "=", "np", ".", "zeros", "(", "(", "10000", ",", "10", ")", ")", "\n", "test_labels", "[", "index_te", ",", "te_labels", "[", ":", ",", "0", "]", "]", "=", "1", "\n", "\n", "\n", "cifar10_data", "=", "_select_cifar10_subset", "(", "\n", "train_images", ",", "train_labels", ",", "test_images", ",", "test_labels", ",", "\n", "num_train", ",", "\n", "use_float64", "=", "use_float64", ",", "\n", "mean_subtraction", "=", "mean_subtraction", ",", "\n", "random_roated_labels", "=", "random_roated_labels", ")", "\n", "\n", "return", "cifar10_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fengleifan_nngp_by_depth.NNGP_wide.load_dataset._select_cifar10_subset": [[258, 320], ["list", "numpy.random.seed", "digits.sort", "len", "numpy.array", "numpy.argmax", "[].astype", "[].astype", "[].astype", "[].astype", "test_images.astype", "test_labels.astype", "range", "numpy.random.shuffle", "numpy.argsort", "numpy.mean", "numpy.mean", "numpy.linalg.qr", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.concatenate", "numpy.concatenate", "numpy.argmax", "numpy.random.rand", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "_select_cifar10_subset", "(", "train_images", ",", "train_labels", ",", "test_images", ",", "test_labels", ",", "\n", "num_train", "=", "100", ",", "\n", "digits", "=", "list", "(", "range", "(", "10", ")", ")", ",", "\n", "seed", "=", "9999", ",", "\n", "sort_by_class", "=", "False", ",", "\n", "use_float64", "=", "False", ",", "\n", "mean_subtraction", "=", "False", ",", "\n", "random_roated_labels", "=", "False", ")", ":", "\n", "  ", "\"\"\"Select subset of MNIST and apply preprocessing.\"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "digits", ".", "sort", "(", ")", "\n", "\n", "\n", "num_class", "=", "len", "(", "digits", ")", "\n", "num_per_class", "=", "num_train", "//", "num_class", "\n", "\n", "idx_list", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "ys", "=", "np", ".", "argmax", "(", "train_labels", ",", "axis", "=", "1", ")", "# undo one-hot", "\n", "\n", "for", "digit", "in", "digits", ":", "\n", "    ", "if", "40000", "==", "num_train", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "idx_list", "=", "np", ".", "concatenate", "(", "(", "idx_list", ",", "\n", "np", ".", "where", "(", "ys", "==", "digit", ")", "[", "0", "]", "[", ":", "num_per_class", "]", ")", ")", "\n", "", "", "if", "not", "sort_by_class", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "idx_list", ")", "\n", "\n", "", "data_precision", "=", "np", ".", "float64", "if", "use_float64", "else", "np", ".", "float32", "\n", "\n", "train_image", "=", "train_images", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "train_label", "=", "train_labels", "[", "idx_list", "]", "[", ":", "num_train", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_image", "=", "train_images", "[", "idx_list", "]", "[", "num_train", ":", "num_train", "+", "1000", "]", ".", "astype", "(", "data_precision", ")", "\n", "valid_label", "=", "train_labels", "[", "idx_list", "]", "[", "num_train", ":", "num_train", "+", "1000", "]", ".", "astype", "(", "data_precision", ")", "\n", "test_image", "=", "test_images", ".", "astype", "(", "data_precision", ")", "\n", "test_label", "=", "test_labels", ".", "astype", "(", "data_precision", ")", "\n", "\n", "if", "sort_by_class", ":", "\n", "    ", "train_idx", "=", "np", ".", "argsort", "(", "np", ".", "argmax", "(", "train_label", ",", "axis", "=", "1", ")", ")", "\n", "train_image", "=", "train_image", "[", "train_idx", "]", "\n", "train_label", "=", "train_label", "[", "train_idx", "]", "\n", "\n", "", "if", "mean_subtraction", ":", "\n", "    ", "train_image_mean", "=", "np", ".", "mean", "(", "train_image", ")", "\n", "train_label_mean", "=", "np", ".", "mean", "(", "train_label", ")", "\n", "train_image", "-=", "train_image_mean", "\n", "train_label", "-=", "train_label_mean", "\n", "valid_image", "-=", "train_image_mean", "\n", "valid_label", "-=", "train_label_mean", "\n", "test_image", "-=", "train_image_mean", "\n", "test_label", "-=", "train_label_mean", "\n", "\n", "", "if", "random_roated_labels", ":", "\n", "    ", "r", ",", "_", "=", "np", ".", "linalg", ".", "qr", "(", "np", ".", "random", ".", "rand", "(", "10", ",", "10", ")", ")", "\n", "train_label", "=", "np", ".", "dot", "(", "train_label", ",", "r", ")", "\n", "valid_label", "=", "np", ".", "dot", "(", "valid_label", ",", "r", ")", "\n", "test_label", "=", "np", ".", "dot", "(", "test_label", ",", "r", ")", "\n", "\n", "", "return", "(", "train_image", ",", "train_label", ",", "\n", "valid_image", ",", "valid_label", ",", "\n", "test_image", ",", "test_label", ")", "", "", ""]]}