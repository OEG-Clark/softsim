{"home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ExModelSampler.__init__": [[30, 36], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buffer", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\" ExModelSampler. \"\"\"", "\n", "self", ".", "buffer", "=", "buffer", "\n", "self", ".", "dataloader", "=", "DataLoader", "(", "self", ".", "buffer", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "self", ".", "iter_dl", "=", "iter", "(", "self", ".", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ExModelSampler.sample": [[37, 47], ["next", "iter", "next"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "\"\"\" Sample a mini-batch.\n\n        :return: mini-batch\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "next", "(", "self", ".", "iter_dl", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "iter_dl", "=", "iter", "(", "self", ".", "dataloader", ")", "\n", "return", "next", "(", "self", ".", "iter_dl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ExMLBuffer.__init__": [[50, 63], ["expert_model.eval"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "expert_model", ",", "experience", ",", "buffer_size", "=", "100", ")", ":", "\n", "        ", "\"\"\" Buffer for ex-model strategies.\n\n        :param expert_model:\n        :param experience:\n        :param buffer_size:\n        \"\"\"", "\n", "expert_model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "expert_model", "=", "expert_model", "\n", "self", ".", "experience", "=", "experience", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "buffer", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ExMLBuffer.__getitem__": [[64, 66], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "buffer", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ExMLBuffer.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ReplayBuffer.__init__": [[72, 86], ["sampler.ExMLBuffer.__init__", "torch.utils.data.random_split", "torch.utils.data.random_split", "avalanche.benchmarks.utils.dataset_utils.ConstantSequence", "avalanche.benchmarks.utils.AvalancheDataset", "len", "len"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "expert_model", ",", "experience", ",", "buffer_size", "=", "100", ")", ":", "\n", "        ", "\"\"\" Buffer that stores a subsample of the experience's data.\n\n        :param expert_model: trained model (nn.Module)\n        :param experience: `Experience` used to train `model`.\n        :param buffer_size:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "expert_model", ",", "experience", ",", "buffer_size", ")", "\n", "\n", "data", "=", "self", ".", "experience", ".", "dataset", "\n", "rem_len", "=", "len", "(", "data", ")", "-", "buffer_size", "\n", "self", ".", "buffer", ",", "_", "=", "random_split", "(", "data", ",", "[", "buffer_size", ",", "rem_len", "]", ")", "\n", "t", "=", "ConstantSequence", "(", "self", ".", "experience", ".", "task_label", ",", "len", "(", "self", ".", "buffer", ")", ")", "\n", "self", ".", "buffer", "=", "AvalancheDataset", "(", "self", ".", "buffer", ",", "task_labels", "=", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.AuxDataBuffer.__init__": [[89, 105], ["sampler.ExMLBuffer.__init__", "torch.utils.data.random_split", "torch.utils.data.random_split", "avalanche.benchmarks.utils.dataset_utils.ConstantSequence", "avalanche.benchmarks.utils.AvalancheDataset", "len"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "expert_model", ",", "experience", ",", "aux_data", ",", "transform", ",", "buffer_size", "=", "100", ")", ":", "\n", "        ", "\"\"\" Buffer that stores a subsample of the experience's data.\n\n        :param model: trained model (nn.Module)\n        :param experience: `Experience` used to train `model`.\n        :param aux_data: auxiliary data.\n        :param buffer_size:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "expert_model", ",", "experience", ",", "buffer_size", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "rem_len", "=", "len", "(", "aux_data", ")", "-", "buffer_size", "\n", "self", ".", "buffer", ",", "_", "=", "random_split", "(", "aux_data", ",", "[", "buffer_size", ",", "rem_len", "]", ")", "\n", "\n", "t", "=", "ConstantSequence", "(", "self", ".", "experience", ".", "task_label", ",", "buffer_size", ")", "\n", "self", ".", "buffer", "=", "AvalancheDataset", "(", "self", ".", "buffer", ",", "task_labels", "=", "t", ",", "transform", "=", "self", ".", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.SyntheticBuffer.__init__": [[108, 153], ["sampler.ExMLBuffer.__init__", "sampler.SyntheticBuffer.expert_model.eval", "sampler.SyntheticBuffer._optimize_buffer", "sampler.SyntheticBuffer._set_bns_hooks"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._optimize_buffer", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.SyntheticBuffer._set_bns_hooks"], ["    ", "def", "__init__", "(", "self", ",", "expert_model", ",", "experience", ",", "transform", ",", "buffer_size", "=", "100", ",", "\n", "device", "=", "'cpu'", ",", "n_iter", "=", "1000", ",", "lr", "=", "0.1", ",", "weight_decay", "=", ".001", ",", "\n", "lambda_blur", "=", "0.001", ",", "lambda_bns", "=", "1.0", ",", "train_batch_size", "=", "512", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\" Extracts samples from the model by optimizing random noise.\n\n        :param expert_model:\n        :param experience:\n        :param transform:\n        :param buffer_size:\n        :param device:\n        :param n_iter:\n        :param lr:\n        :param weight_decay:\n        :param temperature:\n        :param lambda_blur:\n        :param lambda_bns:\n        :param train_batch_size:\n        :param verbose:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "expert_model", ",", "experience", ",", "buffer_size", ")", "\n", "self", ".", "expert_model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "train_batch_size", "=", "train_batch_size", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "lambda_blur", "=", "lambda_blur", "\n", "self", ".", "lambda_bns", "=", "lambda_bns", "\n", "\n", "if", "self", ".", "transform", "is", "None", ":", "# no transform", "\n", "            ", "self", ".", "transform", "=", "lambda", "x", ":", "x", "\n", "\n", "", "self", ".", "buffer", "=", "None", "# generated samples", "\n", "\n", "self", ".", "bn_hooks", "=", "[", "]", "\n", "\n", "self", ".", "mb_bns_loss", "=", "0", "\n", "if", "self", ".", "lambda_bns", ">", "0", ":", "\n", "            ", "self", ".", "_set_bns_hooks", "(", ")", "\n", "", "self", ".", "_optimize_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.SyntheticBuffer._criterion": [[154, 156], ["NotImplementedError"], "methods", ["None"], ["", "def", "_criterion", "(", "self", ",", "y_pred", ",", "y_curr", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.SyntheticBuffer._set_bns_hooks": [[157, 169], ["list", "filter", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "SyntheticBuffer.bn_stat_loss().mean", "mod.register_forward_hook", "sampler.SyntheticBuffer.bn_hooks.append", "list", "len", "isinstance", "sampler.SyntheticBuffer.expert_model.modules", "sampler.SyntheticBuffer.bn_stat_loss"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.SyntheticBuffer.bn_stat_loss"], ["", "def", "_set_bns_hooks", "(", "self", ")", ":", "\n", "        ", "batchnorm_modules", "=", "list", "(", "filter", "(", "lambda", "x", ":", "isinstance", "(", "x", ",", "BatchNorm2d", ")", ",", "list", "(", "self", ".", "expert_model", ".", "modules", "(", ")", ")", ")", ")", "\n", "\n", "def", "batchnorm_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "assert", "len", "(", "input", ")", "==", "1", "\n", "in_mu", "=", "torch", ".", "mean", "(", "input", "[", "0", "]", ",", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ")", "\n", "in_var", "=", "torch", ".", "var", "(", "input", "[", "0", "]", ",", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ",", "unbiased", "=", "False", ")", "\n", "self", ".", "mb_bns_loss", "=", "SyntheticBuffer", ".", "bn_stat_loss", "(", "in_mu", ",", "in_var", ",", "module", ".", "running_mean", ",", "module", ".", "running_var", ")", ".", "mean", "(", ")", "\n", "\n", "", "for", "mod", "in", "batchnorm_modules", ":", "\n", "            ", "h", "=", "mod", ".", "register_forward_hook", "(", "batchnorm_hook", ")", "\n", "self", ".", "bn_hooks", ".", "append", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.SyntheticBuffer.bn_stat_loss": [[170, 175], ["torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.mse_loss", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.mse_loss", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.mse_loss", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.mse_loss"], ["", "", "@", "staticmethod", "\n", "def", "bn_stat_loss", "(", "mu1", ",", "var1", ",", "mu2", ",", "var2", ")", ":", "\n", "        ", "kd", "=", "F", ".", "mse_loss", "(", "mu2", ",", "mu1", ")", "\n", "kd", "+=", "F", ".", "mse_loss", "(", "var2", ",", "var1", ")", "\n", "return", "kd", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.SyntheticBuffer._init_buffer": [[176, 192], ["torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "avalanche.benchmarks.utils.dataset_utils.ConstantSequence", "enumerate", "random.sample", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ExModelSampler.sample"], ["", "def", "_init_buffer", "(", "self", ")", ":", "\n", "        ", "curr_classes", "=", "self", ".", "experience", ".", "classes_in_this_experience", "\n", "img_shape", "=", "self", ".", "experience", ".", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "\n", "\n", "if", "self", ".", "pat_per_class", "==", "0", ":", "\n", "# buffer_size < num_classes. Select a random subset of classes.", "\n", "            ", "self", ".", "pat_per_class", "=", "1", "\n", "curr_classes", "=", "random", ".", "sample", "(", "curr_classes", ",", "self", ".", "buffer_size", ")", "\n", "\n", "", "gen_x", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "buffer_size", ",", "*", "img_shape", ",", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "gen_y", "=", "torch", ".", "zeros", "(", "self", ".", "buffer_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "gen_t", "=", "ConstantSequence", "(", "self", ".", "experience", ".", "task_label", ",", "gen_x", ".", "shape", "[", "0", "]", ")", "\n", "for", "idx", ",", "yl", "in", "enumerate", "(", "curr_classes", ")", ":", "\n", "            ", "y_curr", "=", "gen_y", "[", "idx", "*", "self", ".", "pat_per_class", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "pat_per_class", "]", "\n", "y_curr", "[", ":", "]", "=", "yl", "\n", "", "return", "gen_x", ",", "gen_y", ",", "gen_t", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.SyntheticBuffer._make_dataset": [[193, 198], ["avalanche.benchmarks.utils.AvalancheTensorDataset", "sampler.SyntheticBuffer.gen_x.to", "sampler.SyntheticBuffer.gen_y.to"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to"], ["", "def", "_make_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "gen_x", ".", "requires_grad", "=", "False", "\n", "self", ".", "buffer", "=", "AvalancheTensorDataset", "(", "\n", "self", ".", "gen_x", ".", "to", "(", "'cpu'", ")", ",", "self", ".", "gen_y", ".", "to", "(", "'cpu'", ")", ",", "\n", "targets", "=", "1", ",", "task_labels", "=", "self", ".", "gen_t", ",", "transform", "=", "self", ".", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.SyntheticBuffer._optimize_buffer": [[199, 292], ["ExModelSampler.SyntheticBuffer.expert_model.eval", "len", "numpy.prod", "exmodel.models.GaussianBlur().to", "ExModelSampler.SyntheticBuffer._init_buffer", "torch.optim.Adam", "torch.optim.Adam", "range", "ExModelSampler.SyntheticBuffer._make_dataset", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "range", "torch.optim.Adam.step", "torch.optim.Adam.step", "gen_x.data.clip_", "gen_x.detach", "gen_y.detach", "handle.remove", "exmodel.models.GaussianBlur", "ExModelSampler.SyntheticBuffer.transform", "ExModelSampler.SyntheticBuffer.expert_model", "loss.backward", "in_notebook", "plt.figure", "torchvision.utils.make_grid", "torchvision.utils.make_grid.numpy", "plt.imshow", "ExModelSampler.SyntheticBuffer._make_dataset", "print", "ExModelSampler.ExModelSampler", "ExModelSampler.ExModelSampler.sample", "torch.softmax", "torch.softmax", "[].mean", "print", "os.makedirs", "torchvision.utils.save_image", "x_curr.reshape", "exmodel.models.GaussianBlur().to.reshape", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "torch.norm().sum", "gen_x.detach", "sx.detach().cpu", "numpy.transpose", "gen_x.detach", "gen_y.detach", "sx.to", "sy.to", "ExModelSampler.SyntheticBuffer.expert_model", "exmodel.models.GaussianBlur().to.", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "ExModelSampler.SyntheticBuffer._criterion", "sx.detach", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "sy.reshape"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._init_buffer", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._make_dataset", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.in_notebook", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._make_dataset", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ExModelSampler.sample", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._criterion"], ["", "def", "_optimize_buffer", "(", "self", ")", ":", "\n", "        ", "self", ".", "expert_model", ".", "eval", "(", ")", "\n", "\n", "curr_classes", "=", "self", ".", "experience", ".", "classes_in_this_experience", "\n", "n_classes", "=", "len", "(", "curr_classes", ")", "\n", "img_shape", "=", "self", ".", "experience", ".", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "\n", "flat_size", "=", "np", ".", "prod", "(", "img_shape", ")", "\n", "blur_filter", "=", "GaussianBlur", "(", "img_shape", "[", "0", "]", ",", "7", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "pat_per_class", "=", "self", ".", "buffer_size", "//", "n_classes", "\n", "if", "self", ".", "pat_per_class", ">", "0", ":", "# make buffer_size a multiple of n_classes", "\n", "            ", "self", ".", "buffer_size", "=", "self", ".", "pat_per_class", "*", "n_classes", "\n", "\n", "", "gen_x", ",", "gen_y", ",", "gen_t", "=", "self", ".", "_init_buffer", "(", ")", "\n", "opt", "=", "Adam", "(", "[", "gen_x", "]", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "0", ")", "\n", "# opt = SGD([gen_x], lr=self.lr, weight_decay=0, momentum=0.9)", "\n", "# optim_data = TensorDataset(gen_x, gen_y)", "\n", "for", "it", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "            ", "opt", ".", "zero_grad", "(", ")", "\n", "rand_perm", "=", "torch", ".", "randperm", "(", "self", ".", "buffer_size", ")", "\n", "\n", "loss", "=", "0", "\n", "# dl = DataLoader(optim_data, batch_size=self.train_batch_size)", "\n", "for", "base_idx", "in", "range", "(", "0", ",", "self", ".", "buffer_size", ",", "self", ".", "train_batch_size", ")", ":", "\n", "                ", "x_curr", "=", "gen_x", "[", "rand_perm", "]", "[", "base_idx", ":", "base_idx", "+", "self", ".", "train_batch_size", "]", "\n", "y_curr", "=", "gen_y", "[", "rand_perm", "]", "[", "base_idx", ":", "base_idx", "+", "self", ".", "train_batch_size", "]", "\n", "\n", "self", ".", "mb_bns_loss", "=", "0", "\n", "x_aug", "=", "self", ".", "transform", "(", "x_curr", ")", "\n", "y_pred", "=", "self", ".", "expert_model", "(", "x_aug", ")", "\n", "\n", "# norm penalty", "\n", "if", "self", ".", "weight_decay", "==", "0.0", ":", "\n", "                    ", "norm", "=", "0.0", "\n", "", "else", ":", "\n", "                    ", "norm", "=", "(", "x_curr", "*", "x_curr", ")", ".", "sum", "(", ")", "\n", "# norm = torch.abs(x_curr).sum()", "\n", "\n", "# blur penalty", "\n", "", "if", "self", ".", "lambda_blur", "==", "0.0", ":", "\n", "                    ", "blur", "=", "0.0", "\n", "", "else", ":", "\n", "                    ", "x_noborder", "=", "x_curr", ".", "reshape", "(", "-", "1", ",", "flat_size", ")", "\n", "x_blur", "=", "blur_filter", "(", "x_curr", ")", ".", "reshape", "(", "-", "1", ",", "flat_size", ")", "\n", "# blur = F.mse_loss(x_noborder, x_blur, reduction='sum')", "\n", "blur", "=", "torch", ".", "norm", "(", "x_noborder", "-", "x_blur", ",", "dim", "=", "1", ")", ".", "sum", "(", ")", "\n", "\n", "# bns loss", "\n", "", "if", "self", ".", "lambda_bns", "==", "0.0", ":", "\n", "                    ", "bns_loss", "=", "0.0", "\n", "", "else", ":", "\n", "                    ", "bns_loss", "=", "self", ".", "mb_bns_loss", "# computed inside hooks", "\n", "# mult = x_curr.shape[0] * x_curr.shape[2] * x_curr.shape[3]", "\n", "# x_mean, x_var = x_curr.mean(dim=(0, 2, 3)), x_curr.var(dim=(0, 2, 3))", "\n", "# bns_loss = F.mse_loss(x_mean, torch.zeros_like(x_mean), reduction='sum') * mult", "\n", "# bns_loss += F.mse_loss(x_var, torch.ones_like(x_var), reduction='sum') * mult", "\n", "\n", "# total loss", "\n", "", "loss", "=", "self", ".", "_criterion", "(", "y_pred", ",", "y_curr", ")", "+", "self", ".", "weight_decay", "*", "norm", "+", "self", ".", "lambda_blur", "*", "blur", "+", "self", ".", "lambda_bns", "*", "bns_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "", "opt", ".", "step", "(", ")", "\n", "gen_x", ".", "data", ".", "clip_", "(", "-", "3", ",", "+", "3", ")", "\n", "# gen_x.data[:] -= 10 * self.weight_decay * blur_filter(gen_x)", "\n", "\n", "if", "in_notebook", "(", ")", "and", "self", ".", "verbose", "and", "it", "%", "500", "==", "499", ":", "\n", "                ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "sx", "=", "gen_x", ".", "detach", "(", ")", "[", ":", ":", "10", "]", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "96", ")", ")", "\n", "img", "=", "make_grid", "(", "sx", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "nrow", "=", "10", ",", "scale_each", "=", "True", ")", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ",", "interpolation", "=", "'nearest'", ")", "\n", "\n", "", "if", "self", ".", "verbose", "and", "it", "%", "100", "==", "0", ":", "\n", "                ", "self", ".", "gen_x", ",", "self", ".", "gen_y", ",", "self", ".", "gen_t", "=", "gen_x", ".", "detach", "(", ")", ",", "gen_y", ".", "detach", "(", ")", ",", "gen_t", "\n", "self", ".", "_make_dataset", "(", ")", "\n", "print", "(", "f\"\\t(it={it}) loss: {loss:.6f}, blur: {blur: .6f}, norm: {norm: .6f}, bns: {bns_loss: .6f}\"", ")", "\n", "sampler", "=", "ExModelSampler", "(", "self", ",", "batch_size", "=", "32", ")", "\n", "sx", ",", "sy", ",", "_", "=", "sampler", ".", "sample", "(", ")", "\n", "sx", ",", "sy", "=", "sx", ".", "to", "(", "self", ".", "device", ")", ",", "sy", ".", "to", "(", "self", ".", "device", ")", "\n", "px", "=", "F", ".", "softmax", "(", "self", ".", "expert_model", "(", "sx", ")", ",", "dim", "=", "1", ")", "\n", "px_y", "=", "torch", ".", "gather", "(", "px", ",", "1", ",", "sy", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "[", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "print", "(", "f\"mean_acc: {px_y:.4f}\"", ")", "\n", "os", ".", "makedirs", "(", "'./logs/tmp_logs'", ",", "exist_ok", "=", "True", ")", "\n", "save_image", "(", "sx", ",", "f'./logs/tmp_logs/genbuff_it{it}.jpg'", ")", "\n", "\n", "", "", "self", ".", "gen_x", ",", "self", ".", "gen_y", ",", "self", ".", "gen_t", "=", "gen_x", ".", "detach", "(", ")", ",", "gen_y", ".", "detach", "(", ")", ",", "gen_t", "\n", "self", ".", "_make_dataset", "(", ")", "\n", "\n", "for", "handle", "in", "self", ".", "bn_hooks", ":", "\n", "            ", "handle", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.BufferFromPath.__init__": [[295, 302], ["sampler.ExMLBuffer.__init__", "torch.load().to", "torch.load().to", "torch.load().to", "torch.load().to", "torch.load().to", "torch.load().to", "torch.load().to", "torch.load().to", "avalanche.benchmarks.utils.dataset_utils.ConstantSequence", "avalanche.benchmarks.utils.AvalancheTensorDataset", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "experience", ",", "logdir", ",", "transform", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "experience", ",", "None", ")", "\n", "exp_id", "=", "experience", ".", "current_experience", "\n", "gen_x", "=", "torch", ".", "load", "(", "f'{logdir}/buffer_x_e{exp_id}.pt'", ")", ".", "to", "(", "'cuda'", ")", "\n", "gen_y", "=", "torch", ".", "load", "(", "f'{logdir}/buffer_y_e{exp_id}.pt'", ")", ".", "to", "(", "'cuda'", ")", "\n", "gen_t", "=", "ConstantSequence", "(", "self", ".", "experience", ".", "task_label", ",", "gen_x", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "buffer", "=", "AvalancheTensorDataset", "(", "gen_x", ",", "gen_y", ",", "targets", "=", "1", ",", "task_labels", "=", "gen_t", ",", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ModelInversionBuffer.__init__": [[305, 331], ["sampler.SyntheticBuffer.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "expert_model", ",", "experience", ",", "transform", ",", "buffer_size", "=", "100", ",", "\n", "device", "=", "'cpu'", ",", "n_iter", "=", "1000", ",", "lr", "=", "0.1", ",", "weight_decay", "=", ".001", ",", "\n", "lambda_blur", "=", "0.001", ",", "lambda_bns", "=", "1.0", ",", "train_batch_size", "=", "512", ",", "verbose", "=", "False", ",", "\n", "temperature", "=", "1.0", ")", ":", "\n", "        ", "\"\"\" Extracts samples from the model by optimizing random noise to reach\n        low error when using model to predict the class.\n\n        :param expert_model:\n        :param experience:\n        :param transform:\n        :param buffer_size:\n        :param device:\n        :param n_iter:\n        :param lr:\n        :param weight_decay:\n        :param temperature:\n        :param lambda_blur:\n        :param lambda_bns:\n        :param train_batch_size:\n        :param verbose:\n        \"\"\"", "\n", "self", ".", "temperature", "=", "temperature", "\n", "super", "(", ")", ".", "__init__", "(", "expert_model", "=", "expert_model", ",", "experience", "=", "experience", ",", "transform", "=", "transform", ",", "\n", "buffer_size", "=", "buffer_size", ",", "device", "=", "device", ",", "n_iter", "=", "n_iter", ",", "lr", "=", "lr", ",", "\n", "weight_decay", "=", "weight_decay", ",", "lambda_blur", "=", "lambda_blur", ",", "lambda_bns", "=", "lambda_bns", ",", "\n", "train_batch_size", "=", "train_batch_size", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ModelInversionBuffer._criterion": [[332, 334], ["torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "_criterion", "(", "self", ",", "y_pred", ",", "y_curr", ")", ":", "\n", "        ", "return", "F", ".", "cross_entropy", "(", "y_pred", "/", "self", ".", "temperature", ",", "y_curr", ",", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer.__init__": [[341, 370], ["sampler.SyntheticBuffer.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "expert_model", ",", "experience", ",", "transform", ",", "buffer_size", "=", "100", ",", "\n", "device", "=", "'cpu'", ",", "n_iter", "=", "1000", ",", "lr", "=", "0.1", ",", "weight_decay", "=", ".001", ",", "\n", "lambda_blur", "=", "0.001", ",", "lambda_bns", "=", "1.0", ",", "train_batch_size", "=", "512", ",", "verbose", "=", "False", ",", "\n", "temperature", "=", "1.0", ",", "beta", "=", "0.1", ",", "get_classifier", "=", "_default_get_classifier", ")", ":", "\n", "        ", "\"\"\" Data Impression.\n\n        :param expert_model:\n        :param experience:\n        :param transform:\n        :param buffer_size:\n        :param device:\n        :param n_iter:\n        :param lr:\n        :param weight_decay:\n        :param lambda_blur:\n        :param lambda_bns:\n        :param train_batch_size:\n        :param verbose:\n        :param tau:\n        :param beta:\n        :param get_classifier:\n        \"\"\"", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "_get_classifier", "=", "get_classifier", "\n", "super", "(", ")", ".", "__init__", "(", "expert_model", "=", "expert_model", ",", "experience", "=", "experience", ",", "transform", "=", "transform", ",", "\n", "buffer_size", "=", "buffer_size", ",", "device", "=", "device", ",", "n_iter", "=", "n_iter", ",", "lr", "=", "lr", ",", "\n", "weight_decay", "=", "weight_decay", ",", "lambda_blur", "=", "lambda_blur", ",", "lambda_bns", "=", "lambda_bns", ",", "\n", "train_batch_size", "=", "train_batch_size", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._criterion": [[371, 373], ["torch.kl_div", "torch.kl_div", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "_criterion", "(", "self", ",", "y_pred", ",", "y_curr", ")", ":", "\n", "        ", "return", "F", ".", "kl_div", "(", "F", ".", "log_softmax", "(", "y_pred", "/", "self", ".", "temperature", ")", ",", "y_curr", ",", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._init_buffer": [[374, 416], ["torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "avalanche.benchmarks.utils.dataset_utils.ConstantSequence", "sampler.DataImpressionBuffer._get_classifier", "enumerate", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "print", "torch.distributions.Dirichlet", "torch.distributions.Dirichlet", "range", "len", "print", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.distributions.Dirichlet.sample", "torch.distributions.Dirichlet.sample", "classesl.extend", "max"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ExModelSampler.sample", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.ExModelSampler.sample"], ["", "def", "_init_buffer", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "num_classes", "=", "self", ".", "experience", ".", "scenario", ".", "n_classes", "\n", "", "except", ":", "\n", "# core50nc doesn't have num_classes attribute", "\n", "# Avalanche bug: https://github.com/ContinualAI/avalanche/issues/758", "\n", "            ", "numexp", "=", "len", "(", "self", ".", "experience", ".", "scenario", ".", "train_stream", ")", "\n", "classesl", "=", "[", "]", "\n", "for", "s", "in", "self", ".", "experience", ".", "scenario", ".", "classes_in_experience", "[", "'train'", "]", "[", ":", "numexp", "]", "[", "0", "]", ":", "\n", "                ", "classesl", ".", "extend", "(", "s", ")", "\n", "", "num_classes", "=", "max", "(", "classesl", ")", "+", "1", "\n", "# num_classes = max([el for s in list(self.experience.scenario.classes_in_experience['train']) for el in s]) + 1", "\n", "\n", "", "curr_classes", "=", "self", ".", "experience", ".", "classes_in_this_experience", "\n", "img_shape", "=", "self", ".", "experience", ".", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "\n", "\n", "gen_x", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "buffer_size", ",", "*", "img_shape", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "gen_y", "=", "torch", ".", "zeros", "(", "self", ".", "buffer_size", ",", "num_classes", ",", "device", "=", "self", ".", "device", ")", "\n", "gen_t", "=", "ConstantSequence", "(", "self", ".", "experience", ".", "task_label", ",", "gen_x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "W", "=", "self", ".", "_get_classifier", "(", "self", ".", "expert_model", ")", "\n", "W", "=", "W", "/", "torch", ".", "norm", "(", "W", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# row normalization", "\n", "self", ".", "class_sim", "=", "(", "W", "@", "W", ".", "T", ")", "\n", "\n", "for", "idx", ",", "yl", "in", "enumerate", "(", "curr_classes", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "f\"generating class {yl}\"", ")", "\n", "\n", "", "idx_start", "=", "idx", "*", "self", ".", "pat_per_class", "\n", "idx_end", "=", "(", "idx", "+", "1", ")", "*", "self", ".", "pat_per_class", "\n", "y_curr", "=", "gen_y", "[", "idx_start", ":", "idx_end", "]", "\n", "print", "(", "f\"idx: ({idx_start}, {idx_end})\"", ")", "\n", "\n", "# sample labels", "\n", "concentration", "=", "self", ".", "class_sim", "[", "yl", "]", "\n", "minc", ",", "maxc", "=", "torch", ".", "min", "(", "concentration", ")", ",", "torch", ".", "max", "(", "concentration", ")", "\n", "concentration", "=", "(", "concentration", "-", "minc", ")", "/", "(", "maxc", "-", "minc", ")", "\n", "concentration", "=", "self", ".", "beta", "*", "concentration", "+", "0.0001", "\n", "dist", "=", "Dirichlet", "(", "concentration", ")", "\n", "for", "ii", "in", "range", "(", "self", ".", "pat_per_class", ")", ":", "\n", "                ", "y_curr", "[", "ii", "]", "=", "dist", ".", "sample", "(", ")", "\n", "", "", "return", "gen_x", ",", "gen_y", ",", "gen_t", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._optimize_buffer": [[417, 420], ["sampler.SyntheticBuffer._optimize_buffer", "sampler.DataImpressionBuffer._make_dataset"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._optimize_buffer", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._make_dataset"], ["", "def", "_optimize_buffer", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "_optimize_buffer", "(", ")", "\n", "self", ".", "_make_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler.DataImpressionBuffer._make_dataset": [[421, 427], ["avalanche.benchmarks.utils.AvalancheTensorDataset", "torch.max", "torch.max", "torch.max", "torch.max", "sampler.DataImpressionBuffer.gen_x.to", "sampler.DataImpressionBuffer.target_classes_gen_y.to"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to"], ["", "def", "_make_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "gen_x", ".", "requires_grad", "=", "False", "\n", "self", ".", "target_classes_gen_y", "=", "torch", ".", "max", "(", "self", ".", "gen_y", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "self", ".", "buffer", "=", "AvalancheTensorDataset", "(", "\n", "self", ".", "gen_x", ".", "to", "(", "'cpu'", ")", ",", "self", ".", "target_classes_gen_y", ".", "to", "(", "'cpu'", ")", ",", "\n", "targets", "=", "1", ",", "task_labels", "=", "self", ".", "gen_t", ",", "transform", "=", "self", ".", "transform", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.sampler._default_get_classifier": [[336, 338], ["None"], "function", ["None"], ["", "", "def", "_default_get_classifier", "(", "model", ")", ":", "\n", "    ", "return", "model", ".", "classifier", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.to_json": [[23, 69], ["isinstance", "o.items", "isinstance", "utils.to_json", "isinstance", "isinstance", "isinstance", "str", "isinstance", "str", "isinstance", "utils.to_json", "utils.to_json", "isinstance", "numpy.issubdtype", "numpy.issubdtype", "isinstance", "numpy.issubdtype", "numpy.issubdtype", "map", "TypeError", "o.flatten().tolist", "map", "o.flatten().tolist", "str", "o.flatten", "type", "o.flatten"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.to_json", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.to_json", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.to_json"], ["def", "to_json", "(", "o", ",", "level", "=", "0", ",", "ignore_errors", "=", "False", ")", ":", "\n", "    ", "\"\"\" pretty-print json.\n    source: https://stackoverflow.com/questions/10097477/python-json-array-newlines\n    :param o:\n    :param level:\n    :return:\n    \"\"\"", "\n", "# TODO: fix NaN encoding from 'nan' to 'NaN'. 'nan' is non-standard and crashes during loading.", "\n", "ret", "=", "\"\"", "\n", "if", "isinstance", "(", "o", ",", "dict", ")", ":", "\n", "        ", "ret", "+=", "\"{\"", "+", "NEWLINE", "\n", "comma", "=", "\"\"", "\n", "for", "k", ",", "v", "in", "o", ".", "items", "(", ")", ":", "\n", "            ", "ret", "+=", "comma", "\n", "comma", "=", "\",\\n\"", "\n", "ret", "+=", "SPACE", "*", "INDENT", "*", "(", "level", "+", "1", ")", "\n", "ret", "+=", "'\"'", "+", "str", "(", "k", ")", "+", "'\":'", "+", "SPACE", "\n", "ret", "+=", "to_json", "(", "v", ",", "level", "+", "1", ",", "ignore_errors", ")", "\n", "\n", "", "ret", "+=", "NEWLINE", "+", "SPACE", "*", "INDENT", "*", "level", "+", "\"}\"", "\n", "", "elif", "isinstance", "(", "o", ",", "str", ")", ":", "\n", "        ", "ret", "+=", "'\"'", "+", "o", "+", "'\"'", "\n", "", "elif", "isinstance", "(", "o", ",", "list", ")", ":", "\n", "        ", "ret", "+=", "\"[\"", "+", "\",\"", ".", "join", "(", "[", "to_json", "(", "e", ",", "level", "+", "1", ",", "ignore_errors", ")", "for", "e", "in", "o", "]", ")", "+", "\"]\"", "\n", "# Tuples are interpreted as lists", "\n", "", "elif", "isinstance", "(", "o", ",", "tuple", ")", ":", "\n", "        ", "ret", "+=", "\"[\"", "+", "\",\"", ".", "join", "(", "to_json", "(", "e", ",", "level", "+", "1", ",", "ignore_errors", ")", "for", "e", "in", "o", ")", "+", "\"]\"", "\n", "", "elif", "isinstance", "(", "o", ",", "bool", ")", ":", "\n", "        ", "ret", "+=", "\"true\"", "if", "o", "else", "\"false\"", "\n", "", "elif", "isinstance", "(", "o", ",", "int", ")", ":", "\n", "        ", "ret", "+=", "str", "(", "o", ")", "\n", "", "elif", "isinstance", "(", "o", ",", "float", ")", ":", "\n", "        ", "ret", "+=", "'%.7g'", "%", "o", "\n", "", "elif", "isinstance", "(", "o", ",", "numpy", ".", "ndarray", ")", "and", "numpy", ".", "issubdtype", "(", "o", ".", "dtype", ",", "numpy", ".", "integer", ")", ":", "\n", "        ", "ret", "+=", "\"[\"", "+", "','", ".", "join", "(", "map", "(", "str", ",", "o", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", ")", "+", "\"]\"", "\n", "", "elif", "isinstance", "(", "o", ",", "numpy", ".", "ndarray", ")", "and", "numpy", ".", "issubdtype", "(", "o", ".", "dtype", ",", "numpy", ".", "inexact", ")", ":", "\n", "        ", "ret", "+=", "\"[\"", "+", "','", ".", "join", "(", "map", "(", "lambda", "x", ":", "'%.7g'", "%", "x", ",", "o", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", ")", "+", "\"]\"", "\n", "", "elif", "o", "is", "None", ":", "\n", "        ", "ret", "+=", "'null'", "\n", "", "elif", "ignore_errors", ":", "\n", "# we do not recognize the type but we don't want to raise an error.", "\n", "        ", "ret", "=", "'\"<not serializable>\"'", "\n", "", "else", ":", "\n", "# Unknown type. Raise error.", "\n", "        ", "raise", "TypeError", "(", "\"Unknown type '%s' for json serialization\"", "%", "str", "(", "type", "(", "o", ")", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.load_ex_models": [[71, 81], ["range", "os.path.join", "models.append", "print", "torch.load"], "function", ["None"], ["", "def", "load_ex_models", "(", "log_dir", ",", "num_experiences", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "models", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_experiences", ")", ":", "\n", "            ", "model_fname", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'model_e{i}.pt'", ")", "\n", "models", ".", "append", "(", "torch", ".", "load", "(", "model_fname", ")", ")", "\n", "", "return", "models", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "print", "(", "\"please train separate models before launching ex-model experiment.\"", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.set_gpus": [[83, 115], ["gpustat.GPUStatCollection.new_query", "range", "print", "print", "min", "selected.append", "print", "len", "str", "map", "str", "str", "int", "float", "float"], "function", ["None"], ["", "", "def", "set_gpus", "(", "num_gpus", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "gpustat", "\n", "", "except", "ImportError", ":", "\n", "        ", "print", "(", "\"gpustat module is not installed. No GPU allocated.\"", ")", "\n", "\n", "", "try", ":", "\n", "        ", "selected", "=", "[", "]", "\n", "\n", "stats", "=", "gpustat", ".", "GPUStatCollection", ".", "new_query", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_gpus", ")", ":", "\n", "\n", "            ", "ids_mem", "=", "[", "res", "for", "res", "in", "map", "(", "lambda", "gpu", ":", "(", "int", "(", "gpu", ".", "entry", "[", "'index'", "]", ")", ",", "\n", "float", "(", "gpu", ".", "entry", "[", "'memory.used'", "]", ")", "/", "float", "(", "gpu", ".", "entry", "[", "'memory.total'", "]", ")", ")", ",", "\n", "stats", ")", "if", "str", "(", "res", "[", "0", "]", ")", "not", "in", "selected", "]", "\n", "\n", "if", "len", "(", "ids_mem", ")", "==", "0", ":", "\n", "# No more gpus available", "\n", "                ", "break", "\n", "\n", "", "best", "=", "min", "(", "ids_mem", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "bestGPU", ",", "bestMem", "=", "best", "[", "0", "]", ",", "best", "[", "1", "]", "\n", "# print(f\"{i}-th best GPU is {bestGPU} with mem {bestMem}\")", "\n", "selected", ".", "append", "(", "str", "(", "bestGPU", ")", ")", "\n", "\n", "", "print", "(", "\"Setting GPUs to: {}\"", ".", "format", "(", "\",\"", ".", "join", "(", "selected", ")", ")", ")", "\n", "os", ".", "environ", "[", "'CUDA_DEVICE_ORDER'", "]", "=", "'PCI_BUS_ID'", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "\",\"", ".", "join", "(", "selected", ")", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "        ", "print", "(", "\"GPU not available: \"", "+", "str", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.write_config_file": [[117, 123], ["open", "yaml.dump", "os.path.join", "dict", "vars"], "function", ["None"], ["", "", "def", "write_config_file", "(", "args", ",", "result_folder", ")", ":", "\n", "    ", "\"\"\"\n    Write yaml configuration file inside result folder\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "'config_file.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "dict", "(", "vars", "(", "args", ")", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.create_result_folder": [[125, 131], ["os.path.expanduser"], "function", ["None"], ["", "", "def", "create_result_folder", "(", "result_folder", ")", ":", "\n", "    ", "'''\n    Set plot folder by creating it if it does not exist.\n    '''", "\n", "result_folder", "=", "os", ".", "path", ".", "expanduser", "(", "result_folder", ")", "\n", "return", "result_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.get_device": [[133, 144], ["torch.device", "torch.cuda.is_available"], "function", ["None"], ["", "def", "get_device", "(", "cuda", ")", ":", "\n", "    ", "'''\n    Choose device: cpu or cuda\n    '''", "\n", "\n", "mode", "=", "'cpu'", "\n", "if", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "mode", "=", "'cuda'", "\n", "", "device", "=", "torch", ".", "device", "(", "mode", ")", "\n", "\n", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.save_model": [[146, 155], ["torch.save", "model.state_dict", "os.path.join", "os.path.expanduser"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "modelname", ",", "base_folder", ",", "path_save_models", "=", "'saved_models'", ",", "version", "=", "''", ")", ":", "\n", "    ", "'''\n    :param version: specify version of the model.\n    Usually used to represent the model when trained after step 'version'\n    '''", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "expanduser", "(", "base_folder", ")", ",", "\n", "path_save_models", ",", "modelname", "+", "version", "+", "'.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.load_model": [[157, 167], ["torch.load", "model.load_state_dict", "model.eval", "os.path.join", "os.path.expanduser"], "function", ["None"], ["", "def", "load_model", "(", "model", ",", "modelname", ",", "device", ",", "base_folder", ",", "path_save_models", "=", "'saved_models'", ",", "version", "=", "''", ")", ":", "\n", "    ", "check", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "expanduser", "(", "base_folder", ")", ",", "\n", "path_save_models", ",", "modelname", "+", "version", "+", "'.pt'", ")", ",", "map_location", "=", "device", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "check", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.create_grid": [[169, 194], ["sklearn.model_selection.ParameterGrid", "copy.deepcopy", "el.items", "final_grid.append", "getattr", "print"], "function", ["None"], ["", "def", "create_grid", "(", "args", ",", "grid_arg", "=", "'grid'", ")", ":", "\n", "    ", "\"\"\"\n    Create grid search by returning a list of args.\n    :parameter args: argument parser result\n    :parameter grid_arg: field of `args` which contains\n        a dictionary of\n        'parameter name': list of possible values\n    :return: list of configurations, one for each\n        element in the grid search\n    \"\"\"", "\n", "\n", "try", ":", "\n", "        ", "grid", "=", "ParameterGrid", "(", "getattr", "(", "args", ",", "grid_arg", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "print", "(", "\"Running without grid search\"", ")", "\n", "return", "[", "args", "]", "\n", "\n", "", "final_grid", "=", "[", "]", "\n", "for", "el", "in", "grid", ":", "\n", "        ", "conf", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "for", "k", ",", "v", "in", "el", ".", "items", "(", ")", ":", "\n", "            ", "conf", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "", "final_grid", ".", "append", "(", "conf", ")", "\n", "\n", "", "return", "final_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.compute_average_eval_accuracy": [[196, 218], ["os.path.join", "open", "f.read", "re.sub", "json.loads", "print", "print"], "function", ["None"], ["", "def", "compute_average_eval_accuracy", "(", "folder", ",", "eval_result_name", "=", "'metrics.json'", ",", "\n", "metric_name", "=", "'Top1_Acc_Stream/eval_phase/test_stream/Task000'", ")", ":", "\n", "    ", "\"\"\"\n    Return average and std accuracy over all experiences\n    after training on all experiences.\n    \"\"\"", "\n", "\n", "cur_file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "eval_result_name", ")", "\n", "with", "open", "(", "cur_file", ")", "as", "f", ":", "\n", "# fix NaN encoding for bugged JSON config", "\n", "        ", "j", "=", "f", ".", "read", "(", ")", "\n", "j", "=", "re", ".", "sub", "(", "r'\\bnan\\b'", ",", "'NaN'", ",", "j", ")", "\n", "\n", "try", ":", "\n", "            ", "data", "=", "json", ".", "loads", "(", "j", ")", "\n", "", "except", "JSONDecodeError", "as", "e", ":", "\n", "            ", "print", "(", "f\"Error decoding json file: {cur_file}\"", ")", "\n", "print", "(", "j", ")", "\n", "raise", "e", "\n", "\n", "", "", "m_eval", "=", "data", "[", "metric_name", "]", "[", "1", "]", "[", "-", "1", "]", "\n", "return", "m_eval", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.compute_average_training_accuracy": [[220, 238], ["os.path.join", "pandas.read_csv", "numpy.average", "numpy.std", "data[].max"], "function", ["None"], ["", "def", "compute_average_training_accuracy", "(", "folder", ",", "\n", "training_result_name", "=", "'training_results.csv'", ")", ":", "\n", "    ", "\"\"\"\n    Return average and std accuracy over all experiences\n    after the last training epoch.\n    \"\"\"", "\n", "\n", "cur_file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "training_result_name", ")", "\n", "data", "=", "read_csv", "(", "cur_file", ")", "\n", "# select last epoch", "\n", "data", "=", "data", "[", "data", "[", "'epoch'", "]", "==", "data", "[", "'epoch'", "]", ".", "max", "(", ")", "]", "\n", "data", "=", "data", "[", "'val_accuracy'", "]", ".", "values", "\n", "\n", "# both are array of 2 elements (loss, acc)", "\n", "acc", "=", "np", ".", "average", "(", "data", ",", "axis", "=", "0", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "data", ",", "axis", "=", "0", ")", "\n", "\n", "return", "acc", ",", "acc_std", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.get_best_config": [[240, 275], ["shutil.copyfile", "exmodel.evaluation.YAMLConfig", "str", "utils.compute_average_eval_accuracy", "os.path.join", "os.path.join", "os.path.join", "range", "os.listdir", "os.path.join", "os.path.isdir", "el.startswith", "os.path.join"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.compute_average_eval_accuracy"], ["", "def", "get_best_config", "(", "result_folder", ",", "\n", "val_folder_name", "=", "'VAL'", ",", "\n", "config_filename", "=", "'config_file.yaml'", ",", "\n", "metric_name", "=", "'Top1_Acc_Stream/eval_phase/test_stream/Task000'", ")", ":", "\n", "    ", "\"\"\"\n    Choose best config from a specific result folder containing\n    model selection results. It produces a `best_config.yaml`\n    file in the project root folder.\n    :return: parsed args from the best configuration\n    \"\"\"", "\n", "\n", "best_config_filename", "=", "'best_config.yaml'", "\n", "\n", "# find folders with format 'VAL{number}'", "\n", "ids", "=", "[", "str", "(", "el", ")", "for", "el", "in", "range", "(", "10", ")", "]", "\n", "dirs", "=", "[", "el", "for", "el", "in", "os", ".", "listdir", "(", "result_folder", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "el", ")", ")", "\n", "and", "el", ".", "startswith", "(", "val_folder_name", ")", "\n", "and", "el", "[", "-", "1", "]", "in", "ids", "]", "\n", "\n", "best_dir", "=", "None", "\n", "best_acc", "=", "0", "\n", "for", "dir_path", "in", "dirs", ":", "\n", "        ", "acc", ",", "_", "=", "compute_average_eval_accuracy", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "dir_path", ")", ",", "metric_name", "=", "metric_name", ")", "\n", "if", "acc", ">", "best_acc", ":", "\n", "            ", "best_dir", "=", "dir_path", "\n", "best_acc", "=", "acc", "\n", "", "", "assert", "best_dir", "is", "not", "None", ",", "\"Error in retrieving best accuracy\"", "\n", "\n", "copyfile", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "best_dir", ",", "config_filename", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "result_folder", ",", "best_config_filename", ")", ")", "\n", "\n", "best_config", "=", "YAMLConfig", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "best_config_filename", ")", ")", "\n", "\n", "return", "best_config", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.benchmarks.ExModelScenario.__init__": [[12, 33], ["model.eval().to.eval().to.eval().to", "mm.append", "model.eval().to.eval().to.eval"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to"], ["    ", "def", "__init__", "(", "self", ",", "original_scenario", ",", "trained_models", ")", "->", "None", ":", "\n", "        ", "\"\"\" Ex-model scenario.\n        Each experience is a quadruple\n        <original_exp, trained_model, generator, buffer>.\n\n        The original experience should NOT BE USED DURING TRAINING.\n        Instead, data must be extracted from the original model, generator,\n        or buffers.\n\n        :param original_scenario:\n        :param trained_models: list of filenames\n        \"\"\"", "\n", "mm", "=", "[", "]", "\n", "for", "model", "in", "trained_models", ":", "\n", "            ", "model", "=", "model", ".", "eval", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "mm", ".", "append", "(", "model", ")", "\n", "\n", "", "self", ".", "scenario", "=", "original_scenario", "\n", "self", ".", "trained_models", "=", "mm", "\n", "self", ".", "train_stream", "=", "original_scenario", ".", "train_stream", "\n", "self", ".", "test_stream", "=", "original_scenario", ".", "test_stream", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.benchmarks.ImageNet32.__init__": [[36, 60], ["torchvision.transforms.Normalize", "torchvision.datasets.ImageNet.__init__", "avalanche.benchmarks.datasets.default_dataset_location", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Scale", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ":", "str", "=", "None", ",", "split", ":", "str", "=", "'train'", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "if", "root", "is", "None", ":", "\n", "            ", "root", "=", "default_dataset_location", "(", "'imagenet'", ")", "\n", "\n", "", "if", "split", "==", "'train'", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "Resize", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "Resize", "(", "32", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "root", ",", "split", ",", "transform", "=", "transform", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.benchmarks.ImageNet128.__init__": [[63, 88], ["torchvision.transforms.Normalize", "torchvision.datasets.ImageNet.__init__", "avalanche.benchmarks.datasets.default_dataset_location", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomSizedCrop", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Scale", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ":", "str", "=", "None", ",", "split", ":", "str", "=", "'train'", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "\"\"\" Used as auxiliary data for ex-model CL with COrE50 (128x128 images). \"\"\"", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "if", "root", "is", "None", ":", "\n", "            ", "root", "=", "default_dataset_location", "(", "'imagenet'", ")", "\n", "\n", "", "if", "split", "==", "'train'", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomSizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "Resize", "(", "128", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "Resize", "(", "128", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "root", ",", "split", ",", "transform", "=", "transform", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MLP.__init__": [[30, 41], ["torch.Module.__init__", "range", "torch.Sequential", "gem_resnet.MLP.net.apply", "layers.append", "len", "torch.Linear", "layers.append", "len", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sizes", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sizes", ")", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "sizes", "[", "i", "]", ",", "sizes", "[", "i", "+", "1", "]", ")", ")", "\n", "if", "i", "<", "(", "len", "(", "sizes", ")", "-", "2", ")", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "net", ".", "apply", "(", "Xavier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MLP.forward": [[42, 44], ["gem_resnet.MLP.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.BasicBlock.__init__": [[54, 67], ["torch.Module.__init__", "gem_resnet.conv3x3", "torch.BatchNorm2d", "gem_resnet.conv3x3", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.conv3x3", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.BasicBlock.forward": [[69, 75], ["torch.nn.functional.relu", "gem_resnet.BasicBlock.bn2", "gem_resnet.BasicBlock.shortcut", "torch.nn.functional.relu", "gem_resnet.BasicBlock.bn1", "gem_resnet.BasicBlock.conv2", "gem_resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.ResNet.__init__": [[78, 89], ["torch.Module.__init__", "gem_resnet.conv3x3", "torch.BatchNorm2d", "gem_resnet.ResNet._make_layer", "gem_resnet.ResNet._make_layer", "gem_resnet.ResNet._make_layer", "gem_resnet.ResNet._make_layer", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.conv3x3", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18._make_layer", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18._make_layer", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18._make_layer", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", ",", "nf", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "nf", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nf", "*", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "1", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "2", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "4", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "8", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nf", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.ResNet._make_layer": [[90, 97], ["torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.ResNet.forward": [[98, 109], ["x.size", "torch.nn.functional.relu", "gem_resnet.ResNet.layer1", "gem_resnet.ResNet.layer2", "gem_resnet.ResNet.layer3", "gem_resnet.ResNet.layer4", "torch.nn.functional.avg_pool2d", "gem_resnet.ResNet.view", "gem_resnet.ResNet.linear", "gem_resnet.ResNet.bn1", "gem_resnet.ResNet.size", "gem_resnet.ResNet.conv1", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ".", "view", "(", "bsz", ",", "3", ",", "32", ",", "32", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18.__init__": [[116, 129], ["avalanche.models.MultiTaskModule.__init__", "gem_resnet.conv3x3", "torch.BatchNorm2d", "gem_resnet.MTResNet18._make_layer", "gem_resnet.MTResNet18._make_layer", "gem_resnet.MTResNet18._make_layer", "gem_resnet.MTResNet18._make_layer", "avalanche.models.MultiHeadClassifier"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.conv3x3", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18._make_layer", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18._make_layer", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18._make_layer", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nclasses", ",", "nf", "=", "20", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "nf", "\n", "block", "=", "BasicBlock", "\n", "num_blocks", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nf", "*", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "1", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "2", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "4", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "8", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "MultiHeadClassifier", "(", "nf", "*", "8", "*", "BasicBlock", ".", "expansion", ",", "nclasses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18._make_layer": [[130, 137], ["torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTResNet18.forward": [[138, 149], ["x.size", "torch.nn.functional.relu", "gem_resnet.MTResNet18.layer1", "gem_resnet.MTResNet18.layer2", "gem_resnet.MTResNet18.layer3", "gem_resnet.MTResNet18.layer4", "torch.nn.functional.avg_pool2d", "gem_resnet.MTResNet18.view", "gem_resnet.MTResNet18.linear", "gem_resnet.MTResNet18.bn1", "gem_resnet.MTResNet18.size", "gem_resnet.MTResNet18.conv1", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "task_labels", ")", ":", "\n", "        ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "out", "=", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ".", "view", "(", "bsz", ",", "3", ",", "32", ",", "32", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ",", "task_labels", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTMaskedResNet18.__init__": [[152, 155], ["gem_resnet.MTResNet18.__init__", "exmodel.models.masking.MultiTaskMasking"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclasses", ",", "nf", "=", "20", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "nclasses", ",", "nf", ")", "\n", "self", ".", "mask", "=", "MultiTaskMasking", "(", "num_inital_units", "=", "nclasses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.MTMaskedResNet18.forward": [[156, 160], ["gem_resnet.MTResNet18.forward", "gem_resnet.MTMaskedResNet18.mask"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "task_labels", ")", ":", "\n", "        ", "out", "=", "super", "(", ")", ".", "forward", "(", "x", ",", "task_labels", ")", "\n", "out", "=", "self", ".", "mask", "(", "out", ",", "task_labels", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.Xavier": [[20, 27], ["m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size", "m.weight.data.size", "math.sqrt", "math.sqrt"], "function", ["None"], ["def", "Xavier", "(", "m", ")", ":", "\n", "    ", "if", "m", ".", "__class__", ".", "__name__", "==", "'Linear'", ":", "\n", "        ", "fan_in", ",", "fan_out", "=", "m", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ",", "m", ".", "weight", ".", "data", ".", "size", "(", "0", ")", "\n", "std", "=", "1.0", "*", "math", ".", "sqrt", "(", "2.0", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "a", "=", "math", ".", "sqrt", "(", "3.0", ")", "*", "std", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "a", ",", "a", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.conv3x3": [[46, 49], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.ResNet18": [[111, 113], ["gem_resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "nclasses", ",", "nf", "=", "20", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "nclasses", ",", "nf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.__init__": [[21, 42], ["avalanche.training.strategies.BaseStrategy.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "Module", ",", "optimizer", ":", "Optimizer", ",", "bias_normalization", ",", "reset_model", ",", "\n", "loss_type", ",", "ce_loss", ",", "num_iter_per_exp", ",", "init_from_expert", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "optimizer", ",", "**", "kwargs", ")", "\n", "assert", "loss_type", "in", "{", "'mse'", ",", "'kldiv'", "}", "\n", "\n", "# strategy hyperparams", "\n", "self", ".", "bias_normalization", "=", "bias_normalization", "\n", "self", ".", "reset_model", "=", "reset_model", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "self", ".", "ce_loss", "=", "ce_loss", "\n", "self", ".", "num_iter_per_exp", "=", "num_iter_per_exp", "\n", "self", ".", "init_from_expert", "=", "init_from_expert", "\n", "\n", "# strategy state", "\n", "self", ".", "current_exp_num_iters", "=", "0", "\n", "self", ".", "init_model", "=", "None", "\n", "self", ".", "expert_model", "=", "None", "\n", "self", ".", "prev_model", "=", "None", "\n", "self", ".", "prev_classes", "=", "[", "]", "\n", "self", ".", "logits_target", "=", "None", "\n", "self", ".", "eval_streams", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._after_forward": [[43, 79], ["super()._after_forward", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits", "list", "strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits", "set", "range", "strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits", "list", "list", "strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits", "set().intersection", "len", "range", "strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits", "set"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._after_forward", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits"], ["", "def", "_after_forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "_after_forward", "(", "**", "kwargs", ")", "\n", "is_single_task", "=", "len", "(", "set", "(", "[", "el", "for", "arr", "in", "self", ".", "experience", ".", "benchmark", ".", "task_labels", "for", "el", "in", "arr", "]", ")", ")", "==", "1", "\n", "self", ".", "logits_targets", "=", "torch", ".", "zeros_like", "(", "self", ".", "mb_output", ")", "\n", "curr_classes", "=", "self", ".", "experience", ".", "classes_in_this_experience", "\n", "\n", "# current model", "\n", "if", "is_single_task", ":", "\n", "            ", "self", ".", "logits_targets", "[", ":", ",", "curr_classes", "]", "+=", "self", ".", "get_masked_bn_logits", "(", "self", ".", "expert_model", ",", "curr_classes", ")", "\n", "", "else", ":", "\n", "            ", "curr_classes", "=", "list", "(", "range", "(", "self", ".", "experience", ".", "benchmark", ".", "n_classes", ")", ")", "\n", "self", ".", "logits_targets", "[", ":", "]", "+=", "self", ".", "get_masked_bn_logits", "(", "self", ".", "expert_model", ",", "curr_classes", ")", "\n", "\n", "", "if", "self", ".", "prev_model", "is", "not", "None", ":", "\n", "            ", "is_single_task", "=", "self", ".", "experience", ".", "task_label", "==", "0", "\n", "if", "is_single_task", ":", "\n", "                ", "self", ".", "logits_targets", "[", ":", ",", "curr_classes", "]", "=", "self", ".", "logits_targets", "[", ":", ",", "curr_classes", "]", "\n", "# Ex-model distillation. Combines ex-model targets with previous CL model.", "\n", "self", ".", "logits_targets", "[", ":", ",", "self", ".", "prev_classes", "]", "+=", "self", ".", "get_masked_bn_logits", "(", "self", ".", "prev_model", ",", "self", ".", "prev_classes", ")", "\n", "\n", "intersection", "=", "list", "(", "set", "(", "curr_classes", ")", ".", "intersection", "(", "self", ".", "prev_classes", ")", ")", "\n", "if", "len", "(", "intersection", ")", ">", "0", ":", "\n", "                    ", "self", ".", "logits_targets", "[", ":", ",", "intersection", "]", "=", "0.5", "*", "self", ".", "logits_targets", "[", ":", ",", "intersection", "]", "\n", "\n", "", "", "else", ":", "\n", "# MT scenario. Experts have separate heads. Assumes increasing classes also for MT", "\n", "                ", "prev_classes", "=", "list", "(", "range", "(", "self", ".", "experience", ".", "benchmark", ".", "n_classes", ")", ")", "\n", "curr_task", "=", "self", ".", "experience", ".", "task_label", "\n", "curr_task_mask", "=", "self", ".", "mb_task_id", "==", "curr_task", "\n", "\n", "# if sum(curr_task_mask).item() > 0:", "\n", "# heads from CL model", "\n", "self", ".", "logits_targets", "[", ":", "]", "=", "self", ".", "get_masked_bn_logits", "(", "self", ".", "prev_model", ",", "prev_classes", ")", "\n", "# head from new expert", "\n", "new_head_targets", "=", "self", ".", "get_masked_bn_logits", "(", "self", ".", "expert_model", ",", "curr_classes", ")", "[", "curr_task_mask", "]", "\n", "self", ".", "logits_targets", "[", "curr_task_mask", "]", "+=", "new_head_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.criterion": [[80, 94], ["torch.cross_entropy", "torch.cross_entropy", "strategy_exml_distillation.ExMLDistillation.mse_loss", "torch.cross_entropy", "torch.cross_entropy", "strategy_exml_distillation.ExMLDistillation.kldiv_loss", "ValueError"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.mse_loss", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.kldiv_loss"], ["", "", "", "def", "criterion", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_training", ":", "\n", "            ", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "                ", "ll", "=", "self", ".", "mse_loss", "(", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'kldiv'", ":", "\n", "                ", "ll", "=", "self", ".", "kldiv_loss", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown loss type\"", ")", "\n", "\n", "", "if", "self", ".", "ce_loss", ":", "\n", "                ", "ll", "+=", "F", ".", "cross_entropy", "(", "self", ".", "mb_output", ",", "self", ".", "mb_y", ")", "\n", "", "return", "ll", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "cross_entropy", "(", "self", ".", "mb_output", ",", "self", ".", "mb_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.get_masked_bn_logits": [[95, 101], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "avalanche.models.avalanche_forward", "curr_logits.mean().unsqueeze", "curr_logits.mean"], "methods", ["None"], ["", "", "def", "get_masked_bn_logits", "(", "self", ",", "model", ",", "selected_classes", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "curr_logits", "=", "avalanche_forward", "(", "model", ",", "self", ".", "mb_x", ",", "self", ".", "mb_task_id", ")", "[", ":", ",", "selected_classes", "]", "\n", "if", "self", ".", "bias_normalization", ":", "\n", "                ", "curr_logits", "=", "curr_logits", "-", "curr_logits", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "", "return", "curr_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.mse_loss": [[102, 104], ["torch.mse_loss", "torch.mse_loss"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.mse_loss", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.mse_loss"], ["", "def", "mse_loss", "(", "self", ")", ":", "\n", "        ", "return", "F", ".", "mse_loss", "(", "self", ".", "mb_output", ",", "self", ".", "logits_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.kldiv_loss": [[105, 107], ["torch.kl_div", "torch.kl_div"], "methods", ["None"], ["", "def", "kldiv_loss", "(", "self", ")", ":", "\n", "        ", "return", "F", ".", "kl_div", "(", "self", ".", "mb_output", ",", "self", ".", "logits_targets", ",", "reduction", "=", "'mean'", ",", "log_target", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.train_dataset_adaptation": [[108, 112], ["super().train_dataset_adaptation", "strategy_exml_distillation.ExMLDistillation.make_buffer"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.train_dataset_adaptation", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.GaussianNoiseED.make_buffer"], ["", "def", "train_dataset_adaptation", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "train_dataset_adaptation", "(", "**", "kwargs", ")", "\n", "buffer", "=", "self", ".", "make_buffer", "(", ")", "\n", "self", ".", "adapted_dataset", "=", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._after_train_dataset_adaptation": [[113, 120], ["super()._after_train_dataset_adaptation", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._after_train_dataset_adaptation"], ["", "def", "_after_train_dataset_adaptation", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "_after_train_dataset_adaptation", "(", ")", "\n", "if", "self", ".", "reset_model", ":", "\n", "            ", "if", "self", ".", "init_model", "is", "None", ":", "# first experience.", "\n", "                ", "self", ".", "init_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._before_training_exp": [[121, 128], ["super()._before_training_exp", "copy.deepcopy", "strategy_exml_distillation.ExMLDistillation.stop_training"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._before_training_exp"], ["", "", "", "def", "_before_training_exp", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "init_from_expert", "and", "self", ".", "clock", ".", "train_exp_counter", "==", "0", ":", "\n", "            ", "self", ".", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "expert_model", ")", "\n", "self", ".", "stop_training", "(", ")", "\n", "\n", "", "self", ".", "current_exp_num_iters", "=", "0", "\n", "super", "(", ")", ".", "_before_training_exp", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._after_training_exp": [[129, 134], ["super()._after_training_exp", "copy.deepcopy", "strategy_exml_distillation.ExMLDistillation.prev_model.eval", "strategy_exml_distillation.ExMLDistillation.prev_classes.extend"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._after_training_exp"], ["", "def", "_after_training_exp", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "_after_training_exp", "(", "**", "kwargs", ")", "\n", "self", ".", "prev_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "self", ".", "prev_model", ".", "eval", "(", ")", "\n", "self", ".", "prev_classes", ".", "extend", "(", "self", ".", "experience", ".", "classes_in_this_experience", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.make_buffer": [[135, 138], ["NotImplementedError"], "methods", ["None"], ["", "def", "make_buffer", "(", "self", ")", ":", "\n", "        ", "\"\"\" Prepare the data used for the ex-model distillation. \"\"\"", "\n", "assert", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.train": [[139, 174], ["strategy_exml_distillation.ExMLDistillation.model.train", "strategy_exml_distillation.ExMLDistillation.model.to", "isinstance", "isinstance", "enumerate", "strategy_exml_distillation.ExMLDistillation._before_training", "zip", "strategy_exml_distillation.ExMLDistillation._after_training", "strategy_exml_distillation.ExMLDistillation.evaluator.get_last_metrics", "isinstance", "strategy_exml_distillation.ExMLDistillation.expert_model.to", "strategy_exml_distillation.ExMLDistillation.expert_model.eval", "strategy_exml_distillation.ExMLDistillation.train_exp", "strategy_exml_distillation.ExMLDistillation.expert_model.to"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.train", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to"], ["", "def", "train", "(", "self", ",", "experiences", ",", "eval_streams", "=", "None", ",", "expert_models", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Train ex-model strategy.\n\n        :param experiences:\n        :param eval_streams:\n        :param expert_models:\n        :param kwargs:\n        :return:\n        \"\"\"", "\n", "self", ".", "is_training", "=", "True", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Normalize training and eval data.", "\n", "if", "isinstance", "(", "experiences", ",", "Experience", ")", ":", "\n", "            ", "experiences", "=", "[", "experiences", "]", "\n", "", "if", "isinstance", "(", "expert_models", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "expert_models", "=", "[", "expert_models", "]", "\n", "", "if", "eval_streams", "is", "None", ":", "\n", "            ", "eval_streams", "=", "[", "experiences", "]", "\n", "", "for", "i", ",", "exp", "in", "enumerate", "(", "eval_streams", ")", ":", "\n", "            ", "if", "isinstance", "(", "exp", ",", "Experience", ")", ":", "\n", "                ", "eval_streams", "[", "i", "]", "=", "[", "exp", "]", "\n", "", "", "self", ".", "eval_streams", "=", "eval_streams", "\n", "\n", "self", ".", "_before_training", "(", "**", "kwargs", ")", "\n", "for", "self", ".", "expert_model", ",", "self", ".", "experience", "in", "zip", "(", "expert_models", ",", "experiences", ")", ":", "\n", "            ", "self", ".", "expert_model", "=", "self", ".", "expert_model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "expert_model", ".", "eval", "(", ")", "\n", "self", ".", "train_exp", "(", "self", ".", "experience", ",", "eval_streams", ",", "**", "kwargs", ")", "\n", "self", ".", "expert_model", ".", "to", "(", "'cpu'", ")", "\n", "", "self", ".", "_after_training", "(", "**", "kwargs", ")", "\n", "\n", "res", "=", "self", ".", "evaluator", ".", "get_last_metrics", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._before_training_iteration": [[175, 196], ["super()._before_training_iteration", "strategy_exml_distillation.ExMLDistillation.stop_training", "strategy_exml_distillation.ExMLDistillation.model.train", "strategy_exml_distillation.ExMLDistillation.eval"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation._before_training_iteration", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.train"], ["", "def", "_before_training_iteration", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "current_exp_num_iters", "==", "self", ".", "num_iter_per_exp", ":", "\n", "            ", "self", ".", "stop_training", "(", ")", "\n", "", "elif", "(", "self", ".", "current_exp_num_iters", "%", "1000", ")", "==", "999", ":", "\n", "            ", "_prev_state", "=", "(", "\n", "self", ".", "experience", ",", "\n", "self", ".", "adapted_dataset", ",", "\n", "self", ".", "dataloader", ",", "\n", "self", ".", "is_training", ")", "\n", "\n", "for", "exp", "in", "self", ".", "eval_streams", ":", "\n", "                ", "self", ".", "eval", "(", "exp", ")", "\n", "\n", "# restore train-state variables and training mode.", "\n", "", "self", ".", "experience", ",", "self", ".", "adapted_dataset", "=", "_prev_state", "[", ":", "2", "]", "\n", "self", ".", "dataloader", "=", "_prev_state", "[", "2", "]", "\n", "self", ".", "is_training", "=", "_prev_state", "[", "3", "]", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "", "self", ".", "current_exp_num_iters", "+=", "1", "\n", "super", "(", ")", ".", "_before_training_iteration", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.make_train_dataloader": [[197, 211], ["avalanche.benchmarks.utils.data_loader.GroupBalancedInfiniteDataLoader"], "methods", ["None"], ["", "def", "make_train_dataloader", "(", "self", ",", "num_workers", "=", "0", ",", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Called after the dataset adaptation. Initializes the data loader.\n        :param num_workers: number of thread workers for the data loading.\n        :param shuffle: True if the data should be shuffled, False otherwise.\n        :param pin_memory: If True, the data loader will copy Tensors into CUDA\n            pinned memory before returning them. Defaults to True.\n        \"\"\"", "\n", "self", ".", "dataloader", "=", "GroupBalancedInfiniteDataLoader", "(", "\n", "[", "self", ".", "adapted_dataset", "]", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_size", "=", "self", ".", "train_mb_size", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.AuxDataED.__init__": [[214, 219], ["strategy_exml_distillation.ExMLDistillation.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "Module", ",", "optimizer", ":", "Optimizer", ",", "aux_data", ",", "bias_normalization", ",", "\n", "reset_model", ",", "loss_type", ",", "ce_loss", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "optimizer", ",", "bias_normalization", ",", "reset_model", ",", "\n", "loss_type", ",", "ce_loss", ",", "**", "kwargs", ")", "\n", "self", ".", "aux_data", "=", "aux_data", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.AuxDataED.mb_y": [[220, 226], ["strategy_exml_distillation.AuxDataED.logits_targets.argmax"], "methods", ["None"], ["", "@", "property", "\n", "def", "mb_y", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_training", ":", "\n", "            ", "return", "self", ".", "logits_targets", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "mb_y", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.AuxDataED.make_buffer": [[227, 231], ["avalanche.benchmarks.utils.dataset_utils.ConstantSequence", "avalanche.benchmarks.utils.AvalancheDataset", "len"], "methods", ["None"], ["", "", "def", "make_buffer", "(", "self", ")", ":", "\n", "        ", "t", "=", "ConstantSequence", "(", "0", ",", "len", "(", "self", ".", "aux_data", ")", ")", "\n", "buffer", "=", "AvalancheDataset", "(", "self", ".", "aux_data", ",", "task_labels", "=", "t", ")", "\n", "return", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ReplayED.__init__": [[234, 247], ["strategy_exml_distillation.ExMLDistillation.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "Module", ",", "optimizer", ":", "Optimizer", ",", "bias_normalization", ",", "reset_model", ",", "\n", "buffer_size", ",", "num_iter_per_exp", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "'train_epochs'", "not", "in", "kwargs", "\n", "# Set num train epochs to an unreasonably high number.", "\n", "# We fix the number of maximum iterations instead.", "\n", "super", "(", ")", ".", "__init__", "(", "model", ",", "optimizer", ",", "bias_normalization", ",", "reset_model", ",", "train_epochs", "=", "10", "**", "20", ",", "\n", "num_iter_per_exp", "=", "num_iter_per_exp", ",", "**", "kwargs", ")", "\n", "# buffer params.", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "\n", "# strategy state", "\n", "self", ".", "cum_data", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ReplayED.make_buffer": [[248, 262], ["strategy_exml_distillation.ReplayED.make_buffer_exp", "enumerate", "strategy_exml_distillation.ReplayED.cum_data.append", "avalanche.benchmarks.utils.AvalancheConcatDataset", "len", "len", "torch.utils.data.random_split", "torch.utils.data.random_split"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.DataImpressionED.make_buffer_exp"], ["", "def", "make_buffer", "(", "self", ")", ":", "\n", "        ", "numexp", "=", "len", "(", "self", ".", "cum_data", ")", "+", "1", "\n", "bufsize", "=", "self", ".", "buffer_size", "//", "numexp", "\n", "curr_buffer", "=", "self", ".", "make_buffer_exp", "(", "bufsize", ")", "\n", "\n", "# subsample previous data", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "cum_data", ")", ":", "\n", "            ", "removed_els", "=", "len", "(", "data", ")", "-", "bufsize", "\n", "if", "removed_els", ">", "0", ":", "\n", "                ", "data", ",", "_", "=", "random_split", "(", "data", ",", "[", "bufsize", ",", "removed_els", "]", ")", "\n", "", "self", ".", "cum_data", "[", "i", "]", "=", "data", "\n", "\n", "", "self", ".", "cum_data", ".", "append", "(", "curr_buffer", ")", "\n", "return", "AvalancheConcatDataset", "(", "self", ".", "cum_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ReplayED.make_buffer_exp": [[263, 265], ["exmodel.sampler.ReplayBuffer"], "methods", ["None"], ["", "def", "make_buffer_exp", "(", "self", ",", "bufsize", ")", ":", "\n", "        ", "return", "ReplayBuffer", "(", "self", ".", "expert_model", ",", "self", ".", "experience", ",", "bufsize", ")", ".", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.GaussianNoiseED.__init__": [[268, 271], ["strategy_exml_distillation.ExMLDistillation.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_shape", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "img_shape", "=", "img_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.GaussianNoiseED.mb_y": [[272, 278], ["strategy_exml_distillation.GaussianNoiseED.logits_targets.argmax"], "methods", ["None"], ["", "@", "property", "\n", "def", "mb_y", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_training", ":", "\n", "            ", "return", "self", ".", "logits_targets", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "mb_y", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.GaussianNoiseED.make_buffer": [[279, 293], ["GND", "avalanche.benchmarks.utils.dataset_utils.ConstantSequence", "avalanche.benchmarks.utils.AvalancheDataset", "len", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "", "def", "make_buffer", "(", "self", ")", ":", "\n", "        ", "class", "GND", "(", "Dataset", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "shape", ")", ":", "\n", "                ", "self", ".", "shape", "=", "shape", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "                ", "return", "torch", ".", "randn", "(", "*", "self", ".", "shape", ")", ",", "0", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "                ", "return", "10", "**", "3", "\n", "\n", "", "", "data", "=", "GND", "(", "self", ".", "img_shape", ")", "\n", "t", "=", "ConstantSequence", "(", "0", ",", "len", "(", "data", ")", ")", "\n", "return", "AvalancheDataset", "(", "data", ",", "targets", "=", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.BufferPrecomputedED.__init__": [[296, 302], ["strategy_exml_distillation.ReplayED.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "Module", ",", "optimizer", ":", "Optimizer", ",", "bias_normalization", ",", "reset_model", ",", "\n", "num_iter_per_exp", "=", "10", "**", "6", ",", "logdir", "=", "None", ",", "transform", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "optimizer", ",", "bias_normalization", ",", "reset_model", ",", "1000", ",", "num_iter_per_exp", ",", "**", "kwargs", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "logdir", "=", "logdir", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.BufferPrecomputedED.make_buffer_exp": [[303, 309], ["exmodel.sampler.BufferFromPath"], "methods", ["None"], ["", "def", "make_buffer_exp", "(", "self", ",", "bufsize", ")", ":", "\n", "        ", "return", "BufferFromPath", "(", "\n", "model", "=", "self", ".", "expert_model", ",", "\n", "experience", "=", "self", ".", "experience", ",", "\n", "logdir", "=", "self", ".", "logdir", ",", "\n", "transform", "=", "self", ".", "transform", "\n", ")", ".", "buffer", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ModelInversionED.__init__": [[313, 329], ["strategy_exml_distillation.ReplayED.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "Module", ",", "optimizer", ":", "Optimizer", ",", "bias_normalization", ",", "reset_model", ",", "\n", "buffer_size", ",", "num_iter_per_exp", ",", "\n", "buffer_iter", ",", "buffer_lr", ",", "buffer_wd", ",", "transform", ",", "\n", "lambda_blur", ",", "lambda_bns", ",", "buffer_mb_size", ",", "temperature", ",", "\n", "max_buffer_size", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "optimizer", ",", "bias_normalization", ",", "reset_model", ",", "buffer_size", ",", "num_iter_per_exp", ",", "**", "kwargs", ")", "\n", "self", ".", "buffer_iter", "=", "buffer_iter", "\n", "self", ".", "buffer_lr", "=", "buffer_lr", "\n", "self", ".", "buffer_wd", "=", "buffer_wd", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "lambda_blur", "=", "lambda_blur", "\n", "self", ".", "lambda_bns", "=", "lambda_bns", "\n", "self", ".", "buffer_mb_size", "=", "buffer_mb_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "max_buffer_size", "=", "max_buffer_size", "if", "max_buffer_size", "is", "not", "None", "else", "buffer_size", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ModelInversionED.make_buffer_exp": [[330, 344], ["exmodel.sampler.ModelInversionBuffer", "min"], "methods", ["None"], ["", "def", "make_buffer_exp", "(", "self", ",", "bufsize", ")", ":", "\n", "        ", "return", "ModelInversionBuffer", "(", "\n", "self", ".", "expert_model", ",", "self", ".", "experience", ",", "\n", "transform", "=", "self", ".", "transform", ",", "\n", "buffer_size", "=", "min", "(", "bufsize", ",", "self", ".", "max_buffer_size", ")", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "n_iter", "=", "self", ".", "buffer_iter", ",", "\n", "lr", "=", "self", ".", "buffer_lr", ",", "\n", "weight_decay", "=", "self", ".", "buffer_wd", ",", "\n", "lambda_blur", "=", "self", ".", "lambda_blur", ",", "\n", "lambda_bns", "=", "self", ".", "lambda_bns", ",", "\n", "train_batch_size", "=", "self", ".", "buffer_mb_size", ",", "\n", "temperature", "=", "self", ".", "temperature", ",", "\n", "verbose", "=", "True", ")", ".", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.DataImpressionED.__init__": [[347, 367], ["strategy_exml_distillation.ReplayED.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "Module", ",", "optimizer", ",", "bias_normalization", ",", "reset_model", ",", "\n", "buffer_size", ",", "num_iter_per_exp", ",", "\n", "buffer_iter", ",", "buffer_lr", ",", "\n", "buffer_beta", ",", "buffer_wd", ",", "\n", "get_classifier", ",", "\n", "lambda_blur", ",", "lambda_bns", ",", "buffer_mb_size", ",", "temperature", ",", "\n", "transform", ",", "max_buffer_size", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "optimizer", ",", "bias_normalization", ",", "reset_model", ",", "buffer_size", ",", "num_iter_per_exp", ",", "**", "kwargs", ")", "\n", "self", ".", "buffer_iter", "=", "buffer_iter", "\n", "self", ".", "buffer_lr", "=", "buffer_lr", "\n", "self", ".", "buffer_beta", "=", "buffer_beta", "\n", "self", ".", "buffer_wd", "=", "buffer_wd", "\n", "self", ".", "get_classifier", "=", "get_classifier", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "lambda_blur", "=", "lambda_blur", "\n", "self", ".", "lambda_bns", "=", "lambda_bns", "\n", "self", ".", "buffer_mb_size", "=", "buffer_mb_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "max_buffer_size", "=", "max_buffer_size", "if", "max_buffer_size", "is", "not", "None", "else", "buffer_size", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.DataImpressionED.make_buffer_exp": [[368, 384], ["exmodel.sampler.DataImpressionBuffer", "min"], "methods", ["None"], ["", "def", "make_buffer_exp", "(", "self", ",", "bufsize", ")", ":", "\n", "        ", "return", "DataImpressionBuffer", "(", "\n", "self", ".", "expert_model", ",", "self", ".", "experience", ",", "\n", "transform", "=", "self", ".", "transform", ",", "\n", "buffer_size", "=", "min", "(", "bufsize", ",", "self", ".", "max_buffer_size", ")", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "n_iter", "=", "self", ".", "buffer_iter", ",", "\n", "lr", "=", "self", ".", "buffer_lr", ",", "\n", "beta", "=", "self", ".", "buffer_beta", ",", "\n", "weight_decay", "=", "self", ".", "buffer_wd", ",", "\n", "get_classifier", "=", "self", ".", "get_classifier", ",", "\n", "lambda_blur", "=", "self", ".", "lambda_blur", ",", "\n", "lambda_bns", "=", "self", ".", "lambda_bns", ",", "\n", "train_batch_size", "=", "self", ".", "buffer_mb_size", ",", "\n", "temperature", "=", "self", ".", "temperature", ",", "\n", "verbose", "=", "True", ")", ".", "buffer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.models.LeNet5.__init__": [[14, 41], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "input_channels", ")", ":", "\n", "        ", "\"\"\" from https://towardsdatascience.com/implementing-yann-lecuns-lenet-5-in-pytorch-5e05a0911320\n\n        :param n_classes:\n        \"\"\"", "\n", "super", "(", "LeNet5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "input_channels", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "6", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "120", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "120", ",", "out_features", "=", "84", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "84", ",", "out_features", "=", "n_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.models.LeNet5.forward": [[43, 49], ["models.LeNet5.feature_extractor", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "models.LeNet5.ff", "models.LeNet5.classifier"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.classifier"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature_extractor", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "ff", "(", "x", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.models.MTLeNet5.__init__": [[52, 77], ["avalanche.models.dynamic_modules.MultiTaskModule.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "avalanche.models.MultiHeadClassifier", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "\"\"\" from https://towardsdatascience.com/implementing-yann-lecuns-lenet-5-in-pytorch-5e05a0911320\n\n        :param n_classes:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "6", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "16", ",", "out_channels", "=", "120", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "120", ",", "out_features", "=", "84", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "MultiHeadClassifier", "(", "in_features", "=", "84", ",", "initial_out_features", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.models.MTLeNet5.forward": [[78, 84], ["models.MTLeNet5.feature_extractor", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "models.MTLeNet5.ff", "models.MTLeNet5.classifier"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.classifier"], ["", "def", "forward", "(", "self", ",", "x", ",", "task_labels", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature_extractor", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "ff", "(", "x", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "x", ",", "task_labels", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.models.GaussianBlur.__init__": [[102, 142], ["torch.nn.Module.__init__", "isinstance", "isinstance", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "zip", "kernel.repeat.repeat.view", "kernel.repeat.repeat.repeat", "models.GaussianBlur.register_buffer", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "kernel.repeat.repeat.size", "RuntimeError", "math.sqrt", "kernel.repeat.repeat.dim"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", ",", "sigma", ",", "padding", "=", "'same'", ",", "dim", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", "]", "*", "dim", "\n", "", "if", "isinstance", "(", "sigma", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "sigma", "=", "[", "sigma", "]", "*", "dim", "\n", "\n", "# The gaussian kernel is the product of the", "\n", "# gaussian function of each dimension.", "\n", "", "kernel", "=", "1", "\n", "meshgrids", "=", "torch", ".", "meshgrid", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "size", "in", "kernel_size", "\n", "]", "\n", ")", "\n", "for", "size", ",", "std", ",", "mgrid", "in", "zip", "(", "kernel_size", ",", "sigma", ",", "meshgrids", ")", ":", "\n", "            ", "mean", "=", "(", "size", "-", "1", ")", "/", "2", "\n", "kernel", "*=", "1", "/", "(", "std", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "*", "torch", ".", "exp", "(", "-", "(", "(", "mgrid", "-", "mean", ")", "/", "std", ")", "**", "2", "/", "2", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "", "kernel", "=", "kernel", "/", "torch", ".", "sum", "(", "kernel", ")", "\n", "\n", "# Reshape to depthwise convolutional weight", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "size", "(", ")", ")", "\n", "kernel", "=", "kernel", ".", "repeat", "(", "channels", ",", "*", "[", "1", "]", "*", "(", "kernel", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "self", ".", "groups", "=", "channels", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv1d", "\n", "", "elif", "dim", "==", "2", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv2d", "\n", "", "elif", "dim", "==", "3", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv3d", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Only 1, 2 and 3 dimensions are supported. Received {}.'", ".", "format", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.models.GaussianBlur.forward": [[143, 152], ["models.GaussianBlur.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Apply gaussian filter to input.\n        Arguments:\n            input (torch.Tensor): Input to apply gaussian filter on.\n        Returns:\n            filtered (torch.Tensor): Filtered output.\n        \"\"\"", "\n", "return", "self", ".", "conv", "(", "input", ",", "weight", "=", "self", ".", "weight", ",", "groups", "=", "self", ".", "groups", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.__init__": [[9, 20], ["avalanche.models.MultiTaskModule.__init__", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "logits_input", "=", "True", ",", "num_inital_units", "=", "2", ")", ":", "\n", "        ", "\"\"\" Output unit masking.\n\n        :param logits_input:\n        :param num_inital_units:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logits_input", "=", "logits_input", "\n", "self", ".", "num_initial_units", "=", "num_inital_units", "\n", "self", ".", "mask_used", "=", "{", "'0'", ":", "torch", ".", "zeros", "(", "num_inital_units", ",", "dtype", "=", "torch", ".", "bool", ")", "}", "\n", "self", ".", "max_classes", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to": [[21, 24], ["masking.MultiTaskMasking.mask_used.keys", "masking.MultiTaskMasking.mask_used[].to"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "mask_used", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "mask_used", "[", "k", "]", "=", "self", ".", "mask_used", "[", "k", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.maybe_grow_mask": [[25, 37], ["str", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "maybe_grow_mask", "(", "self", ",", "task_label", ",", "num_units", ")", ":", "\n", "        ", "tkey", "=", "str", "(", "task_label", ")", "\n", "if", "not", "tkey", "in", "self", ".", "mask_used", ":", "\n", "            ", "self", ".", "mask_used", "[", "tkey", "]", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "num_initial_units", ",", "dtype", "=", "torch", ".", "bool", ",", "\n", "device", "=", "self", ".", "mask_used", "[", "'0'", "]", ".", "device", ")", "\n", "\n", "", "curr_mask", "=", "self", ".", "mask_used", "[", "tkey", "]", "\n", "if", "num_units", ">", "curr_mask", ".", "shape", "[", "0", "]", ":", "\n", "            ", "new_mask", "=", "torch", ".", "zeros", "(", "num_units", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "curr_mask", ".", "device", ")", "\n", "new_mask", "[", ":", "curr_mask", ".", "shape", "[", "0", "]", "]", "=", "curr_mask", "\n", "self", ".", "mask_used", "[", "tkey", "]", "=", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.adaptation": [[38, 51], ["isinstance", "list", "masking.MultiTaskMasking.maybe_grow_mask", "set", "set", "len", "list", "max", "str"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.maybe_grow_mask"], ["", "", "def", "adaptation", "(", "self", ",", "dataset", ":", "AvalancheDataset", "=", "None", ")", ":", "\n", "        ", "\"\"\" Called by Avalanche training loops. \"\"\"", "\n", "task_label", "=", "dataset", ".", "targets_task_labels", "\n", "if", "isinstance", "(", "task_label", ",", "ConstantSequence", ")", ":", "\n", "            ", "task_label", "=", "task_label", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "task_label", "=", "set", "(", "task_label", ")", "\n", "assert", "len", "(", "task_label", ")", "==", "1", "\n", "task_label", "=", "list", "(", "task_label", ")", "[", "0", "]", "\n", "\n", "", "curr_classes", "=", "list", "(", "set", "(", "dataset", ".", "targets", ")", ")", "\n", "self", ".", "maybe_grow_mask", "(", "task_label", ",", "max", "(", "curr_classes", ")", "+", "1", ")", "\n", "self", ".", "mask_used", "[", "str", "(", "task_label", ")", "]", "[", "curr_classes", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.forward_single_task": [[52, 59], ["str"], "methods", ["None"], ["", "def", "forward_single_task", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "task_label", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "tkey", "=", "str", "(", "task_label", ")", "\n", "if", "self", ".", "logits_input", ":", "# unseen units should be -inf", "\n", "            ", "x", "[", ":", ",", "~", "self", ".", "mask_used", "[", "tkey", "]", "]", "=", "-", "1.e3", "\n", "", "else", ":", "# probabilities input", "\n", "            ", "x", "[", ":", ",", "~", "self", ".", "mask_used", "[", "tkey", "]", "]", "=", "0", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.classifier.MaskedClassifier.__init__": [[10, 14], ["avalanche.models.DynamicModule.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classifier", ",", "out_features", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mask", "=", "torch", ".", "zeros", "(", "out_features", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "self", ".", "classifier", "=", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.classifier.MaskedClassifier.train_adaptation": [[15, 18], ["set", "list"], "methods", ["None"], ["", "def", "train_adaptation", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "curr_classes", "=", "set", "(", "dataset", ".", "targets", ")", "\n", "self", ".", "mask", "[", "list", "(", "curr_classes", ")", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.classifier.MaskedClassifier.forward": [[19, 23], ["classifier.MaskedClassifier.classifier"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.classifier"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "x", "[", "...", ",", "~", "self", ".", "mask", "]", "=", "-", "10", "**", "6", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.classifier.EntropyWeighting.__init__": [[26, 31], ["avalanche.models.DynamicModule.__init__", "classifier.EntropyWeighting.init_from_stream"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.classifier.EntropyWeighting.init_from_stream"], ["    ", "def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "\"\"\" Uses the entropy to scale outputs. \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "init_from_stream", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.classifier.EntropyWeighting.init_from_stream": [[32, 36], ["classifier.EntropyWeighting.masks.append", "list", "set"], "methods", ["None"], ["", "def", "init_from_stream", "(", "self", ",", "stream", ")", ":", "\n", "        ", "\"\"\" Initialize masks from a complete stream. \"\"\"", "\n", "for", "exp", "in", "stream", ":", "\n", "            ", "self", ".", "masks", ".", "append", "(", "list", "(", "set", "(", "exp", ".", "dataset", ".", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.classifier.EntropyWeighting.forward": [[37, 54], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "torch.softmax", "torch.softmax", "es.append", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "es", "=", "[", "]", "\n", "for", "mask", "in", "self", ".", "masks", ":", "\n", "            ", "out", "=", "x", "\n", "res", "=", "torch", ".", "zeros_like", "(", "out", ")", "-", "10", "**", "6", "\n", "res", "[", ":", ",", "mask", "]", "=", "out", "[", ":", ",", "mask", "]", "\n", "outs", ".", "append", "(", "res", ")", "\n", "\n", "# score", "\n", "px", "=", "F", ".", "softmax", "(", "out", "[", ":", ",", "mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "score", "=", "-", "(", "torch", ".", "log", "(", "px", ")", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "es", ".", "append", "(", "score", ")", "\n", "\n", "", "outs", "=", "torch", ".", "stack", "(", "outs", ")", "\n", "entropy", "=", "torch", ".", "stack", "(", "es", ")", "\n", "return", "(", "outs", "*", "entropy", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.classifier.CosineClassifier.__init__": [[57, 74], ["avalanche.models.IncrementalClassifier.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "initial_out_features", "=", "2", ")", ":", "\n", "        ", "\"\"\" Classifier based on cosine similarity.\n\n        TODO: add equation\n\n        First proposed in LUCIR: TODO: add ref\n\n        the number of output features is optional since the module\n        automatically adds new units whenever new classes are\n        encountered.\n\n        :param in_features: number of input features.\n        :param initial_out_features: initial number of classes (can be\n            dynamically expanded).\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "in_features", ",", "initial_out_features", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.classifier.CosineClassifier.forward": [[75, 80], ["super().forward", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm", "len"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "y", "=", "super", "(", ")", ".", "forward", "(", "x", ",", "**", "kwargs", ")", "\n", "y_norm", "=", "torch", ".", "linalg", ".", "norm", "(", "y", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "scale", "*", "(", "y", "/", "y_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.__init__": [[41, 57], ["avalanche.evaluation.metric_definitions.PluginMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mode", ":", "Literal", "[", "\"train\"", ",", "\"eval\"", "]", ",", "\n", "n_cols", ":", "int", ",", "\n", "n_rows", ":", "int", ",", "\n", "group", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "group", "=", "group", "\n", "self", ".", "n_rows", "=", "n_rows", "\n", "self", ".", "n_cols", "=", "n_cols", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "images", ":", "List", "[", "Tensor", "]", "=", "[", "]", "\n", "self", ".", "n_wanted_images", "=", "self", ".", "n_cols", "*", "self", ".", "n_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.after_train_dataset_adaptation": [[58, 63], ["exmodel_samples.ExModelSamplePlugin.make_grid_sample"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.make_grid_sample"], ["", "def", "after_train_dataset_adaptation", "(", "\n", "self", ",", "strategy", ":", "\"BaseStrategy\"", "\n", ")", "->", "\"MetricResult\"", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "return", "self", ".", "make_grid_sample", "(", "strategy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.after_eval_dataset_adaptation": [[64, 69], ["exmodel_samples.ExModelSamplePlugin.make_grid_sample"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.make_grid_sample"], ["", "", "def", "after_eval_dataset_adaptation", "(", "\n", "self", ",", "strategy", ":", "\"BaseStrategy\"", "\n", ")", "->", "\"MetricResult\"", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"eval\"", ":", "\n", "            ", "return", "self", ".", "make_grid_sample", "(", "strategy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.make_grid_sample": [[70, 88], ["exmodel_samples.ExModelSamplePlugin.load_sorted_images", "avalanche.evaluation.metric_results.MetricValue", "avalanche.evaluation.metric_utils.get_metric_name", "avalanche.evaluation.metric_results.TensorImage", "torchvision.utils.make_grid", "list"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.load_sorted_images"], ["", "", "def", "make_grid_sample", "(", "self", ",", "strategy", ":", "\"BaseStrategy\"", ")", "->", "\"MetricResult\"", ":", "\n", "        ", "self", ".", "load_sorted_images", "(", "strategy", ")", "\n", "\n", "return", "[", "\n", "MetricValue", "(", "\n", "self", ",", "\n", "name", "=", "get_metric_name", "(", "\n", "self", ",", "\n", "strategy", ",", "\n", "add_experience", "=", "self", ".", "mode", "==", "\"eval\"", ",", "\n", "add_task", "=", "True", ",", "\n", ")", ",", "\n", "value", "=", "TensorImage", "(", "\n", "make_grid", "(", "\n", "list", "(", "self", ".", "images", ")", ",", "normalize", "=", "False", ",", "nrow", "=", "self", ".", "n_cols", "\n", ")", "\n", ")", ",", "\n", "x_plot", "=", "strategy", ".", "clock", ".", "train_iterations", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.load_sorted_images": [[91, 96], ["exmodel_samples.ExModelSamplePlugin.reset", "exmodel_samples.ExModelSamplePlugin.load_data", "exmodel_samples.ExModelSamplePlugin.sort_images"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.reset", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.load_data", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.sort_images"], ["", "def", "load_sorted_images", "(", "self", ",", "strategy", ":", "\"BaseStrategy\"", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "self", ".", "images", ",", "labels", ",", "tasks", "=", "self", ".", "load_data", "(", "strategy", ")", "\n", "if", "self", ".", "group", ":", "\n", "            ", "self", ".", "sort_images", "(", "labels", ",", "tasks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.load_data": [[97, 112], ["exmodel_samples.ExModelSamplePlugin.make_dataloader", "labels.extend", "tasks.extend", "images.extend", "len", "batch_labels[].tolist", "batch_tasks[].tolist", "len"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.make_dataloader"], ["", "", "def", "load_data", "(", "\n", "self", ",", "strategy", ":", "\"BaseStrategy\"", "\n", ")", "->", "Tuple", "[", "List", "[", "Tensor", "]", ",", "List", "[", "int", "]", ",", "List", "[", "int", "]", "]", ":", "\n", "        ", "dataloader", "=", "self", ".", "make_dataloader", "(", "strategy", ")", "\n", "\n", "images", ",", "labels", ",", "tasks", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "batch_images", ",", "batch_labels", ",", "batch_tasks", "in", "dataloader", ":", "\n", "            ", "n_missing_images", "=", "self", ".", "n_wanted_images", "-", "len", "(", "images", ")", "\n", "labels", ".", "extend", "(", "batch_labels", "[", ":", "n_missing_images", "]", ".", "tolist", "(", ")", ")", "\n", "tasks", ".", "extend", "(", "batch_tasks", "[", ":", "n_missing_images", "]", ".", "tolist", "(", ")", ")", "\n", "images", ".", "extend", "(", "batch_images", "[", ":", "n_missing_images", "]", ")", "\n", "if", "len", "(", "images", ")", "==", "self", ".", "n_wanted_images", ":", "\n", "                ", "return", "images", ",", "labels", ",", "tasks", "\n", "", "", "return", "images", ",", "labels", ",", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.sort_images": [[113, 118], ["sorted", "zip"], "methods", ["None"], ["", "def", "sort_images", "(", "self", ",", "labels", ":", "List", "[", "int", "]", ",", "tasks", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "self", ".", "images", "=", "[", "\n", "image", "\n", "for", "task", ",", "label", ",", "image", "in", "sorted", "(", "\n", "zip", "(", "tasks", ",", "labels", ",", "self", ".", "images", ")", ",", "key", "=", "lambda", "t", ":", "(", "t", "[", "0", "]", ",", "t", "[", "1", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.make_dataloader": [[121, 126], ["torch.utils.data.DataLoader", "min"], "methods", ["None"], ["", "def", "make_dataloader", "(", "self", ",", "strategy", ":", "\"BaseStrategy\"", ")", "->", "DataLoader", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "dataset", "=", "strategy", ".", "adapted_dataset", ",", "# strategy.adapted_dataset.replace_transforms(transform=ToTensor(), target_transform=None),", "\n", "batch_size", "=", "min", "(", "strategy", ".", "eval_mb_size", ",", "self", ".", "n_wanted_images", ")", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.reset": [[128, 130], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.result": [[131, 133], ["None"], "methods", ["None"], ["", "def", "result", "(", "self", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "return", "self", ".", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.exmodel_samples.ExModelSamplePlugin.__str__": [[134, 136], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"images\"", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig.__init__": [[7, 10], ["config_parser.YAMLConfig._parse_config"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig._parse_config"], ["    ", "def", "__init__", "(", "self", ",", "config_file", ")", ":", "\n", "        ", "self", ".", "config_files", "=", "[", "config_file", "]", "\n", "self", ".", "_parse_config", "(", "config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig.config_name": [[11, 18], ["s.append", "[].split", "el.split"], "methods", ["None"], ["", "def", "config_name", "(", "self", ")", ":", "\n", "        ", "s", "=", "[", "]", "\n", "for", "el", "in", "self", ".", "config_files", ":", "\n", "# drop the folder, keep only the filename", "\n", "            ", "el", "=", "el", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "s", ".", "append", "(", "el", ")", "\n", "", "return", "'_'", ".", "join", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig.update": [[19, 23], ["config_parser.YAMLConfig.config_files.append", "config_parser.YAMLConfig._parse_config"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig._parse_config"], ["", "def", "update", "(", "self", ",", "new_config_file", ")", ":", "\n", "        ", "\"\"\" Parse yaml file \"\"\"", "\n", "self", ".", "config_files", ".", "append", "(", "new_config_file", ")", "\n", "self", ".", "_parse_config", "(", "new_config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig._parse_config": [[24, 47], ["loader.add_implicit_resolver", "yaml.load.items", "re.compile", "list", "open", "yaml.load"], "methods", ["None"], ["", "def", "_parse_config", "(", "self", ",", "config_file", ")", ":", "\n", "        ", "\"\"\"\n        Parse yaml file containing also math notation like 1e-4\n        \"\"\"", "\n", "# fix to enable scientific notation", "\n", "# https://stackoverflow.com/questions/30458977/yaml-loads-5e-6-as-string-and-not-a-number", "\n", "loader", "=", "yaml", ".", "SafeLoader", "\n", "loader", ".", "add_implicit_resolver", "(", "\n", "u'tag:yaml.org,2002:float'", ",", "\n", "re", ".", "compile", "(", "u'''^(?:\n            [-+]?(?:[0-9][0-9_]*)\\\\.[0-9_]*(?:[eE][-+]?[0-9]+)?\n            |[-+]?(?:[0-9][0-9_]*)(?:[eE][-+]?[0-9]+)\n            |\\\\.[0-9_]+(?:[eE][-+][0-9]+)?\n            |[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*\n            |[-+]?\\\\.(?:inf|Inf|INF)\n            |\\\\.(?:nan|NaN|NAN))$'''", ",", "re", ".", "X", ")", ",", "\n", "list", "(", "u'-+0123456789.'", ")", ")", "\n", "\n", "with", "open", "(", "config_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "configs", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "loader", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "configs", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig.__str__": [[48, 53], ["config_parser.YAMLConfig.__dict__.items"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "res", "=", "'CONFIG:\\n'", "\n", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "res", "+=", "f'\\t({k}) -> {v}\\n'", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig.__eq__": [[54, 69], ["da.items", "config_parser.YAMLConfig.__eq__.check_inclusion_recursive"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "da", "=", "self", ".", "__dict__", "\n", "db", "=", "other", ".", "__dict__", "\n", "\n", "ignore_keys", "=", "{", "'config_file'", "}", "\n", "def", "check_inclusion_recursive", "(", "config_a", ",", "config_b", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "da", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "==", "'config_files'", ":", "\n", "                    ", "continue", "# we don't care about filenames, they can be different.", "\n", "", "if", "k", "in", "db", "and", "db", "[", "k", "]", "==", "v", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "return", "False", "\n", "", "", "return", "True", "\n", "", "return", "check_inclusion_recursive", "(", "da", ",", "db", ")", "and", "check_inclusion_recursive", "(", "db", ",", "da", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.__init__": [[57, 81], ["avalanche.logging.StrategyLogger.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["def", "__init__", "(", "self", ",", "logdir", ",", "file", "=", "sys", ".", "stdout", ",", "interactive", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Creates an instance of `TextLogger` class.\n\n        :param logdir: a directory to save metric value not serializable to\n            strings (e.g. images).\n        :param file: destination file to which print metrics\n            (default=sys.stdout).\n        :param interactive: whether to use the interactive display mode,\n            suggested for printing in the terminal. Disable it if you want to\n            log the output in a logging file to reduce the visual clutter such\n            as progress bars. (default=True)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logdir", "=", "logdir", "\n", "self", ".", "file", "=", "file", "\n", "self", ".", "interactive", "=", "interactive", "\n", "\n", "# state", "\n", "self", ".", "metric_vals", "=", "{", "}", "\n", "self", ".", "live", "=", "None", "\n", "self", ".", "curr_table", "=", "None", "\n", "self", ".", "is_table_initialized", "=", "False", "\n", "self", ".", "_pbar", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.log_metric": [[82, 87], ["None"], "methods", ["None"], ["", "def", "log_metric", "(", "self", ",", "metric_value", ":", "'MetricValue'", ",", "callback", ":", "str", ")", "->", "None", ":", "\n", "        ", "name", "=", "metric_value", ".", "name", "\n", "x", "=", "metric_value", ".", "x_plot", "\n", "val", "=", "metric_value", ".", "value", "\n", "self", ".", "metric_vals", "[", "name", "]", "=", "(", "name", ",", "x", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger._val_to_str": [[88, 95], ["isinstance", "isinstance", "str", "str"], "methods", ["None"], ["", "def", "_val_to_str", "(", "self", ",", "m_val", ")", ":", "\n", "        ", "if", "isinstance", "(", "m_val", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "'\\n'", "+", "str", "(", "m_val", ")", "\n", "", "elif", "isinstance", "(", "m_val", ",", "float", ")", ":", "\n", "            ", "return", "f'{m_val:.4f}'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "m_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.print_current_metrics": [[96, 101], ["rich_text_logging.RichTextLogger.train_print_current_metrics", "rich_text_logging.RichTextLogger.eval_print_current_metrics"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.train_print_current_metrics", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.eval_print_current_metrics"], ["", "", "def", "print_current_metrics", "(", "self", ",", "strategy", ")", ":", "\n", "        ", "if", "strategy", ".", "is_training", ":", "\n", "            ", "self", ".", "train_print_current_metrics", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval_print_current_metrics", "(", "strategy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.train_print_current_metrics": [[102, 115], ["sorted", "rich_text_logging.RichTextLogger.metric_vals.values", "isinstance", "rich.print", "torchvision.utils.save_image", "rich_text_logging.RichTextLogger._val_to_str", "name.split", "name.split"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger._val_to_str"], ["", "", "def", "train_print_current_metrics", "(", "self", ")", ":", "\n", "        ", "sorted_vals", "=", "sorted", "(", "self", ".", "metric_vals", ".", "values", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "for", "name", ",", "x", ",", "val", "in", "sorted_vals", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "TensorImage", ")", ":", "\n", "                ", "str_name", "=", "'_'", ".", "join", "(", "name", ".", "split", "(", "'/'", ")", ")", "\n", "fname", "=", "f'{self.logdir}/{str_name}_x_{x}.png'", "\n", "save_image", "(", "val", ".", "image", ",", "fname", ")", "\n", "val", "=", "f'<serialized to {fname}>.'", "\n", "", "else", ":", "\n", "                ", "val", "=", "self", ".", "_val_to_str", "(", "val", ")", "\n", "", "name", "=", "name", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "print", "(", "f'\\t{name} = {val}'", ",", "file", "=", "self", ".", "file", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.eval_print_current_metrics": [[116, 143], ["sorted", "vals.append", "rich_text_logging.RichTextLogger.curr_table.add_row", "rich_text_logging.RichTextLogger.live.refresh", "rich_text_logging.RichTextLogger.metric_vals.values", "rich_text_logging.RichTextLogger.curr_table.add_column", "isinstance", "vals.append", "rich_text_logging.RichTextLogger.curr_table.add_column", "torchvision.utils.save_image", "rich_text_logging.RichTextLogger._val_to_str", "name.split", "name.split"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger._val_to_str"], ["", "", "def", "eval_print_current_metrics", "(", "self", ",", "strategy", ")", ":", "\n", "        ", "sorted_vals", "=", "sorted", "(", "self", ".", "metric_vals", ".", "values", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "if", "not", "self", ".", "is_table_initialized", ":", "\n", "            ", "self", ".", "curr_table", ".", "add_column", "(", "\"Exp/Task\"", ")", "\n", "for", "name", ",", "_", ",", "_", "in", "sorted_vals", ":", "\n", "# keep only the metric name.", "\n", "# Other info is redundant", "\n", "                ", "name", "=", "name", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "self", ".", "curr_table", ".", "add_column", "(", "name", ")", "\n", "", "self", ".", "is_table_initialized", "=", "True", "\n", "\n", "", "vals", "=", "[", "]", "\n", "exp_id", "=", "strategy", ".", "experience", ".", "current_experience", "\n", "task_id", "=", "strategy", ".", "experience", ".", "task_label", "\n", "vals", ".", "append", "(", "f\"E{exp_id}T{task_id}\"", ")", "\n", "for", "name", ",", "x", ",", "val", "in", "sorted_vals", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "TensorImage", ")", ":", "\n", "                ", "str_name", "=", "'_'", ".", "join", "(", "name", ".", "split", "(", "'/'", ")", ")", "\n", "fname", "=", "f'{self.logdir}/{str_name}_x_{x}.png'", "\n", "save_image", "(", "val", ".", "image", ",", "fname", ")", "\n", "val", "=", "f'<serialized to {fname}>.'", "\n", "", "else", ":", "\n", "                ", "val", "=", "self", ".", "_val_to_str", "(", "val", ")", "\n", "", "vals", ".", "append", "(", "val", ")", "\n", "", "self", ".", "curr_table", ".", "add_row", "(", "*", "vals", ")", "\n", "self", ".", "live", ".", "refresh", "(", ")", "\n", "# print(self.curr_table)", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_training_epoch": [[145, 152], ["rich_text_logging.RichTextLogger._end_progress", "super().after_training_epoch", "rich.print", "rich_text_logging.RichTextLogger.print_current_metrics"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger._end_progress", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_training_epoch", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.print_current_metrics"], ["", "def", "after_training_epoch", "(", "self", ",", "strategy", ":", "'BaseStrategy'", ",", "\n", "metric_values", ":", "List", "[", "'MetricValue'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_end_progress", "(", ")", "\n", "super", "(", ")", ".", "after_training_epoch", "(", "strategy", ",", "metric_values", ",", "**", "kwargs", ")", "\n", "print", "(", "f'\\t[italic]Epoch {strategy.clock.train_exp_epochs} ended.'", ",", "file", "=", "self", ".", "file", ",", "flush", "=", "True", ")", "\n", "self", ".", "print_current_metrics", "(", "strategy", ")", "\n", "self", ".", "metric_vals", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_eval_exp": [[153, 158], ["super().after_eval_exp", "rich_text_logging.RichTextLogger.print_current_metrics"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_eval_exp", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.print_current_metrics"], ["", "def", "after_eval_exp", "(", "self", ",", "strategy", ":", "'BaseStrategy'", ",", "\n", "metric_values", ":", "List", "[", "'MetricValue'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "after_eval_exp", "(", "strategy", ",", "metric_values", ",", "**", "kwargs", ")", "\n", "self", ".", "print_current_metrics", "(", "strategy", ")", "\n", "self", ".", "metric_vals", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.before_training": [[159, 163], ["super().before_training", "rich.print"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.before_training"], ["", "def", "before_training", "(", "self", ",", "strategy", ":", "'BaseStrategy'", ",", "\n", "metric_values", ":", "List", "[", "'MetricValue'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "before_training", "(", "strategy", ",", "metric_values", ",", "**", "kwargs", ")", "\n", "print", "(", "'[bold blue]Start of training phase'", ",", "file", "=", "self", ".", "file", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.before_eval_dataset_adaptation": [[164, 175], ["super().before_eval", "rich.print", "avalanche.evaluation.metric_utils.stream_type", "rich.table.Table", "rich.live.Live", "rich_text_logging.RichTextLogger.live.start"], "methods", ["None"], ["", "def", "before_eval_dataset_adaptation", "(", "self", ",", "strategy", ":", "'BaseStrategy'", ",", "\n", "metric_values", ":", "List", "[", "'MetricValue'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "before_eval", "(", "strategy", ",", "metric_values", ",", "**", "kwargs", ")", "\n", "if", "self", ".", "live", "is", "None", ":", "\n", "            ", "print", "(", "'[bold blue]Start of eval phase'", ",", "file", "=", "self", ".", "file", ",", "flush", "=", "True", ")", "\n", "\n", "stream", "=", "stream_type", "(", "strategy", ".", "experience", ")", "\n", "self", ".", "curr_table", "=", "Table", "(", "title", "=", "f\"Eval Metrics - {stream} stream\"", ")", "\n", "self", ".", "is_table_initialized", "=", "False", "\n", "self", ".", "live", "=", "Live", "(", "self", ".", "curr_table", ",", "refresh_per_second", "=", "4", ")", "\n", "self", ".", "live", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_training": [[176, 180], ["super().after_training", "rich.print"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_training"], ["", "", "def", "after_training", "(", "self", ",", "strategy", ":", "'BaseStrategy'", ",", "\n", "metric_values", ":", "List", "[", "'MetricValue'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "after_training", "(", "strategy", ",", "metric_values", ",", "**", "kwargs", ")", "\n", "print", "(", "'[bold blue]End of training phase'", ",", "file", "=", "self", ".", "file", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_training_iteration": [[181, 187], ["super().after_training_iteration", "rich_text_logging.RichTextLogger._progress.update", "rich_text_logging.RichTextLogger._progress.refresh"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_training_iteration", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig.update"], ["", "def", "after_training_iteration", "(", "self", ",", "strategy", ":", "'BaseStrategy'", ",", "\n", "metric_values", ":", "List", "[", "'MetricValue'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "interactive", ":", "\n", "            ", "self", ".", "_progress", ".", "update", "(", ")", "\n", "self", ".", "_progress", ".", "refresh", "(", ")", "\n", "", "super", "(", ")", ".", "after_training_iteration", "(", "strategy", ",", "metric_values", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.before_training_epoch": [[188, 192], ["super().before_training_epoch", "len"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.before_training_epoch"], ["", "def", "before_training_epoch", "(", "self", ",", "strategy", ":", "'BaseStrategy'", ",", "\n", "metric_values", ":", "List", "[", "'MetricValue'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "before_training_epoch", "(", "strategy", ",", "metric_values", ",", "**", "kwargs", ")", "\n", "self", ".", "_progress", ".", "total", "=", "len", "(", "strategy", ".", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_eval": [[193, 213], ["super().after_eval", "rich_text_logging.RichTextLogger.live.stop", "rich.print", "sorted", "rich.print", "rich_text_logging.RichTextLogger.metric_vals.values", "isinstance", "rich.print", "torchvision.utils.save_image", "rich_text_logging.RichTextLogger._val_to_str", "name.split", "name.split"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger.after_eval", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger._val_to_str"], ["", "def", "after_eval", "(", "self", ",", "strategy", ":", "'BaseStrategy'", ",", "\n", "metric_values", ":", "List", "[", "'MetricValue'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "after_eval", "(", "strategy", ",", "metric_values", ",", "**", "kwargs", ")", "\n", "self", ".", "live", ".", "stop", "(", ")", "\n", "self", ".", "live", "=", "None", "\n", "\n", "print", "(", "'\\t[italic]-- stream metrics'", ",", "file", "=", "self", ".", "file", ",", "flush", "=", "True", ")", "\n", "sorted_vals", "=", "sorted", "(", "self", ".", "metric_vals", ".", "values", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "for", "name", ",", "x", ",", "val", "in", "sorted_vals", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "TensorImage", ")", ":", "\n", "                ", "str_name", "=", "'_'", ".", "join", "(", "name", ".", "split", "(", "'/'", ")", ")", "\n", "save_image", "(", "val", ".", "image", ",", "f'{self.logdir}/{str_name}_x_{x}.png'", ")", "\n", "val", "=", "f'<serialized to {str_name}>.'", "\n", "", "else", ":", "\n", "                ", "val", "=", "self", ".", "_val_to_str", "(", "val", ")", "\n", "", "name", "=", "name", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "print", "(", "f'\\t{name} = {val}'", ",", "file", "=", "self", ".", "file", ",", "flush", "=", "True", ")", "\n", "", "print", "(", "'[bold blue]End of eval phase'", ",", "file", "=", "self", ".", "file", ",", "flush", "=", "True", ")", "\n", "self", ".", "metric_vals", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger._progress": [[214, 219], ["tqdm.tqdm.tqdm"], "methods", ["None"], ["", "@", "property", "\n", "def", "_progress", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_pbar", "is", "None", ":", "\n", "            ", "self", ".", "_pbar", "=", "tqdm", "(", "leave", "=", "True", ",", "position", "=", "0", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "", "return", "self", ".", "_pbar", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.rich_text_logging.RichTextLogger._end_progress": [[220, 224], ["rich_text_logging.RichTextLogger._pbar.close"], "methods", ["None"], ["", "def", "_end_progress", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_pbar", "is", "not", "None", ":", "\n", "            ", "self", ".", "_pbar", ".", "close", "(", ")", "\n", "self", ".", "_pbar", "=", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.__init__": [[18, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "files", ")", ":", "\n", "        ", "self", ".", "files", "=", "files", "\n", "self", ".", "fileno", "=", "files", "[", "0", "]", ".", "fileno", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.write": [[22, 26], ["f.write"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.write"], ["", "def", "write", "(", "self", ",", "obj", ")", ":", "\n", "        ", "for", "f", "in", "self", ".", "files", ":", "\n", "            ", "if", "not", "f", ".", "closed", ":", "\n", "                ", "f", ".", "write", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.flush": [[27, 31], ["f.flush"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.flush"], ["", "", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "for", "f", "in", "self", ".", "files", ":", "\n", "            ", "if", "not", "f", ".", "closed", ":", "\n", "                ", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.closed": [[32, 35], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "closed", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.RayExperiment.__init__": [[38, 60], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "results_fname", "=", "None", ",", "resume_ok", "=", "False", ",", "num_cpus", "=", "0", ",", "num_gpus", "=", "0", ")", ":", "\n", "        ", "\"\"\" Generic experiment manager.\n\n        Each experiment produces an artifact (file).\n        If the artifact is already available the experiment does not run.\n        This allows to start/stop/resume experiment freely.\n\n        Think of it like a Makefile but in python.\n\n        You only need to define the method `run`.\n\n        :param results_fname: results filename.\n        :param resume_ok: whether the experiment can be resumed or not.\n        \"\"\"", "\n", "self", ".", "results_fname", "=", "results_fname", "\n", "self", ".", "resume_ok", "=", "resume_ok", "\n", "self", ".", "num_cpus", "=", "num_cpus", "\n", "self", ".", "num_gpus", "=", "num_gpus", "\n", "\n", "self", ".", "f", "=", "None", "\n", "self", ".", "_ray_obj_id", "=", "None", "\n", "self", ".", "_done", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.RayExperiment.__call__": [[61, 103], ["experiment_management.ray_init", "os.path.join", "ray.remote", "os.path.join", "os.path.exists", "os.path.exists", "os.path.join", "exmodel.evaluation.YAMLConfig", "os.makedirs", "exmodel.utils.write_config_file", "open", "experiment_management.Tee", "experiment_management.RayExperiment.run", "open", "experiment_management.Tee", "experiment_management.RayExperiment.run", "run_exp.remote", "print", "sys.exit", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.ray_init", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.write_config_file", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.GridSearchExp.run", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.GridSearchExp.run"], ["", "def", "__call__", "(", "self", ",", "config", ")", ":", "\n", "        ", "assert", "not", "self", ".", "_done", "# can call only once.", "\n", "ray_init", "(", "config", ")", "\n", "logdir", "=", "config", ".", "logdir", "\n", "\n", "if", "self", ".", "results_fname", "is", "not", "None", ":", "\n", "# check for conditional execution", "\n", "# continue only if the final artifact does not exists already.", "\n", "            ", "res_file", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "self", ".", "results_fname", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "res_file", ")", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "config_fname", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'config_file.yaml'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "config_fname", ")", "and", "not", "config", ".", "debug", ":", "\n", "            ", "if", "not", "self", ".", "resume_ok", ":", "\n", "                ", "print", "(", "\"Resume experiment not allowed.\"", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "\n", "# configs should match to allow resume.", "\n", "", "prev_config_file", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'config_file.yaml'", ")", "\n", "prev_config", "=", "YAMLConfig", "(", "prev_config_file", ")", "\n", "assert", "config", "==", "prev_config", "\n", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "logdir", ",", "exist_ok", "=", "True", ")", "\n", "write_config_file", "(", "config", ",", "config", ".", "logdir", ")", "\n", "\n", "", "@", "ray", ".", "remote", "(", "num_cpus", "=", "self", ".", "num_cpus", ",", "\n", "num_gpus", "=", "self", ".", "num_gpus", ",", "\n", "max_calls", "=", "1", ")", "\n", "def", "run_exp", "(", "argum", ")", ":", "\n", "            ", "self", ".", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "logdir", ",", "'out.txt'", ")", ",", "'w'", ",", "buffering", "=", "1", ")", "\n", "sys", ".", "stdout", "=", "Tee", "(", "sys", ".", "stdout", ",", "self", ".", "f", ")", "\n", "sys", ".", "stderr", "=", "sys", ".", "stdout", "\n", "self", ".", "run", "(", "argum", ")", "\n", "\n", "", "if", "config", ".", "no_ray", ":", "\n", "            ", "self", ".", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "logdir", ",", "'out.txt'", ")", ",", "'w'", ",", "buffering", "=", "1", ")", "\n", "sys", ".", "stdout", "=", "Tee", "(", "sys", ".", "stdout", ",", "self", ".", "f", ")", "\n", "sys", ".", "stderr", "=", "sys", ".", "stdout", "\n", "self", ".", "_ray_obj_id", "=", "self", ".", "run", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_ray_obj_id", "=", "run_exp", ".", "remote", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.RayExperiment.wait": [[104, 110], ["ray.get", "experiment_management.RayExperiment.f.close"], "methods", ["None"], ["", "", "def", "wait", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_ray_obj_id", "is", "not", "None", ":", "\n", "            ", "ray", ".", "get", "(", "self", ".", "_ray_obj_id", ")", "\n", "if", "self", ".", "f", "is", "not", "None", ":", "\n", "                ", "self", ".", "f", ".", "close", "(", ")", "\n", "", "", "self", ".", "_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.RayExperiment.run": [[111, 113], ["NotImplementedError"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "config", ")", ":", "\n", "        ", "assert", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.RayExperiment.result": [[114, 116], ["NotImplementedError"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "        ", "assert", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.SingleRunExp.__init__": [[141, 145], ["experiment_management.RayExperiment.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "main", ",", "num_cpus", "=", "0", ",", "num_gpus", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'metrics.json'", ",", "resume_ok", "=", "True", ",", "\n", "num_cpus", "=", "num_cpus", ",", "num_gpus", "=", "num_gpus", ")", "\n", "self", ".", "main", "=", "main", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.SingleRunExp.run": [[146, 154], ["experiment_management.SingleRunExp.main", "print", "print", "print", "ray.get_gpu_ids"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.train_ex_model.main"], ["", "def", "run", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "config", ".", "cuda", "and", "config", ".", "no_ray", ":", "\n", "            ", "print", "(", "f'Using GPUs {os.environ[\"CUDA_VISIBLE_DEVICES\"]}'", ")", "\n", "", "elif", "config", ".", "cuda", ":", "\n", "            ", "print", "(", "f'Using GPUs {ray.get_gpu_ids()}'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Using CPUs'", ")", "\n", "", "return", "self", ".", "main", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.GridSearchExp.__init__": [[157, 160], ["experiment_management.RayExperiment.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "main", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ",", "resume_ok", "=", "True", ")", "\n", "self", ".", "main", "=", "main", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.GridSearchExp.run": [[161, 191], ["copy.deepcopy", "exmodel.utils.create_grid", "range", "experiment_management.SingleRunExp", "experiment_management.run_configs_and_wait", "len", "print", "enumerate", "experiment_management.SingleRunExp", "experiment_management.run_configs_and_wait", "exmodel.utils.get_best_config", "print", "copy.deepcopy", "copy.deepcopy", "os.path.join", "assess_args.append", "os.path.join", "print", "len"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.create_grid", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.run_configs_and_wait", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.run_configs_and_wait", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.get_best_config"], ["", "def", "run", "(", "self", ",", "config", ")", ":", "\n", "        ", "config", ".", "run_id", "=", "0", "\n", "orig_args", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "grid_args", "=", "create_grid", "(", "config", ")", "\n", "\n", "# Model selection", "\n", "if", "len", "(", "grid_args", ")", ">", "1", ":", "\n", "            ", "print", "(", "f\"Grid search on {len(grid_args)} configurations\"", ")", "\n", "for", "grid_id", ",", "single_config", "in", "enumerate", "(", "grid_args", ")", ":", "\n", "# create jobs", "\n", "                ", "curr_folder", "=", "os", ".", "path", ".", "join", "(", "orig_args", ".", "logdir", ",", "f'VAL{grid_id}'", ")", "\n", "print", "(", "curr_folder", ")", "\n", "single_config", ".", "logdir", "=", "curr_folder", "\n", "", "exp", "=", "SingleRunExp", "(", "self", ".", "main", ",", "num_cpus", "=", "orig_args", ".", "cpus_per_job", ",", "num_gpus", "=", "orig_args", ".", "gpus_per_job", ")", "\n", "run_configs_and_wait", "(", "exp", ",", "grid_args", ")", "\n", "best_args", "=", "get_best_config", "(", "orig_args", ".", "logdir", ",", "metric_name", "=", "orig_args", ".", "metric_name", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"Single configuration. Skipping grid search.\"", ")", "\n", "best_args", "=", "copy", ".", "deepcopy", "(", "orig_args", ")", "\n", "\n", "# Assessment", "\n", "", "assess_args", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "best_args", ".", "assess_runs", ")", ":", "\n", "            ", "single_config", "=", "copy", ".", "deepcopy", "(", "best_args", ")", "\n", "single_config", ".", "run_id", "=", "i", "\n", "single_config", ".", "logdir", "=", "os", ".", "path", ".", "join", "(", "orig_args", ".", "logdir", ",", "f'ASSESS{i}'", ")", "\n", "assess_args", ".", "append", "(", "single_config", ")", "\n", "", "assess_exp", "=", "SingleRunExp", "(", "self", ".", "main", ",", "num_cpus", "=", "orig_args", ".", "cpus_per_job", ",", "\n", "num_gpus", "=", "orig_args", ".", "gpus_per_job", ")", "\n", "run_configs_and_wait", "(", "assess_exp", ",", "assess_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.run_configs_and_wait": [[118, 138], ["len", "print", "copy.deepcopy", "copy.deepcopy.", "ray.wait", "rem_ids.append", "ray.get", "print", "time.sleep"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.RayExperiment.wait"], ["", "", "def", "run_configs_and_wait", "(", "base_exp", ",", "configs", ",", "stagger", "=", "None", ")", ":", "\n", "    ", "rem_ids", "=", "[", "]", "\n", "for", "config", "in", "configs", ":", "\n", "        ", "exp", "=", "copy", ".", "deepcopy", "(", "base_exp", ")", "\n", "exp", "(", "config", ")", "\n", "ids", "=", "exp", ".", "_ray_obj_id", "\n", "\n", "if", "ids", "is", "not", "None", ":", "\n", "            ", "rem_ids", ".", "append", "(", "ids", ")", "\n", "if", "stagger", "is", "not", "None", ":", "\n", "                ", "sleep", "(", "stagger", ")", "\n", "", "", "", "n_jobs", "=", "len", "(", "rem_ids", ")", "\n", "print", "(", "f\"Scheduled jobs: {n_jobs}\"", ")", "\n", "\n", "while", "rem_ids", ":", "\n", "        ", "done_ids", ",", "rem_ids", "=", "ray", ".", "wait", "(", "rem_ids", ",", "num_returns", "=", "1", ")", "\n", "for", "result_id", "in", "done_ids", ":", "\n", "            ", "ray", ".", "get", "(", "result_id", ")", "\n", "n_jobs", "-=", "1", "\n", "print", "(", "f'Job {result_id} terminated. Jobs left: {n_jobs}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.ray_init": [[193, 212], ["ray.is_initialized", "ray.is_initialized", "ray.init", "os.environ.get", "ray.init", "print", "print", "ray.init", "print", "os.environ.get", "os.environ.get", "os.environ.get", "ray.nodes"], "function", ["None"], ["", "", "def", "ray_init", "(", "args", ")", ":", "\n", "    ", "if", "ray", ".", "is_initialized", "(", ")", "or", "args", ".", "no_ray", ":", "\n", "        ", "return", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "ray", ".", "init", "(", "num_cpus", "=", "args", ".", "max_cpus", ",", "num_gpus", "=", "args", ".", "max_gpus", ")", "\n", "", "elif", "os", ".", "environ", ".", "get", "(", "'ip_head'", ")", "is", "not", "None", ":", "\n", "        ", "assert", "os", ".", "environ", ".", "get", "(", "'redis_password'", ")", "is", "not", "None", ",", "\"Missing redis password\"", "\n", "ray", ".", "init", "(", "address", "=", "os", ".", "environ", ".", "get", "(", "'ip_head'", ")", ",", "\n", "_redis_password", "=", "os", ".", "environ", ".", "get", "(", "'redis_password'", ")", ")", "\n", "print", "(", "\"Connected to Ray cluster.\"", ")", "\n", "print", "(", "f\"Available nodes: {ray.nodes()}\"", ")", "\n", "args", ".", "gpus_per_job", "=", "0", "\n", "", "else", ":", "\n", "        ", "ray", ".", "init", "(", "num_cpus", "=", "args", ".", "max_cpus", ")", "\n", "args", ".", "gpus_per_job", "=", "0", "\n", "print", "(", "f\"Started local ray instance.\"", ")", "\n", "\n", "", "assert", "ray", ".", "is_initialized", "(", ")", ",", "\"Error in initializing ray.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.shutdown_experiment": [[214, 218], ["print", "ray.shutdown", "print"], "function", ["None"], ["", "def", "shutdown_experiment", "(", ")", ":", "\n", "    ", "print", "(", "'Shutting down ray. Please wait...'", ")", "\n", "ray", ".", "shutdown", "(", ")", "\n", "print", "(", "'Ray closed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.init_experiment_args": [[220, 241], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "exmodel.evaluation.YAMLConfig", "exmodel.evaluation.YAMLConfig.update", "os.path.expanduser", "os.path.join", "os.makedirs", "torch.set_num_threads", "ValueError", "[].split", "exmodel.utils.set_gpus", "exmodel.evaluation.YAMLConfig.config_files[].split"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.evaluation.config_parser.YAMLConfig.update", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.set_gpus"], ["", "def", "init_experiment_args", "(", ")", ":", "\n", "    ", "global", "args", ",", "args", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config_file'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'path to yaml configuration file'", ")", "\n", "cmd_args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "cmd_args", ".", "config_file", "==", "''", ":", "\n", "        ", "raise", "ValueError", "(", "'You must provide a config file.'", ")", "\n", "", "args", "=", "YAMLConfig", "(", "'./CONFIGS/default.yaml'", ")", "\n", "args", ".", "update", "(", "cmd_args", ".", "config_file", ")", "\n", "# expand logdir name", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "args", ".", "logdir", "=", "'/raid/carta/debug'", "\n", "", "args", ".", "logdir", "=", "os", ".", "path", ".", "expanduser", "(", "args", ".", "logdir", ")", "\n", "config_name", "=", "args", ".", "config_files", "[", "-", "1", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "args", ".", "logdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "config_name", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "logdir", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "set_num_threads", "(", "args", ".", "max_cpus", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "set_gpus", "(", "args", ".", "max_gpus", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.prepare_pretrained_models.main": [[29, 94], ["os.path.join", "os.makedirs", "range", "open", "f.write", "os.path.join", "os.makedirs", "print", "experiments.utils.load_scenario", "print", "experiments.utils.load_model().to", "os.path.join", "torch.save", "enumerate", "len", "os.path.join", "avalanche.evaluation.metrics.ExperienceAccuracy", "avalanche.logging.InteractiveLogger", "avalanche.training.plugins.EvaluationPlugin", "copy.deepcopy", "torch.optim.SGD", "torch.nn.CrossEntropyLoss", "avalanche.training.strategies.Naive", "avalanche.training.strategies.Naive.train", "os.path.join", "torch.save", "results.append", "open", "json.dump", "experiments.utils.load_model", "avalanche.evaluation.metrics.accuracy_metrics", "avalanche.evaluation.metrics.loss_metrics", "copy.deepcopy.parameters", "avalanche.evaluation.metrics.ExperienceAccuracy.result", "open", "f.write", "os.path.join", "len", "os.path.join", "exmodel.utils.to_json", "len", "avalanche.training.strategies.Naive.evaluator.get_all_metrics"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.write", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_scenario", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.train", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_model", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.RayExperiment.result", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.write", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.to_json"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "log_dir_base", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "args", ".", "model", ",", "args", ".", "scenario", "+", "args", ".", "version", ")", "\n", "os", ".", "makedirs", "(", "log_dir_base", ",", "exist_ok", "=", "args", ".", "debug", ")", "\n", "\n", "with", "open", "(", "log_dir_base", "+", "'/sysargs.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "' '", ".", "join", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "for", "run_id", "in", "range", "(", "args", ".", "runs", ")", ":", "\n", "        ", "if", "len", "(", "args", ".", "version", ")", ">", "0", ":", "\n", "            ", "args", ".", "version", "=", "'_'", "+", "args", ".", "version", "\n", "", "log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir_base", ",", "f'run{run_id}'", ")", "\n", "if", "args", ".", "debug", ":", "\n", "            ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'debug'", ")", "\n", "", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "args", ".", "debug", ")", "\n", "\n", "device", "=", "'cuda'", "\n", "print", "(", "f'Using device: {device}'", ")", "\n", "\n", "# create scenario", "\n", "scenario", "=", "load_scenario", "(", "args", ",", "run_id", ")", "\n", "plugs", "=", "[", "]", "\n", "\n", "# train on the selected scenario with the chosen strategy", "\n", "print", "(", "'Starting experiment...'", ")", "\n", "results", "=", "[", "]", "\n", "orig_model", "=", "load_model", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "model_fname", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'orig_model.pt'", ")", "\n", "torch", ".", "save", "(", "orig_model", ",", "model_fname", ")", "\n", "\n", "for", "i", ",", "train_exp", "in", "enumerate", "(", "scenario", ".", "train_stream", ")", ":", "\n", "# choose some metrics and evaluation method", "\n", "            ", "main_metric", "=", "ExperienceAccuracy", "(", ")", "\n", "interactive_logger", "=", "InteractiveLogger", "(", ")", "\n", "eval_plugin", "=", "EvaluationPlugin", "(", "\n", "main_metric", ",", "\n", "accuracy_metrics", "(", "epoch", "=", "True", ",", "stream", "=", "True", ")", ",", "\n", "loss_metrics", "(", "epoch", "=", "True", ",", "experience", "=", "True", ",", "stream", "=", "True", ")", ",", "\n", "loggers", "=", "[", "interactive_logger", "]", ")", "\n", "\n", "if", "'core50_nc'", "in", "args", ".", "scenario", ":", "\n", "                ", "assert", "len", "(", "scenario", ".", "test_stream", ")", "==", "1", "\n", "evals", "=", "[", "[", "train_exp", "]", "]", "\n", "", "elif", "args", ".", "scenario", "in", "[", "'nic_core50'", ",", "'ni_core50'", "]", ":", "\n", "                ", "assert", "len", "(", "scenario", ".", "test_stream", ")", "==", "1", "\n", "evals", "=", "[", "[", "train_exp", "]", ",", "[", "scenario", ".", "test_stream", "[", "0", "]", "]", "]", "\n", "", "else", ":", "\n", "                ", "evals", "=", "[", "[", "train_exp", "]", ",", "[", "scenario", ".", "test_stream", "[", "i", "]", "]", "]", "\n", "\n", "", "model", "=", "copy", ".", "deepcopy", "(", "orig_model", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "5e-4", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "strategy", "=", "Naive", "(", "model", ",", "optimizer", ",", "criterion", ",", "train_epochs", "=", "args", ".", "epochs", ",", "\n", "device", "=", "device", ",", "train_mb_size", "=", "args", ".", "batch_size", ",", "plugins", "=", "plugs", ",", "\n", "evaluator", "=", "eval_plugin", ",", "eval_mb_size", "=", "1000", ",", "eval_every", "=", "1", ")", "\n", "\n", "strategy", ".", "train", "(", "train_exp", ",", "eval_streams", "=", "evals", ",", "\n", "num_workers", "=", "16", ",", "pin_memory", "=", "True", ")", "\n", "model_fname", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'model_e{train_exp.current_experience}.pt'", ")", "\n", "torch", ".", "save", "(", "model", ",", "model_fname", ")", "\n", "results", ".", "append", "(", "main_metric", ".", "result", "(", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'm{i}.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "to_json", "(", "strategy", ".", "evaluator", ".", "get_all_metrics", "(", ")", ")", ")", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'accs.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "'models_accuracy'", ":", "results", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.train_ex_model.train_ed_single_exp": [[23, 127], ["torch.device", "print", "experiments.utils.load_scenario", "experiments.utils.load_exmodels", "exmodel.benchmarks.ExModelScenario", "experiments.utils.load_buffer_transform", "avalanche.logging.TextLogger", "avalanche.logging.TensorboardLogger", "exmodel.evaluation.rich_text_logging.RichTextLogger", "avalanche.training.plugins.EvaluationPlugin", "experiments.utils.load_model", "torch.optim.SGD", "torch.nn.CrossEntropyLoss", "print", "enumerate", "exmodel.training.strategy_exml_distillation.DataImpressionED.eval", "exmodel.training.strategy_exml_distillation.DataImpressionED.eval", "open", "os.path.join", "avalanche.evaluation.metrics.accuracy_metrics", "avalanche.evaluation.metrics.loss_metrics", "avalanche.evaluation.metrics.timing_metrics", "avalanche.evaluation.metrics.forgetting_metrics", "exmodel.evaluation.exmodel_samples.ExModelSamplePlugin", "experiments.utils.load_model.parameters", "exmodel.training.strategy_exml_distillation.ModelInversionED", "exmodel.training.strategy_exml_distillation.DataImpressionED.train", "os.path.join", "torch.save", "open", "f.write", "torch.cuda.is_available", "os.path.join", "exmodel.training.strategy_exml_distillation.DataImpressionED", "ValueError", "os.path.join", "exmodel.utils.to_json", "experiments.utils.get_classifier_weights_from_args", "exmodel.training.strategy_exml_distillation.DataImpressionED.evaluator.get_all_metrics"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_scenario", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_exmodels", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_buffer_transform", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_model", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.train", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.write", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.to_json", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.get_classifier_weights_from_args"], ["def", "train_ed_single_exp", "(", "args", ")", ":", "\n", "    ", "\"\"\" Used to synthetic data generation parameters.\n\n    :param args:\n    :return:\n    \"\"\"", "\n", "log_dir", "=", "args", ".", "logdir", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "args", ".", "buffer_size", "=", "100", "\n", "args", ".", "buffer_iter", "=", "100", "\n", "", "if", "args", ".", "no_ray", ":", "\n", "        ", "import", "setGPU", "# ray selects", "\n", "\n", "# check if selected GPU is available or use CPU", "\n", "", "device", "=", "torch", ".", "device", "(", "f\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "f'Using device: {device}'", ")", "\n", "# create scenario", "\n", "scenario", "=", "load_scenario", "(", "args", ",", "args", ".", "run_id", ")", "\n", "models", "=", "load_exmodels", "(", "args", ",", "scenario", ")", "\n", "scenario", "=", "ExModelScenario", "(", "scenario", ",", "models", ")", "\n", "buffer_transform", "=", "load_buffer_transform", "(", "args", ")", "\n", "\n", "# choose some metrics and evaluation method", "\n", "text_logger", "=", "TextLogger", "(", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'log.txt'", ")", ",", "'w'", ")", ")", "\n", "tb_logger", "=", "TensorboardLogger", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'tb'", ")", ")", "\n", "rtl", "=", "RichTextLogger", "(", "log_dir", ",", "interactive", "=", "args", ".", "debug", ")", "\n", "eval_plugin", "=", "EvaluationPlugin", "(", "\n", "accuracy_metrics", "(", "epoch", "=", "True", ",", "experience", "=", "True", ",", "stream", "=", "True", ")", ",", "\n", "loss_metrics", "(", "epoch", "=", "True", ",", "experience", "=", "True", ",", "stream", "=", "True", ")", ",", "\n", "timing_metrics", "(", "epoch", "=", "True", ")", ",", "\n", "forgetting_metrics", "(", "experience", "=", "True", ",", "stream", "=", "True", ")", ",", "\n", "ExModelSamplePlugin", "(", "mode", "=", "'train'", ",", "n_rows", "=", "10", ",", "n_cols", "=", "10", ",", "group", "=", "True", ")", ",", "\n", "loggers", "=", "[", "text_logger", ",", "tb_logger", ",", "rtl", "]", ")", "\n", "\n", "model", "=", "load_model", "(", "args", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "kwargs", "=", "{", "\n", "'model'", ":", "model", ",", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'criterion'", ":", "criterion", ",", "\n", "'device'", ":", "device", ",", "\n", "'train_mb_size'", ":", "args", ".", "train_mb_size", ",", "\n", "'eval_mb_size'", ":", "512", ",", "\n", "'evaluator'", ":", "eval_plugin", ",", "\n", "'eval_every'", ":", "1", ",", "\n", "'bias_normalization'", ":", "args", ".", "bias_normalization", ",", "\n", "'reset_model'", ":", "args", ".", "reset_model", ",", "\n", "'loss_type'", ":", "args", ".", "loss_type", ",", "\n", "'ce_loss'", ":", "args", ".", "ce_loss", "\n", "}", "\n", "\n", "if", "args", ".", "strategy", "==", "'minversion_ed'", ":", "\n", "        ", "if", "args", ".", "debug", ":", "\n", "            ", "args", ".", "num_iter_per_exp", "=", "10", "\n", "", "strat_args", "=", "{", "\n", "'buffer_size'", ":", "args", ".", "buffer_size", ",", "\n", "'num_iter_per_exp'", ":", "args", ".", "num_iter_per_exp", ",", "\n", "'buffer_iter'", ":", "args", ".", "buffer_iter", ",", "\n", "'buffer_lr'", ":", "args", ".", "buffer_lr", ",", "\n", "'buffer_wd'", ":", "args", ".", "buffer_wd", ",", "\n", "'transform'", ":", "buffer_transform", ",", "\n", "'lambda_blur'", ":", "args", ".", "buffer_blur", ",", "\n", "'lambda_bns'", ":", "args", ".", "buffer_bns", ",", "\n", "'buffer_mb_size'", ":", "args", ".", "buffer_mb_size", ",", "\n", "'temperature'", ":", "args", ".", "buffer_temperature", "\n", "}", "\n", "strategy", "=", "ModelInversionED", "(", "**", "strat_args", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "strategy", "==", "'dimpression_ed'", ":", "\n", "        ", "if", "args", ".", "debug", ":", "\n", "            ", "args", ".", "num_iter_per_exp", "=", "10", "\n", "", "strat_args", "=", "{", "\n", "'buffer_size'", ":", "args", ".", "buffer_size", ",", "\n", "'num_iter_per_exp'", ":", "args", ".", "num_iter_per_exp", ",", "\n", "'buffer_iter'", ":", "args", ".", "buffer_iter", ",", "\n", "'buffer_lr'", ":", "args", ".", "buffer_lr", ",", "\n", "'buffer_wd'", ":", "args", ".", "buffer_wd", ",", "\n", "'transform'", ":", "buffer_transform", ",", "\n", "'buffer_beta'", ":", "args", ".", "buffer_beta", ",", "\n", "'get_classifier'", ":", "get_classifier_weights_from_args", "(", "args", ")", ",", "\n", "'lambda_blur'", ":", "args", ".", "buffer_blur", ",", "\n", "'lambda_bns'", ":", "args", ".", "buffer_bns", ",", "\n", "'buffer_mb_size'", ":", "args", ".", "buffer_mb_size", ",", "\n", "'temperature'", ":", "args", ".", "buffer_temperature", "\n", "}", "\n", "strategy", "=", "DataImpressionED", "(", "**", "strat_args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized strategy {args.strategy}\"", ")", "\n", "\n", "# train on the selected scenario with the chosen strategy", "\n", "", "print", "(", "'Starting experiment...'", ")", "\n", "for", "i", ",", "experience", "in", "enumerate", "(", "scenario", ".", "train_stream", ")", ":", "\n", "        ", "strategy", ".", "train", "(", "\n", "experiences", "=", "experience", ",", "\n", "eval_streams", "=", "[", "[", "experience", "]", ",", "scenario", ".", "test_stream", "[", "0", "]", "]", ",", "\n", "expert_models", "=", "scenario", ".", "trained_models", "[", "i", "]", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "model_fname", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'model_e{experience.current_experience}.pt'", ")", "\n", "torch", ".", "save", "(", "strategy", ".", "model", ",", "model_fname", ")", "\n", "break", "\n", "", "strategy", ".", "eval", "(", "scenario", ".", "train_stream", "[", "0", "]", ")", "\n", "strategy", ".", "eval", "(", "scenario", ".", "test_stream", "[", "0", "]", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'metrics.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "to_json", "(", "strategy", ".", "evaluator", ".", "get_all_metrics", "(", ")", ",", "ignore_errors", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.train_ex_model.train_ed": [[129, 272], ["torch.device", "print", "experiments.utils.load_buffer_transform", "avalanche.logging.TextLogger", "avalanche.logging.TensorboardLogger", "exmodel.evaluation.rich_text_logging.RichTextLogger", "avalanche.training.plugins.EvaluationPlugin", "experiments.utils.load_model", "torch.optim.SGD", "torch.nn.CrossEntropyLoss", "print", "experiments.utils.train_loop", "os.path.join", "exmodel.benchmarks.ExModelNIC50Cifar100", "experiments.utils.load_scenario", "experiments.utils.load_exmodels", "exmodel.benchmarks.ExModelScenario", "open", "os.path.join", "avalanche.evaluation.metrics.accuracy_metrics", "avalanche.evaluation.metrics.loss_metrics", "avalanche.evaluation.metrics.timing_metrics", "avalanche.evaluation.metrics.forgetting_metrics", "exmodel.evaluation.exmodel_samples.ExModelSamplePlugin", "experiments.utils.load_model.parameters", "experiments.utils.get_aux_data", "exmodel.training.strategy_exml_distillation.AuxDataED", "torch.cuda.is_available", "os.path.join", "torch.utils.data.random_split", "exmodel.training.strategy_exml_distillation.ReplayED", "len", "exmodel.training.strategy_exml_distillation.GaussianNoiseED", "exmodel.training.strategy_exml_distillation.ModelInversionED", "exmodel.training.strategy_exml_distillation.DataImpressionED", "experiments.utils.get_classifier_weights_from_args", "os.path.join", "exmodel.training.strategy_exml_distillation.BufferPrecomputedED", "ValueError"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_buffer_transform", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_model", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.train_loop", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_scenario", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_exmodels", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.get_aux_data", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.get_classifier_weights_from_args"], ["", "", "def", "train_ed", "(", "args", ")", ":", "\n", "    ", "log_dir", "=", "args", ".", "logdir", "\n", "\n", "if", "'mt'", "in", "args", ".", "scenario", ":", "\n", "# can't work because experts don't use a multihead", "\n", "        ", "assert", "args", ".", "init_from_expert", "==", "False", "\n", "# not needed since heads are independent", "\n", "assert", "args", ".", "bias_normalization", "==", "False", "\n", "\n", "# check if selected GPU is available or use CPU", "\n", "", "device", "=", "torch", ".", "device", "(", "f\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "f'Using device: {device}'", ")", "\n", "# create scenario", "\n", "if", "args", ".", "scenario", "==", "'nic_cifar100'", ":", "\n", "        ", "experts_dir", "=", "os", ".", "path", ".", "join", "(", "'/raid/carta/ex_model_cl/logs/pret_models'", ",", "args", ".", "model", ",", "'split_cifar100'", ")", "\n", "scenario", "=", "ExModelNIC50Cifar100", "(", "experts_dir", ",", "SEED_BENCHMARK_RUNS", "[", "args", ".", "run_id", "]", ")", "\n", "", "else", ":", "\n", "        ", "scenario", "=", "load_scenario", "(", "args", ",", "args", ".", "run_id", ")", "\n", "models", "=", "load_exmodels", "(", "args", ",", "scenario", ")", "\n", "scenario", "=", "ExModelScenario", "(", "scenario", ",", "models", ")", "\n", "", "buffer_transform", "=", "load_buffer_transform", "(", "args", ")", "\n", "\n", "# if False:", "\n", "#     if not args.debug:", "\n", "# for i, model in enumerate(scenario.trained_models):", "\n", "#     model.to('cuda')", "\n", "#     acc = Accuracy()", "\n", "#     if ('core50' in args.scenario) or (args.scenario == 'nic_cifar100'):", "\n", "#         data = scenario.test_stream[0].dataset", "\n", "#     else:", "\n", "#         data = scenario.test_stream[i].dataset", "\n", "#", "\n", "#     for x, y, t in DataLoader(data, batch_size=args.train_mb_size,", "\n", "#                               pin_memory=True, num_workers=8):", "\n", "#         x, y, t = x.to('cuda'), y.to('cuda'), t.to('cuda')", "\n", "#         y_pred = model(x)", "\n", "#         acc.update(y_pred, y, t)", "\n", "#     print(f\"(i={i}) Original model accuracy: {acc.result()}\")", "\n", "#     model.to('cpu')", "\n", "\n", "# choose some metrics and evaluation method", "\n", "text_logger", "=", "TextLogger", "(", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'log.txt'", ")", ",", "'w'", ")", ")", "\n", "tb_logger", "=", "TensorboardLogger", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'tb'", ")", ")", "\n", "rtl", "=", "RichTextLogger", "(", "log_dir", ",", "interactive", "=", "args", ".", "debug", ")", "\n", "eval_plugin", "=", "EvaluationPlugin", "(", "\n", "accuracy_metrics", "(", "epoch", "=", "True", ",", "experience", "=", "True", ",", "stream", "=", "True", ",", "minibatch", "=", "True", ")", ",", "\n", "loss_metrics", "(", "epoch", "=", "True", ",", "experience", "=", "True", ",", "stream", "=", "True", ")", ",", "\n", "timing_metrics", "(", "epoch", "=", "True", ")", ",", "\n", "forgetting_metrics", "(", "experience", "=", "True", ",", "stream", "=", "True", ")", ",", "\n", "ExModelSamplePlugin", "(", "mode", "=", "'train'", ",", "n_rows", "=", "10", ",", "n_cols", "=", "10", ",", "group", "=", "True", ")", ",", "\n", "loggers", "=", "[", "text_logger", ",", "tb_logger", ",", "rtl", "]", ")", "\n", "\n", "model", "=", "load_model", "(", "args", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "kwargs", "=", "{", "\n", "'model'", ":", "model", ",", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'criterion'", ":", "criterion", ",", "\n", "'device'", ":", "device", ",", "\n", "'train_mb_size'", ":", "args", ".", "train_mb_size", ",", "\n", "'eval_mb_size'", ":", "512", ",", "\n", "'evaluator'", ":", "eval_plugin", ",", "\n", "'eval_every'", ":", "1", ",", "\n", "'bias_normalization'", ":", "args", ".", "bias_normalization", ",", "\n", "'reset_model'", ":", "args", ".", "reset_model", ",", "\n", "'loss_type'", ":", "args", ".", "loss_type", ",", "\n", "'ce_loss'", ":", "args", ".", "ce_loss", ",", "\n", "'plugins'", ":", "[", "]", ",", "# [ProfilerPlugin()],", "\n", "'num_iter_per_exp'", ":", "args", ".", "num_iter_per_exp", ",", "\n", "'init_from_expert'", ":", "args", ".", "init_from_expert", "\n", "}", "\n", "if", "args", ".", "strategy", "==", "'aux_data_ed'", ":", "\n", "        ", "aux_data", "=", "get_aux_data", "(", "args", ")", "\n", "if", "args", ".", "debug", ":", "\n", "            ", "removed_els", "=", "len", "(", "aux_data", ")", "-", "1000", "\n", "aux_data", ",", "_", "=", "random_split", "(", "aux_data", ",", "[", "1000", ",", "removed_els", "]", ")", "\n", "", "strat_args", "=", "{", "\n", "'aux_data'", ":", "aux_data", "\n", "}", "\n", "strategy", "=", "AuxDataED", "(", "**", "strat_args", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "strategy", "==", "'replay_ed'", ":", "\n", "        ", "if", "args", ".", "debug", ":", "\n", "            ", "args", ".", "num_iter_per_exp", "=", "10", "\n", "", "strat_args", "=", "{", "\n", "'buffer_size'", ":", "args", ".", "buffer_size", ",", "\n", "}", "\n", "strategy", "=", "ReplayED", "(", "**", "strat_args", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "strategy", "==", "'gn_ed'", ":", "\n", "        ", "if", "args", ".", "debug", ":", "\n", "            ", "args", ".", "num_iter_per_exp", "=", "10", "\n", "", "strat_args", "=", "{", "\n", "'img_shape'", ":", "scenario", ".", "train_stream", "[", "0", "]", ".", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "\n", "}", "\n", "strategy", "=", "GaussianNoiseED", "(", "**", "strat_args", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "strategy", "==", "'minversion_ed'", ":", "\n", "        ", "if", "args", ".", "debug", ":", "\n", "            ", "args", ".", "num_iter_per_exp", "=", "10", "\n", "", "strat_args", "=", "{", "\n", "'buffer_size'", ":", "args", ".", "buffer_size", ",", "\n", "'buffer_iter'", ":", "args", ".", "buffer_iter", ",", "\n", "'buffer_lr'", ":", "args", ".", "buffer_lr", ",", "\n", "'buffer_wd'", ":", "args", ".", "buffer_wd", ",", "\n", "'transform'", ":", "buffer_transform", ",", "\n", "'lambda_blur'", ":", "args", ".", "buffer_blur", ",", "\n", "'lambda_bns'", ":", "args", ".", "buffer_bns", ",", "\n", "'buffer_mb_size'", ":", "args", ".", "buffer_mb_size", ",", "\n", "'temperature'", ":", "args", ".", "buffer_temperature", "\n", "}", "\n", "strategy", "=", "ModelInversionED", "(", "**", "strat_args", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "strategy", "==", "'dimpression_ed'", ":", "\n", "        ", "if", "args", ".", "debug", ":", "\n", "            ", "args", ".", "num_iter_per_exp", "=", "10", "\n", "", "strat_args", "=", "{", "\n", "'buffer_size'", ":", "args", ".", "buffer_size", ",", "\n", "'buffer_iter'", ":", "args", ".", "buffer_iter", ",", "\n", "'buffer_lr'", ":", "args", ".", "buffer_lr", ",", "\n", "'buffer_wd'", ":", "args", ".", "buffer_wd", ",", "\n", "'transform'", ":", "buffer_transform", ",", "\n", "'buffer_beta'", ":", "args", ".", "buffer_beta", ",", "\n", "'get_classifier'", ":", "get_classifier_weights_from_args", "(", "args", ")", ",", "\n", "'lambda_blur'", ":", "args", ".", "buffer_blur", ",", "\n", "'lambda_bns'", ":", "args", ".", "buffer_bns", ",", "\n", "'buffer_mb_size'", ":", "args", ".", "buffer_mb_size", ",", "\n", "'temperature'", ":", "args", ".", "buffer_temperature", "\n", "}", "\n", "strategy", "=", "DataImpressionED", "(", "**", "strat_args", ",", "**", "kwargs", ")", "\n", "", "elif", "args", ".", "strategy", "==", "'from_path'", ":", "\n", "        ", "if", "args", ".", "debug", ":", "\n", "            ", "args", ".", "num_iter_per_exp", "=", "10", "\n", "", "full_buffer_path", "=", "os", ".", "path", ".", "join", "(", "\n", "'/raid/carta/ex_model_cl/logs/pret_models'", ",", "args", ".", "model", ",", "args", ".", "scenario", ",", "f'run{args.run_id}'", ",", "args", ".", "buffer_path", ")", "\n", "strat_args", "=", "{", "\n", "'logdir'", ":", "full_buffer_path", ",", "\n", "'transform'", ":", "buffer_transform", "\n", "}", "\n", "strategy", "=", "BufferPrecomputedED", "(", "**", "strat_args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized strategy {args.strategy}\"", ")", "\n", "# train on the selected scenario with the chosen strategy", "\n", "", "print", "(", "'Starting experiment...'", ")", "\n", "peval_on_test", "=", "(", "'nic'", "not", "in", "args", ".", "scenario", ")", "\n", "train_loop", "(", "log_dir", ",", "scenario", ",", "strategy", ",", "peval_on_test", "=", "peval_on_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.train_ex_model.main": [[274, 281], ["train_ex_model.train_ed", "train_ex_model.train_ed_single_exp"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.train_ex_model.train_ed", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.train_ex_model.train_ed_single_exp"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "experiment_type", "==", "'train_ed'", ":", "\n", "        ", "train_ed", "(", "args", ")", "\n", "", "elif", "args", ".", "experiment_type", "==", "'train_ed_single_exp'", ":", "\n", "        ", "train_ed_single_exp", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"Unknown experiment type.\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.GaussianNoise.__init__": [[31, 35], ["None"], "methods", ["None"], ["ret", "=", "\"\"", "\n", "if", "isinstance", "(", "o", ",", "dict", ")", ":", "\n", "        ", "ret", "+=", "\"{\"", "+", "NEWLINE", "\n", "comma", "=", "\"\"", "\n", "for", "k", ",", "v", "in", "o", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.GaussianNoise.__call__": [[36, 39], ["torch.randn", "tensor.size"], "methods", ["None"], ["            ", "ret", "+=", "comma", "\n", "comma", "=", "\",\\n\"", "\n", "ret", "+=", "SPACE", "*", "INDENT", "*", "(", "level", "+", "1", ")", "\n", "ret", "+=", "'\"'", "+", "str", "(", "k", ")", "+", "'\":'", "+", "SPACE", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.GaussianNoise.__repr__": [[40, 43], ["None"], "methods", ["None"], ["ret", "+=", "to_json", "(", "v", ",", "level", "+", "1", ",", "ignore_errors", ")", "\n", "\n", "", "ret", "+=", "NEWLINE", "+", "SPACE", "*", "INDENT", "*", "level", "+", "\"}\"", "\n", "", "elif", "isinstance", "(", "o", ",", "str", ")", ":", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.UnNormalize.__init__": [[70, 73], ["None"], "methods", ["None"], ["\n", "", "def", "load_ex_models", "(", "log_dir", ",", "num_experiences", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "models", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.UnNormalize.__call__": [[74, 87], ["torch.tensor().reshape", "torch.tensor().reshape", "tensor.mul_().add_", "torch.tensor", "torch.tensor", "tensor.mul_"], "methods", ["None"], ["for", "i", "in", "range", "(", "num_experiences", ")", ":", "\n", "            ", "model_fname", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'model_e{i}.pt'", ")", "\n", "models", ".", "append", "(", "torch", ".", "load", "(", "model_fname", ")", ")", "\n", "", "return", "models", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "print", "(", "\"please train separate models before launching ex-model experiment.\"", ")", "\n", "raise", "\n", "\n", "\n", "", "", "def", "set_gpus", "(", "num_gpus", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "gpustat", "\n", "", "except", "ImportError", ":", "\n", "        ", "print", "(", "\"gpustat module is not installed. No GPU allocated.\"", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__": [[126, 130], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.__init__"], ["    ", "'''\n    Set plot folder by creating it if it does not exist.\n    '''", "\n", "result_folder", "=", "os", ".", "path", ".", "expanduser", "(", "result_folder", ")", "\n", "return", "result_folder", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.classifier": [[131, 134], ["utils.ModelClassifierWrapper.get_classifier"], "methods", ["None"], ["\n", "\n", "", "def", "get_device", "(", "cuda", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.ModelClassifierWrapper.forward": [[135, 137], ["utils.ModelClassifierWrapper.model"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_buffer_transform": [[45, 57], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.Compose", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.Compose", "ValueError", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.RandomCrop"], "function", ["None"], ["", "elif", "isinstance", "(", "o", ",", "list", ")", ":", "\n", "        ", "ret", "+=", "\"[\"", "+", "\",\"", ".", "join", "(", "[", "to_json", "(", "e", ",", "level", "+", "1", ",", "ignore_errors", ")", "for", "e", "in", "o", "]", ")", "+", "\"]\"", "\n", "# Tuples are interpreted as lists", "\n", "", "elif", "isinstance", "(", "o", ",", "tuple", ")", ":", "\n", "        ", "ret", "+=", "\"[\"", "+", "\",\"", ".", "join", "(", "to_json", "(", "e", ",", "level", "+", "1", ",", "ignore_errors", ")", "for", "e", "in", "o", ")", "+", "\"]\"", "\n", "", "elif", "isinstance", "(", "o", ",", "bool", ")", ":", "\n", "        ", "ret", "+=", "\"true\"", "if", "o", "else", "\"false\"", "\n", "", "elif", "isinstance", "(", "o", ",", "int", ")", ":", "\n", "        ", "ret", "+=", "str", "(", "o", ")", "\n", "", "elif", "isinstance", "(", "o", ",", "float", ")", ":", "\n", "        ", "ret", "+=", "'%.7g'", "%", "o", "\n", "", "elif", "isinstance", "(", "o", ",", "numpy", ".", "ndarray", ")", "and", "numpy", ".", "issubdtype", "(", "o", ".", "dtype", ",", "numpy", ".", "integer", ")", ":", "\n", "        ", "ret", "+=", "\"[\"", "+", "','", ".", "join", "(", "map", "(", "str", ",", "o", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", ")", "+", "\"]\"", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.in_notebook": [[59, 67], ["get_ipython"], "function", ["None"], ["        ", "ret", "+=", "\"[\"", "+", "','", ".", "join", "(", "map", "(", "lambda", "x", ":", "'%.7g'", "%", "x", ",", "o", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", ")", "+", "\"]\"", "\n", "", "elif", "o", "is", "None", ":", "\n", "        ", "ret", "+=", "'null'", "\n", "", "elif", "ignore_errors", ":", "\n", "# we do not recognize the type but we don't want to raise an error.", "\n", "        ", "ret", "=", "'\"<not serializable>\"'", "\n", "", "else", ":", "\n", "# Unknown type. Raise error.", "\n", "        ", "raise", "TypeError", "(", "\"Unknown type '%s' for json serialization\"", "%", "str", "(", "type", "(", "o", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.get_aux_data": [[89, 101], ["exmodel.benchmarks.ImageNet128", "torchvision.transforms.Compose", "torchvision.datasets.FashionMNIST", "exmodel.benchmarks.ImageNet32", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "avalanche.benchmarks.datasets.default_dataset_location", "exmodel.benchmarks.ImageNet32", "ValueError"], "function", ["None"], ["", "try", ":", "\n", "        ", "selected", "=", "[", "]", "\n", "\n", "stats", "=", "gpustat", ".", "GPUStatCollection", ".", "new_query", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_gpus", ")", ":", "\n", "\n", "            ", "ids_mem", "=", "[", "res", "for", "res", "in", "map", "(", "lambda", "gpu", ":", "(", "int", "(", "gpu", ".", "entry", "[", "'index'", "]", ")", ",", "\n", "float", "(", "gpu", ".", "entry", "[", "'memory.used'", "]", ")", "/", "float", "(", "gpu", ".", "entry", "[", "'memory.total'", "]", ")", ")", ",", "\n", "stats", ")", "if", "str", "(", "res", "[", "0", "]", ")", "not", "in", "selected", "]", "\n", "\n", "if", "len", "(", "ids_mem", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.get_classifier_weights_from_args": [[103, 112], ["None"], "function", ["None"], ["                ", "break", "\n", "\n", "", "best", "=", "min", "(", "ids_mem", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "bestGPU", ",", "bestMem", "=", "best", "[", "0", "]", ",", "best", "[", "1", "]", "\n", "# print(f\"{i}-th best GPU is {bestGPU} with mem {bestMem}\")", "\n", "selected", ".", "append", "(", "str", "(", "bestGPU", ")", ")", "\n", "\n", "", "print", "(", "\"Setting GPUs to: {}\"", ".", "format", "(", "\",\"", ".", "join", "(", "selected", ")", ")", ")", "\n", "os", ".", "environ", "[", "'CUDA_DEVICE_ORDER'", "]", "=", "'PCI_BUS_ID'", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "\",\"", ".", "join", "(", "selected", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.get_classifier_from_args": [[114, 123], ["None"], "function", ["None"], ["        ", "print", "(", "\"GPU not available: \"", "+", "str", "(", "e", ")", ")", "\n", "\n", "\n", "", "", "def", "write_config_file", "(", "args", ",", "result_folder", ")", ":", "\n", "    ", "\"\"\"\n    Write yaml configuration file inside result folder\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "'config_file.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "dict", "(", "vars", "(", "args", ")", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.with_classifier_attribute": [[139, 141], ["utils.ModelClassifierWrapper", "utils.get_classifier_weights_from_args"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.get_classifier_weights_from_args"], ["if", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "mode", "=", "'cuda'", "\n", "", "device", "=", "torch", ".", "device", "(", "mode", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_scenario": [[143, 235], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "avalanche.benchmarks.PermutedMNIST", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "avalanche.benchmarks.SplitMNIST", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "avalanche.benchmarks.classic.cmnist._get_mnist_dataset", "avalanche.benchmarks.nc_benchmark", "avalanche.benchmarks.SplitMNIST", "avalanche.benchmarks.SplitCIFAR10", "avalanche.benchmarks.SplitCIFAR10", "avalanche.benchmarks.classic.ccifar100._get_cifar10_dataset", "avalanche.benchmarks.nc_benchmark", "avalanche.benchmarks.SplitCIFAR100", "avalanche.benchmarks.SplitCIFAR100", "avalanche.benchmarks.classic.ccifar100._get_cifar100_dataset", "avalanche.benchmarks.nc_benchmark", "avalanche.benchmarks.CORe50", "avalanche.benchmarks.CORe50", "avalanche.benchmarks.utils.AvalancheConcatDataset", "avalanche.benchmarks.utils.AvalancheConcatDataset", "avalanche.benchmarks.nc_benchmark", "avalanche.benchmarks.CORe50", "avalanche.benchmarks.CORe50", "exmodel.benchmarks.NIC50Cifar100", "ValueError"], "function", ["None"], ["return", "device", "\n", "\n", "\n", "", "def", "save_model", "(", "model", ",", "modelname", ",", "base_folder", ",", "path_save_models", "=", "'saved_models'", ",", "version", "=", "''", ")", ":", "\n", "    ", "'''\n    :param version: specify version of the model.\n    Usually used to represent the model when trained after step 'version'\n    '''", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "expanduser", "(", "base_folder", ")", ",", "\n", "path_save_models", ",", "modelname", "+", "version", "+", "'.pt'", ")", ")", "\n", "\n", "\n", "", "def", "load_model", "(", "model", ",", "modelname", ",", "device", ",", "base_folder", ",", "path_save_models", "=", "'saved_models'", ",", "version", "=", "''", ")", ":", "\n", "    ", "check", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "expanduser", "(", "base_folder", ")", ",", "\n", "path_save_models", ",", "modelname", "+", "version", "+", "'.pt'", ")", ",", "map_location", "=", "device", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "check", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n", "\n", "", "def", "create_grid", "(", "args", ",", "grid_arg", "=", "'grid'", ")", ":", "\n", "    ", "\"\"\"\n    Create grid search by returning a list of args.\n    :parameter args: argument parser result\n    :parameter grid_arg: field of `args` which contains\n        a dictionary of\n        'parameter name': list of possible values\n    :return: list of configurations, one for each\n        element in the grid search\n    \"\"\"", "\n", "\n", "try", ":", "\n", "        ", "grid", "=", "ParameterGrid", "(", "getattr", "(", "args", ",", "grid_arg", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "print", "(", "\"Running without grid search\"", ")", "\n", "return", "[", "args", "]", "\n", "\n", "", "final_grid", "=", "[", "]", "\n", "for", "el", "in", "grid", ":", "\n", "        ", "conf", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "for", "k", ",", "v", "in", "el", ".", "items", "(", ")", ":", "\n", "            ", "conf", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "", "final_grid", ".", "append", "(", "conf", ")", "\n", "\n", "", "return", "final_grid", "\n", "\n", "\n", "", "def", "compute_average_eval_accuracy", "(", "folder", ",", "eval_result_name", "=", "'metrics.json'", ",", "\n", "metric_name", "=", "'Top1_Acc_Stream/eval_phase/test_stream/Task000'", ")", ":", "\n", "    ", "\"\"\"\n    Return average and std accuracy over all experiences\n    after training on all experiences.\n    \"\"\"", "\n", "\n", "cur_file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "eval_result_name", ")", "\n", "with", "open", "(", "cur_file", ")", "as", "f", ":", "\n", "# fix NaN encoding for bugged JSON config", "\n", "        ", "j", "=", "f", ".", "read", "(", ")", "\n", "j", "=", "re", ".", "sub", "(", "r'\\bnan\\b'", ",", "'NaN'", ",", "j", ")", "\n", "\n", "try", ":", "\n", "            ", "data", "=", "json", ".", "loads", "(", "j", ")", "\n", "", "except", "JSONDecodeError", "as", "e", ":", "\n", "            ", "print", "(", "f\"Error decoding json file: {cur_file}\"", ")", "\n", "print", "(", "j", ")", "\n", "raise", "e", "\n", "\n", "", "", "m_eval", "=", "data", "[", "metric_name", "]", "[", "1", "]", "[", "-", "1", "]", "\n", "return", "m_eval", ",", "0", "\n", "\n", "\n", "", "def", "compute_average_training_accuracy", "(", "folder", ",", "\n", "training_result_name", "=", "'training_results.csv'", ")", ":", "\n", "    ", "\"\"\"\n    Return average and std accuracy over all experiences\n    after the last training epoch.\n    \"\"\"", "\n", "\n", "cur_file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "training_result_name", ")", "\n", "data", "=", "read_csv", "(", "cur_file", ")", "\n", "# select last epoch", "\n", "data", "=", "data", "[", "data", "[", "'epoch'", "]", "==", "data", "[", "'epoch'", "]", ".", "max", "(", ")", "]", "\n", "data", "=", "data", "[", "'val_accuracy'", "]", ".", "values", "\n", "\n", "# both are array of 2 elements (loss, acc)", "\n", "acc", "=", "np", ".", "average", "(", "data", ",", "axis", "=", "0", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "data", ",", "axis", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_model": [[237, 284], ["os.path.join", "os.path.exists", "print", "torch.load", "avalanche.models.SimpleMLP", "avalanche.models.SimpleCNN", "exmodel.models.LeNet5", "exmodel.models.MTLeNet5", "exmodel.gem_resnet.ResNet18", "exmodel.gem_resnet.MTResNet18", "exmodel.gem_resnet.MTMaskedResNet18", "torchvision.models.resnet18", "torchvision.models.mobilenet_v2", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torchvision.models.mobilenet_v2", "torchvision.models.mobilenet_v2.parameters", "torch.nn.Sequential", "ValueError", "torch.nn.Dropout", "torch.nn.Linear"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.gem_resnet.ResNet18"], ["return", "acc", ",", "acc_std", "\n", "\n", "\n", "", "def", "get_best_config", "(", "result_folder", ",", "\n", "val_folder_name", "=", "'VAL'", ",", "\n", "config_filename", "=", "'config_file.yaml'", ",", "\n", "metric_name", "=", "'Top1_Acc_Stream/eval_phase/test_stream/Task000'", ")", ":", "\n", "    ", "\"\"\"\n    Choose best config from a specific result folder containing\n    model selection results. It produces a `best_config.yaml`\n    file in the project root folder.\n    :return: parsed args from the best configuration\n    \"\"\"", "\n", "\n", "best_config_filename", "=", "'best_config.yaml'", "\n", "\n", "# find folders with format 'VAL{number}'", "\n", "ids", "=", "[", "str", "(", "el", ")", "for", "el", "in", "range", "(", "10", ")", "]", "\n", "dirs", "=", "[", "el", "for", "el", "in", "os", ".", "listdir", "(", "result_folder", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "el", ")", ")", "\n", "and", "el", ".", "startswith", "(", "val_folder_name", ")", "\n", "and", "el", "[", "-", "1", "]", "in", "ids", "]", "\n", "\n", "best_dir", "=", "None", "\n", "best_acc", "=", "0", "\n", "for", "dir_path", "in", "dirs", ":", "\n", "        ", "acc", ",", "_", "=", "compute_average_eval_accuracy", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "dir_path", ")", ",", "metric_name", "=", "metric_name", ")", "\n", "if", "acc", ">", "best_acc", ":", "\n", "            ", "best_dir", "=", "dir_path", "\n", "best_acc", "=", "acc", "\n", "", "", "assert", "best_dir", "is", "not", "None", ",", "\"Error in retrieving best accuracy\"", "\n", "\n", "copyfile", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "best_dir", ",", "config_filename", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "result_folder", ",", "best_config_filename", ")", ")", "\n", "\n", "best_config", "=", "YAMLConfig", "(", "os", ".", "path", ".", "join", "(", "result_folder", ",", "best_config_filename", ")", ")", "\n", "\n", "return", "best_config", "\n", "\n", "\n", "", "__all__", "=", "[", "\n", "'set_gpus'", ",", "\n", "'get_device'", ",", "\n", "'write_config_file'", ",", "\n", "'create_result_folder'", ",", "\n", "'save_model'", ",", "\n", "'load_model'", ",", "\n", "'create_grid'", ",", "\n"]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.load_exmodels": [[286, 310], ["range", "exmodel.benchmarks.ExModelNIC50Cifar100", "len", "os.path.join", "torch.load().to", "torch.load().to.eval", "models.append", "print", "print", "torch.load"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.models.masking.MultiTaskMasking.to"], ["'compute_average_training_accuracy'", ",", "\n", "'get_best_config'", ",", "\n", "'get_strategy'", "\n", "]", "", ""]], "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.utils.train_loop": [[312, 334], ["enumerate", "strategy.train", "os.path.join", "torch.save", "isinstance", "strategy.eval", "open", "f.write", "strategy.eval", "strategy.eval", "os.path.join", "exmodel.utils.to_json", "strategy.evaluator.get_all_metrics"], "function", ["home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.training.strategy_exml_distillation.ExMLDistillation.train", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.experiments.experiment_management.Tee.write", "home.repos.pwc.inspect_result.antoniocarta_ex_model_cl.exmodel.utils.to_json"], []]}