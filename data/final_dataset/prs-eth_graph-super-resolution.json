{"home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.__init__": [[23, 71], ["run_train.Trainer.get_dataloaders", "utils.seed_all", "model.GraphSuperResolutionNet", "run_train.Trainer.model.cuda", "utils.new_log", "collections.defaultdict", "collections.defaultdict", "os.path.join", "wandb.init", "wandb.config.update", "torch.utils.tensorboard.SummaryWriter", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "run_train.Trainer.resume", "run_train.Trainer.model.parameters", "torch.optim.SGD", "torch.optim.lr_scheduler.ReduceLROnPlateau", "run_train.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.get_dataloaders", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.seed_all", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.new_log", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_eval.Evaluator.resume"], ["    ", "def", "__init__", "(", "self", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "use_wandb", "=", "self", ".", "args", ".", "wandb", "\n", "\n", "self", ".", "dataloaders", "=", "self", ".", "get_dataloaders", "(", "args", ")", "\n", "\n", "seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "self", ".", "model", "=", "GraphSuperResolutionNet", "(", "\n", "args", ".", "scaling", ",", "\n", "args", ".", "crop_size", ",", "\n", "args", ".", "feature_extractor", ",", "\n", "lambda_init", "=", "args", ".", "lambda_init", ",", "\n", "mu_init", "=", "args", ".", "mu_init", "\n", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "experiment_folder", "=", "new_log", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "dataset", ")", ",", "args", ")", "\n", "\n", "if", "self", ".", "use_wandb", ":", "\n", "            ", "wandb", ".", "init", "(", "project", "=", "args", ".", "wandb_project", ",", "dir", "=", "self", ".", "experiment_folder", ")", "\n", "wandb", ".", "config", ".", "update", "(", "self", ".", "args", ")", "\n", "self", ".", "writer", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "experiment_folder", ")", "\n", "\n", "", "if", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "w_decay", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "w_decay", ")", "\n", "\n", "", "if", "args", ".", "lr_scheduler", "==", "'step'", ":", "\n", "            ", "self", ".", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "step_size", "=", "args", ".", "lr_step", ",", "gamma", "=", "args", ".", "lr_gamma", ")", "\n", "", "elif", "args", ".", "lr_scheduler", "==", "'plateau'", ":", "\n", "            ", "self", ".", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "self", ".", "optimizer", ",", "patience", "=", "args", ".", "lr_step", ",", "\n", "factor", "=", "args", ".", "lr_gamma", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scheduler", "=", "None", "\n", "\n", "", "self", ".", "epoch", "=", "0", "\n", "self", ".", "iter", "=", "0", "\n", "self", ".", "train_stats", "=", "defaultdict", "(", "lambda", ":", "np", ".", "nan", ")", "\n", "self", ".", "val_stats", "=", "defaultdict", "(", "lambda", ":", "np", ".", "nan", ")", "\n", "self", ".", "best_optimization_loss", "=", "np", ".", "inf", "\n", "\n", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "            ", "self", ".", "resume", "(", "path", "=", "args", ".", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.__del__": [[72, 75], ["run_train.Trainer.writer.close"], "methods", ["None"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "use_wandb", ":", "\n", "            ", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.train": [[76, 96], ["tqdm.tqdm.tqdm", "tnr.set_postfix", "range", "run_train.Trainer.train_epoch", "run_train.Trainer.validate", "run_train.Trainer.scheduler.step", "run_train.Trainer.save_model", "wandb.log", "run_train.Trainer.writer.add_scalar", "numpy.log10", "numpy.log10", "run_train.Trainer.scheduler.get_last_lr", "run_train.Trainer.scheduler.get_last_lr"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.train_epoch", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.validate", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.save_model"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "with", "tqdm", "(", "range", "(", "self", ".", "epoch", ",", "self", ".", "args", ".", "num_epochs", ")", ",", "leave", "=", "True", ")", "as", "tnr", ":", "\n", "            ", "tnr", ".", "set_postfix", "(", "training_loss", "=", "np", ".", "nan", ",", "validation_loss", "=", "np", ".", "nan", ",", "best_validation_loss", "=", "np", ".", "nan", ")", "\n", "for", "_", "in", "tnr", ":", "\n", "                ", "self", ".", "train_epoch", "(", "tnr", ")", "\n", "\n", "if", "(", "self", ".", "epoch", "+", "1", ")", "%", "self", ".", "args", ".", "val_every_n_epochs", "==", "0", ":", "\n", "                    ", "self", ".", "validate", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "save_model", "in", "[", "'last'", ",", "'both'", "]", ":", "\n", "                        ", "self", ".", "save_model", "(", "'last'", ")", "\n", "\n", "", "", "if", "self", ".", "args", ".", "lr_scheduler", "==", "'step'", ":", "\n", "                    ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "if", "self", ".", "use_wandb", ":", "\n", "                        ", "wandb", ".", "log", "(", "{", "'log_lr'", ":", "np", ".", "log10", "(", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", ")", "}", ",", "self", ".", "iter", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "writer", ".", "add_scalar", "(", "'log_lr'", ",", "np", ".", "log10", "(", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", ")", ",", "self", ".", "epoch", ")", "\n", "\n", "", "", "self", ".", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.train_epoch": [[97, 143], ["collections.defaultdict", "run_train.Trainer.model.train", "tqdm.tqdm.tqdm", "inner_tnr.set_postfix", "enumerate", "utils.to_cuda", "run_train.Trainer.optimizer.zero_grad", "run_train.Trainer.model", "run_train.Trainer.model.get_loss", "loss.backward", "run_train.Trainer.optimizer.step", "inner_tnr.set_postfix", "collections.defaultdict", "torch.nn.utils.clip_grad_norm_", "min", "tnr.set_postfix", "wandb.log", "run_train.Trainer.model.parameters", "len", "run_train.Trainer.train_stats.items", "run_train.Trainer.writer.add_scalar", "run_train.Trainer.train_stats.items"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.train", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.to_cuda", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.graph_sr_net.GraphSuperResolutionNet.get_loss", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.functional.GraphQuadraticSolver.backward"], ["", "", "", "def", "train_epoch", "(", "self", ",", "tnr", "=", "None", ")", ":", "\n", "        ", "self", ".", "train_stats", "=", "defaultdict", "(", "float", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "with", "tqdm", "(", "self", ".", "dataloaders", "[", "'train'", "]", ",", "leave", "=", "False", ")", "as", "inner_tnr", ":", "\n", "            ", "inner_tnr", ".", "set_postfix", "(", "training_loss", "=", "np", ".", "nan", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "inner_tnr", ")", ":", "\n", "                ", "sample", "=", "to_cuda", "(", "sample", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "sample", ")", "\n", "\n", "loss", ",", "loss_dict", "=", "self", ".", "model", ".", "get_loss", "(", "output", ",", "sample", ",", "kind", "=", "self", ".", "args", ".", "loss", ")", "\n", "\n", "for", "key", "in", "loss_dict", ":", "\n", "                    ", "self", ".", "train_stats", "[", "key", "]", "+=", "loss_dict", "[", "key", "]", "\n", "\n", "", "if", "self", ".", "epoch", ">", "0", "or", "not", "self", ".", "args", ".", "skip_first", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "gradient_clip", ">", "0.", ":", "\n", "                        ", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "gradient_clip", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "iter", "+=", "1", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "min", "(", "self", ".", "args", ".", "logstep_train", ",", "len", "(", "self", ".", "dataloaders", "[", "'train'", "]", ")", ")", "==", "0", ":", "\n", "                    ", "self", ".", "train_stats", "=", "{", "k", ":", "v", "/", "self", ".", "args", ".", "logstep_train", "for", "k", ",", "v", "in", "self", ".", "train_stats", ".", "items", "(", ")", "}", "\n", "\n", "inner_tnr", ".", "set_postfix", "(", "training_loss", "=", "self", ".", "train_stats", "[", "'optimization_loss'", "]", ")", "\n", "if", "tnr", "is", "not", "None", ":", "\n", "                        ", "tnr", ".", "set_postfix", "(", "training_loss", "=", "self", ".", "train_stats", "[", "'optimization_loss'", "]", ",", "\n", "validation_loss", "=", "self", ".", "val_stats", "[", "'optimization_loss'", "]", ",", "\n", "best_validation_loss", "=", "self", ".", "best_optimization_loss", ")", "\n", "\n", "", "if", "self", ".", "use_wandb", ":", "\n", "                        ", "wandb", ".", "log", "(", "{", "k", "+", "'/train'", ":", "v", "for", "k", ",", "v", "in", "self", ".", "train_stats", ".", "items", "(", ")", "}", ",", "self", ".", "iter", ")", "\n", "", "else", ":", "\n", "                        ", "for", "key", "in", "self", ".", "train_stats", ":", "\n", "                            ", "self", ".", "writer", ".", "add_scalar", "(", "'train/'", "+", "key", ",", "self", ".", "train_stats", "[", "key", "]", ",", "self", ".", "iter", ")", "\n", "\n", "# reset metrics", "\n", "", "", "self", ".", "train_stats", "=", "defaultdict", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.validate": [[144, 172], ["collections.defaultdict", "run_train.Trainer.model.eval", "torch.no_grad", "tqdm.tqdm.tqdm", "utils.to_cuda", "run_train.Trainer.model", "run_train.Trainer.model.get_loss", "wandb.log", "len", "run_train.Trainer.val_stats.items", "run_train.Trainer.writer.add_scalar", "run_train.Trainer.save_model", "run_train.Trainer.val_stats.items"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.to_cuda", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.graph_sr_net.GraphSuperResolutionNet.get_loss", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.save_model"], ["", "", "", "", "def", "validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "val_stats", "=", "defaultdict", "(", "float", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "sample", "in", "tqdm", "(", "self", ".", "dataloaders", "[", "'val'", "]", ",", "leave", "=", "False", ")", ":", "\n", "                ", "sample", "=", "to_cuda", "(", "sample", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "sample", ")", "\n", "\n", "loss", ",", "loss_dict", "=", "self", ".", "model", ".", "get_loss", "(", "output", ",", "sample", ",", "kind", "=", "self", ".", "args", ".", "loss", ")", "\n", "\n", "for", "key", "in", "loss_dict", ":", "\n", "                    ", "self", ".", "val_stats", "[", "key", "]", "+=", "loss_dict", "[", "key", "]", "\n", "\n", "", "", "self", ".", "val_stats", "=", "{", "k", ":", "v", "/", "len", "(", "self", ".", "dataloaders", "[", "'val'", "]", ")", "for", "k", ",", "v", "in", "self", ".", "val_stats", ".", "items", "(", ")", "}", "\n", "\n", "if", "self", ".", "use_wandb", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "k", "+", "'/val'", ":", "v", "for", "k", ",", "v", "in", "self", ".", "val_stats", ".", "items", "(", ")", "}", ",", "self", ".", "iter", ")", "\n", "", "else", ":", "\n", "                ", "for", "key", "in", "self", ".", "val_stats", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'val/'", "+", "key", ",", "self", ".", "val_stats", "[", "key", "]", ",", "self", ".", "epoch", ")", "\n", "\n", "", "", "if", "self", ".", "val_stats", "[", "'optimization_loss'", "]", "<", "self", ".", "best_optimization_loss", ":", "\n", "                ", "self", ".", "best_optimization_loss", "=", "self", ".", "val_stats", "[", "'optimization_loss'", "]", "\n", "if", "self", ".", "args", ".", "save_model", "in", "[", "'best'", ",", "'both'", "]", ":", "\n", "                    ", "self", ".", "save_model", "(", "'best'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.get_dataloaders": [[173, 205], ["torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torch.utils.data.DataLoader", "data.MiddleburyDataset", "torchvision.transforms.Normalize", "os.path.join", "data.DIMLDataset", "torchvision.transforms.Normalize", "NotImplementedError", "os.path.join", "data.NYUv2Dataset", "os.path.join"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "get_dataloaders", "(", "args", ")", ":", "\n", "        ", "data_args", "=", "{", "\n", "'crop_size'", ":", "(", "args", ".", "crop_size", ",", "args", ".", "crop_size", ")", ",", "\n", "'in_memory'", ":", "args", ".", "in_memory", ",", "\n", "'max_rotation_angle'", ":", "args", ".", "max_rotation", ",", "\n", "'do_horizontal_flip'", ":", "not", "args", ".", "no_flip", ",", "\n", "'crop_valid'", ":", "True", ",", "\n", "'image_transform'", ":", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "'scaling'", ":", "args", ".", "scaling", "\n", "}", "\n", "\n", "phases", "=", "(", "'train'", ",", "'val'", ")", "\n", "if", "args", ".", "dataset", "==", "'Middlebury'", ":", "\n", "            ", "depth_transform", "=", "Normalize", "(", "[", "2296.78", "]", ",", "[", "1122.7", "]", ")", "\n", "datasets", "=", "{", "phase", ":", "MiddleburyDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'Middlebury'", ")", ",", "**", "data_args", ",", "split", "=", "phase", ",", "\n", "depth_transform", "=", "depth_transform", ",", "crop_deterministic", "=", "phase", "==", "'val'", ")", "for", "phase", "in", "phases", "}", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'DIML'", ":", "\n", "            ", "depth_transform", "=", "Normalize", "(", "[", "2749.64", "]", ",", "[", "1154.29", "]", ")", "\n", "datasets", "=", "{", "phase", ":", "DIMLDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'DIML'", ")", ",", "**", "data_args", ",", "split", "=", "phase", ",", "\n", "depth_transform", "=", "depth_transform", ")", "for", "phase", "in", "phases", "}", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'NYUv2'", ":", "\n", "            ", "depth_transform", "=", "Normalize", "(", "[", "2796.32", "]", ",", "[", "1386.05", "]", ")", "\n", "datasets", "=", "{", "phase", ":", "NYUv2Dataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'NYU Depth v2'", ")", ",", "**", "data_args", ",", "split", "=", "phase", ",", "\n", "depth_transform", "=", "depth_transform", ")", "for", "phase", "in", "phases", "}", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'Dataset {args.dataset}'", ")", "\n", "\n", "", "return", "{", "phase", ":", "DataLoader", "(", "datasets", "[", "phase", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", "for", "phase", "in", "phases", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.save_model": [[206, 214], ["torch.save", "os.path.join", "run_train.Trainer.model.state_dict", "run_train.Trainer.optimizer.state_dict", "run_train.Trainer.scheduler.state_dict"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "torch", ".", "save", "(", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "self", ".", "epoch", "+", "1", ",", "\n", "'iter'", ":", "self", ".", "iter", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_folder", ",", "f'{prefix}_model.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_train.Trainer.resume": [[215, 227], ["torch.load", "run_train.Trainer.model.load_state_dict", "run_train.Trainer.optimizer.load_state_dict", "run_train.Trainer.scheduler.load_state_dict", "print", "os.path.isfile", "RuntimeError"], "methods", ["None"], ["", "def", "resume", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'No checkpoint found at \\'{path}\\''", ")", "\n", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "self", ".", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "self", ".", "iter", "=", "checkpoint", "[", "'iter'", "]", "\n", "\n", "print", "(", "f'Checkpoint \\'{path}\\' loaded.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_eval.Evaluator.__init__": [[19, 29], ["run_eval.Evaluator.get_dataloader", "model.GraphSuperResolutionNet", "run_eval.Evaluator.resume", "run_eval.Evaluator.model.cuda().eval", "torch.set_grad_enabled", "run_eval.Evaluator.model.cuda"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_eval.Evaluator.get_dataloader", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_eval.Evaluator.resume"], ["    ", "def", "__init__", "(", "self", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "dataloader", "=", "self", ".", "get_dataloader", "(", "args", ")", "\n", "\n", "self", ".", "model", "=", "GraphSuperResolutionNet", "(", "args", ".", "scaling", ",", "args", ".", "crop_size", ",", "args", ".", "feature_extractor", ")", "\n", "self", ".", "resume", "(", "path", "=", "args", ".", "checkpoint", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_eval.Evaluator.evaluate": [[30, 44], ["collections.defaultdict", "tqdm.tqdm.tqdm", "utils.to_cuda", "run_eval.Evaluator.model", "run_eval.Evaluator.model.get_loss", "len", "collections.defaultdict.items"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.to_cuda", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.graph_sr_net.GraphSuperResolutionNet.get_loss"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "test_stats", "=", "defaultdict", "(", "float", ")", "\n", "\n", "for", "sample", "in", "tqdm", "(", "self", ".", "dataloader", ",", "leave", "=", "False", ")", ":", "\n", "            ", "sample", "=", "to_cuda", "(", "sample", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "sample", ")", "\n", "\n", "_", ",", "loss_dict", "=", "self", ".", "model", ".", "get_loss", "(", "output", ",", "sample", ")", "\n", "\n", "for", "key", "in", "loss_dict", ":", "\n", "                ", "test_stats", "[", "key", "]", "+=", "loss_dict", "[", "key", "]", "\n", "\n", "", "", "return", "{", "k", ":", "v", "/", "len", "(", "self", ".", "dataloader", ")", "for", "k", ",", "v", "in", "test_stats", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_eval.Evaluator.get_dataloader": [[45, 74], ["torch.utils.data.DataLoader", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "data.DIMLDataset", "os.path.join", "torchvision.transforms.Normalize", "data.MiddleburyDataset", "os.path.join", "torchvision.transforms.Normalize", "data.NYUv2Dataset", "NotImplementedError", "os.path.join"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_dataloader", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "        ", "data_args", "=", "{", "\n", "'crop_size'", ":", "(", "args", ".", "crop_size", ",", "args", ".", "crop_size", ")", ",", "\n", "'in_memory'", ":", "args", ".", "in_memory", ",", "\n", "'max_rotation_angle'", ":", "0", ",", "\n", "'do_horizontal_flip'", ":", "False", ",", "\n", "'crop_valid'", ":", "True", ",", "\n", "'crop_deterministic'", ":", "True", ",", "\n", "'image_transform'", ":", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "'scaling'", ":", "args", ".", "scaling", "\n", "}", "\n", "\n", "if", "args", ".", "dataset", "==", "'DIML'", ":", "\n", "            ", "depth_transform", "=", "Normalize", "(", "[", "2749.64", "]", ",", "[", "1154.29", "]", ")", "\n", "dataset", "=", "DIMLDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'DIML'", ")", ",", "**", "data_args", ",", "split", "=", "'test'", ",", "\n", "depth_transform", "=", "depth_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'Middlebury'", ":", "\n", "            ", "depth_transform", "=", "Normalize", "(", "[", "2296.78", "]", ",", "[", "1122.7", "]", ")", "\n", "dataset", "=", "MiddleburyDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'Middlebury'", ")", ",", "**", "data_args", ",", "split", "=", "'test'", ",", "\n", "depth_transform", "=", "depth_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'NYUv2'", ":", "\n", "            ", "depth_transform", "=", "Normalize", "(", "[", "2796.32", "]", ",", "[", "1386.05", "]", ")", "\n", "dataset", "=", "NYUv2Dataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "'NYU Depth v2'", ")", ",", "**", "data_args", ",", "split", "=", "'test'", ",", "\n", "depth_transform", "=", "depth_transform", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'Dataset {args.dataset}'", ")", "\n", "\n", "", "return", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "args", ".", "num_workers", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.run_eval.Evaluator.resume": [[75, 84], ["torch.load", "print", "os.path.isfile", "RuntimeError", "run_eval.Evaluator.model.load_state_dict", "run_eval.Evaluator.model.load_state_dict"], "methods", ["None"], ["", "def", "resume", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'No checkpoint found at \\'{path}\\''", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "'model'", "in", "checkpoint", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "print", "(", "f'Checkpoint \\'{path}\\' loaded.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.to_cuda": [[9, 25], ["sample.items", "isinstance", "val.cuda", "isinstance", "isinstance", "new_val.append", "new_val.append", "e.cuda"], "function", ["None"], ["def", "to_cuda", "(", "sample", ")", ":", "\n", "    ", "sampleout", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "sample", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "sampleout", "[", "key", "]", "=", "val", ".", "cuda", "(", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "            ", "new_val", "=", "[", "]", "\n", "for", "e", "in", "val", ":", "\n", "                ", "if", "isinstance", "(", "e", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "new_val", ".", "append", "(", "e", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_val", ".", "append", "(", "val", ")", "\n", "", "", "sampleout", "[", "key", "]", "=", "new_val", "\n", "", "else", ":", "\n", "            ", "sampleout", "[", "key", "]", "=", "val", "\n", "", "", "return", "sampleout", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.seed_all": [[27, 31], ["random.seed", "numpy.random.seed", "torch.manual_seed"], "function", ["None"], ["", "def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.new_log": [[33, 44], ["os.makedirs", "len", "os.path.join", "os.mkdir", "os.listdir", "utils.write_params", "os.path.join"], "function", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.write_params"], ["", "def", "new_log", "(", "folder_path", ",", "args", "=", "None", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "folder_path", ",", "exist_ok", "=", "True", ")", "\n", "n_exp", "=", "len", "(", "os", ".", "listdir", "(", "folder_path", ")", ")", "\n", "experiment_folder", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'experiment_{n_exp}'", ")", "\n", "os", ".", "mkdir", "(", "experiment_folder", ")", "\n", "\n", "if", "args", "is", "not", "None", ":", "\n", "        ", "args_dict", "=", "args", ".", "__dict__", "\n", "write_params", "(", "args_dict", ",", "os", ".", "path", ".", "join", "(", "experiment_folder", ",", "'args'", "+", "'.csv'", ")", ")", "\n", "\n", "", "return", "experiment_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.utils.write_params": [[46, 52], ["open", "csv.writer", "csv.writer.writerow", "params.items", "csv.writer.writerow"], "function", ["None"], ["", "def", "write_params", "(", "params", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "fh", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "fh", ")", "\n", "writer", ".", "writerow", "(", "[", "'key'", ",", "'value'", "]", ")", "\n", "for", "data", "in", "params", ".", "items", "(", ")", ":", "\n", "            ", "writer", ".", "writerow", "(", "[", "el", "for", "el", "in", "data", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.losses.mse_loss_func": [[4, 6], ["torch.mse_loss"], "function", ["None"], ["def", "mse_loss_func", "(", "pred", ",", "gt", ",", "mask", ")", ":", "\n", "    ", "return", "f", ".", "mse_loss", "(", "pred", "[", "mask", "==", "1.", "]", ",", "gt", "[", "mask", "==", "1.", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.losses.l1_loss_func": [[8, 10], ["torch.l1_loss"], "function", ["None"], ["", "def", "l1_loss_func", "(", "pred", ",", "gt", ",", "mask", ")", ":", "\n", "    ", "return", "f", ".", "l1_loss", "(", "pred", "[", "mask", "==", "1.", "]", ",", "gt", "[", "mask", "==", "1.", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.graph_sr_net.GraphSuperResolutionNet.__init__": [[44, 77], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "functional.create_fixed_cupy_sparse_matrices", "ValueError", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "segmentation_models_pytorch.Unet", "str", "segmentation_models_pytorch.Unet", "math.log", "math.log", "segmentation_models_pytorch.Unet", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.diml.DIMLDataset.__init__", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.functional.create_fixed_cupy_sparse_matrices"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "scaling", ":", "int", ",", "\n", "crop_size", "=", "256", ",", "\n", "feature_extractor", "=", "'UResNet'", ",", "\n", "pretrained", "=", "True", ",", "\n", "lambda_init", "=", "1.0", ",", "\n", "mu_init", "=", "0.1", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "crop_size", "not", "in", "[", "64", ",", "128", ",", "256", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Crop size should be in {64, 128, 256}, got '", "+", "str", "(", "crop_size", ")", ")", "\n", "\n", "", "if", "feature_extractor", "==", "'Color'", ":", "\n", "            ", "self", ".", "feature_extractor", "=", "None", "\n", "# so the optimizer does not complain in case we have no other parameters", "\n", "self", ".", "dummy_param", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "elif", "feature_extractor", "==", "'UResNet'", ":", "\n", "            ", "self", ".", "feature_extractor", "=", "smp", ".", "Unet", "(", "'resnet50'", ",", "classes", "=", "FEATURE_DIM", ",", "in_channels", "=", "INPUT_DIM", ",", "\n", "encoder_weights", "=", "'imagenet'", "if", "pretrained", "else", "None", ")", "\n", "", "elif", "feature_extractor", "==", "'UResNet18'", ":", "\n", "            ", "self", ".", "feature_extractor", "=", "smp", ".", "Unet", "(", "'resnet18'", ",", "classes", "=", "FEATURE_DIM", ",", "in_channels", "=", "INPUT_DIM", ",", "\n", "encoder_weights", "=", "'imagenet'", "if", "pretrained", "else", "None", ")", "\n", "", "elif", "feature_extractor", "==", "'UEffNet2'", ":", "\n", "            ", "self", ".", "feature_extractor", "=", "smp", ".", "Unet", "(", "'efficientnet-b2'", ",", "classes", "=", "FEATURE_DIM", ",", "in_channels", "=", "INPUT_DIM", ",", "\n", "encoder_weights", "=", "'imagenet'", "if", "pretrained", "else", "None", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'Feature extractor {feature_extractor}'", ")", "\n", "\n", "", "self", ".", "log_lambda", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "log", "(", "lambda_init", ")", "]", ")", ")", "\n", "self", ".", "log_mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "log", "(", "mu_init", ")", "]", ")", ")", "\n", "self", ".", "mx_dict", "=", "create_fixed_cupy_sparse_matrices", "(", "crop_size", ",", "crop_size", ",", "scaling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.graph_sr_net.GraphSuperResolutionNet.forward": [[78, 92], ["graph_sr_net.get_neighbor_affinity_no_border", "functional.GraphQuadraticSolver.apply", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "graph_sr_net.GraphSuperResolutionNet.feature_extractor", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.graph_sr_net.get_neighbor_affinity_no_border"], ["", "def", "forward", "(", "self", ",", "sample", ")", ":", "\n", "        ", "guide", ",", "source", ",", "mask_lr", "=", "sample", "[", "'guide'", "]", ",", "sample", "[", "'source'", "]", ",", "sample", "[", "'mask_lr'", "]", "\n", "\n", "if", "self", ".", "feature_extractor", "is", "None", ":", "\n", "            ", "pixel_features", "=", "torch", ".", "cat", "(", "[", "guide", ",", "sample", "[", "'y_bicubic'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "pixel_features", "=", "self", ".", "feature_extractor", "(", "torch", ".", "cat", "(", "[", "guide", ",", "sample", "[", "'y_bicubic'", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "mu", ",", "lambda_", "=", "torch", ".", "exp", "(", "self", ".", "log_mu", ")", ",", "torch", ".", "exp", "(", "self", ".", "log_lambda", ")", "\n", "neighbor_affinity", "=", "get_neighbor_affinity_no_border", "(", "pixel_features", ",", "mu", ",", "lambda_", ")", "\n", "\n", "y_pred", "=", "GraphQuadraticSolver", ".", "apply", "(", "neighbor_affinity", ",", "source", ",", "self", ".", "mx_dict", ",", "mask_lr", ")", "\n", "\n", "return", "{", "'y_pred'", ":", "y_pred", ",", "'neighbor_affinity'", ":", "neighbor_affinity", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.graph_sr_net.GraphSuperResolutionNet.get_loss": [[93, 108], ["losses.l1_loss_func", "losses.mse_loss_func", "losses.l1_loss_func.detach().item", "losses.mse_loss_func.detach().item", "torch.exp().detach().item", "torch.exp().detach().item", "torch.exp().detach().item", "torch.exp().detach().item", "torch.exp().detach().item", "torch.exp().detach().item", "torch.exp().detach().item", "torch.exp().detach().item", "loss.detach().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "losses.l1_loss_func.detach", "losses.mse_loss_func.detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "torch.exp().detach", "loss.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "[].detach", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.losses.l1_loss_func", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.None.losses.mse_loss_func"], ["", "def", "get_loss", "(", "self", ",", "output", ",", "sample", ",", "kind", "=", "'l1'", ")", ":", "\n", "        ", "y_pred", "=", "output", "[", "'y_pred'", "]", "\n", "y", ",", "mask_hr", ",", "mask_lr", "=", "(", "sample", "[", "k", "]", "for", "k", "in", "(", "'y'", ",", "'mask_hr'", ",", "'mask_lr'", ")", ")", "\n", "\n", "l1_loss", "=", "l1_loss_func", "(", "y_pred", ",", "y", ",", "mask_hr", ")", "\n", "mse_loss", "=", "mse_loss_func", "(", "y_pred", ",", "y", ",", "mask_hr", ")", "\n", "loss", "=", "l1_loss", "if", "kind", "==", "'l1'", "else", "mse_loss", "\n", "\n", "return", "loss", ",", "{", "\n", "'l1_loss'", ":", "l1_loss", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'mse_loss'", ":", "mse_loss", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'mu'", ":", "torch", ".", "exp", "(", "self", ".", "log_mu", ")", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'lambda'", ":", "torch", ".", "exp", "(", "self", ".", "log_lambda", ")", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'optimization_loss'", ":", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'average_link'", ":", "torch", ".", "mean", "(", "output", "[", "'neighbor_affinity'", "]", "[", ":", ",", "0", ":", "4", "]", ".", "detach", "(", ")", ")", ".", "item", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.graph_sr_net.get_neighbor_affinity_no_border": [[15, 40], ["torch.pad", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.exp", "torch.exp", "torch.ones", "torch.ones", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["def", "get_neighbor_affinity_no_border", "(", "feature_map", ",", "mu", ",", "lambda_", ")", ":", "\n", "    ", "B", ",", "M", ",", "H", ",", "W", "=", "feature_map", ".", "shape", "\n", "\n", "feature_map_padded", "=", "F", ".", "pad", "(", "feature_map", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'constant'", ",", "0", ")", "\n", "\n", "top", "=", "torch", ".", "mean", "(", "(", "feature_map_padded", "[", ":", ",", ":", ",", "0", ":", "-", "2", ",", "1", ":", "-", "1", "]", "-", "feature_map", ")", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "bottom", "=", "torch", ".", "mean", "(", "(", "feature_map_padded", "[", ":", ",", ":", ",", "2", ":", ",", "1", ":", "-", "1", "]", "-", "feature_map", ")", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "left", "=", "torch", ".", "mean", "(", "(", "feature_map_padded", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "0", ":", "-", "2", "]", "-", "feature_map", ")", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "right", "=", "torch", ".", "mean", "(", "(", "feature_map_padded", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "2", ":", "]", "-", "feature_map", ")", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "affinity", "=", "torch", ".", "cat", "(", "[", "top", ",", "bottom", ",", "left", ",", "right", "]", ",", "dim", "=", "1", ")", "/", "(", "1e-6", "+", "mu", "**", "2", ")", "\n", "affinity", "=", "torch", ".", "exp", "(", "-", "affinity", ")", "\n", "\n", "border_remover", "=", "torch", ".", "ones", "(", "(", "1", ",", "4", ",", "H", ",", "W", ")", ",", "device", "=", "feature_map", ".", "device", ")", "\n", "border_remover", "[", "0", ",", "0", ",", "0", ",", ":", "]", "=", "0", "# top", "\n", "border_remover", "[", "0", ",", "1", ",", "-", "1", ",", ":", "]", "=", "0", "# bottom", "\n", "border_remover", "[", "0", ",", "2", ",", ":", ",", "0", "]", "=", "0", "# left", "\n", "border_remover", "[", "0", ",", "3", ",", ":", ",", "-", "1", "]", "=", "0", "# right", "\n", "\n", "affinity", "=", "affinity", "*", "border_remover", "\n", "center", "=", "torch", ".", "sum", "(", "affinity", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "affinity", "=", "torch", ".", "cat", "(", "[", "affinity", ",", "center", "]", ",", "dim", "=", "1", ")", "\n", "affinity", "=", "affinity", "*", "lambda_", "\n", "\n", "return", "affinity", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.functional.GraphQuadraticSolver.forward": [[58, 111], ["cupy.asarray", "cupy.asarray", "range", "range", "cupy.sparse.bmat().tocsr", "cupy.concatenate", "x_cp.reshape.reshape.reshape", "torch.as_tensor", "x.reshape.reshape.reshape", "neighbor_affinity.detach", "source.detach().reshape", "cupy.asarray", "cupy.ones", "functional.build_laplacian", "cupy.sparse.diags().tocsr", "cupy.sparse.diags().tocsr.dot", "D.transpose().dot", "As.append", "bs.append", "cupyx.scipy.sparse.linalg.cg", "mask_source.detach().reshape", "cp.sparse.diags().tocsr.dot.transpose().dot", "range", "cupy.sparse.bmat", "source.detach", "cupy.sparse.diags", "D.transpose", "mask_source.detach", "cp.sparse.diags().tocsr.dot.transpose"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.functional.build_laplacian"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "neighbor_affinity", ",", "source", ",", "fixed_matrices", ",", "mask_source", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        neighbor_affinity (B x 5 x H x W): affinity among neighbor pixels\n        source (B x 1 x h x w): source image\n        mask_source (B x 1 x h x w): mask source image\n        \"\"\"", "\n", "assert", "neighbor_affinity", ".", "is_cuda", "\n", "assert", "source", ".", "is_cuda", "\n", "assert", "source", ".", "shape", "[", "1", "]", "==", "1", "\n", "assert", "not", "source", ".", "requires_grad", "\n", "\n", "B", ",", "_", ",", "h", ",", "w", "=", "source", ".", "shape", "\n", "\n", "D", "=", "fixed_matrices", "[", "'D'", "]", "\n", "neighbor_affinity_cp", "=", "cp", ".", "asarray", "(", "neighbor_affinity", ".", "detach", "(", ")", ")", "\n", "source_cp", "=", "cp", ".", "asarray", "(", "source", ".", "detach", "(", ")", ".", "reshape", "(", "(", "B", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "if", "mask_source", "is", "not", "None", ":", "\n", "            ", "mask_source_cp", "=", "cp", ".", "asarray", "(", "mask_source", ".", "detach", "(", ")", ".", "reshape", "(", "(", "B", ",", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "mask_source_cp", "=", "cp", ".", "ones", "(", "(", "B", ",", "h", "*", "w", ")", ")", "\n", "\n", "", "As", "=", "[", "]", "\n", "bs", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "0", ",", "B", ")", ":", "\n", "            ", "L", "=", "build_laplacian", "(", "neighbor_affinity_cp", "[", "idx", ":", "idx", "+", "1", "]", ",", "fixed_matrices", ")", "\n", "C", "=", "cp", ".", "sparse", ".", "diags", "(", "mask_source_cp", "[", "idx", "]", ")", ".", "tocsr", "(", ")", "\n", "CD", "=", "C", ".", "dot", "(", "D", ")", "\n", "DtCD", "=", "D", ".", "transpose", "(", ")", ".", "dot", "(", "CD", ")", "\n", "As", ".", "append", "(", "(", "DtCD", "+", "L", ")", ")", "\n", "bs", ".", "append", "(", "CD", ".", "transpose", "(", ")", ".", "dot", "(", "source_cp", "[", "idx", "]", ")", ")", "\n", "\n", "", "A", "=", "[", "[", "None", "]", "*", "B", "for", "_", "in", "range", "(", "B", ")", "]", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "            ", "A", "[", "i", "]", "[", "i", "]", "=", "As", "[", "i", "]", "\n", "", "A", "=", "cp", ".", "sparse", ".", "bmat", "(", "A", ")", ".", "tocsr", "(", ")", "\n", "b", "=", "cp", ".", "concatenate", "(", "bs", ",", "axis", "=", "0", ")", "\n", "\n", "x_cp", "=", "cg", "(", "A", ",", "b", ",", "maxiter", "=", "MAX_ITER", ")", "[", "0", "]", "\n", "x_cp", "=", "x_cp", ".", "reshape", "(", "(", "B", ",", "-", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "as_tensor", "(", "x_cp", ",", "device", "=", "'cuda'", ")", "\n", "x", "=", "x", ".", "reshape", "(", "(", "B", ",", "1", ",", "neighbor_affinity", ".", "shape", "[", "2", "]", ",", "neighbor_affinity", ".", "shape", "[", "3", "]", ")", ")", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "x", ".", "requires_grad", "=", "True", "\n", "\n", "", "ctx", ".", "x_cp", "=", "x_cp", "\n", "ctx", ".", "fixed_matrices", "=", "fixed_matrices", "\n", "ctx", ".", "A", "=", "A", "\n", "ctx", ".", "neighbor_affinity_shape", "=", "neighbor_affinity", ".", "shape", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.functional.GraphQuadraticSolver.backward": [[112, 144], ["cupy.asarray", "grad_x_cp.reshape.reshape.reshape", "grad_b_cp.reshape.reshape.reshape", "range", "torch.cat", "grad_x.detach", "cupyx.scipy.sparse.linalg.cg", "cupy.zeros", "enumerate", "cupy.sparse.diags().dot().sum().squeeze", "torch.as_tensor", "grad_neighbor_affinities.append", "A.transpose().tocsr", "cupy.sparse.diags().dot().sum().squeeze", "torch.as_tensor.reshape", "cupy.sparse.diags().dot().sum", "A.transpose", "cupy.sparse.diags().dot().sum", "cupy.sparse.diags().dot", "cupy.sparse.diags().dot", "fixed_matrices[].dot", "fixed_matrices[].transpose().dot", "cupy.sparse.diags", "cupy.sparse.diags", "cupy.sparse.diags", "cupy.sparse.diags", "x_cps[].squeeze", "fixed_matrices[].transpose", "x_cps[].squeeze", "grad_b_cp[].squeeze", "grad_b_cp[].squeeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_x", ")", ":", "\n", "        ", "if", "grad_x", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "assert", "grad_x", ".", "shape", "[", "1", "]", "==", "1", "\n", "\n", "x_cps", "=", "ctx", ".", "x_cp", "\n", "fixed_matrices", "=", "ctx", ".", "fixed_matrices", "\n", "A", "=", "ctx", ".", "A", "\n", "B", ",", "_", ",", "H", ",", "W", "=", "grad_x", ".", "shape", "\n", "\n", "grad_x_cp", "=", "cp", ".", "asarray", "(", "grad_x", ".", "detach", "(", ")", ")", "\n", "grad_x_cp", "=", "grad_x_cp", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "grad_b_cp", "=", "cg", "(", "A", ".", "transpose", "(", ")", ".", "tocsr", "(", ")", ",", "grad_x_cp", ",", "maxiter", "=", "MAX_ITER", ")", "[", "0", "]", "\n", "grad_b_cp", "=", "grad_b_cp", ".", "reshape", "(", "(", "B", ",", "-", "1", ",", "1", ")", ")", "\n", "\n", "grad_neighbor_affinities", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "0", ",", "B", ")", ":", "\n", "            ", "grad_neighbor_affinity_cp", "=", "cp", ".", "zeros", "(", "(", "5", ",", "A", ".", "shape", "[", "0", "]", "//", "B", ")", ")", "\n", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "(", "'remap_top'", ",", "'remap_bottom'", ",", "'remap_left'", ",", "'remap_right'", ")", ")", ":", "\n", "                ", "grad_neighbor_affinity_cp", "[", "i", "]", "=", "(", "cp", ".", "sparse", ".", "diags", "(", "-", "grad_b_cp", "[", "idx", "]", ".", "squeeze", "(", ")", ")", ".", "dot", "(", "\n", "fixed_matrices", "[", "k", "]", ".", "transpose", "(", ")", ".", "dot", "(", "cp", ".", "sparse", ".", "diags", "(", "x_cps", "[", "idx", "]", ".", "squeeze", "(", ")", ")", ")", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "grad_neighbor_affinity_cp", "[", "4", "]", "=", "(", "cp", ".", "sparse", ".", "diags", "(", "-", "grad_b_cp", "[", "idx", "]", ".", "squeeze", "(", ")", ")", ".", "dot", "(", "\n", "fixed_matrices", "[", "'remap_center'", "]", ".", "dot", "(", "cp", ".", "sparse", ".", "diags", "(", "x_cps", "[", "idx", "]", ".", "squeeze", "(", ")", ")", ")", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "grad_neighbor_affinity", "=", "torch", ".", "as_tensor", "(", "grad_neighbor_affinity_cp", ",", "device", "=", "'cuda'", ")", "\n", "grad_neighbor_affinities", ".", "append", "(", "grad_neighbor_affinity", ".", "reshape", "(", "(", "1", ",", "5", ",", "H", ",", "W", ")", ")", ")", "\n", "\n", "", "grad_neighbor_affinity", "=", "torch", ".", "cat", "(", "grad_neighbor_affinities", ",", "dim", "=", "0", ")", "\n", "return", "grad_neighbor_affinity", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.functional.create_fixed_cupy_sparse_matrices": [[10, 51], ["cupy.sparse.eye", "cupy.zeros", "numpy.ndindex", "cupy.sparse.coo_matrix().tocsr", "cp.sparse.coo_matrix().tocsr.transpose().dot", "numpy.zeros", "numpy.ndindex", "numpy.unravel_index", "cupy.sparse.coo_matrix().tocsr", "cupy.kron", "numpy.ravel_multi_index", "cupy.ones", "cupy.sparse.coo_matrix", "cp.sparse.coo_matrix().tocsr.transpose", "numpy.array", "cupy.sparse.coo_matrix", "cp.sparse.coo_matrix().tocsr.reshape", "numpy.array", "scipy.coo_matrix", "numpy.array", "numpy.array", "numpy.ones", "len"], "function", ["None"], ["def", "create_fixed_cupy_sparse_matrices", "(", "H", ",", "W", ",", "upsampling", ")", ":", "\n", "    ", "h", "=", "H", "//", "upsampling", "\n", "w", "=", "W", "//", "upsampling", "\n", "\n", "# create the mapping matrix from neighbor dense affinity to sparse Laplacian", "\n", "matrices", "=", "{", "}", "\n", "for", "location", "in", "(", "'top'", ",", "'bottom'", ",", "'left'", ",", "'right'", ")", ":", "\n", "        ", "indices", "=", "np", ".", "zeros", "(", "(", "4", ",", "H", "*", "W", "-", "W", ")", ",", "dtype", "=", "int", ")", "\n", "l", "=", "0", "\n", "for", "i", ",", "j", "in", "np", ".", "ndindex", "(", "H", ",", "W", ")", ":", "\n", "            ", "if", "location", "==", "'top'", "and", "i", ">", "0", ":", "\n", "                ", "indices", "[", ":", ",", "l", "]", "=", "np", ".", "array", "(", "[", "i", ",", "j", ",", "i", "-", "1", ",", "j", "]", ",", "dtype", "=", "int", ")", "\n", "", "elif", "location", "==", "'bottom'", "and", "i", "<", "H", "-", "1", ":", "\n", "                ", "indices", "[", ":", ",", "l", "]", "=", "np", ".", "array", "(", "[", "i", ",", "j", ",", "i", "+", "1", ",", "j", "]", ",", "dtype", "=", "int", ")", "\n", "", "elif", "location", "==", "'left'", "and", "j", ">", "0", ":", "\n", "                ", "indices", "[", ":", ",", "l", "]", "=", "np", ".", "array", "(", "[", "i", ",", "j", ",", "i", ",", "j", "-", "1", "]", ",", "dtype", "=", "int", ")", "\n", "", "elif", "location", "==", "'right'", "and", "j", "<", "W", "-", "1", ":", "\n", "                ", "indices", "[", ":", ",", "l", "]", "=", "np", ".", "array", "(", "[", "i", ",", "j", ",", "i", ",", "j", "+", "1", "]", ",", "dtype", "=", "int", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "l", "+=", "1", "\n", "\n", "", "assert", "l", "==", "H", "*", "W", "-", "W", "\n", "indices_a", ",", "indices_b", "=", "np", ".", "unravel_index", "(", "np", ".", "ravel_multi_index", "(", "indices", ",", "(", "H", ",", "W", ",", "H", ",", "W", ")", ")", ",", "(", "H", "*", "W", ",", "H", "*", "W", ")", ")", "\n", "matrices", "[", "f'remap_{location}'", "]", "=", "cp", ".", "sparse", ".", "coo_matrix", "(", "sp", ".", "coo_matrix", "(", "\n", "(", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "indices_a", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "(", "indices_a", ",", "indices_b", ")", ")", ",", "shape", "=", "(", "H", "*", "W", ",", "H", "*", "W", ")", ")", ")", ".", "tocsr", "(", ")", "\n", "\n", "", "matrices", "[", "'remap_center'", "]", "=", "cp", ".", "sparse", ".", "eye", "(", "H", "*", "W", ",", "format", "=", "'csr'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "M", "=", "-", "matrices", "[", "'remap_top'", "]", "-", "matrices", "[", "'remap_bottom'", "]", "-", "matrices", "[", "'remap_left'", "]", "-", "matrices", "[", "'remap_right'", "]", "+", "matrices", "[", "'remap_center'", "]", "\n", "\n", "# create array for downsampling", "\n", "D", "=", "cp", ".", "zeros", "(", "(", "h", "*", "w", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "j", "in", "np", ".", "ndindex", "(", "h", ",", "w", ")", ":", "\n", "        ", "D", "[", "i", "*", "w", "+", "j", ",", "i", ",", "j", "]", "=", "1", "\n", "", "D", "=", "cp", ".", "kron", "(", "D", ",", "cp", ".", "ones", "(", "(", "1", ",", "upsampling", ",", "upsampling", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "/", "(", "upsampling", "**", "2", ")", "# h*w x H x W", "\n", "D", "=", "cp", ".", "sparse", ".", "coo_matrix", "(", "D", ".", "reshape", "(", "(", "h", "*", "w", ",", "H", "*", "W", ")", ")", ")", ".", "tocsr", "(", ")", "\n", "DtD", "=", "D", ".", "transpose", "(", ")", ".", "dot", "(", "D", ")", "\n", "\n", "return", "{", "**", "matrices", ",", "'M'", ":", "M", ",", "'D'", ":", "D", ",", "'DtD'", ":", "DtD", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.model.functional.build_laplacian": [[146, 155], ["neighbor_affinity.reshape.reshape", "cupy.sparse.diags().dot", "cupy.sparse.diags().dot", "cupy.sparse.diags().dot", "cupy.sparse.diags", "cupy.sparse.diags().dot", "cupy.sparse.diags().dot", "cupy.sparse.diags", "cupy.sparse.diags", "cupy.sparse.diags", "cupy.sparse.diags"], "function", ["None"], ["", "", "def", "build_laplacian", "(", "neighbor_affinity", ",", "remap", ")", ":", "\n", "    ", "_", ",", "_", ",", "H", ",", "W", "=", "neighbor_affinity", ".", "shape", "\n", "neighbor_affinity", "=", "neighbor_affinity", ".", "reshape", "(", "5", ",", "H", "*", "W", ")", "\n", "\n", "return", "cp", ".", "sparse", ".", "diags", "(", "neighbor_affinity", "[", "0", "]", ")", ".", "dot", "(", "remap", "[", "'remap_top'", "]", ")", "+", "cp", ".", "sparse", ".", "diags", "(", "neighbor_affinity", "[", "1", "]", ")", ".", "dot", "(", "remap", "[", "'remap_bottom'", "]", ")", "+", "cp", ".", "sparse", ".", "diags", "(", "neighbor_affinity", "[", "2", "]", ")", ".", "dot", "(", "remap", "[", "'remap_left'", "]", ")", "+", "cp", ".", "sparse", ".", "diags", "(", "neighbor_affinity", "[", "3", "]", ")", ".", "dot", "(", "remap", "[", "'remap_right'", "]", ")", "+", "cp", ".", "sparse", ".", "diags", "(", "neighbor_affinity", "[", "4", "]", ")", ".", "dot", "(", "remap", "[", "'remap_center'", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.middlebury.MiddleburyDataset.__init__": [[21, 71], ["pathlib.Path", "ValueError", "print", "enumerate", "middlebury.MiddleburyDataset.data.extend", "middlebury.MiddleburyDataset.deterministic_map.extend", "globals", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ":", "str", ",", "\n", "datasets", "=", "(", "'2005'", ",", "'2006'", ",", "'2014'", ")", ",", "\n", "split", "=", "'train'", ",", "\n", "crop_size", "=", "(", "128", ",", "128", ")", ",", "\n", "do_horizontal_flip", "=", "True", ",", "\n", "max_rotation_angle", "=", "15", ",", "\n", "scale_interpolation", "=", "InterpolationMode", ".", "BILINEAR", ",", "\n", "rotation_interpolation", "=", "InterpolationMode", ".", "BILINEAR", ",", "\n", "image_transform", "=", "None", ",", "\n", "depth_transform", "=", "None", ",", "\n", "use_ambient_images", "=", "False", ",", "\n", "crop_deterministic", "=", "False", ",", "\n", "scaling", "=", "8", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "split", "not", "in", "(", "'train'", ",", "'val'", ",", "'test'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "split", ")", "\n", "\n", "", "if", "max_rotation_angle", ">", "0", "and", "crop_deterministic", ":", "\n", "            ", "max_rotation_angle", "=", "0", "\n", "print", "(", "'Set max_rotation_angle to zero because of deterministic cropping'", ")", "\n", "\n", "", "self", ".", "split", "=", "split", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "do_horizontal_flip", "=", "do_horizontal_flip", "\n", "self", ".", "max_rotation_angle", "=", "max_rotation_angle", "\n", "self", ".", "rotation_interpolation", "=", "rotation_interpolation", "\n", "self", ".", "image_transform", "=", "image_transform", "\n", "self", ".", "depth_transform", "=", "depth_transform", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "crop_deterministic", "=", "crop_deterministic", "\n", "self", ".", "scaling", "=", "scaling", "\n", "\n", "data_dir", "=", "Path", "(", "data_dir", ")", "\n", "\n", "# read in various Middlebury datasets using the respective global load_{name} function", "\n", "for", "name", "in", "(", "'2005'", ",", "'2006'", ",", "'2014'", ")", ":", "\n", "            ", "if", "name", "in", "datasets", ":", "\n", "                ", "self", ".", "data", ".", "extend", "(", "globals", "(", ")", "[", "f'load_{name}'", "]", "(", "data_dir", "/", "name", ",", "1.0", ",", "scale_interpolation", ",", "\n", "use_ambient_images", ",", "split", ")", ")", "\n", "", "", "if", "self", ".", "crop_deterministic", ":", "\n", "            ", "assert", "not", "use_ambient_images", "\n", "# construct deterministic mapping", "\n", "self", ".", "deterministic_map", "=", "[", "]", "\n", "for", "i", ",", "datum", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "                ", "H", ",", "W", "=", "datum", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", ":", "]", "\n", "num_crops_h", ",", "num_crops_w", "=", "H", "//", "self", ".", "crop_size", "[", "0", "]", ",", "W", "//", "self", ".", "crop_size", "[", "1", "]", "\n", "self", ".", "deterministic_map", ".", "extend", "(", "(", "(", "i", ",", "j", ",", "k", ")", "for", "j", "in", "range", "(", "num_crops_h", ")", "for", "k", "in", "range", "(", "num_crops_w", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.middlebury.MiddleburyDataset.__getitem__": [[72, 124], ["random.choice", "utils.downsample().squeeze().unsqueeze", "middlebury.MiddleburyDataset.clone", "middlebury.MiddleburyDataset.clone", "utils.random_horizontal_flip", "utils.random_rotate", "slice", "slice", "utils.random_crop", "middlebury.MiddleburyDataset.image_transform", "middlebury.MiddleburyDataset.depth_transform", "middlebury.MiddleburyDataset.__getitem__", "torch.from_numpy().float", "y_bicubic.reshape.reshape.reshape", "utils.downsample().squeeze", "middlebury.MiddleburyDataset.__getitem__", "torch.isnan", "torch.isnan", "torch.mean", "torch.mean", "torch.from_numpy", "utils.downsample", "utils.bicubic_with_mask", "middlebury.MiddleburyDataset.unsqueeze", "utils.downsample().squeeze().unsqueeze.squeeze().numpy", "mask_lr.squeeze().numpy", "utils.downsample().squeeze().unsqueeze.squeeze", "mask_lr.squeeze"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_horizontal_flip", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_rotate", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_crop", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.diml.DIMLDataset.__getitem__", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.diml.DIMLDataset.__getitem__", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.downsample", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.bicubic_with_mask"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ",", "called", "=", "0", ")", ":", "\n", "        ", "if", "called", ">=", "32", ":", "# it has been called 32 times, enough of that", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "if", "self", ".", "crop_deterministic", ":", "\n", "            ", "im_index", ",", "crop_index_h", ",", "crop_index_w", "=", "self", ".", "deterministic_map", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "im_index", "=", "index", "\n", "\n", "", "image", ",", "depth_map", "=", "random", ".", "choice", "(", "self", ".", "data", "[", "im_index", "]", ")", "\n", "image", ",", "depth_map", "=", "image", ".", "clone", "(", ")", ",", "depth_map", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "do_horizontal_flip", "and", "not", "self", ".", "crop_deterministic", ":", "\n", "            ", "image", ",", "depth_map", "=", "random_horizontal_flip", "(", "(", "image", ",", "depth_map", ")", ")", "\n", "\n", "", "if", "self", ".", "max_rotation_angle", ">", "0", "and", "not", "self", ".", "crop_deterministic", ":", "\n", "            ", "image", ",", "depth_map", "=", "random_rotate", "(", "(", "image", ",", "depth_map", ")", ",", "self", ".", "max_rotation_angle", ",", "self", ".", "rotation_interpolation", ")", "\n", "# passing fill=np.nan to rotate sets all pixels to nan, so set it here explicitly", "\n", "depth_map", "[", "depth_map", "==", "0.", "]", "=", "np", ".", "nan", "\n", "\n", "", "if", "self", ".", "crop_deterministic", ":", "\n", "            ", "slice_h", "=", "slice", "(", "crop_index_h", "*", "self", ".", "crop_size", "[", "0", "]", ",", "(", "crop_index_h", "+", "1", ")", "*", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "slice_w", "=", "slice", "(", "crop_index_w", "*", "self", ".", "crop_size", "[", "1", "]", ",", "(", "crop_index_w", "+", "1", ")", "*", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "image", ",", "depth_map", "=", "image", "[", ":", ",", "slice_h", ",", "slice_w", "]", ",", "depth_map", "[", ":", ",", "slice_h", ",", "slice_w", "]", "\n", "", "else", ":", "\n", "            ", "image", ",", "depth_map", "=", "random_crop", "(", "(", "image", ",", "depth_map", ")", ",", "self", ".", "crop_size", ")", "\n", "\n", "", "if", "self", ".", "image_transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "image_transform", "(", "image", ")", "\n", "", "if", "self", ".", "depth_transform", "is", "not", "None", ":", "\n", "            ", "depth_map", "=", "self", ".", "depth_transform", "(", "depth_map", ")", "\n", "\n", "", "source", "=", "downsample", "(", "depth_map", ".", "unsqueeze", "(", "0", ")", ",", "self", ".", "scaling", ")", ".", "squeeze", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "mask_hr", "=", "(", "~", "torch", ".", "isnan", "(", "depth_map", ")", ")", ".", "float", "(", ")", "\n", "mask_lr", "=", "(", "~", "torch", ".", "isnan", "(", "source", ")", ")", ".", "float", "(", ")", "\n", "\n", "depth_map", "[", "mask_hr", "==", "0.", "]", "=", "0.", "\n", "source", "[", "mask_lr", "==", "0.", "]", "=", "0.", "\n", "\n", "if", "self", ".", "split", "==", "'train'", "and", "(", "torch", ".", "mean", "(", "mask_lr", ")", "<", "0.9", "or", "torch", ".", "mean", "(", "mask_hr", ")", "<", "0.8", ")", ":", "\n", "# omit patch due to too many depth holes, try another one", "\n", "            ", "return", "self", ".", "__getitem__", "(", "index", ",", "called", "=", "called", "+", "1", ")", "\n", "\n", "", "try", ":", "\n", "            ", "y_bicubic", "=", "torch", ".", "from_numpy", "(", "bicubic_with_mask", "(", "\n", "source", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "mask_lr", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "scaling", ")", ")", ".", "float", "(", ")", "\n", "y_bicubic", "=", "y_bicubic", ".", "reshape", "(", "(", "1", ",", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ")", "\n", "return", "{", "'guide'", ":", "image", ",", "'y'", ":", "depth_map", ",", "'source'", ":", "source", ",", "'mask_hr'", ":", "mask_hr", ",", "'mask_lr'", ":", "mask_lr", ",", "\n", "'im_idx'", ":", "im_index", ",", "'y_bicubic'", ":", "y_bicubic", "}", "\n", "", "except", ":", "\n", "            ", "return", "self", ".", "__getitem__", "(", "index", ",", "called", "=", "called", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.middlebury.MiddleburyDataset.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "deterministic_map", "if", "self", ".", "crop_deterministic", "else", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.middlebury.load_2014": [[129, 156], ["sorted", "data_dir.iterdir", "scene.name.endswith", "utils.read_calibration", "scene.is_dir", "torchvision.transforms.Resize", "torchvision.transforms.Resize.", "torchvision.transforms.Compose", "torch.from_numpy", "data.append", "data.append", "int", "int", "utils.create_depth_from_pfm", "torchvision.transforms.ToTensor", "int", "int", "torchvision.transforms.Compose.", "scene.glob", "torchvision.transforms.Compose.", "PIL.Image.open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.read_calibration", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.create_depth_from_pfm"], ["", "", "def", "load_2014", "(", "data_dir", ":", "Path", ",", "scale", ",", "scale_interpolation", ",", "use_ambient_images", ",", "split", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "for", "scene", "in", "sorted", "(", "data_dir", ".", "iterdir", "(", ")", ")", ":", "\n", "# ignore scenes with imperfect rectification, these are only included in the 2014 dataset anyway", "\n", "        ", "if", "not", "scene", ".", "is_dir", "(", ")", "or", "scene", ".", "name", ".", "endswith", "(", "'-imperfect'", ")", ":", "\n", "            ", "continue", "\n", "\n", "# make train val test split", "\n", "", "last_dir", "=", "scene", ".", "parts", "[", "-", "1", "]", "\n", "\n", "if", "(", "split", "==", "'test'", "and", "last_dir", "in", "TEST_SET_2014", ")", "or", "(", "split", "==", "'val'", "and", "last_dir", "in", "VAL_SET_2014", ")", "or", "(", "split", "==", "'train'", "and", "(", "last_dir", "not", "in", "TEST_SET_2014", ")", "and", "(", "last_dir", "not", "in", "VAL_SET_2014", ")", ")", ":", "\n", "            ", "calibration", "=", "read_calibration", "(", "scene", "/", "'calib.txt'", ")", "\n", "\n", "# add left and right view, as well as corresponding depth maps", "\n", "for", "view", "in", "(", "0", ",", "1", ")", ":", "\n", "                ", "resize", "=", "Resize", "(", "(", "int", "(", "int", "(", "calibration", "[", "'height'", "]", ")", "*", "scale", ")", ",", "int", "(", "int", "(", "calibration", "[", "'width'", "]", ")", "*", "scale", ")", ")", ",", "\n", "scale_interpolation", ")", "\n", "depth_map", "=", "resize", "(", "torch", ".", "from_numpy", "(", "create_depth_from_pfm", "(", "scene", "/", "f'disp{view}.pfm'", ",", "calibration", ")", ")", ")", "\n", "transform", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "resize", "]", ")", "\n", "if", "use_ambient_images", ":", "\n", "                    ", "data", ".", "append", "(", "\n", "[", "(", "transform", "(", "Image", ".", "open", "(", "path", ")", ")", ",", "depth_map", ")", "for", "path", "in", "scene", ".", "glob", "(", "f'ambient/L*/im{view}*.png'", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "data", ".", "append", "(", "[", "(", "transform", "(", "Image", ".", "open", "(", "scene", "/", "f'im{view}.png'", ")", ")", ",", "depth_map", ")", "]", ")", "\n", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.middlebury.load_2006": [[158, 195], ["sorted", "data_dir.iterdir", "scene.is_dir", "torch.from_numpy().float().unsqueeze", "torchvision.transforms.Resize", "torchvision.transforms.Resize.", "torchvision.transforms.Compose", "open", "int", "data.append", "data.append", "torch.from_numpy().float", "fh.read().strip", "int", "int", "torchvision.transforms.ToTensor", "torch.from_numpy", "fh.read", "torchvision.transforms.Compose.", "scene.glob", "torchvision.transforms.Compose.", "numpy.array", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "function", ["None"], ["", "def", "load_2006", "(", "data_dir", ":", "Path", ",", "scale", ",", "scale_interpolation", ",", "use_ambient_images", ",", "split", ")", ":", "\n", "    ", "f", "=", "3740", "# px", "\n", "baseline", "=", "160", "# mm", "\n", "\n", "data", "=", "[", "]", "\n", "for", "scene", "in", "sorted", "(", "data_dir", ".", "iterdir", "(", ")", ")", ":", "\n", "        ", "if", "not", "scene", ".", "is_dir", "(", ")", ":", "\n", "            ", "continue", "\n", "\n", "# make train val test split", "\n", "", "last_dir", "=", "scene", ".", "parts", "[", "-", "1", "]", "\n", "if", "(", "split", "==", "'test'", "and", "last_dir", "in", "TEST_SET_2005_2006", ")", "or", "(", "\n", "split", "==", "'val'", "and", "last_dir", "in", "VAL_SET_2005_2006", ")", "or", "(", "\n", "split", "==", "'train'", "and", "(", "last_dir", "not", "in", "TEST_SET_2005_2006", ")", "and", "(", "last_dir", "not", "in", "VAL_SET_2005_2006", ")", ")", ":", "\n", "\n", "# add left and right view, as well as corresponding depth maps", "\n", "            ", "for", "view", "in", "(", "1", ",", "5", ")", ":", "\n", "                ", "disparities", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "scene", "/", "f'disp{view}.png'", ")", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# zero disparities are to be interpreted as inf, set them to nan so they result in nan depth", "\n", "disparities", "[", "disparities", "==", "0.", "]", "=", "np", ".", "nan", "\n", "with", "open", "(", "scene", "/", "'dmin.txt'", ")", "as", "fh", ":", "\n", "                    ", "dmin", "=", "int", "(", "fh", ".", "read", "(", ")", ".", "strip", "(", ")", ")", "\n", "# add dmin to disparities because disparity maps and images have been cropped to the joint field of view", "\n", "", "disparities", "+=", "dmin", "\n", "\n", "depth_map", "=", "baseline", "*", "f", "/", "disparities", "\n", "resize", "=", "Resize", "(", "(", "int", "(", "depth_map", ".", "shape", "[", "1", "]", "*", "scale", ")", ",", "int", "(", "depth_map", ".", "shape", "[", "2", "]", "*", "scale", ")", ")", ",", "scale_interpolation", ")", "\n", "depth_map", "=", "resize", "(", "depth_map", ")", "\n", "transform", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "resize", "]", ")", "\n", "if", "use_ambient_images", ":", "\n", "                    ", "data", ".", "append", "(", "\n", "[", "(", "transform", "(", "Image", ".", "open", "(", "path", ")", ")", ",", "depth_map", ")", "for", "path", "in", "\n", "scene", ".", "glob", "(", "f'Illum*/Exp*/view{view}.png'", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "data", ".", "append", "(", "[", "(", "transform", "(", "Image", ".", "open", "(", "scene", "/", "f'view{view}.png'", ")", ")", ",", "depth_map", ")", "]", ")", "\n", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.middlebury.load_2005": [[198, 200], ["middlebury.load_2006"], "function", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.middlebury.load_2006"], ["", "def", "load_2005", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "load_2006", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.nyu_v2.NYUv2Dataset.__init__": [[14, 69], ["h5py.File", "open", "numpy.array", "ValueError", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.floor", "pathlib.Path", "ValueError", "print", "pathlib.Path", "json.load", "min", "numpy.arctan", "numpy.arctan", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ":", "str", ",", "\n", "crop_size", "=", "(", "128", ",", "128", ")", ",", "\n", "do_horizontal_flip", "=", "True", ",", "\n", "max_rotation_angle", ":", "int", "=", "15", ",", "\n", "rotation_interpolation", "=", "InterpolationMode", ".", "BILINEAR", ",", "\n", "image_transform", "=", "None", ",", "\n", "depth_transform", "=", "None", ",", "\n", "in_memory", "=", "True", ",", "\n", "split", "=", "'train'", ",", "\n", "crop_valid", "=", "False", ",", "\n", "crop_deterministic", "=", "False", ",", "\n", "scaling", "=", "8", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "do_horizontal_flip", "=", "do_horizontal_flip", "\n", "self", ".", "max_rotation_angle", "=", "max_rotation_angle", "\n", "self", ".", "rotation_interpolation", "=", "rotation_interpolation", "\n", "self", ".", "image_transform", "=", "image_transform", "\n", "self", ".", "depth_transform", "=", "depth_transform", "\n", "self", ".", "crop_valid", "=", "crop_valid", "\n", "self", ".", "crop_deterministic", "=", "crop_deterministic", "\n", "self", ".", "scaling", "=", "scaling", "\n", "\n", "import", "h5py", "\n", "file", "=", "h5py", ".", "File", "(", "Path", "(", "data_dir", ")", "/", "'nyu_depth_v2_labeled.mat'", ")", "\n", "\n", "with", "open", "(", "Path", "(", "data_dir", ")", "/", "'split_idc.json'", ")", "as", "fh", ":", "\n", "            ", "self", ".", "split_idc", "=", "np", ".", "array", "(", "json", ".", "load", "(", "fh", ")", "[", "split", "]", ")", "\n", "\n", "", "if", "max_rotation_angle", ">", "0", "and", "crop_deterministic", ":", "\n", "            ", "raise", "ValueError", "(", "'Max rotation angle has to be zero when cropping deterministically'", ")", "\n", "\n", "", "self", ".", "images", "=", "np", ".", "array", "(", "file", "[", "'images'", "]", ")", "if", "in_memory", "else", "file", "[", "'images'", "]", "\n", "self", ".", "depth_maps", "=", "np", ".", "array", "(", "file", "[", "'depths'", "]", ")", "if", "in_memory", "else", "file", "[", "'depths'", "]", "\n", "self", ".", "instances", "=", "np", ".", "array", "(", "file", "[", "'instances'", "]", ")", "if", "in_memory", "else", "file", "[", "'instances'", "]", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "file", "[", "'labels'", "]", ")", "if", "in_memory", "else", "file", "[", "'labels'", "]", "\n", "\n", "self", ".", "W", ",", "self", ".", "H", "=", "self", ".", "images", ".", "shape", "[", "2", ":", "]", "\n", "\n", "if", "self", ".", "crop_valid", ":", "\n", "            ", "if", "self", ".", "max_rotation_angle", ">", "45", ":", "\n", "                ", "raise", "ValueError", "(", "'When crop_valid=True, only rotation angles up to 45\u00b0 are supported for now'", ")", "\n", "\n", "# make sure that max rotation angle is valid, else decrease", "\n", "", "max_angle", "=", "np", ".", "floor", "(", "min", "(", "\n", "2", "*", "np", ".", "arctan", "(", "(", "np", ".", "sqrt", "(", "-", "(", "crop_size", "[", "0", "]", "**", "2", ")", "+", "self", ".", "H", "**", "2", "+", "self", ".", "W", "**", "2", ")", "-", "self", ".", "W", ")", "/", "(", "crop_size", "[", "0", "]", "+", "self", ".", "H", ")", ")", ",", "\n", "2", "*", "np", ".", "arctan", "(", "(", "np", ".", "sqrt", "(", "-", "(", "crop_size", "[", "1", "]", "**", "2", ")", "+", "self", ".", "W", "**", "2", "+", "self", ".", "H", "**", "2", ")", "-", "self", ".", "H", ")", "/", "(", "crop_size", "[", "1", "]", "+", "self", ".", "W", ")", ")", "\n", ")", "*", "(", "180.", "/", "np", ".", "pi", ")", ")", "\n", "\n", "if", "self", ".", "max_rotation_angle", ">", "max_angle", ":", "\n", "                ", "print", "(", "f'Max rotation angle too large for given image size and crop size, decreased to {max_angle}'", ")", "\n", "self", ".", "max_rotation_angle", "=", "max_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.nyu_v2.NYUv2Dataset.__getitem__": [[70, 123], ["torch.from_numpy().T.unsqueeze", "torch.from_numpy().T.unsqueeze", "utils.downsample().squeeze().unsqueeze", "torch.from_numpy().float", "y_bicubic.reshape.reshape.reshape", "torch.from_numpy().transpose", "torch.from_numpy().T.unsqueeze", "image.clone", "depth_map.clone", "torch.from_numpy().T.unsqueeze.clone", "torch.from_numpy().T.unsqueeze.clone", "utils.random_horizontal_flip", "utils.random_rotate", "slice", "slice", "utils.random_crop", "nyu_v2.NYUv2Dataset.image_transform", "nyu_v2.NYUv2Dataset.depth_transform", "utils.downsample().squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.isnan", "torch.isnan", "utils.bicubic_with_mask", "nyu_v2.NYUv2Dataset.images[].astype", "torch.from_numpy", "nyu_v2.NYUv2Dataset.instances[].astype", "nyu_v2.NYUv2Dataset.labels[].astype", "utils.downsample", "utils.downsample().squeeze().unsqueeze.squeeze().numpy", "mask_lr.squeeze().numpy", "nyu_v2.NYUv2Dataset.depth_maps[].astype", "outputs[].unsqueeze", "utils.downsample().squeeze().unsqueeze.squeeze", "mask_lr.squeeze"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_horizontal_flip", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_rotate", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_crop", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.bicubic_with_mask", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.downsample"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "crop_deterministic", ":", "\n", "            ", "num_crops_h", ",", "num_crops_w", "=", "self", ".", "H", "//", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "W", "//", "self", ".", "crop_size", "[", "1", "]", "\n", "im_index", "=", "self", ".", "split_idc", "[", "index", "//", "(", "num_crops_h", "*", "num_crops_w", ")", "]", "\n", "", "else", ":", "\n", "            ", "im_index", "=", "self", ".", "split_idc", "[", "index", "]", "\n", "\n", "", "image", "=", "torch", ".", "from_numpy", "(", "self", ".", "images", "[", "im_index", "]", ".", "astype", "(", "'float32'", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "/", "255.", "\n", "depth_map", "=", "torch", ".", "from_numpy", "(", "self", ".", "depth_maps", "[", "im_index", "]", ".", "astype", "(", "'float32'", ")", ")", ".", "T", ".", "unsqueeze", "(", "0", ")", "*", "1000", "\n", "instances", "=", "torch", ".", "from_numpy", "(", "self", ".", "instances", "[", "im_index", "]", ".", "astype", "(", "'int16'", ")", ")", ".", "T", ".", "unsqueeze", "(", "0", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "self", ".", "labels", "[", "im_index", "]", ".", "astype", "(", "'int16'", ")", ")", ".", "T", ".", "unsqueeze", "(", "0", ")", "\n", "image", ",", "depth_map", ",", "instances", ",", "labels", "=", "image", ".", "clone", "(", ")", ",", "depth_map", ".", "clone", "(", ")", ",", "instances", ".", "clone", "(", ")", ",", "labels", ".", "clone", "(", ")", "\n", "\n", "outputs", "=", "[", "image", ",", "depth_map", ",", "instances", ",", "labels", "]", "\n", "\n", "if", "self", ".", "do_horizontal_flip", "and", "not", "self", ".", "crop_deterministic", ":", "\n", "            ", "outputs", "=", "random_horizontal_flip", "(", "outputs", ")", "\n", "\n", "", "if", "self", ".", "max_rotation_angle", ">", "0", "and", "not", "self", ".", "crop_deterministic", ":", "\n", "            ", "outputs", "=", "random_rotate", "(", "outputs", ",", "self", ".", "max_rotation_angle", ",", "self", ".", "rotation_interpolation", ",", "\n", "crop_valid", "=", "self", ".", "crop_valid", ")", "\n", "# passing fill=np.nan to rotate sets all pixels to nan, so set it here explicitly", "\n", "outputs", "[", "1", "]", "[", "outputs", "[", "1", "]", "==", "0.", "]", "=", "np", ".", "nan", "\n", "\n", "", "if", "self", ".", "crop_deterministic", ":", "\n", "            ", "crop_index", "=", "index", "%", "(", "num_crops_h", "*", "num_crops_w", ")", "\n", "crop_index_h", ",", "crop_index_w", "=", "crop_index", "//", "num_crops_w", ",", "crop_index", "%", "num_crops_w", "\n", "slice_h", "=", "slice", "(", "crop_index_h", "*", "self", ".", "crop_size", "[", "0", "]", ",", "(", "crop_index_h", "+", "1", ")", "*", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "slice_w", "=", "slice", "(", "crop_index_w", "*", "self", ".", "crop_size", "[", "1", "]", ",", "(", "crop_index_w", "+", "1", ")", "*", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "outputs", "=", "[", "o", "[", ":", ",", "slice_h", ",", "slice_w", "]", "for", "o", "in", "outputs", "]", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "random_crop", "(", "outputs", ",", "self", ".", "crop_size", ")", "\n", "\n", "# apply user transforms", "\n", "", "if", "self", ".", "image_transform", "is", "not", "None", ":", "\n", "            ", "outputs", "[", "0", "]", "=", "self", ".", "image_transform", "(", "outputs", "[", "0", "]", ")", "\n", "", "if", "self", ".", "depth_transform", "is", "not", "None", ":", "\n", "            ", "outputs", "[", "1", "]", "=", "self", ".", "depth_transform", "(", "outputs", "[", "1", "]", ")", "\n", "\n", "", "source", "=", "downsample", "(", "outputs", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", ",", "self", ".", "scaling", ")", ".", "squeeze", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "mask_hr", "=", "(", "~", "torch", ".", "isnan", "(", "outputs", "[", "1", "]", ")", ")", ".", "float", "(", ")", "\n", "mask_lr", "=", "(", "~", "torch", ".", "isnan", "(", "source", ")", ")", ".", "float", "(", ")", "\n", "\n", "outputs", "[", "1", "]", "[", "mask_hr", "==", "0.", "]", "=", "0.", "\n", "source", "[", "mask_lr", "==", "0.", "]", "=", "0.", "\n", "\n", "y_bicubic", "=", "torch", ".", "from_numpy", "(", "\n", "bicubic_with_mask", "(", "source", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "mask_lr", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "scaling", ")", ")", ".", "float", "(", ")", "\n", "y_bicubic", "=", "y_bicubic", ".", "reshape", "(", "(", "1", ",", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ")", "\n", "\n", "return", "{", "'guide'", ":", "outputs", "[", "0", "]", ",", "'y'", ":", "outputs", "[", "1", "]", ",", "'source'", ":", "source", ",", "'mask_hr'", ":", "mask_hr", ",", "'mask_lr'", ":", "mask_lr", ",", "\n", "'instances'", ":", "outputs", "[", "2", "]", ",", "'labels'", ":", "outputs", "[", "3", "]", ",", "'y_bicubic'", ":", "y_bicubic", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.nyu_v2.NYUv2Dataset.__len__": [[124, 128], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "crop_deterministic", ":", "\n", "            ", "return", "len", "(", "self", ".", "split_idc", ")", "*", "(", "self", ".", "H", "//", "self", ".", "crop_size", "[", "0", "]", ")", "*", "(", "self", ".", "W", "//", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "", "return", "len", "(", "self", ".", "split_idc", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.diml.DIMLDataset.__init__": [[15, 75], ["pathlib.Path", "numpy.load", "numpy.load", "ValueError", "ValueError", "str", "str", "len", "len", "int", "int", "numpy.floor", "ValueError", "print", "min", "numpy.arctan", "numpy.arctan", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ":", "str", ",", "\n", "resolution", "=", "'HR'", ",", "\n", "scale", "=", "1.0", ",", "\n", "crop_size", "=", "(", "128", ",", "128", ")", ",", "\n", "do_horizontal_flip", "=", "True", ",", "\n", "max_rotation_angle", ":", "int", "=", "15", ",", "\n", "scale_interpolation", "=", "InterpolationMode", ".", "BILINEAR", ",", "\n", "rotation_interpolation", "=", "InterpolationMode", ".", "BILINEAR", ",", "\n", "image_transform", "=", "None", ",", "\n", "depth_transform", "=", "None", ",", "\n", "in_memory", "=", "True", ",", "\n", "split", "=", "'train'", ",", "\n", "crop_valid", "=", "False", ",", "\n", "crop_deterministic", "=", "False", ",", "\n", "scaling", "=", "8", "\n", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "do_horizontal_flip", "=", "do_horizontal_flip", "\n", "self", ".", "max_rotation_angle", "=", "max_rotation_angle", "\n", "self", ".", "scale_interpolation", "=", "scale_interpolation", "\n", "self", ".", "rotation_interpolation", "=", "rotation_interpolation", "\n", "self", ".", "image_transform", "=", "image_transform", "\n", "self", ".", "depth_transform", "=", "depth_transform", "\n", "self", ".", "crop_valid", "=", "crop_valid", "\n", "self", ".", "crop_deterministic", "=", "crop_deterministic", "\n", "self", ".", "scaling", "=", "scaling", "\n", "data_dir", "=", "Path", "(", "data_dir", ")", "\n", "\n", "if", "max_rotation_angle", ">", "0", "and", "crop_deterministic", ":", "\n", "            ", "raise", "ValueError", "(", "'Max rotation angle has to be zero when cropping deterministically'", ")", "\n", "\n", "", "if", "split", "not", "in", "(", "'train'", ",", "'val'", ",", "'test'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "split", ")", "\n", "\n", "", "mmap_mode", "=", "None", "if", "in_memory", "else", "'c'", "\n", "\n", "self", ".", "images", "=", "np", ".", "load", "(", "str", "(", "data_dir", "/", "f'npy/images_{split}_{resolution}.npy'", ")", ",", "mmap_mode", ")", "\n", "self", ".", "depth_maps", "=", "np", ".", "load", "(", "str", "(", "data_dir", "/", "f'npy/depth_{split}_{resolution}.npy'", ")", ",", "mmap_mode", ")", "\n", "assert", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "depth_maps", ")", "\n", "\n", "self", ".", "H", ",", "self", ".", "W", "=", "int", "(", "DIML_BASE_SIZE", "[", "0", "]", "*", "self", ".", "scale", ")", ",", "int", "(", "DIML_BASE_SIZE", "[", "1", "]", "*", "self", ".", "scale", ")", "\n", "\n", "if", "self", ".", "crop_valid", ":", "\n", "            ", "if", "self", ".", "max_rotation_angle", ">", "45", ":", "\n", "                ", "raise", "ValueError", "(", "'When crop_valid=True, only rotation angles up to 45\u00b0 are supported for now'", ")", "\n", "\n", "# make sure that max rotation angle is valid, else decrease", "\n", "", "max_angle", "=", "np", ".", "floor", "(", "min", "(", "\n", "2", "*", "np", ".", "arctan", "\n", "(", "(", "np", ".", "sqrt", "(", "-", "(", "crop_size", "[", "0", "]", "**", "2", ")", "+", "self", ".", "H", "**", "2", "+", "self", ".", "W", "**", "2", ")", "-", "self", ".", "W", ")", "/", "(", "crop_size", "[", "0", "]", "+", "self", ".", "H", ")", ")", ",", "\n", "2", "*", "np", ".", "arctan", "\n", "(", "(", "np", ".", "sqrt", "(", "-", "(", "crop_size", "[", "1", "]", "**", "2", ")", "+", "self", ".", "W", "**", "2", "+", "self", ".", "H", "**", "2", ")", "-", "self", ".", "H", ")", "/", "(", "crop_size", "[", "1", "]", "+", "self", ".", "W", ")", ")", "\n", ")", "*", "(", "180.", "/", "np", ".", "pi", ")", ")", "\n", "\n", "if", "self", ".", "max_rotation_angle", ">", "max_angle", ":", "\n", "                ", "print", "(", "f'max rotation angle too large for given image size and crop size, decreased to {max_angle}'", ")", "\n", "self", ".", "max_rotation_angle", "=", "max_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.diml.DIMLDataset.__getitem__": [[76, 126], ["torch.from_numpy().unsqueeze", "torchvision.transforms.Resize", "utils.downsample().squeeze().unsqueeze", "torch.from_numpy().float", "y_bicubic.reshape.reshape.reshape", "torch.from_numpy", "torchvision.transforms.Resize.", "torchvision.transforms.Resize.", "utils.random_horizontal_flip", "utils.random_rotate", "slice", "slice", "utils.random_crop", "diml.DIMLDataset.image_transform", "diml.DIMLDataset.depth_transform", "diml.DIMLDataset.images[].astype", "torch.from_numpy", "utils.downsample().squeeze", "torch.from_numpy", "diml.DIMLDataset.depth_maps[].astype", "torch.isnan", "torch.isnan", "utils.bicubic_with_mask", "utils.downsample", "utils.downsample().squeeze().unsqueeze.squeeze().numpy", "mask_lr.squeeze().numpy", "diml.DIMLDataset.unsqueeze", "utils.downsample().squeeze().unsqueeze.squeeze", "mask_lr.squeeze"], "methods", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_horizontal_flip", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_rotate", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_crop", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.bicubic_with_mask", "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.downsample"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "crop_deterministic", ":", "\n", "            ", "num_crops_h", ",", "num_crops_w", "=", "self", ".", "H", "//", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "W", "//", "self", ".", "crop_size", "[", "1", "]", "\n", "im_index", "=", "index", "//", "(", "num_crops_h", "*", "num_crops_w", ")", "\n", "", "else", ":", "\n", "            ", "im_index", "=", "index", "\n", "\n", "", "image", "=", "torch", ".", "from_numpy", "(", "self", ".", "images", "[", "im_index", "]", ".", "astype", "(", "'float32'", ")", ")", "/", "255.", "\n", "depth_map", "=", "torch", ".", "from_numpy", "(", "self", ".", "depth_maps", "[", "im_index", "]", ".", "astype", "(", "'float32'", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "resize", "=", "Resize", "(", "(", "self", ".", "H", ",", "self", ".", "W", ")", ",", "self", ".", "scale_interpolation", ")", "\n", "image", ",", "depth_map", "=", "resize", "(", "image", ")", ",", "resize", "(", "depth_map", ")", "\n", "\n", "if", "self", ".", "do_horizontal_flip", "and", "not", "self", ".", "crop_deterministic", ":", "\n", "            ", "image", ",", "depth_map", "=", "random_horizontal_flip", "(", "(", "image", ",", "depth_map", ")", ")", "\n", "\n", "", "if", "self", ".", "max_rotation_angle", ">", "0", "and", "not", "self", ".", "crop_deterministic", ":", "\n", "            ", "image", ",", "depth_map", "=", "random_rotate", "(", "(", "image", ",", "depth_map", ")", ",", "self", ".", "max_rotation_angle", ",", "self", ".", "rotation_interpolation", ",", "\n", "crop_valid", "=", "self", ".", "crop_valid", ")", "\n", "# passing fill=np.nan to rotate sets all pixels to nan, so set it here explicitly", "\n", "depth_map", "[", "depth_map", "==", "0.", "]", "=", "np", ".", "nan", "\n", "\n", "", "if", "self", ".", "crop_deterministic", ":", "\n", "            ", "crop_index", "=", "index", "%", "(", "num_crops_h", "*", "num_crops_w", ")", "\n", "crop_index_h", ",", "crop_index_w", "=", "crop_index", "//", "num_crops_w", ",", "crop_index", "%", "num_crops_w", "\n", "slice_h", "=", "slice", "(", "crop_index_h", "*", "self", ".", "crop_size", "[", "0", "]", ",", "(", "crop_index_h", "+", "1", ")", "*", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "slice_w", "=", "slice", "(", "crop_index_w", "*", "self", ".", "crop_size", "[", "1", "]", ",", "(", "crop_index_w", "+", "1", ")", "*", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "image", ",", "depth_map", "=", "image", "[", ":", ",", "slice_h", ",", "slice_w", "]", ",", "depth_map", "[", ":", ",", "slice_h", ",", "slice_w", "]", "\n", "", "else", ":", "\n", "            ", "image", ",", "depth_map", "=", "random_crop", "(", "(", "image", ",", "depth_map", ")", ",", "self", ".", "crop_size", ")", "\n", "\n", "# apply user transforms", "\n", "", "if", "self", ".", "image_transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "image_transform", "(", "image", ")", "\n", "", "if", "self", ".", "depth_transform", "is", "not", "None", ":", "\n", "            ", "depth_map", "=", "self", ".", "depth_transform", "(", "depth_map", ")", "\n", "\n", "", "source", "=", "downsample", "(", "depth_map", ".", "unsqueeze", "(", "0", ")", ",", "self", ".", "scaling", ")", ".", "squeeze", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "mask_hr", "=", "(", "~", "torch", ".", "isnan", "(", "depth_map", ")", ")", ".", "float", "(", ")", "\n", "mask_lr", "=", "(", "~", "torch", ".", "isnan", "(", "source", ")", ")", ".", "float", "(", ")", "\n", "\n", "depth_map", "[", "mask_hr", "==", "0.", "]", "=", "0.", "\n", "source", "[", "mask_lr", "==", "0.", "]", "=", "0.", "\n", "\n", "y_bicubic", "=", "torch", ".", "from_numpy", "(", "\n", "bicubic_with_mask", "(", "source", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "mask_lr", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "scaling", ")", ")", ".", "float", "(", ")", "\n", "y_bicubic", "=", "y_bicubic", ".", "reshape", "(", "(", "1", ",", "self", ".", "crop_size", "[", "0", "]", ",", "self", ".", "crop_size", "[", "1", "]", ")", ")", "\n", "\n", "return", "{", "'guide'", ":", "image", ",", "'y'", ":", "depth_map", ",", "'source'", ":", "source", ",", "'mask_hr'", ":", "mask_hr", ",", "'mask_lr'", ":", "mask_lr", ",", "\n", "'y_bicubic'", ":", "y_bicubic", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.diml.DIMLDataset.__len__": [[127, 131], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "crop_deterministic", ":", "\n", "            ", "return", "len", "(", "self", ".", "depth_maps", ")", "*", "(", "self", ".", "H", "//", "self", ".", "crop_size", "[", "0", "]", ")", "*", "(", "self", ".", "W", "//", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "", "return", "len", "(", "self", ".", "depth_maps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.downsample": [[18, 36], ["torch.is_tensor", "ValueError", "skimage.measure.block_reduce.detach().cpu().numpy", "warnings.catch_warnings", "warnings.filterwarnings", "skimage.measure.block_reduce", "torch.from_numpy().to", "skimage.measure.block_reduce.detach().cpu", "torch.from_numpy", "skimage.measure.block_reduce.detach"], "function", ["None"], ["                    ", "new_val", ".", "append", "(", "e", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_val", ".", "append", "(", "val", ")", "\n", "", "", "sampleout", "[", "key", "]", "=", "new_val", "\n", "", "else", ":", "\n", "            ", "sampleout", "[", "key", "]", "=", "val", "\n", "", "", "return", "sampleout", "\n", "\n", "\n", "", "def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "\n", "", "def", "new_log", "(", "folder_path", ",", "args", "=", "None", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "folder_path", ",", "exist_ok", "=", "True", ")", "\n", "n_exp", "=", "len", "(", "os", ".", "listdir", "(", "folder_path", ")", ")", "\n", "experiment_folder", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'experiment_{n_exp}'", ")", "\n"]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.bicubic_with_mask": [[38, 70], ["source.flatten", "mask.flatten", "numpy.arange", "numpy.arange", "numpy.meshgrid", "x_g.flatten", "y_g.flatten", "numpy.concatenate", "numpy.linspace", "numpy.linspace", "numpy.meshgrid", "numpy.concatenate", "scipy.interpolate.griddata", "scipy.interpolate.griddata", "depth_HR.reshape.reshape", "x_HR_g.flatten", "y_HR_g.flatten", "numpy.isnan", "numpy.isnan"], "function", ["None"], ["\n", "if", "args", "is", "not", "None", ":", "\n", "        ", "args_dict", "=", "args", ".", "__dict__", "\n", "write_params", "(", "args_dict", ",", "os", ".", "path", ".", "join", "(", "experiment_folder", ",", "'args'", "+", "'.csv'", ")", ")", "\n", "\n", "", "return", "experiment_folder", "\n", "\n", "\n", "", "def", "write_params", "(", "params", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "fh", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "fh", ")", "\n", "writer", ".", "writerow", "(", "[", "'key'", ",", "'value'", "]", ")", "\n", "for", "data", "in", "params", ".", "items", "(", ")", ":", "\n", "            ", "writer", ".", "writerow", "(", "[", "el", "for", "el", "in", "data", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_horizontal_flip": [[72, 76], ["random.random", "image.flip"], "function", ["None"], []], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_rotate": [[78, 87], ["torchvision.transforms.RandomRotation.get_params", "numpy.floor().astype", "torchvision.rotate", "torchvision.center_crop", "torchvision.rotate", "numpy.floor", "numpy.asarray", "numpy.sin", "numpy.asarray", "numpy.abs"], "function", ["None"], []], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.random_crop": [[89, 92], ["torchvision.transforms.RandomCrop.get_params", "torchvision.crop"], "function", ["None"], []], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils._read_pfm": [[97, 117], ["open", "pfm_file.readline().decode().rstrip", "re.match", "float", "numpy.fromfile", "pfm_file.readline().decode", "map", "Exception", "pfm_file.readline().decode().rstrip", "pfm_file.readline().decode", "re.match.groups", "pfm_file.readline", "pfm_file.readline().decode", "pfm_file.readline", "pfm_file.readline"], "function", ["None"], []], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.read_calibration": [[119, 127], ["open", "csv.reader", "calib.setdefault"], "function", ["None"], []], "home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils.create_depth_from_pfm": [[129, 146], ["utils._read_pfm", "Exception", "float", "float", "float", "numpy.reshape", "numpy.flipud().transpose().copy", "[].lstrip", "numpy.flipud().transpose", "calib[].split", "numpy.flipud"], "function", ["home.repos.pwc.inspect_result.prs-eth_graph-super-resolution.data.utils._read_pfm"], []]}