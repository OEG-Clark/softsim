{"home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.None.train_inter_intra_order.build_model": [[19, 33], ["dict", "seco.resnet_mlp.resnet50.cuda", "seco.resnet_mlp.resnet50.cuda", "seco.util.moment_update", "seco.util.load_pretrained", "seco.resnet_mlp.resnet50", "seco.resnet_mlp.resnet50"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.moment_update", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.load_pretrained", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnet50", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnet50"], ["def", "build_model", "(", "args", ")", ":", "\n", "    ", "model_config_dict", "=", "dict", "(", "\n", "num_classes", "=", "128", ",", "\n", "mlp", "=", "args", ".", "model_mlp", ",", "\n", "intra_out", "=", "True", ",", "\n", "order_out", "=", "True", ",", "\n", ")", "\n", "model", "=", "resnet50mlp", "(", "**", "model_config_dict", ")", ".", "cuda", "(", ")", "\n", "model_ema", "=", "resnet50mlp", "(", "**", "model_config_dict", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "pretrained_model", ":", "\n", "        ", "load_pretrained", "(", "args", ",", "model", ")", "\n", "# copy weights from `model' to `model_ema'", "\n", "", "moment_update", "(", "model", ",", "model_ema", ",", "0", ")", "\n", "return", "model", ",", "model_ema", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.None.train_inter_intra_order.main": [[35, 67], ["seco.util.get_loader", "len", "logger.info", "train_inter_intra_order.build_model", "logger.info", "seco.Contrast.MemorySeCo().cuda", "seco.Contrast.NCESoftmaxLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "seco.lr_scheduler.get_scheduler", "torch.nn.parallel.DistributedDataParallel", "logger.info", "logger.info", "mmcv.Timer", "range", "torch.nn.parallel.DistributedDataParallel.parameters", "len", "os.path.isfile", "seco.util.load_checkpoint", "seco.util.get_loader.sampler.set_epoch", "train_inter_intra_order.train_seco", "logger.info", "torch.barrier", "seco.Contrast.MemorySeCo", "seco.Contrast.NCESoftmaxLoss", "torch.get_rank", "seco.util.save_checkpoint", "mmcv.Timer.since_last_check", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.get_loader", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.build_model", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.load_checkpoint", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.None.train_inter_intra_order.train_seco", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.save_checkpoint"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "train_loader", "=", "get_loader", "(", "args", ")", "\n", "n_data", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "\"length of training dataset: {}\"", ".", "format", "(", "n_data", ")", ")", "\n", "\n", "model", ",", "model_ema", "=", "build_model", "(", "args", ")", "\n", "logger", ".", "info", "(", "'{}'", ".", "format", "(", "model", ")", ")", "\n", "contrast", "=", "MemorySeCo", "(", "128", ",", "args", ".", "nce_k", ",", "args", ".", "nce_t", ",", "args", ".", "nce_t_intra", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "NCESoftmaxLoss", "(", ")", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "batch_size", "*", "dist", ".", "get_world_size", "(", ")", "/", "256", "*", "args", ".", "base_lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "len", "(", "train_loader", ")", ",", "args", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "broadcast_buffers", "=", "args", ".", "broadcast_buffer", ")", "\n", "logger", ".", "info", "(", "'Distributed Enabled'", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", "\n", "load_checkpoint", "(", "args", ",", "model", ",", "model_ema", ",", "contrast", ",", "optimizer", ",", "scheduler", ",", "logger", ".", "info", ")", "\n", "\n", "# routine", "\n", "", "logger", ".", "info", "(", "'Training'", ")", "\n", "timer", "=", "mmcv", ".", "Timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "loss", "=", "train_seco", "(", "epoch", ",", "train_loader", ",", "model", ",", "model_ema", ",", "contrast", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "args", ")", "\n", "logger", ".", "info", "(", "'epoch {}, total time {:.2f}, loss={}'", ".", "format", "(", "epoch", ",", "timer", ".", "since_last_check", "(", ")", ",", "loss", ")", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "model_ema", ",", "contrast", ",", "optimizer", ",", "scheduler", ",", "logger", ".", "info", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.None.train_inter_intra_order.train_seco": [[69, 128], ["model.train", "seco.util.set_bn_train", "seco.util.AverageMeter", "seco.util.AverageMeter", "mmcv.Timer", "enumerate", "xq.cuda.cuda", "x1.cuda.cuda", "x2.cuda.cuda", "x3.cuda.cuda", "binary_order.cuda.cuda", "model", "contrast", "contrast", "criterion", "criterion", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "seco.util.moment_update", "seco.util.AverageMeter.update", "seco.util.AverageMeter.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "seco.util.DistributedShuffle.forward_shuffle", "seco.util.DistributedShuffle.forward_shuffle", "seco.util.DistributedShuffle.forward_shuffle", "model_ema", "model_ema", "model_ema", "seco.util.DistributedShuffle.backward_shuffle", "seco.util.DistributedShuffle.backward_shuffle", "seco.util.DistributedShuffle.backward_shuffle", "seco.util.DistributedShuffle.backward_shuffle", "seco.util.DistributedShuffle.backward_shuffle", "seco.util.DistributedShuffle.backward_shuffle", "seco.util.DistributedShuffle.backward_shuffle", "seco.util.DistributedShuffle.backward_shuffle", "torch.cat", "torch.cat", "torch.cat", "loss.item", "mmcv.Timer.since_last_check", "logger.info", "torch.cat", "torch.cat", "torch.cat", "len", "loss.item", "criterion.item", "criterion.item", "torch.nn.functional.cross_entropy.item", "x2_feat_order.detach", "x3_feat_order.detach"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.train", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.set_bn_train", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.moment_update", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.update", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.update", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.forward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.forward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.forward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.backward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.backward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.backward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.backward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.backward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.backward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.backward_shuffle", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.backward_shuffle"], ["", "", "def", "train_seco", "(", "epoch", ",", "train_loader", ",", "model", ",", "model_ema", ",", "contrast", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "args", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "set_bn_train", "(", "model_ema", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "timer", "=", "mmcv", ".", "Timer", "(", ")", "\n", "for", "idx", ",", "(", "xq", ",", "x1", ",", "x2", ",", "x3", ",", "binary_order", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "xq", "=", "xq", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# query", "\n", "x1", "=", "x1", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# same frame diff aug", "\n", "x2", "=", "x2", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# diff frame 1", "\n", "x3", "=", "x3", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# diff frame 2", "\n", "binary_order", "=", "binary_order", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# forward keys", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x1_shuffled", ",", "x1_backward_inds", "=", "DistributedShuffle", ".", "forward_shuffle", "(", "x1", ")", "\n", "x2_shuffled", ",", "x2_backward_inds", "=", "DistributedShuffle", ".", "forward_shuffle", "(", "x2", ")", "\n", "x3_shuffled", ",", "x3_backward_inds", "=", "DistributedShuffle", ".", "forward_shuffle", "(", "x3", ")", "\n", "x1_feat_inter", ",", "x1_feat_intra", ",", "x1_feat_order", "=", "model_ema", "(", "x1_shuffled", ")", "\n", "x2_feat_inter", ",", "x2_feat_intra", ",", "x2_feat_order", "=", "model_ema", "(", "x2_shuffled", ")", "\n", "x3_feat_inter", ",", "x3_feat_intra", ",", "x3_feat_order", "=", "model_ema", "(", "x3_shuffled", ")", "\n", "x1_feat_inter_all", ",", "x1_feat_inter", "=", "DistributedShuffle", ".", "backward_shuffle", "(", "x1_feat_inter", ",", "x1_backward_inds", ")", "\n", "x1_feat_intra_all", ",", "x1_feat_intra", "=", "DistributedShuffle", ".", "backward_shuffle", "(", "x1_feat_intra", ",", "x1_backward_inds", ")", "\n", "x2_feat_inter_all", ",", "x2_feat_inter", "=", "DistributedShuffle", ".", "backward_shuffle", "(", "x2_feat_inter", ",", "x2_backward_inds", ")", "\n", "x2_feat_intra_all", ",", "x2_feat_intra", "=", "DistributedShuffle", ".", "backward_shuffle", "(", "x2_feat_intra", ",", "x2_backward_inds", ")", "\n", "x2_feat_order_all", ",", "x2_feat_order", "=", "DistributedShuffle", ".", "backward_shuffle", "(", "x2_feat_order", ",", "x2_backward_inds", ")", "\n", "x3_feat_inter_all", ",", "x3_feat_inter", "=", "DistributedShuffle", ".", "backward_shuffle", "(", "x3_feat_inter", ",", "x3_backward_inds", ")", "\n", "x3_feat_intra_all", ",", "x3_feat_intra", "=", "DistributedShuffle", ".", "backward_shuffle", "(", "x3_feat_intra", ",", "x3_backward_inds", ")", "\n", "x3_feat_order_all", ",", "x3_feat_order", "=", "DistributedShuffle", ".", "backward_shuffle", "(", "x3_feat_order", ",", "x3_backward_inds", ")", "\n", "# forward query", "\n", "", "xq_feat_inter", ",", "xq_feat_intra", ",", "xq_feat_order", ",", "xq_logit_order", "=", "model", "(", "xq", ",", "order_feat", "=", "torch", ".", "cat", "(", "[", "x2_feat_order", ".", "detach", "(", ")", ",", "x3_feat_order", ".", "detach", "(", ")", "]", ",", "dim", "=", "1", ")", ")", "\n", "out_inter", "=", "contrast", "(", "xq_feat_inter", ",", "\n", "x1_feat_inter", ",", "x2_feat_inter", ",", "x3_feat_inter", ",", "\n", "torch", ".", "cat", "(", "[", "x1_feat_inter_all", ",", "x2_feat_inter_all", ",", "x3_feat_inter_all", "]", ",", "dim", "=", "0", ")", ",", "inter", "=", "True", ")", "\n", "# loss calc", "\n", "out_intra", "=", "contrast", "(", "xq_feat_intra", ",", "\n", "x1_feat_intra", ",", "x2_feat_intra", ",", "x3_feat_intra", ",", "None", ",", "inter", "=", "False", ")", "\n", "loss_inter", "=", "criterion", "(", "out_inter", ")", "\n", "loss_intra", "=", "criterion", "(", "out_intra", ")", "\n", "loss_order", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "xq_logit_order", ",", "binary_order", ")", "\n", "loss", "=", "loss_inter", "+", "loss_intra", "+", "loss_order", "\n", "# backward", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# update params", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "moment_update", "(", "model", ",", "model_ema", ",", "args", ".", "alpha", ")", "\n", "# update meters", "\n", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "batch_time", ".", "update", "(", "timer", ".", "since_last_check", "(", ")", ")", "\n", "# print info", "\n", "if", "idx", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "'Train: [{:>3d}]/[{:>4d}/{:>4d}] BT={:>0.3f}/{:>0.3f} Loss={:>0.3f} {:>0.3f} {:>0.3f} {:>0.3f}/{:>0.3f}'", ".", "format", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "loss", ".", "item", "(", ")", ",", "loss_inter", ".", "item", "(", ")", ",", "loss_intra", ".", "item", "(", ")", ",", "loss_order", ".", "item", "(", ")", ",", "loss_meter", ".", "avg", ",", "\n", ")", ")", "\n", "", "", "return", "loss_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.None.eval_svm_feature_perf.main": [[7, 79], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "range", "numpy.load", "numpy.load", "range", "numpy.concatenate().squeeze", "numpy.concatenate().squeeze", "print", "print", "range", "numpy.concatenate", "numpy.concatenate", "print", "print", "print", "liblinear.problem", "print", "liblinear.train", "print", "liblinear.save_model", "print", "liblinear.predict", "liblinear.evaluations", "print", "print", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "np.concatenate().squeeze.append", "np.concatenate().squeeze.append", "range", "np.concatenate.append", "np.concatenate.append", "range", "print", "liblinear.parameter", "print", "liblinear.parameter", "os.path.join", "open", "f.write", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.concatenate", "numpy.concatenate", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.train", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.save_model", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.predict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.commonutil.evaluations"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'svm_perf'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-dir'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--trainsplit'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--valsplit'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--num_replica'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--cost'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--primal'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "num_replica", ")", ":", "\n", "        ", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_{}.npy'", ".", "format", "(", "args", ".", "trainsplit", ",", "i", ")", ")", ")", "\n", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_cls_{}.npy'", ".", "format", "(", "args", ".", "trainsplit", ",", "i", ")", ")", ")", "\n", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_{}.npy'", ".", "format", "(", "args", ".", "valsplit", ",", "i", ")", ")", ")", "\n", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_cls_{}.npy'", ".", "format", "(", "args", ".", "valsplit", ",", "i", ")", ")", ")", "\n", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'vid_num_{}.npy'", ".", "format", "(", "args", ".", "trainsplit", ")", ")", ")", "\n", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'vid_num_{}.npy'", ".", "format", "(", "args", ".", "valsplit", ")", ")", ")", "\n", "\n", "", "vid_num_train", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'vid_num_{}.npy'", ".", "format", "(", "args", ".", "trainsplit", ")", ")", ")", "\n", "train_padding_num", "=", "vid_num_train", "[", "0", "]", "%", "args", ".", "num_replica", "\n", "vid_num_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'vid_num_{}.npy'", ".", "format", "(", "args", ".", "valsplit", ")", ")", ")", "\n", "val_padding_num", "=", "vid_num_val", "[", "0", "]", "%", "args", ".", "num_replica", "\n", "\n", "feat_train", "=", "[", "]", "\n", "feat_train_cls", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_replica", ")", ":", "\n", "        ", "feat_train", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_{}.npy'", ".", "format", "(", "args", ".", "trainsplit", ",", "i", ")", ")", ")", ")", "\n", "feat_train_cls", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_cls_{}.npy'", ".", "format", "(", "args", ".", "trainsplit", ",", "i", ")", ")", ")", ")", "\n", "", "if", "train_padding_num", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "train_padding_num", ",", "args", ".", "num_replica", ")", ":", "\n", "            ", "feat_train", "[", "i", "]", "=", "feat_train", "[", "i", "]", "[", ":", "-", "1", ",", ":", "]", "\n", "feat_train_cls", "[", "i", "]", "=", "feat_train_cls", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "", "", "feat_train", "=", "np", ".", "concatenate", "(", "feat_train", ",", "axis", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "feat_train_cls", "=", "np", ".", "concatenate", "(", "feat_train_cls", ",", "axis", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "print", "(", "'feat_train: {}'", ".", "format", "(", "feat_train", ".", "shape", ")", ")", "\n", "print", "(", "'feat_train_cls: {}'", ".", "format", "(", "feat_train_cls", ".", "shape", ")", ")", "\n", "\n", "feat_val", "=", "[", "]", "\n", "feat_val_cls", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_replica", ")", ":", "\n", "        ", "feat_val", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_{}.npy'", ".", "format", "(", "args", ".", "valsplit", ",", "i", ")", ")", ")", ")", "\n", "feat_val_cls", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_cls_{}.npy'", ".", "format", "(", "args", ".", "valsplit", ",", "i", ")", ")", ")", ")", "\n", "", "if", "val_padding_num", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "val_padding_num", ",", "args", ".", "num_replica", ")", ":", "\n", "            ", "feat_val", "[", "i", "]", "=", "feat_val", "[", "i", "]", "[", ":", "-", "1", ",", ":", "]", "\n", "feat_val_cls", "[", "i", "]", "=", "feat_val_cls", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "", "", "feat_val", "=", "np", ".", "concatenate", "(", "feat_val", ",", "axis", "=", "0", ")", "\n", "feat_val_cls", "=", "np", ".", "concatenate", "(", "feat_val_cls", ",", "axis", "=", "0", ")", "\n", "print", "(", "'feat_val: {}'", ".", "format", "(", "feat_val", ".", "shape", ")", ")", "\n", "print", "(", "'feat_val_cls: {}'", ".", "format", "(", "feat_val_cls", ".", "shape", ")", ")", "\n", "\n", "print", "(", "'form svm problem'", ")", "\n", "svm_problem", "=", "liblinearsvm", ".", "problem", "(", "feat_train_cls", ",", "feat_train", ")", "\n", "if", "args", ".", "primal", ":", "\n", "        ", "print", "(", "'L2-regularized L2-loss support vector classification (primal), cost={}'", ".", "format", "(", "args", ".", "cost", ")", ")", "\n", "svm_parameter", "=", "liblinearsvm", ".", "parameter", "(", "'-s 2 -n 32 -c {}'", ".", "format", "(", "args", ".", "cost", ")", ")", "\n", "svm_filename", "=", "'multicore_linearsvm_primal_c{}.svmmodel'", ".", "format", "(", "args", ".", "cost", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'L2-regularized L2-loss support vector classification (dual), cost={}'", ".", "format", "(", "args", ".", "cost", ")", ")", "\n", "svm_parameter", "=", "liblinearsvm", ".", "parameter", "(", "'-s 1 -n 32 -c {}'", ".", "format", "(", "args", ".", "cost", ")", ")", "\n", "svm_filename", "=", "'multicore_linearsvm_dual_c{}.svmmodel'", ".", "format", "(", "args", ".", "cost", ")", "\n", "", "print", "(", "'train svm'", ")", "\n", "svm_model", "=", "liblinearsvm", ".", "train", "(", "svm_problem", ",", "svm_parameter", ")", "\n", "print", "(", "'save svm'", ")", "\n", "liblinearsvm", ".", "save_model", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "svm_filename", ")", ",", "svm_model", ")", "\n", "print", "(", "'eval svm'", ")", "\n", "pd_label", ",", "pd_acc", ",", "pd_val", "=", "liblinearsvm", ".", "predict", "(", "feat_val_cls", ",", "feat_val", ",", "svm_model", ")", "\n", "eval_acc", ",", "eval_mse", ",", "eval_scc", "=", "liblinearsvm", ".", "evaluations", "(", "feat_val_cls", ",", "pd_label", ")", "\n", "print", "(", "'{}/{}'", ".", "format", "(", "pd_acc", ",", "eval_acc", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "svm_filename", "+", "'.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'{}/{}'", ".", "format", "(", "pd_acc", ",", "eval_acc", ")", ")", "\n", "", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.None.eval_svm_feature_extract.parse_option": [[21, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'svm eval'", ")", "\n", "\n", "# data", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'root director of dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'KineticsClipFolderDatasetV2MultiFrames'", ",", "help", "=", "'dataset to training'", ")", "\n", "parser", ".", "add_argument", "(", "'--datasplit'", ",", "type", "=", "str", ",", "default", "=", "'train'", ")", "\n", "parser", ".", "add_argument", "(", "'--datasamplenum'", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "\n", "# aug", "\n", "parser", ".", "add_argument", "(", "'--resize'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--cropsize'", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "\n", "# io", "\n", "parser", ".", "add_argument", "(", "'--pretrained_model'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"pretrained model path\"", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'./eval_output'", ",", "help", "=", "'output director'", ")", "\n", "\n", "# msic", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "'local rank for DistributedDataParallel'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.None.eval_svm_feature_extract.get_loader": [[44, 67], ["val_transform_list.append", "val_transform_list.append", "val_transform_list.append", "torchvision.Compose", "dataset.build_dataset", "torch.utils.data.DataLoader", "val_transform_list.append", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "len", "torchvision.Resize", "torch.utils.data.distributed.DistributedSampler"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_builder.build_dataset"], ["", "def", "get_loader", "(", "args", ")", ":", "\n", "    ", "val_transform_list", "=", "[", "]", "\n", "if", "args", ".", "resize", ">", "0", ":", "\n", "        ", "val_transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "args", ".", "resize", ")", ")", "\n", "", "val_transform_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "args", ".", "cropsize", ")", ")", "\n", "val_transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "val_transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "val_transform_list", ")", "\n", "clipdataset", "=", "build_dataset", "(", "\n", "dataset", "=", "args", ".", "dataset", ",", "\n", "root", "=", "args", ".", "data_dir", ",", "\n", "split", "=", "args", ".", "datasplit", ",", "\n", "transform", "=", "val_transform", ",", "\n", "sample_num", "=", "args", ".", "datasamplenum", ",", "\n", ")", "\n", "dataloader", "=", "DataLoader", "(", "clipdataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "8", ",", "\n", "sampler", "=", "DistributedSampler", "(", "clipdataset", ",", "shuffle", "=", "False", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "return", "dataloader", ",", "len", "(", "clipdataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.None.eval_svm_feature_extract.main": [[69, 104], ["eval_svm_feature_extract.get_loader", "logger.info", "dict", "seco.resnet_mlp.resnet50().cuda", "torch.nn.parallel.DistributedDataParallel", "seco.util.load_pretrained", "torch.nn.parallel.DistributedDataParallel.eval", "logger.info", "numpy.zeros", "numpy.stack", "numpy.save", "numpy.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "os.path.join", "os.path.join", "torch.get_rank", "numpy.save", "len", "seco.resnet_mlp.resnet50", "len", "logger.info", "data.view.size", "data.view.cuda", "torch.nn.parallel.DistributedDataParallel.squeeze", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "np.stack.append", "cls.item", "os.path.join", "numpy.array", "data.view.view", "torch.mean().view.data.cpu().numpy", "len", "torch.nn.parallel.DistributedDataParallel.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean().view.data.cpu"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.get_loader", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.load_pretrained", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnet50"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "data_loader", ",", "total_num", "=", "get_loader", "(", "args", ")", "\n", "logger", ".", "info", "(", "'using data: {}'", ".", "format", "(", "len", "(", "data_loader", ")", ")", ")", "\n", "model_config_dict", "=", "dict", "(", "\n", "num_classes", "=", "128", ",", "\n", "mlp", "=", "True", ",", "\n", "intra_out", "=", "True", ",", "\n", "order_out", "=", "True", ",", "\n", ")", "\n", "model", "=", "resnet50", "(", "**", "model_config_dict", ")", ".", "cuda", "(", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ")", "\n", "load_pretrained", "(", "args", ",", "model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "logger", ".", "info", "(", "'model init done'", ")", "\n", "# all_feat = np.zeros([len(data_loader), 2048], dtype=np.float32)", "\n", "all_feat", "=", "[", "]", "\n", "all_feat_cls", "=", "np", ".", "zeros", "(", "[", "len", "(", "data_loader", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "(", "data", ",", "cls", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'{}/{}'", ".", "format", "(", "idx", ",", "len", "(", "data_loader", ")", ")", ")", "\n", "data_size", "=", "data", ".", "size", "(", ")", "\n", "if", "data_size", "[", "1", "]", "!=", "3", ":", "\n", "                ", "data", "=", "data", ".", "view", "(", "(", "-", "1", ",", "3", ",", "data_size", "[", "-", "2", "]", ",", "data_size", "[", "-", "1", "]", ")", ")", "\n", "", "data", "=", "data", ".", "cuda", "(", ")", "\n", "feat", "=", "model", "(", "data", ",", "layer", "=", "6", ")", ".", "squeeze", "(", ")", "\n", "feat_avg", "=", "torch", ".", "mean", "(", "feat", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "all_feat", ".", "append", "(", "feat_avg", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_feat_cls", "[", "idx", "]", "=", "cls", ".", "item", "(", ")", "\n", "", "", "all_feat", "=", "np", ".", "stack", "(", "all_feat", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_{}.npy'", ".", "format", "(", "args", ".", "datasplit", ",", "args", ".", "local_rank", ")", ")", ",", "all_feat", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'feature_{}_cls_{}.npy'", ".", "format", "(", "args", ".", "datasplit", ",", "args", ".", "local_rank", ")", ")", ",", "all_feat_cls", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'vid_num_{}.npy'", ".", "format", "(", "args", ".", "datasplit", ")", ")", ",", "np", ".", "array", "(", "[", "total_num", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.Contrast.NCESoftmaxLoss.__init__": [[8, 11], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NCESoftmaxLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.Contrast.NCESoftmaxLoss.forward": [[12, 15], ["torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "Contrast.NCESoftmaxLoss.criterion", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "label", "=", "torch", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", ".", "long", "(", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "return", "self", ".", "criterion", "(", "x", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.Contrast.MemorySeCo.__init__": [[19, 31], ["torch.Module.__init__", "Contrast.MemorySeCo.register_buffer", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "Contrast.MemorySeCo.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "math.sqrt", "torch.rand().mul_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["def", "__init__", "(", "self", ",", "feature_dim", ",", "queue_size", ",", "temperature", "=", "0.10", ",", "temperature_intra", "=", "0.10", ")", ":", "\n", "        ", "super", "(", "MemorySeCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "queue_size", "=", "queue_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "temperature_intra", "=", "temperature_intra", "\n", "self", ".", "index", "=", "0", "\n", "\n", "# noinspection PyCallingNonCallable", "\n", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "feature_dim", "/", "3", ")", "\n", "memory", "=", "torch", ".", "rand", "(", "self", ".", "queue_size", ",", "feature_dim", ",", "requires_grad", "=", "False", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", "\n", "self", ".", "register_buffer", "(", "'memory'", ",", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.Contrast.MemorySeCo.forward": [[32, 51], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div().contiguous", "torch.div().contiguous", "torch.div().contiguous", "torch.div().contiguous", "torch.div().contiguous", "torch.div().contiguous", "torch.div().contiguous", "torch.div().contiguous", "Contrast.MemorySeCo.memory.clone().detach().t", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "Contrast.MemorySeCo.memory.index_copy_", "k_sf.detach", "k_df1.detach", "k_df2.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm.repeat", "torch.mm.repeat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "Contrast.MemorySeCo.memory.clone().detach", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Contrast.MemorySeCo.memory.clone", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "l_pos_sf.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k_sf", ",", "k_df1", ",", "k_df2", ",", "k_all", ",", "inter", "=", "True", ")", ":", "\n", "        ", "l_pos_sf", "=", "(", "q", "*", "k_sf", ".", "detach", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# shape: (batchSize, 1)", "\n", "l_pos_df1", "=", "(", "q", "*", "k_df1", ".", "detach", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# shape: (batchSize, 1)", "\n", "l_pos_df2", "=", "(", "q", "*", "k_df2", ".", "detach", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# shape: (batchSize, 1)", "\n", "if", "inter", ":", "\n", "# TODO: remove clone. need update memory in backwards", "\n", "            ", "l_neg", "=", "torch", ".", "mm", "(", "q", ",", "self", ".", "memory", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "t", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "l_pos_sf", ",", "l_pos_df1", ",", "l_pos_df2", ")", ",", "dim", "=", "0", ")", ",", "l_neg", ".", "repeat", "(", "3", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "torch", ".", "div", "(", "out", ",", "self", ".", "temperature", ")", ".", "contiguous", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "all_size", "=", "k_all", ".", "shape", "[", "0", "]", "\n", "out_ids", "=", "torch", ".", "fmod", "(", "torch", ".", "arange", "(", "all_size", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "+", "self", ".", "index", ",", "self", ".", "queue_size", ")", "\n", "self", ".", "memory", ".", "index_copy_", "(", "0", ",", "out_ids", ",", "k_all", ")", "\n", "self", ".", "index", "=", "(", "self", ".", "index", "+", "all_size", ")", "%", "self", ".", "queue_size", "\n", "", "", "else", ":", "\n", "# out intra-frame similarity", "\n", "            ", "out", "=", "torch", ".", "div", "(", "torch", ".", "cat", "(", "(", "l_pos_sf", ".", "repeat", "(", "2", ",", "1", ")", ",", "torch", ".", "cat", "(", "(", "l_pos_df1", ",", "l_pos_df2", ")", ",", "dim", "=", "0", ")", ")", ",", "dim", "=", "-", "1", ")", ",", "self", ".", "temperature_intra", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.Head.__init__": [[22, 32], ["torch.Sequential.__init__", "torch.Sequential.__init__", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "c_out", ",", "mlp", "=", "False", ")", ":", "\n", "        ", "if", "mlp", ":", "\n", "            ", "super", "(", "Head", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "Linear", "(", "c_in", ",", "c_in", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "c_in", ",", "c_out", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", "Head", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "Linear", "(", "c_in", ",", "c_out", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.BasicBlock.__init__": [[39, 56], ["torch.Module.__init__", "resnet_mlp.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_mlp.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv3x3", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.BasicBlock.forward": [[57, 74], ["resnet_mlp.BasicBlock.conv1", "resnet_mlp.BasicBlock.bn1", "resnet_mlp.BasicBlock.relu", "resnet_mlp.BasicBlock.conv2", "resnet_mlp.BasicBlock.bn2", "resnet_mlp.BasicBlock.relu", "resnet_mlp.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.Bottleneck.__init__": [[80, 96], ["torch.Module.__init__", "resnet_mlp.conv1x1", "norm_layer", "resnet_mlp.conv3x3", "norm_layer", "resnet_mlp.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv1x1", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv3x3", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.Bottleneck.forward": [[97, 118], ["resnet_mlp.Bottleneck.conv1", "resnet_mlp.Bottleneck.bn1", "resnet_mlp.Bottleneck.relu", "resnet_mlp.Bottleneck.conv2", "resnet_mlp.Bottleneck.bn2", "resnet_mlp.Bottleneck.relu", "resnet_mlp.Bottleneck.conv3", "resnet_mlp.Bottleneck.bn3", "resnet_mlp.Bottleneck.relu", "resnet_mlp.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.ResNet.__init__": [[122, 184], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_mlp.ResNet._make_layer", "resnet_mlp.ResNet._make_layer", "resnet_mlp.ResNet._make_layer", "resnet_mlp.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet_mlp.Head", "resnet_mlp.ResNet.modules", "len", "ValueError", "resnet_mlp.Head", "resnet_mlp.Head", "torch.Linear", "torch.Linear", "isinstance", "resnet_mlp.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "mlp", "=", "False", ",", "intra_out", "=", "False", ",", "order_out", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "# inter fc", "\n", "self", ".", "mlp", "=", "mlp", "\n", "self", ".", "fc_inter", "=", "Head", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "mlp", ")", "\n", "# intra fc", "\n", "self", ".", "intra_out", "=", "intra_out", "\n", "if", "self", ".", "intra_out", ":", "\n", "            ", "self", ".", "fc_intra", "=", "Head", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "mlp", ")", "\n", "# order fc", "\n", "", "self", ".", "order_out", "=", "order_out", "\n", "if", "self", ".", "order_out", ":", "\n", "            ", "self", ".", "fc_order", "=", "Head", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "mlp", ")", "\n", "self", ".", "fc_order_classifier", "=", "nn", ".", "Linear", "(", "num_classes", "*", "3", ",", "2", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.ResNet._make_layer": [[185, 208], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_mlp.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.ResNet._forward_impl": [[209, 233], ["resnet_mlp.ResNet.conv1", "resnet_mlp.ResNet.bn1", "resnet_mlp.ResNet.relu", "resnet_mlp.ResNet.maxpool", "resnet_mlp.ResNet.layer1", "resnet_mlp.ResNet.layer2", "resnet_mlp.ResNet.layer3", "resnet_mlp.ResNet.layer4", "resnet_mlp.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.functional.normalize", "torch.functional.normalize", "out.append", "out.append", "resnet_mlp.ResNet.fc_inter", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "resnet_mlp.ResNet.fc_intra", "resnet_mlp.ResNet.fc_order"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ",", "layer", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "layer", "==", "5", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "if", "layer", "==", "6", ":", "\n", "            ", "return", "x", "\n", "\n", "", "out", "=", "[", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "fc_inter", "(", "x", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "]", "\n", "if", "self", ".", "intra_out", ":", "\n", "            ", "out", ".", "append", "(", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "fc_intra", "(", "x", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ")", "\n", "", "if", "self", ".", "order_out", ":", "\n", "            ", "out", ".", "append", "(", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "fc_order", "(", "x", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.ResNet.forward": [[234, 239], ["resnet_mlp.ResNet._forward_impl", "resnet_mlp.ResNet.append", "resnet_mlp.ResNet.fc_order_classifier", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer", "=", "7", ",", "order_feat", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "_forward_impl", "(", "x", ",", "layer", ")", "\n", "if", "order_feat", "is", "not", "None", ":", "\n", "            ", "out", ".", "append", "(", "self", ".", "fc_order_classifier", "(", "torch", ".", "cat", "(", "[", "out", "[", "-", "1", "]", ",", "order_feat", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.conv1x1": [[16, 19], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp._resnet": [[241, 244], ["resnet_mlp.ResNet"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.resnet18": [[246, 256], ["resnet_mlp._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.resnet34": [[258, 268], ["resnet_mlp._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.resnet50": [[270, 280], ["resnet_mlp._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.resnet101": [[282, 292], ["resnet_mlp._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.resnet152": [[294, 304], ["resnet_mlp._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.resnext50_32x4d": [[306, 318], ["resnet_mlp._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.resnext101_32x8d": [[320, 332], ["resnet_mlp._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.wide_resnet50_2": [[334, 350], ["resnet_mlp._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.resnet_mlp.wide_resnet101_2": [[352, 368], ["resnet_mlp._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.logger._ColorfulFormatter.__init__": [[10, 16], ["kwargs.pop", "len", "logging.Formatter.__init__", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_root_name", "=", "kwargs", ".", "pop", "(", "\"root_name\"", ")", "+", "\".\"", "\n", "self", ".", "_abbrev_name", "=", "kwargs", ".", "pop", "(", "\"abbrev_name\"", ",", "\"\"", ")", "\n", "if", "len", "(", "self", ".", "_abbrev_name", ")", ":", "\n", "            ", "self", ".", "_abbrev_name", "=", "self", ".", "_abbrev_name", "+", "\".\"", "\n", "", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.logger._ColorfulFormatter.formatMessage": [[17, 27], ["record.name.replace", "super().formatMessage", "termcolor.colored", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.logger._ColorfulFormatter.formatMessage"], ["", "def", "formatMessage", "(", "self", ",", "record", ")", ":", "\n", "        ", "record", ".", "name", "=", "record", ".", "name", ".", "replace", "(", "self", ".", "_root_name", ",", "self", ".", "_abbrev_name", ")", "\n", "log", "=", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "formatMessage", "(", "record", ")", "\n", "if", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"WARNING\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", "]", ")", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", "or", "record", ".", "levelno", "==", "logging", ".", "CRITICAL", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"ERROR\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", ",", "\"underline\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "log", "\n", "", "return", "prefix", "+", "\" \"", "+", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.logger.setup_logger": [[30, 88], ["functools.lru_cache", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.makedirs", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logger._ColorfulFormatter", "output.endswith", "output.endswith", "os.path.join", "os.path.dirname", "logger._cached_log_stream", "termcolor.colored", "str"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.logger._cached_log_stream"], ["", "", "@", "functools", ".", "lru_cache", "(", ")", "\n", "def", "setup_logger", "(", "\n", "output", "=", "None", ",", "distributed_rank", "=", "0", ",", "*", ",", "color", "=", "True", ",", "name", "=", "\"seco\"", ",", "abbrev_name", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the detectron2 logger and set its verbosity level to \"INFO\".\n\n    Args:\n        output (str): a file name or a directory to save log. If None, will not save log file.\n            If ends with \".txt\" or \".log\", assumed to be a file name.\n            Otherwise, logs will be saved to `output/log.txt`.\n        name (str): the root module name of this logger\n\n    Returns:\n        logging.Logger: a logger\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "if", "abbrev_name", "is", "None", ":", "\n", "        ", "abbrev_name", "=", "name", "\n", "\n", "", "plain_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s] %(name)s %(levelname)s: %(message)s\"", ",", "datefmt", "=", "\"%m/%d %H:%M:%S\"", "\n", ")", "\n", "# stdout logging: master only", "\n", "if", "distributed_rank", "==", "0", ":", "\n", "        ", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "if", "color", ":", "\n", "            ", "formatter", "=", "_ColorfulFormatter", "(", "\n", "colored", "(", "\"[%(asctime)s %(name)s]: \"", ",", "\"green\"", ")", "+", "\"%(message)s\"", ",", "\n", "datefmt", "=", "\"%m/%d %H:%M:%S\"", ",", "\n", "root_name", "=", "name", ",", "\n", "abbrev_name", "=", "str", "(", "abbrev_name", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "formatter", "=", "plain_formatter", "\n", "", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# file logging: all workers", "\n", "", "if", "output", "is", "not", "None", ":", "\n", "        ", "if", "output", ".", "endswith", "(", "\".txt\"", ")", "or", "output", ".", "endswith", "(", "\".log\"", ")", ":", "\n", "            ", "filename", "=", "output", "\n", "", "else", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output", ",", "\"log.txt\"", ")", "\n", "", "if", "distributed_rank", ">", "0", ":", "\n", "            ", "filename", "=", "filename", "+", "\".rank{}\"", ".", "format", "(", "distributed_rank", ")", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "fh", "=", "logging", ".", "StreamHandler", "(", "_cached_log_stream", "(", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "plain_formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.logger._cached_log_stream": [[92, 95], ["functools.lru_cache", "open"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "None", ")", "\n", "def", "_cached_log_stream", "(", "filename", ")", ":", "\n", "    ", "return", "open", "(", "filename", ",", "\"a\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.lr_scheduler.WarmUpCosineAnnealingLR.__init__": [[7, 15], ["float", "torch.optim.lr_scheduler.CosineAnnealingLR.__init__"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warm_multiplier", ",", "warm_duration", ",", "cos_duration", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "assert", "warm_duration", ">=", "0", "\n", "assert", "warm_multiplier", ">", "1.0", "\n", "self", ".", "warm_m", "=", "float", "(", "warm_multiplier", ")", "\n", "self", ".", "warm_d", "=", "warm_duration", "\n", "self", ".", "cos_duration", "=", "cos_duration", "\n", "self", ".", "cos_eta_min", "=", "eta_min", "\n", "super", "(", "WarmUpCosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "cos_duration", ",", "eta_min", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.lr_scheduler.WarmUpCosineAnnealingLR.get_lr": [[16, 41], ["super().get_lr", "warnings.warn", "zip", "math.cos", "math.cos", "math.cos"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "warm_d", "==", "0", ":", "\n", "            ", "return", "super", "(", "WarmUpCosineAnnealingLR", ",", "self", ")", ".", "get_lr", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "", "if", "self", ".", "last_epoch", "==", "0", ":", "\n", "                ", "return", "[", "lr", "/", "self", ".", "warm_m", "for", "lr", "in", "self", ".", "base_lrs", "]", "\n", "# return self.base_lrs / self.warm_m", "\n", "", "elif", "self", ".", "last_epoch", "<=", "self", ".", "warm_d", ":", "\n", "                ", "return", "[", "(", "self", ".", "warm_d", "+", "(", "self", ".", "warm_m", "-", "1", ")", "*", "self", ".", "last_epoch", ")", "/", "(", "self", ".", "warm_d", "+", "(", "self", ".", "warm_m", "-", "1", ")", "*", "(", "self", ".", "last_epoch", "-", "1", ")", ")", "*", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "else", ":", "\n", "                ", "cos_last_epoch", "=", "self", ".", "last_epoch", "-", "self", ".", "warm_d", "\n", "if", "cos_last_epoch", "==", "0", ":", "\n", "                    ", "return", "self", ".", "base_lrs", "\n", "", "elif", "(", "cos_last_epoch", "-", "1", "-", "self", ".", "cos_duration", ")", "%", "(", "2", "*", "self", ".", "cos_duration", ")", "==", "0", ":", "\n", "                    ", "return", "[", "group", "[", "'lr'", "]", "+", "(", "base_lr", "-", "self", ".", "cos_eta_min", ")", "*", "\n", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "/", "self", ".", "cos_duration", ")", ")", "/", "2", "\n", "for", "base_lr", ",", "group", "in", "\n", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "optimizer", ".", "param_groups", ")", "]", "\n", "", "return", "[", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "cos_last_epoch", "/", "self", ".", "cos_duration", ")", ")", "/", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "cos_last_epoch", "-", "1", ")", "/", "self", ".", "cos_duration", ")", ")", "*", "\n", "(", "group", "[", "'lr'", "]", "-", "self", ".", "cos_eta_min", ")", "+", "self", ".", "cos_eta_min", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.lr_scheduler.WarmUpCosineAnnealingLR._get_closed_form_lr": [[42, 53], ["super()._get_closed_form_lr", "math.cos"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.lr_scheduler.WarmUpCosineAnnealingLR._get_closed_form_lr"], ["", "", "", "def", "_get_closed_form_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "warm_d", "==", "0", ":", "\n", "            ", "return", "super", "(", "WarmUpCosineAnnealingLR", ",", "self", ")", ".", "_get_closed_form_lr", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "last_epoch", "<=", "self", ".", "warm_d", ":", "\n", "                ", "return", "[", "base_lr", "*", "(", "self", ".", "warm_d", "+", "(", "self", ".", "warm_m", "-", "1", ")", "*", "self", ".", "last_epoch", ")", "/", "(", "self", ".", "warm_d", "*", "self", ".", "warm_m", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "                ", "cos_last_epoch", "=", "self", ".", "last_epoch", "-", "self", ".", "warm_d", "\n", "return", "[", "self", ".", "cos_eta_min", "+", "(", "base_lr", "-", "self", ".", "cos_eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "cos_last_epoch", "/", "self", ".", "cos_duration", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.lr_scheduler.get_scheduler": [[55, 66], ["lr_scheduler.WarmUpCosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "", "", "", "def", "get_scheduler", "(", "optimizer", ",", "n_iter_per_epoch", ",", "args", ")", ":", "\n", "    ", "if", "\"cosine\"", "in", "args", ".", "lr_scheduler", ":", "\n", "        ", "return", "WarmUpCosineAnnealingLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "warm_multiplier", "=", "args", ".", "warmup_multiplier", ",", "\n", "warm_duration", "=", "args", ".", "warmup_epoch", "*", "n_iter_per_epoch", ",", "\n", "cos_duration", "=", "(", "args", ".", "epochs", "-", "args", ".", "warmup_epoch", ")", "*", "n_iter_per_epoch", ",", "\n", "eta_min", "=", "0.000001", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"scheduler {} not supported\"", ".", "format", "(", "args", ".", "lr_scheduler", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.AverageMeter.__init__": [[14, 20], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.AverageMeter.reset": [[21, 26], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.AverageMeter.update": [[27, 32], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.forward_shuffle": [[56, 62], ["util.dist_collect", "util.DistributedShuffle.get_shuffle_ids", "util.DistributedShuffle.get_local_id"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.dist_collect", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.get_shuffle_ids", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.get_local_id"], ["    ", "@", "staticmethod", "\n", "def", "forward_shuffle", "(", "x", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "x_all", "=", "dist_collect", "(", "x", ")", "\n", "forward_inds", ",", "backward_inds", "=", "DistributedShuffle", ".", "get_shuffle_ids", "(", "x_all", ".", "shape", "[", "0", "]", ",", "epoch", ")", "\n", "forward_inds_local", "=", "DistributedShuffle", ".", "get_local_id", "(", "forward_inds", ")", "\n", "return", "x_all", "[", "forward_inds_local", "]", ",", "backward_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.backward_shuffle": [[63, 71], ["util.dist_collect", "util.DistributedShuffle.get_local_id"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.dist_collect", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.get_local_id"], ["", "@", "staticmethod", "\n", "def", "backward_shuffle", "(", "x", ",", "backward_inds", ",", "return_local", "=", "True", ")", ":", "\n", "        ", "x_all", "=", "dist_collect", "(", "x", ")", "\n", "if", "return_local", ":", "\n", "            ", "backward_inds_local", "=", "DistributedShuffle", ".", "get_local_id", "(", "backward_inds", ")", "\n", "return", "x_all", "[", "backward_inds", "]", ",", "x_all", "[", "backward_inds_local", "]", "\n", "", "else", ":", "\n", "            ", "return", "x_all", "[", "backward_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.get_local_id": [[72, 75], ["ids.chunk", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_local_id", "(", "ids", ")", ":", "\n", "        ", "return", "ids", ".", "chunk", "(", "dist", ".", "get_world_size", "(", ")", ")", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.DistributedShuffle.get_shuffle_ids": [[76, 87], ["torch.randperm().long().cuda", "torch.randperm().long().cuda", "torch.randperm().long().cuda", "torch.randperm().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.zeros().long().cuda.index_copy_", "torch.zeros().long().cuda.index_copy_", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.randperm().long", "torch.randperm().long", "torch.randperm().long", "torch.randperm().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_shuffle_ids", "(", "bsz", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "is", "not", "None", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "epoch", ")", "\n", "", "forward_inds", "=", "torch", ".", "randperm", "(", "bsz", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "if", "epoch", "is", "None", ":", "\n", "            ", "torch", ".", "distributed", ".", "broadcast", "(", "forward_inds", ",", "src", "=", "0", ")", "\n", "", "backward_inds", "=", "torch", ".", "zeros", "(", "forward_inds", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "value", "=", "torch", ".", "arange", "(", "bsz", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "backward_inds", ".", "index_copy_", "(", "0", ",", "forward_inds", ",", "value", ")", "\n", "return", "forward_inds", ",", "backward_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.GaussianBlur.__init__": [[107, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.GaussianBlur.__call__": [[109, 113], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.dist_collect": [[34, 46], ["x.contiguous.contiguous", "torch.all_gather", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size"], "function", ["None"], ["", "", "def", "dist_collect", "(", "x", ")", ":", "\n", "    ", "\"\"\" collect all tensor from all GPUs\n    args:\n        x: shape (mini_batch, ...)\n    returns:\n        shape (mini_batch * num_gpu, ...)\n    \"\"\"", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "out_list", "=", "[", "torch", ".", "zeros_like", "(", "x", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "out_list", ",", "x", ",", "async_op", "=", "False", ")", "\n", "return", "torch", ".", "cat", "(", "out_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.reduce_tensor": [[48, 53], ["tensor.clone", "torch.all_reduce", "torch.get_world_size"], "function", ["None"], ["", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "dist", ".", "get_world_size", "(", ")", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.set_bn_train": [[89, 96], ["model.eval", "model.apply", "classname.find", "m.train"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.train"], ["", "", "def", "set_bn_train", "(", "model", ")", ":", "\n", "    ", "def", "set_bn_train_helper", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "train", "(", ")", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "set_bn_train_helper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.moment_update": [[98, 103], ["torch.no_grad", "torch.no_grad", "zip", "model.parameters", "model_ema.parameters"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "moment_update", "(", "model", ",", "model_ema", ",", "m", ")", ":", "\n", "    ", "\"\"\" model_ema = m * model_ema + (1 - m) model \"\"\"", "\n", "for", "p1", ",", "p2", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "model_ema", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "p2", ".", "data", "=", "p2", ".", "data", "*", "m", "+", "p1", ".", "data", "*", "(", "1", "-", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.load_pretrained": [[115, 130], ["torch.load", "torch.load", "model.load_state_dict", "logger", "logger", "logger", "len", "ckpt[].items", "k.startswith"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "", "def", "load_pretrained", "(", "args", ",", "model", ",", "logger", "=", "print", ")", ":", "\n", "    ", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "len", "(", "ckpt", ")", "==", "3", ":", "# moco initialization", "\n", "        ", "ckpt", "=", "{", "k", "[", "17", ":", "]", ":", "v", "for", "k", ",", "v", "in", "ckpt", "[", "'state_dict'", "]", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "}", "\n", "for", "fc", "in", "(", "'fc_inter'", ",", "'fc_intra'", ",", "'fc_order'", ")", ":", "\n", "            ", "ckpt", "[", "fc", "+", "'.0.weight'", "]", "=", "ckpt", "[", "'fc.0.weight'", "]", "\n", "ckpt", "[", "fc", "+", "'.0.bias'", "]", "=", "ckpt", "[", "'fc.0.bias'", "]", "\n", "ckpt", "[", "fc", "+", "'.2.weight'", "]", "=", "ckpt", "[", "'fc.2.weight'", "]", "\n", "ckpt", "[", "fc", "+", "'.2.bias'", "]", "=", "ckpt", "[", "'fc.2.bias'", "]", "\n", "", "", "else", ":", "\n", "        ", "ckpt", "=", "ckpt", "[", "'model'", "]", "\n", "", "[", "misskeys", ",", "unexpkeys", "]", "=", "model", ".", "load_state_dict", "(", "ckpt", ",", "strict", "=", "False", ")", "\n", "logger", "(", "'Missing keys: {}'", ".", "format", "(", "misskeys", ")", ")", "\n", "logger", "(", "'Unexpect keys: {}'", ".", "format", "(", "unexpkeys", ")", ")", "\n", "logger", "(", "\"==> loaded checkpoint '{}'\"", ".", "format", "(", "args", ".", "pretrained_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.load_checkpoint": [[132, 143], ["logger", "torch.load", "torch.load", "model.load_state_dict", "model_ema.load_state_dict", "contrast.load_state_dict", "optimizer.load_state_dict", "scheduler.load_state_dict", "torch.cuda.empty_cache", "torch.cuda.empty_cache"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "load_checkpoint", "(", "args", ",", "model", ",", "model_ema", ",", "contrast", ",", "optimizer", ",", "scheduler", ",", "logger", "=", "print", ")", ":", "\n", "    ", "logger", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "model_ema", ".", "load_state_dict", "(", "checkpoint", "[", "'model_ema'", "]", ")", "\n", "contrast", ".", "load_state_dict", "(", "checkpoint", "[", "'contrast'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.save_checkpoint": [[145, 159], ["logger", "torch.save", "torch.save", "model.state_dict", "model_ema.state_dict", "contrast.state_dict", "optimizer.state_dict", "scheduler.state_dict", "os.path.join", "torch.save", "torch.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "def", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "model_ema", ",", "contrast", ",", "optimizer", ",", "scheduler", ",", "logger", "=", "print", ")", ":", "\n", "    ", "logger", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'opt'", ":", "args", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'model_ema'", ":", "model_ema", ".", "state_dict", "(", ")", ",", "\n", "'contrast'", ":", "contrast", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'current.pth'", ")", ")", "\n", "if", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'ckpt_epoch_{}.pth'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.get_loader": [[161, 178], ["torchvision.transforms.Compose", "dataset.build_dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ColorJitter", "util.GaussianBlur"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_builder.build_dataset"], ["", "", "def", "get_loader", "(", "args", ")", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "cropsize", ",", "scale", "=", "(", "args", ".", "crop", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "train_dataset", "=", "build_dataset", "(", "args", ".", "dataset", ",", "args", ".", "data_dir", ",", "transform", "=", "train_transform", ",", "split", "=", "args", ".", "datasplit", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco.util.parse_option": [[180, 234], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'training'", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'root director of dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'KineticsClipFolderDatasetV2Order'", ",", "help", "=", "'dataset to training'", ")", "\n", "parser", ".", "add_argument", "(", "'--datasplit'", ",", "type", "=", "str", ",", "default", "=", "'train'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--crop'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'minimum crop'", ")", "\n", "parser", ".", "add_argument", "(", "'--cropsize'", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of workers to use'", ")", "\n", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--model_mlp'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "# loss function", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'exponential moving average weight'", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_k'", ",", "type", "=", "int", ",", "default", "=", "131072", ",", "help", "=", "'num negative sampler'", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_t'", ",", "type", "=", "float", ",", "default", "=", "0.10", ",", "help", "=", "'NCE temperature'", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_t_intra'", ",", "type", "=", "float", ",", "default", "=", "0.10", ",", "help", "=", "'NCE temperature'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--base_lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'base learning when batch size = 256. final lr is determined by linear scale'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scheduler'", ",", "type", "=", "str", ",", "default", "=", "'cosine'", ",", "\n", "choices", "=", "[", "\"cosine\"", "]", ",", "help", "=", "\"learning rate scheduler\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epoch'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'warmup epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_multiplier'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'warmup multiplier'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "int", ",", "default", "=", "[", "120", ",", "160", ",", "200", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'for step scheduler. where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'for step scheduler. decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum for SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'used for resume'", ")", "\n", "\n", "# io", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_model'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to pretrained weights like imagenet (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'./output'", ",", "help", "=", "'output director'", ")", "\n", "\n", "# misc", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "'local rank for DistributedDataParallel'", ")", "\n", "parser", ".", "add_argument", "(", "\"--broadcast_buffer\"", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'broadcast_buffer for DistributedDataParallel'", ")", "\n", "parser", ".", "add_argument", "(", "\"--rng_seed\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'manual seed'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_builder.build_dataset": [[6, 8], ["DATASETS.get"], "function", ["None"], ["def", "build_dataset", "(", "dataset", ",", "root", ",", "split", ",", "transform", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "DATASETS", ".", "get", "(", "dataset", ")", "(", "root", ",", "transform", ",", "split", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2.__init__": [[12, 45], ["super().__init__", "len", "print", "os.path.join", "os.path.exists", "dataset_kinetics_v2.KineticsClipFolderDatasetV2._load_list", "root.split", "os.path.join", "os.path.exists", "root.split", "os.path.join", "os.path.exists", "len", "os.path.exists", "print"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoDataset._load_list"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train_list'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KineticsClipFolderDatasetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "'##'", "in", "root", ":", "# super resource", "\n", "            ", "data_root_split", "=", "root", ".", "split", "(", "'##'", ")", "\n", "assert", "len", "(", "data_root_split", ")", "==", "2", "\n", "root", "=", "data_root_split", "[", "0", "]", "\n", "self", ".", "dataset_frame_root_ssd", "=", "os", ".", "path", ".", "join", "(", "data_root_split", "[", "1", "]", ",", "'data'", ")", "\n", "assert", "'#'", "not", "in", "self", ".", "dataset_frame_root_ssd", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "dataset_frame_root_ssd", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset_frame_root_ssd", "=", "None", "\n", "# dataset root", "\n", "", "if", "'#'", "in", "root", ":", "# multiple data resources", "\n", "            ", "self", ".", "dataset_root", "=", "root", ".", "split", "(", "'#'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset_root", "=", "[", "root", "]", "\n", "", "for", "p", "in", "self", ".", "dataset_root", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "                ", "print", "(", "p", ")", "\n", "assert", "False", "\n", "", "", "self", ".", "dataset_root_num", "=", "len", "(", "self", ".", "dataset_root", ")", "\n", "print", "(", "'using {} data sources'", ".", "format", "(", "self", ".", "dataset_root_num", ")", ")", "\n", "# data frame root", "\n", "self", ".", "dataset_frame_root", "=", "[", "os", ".", "path", ".", "join", "(", "p", ",", "'data'", ")", "for", "p", "in", "self", ".", "dataset_root", "]", "\n", "for", "p", "in", "self", ".", "dataset_frame_root", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "p", ")", "\n", "# data list file", "\n", "", "assert", "split", "in", "(", "'train_list'", ",", "'val_list'", ")", "\n", "self", ".", "dataset_list_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_root", "[", "0", "]", ",", "split", "+", "'.txt'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "dataset_list_file", ")", "\n", "# load vid samples", "\n", "self", ".", "samples", "=", "self", ".", "_load_list", "(", "self", ".", "dataset_list_file", ")", "\n", "self", ".", "transform", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame": [[46, 54], ["PIL.Image.open", "PIL.Image.open.convert", "os.path.join", "dataset_kinetics_v2.KineticsClipFolderDatasetV2.transform"], "methods", ["None"], ["", "def", "_get_aug_frame", "(", "self", ",", "frame_root", ",", "frame_idx", ")", ":", "\n", "        ", "frame", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "frame_root", ",", "'frame_{:06d}.jpg'", ".", "format", "(", "frame_idx", ")", ")", ")", "\n", "frame", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "frame_aug", "=", "self", ".", "transform", "(", "frame", ")", "\n", "", "else", ":", "\n", "            ", "frame_aug", "=", "frame", "\n", "", "return", "frame_aug", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._load_list": [[55, 68], ["enumerate", "open", "f.readlines", "l.strip().split", "vids.append", "os.path.exists", "os.path.join", "os.path.join", "l.strip", "os.path.join", "int", "int"], "methods", ["None"], ["", "def", "_load_list", "(", "self", ",", "list_root", ")", ":", "\n", "        ", "with", "open", "(", "list_root", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "vids", "=", "[", "]", "\n", "for", "k", ",", "l", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "lsp", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "# path, frame, label", "\n", "if", "self", ".", "dataset_frame_root_ssd", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_frame_root_ssd", ",", "lsp", "[", "0", "]", ")", ")", ":", "\n", "                ", "vid_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_frame_root_ssd", ",", "lsp", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "vid_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_frame_root", "[", "k", "%", "self", ".", "dataset_root_num", "]", ",", "lsp", "[", "0", "]", ")", "\n", "", "vids", ".", "append", "(", "(", "vid_root", ",", "int", "(", "lsp", "[", "1", "]", ")", ",", "int", "(", "lsp", "[", "2", "]", ")", ")", ")", "\n", "", "return", "vids", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2.__len__": [[69, 71], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2.__getitem__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2MultiFrames.__init__": [[78, 83], ["dataset_kinetics_v2.KineticsClipFolderDatasetV2.__init__"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "split", "=", "'train_list'", ",", "sample_num", "=", "0", ")", ":", "\n", "        ", "super", "(", "KineticsClipFolderDatasetV2MultiFrames", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "sample_num", "=", "sample_num", "\n", "assert", "self", ".", "transform", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2MultiFrames.__getitem__": [[84, 90], ["numpy.round().astype", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.round", "dataset_kinetics_v2.KineticsClipFolderDatasetV2MultiFrames._get_aug_frame", "numpy.linspace", "range"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "frame_root", ",", "frame_num", ",", "cls", "=", "self", ".", "samples", "[", "item", "]", "\n", "sample_num", "=", "frame_num", "if", "self", ".", "sample_num", "<=", "0", "or", "self", ".", "sample_num", ">", "frame_num", "else", "self", ".", "sample_num", "\n", "frame_indices", "=", "np", ".", "round", "(", "np", ".", "linspace", "(", "1", ",", "frame_num", ",", "num", "=", "sample_num", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "frames", "=", "torch", ".", "cat", "(", "[", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_indices", "[", "i", "]", ")", "for", "i", "in", "range", "(", "sample_num", ")", "]", ",", "dim", "=", "0", ")", "\n", "return", "frames", ",", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2Pair.__init__": [[94, 98], ["dataset_kinetics_v2.KineticsClipFolderDatasetV2.__init__"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "split", "=", "'train_list'", ")", ":", "\n", "        ", "super", "(", "KineticsClipFolderDatasetV2Pair", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "assert", "self", ".", "transform", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2Pair.__getitem__": [[99, 111], ["random.randint", "dataset_kinetics_v2.KineticsClipFolderDatasetV2Pair._get_aug_frame", "dataset_kinetics_v2.KineticsClipFolderDatasetV2Pair._get_aug_frame", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "frame_root", ",", "frame_num", ",", "cls", "=", "self", ".", "samples", "[", "item", "]", "\n", "rand_segment", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "rand_segment", "==", "0", ":", "\n", "            ", "frame_idx_1", "=", "random", ".", "randint", "(", "1", ",", "frame_num", "//", "2", ")", "\n", "frame_idx_2", "=", "random", ".", "randint", "(", "frame_num", "//", "2", "+", "1", ",", "frame_num", ")", "\n", "", "else", ":", "\n", "            ", "frame_idx_2", "=", "random", ".", "randint", "(", "1", ",", "frame_num", "//", "2", ")", "\n", "frame_idx_1", "=", "random", ".", "randint", "(", "frame_num", "//", "2", "+", "1", ",", "frame_num", ")", "\n", "", "frame_aug1", "=", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_idx_1", ")", "\n", "frame_aug2", "=", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_idx_2", ")", "\n", "return", "frame_aug1", ",", "frame_aug2", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2Triplet.__init__": [[115, 119], ["dataset_kinetics_v2.KineticsClipFolderDatasetV2.__init__"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "split", "=", "'train_list'", ")", ":", "\n", "        ", "super", "(", "KineticsClipFolderDatasetV2Triplet", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "assert", "self", ".", "transform", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2Triplet.__getitem__": [[120, 133], ["random.randint", "dataset_kinetics_v2.KineticsClipFolderDatasetV2Triplet._get_aug_frame", "dataset_kinetics_v2.KineticsClipFolderDatasetV2Triplet._get_aug_frame", "dataset_kinetics_v2.KineticsClipFolderDatasetV2Triplet._get_aug_frame", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "frame_root", ",", "frame_num", ",", "cls", "=", "self", ".", "samples", "[", "item", "]", "\n", "rand_segment", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "rand_segment", "==", "0", ":", "\n", "            ", "frame_idx_1", "=", "random", ".", "randint", "(", "1", ",", "frame_num", "//", "2", ")", "\n", "frame_idx_2", "=", "random", ".", "randint", "(", "frame_num", "//", "2", "+", "1", ",", "frame_num", ")", "\n", "", "else", ":", "\n", "            ", "frame_idx_2", "=", "random", ".", "randint", "(", "1", ",", "frame_num", "//", "2", ")", "\n", "frame_idx_1", "=", "random", ".", "randint", "(", "frame_num", "//", "2", "+", "1", ",", "frame_num", ")", "\n", "", "frame1_aug1", "=", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_idx_1", ")", "\n", "frame1_aug2", "=", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_idx_1", ")", "\n", "frame2_aug", "=", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_idx_2", ")", "\n", "return", "frame1_aug1", ",", "frame1_aug2", ",", "frame2_aug", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2Order.__init__": [[137, 141], ["dataset_kinetics_v2.KineticsClipFolderDatasetV2.__init__"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "split", "=", "'train_list'", ")", ":", "\n", "        ", "super", "(", "KineticsClipFolderDatasetV2Order", ",", "self", ")", ".", "__init__", "(", "root", ",", "split", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "assert", "self", ".", "transform", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2Order.__getitem__": [[142, 160], ["random.randint", "dataset_kinetics_v2.KineticsClipFolderDatasetV2Order._get_aug_frame", "dataset_kinetics_v2.KineticsClipFolderDatasetV2Order._get_aug_frame", "dataset_kinetics_v2.KineticsClipFolderDatasetV2Order._get_aug_frame", "dataset_kinetics_v2.KineticsClipFolderDatasetV2Order._get_aug_frame", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.dataset_kinetics_v2.KineticsClipFolderDatasetV2._get_aug_frame"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "frame_root", ",", "frame_num", ",", "cls", "=", "self", ".", "samples", "[", "item", "]", "\n", "rand_segment", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "rand_segment", "==", "0", ":", "\n", "            ", "frame_idx_1", "=", "random", ".", "randint", "(", "1", ",", "frame_num", "//", "2", ")", "\n", "frame_idx_2", "=", "random", ".", "randint", "(", "frame_num", "//", "2", "+", "1", ",", "frame_num", ")", "\n", "frame_idx_3", "=", "random", ".", "randint", "(", "frame_num", "//", "2", "+", "1", ",", "frame_num", ")", "\n", "", "else", ":", "\n", "            ", "frame_idx_1", "=", "random", ".", "randint", "(", "frame_num", "//", "2", "+", "1", ",", "frame_num", ")", "\n", "frame_idx_2", "=", "random", ".", "randint", "(", "1", ",", "frame_num", "//", "2", ")", "\n", "frame_idx_3", "=", "random", ".", "randint", "(", "1", ",", "frame_num", "//", "2", ")", "\n", "", "if", "frame_idx_2", ">", "frame_idx_3", ":", "\n", "            ", "frame_idx_2", ",", "frame_idx_3", "=", "frame_idx_3", ",", "frame_idx_2", "\n", "", "frame1_aug1", "=", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_idx_1", ")", "\n", "frame1_aug2", "=", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_idx_1", ")", "\n", "frame2_aug", "=", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_idx_2", ")", "\n", "frame3_aug", "=", "self", ".", "_get_aug_frame", "(", "frame_root", ",", "frame_idx_3", ")", "\n", "return", "frame1_aug1", ",", "frame1_aug2", ",", "frame2_aug", ",", "frame3_aug", ",", "rand_segment", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoDataset.__init__": [[11, 24], ["super().__init__", "video_dataset.VideoDataset._load_list"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoDataset._load_list"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "transform", ",", "root_path", ",", "clip_length", "=", "1", ",", "num_steps", "=", "1", ",", "num_segments", "=", "1", ",", "num_channels", "=", "3", ",", "\n", "format", "=", "\"LMDB\"", ")", ":", "\n", "        ", "super", "(", "VideoDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "list_file", "=", "list_file", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "clip_length", "=", "clip_length", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "format", "=", "format", "\n", "\n", "self", ".", "samples", "=", "self", ".", "_load_list", "(", "list_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoDataset._load_list": [[25, 29], ["open", "f.readlines"], "methods", ["None"], ["", "def", "_load_list", "(", "self", ",", "list_root", ")", ":", "\n", "        ", "with", "open", "(", "list_root", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "samples", "=", "f", ".", "readlines", "(", ")", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoDataset._parse_rgb_lmdb": [[30, 43], ["lmdb.open", "lmdb.open.close", "os.path.join", "lmdb.open.begin", "range", "io.BytesIO", "PIL.Image.open().convert", "image_list.append", "lmdb_txn.get", "PIL.Image.open"], "methods", ["None"], ["", "def", "_parse_rgb_lmdb", "(", "self", ",", "video_path", ",", "offsets", ")", ":", "\n", "        ", "\"\"\"Return the clip buffer sample from video lmdb.\"\"\"", "\n", "lmdb_env", "=", "lmdb", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "video_path", ")", ",", "readonly", "=", "True", ")", "\n", "\n", "with", "lmdb_env", ".", "begin", "(", ")", "as", "lmdb_txn", ":", "\n", "            ", "image_list", "=", "[", "]", "\n", "for", "offset", "in", "offsets", ":", "\n", "                ", "for", "frame_id", "in", "range", "(", "offset", "+", "1", ",", "offset", "+", "self", ".", "num_steps", "*", "self", ".", "clip_length", "+", "1", ",", "self", ".", "num_steps", ")", ":", "\n", "                    ", "bio", "=", "io", ".", "BytesIO", "(", "lmdb_txn", ".", "get", "(", "'image_{:05d}.jpg'", ".", "format", "(", "frame_id", ")", ".", "encode", "(", ")", ")", ")", "\n", "image", "=", "Image", ".", "open", "(", "bio", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image_list", ".", "append", "(", "image", ")", "\n", "", "", "", "lmdb_env", ".", "close", "(", ")", "\n", "return", "image_list", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoDataset.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoDataset.__getitem__": [[47, 49], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoTrainDataset._parse_sample_str": [[52, 75], ["sample.split", "int", "int", "range", "offsets.append", "range", "print", "float", "float", "offsets.append", "len", "random.randint", "random.randint", "int", "len", "int"], "methods", ["None"], ["    ", "def", "_parse_sample_str", "(", "self", ",", "sample", ",", "video_idx", ")", ":", "\n", "        ", "ss", "=", "sample", ".", "split", "(", "' '", ")", "\n", "video_path", "=", "sample", "[", ":", "-", "len", "(", "ss", "[", "-", "1", "]", ")", "-", "1", "-", "len", "(", "ss", "[", "-", "2", "]", ")", "-", "1", "]", "\n", "duration", "=", "int", "(", "ss", "[", "-", "2", "]", ")", "\n", "\n", "label", "=", "int", "(", "ss", "[", "-", "1", "]", "[", ":", "-", "1", "]", ")", "\n", "\n", "# sample frames offsets", "\n", "offsets", "=", "[", "]", "\n", "length_ext", "=", "self", ".", "clip_length", "*", "self", ".", "num_steps", "\n", "ave_duration", "=", "duration", "//", "self", ".", "num_segments", "\n", "if", "ave_duration", ">=", "length_ext", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_segments", ")", ":", "\n", "                ", "offsets", ".", "append", "(", "random", ".", "randint", "(", "0", ",", "ave_duration", "-", "length_ext", ")", "+", "i", "*", "ave_duration", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "duration", ">=", "length_ext", ":", "\n", "                ", "float_ave_duration", "=", "float", "(", "duration", "-", "length_ext", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_segments", ")", ":", "\n", "                    ", "offsets", ".", "append", "(", "random", ".", "randint", "(", "0", ",", "int", "(", "float_ave_duration", ")", ")", "+", "int", "(", "i", "*", "float_ave_duration", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'{},duration={}, length_ext={}'", ".", "format", "(", "video_path", ",", "duration", ",", "length_ext", ")", ")", "\n", "raise", "NotImplementedError", "\n", "", "", "return", "video_path", ",", "offsets", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoTestDataset.__init__": [[78, 83], ["video_dataset.VideoDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "num_clips", ",", "transform", ",", "root_path", ",", "clip_length", "=", "1", ",", "num_steps", "=", "1", ",", "num_segments", "=", "1", ",", "\n", "num_channels", "=", "3", ",", "format", "=", "\"LMDB\"", ")", ":", "\n", "        ", "super", "(", "VideoTestDataset", ",", "self", ")", ".", "__init__", "(", "list_file", ",", "transform", ",", "root_path", ",", "clip_length", ",", "num_steps", ",", "num_segments", ",", "\n", "num_channels", ",", "format", ")", "\n", "self", ".", "num_clips", "=", "num_clips", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoTestDataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "*", "self", ".", "num_clips", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoTestDataset._parse_sample_str": [[87, 110], ["sample.split", "int", "int", "range", "offsets.append", "range", "float", "float", "offsets.append", "len", "int", "int", "int", "len", "float"], "methods", ["None"], ["", "def", "_parse_sample_str", "(", "self", ",", "sample", ",", "video_idx", ",", "clip_idx", ")", ":", "\n", "        ", "ss", "=", "sample", ".", "split", "(", "' '", ")", "\n", "video_path", "=", "sample", "[", ":", "-", "len", "(", "ss", "[", "-", "1", "]", ")", "-", "1", "-", "len", "(", "ss", "[", "-", "2", "]", ")", "-", "1", "]", "\n", "duration", "=", "int", "(", "ss", "[", "-", "2", "]", ")", "\n", "\n", "label", "=", "int", "(", "ss", "[", "-", "1", "]", "[", ":", "-", "1", "]", ")", "\n", "\n", "# sample frames offsets", "\n", "offsets", "=", "[", "]", "\n", "length_ext", "=", "self", ".", "clip_length", "*", "self", ".", "num_steps", "\n", "ave_duration", "=", "duration", "//", "self", ".", "num_segments", "\n", "if", "ave_duration", ">=", "length_ext", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_segments", ")", ":", "\n", "                ", "offsets", ".", "append", "(", "int", "(", "float", "(", "ave_duration", "-", "length_ext", ")", "*", "clip_idx", "/", "self", ".", "num_clips", ")", "+", "i", "*", "ave_duration", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "duration", ">=", "length_ext", ":", "\n", "                ", "float_ave_duration", "=", "float", "(", "duration", "-", "length_ext", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_segments", ")", ":", "\n", "                    ", "offsets", ".", "append", "(", "\n", "int", "(", "float_ave_duration", "*", "clip_idx", "/", "self", ".", "num_clips", ")", "+", "int", "(", "i", "*", "float_ave_duration", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "return", "video_path", ",", "offsets", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoRGBTrainDataset.__getitem__": [[113, 119], ["video_dataset.VideoRGBTrainDataset._parse_sample_str", "video_dataset.VideoRGBTrainDataset._parse_rgb_lmdb", "video_dataset.VideoRGBTrainDataset.transform"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoTestDataset._parse_sample_str", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoDataset._parse_rgb_lmdb"], ["    ", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "video_path", ",", "offsets", ",", "label", "=", "self", ".", "_parse_sample_str", "(", "self", ".", "samples", "[", "item", "]", ",", "item", ")", "\n", "image_list", "=", "self", ".", "_parse_rgb_lmdb", "(", "video_path", ",", "offsets", ")", "\n", "\n", "trans_image_list", "=", "self", ".", "transform", "(", "image_list", ")", "\n", "return", "trans_image_list", ",", "label", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoRGBTestDataset.__getitem__": [[122, 133], ["video_dataset.VideoRGBTestDataset._parse_sample_str", "video_dataset.VideoRGBTestDataset._parse_rgb_lmdb", "video_dataset.VideoRGBTestDataset.transform", "os.path.join", "FileNotFoundError"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoTestDataset._parse_sample_str", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.dataset.video_dataset.VideoDataset._parse_rgb_lmdb"], ["    ", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "item_in", "=", "item", "%", "self", ".", "num_clips", "\n", "item_out", "=", "item", "//", "self", ".", "num_clips", "\n", "\n", "video_path", ",", "offsets", ",", "label", "=", "self", ".", "_parse_sample_str", "(", "self", ".", "samples", "[", "item_out", "]", ",", "item_out", ",", "item_in", ")", "\n", "if", "not", "os", ".", "path", ".", "join", "(", "video_path", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "video_path", ")", "\n", "", "image_list", "=", "self", ".", "_parse_rgb_lmdb", "(", "video_path", ",", "offsets", ")", "\n", "\n", "trans_image_list", "=", "self", ".", "transform", "(", "image_list", ")", "\n", "return", "trans_image_list", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.eval.parse_option": [[19, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'training'", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--list-file'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'list of dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--root-path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'root path of dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--format'", ",", "type", "=", "str", ",", "default", "=", "'LMDB'", ",", "\n", "choices", "=", "[", "\"LMDB\"", "]", ",", "help", "=", "\"video format\"", ")", "\n", "# other parameters", "\n", "parser", ".", "add_argument", "(", "'--time-dim'", ",", "type", "=", "str", ",", "default", "=", "'C'", ",", "\n", "choices", "=", "[", "\"T\"", ",", "\"C\"", "]", ",", "help", "=", "\"dimension for time\"", ")", "\n", "parser", ".", "add_argument", "(", "'--crop-size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'crop_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "required", "=", "True", ",", "help", "=", "'num of predict classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of workers to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-length'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'num of clip length'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-steps'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'num of sampling steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-segments'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'num of segments'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-clips'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'num of sampled clips'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-gpu'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'num of gpu'", ")", "\n", "\n", "# network", "\n", "parser", ".", "add_argument", "(", "'--net-name'", ",", "type", "=", "str", ",", "default", "=", "'resnet50'", ",", "help", "=", "'name of network architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--pooling-name'", ",", "type", "=", "str", ",", "default", "=", "'PoolingAverage'", ",", "help", "=", "'name of pooling architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout-ratio'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'dropout ratio'", ")", "\n", "\n", "# io", "\n", "parser", ".", "add_argument", "(", "'--pretrained-model'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to pretrained weights like imagenet (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-dir'", ",", "type", "=", "str", ",", "default", "=", "'./output'", ",", "help", "=", "'output director'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-crop'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'the place index [0,1,2]'", ")", "\n", "\n", "# misc", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "'local rank for DistributedDataParallel'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.eval.get_loader": [[58, 86], ["torchvision.transforms.Compose", "dataset.video_dataset.VideoRGBTestDataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "seco_util.clip_transforms.ClipResize", "crop", "seco_util.clip_transforms.ToClipTensor", "seco_util.clip_transforms.ClipNormalize", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "get_loader", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "crop_idx", "==", "0", ":", "\n", "        ", "crop", "=", "clip_transforms", ".", "ClipCenterCrop", "\n", "", "elif", "args", ".", "crop_idx", "==", "1", ":", "\n", "        ", "crop", "=", "clip_transforms", ".", "ClipFirstCrop", "\n", "", "elif", "args", ".", "crop_idx", "==", "2", ":", "\n", "        ", "crop", "=", "clip_transforms", ".", "ClipThirdCrop", "\n", "\n", "", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "clip_transforms", ".", "ClipResize", "(", "size", "=", "args", ".", "crop_size", ")", ",", "\n", "crop", "(", "size", "=", "args", ".", "crop_size", ")", ",", "\n", "clip_transforms", ".", "ToClipTensor", "(", ")", ",", "\n", "clip_transforms", ".", "ClipNormalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "clip", ":", "torch", ".", "stack", "(", "clip", ",", "dim", "=", "1", ")", ")", "if", "args", ".", "time_dim", "==", "\"T\"", "else", "transforms", ".", "Lambda", "(", "\n", "lambda", "clip", ":", "torch", ".", "cat", "(", "clip", ",", "dim", "=", "0", ")", ")", "\n", "]", ")", "\n", "\n", "test_dataset", "=", "VideoRGBTestDataset", "(", "args", ".", "list_file", ",", "num_clips", "=", "args", ".", "num_clips", ",", "\n", "transform", "=", "test_transform", ",", "root_path", "=", "args", ".", "root_path", ",", "\n", "clip_length", "=", "args", ".", "clip_length", ",", "num_steps", "=", "args", ".", "num_steps", ",", "\n", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "format", "=", "args", ".", "format", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_dataset", ",", "shuffle", "=", "False", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "test_sampler", ",", "drop_last", "=", "False", ")", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.eval.build_model": [[88, 93], ["model.model_factory.get_model_by_name().cuda", "eval.load_pretrained", "model.model_factory.get_model_by_name"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.load_pretrained", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.model_factory.get_model_by_name"], ["", "def", "build_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "get_model_by_name", "(", "net_name", "=", "args", ".", "net_name", ",", "num_classes", "=", "args", ".", "num_classes", ",", "dropout_ratio", "=", "args", ".", "dropout_ratio", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "pretrained_model", ":", "\n", "        ", "load_pretrained", "(", "args", ",", "model", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.eval.load_pretrained": [[95, 106], ["torch.load", "torch.load", "torch.load", "model.load_state_dict", "logger.info", "logger.info", "logger.info", "k.replace", "ckpt[].items"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "load_pretrained", "(", "args", ",", "model", ")", ":", "\n", "    ", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "'model'", "in", "ckpt", ":", "\n", "        ", "state_dict", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "ckpt", "[", "'model'", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "ckpt", "\n", "\n", "", "[", "misskeys", ",", "unexpkeys", "]", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Missing keys: {}'", ".", "format", "(", "misskeys", ")", ")", "\n", "logger", ".", "info", "(", "'Unexpect keys: {}'", ".", "format", "(", "unexpkeys", ")", ")", "\n", "logger", ".", "info", "(", "\"==> loaded checkpoint '{}'\"", ".", "format", "(", "args", ".", "pretrained_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.eval.merge_score": [[107, 146], ["range", "numpy.zeros", "open().readlines", "enumerate", "np.zeros.mean().argmax", "logger.info", "range", "numpy.empty", "range", "line.split", "int", "all_data.append", "numpy.zeros", "numpy.reshape", "open", "np.zeros.mean", "numpy.load", "os.path.join", "str"], "function", ["None"], ["", "def", "merge_score", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "num_gpu", "=", "opt", ".", "num_gpu", "\n", "num_crop", "=", "opt", ".", "num_crop", "\n", "num_cls", "=", "opt", ".", "num_classes", "\n", "num_clip", "=", "opt", ".", "num_clips", "\n", "score_dir", "=", "opt", ".", "output_dir", "\n", "list_dir", "=", "opt", ".", "list_file", "\n", "\n", "for", "crop_id", "in", "range", "(", "num_crop", ")", ":", "\n", "        ", "all_num", "=", "0", "\n", "all_data", "=", "[", "]", "\n", "for", "gpu_id", "in", "range", "(", "num_gpu", ")", ":", "\n", "            ", "all_data", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "score_dir", ",", "'all_scores_'", "+", "str", "(", "crop_id", "*", "num_gpu", "+", "gpu_id", ")", "+", "'.npy'", ")", ")", ")", "\n", "all_num", "+=", "all_data", "[", "-", "1", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "merge_data", "=", "np", ".", "empty", "(", "(", "all_num", ",", "num_cls", ")", ")", "\n", "for", "gpu_id", "in", "range", "(", "num_gpu", ")", ":", "\n", "            ", "merge_data", "[", "gpu_id", ":", ":", "num_gpu", ",", ":", "]", "=", "all_data", "[", "gpu_id", "]", "\n", "\n", "# make ave score", "\n", "", "num_video", "=", "all_num", "//", "num_clip", "\n", "merge_data", "=", "merge_data", "[", "0", ":", "num_video", "*", "num_clip", ",", ":", "]", "\n", "if", "crop_id", "==", "0", ":", "\n", "            ", "reshape_data", "=", "np", ".", "zeros", "(", "(", "num_video", ",", "num_clip", ",", "num_cls", ")", ")", "\n", "\n", "", "reshape_data", "+=", "np", ".", "reshape", "(", "merge_data", ",", "(", "num_video", ",", "num_clip", ",", "num_cls", ")", ")", "/", "num_crop", "\n", "\n", "# make gt", "\n", "", "gt", "=", "np", ".", "zeros", "(", "(", "num_video", ",", ")", ")", "\n", "lines", "=", "open", "(", "list_dir", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "ss", "=", "line", ".", "split", "(", "' '", ")", "\n", "label", "=", "ss", "[", "-", "1", "]", "\n", "gt", "[", "idx", "]", "=", "int", "(", "label", ")", "\n", "\n", "", "pred", "=", "(", "reshape_data", ".", "mean", "(", "axis", "=", "1", ")", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "acc", "=", "(", "pred", "==", "gt", ")", ".", "mean", "(", ")", "\n", "\n", "logger", ".", "info", "(", "'Top-1 accuracy is {}'", ".", "format", "(", "acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.eval.main": [[148, 183], ["eval.build_model", "torch.nn.parallel.DistributedDataParallel.eval", "torch.nn.parallel.DistributedDataParallel", "range", "torch.barrier", "eval.merge_score", "logger.info", "eval.get_loader", "len", "logger.info", "numpy.zeros", "numpy.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "os.path.join", "x.size", "torch.nn.parallel.DistributedDataParallel.", "isinstance", "len", "logger.info", "model.data.cpu().numpy", "len", "len", "score[].data.cpu().numpy", "score[].data.cpu().numpy", "model.data.cpu", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "score[].data.cpu", "score[].data.cpu"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.build_model", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.eval.merge_score", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.get_loader"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "model", "=", "build_model", "(", "args", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "num_crop", ")", ":", "\n", "        ", "args", ".", "crop_idx", "=", "i", "\n", "test_loader", "=", "get_loader", "(", "args", ")", "\n", "n_data", "=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "\"{}th crop for testing, length of testing dataset: {}\"", ".", "format", "(", "i", ",", "n_data", ")", ")", "\n", "\n", "# routine", "\n", "all_scores", "=", "np", ".", "zeros", "(", "[", "len", "(", "test_loader", ")", "*", "args", ".", "batch_size", ",", "args", ".", "num_classes", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "top_idx", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", ",", "(", "x", ",", "cls", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "                ", "if", "(", "idx", "%", "100", "==", "0", ")", "or", "(", "idx", "==", "len", "(", "test_loader", ")", "-", "1", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "'{}/{}'", ".", "format", "(", "idx", ",", "len", "(", "test_loader", ")", ")", ")", "\n", "", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "score", "=", "model", "(", "x", ")", "\n", "if", "isinstance", "(", "score", ",", "list", ")", ":", "\n", "                    ", "score_numpy", "=", "(", "score", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "score", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "                    ", "score_numpy", "=", "score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "all_scores", "[", "top_idx", ":", "top_idx", "+", "bsz", ",", ":", "]", "=", "score_numpy", "\n", "top_idx", "+=", "bsz", "\n", "\n", "", "", "all_scores", "=", "all_scores", "[", ":", "top_idx", ",", ":", "]", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'all_scores_{}.npy'", ".", "format", "(", "\n", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "*", "args", ".", "crop_idx", "+", "args", ".", "local_rank", ")", ")", ",", "all_scores", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "# evaluate", "\n", "merge_score", "(", "args", ",", "logger", ")", "\n", "logger", ".", "info", "(", "'Finish !'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.str2bool": [[23, 30], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Unsupported value encountered.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.parse_option": [[32, 93], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'training'", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset-class'", ",", "type", "=", "str", ",", "default", "=", "'video_dataset'", ",", "\n", "choices", "=", "[", "\"video_dataset\"", "]", ",", "help", "=", "\"class of dataset\"", ")", "\n", "# for video_dataset", "\n", "parser", ".", "add_argument", "(", "'--list-file'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path of list file'", ")", "\n", "parser", ".", "add_argument", "(", "'--root-path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path of root folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--format'", ",", "type", "=", "str", ",", "default", "=", "'LMDB'", ",", "\n", "choices", "=", "[", "\"LMDB\"", "]", ",", "help", "=", "\"video format\"", ")", "\n", "# other parameters", "\n", "parser", ".", "add_argument", "(", "'--time-dim'", ",", "type", "=", "str", ",", "default", "=", "'C'", ",", "\n", "choices", "=", "[", "\"T\"", ",", "\"C\"", "]", ",", "help", "=", "\"dimension for time\"", ")", "\n", "parser", ".", "add_argument", "(", "'--crop-size'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "'crop_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "default", "=", "101", ",", "required", "=", "True", ",", "help", "=", "'num of predict classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--iter-size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'iter_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of workers to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-segments'", ",", "type", "=", "int", ",", "default", "=", "7", ",", "help", "=", "'num of segments'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-length'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'num of clip length'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-steps'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'num of sampling steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--horizontal-flip'", ",", "type", "=", "str2bool", ",", "default", "=", "'true'", ",", "help", "=", "'if horizontal flip the data'", ")", "\n", "\n", "# network", "\n", "parser", ".", "add_argument", "(", "'--net-name'", ",", "type", "=", "str", ",", "default", "=", "'resnet50'", ",", "help", "=", "'name of network architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--pooling-name'", ",", "type", "=", "str", ",", "default", "=", "'PoolingAverage'", ",", "help", "=", "'name of pooling architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout-ratio'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'dropout ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--frozen-bn'", ",", "type", "=", "str2bool", ",", "default", "=", "'True'", ",", "help", "=", "'if frozen batch_norm layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--transfer-weights'", ",", "type", "=", "str2bool", ",", "default", "=", "'true'", ",", "help", "=", "'if transfer weights from 2D network'", ")", "\n", "parser", ".", "add_argument", "(", "'--remove-fc'", ",", "type", "=", "str2bool", ",", "default", "=", "'true'", ",", "help", "=", "'if initialized weights for fc layer'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--base-learning-rate'", ",", "'--base-lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'warmup epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-multiplier'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'warmup multiplier'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-decay-epochs'", ",", "type", "=", "int", ",", "default", "=", "[", "50", ",", "100", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'for step scheduler. where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-decay-rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'for step scheduler. decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-scheduler'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "\n", "choices", "=", "[", "\"step\"", ",", "\"cosine\"", "]", ",", "help", "=", "\"learning rate scheduler\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum for SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-gradient'", ",", "type", "=", "float", ",", "default", "=", "40", ",", "help", "=", "'norm to clip gradient'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'loss weight'", ")", "\n", "parser", ".", "add_argument", "(", "'--label-smooth'", ",", "type", "=", "str2bool", ",", "default", "=", "'false'", ",", "help", "=", "'if apply label smooth'", ")", "\n", "\n", "# io", "\n", "parser", ".", "add_argument", "(", "'--pretrained-model'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to pretrained weights like imagenet (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--print-freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-dir'", ",", "type", "=", "str", ",", "default", "=", "'./output'", ",", "help", "=", "'output director'", ")", "\n", "\n", "# misc", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "'local rank for DistributedDataParallel'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.get_loader": [[95, 123], ["torchvision.transforms.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.video_dataset.VideoRGBTrainDataset", "seco_util.clip_transforms.ClipRandomResizedCrop", "torchvision.transforms.RandomApply", "seco_util.clip_transforms.ClipRandomGrayscale", "torchvision.transforms.RandomApply", "seco_util.clip_transforms.ClipRandomHorizontalFlip", "seco_util.clip_transforms.ToClipTensor", "seco_util.clip_transforms.ClipNormalize", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "seco_util.clip_transforms.ClipColorJitter", "seco_util.util.ClipGaussianBlur", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "get_loader", "(", "args", ")", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "clip_transforms", ".", "ClipRandomResizedCrop", "(", "args", ".", "crop_size", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ",", "ratio", "=", "(", "0.75", ",", "1.3333333333333333", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "clip_transforms", ".", "ClipColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "clip_transforms", ".", "ClipRandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "ClipGaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "clip_transforms", ".", "ClipRandomHorizontalFlip", "(", "p", "=", "0.5", "if", "args", ".", "horizontal_flip", "else", "0", ")", ",", "\n", "clip_transforms", ".", "ToClipTensor", "(", ")", ",", "\n", "clip_transforms", ".", "ClipNormalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "clip", ":", "torch", ".", "stack", "(", "clip", ",", "dim", "=", "1", ")", ")", "if", "args", ".", "time_dim", "==", "\"T\"", "else", "transforms", ".", "Lambda", "(", "\n", "lambda", "clip", ":", "torch", ".", "cat", "(", "clip", ",", "dim", "=", "0", ")", ")", "\n", "]", ")", "\n", "\n", "if", "args", ".", "dataset_class", "==", "'video_dataset'", ":", "\n", "        ", "assert", "(", "args", ".", "list_file", "!=", "''", "and", "args", ".", "root_path", "!=", "''", ")", "\n", "train_dataset", "=", "VideoRGBTrainDataset", "(", "list_file", "=", "args", ".", "list_file", ",", "root_path", "=", "args", ".", "root_path", ",", "\n", "transform", "=", "train_transform", ",", "clip_length", "=", "args", ".", "clip_length", ",", "\n", "num_steps", "=", "args", ".", "num_steps", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "format", "=", "args", ".", "format", ")", "\n", "\n", "", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.build_model": [[125, 130], ["model.model_factory.get_model_by_name().cuda", "train.load_pretrained", "model.model_factory.get_model_by_name"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.load_pretrained", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.model_factory.get_model_by_name"], ["", "def", "build_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "get_model_by_name", "(", "net_name", "=", "args", ".", "net_name", ",", "num_classes", "=", "args", ".", "num_classes", ",", "dropout_ratio", "=", "args", ".", "dropout_ratio", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "pretrained_model", ":", "\n", "        ", "load_pretrained", "(", "args", ",", "model", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.load_pretrained": [[132, 149], ["torch.load", "torch.load", "torch.load", "model.load_state_dict", "logger.info", "logger.info", "logger.info", "model.model_factory.transfer_weights", "model.model_factory.remove_fc", "k.replace", "ckpt[].items"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.model_factory.transfer_weights", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.model_factory.remove_fc"], ["", "def", "load_pretrained", "(", "args", ",", "model", ")", ":", "\n", "    ", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "'model'", "in", "ckpt", ":", "\n", "        ", "state_dict", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "ckpt", "[", "'model'", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "ckpt", "\n", "\n", "# convert initial weights", "\n", "", "if", "args", ".", "transfer_weights", ":", "\n", "        ", "state_dict", "=", "transfer_weights", "(", "args", ".", "net_name", ",", "state_dict", ")", "\n", "", "if", "args", ".", "remove_fc", ":", "\n", "        ", "state_dict", "=", "remove_fc", "(", "args", ".", "net_name", ",", "state_dict", ")", "\n", "\n", "", "[", "misskeys", ",", "unexpkeys", "]", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Missing keys: {}'", ".", "format", "(", "misskeys", ")", ")", "\n", "logger", ".", "info", "(", "'Unexpect keys: {}'", ".", "format", "(", "unexpkeys", ")", ")", "\n", "logger", ".", "info", "(", "\"==> loaded checkpoint '{}'\"", ".", "format", "(", "args", ".", "pretrained_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.save_checkpoint": [[151, 163], ["logger.info", "torch.save", "torch.save", "torch.save", "model.state_dict", "optimizer.state_dict", "scheduler.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "def", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'opt'", ":", "args", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'current.pth'", ")", ")", "\n", "if", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'ckpt_epoch_{}.pth'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.main": [[165, 195], ["train.get_loader", "len", "logger.info", "train.build_model", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "seco_util.lr_scheduler.get_scheduler", "torch.nn.parallel.DistributedDataParallel", "range", "torch.get_rank", "logger.info", "filter", "len", "get_loader.sampler.set_epoch", "time.time", "train.train", "logger.info", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.get_rank", "train.save_checkpoint", "time.time"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.get_loader", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.build_model", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.train", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.save_checkpoint"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "train_loader", "=", "get_loader", "(", "args", ")", "\n", "n_data", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "\"length of training dataset: {}\"", ".", "format", "(", "n_data", ")", ")", "\n", "\n", "model", "=", "build_model", "(", "args", ")", "\n", "# print network architecture", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "model", ")", "\n", "\n", "", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "base_learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "True", ")", "\n", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "len", "(", "train_loader", ")", ",", "args", ")", "\n", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "broadcast_buffers", "=", "True", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "# routine", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "loss", "=", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "args", ")", "\n", "logger", ".", "info", "(", "'epoch {}, total time {:.2f}, loss is {:4f}'", ".", "format", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "tic", ",", "loss", ")", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# save model", "\n", "            ", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "scheduler", ",", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.frozen_bn": [[197, 208], ["model.named_modules", "isinstance", "m.eval", "print"], "function", ["None"], ["", "", "", "def", "frozen_bn", "(", "model", ")", ":", "\n", "    ", "first_bn", "=", "True", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "torch", ".", "nn", ".", "BatchNorm2d", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "            ", "if", "first_bn", ":", "\n", "                ", "first_bn", "=", "False", "\n", "print", "(", "'Skip frozen first bn layer: '", "+", "name", ")", "\n", "continue", "\n", "", "m", ".", "eval", "(", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.train": [[210, 275], ["model.train", "seco_util.util.AverageMeter", "seco_util.util.AverageMeter", "seco_util.util.AverageMeter", "time.time", "optimizer.zero_grad", "torch.cuda.amp.GradScaler", "enumerate", "train.frozen_bn", "x.cuda.size", "x.cuda.cuda", "label.cuda.cuda", "model", "isinstance", "torch.cuda.amp.GradScaler.scale().backward", "scheduler.step", "seco_util.util.AverageMeter.update", "seco_util.util.AverageMeter.update", "seco_util.util.AverageMeter.update", "time.time", "criterion", "torch.cuda.amp.GradScaler.unscale_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "optimizer.zero_grad", "criterion.item", "logger.info", "criterion", "criterion", "torch.cuda.amp.GradScaler.scale", "filter", "time.time", "model.parameters", "len", "criterion.item", "next", "iter"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.train", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.finetune.train.frozen_bn", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.update", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.update", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.update", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.update"], ["", "", "", "def", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "args", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "if", "args", ".", "frozen_bn", ":", "\n", "        ", "frozen_bn", "(", "model", ")", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "norm_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "scaler", "=", "GradScaler", "(", ")", "\n", "bnorm", "=", "0", "\n", "\n", "for", "idx", ",", "train_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "x", "=", "train_data", "[", "0", "]", "\n", "label", "=", "train_data", "[", "1", "]", "\n", "\n", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# forward", "\n", "x", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# clip", "\n", "label", "=", "label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# label", "\n", "\n", "# with torch.cuda.amp.autocast():", "\n", "# forward and get the predict score", "\n", "score", "=", "model", "(", "x", ")", "\n", "# get crossentropy loss", "\n", "if", "isinstance", "(", "score", ",", "list", ")", ":", "\n", "            ", "loss", "=", "criterion", "(", "score", "[", "0", "]", ",", "label", ")", "+", "criterion", "(", "score", "[", "1", "]", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "criterion", "(", "score", ",", "label", ")", "\n", "\n", "# backward", "\n", "", "scaler", ".", "scale", "(", "loss", "/", "args", ".", "iter_size", "*", "args", ".", "loss_weight", ")", ".", "backward", "(", ")", "\n", "\n", "if", "(", "idx", "+", "1", ")", "%", "args", ".", "iter_size", "==", "0", ":", "\n", "            ", "scaler", ".", "unscale_", "(", "optimizer", ")", "\n", "bnorm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "\n", "args", ".", "clip_gradient", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "# update meters", "\n", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "norm_meter", ".", "update", "(", "bnorm", ",", "bsz", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "idx", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "'Train: [{:>3d}]/[{:>4d}/{:>4d}] BT={:>0.3f}/{:>0.3f} LR={:>0.3f} Loss={:>0.3f}/{:>0.3f} GradNorm={:>0.3f}/{:>0.3f}'", ".", "format", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "next", "(", "iter", "(", "optimizer", ".", "param_groups", ")", ")", "[", "'lr'", "]", ",", "\n", "loss", ".", "item", "(", ")", ",", "loss_meter", ".", "avg", ",", "\n", "bnorm", ",", "norm_meter", ".", "avg", "\n", ")", ")", "\n", "\n", "", "", "return", "loss_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ToClipTensor.__call__": [[39, 49], ["torchvision.to_tensor"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of PIL Image or numpy.ndarray): Clip to be converted to tensor.\n\n        Returns:\n            Tensor: Converted clip.\n        \"\"\"", "\n", "\n", "return", "[", "F", ".", "to_tensor", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ToClipTensor.__repr__": [[50, 52], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipRandomResizedCrop.__call__": [[55, 65], ["clip_transforms.ClipRandomResizedCrop.get_params", "torchvision.resized_crop"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of PIL Image or Tensor): Clip to be cropped and resized.\n\n        Returns:\n            List of PIL Image or Tensor: Randomly cropped and resized clip.\n        \"\"\"", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "clip", "[", "0", "]", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "return", "[", "F", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "for", "img", "in", "clip", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipColorJitter.__call__": [[68, 99], ["torch.randperm", "torch.tensor().uniform_().item", "torch.tensor().uniform_().item", "torch.tensor().uniform_().item", "torch.tensor().uniform_().item", "torchvision.adjust_brightness", "torchvision.adjust_contrast", "torchvision.adjust_saturation", "torchvision.adjust_hue", "torch.tensor().uniform_", "torch.tensor().uniform_", "torch.tensor().uniform_", "torch.tensor().uniform_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["     ", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of PIL Image or Tensor): Input clip.\n\n        Returns:\n            List of PIL Image or Tensor: Color jittered clip.\n        \"\"\"", "\n", "fn_idx", "=", "torch", ".", "randperm", "(", "4", ")", "\n", "for", "fn_id", "in", "fn_idx", ":", "\n", "            ", "if", "fn_id", "==", "0", "and", "self", ".", "brightness", "is", "not", "None", ":", "\n", "                ", "brightness", "=", "self", ".", "brightness", "\n", "brightness_factor", "=", "torch", ".", "tensor", "(", "1.0", ")", ".", "uniform_", "(", "brightness", "[", "0", "]", ",", "brightness", "[", "1", "]", ")", ".", "item", "(", ")", "\n", "clip", "=", "[", "F", ".", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", "for", "img", "in", "clip", "]", "\n", "\n", "", "if", "fn_id", "==", "1", "and", "self", ".", "contrast", "is", "not", "None", ":", "\n", "                ", "contrast", "=", "self", ".", "contrast", "\n", "contrast_factor", "=", "torch", ".", "tensor", "(", "1.0", ")", ".", "uniform_", "(", "contrast", "[", "0", "]", ",", "contrast", "[", "1", "]", ")", ".", "item", "(", ")", "\n", "clip", "=", "[", "F", ".", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", "for", "img", "in", "clip", "]", "\n", "\n", "", "if", "fn_id", "==", "2", "and", "self", ".", "saturation", "is", "not", "None", ":", "\n", "                ", "saturation", "=", "self", ".", "saturation", "\n", "saturation_factor", "=", "torch", ".", "tensor", "(", "1.0", ")", ".", "uniform_", "(", "saturation", "[", "0", "]", ",", "saturation", "[", "1", "]", ")", ".", "item", "(", ")", "\n", "clip", "=", "[", "F", ".", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", "for", "img", "in", "clip", "]", "\n", "\n", "", "if", "fn_id", "==", "3", "and", "self", ".", "hue", "is", "not", "None", ":", "\n", "                ", "hue", "=", "self", ".", "hue", "\n", "hue_factor", "=", "torch", ".", "tensor", "(", "1.0", ")", ".", "uniform_", "(", "hue", "[", "0", "]", ",", "hue", "[", "1", "]", ")", ".", "item", "(", ")", "\n", "clip", "=", "[", "F", ".", "adjust_hue", "(", "img", ",", "hue_factor", ")", "for", "img", "in", "clip", "]", "\n", "\n", "", "", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipRandomGrayscale.__call__": [[102, 114], ["random.random", "torchvision.to_grayscale"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of PIL Image or Tensor): Clip to be converted to grayscale.\n\n        Returns:\n            List of PIL Image or Tensor: Randomly grayscaled clip.\n        \"\"\"", "\n", "num_output_channels", "=", "1", "if", "clip", "[", "0", "]", ".", "mode", "==", "'L'", "else", "3", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "[", "F", ".", "to_grayscale", "(", "img", ",", "num_output_channels", "=", "num_output_channels", ")", "for", "img", "in", "clip", "]", "\n", "", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipRandomHorizontalFlip.__call__": [[117, 128], ["torch.rand", "torchvision.hflip"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of PIL Image or Tensor): Clip to be flipped.\n\n        Returns:\n            List of PIL Image or Tensor: Randomly flipped clip.\n        \"\"\"", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "[", "F", ".", "hflip", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipNormalize.__init__": [[147, 151], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipNormalize.__call__": [[152, 161], ["torchvision.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of Tensor): List of tensor image of size (C, H, W) to be normalized.\n\n        Returns:\n            Tensor: Normalized Tensor list.\n        \"\"\"", "\n", "return", "[", "F", ".", "normalize", "(", "img", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "inplace", ")", "for", "img", "in", "clip", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipNormalize.__repr__": [[162, 164], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(mean={0}, std={1})'", ".", "format", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipResize.__call__": [[179, 188], ["torchvision.resize"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of Tensor):: Clip to be scaled.\n\n        Returns:\n            List of PIL Image: Rescaled clip.\n        \"\"\"", "\n", "return", "[", "F", ".", "resize", "(", "img", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "for", "img", "in", "clip", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipCenterCrop.__call__": [[199, 208], ["torchvision.center_crop"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of Tensor): Clip to be cropped.\n\n        Returns:\n            List of PIL Image: Cropped clip.\n        \"\"\"", "\n", "return", "[", "F", ".", "center_crop", "(", "img", ",", "self", ".", "size", ")", "for", "img", "in", "clip", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipFirstCrop.__call__": [[219, 238], ["isinstance", "ValueError", "img.crop", "int", "int", "len", "msg.format"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of Tensor): Clip to be cropped.\n\n        Returns:\n            List of PIL Image: Cropped clip.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "self", ".", "size", ")", ",", "int", "(", "self", ".", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "self", ".", "size", ")", "==", "2", ",", "\"Please provide only two dimensions (h, w) for size.\"", "\n", "", "image_width", ",", "image_height", "=", "clip", "[", "0", "]", ".", "size", "\n", "crop_height", ",", "crop_width", "=", "self", ".", "size", "\n", "if", "crop_width", ">", "image_width", "or", "crop_height", ">", "image_height", ":", "\n", "            ", "msg", "=", "\"Requested crop size {} is bigger than input size {}\"", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "self", ".", "size", ",", "(", "image_height", ",", "image_width", ")", ")", ")", "\n", "\n", "", "return", "[", "img", ".", "crop", "(", "(", "0", ",", "0", ",", "crop_width", ",", "crop_height", ")", ")", "for", "img", "in", "clip", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.clip_transforms.ClipThirdCrop.__call__": [[249, 268], ["isinstance", "ValueError", "img.crop", "int", "int", "len", "msg.format"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (List of Tensor): Clip to be cropped.\n\n        Returns:\n            List of PIL Image: Cropped clip.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "self", ".", "size", ")", ",", "int", "(", "self", ".", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "self", ".", "size", ")", "==", "2", ",", "\"Please provide only two dimensions (h, w) for size.\"", "\n", "", "image_width", ",", "image_height", "=", "clip", "[", "0", "]", ".", "size", "\n", "crop_height", ",", "crop_width", "=", "self", ".", "size", "\n", "if", "crop_width", ">", "image_width", "or", "crop_height", ">", "image_height", ":", "\n", "            ", "msg", "=", "\"Requested crop size {} is bigger than input size {}\"", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "self", ".", "size", ",", "(", "image_height", ",", "image_width", ")", ")", ")", "\n", "\n", "", "return", "[", "img", ".", "crop", "(", "(", "image_width", "-", "crop_width", ",", "image_height", "-", "crop_height", ",", "image_width", ",", "image_height", ")", ")", "for", "img", "in", "clip", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.logger._ColorfulFormatter.__init__": [[9, 15], ["kwargs.pop", "len", "logging.Formatter.__init__", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["class", "_ColorfulFormatter", "(", "logging", ".", "Formatter", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_root_name", "=", "kwargs", ".", "pop", "(", "\"root_name\"", ")", "+", "\".\"", "\n", "self", ".", "_abbrev_name", "=", "kwargs", ".", "pop", "(", "\"abbrev_name\"", ",", "\"\"", ")", "\n", "if", "len", "(", "self", ".", "_abbrev_name", ")", ":", "\n", "            ", "self", ".", "_abbrev_name", "=", "self", ".", "_abbrev_name", "+", "\".\"", "\n", "", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.logger._ColorfulFormatter.formatMessage": [[16, 26], ["record.name.replace", "super().formatMessage", "termcolor.colored", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.logger._ColorfulFormatter.formatMessage"], ["\n", "", "def", "formatMessage", "(", "self", ",", "record", ")", ":", "\n", "        ", "record", ".", "name", "=", "record", ".", "name", ".", "replace", "(", "self", ".", "_root_name", ",", "self", ".", "_abbrev_name", ")", "\n", "log", "=", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "formatMessage", "(", "record", ")", "\n", "if", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"WARNING\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", "]", ")", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", "or", "record", ".", "levelno", "==", "logging", ".", "CRITICAL", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"ERROR\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", ",", "\"underline\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "log", "\n", "", "return", "prefix", "+", "\" \"", "+", "log", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.logger.setup_logger": [[29, 75], ["functools.lru_cache", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.makedirs", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logger._ColorfulFormatter", "output.endswith", "output.endswith", "os.path.join", "os.path.dirname", "logger._cached_log_stream", "termcolor.colored", "str"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.logger._cached_log_stream"], ["# so that calling setup_logger multiple times won't add many handlers", "\n", "", "", "@", "functools", ".", "lru_cache", "(", ")", "\n", "def", "setup_logger", "(", "\n", "output", "=", "None", ",", "distributed_rank", "=", "0", ",", "*", ",", "color", "=", "True", ",", "name", "=", "\"seco\"", ",", "abbrev_name", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the detectron2 logger and set its verbosity level to \"INFO\".\n\n    Args:\n        output (str): a file name or a directory to save log. If None, will not save log file.\n            If ends with \".txt\" or \".log\", assumed to be a file name.\n            Otherwise, logs will be saved to `output/log.txt`.\n        name (str): the root module name of this logger\n\n    Returns:\n        logging.Logger: a logger\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "if", "abbrev_name", "is", "None", ":", "\n", "        ", "abbrev_name", "=", "name", "\n", "\n", "", "plain_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s] %(name)s %(levelname)s: %(message)s\"", ",", "datefmt", "=", "\"%m/%d %H:%M:%S\"", "\n", ")", "\n", "# stdout logging: master only", "\n", "if", "distributed_rank", "==", "0", ":", "\n", "        ", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "if", "color", ":", "\n", "            ", "formatter", "=", "_ColorfulFormatter", "(", "\n", "colored", "(", "\"[%(asctime)s %(name)s]: \"", ",", "\"green\"", ")", "+", "\"%(message)s\"", ",", "\n", "datefmt", "=", "\"%m/%d %H:%M:%S\"", ",", "\n", "root_name", "=", "name", ",", "\n", "abbrev_name", "=", "str", "(", "abbrev_name", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "formatter", "=", "plain_formatter", "\n", "", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# file logging: all workers", "\n", "", "if", "output", "is", "not", "None", ":", "\n", "        ", "if", "output", ".", "endswith", "(", "\".txt\"", ")", "or", "output", ".", "endswith", "(", "\".log\"", ")", ":", "\n", "            ", "filename", "=", "output", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.logger._cached_log_stream": [[79, 82], ["functools.lru_cache", "open"], "function", ["None"], ["            ", "filename", "=", "filename", "+", "\".rank{}\"", ".", "format", "(", "distributed_rank", ")", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "fh", "=", "logging", ".", "StreamHandler", "(", "_cached_log_stream", "(", "filename", ")", ")", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.__init__": [[8, 16], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__"], ["        ", "assert", "warm_duration", ">=", "0", "\n", "assert", "warm_multiplier", ">", "1.0", "\n", "self", ".", "warm_m", "=", "float", "(", "warm_multiplier", ")", "\n", "self", ".", "warm_d", "=", "warm_duration", "\n", "self", ".", "cos_duration", "=", "cos_duration", "\n", "self", ".", "cos_eta_min", "=", "eta_min", "\n", "super", "(", "WarmUpCosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "cos_duration", ",", "eta_min", ",", "last_epoch", ")", "\n", "\n", "", "def", "get_lr", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.get_lr": [[17, 23], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.get_lr"], ["        ", "if", "self", ".", "warm_d", "==", "0", ":", "\n", "            ", "return", "super", "(", "WarmUpCosineAnnealingLR", ",", "self", ")", ".", "get_lr", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "UserWarning", ")", "\n", "", "if", "self", ".", "last_epoch", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.step": [[24, 33], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.step", "super().step"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.step"], ["                ", "return", "[", "lr", "/", "self", ".", "warm_m", "for", "lr", "in", "self", ".", "base_lrs", "]", "\n", "# return self.base_lrs / self.warm_m", "\n", "", "elif", "self", ".", "last_epoch", "<=", "self", ".", "warm_d", ":", "\n", "                ", "return", "[", "(", "self", ".", "warm_d", "+", "(", "self", ".", "warm_m", "-", "1", ")", "*", "self", ".", "last_epoch", ")", "/", "(", "self", ".", "warm_d", "+", "(", "self", ".", "warm_m", "-", "1", ")", "*", "(", "self", ".", "last_epoch", "-", "1", ")", ")", "*", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "else", ":", "\n", "                ", "cos_last_epoch", "=", "self", ".", "last_epoch", "-", "self", ".", "warm_d", "\n", "if", "cos_last_epoch", "==", "0", ":", "\n", "                    ", "return", "self", ".", "base_lrs", "\n", "", "elif", "(", "cos_last_epoch", "-", "1", "-", "self", ".", "cos_duration", ")", "%", "(", "2", "*", "self", ".", "cos_duration", ")", "==", "0", ":", "\n", "                    ", "return", "[", "group", "[", "'lr'", "]", "+", "(", "base_lr", "-", "self", ".", "cos_eta_min", ")", "*", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict": [[34, 38], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.state_dict", "lr_scheduler.GradualWarmupScheduler.__dict__.items"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.state_dict"], ["(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "/", "self", ".", "cos_duration", ")", ")", "/", "2", "\n", "for", "base_lr", ",", "group", "in", "\n", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "optimizer", ".", "param_groups", ")", "]", "\n", "", "return", "[", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "cos_last_epoch", "/", "self", ".", "cos_duration", ")", ")", "/", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "cos_last_epoch", "-", "1", ")", "/", "self", ".", "cos_duration", ")", ")", "*", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict": [[39, 43], ["state_dict.pop", "lr_scheduler.GradualWarmupScheduler.__dict__.update", "lr_scheduler.GradualWarmupScheduler.after_scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.update", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["(", "group", "[", "'lr'", "]", "-", "self", ".", "cos_eta_min", ")", "+", "self", ".", "cos_eta_min", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n", "", "", "", "def", "_get_closed_form_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "warm_d", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.lr_scheduler.get_scheduler": [[45, 65], ["lr_scheduler.GradualWarmupScheduler", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError"], "function", ["None"], ["", "else", ":", "\n", "            ", "if", "self", ".", "last_epoch", "<=", "self", ".", "warm_d", ":", "\n", "                ", "return", "[", "base_lr", "*", "(", "self", ".", "warm_d", "+", "(", "self", ".", "warm_m", "-", "1", ")", "*", "self", ".", "last_epoch", ")", "/", "(", "self", ".", "warm_d", "*", "self", ".", "warm_m", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "                ", "cos_last_epoch", "=", "self", ".", "last_epoch", "-", "self", ".", "warm_d", "\n", "return", "[", "self", ".", "cos_eta_min", "+", "(", "base_lr", "-", "self", ".", "cos_eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "cos_last_epoch", "/", "self", ".", "cos_duration", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "\n", "", "", "", "", "def", "get_scheduler", "(", "optimizer", ",", "n_iter_per_epoch", ",", "args", ")", ":", "\n", "    ", "if", "\"cosine\"", "in", "args", ".", "lr_scheduler", ":", "\n", "        ", "return", "WarmUpCosineAnnealingLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "warm_multiplier", "=", "args", ".", "warmup_multiplier", ",", "\n", "warm_duration", "=", "args", ".", "warmup_epoch", "*", "n_iter_per_epoch", ",", "\n", "cos_duration", "=", "(", "args", ".", "epochs", "-", "args", ".", "warmup_epoch", ")", "*", "n_iter_per_epoch", ",", "\n", "eta_min", "=", "0.000001", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"scheduler {} not supported\"", ".", "format", "(", "args", ".", "lr_scheduler", ")", ")", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.__init__": [[8, 14], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.reset"], ["from", "dataset", "import", "build_dataset", "\n", "from", "PIL", "import", "ImageFilter", "\n", "\n", "\n", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.reset": [[15, 20], ["None"], "methods", ["None"], ["        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.AverageMeter.update": [[21, 26], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.ClipGaussianBlur.__init__": [[30, 32], ["None"], "methods", ["None"], ["self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.seco_util.util.ClipGaussianBlur.__call__": [[33, 36], ["random.uniform", "img.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["\n", "", "", "def", "dist_collect", "(", "x", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.model_factory.get_model_by_name": [[18, 20], ["model_dict.get"], "function", ["None"], ["def", "get_model_by_name", "(", "net_name", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "model_dict", ".", "get", "(", "net_name", ")", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.model_factory.transfer_weights": [[22, 28], ["state_dict.items", "v.detach().numpy.detach().numpy", "torch.from_numpy", "v.detach().numpy.detach"], "function", ["None"], ["", "def", "transfer_weights", "(", "net_name", ",", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "v", "=", "v", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "new_state_dict", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.model_factory.remove_fc": [[30, 34], ["state_dict.pop", "state_dict.pop"], "function", ["None"], ["", "def", "remove_fc", "(", "net_name", ",", "state_dict", ")", ":", "\n", "    ", "state_dict", ".", "pop", "(", "'fc.weight'", ",", "None", ")", "\n", "state_dict", ".", "pop", "(", "'fc.bias'", ",", "None", ")", "\n", "return", "state_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.BasicBlock.__init__": [[25, 42], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv3x3", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.BasicBlock.forward": [[43, 60], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.Bottleneck.__init__": [[66, 82], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv1x1", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv3x3", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.Bottleneck.forward": [[83, 104], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet.__init__": [[108, 178], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "dropout_ratio", "=", "0.5", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "deep_stem", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "_deep_stem", "=", "deep_stem", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "if", "not", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "self", ".", "inplanes", "*", "2", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "inplanes", "*=", "2", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout_ratio", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._make_layer": [[179, 202], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._forward_impl": [[203, 243], ["resnet.ResNet.size", "resnet.ResNet.size", "resnet.ResNet.size", "resnet.ResNet.size", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.pool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.view().mean", "resnet.ResNet.drop", "resnet.ResNet.fc", "resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu1", "resnet.ResNet.conv2", "resnet.ResNet.bn2", "resnet.ResNet.relu2", "resnet.ResNet.conv3", "resnet.ResNet.bn3", "resnet.ResNet.relu3", "resnet.ResNet.view", "resnet.ResNet.view", "resnet.ResNet.view"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ",", "layer", ")", ":", "\n", "        ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "chn", "=", "x", ".", "size", "(", "1", ")", "\n", "hig", "=", "x", ".", "size", "(", "2", ")", "\n", "wid", "=", "x", ".", "size", "(", "3", ")", "\n", "\n", "# See note [TorchScript super()]", "\n", "if", "not", "self", ".", "_deep_stem", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ".", "view", "(", "bsz", "*", "chn", "//", "3", ",", "3", ",", "hig", ",", "wid", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ".", "view", "(", "bsz", "*", "chn", "//", "3", ",", "3", ",", "hig", ",", "wid", ")", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3", "(", "x", ")", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "layer", "==", "5", ":", "\n", "            ", "return", "x", "\n", "", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x_g", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "if", "layer", "==", "6", ":", "\n", "            ", "return", "x_g", "\n", "\n", "", "x_g", "=", "x_g", ".", "view", "(", "bsz", ",", "chn", "//", "3", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "x_g", "=", "self", ".", "drop", "(", "x_g", ")", "\n", "\n", "x1", "=", "self", ".", "fc", "(", "x_g", ")", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet.forward": [[244, 246], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer", "=", "7", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.conv1x1": [[16, 19], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet": [[248, 251], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnet18": [[253, 260], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnet34": [[262, 269], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnet50": [[271, 278], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnet101": [[280, 287], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnet103": [[289, 296], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet103", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-103 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet103'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "deep_stem", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnet152": [[298, 305], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnext50_32x4d": [[307, 316], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.resnext101_32x8d": [[318, 327], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.wide_resnet50_2": [[329, 342], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet.wide_resnet101_2": [[344, 357], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.model.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.commonutil.svm_read_problem": [[17, 67], ["enumerate", "array.array", "array.array", "array.array", "array.array", "open", "line.split.split", "scipy.frombuffer.append", "scipy.frombuffer", "scipy.frombuffer", "scipy.frombuffer", "scipy.frombuffer", "sparse.csr_matrix", "len", "float", "features.split", "scipy.frombuffer.append", "features.split", "e.split", "float", "e.split", "float", "scipy.frombuffer.append", "sparse.csr_matrix.append", "int", "int"], "function", ["None"], ["def", "svm_read_problem", "(", "data_file_name", ",", "return_scipy", "=", "False", ")", ":", "\n", "\t", "\"\"\"\n\tsvm_read_problem(data_file_name, return_scipy=False) -> [y, x], y: list, x: list of dictionary\n\tsvm_read_problem(data_file_name, return_scipy=True)  -> [y, x], y: ndarray, x: csr_matrix\n\n\tRead LIBSVM-format data from data_file_name and return labels y\n\tand data instances x.\n\t\"\"\"", "\n", "if", "scipy", "!=", "None", "and", "return_scipy", ":", "\n", "\t\t", "prob_y", "=", "array", "(", "'d'", ")", "\n", "prob_x", "=", "array", "(", "'d'", ")", "\n", "row_ptr", "=", "array", "(", "'l'", ",", "[", "0", "]", ")", "\n", "col_idx", "=", "array", "(", "'l'", ")", "\n", "", "else", ":", "\n", "\t\t", "prob_y", "=", "[", "]", "\n", "prob_x", "=", "[", "]", "\n", "row_ptr", "=", "[", "0", "]", "\n", "col_idx", "=", "[", "]", "\n", "", "indx_start", "=", "1", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "open", "(", "data_file_name", ")", ")", ":", "\n", "\t\t", "line", "=", "line", ".", "split", "(", "None", ",", "1", ")", "\n", "# In case an instance with all zero features", "\n", "if", "len", "(", "line", ")", "==", "1", ":", "line", "+=", "[", "''", "]", "\n", "label", ",", "features", "=", "line", "\n", "prob_y", ".", "append", "(", "float", "(", "label", ")", ")", "\n", "if", "scipy", "!=", "None", "and", "return_scipy", ":", "\n", "\t\t\t", "nz", "=", "0", "\n", "for", "e", "in", "features", ".", "split", "(", ")", ":", "\n", "\t\t\t\t", "ind", ",", "val", "=", "e", ".", "split", "(", "\":\"", ")", "\n", "if", "ind", "==", "'0'", ":", "\n", "\t\t\t\t\t", "indx_start", "=", "0", "\n", "", "val", "=", "float", "(", "val", ")", "\n", "if", "val", "!=", "0", ":", "\n", "\t\t\t\t\t", "col_idx", ".", "append", "(", "int", "(", "ind", ")", "-", "indx_start", ")", "\n", "prob_x", ".", "append", "(", "val", ")", "\n", "nz", "+=", "1", "\n", "", "", "row_ptr", ".", "append", "(", "row_ptr", "[", "-", "1", "]", "+", "nz", ")", "\n", "", "else", ":", "\n", "\t\t\t", "xi", "=", "{", "}", "\n", "for", "e", "in", "features", ".", "split", "(", ")", ":", "\n", "\t\t\t\t", "ind", ",", "val", "=", "e", ".", "split", "(", "\":\"", ")", "\n", "xi", "[", "int", "(", "ind", ")", "]", "=", "float", "(", "val", ")", "\n", "", "prob_x", "+=", "[", "xi", "]", "\n", "", "", "if", "scipy", "!=", "None", "and", "return_scipy", ":", "\n", "\t\t", "prob_y", "=", "scipy", ".", "frombuffer", "(", "prob_y", ",", "dtype", "=", "'d'", ")", "\n", "prob_x", "=", "scipy", ".", "frombuffer", "(", "prob_x", ",", "dtype", "=", "'d'", ")", "\n", "col_idx", "=", "scipy", ".", "frombuffer", "(", "col_idx", ",", "dtype", "=", "'l'", ")", "\n", "row_ptr", "=", "scipy", ".", "frombuffer", "(", "row_ptr", ",", "dtype", "=", "'l'", ")", "\n", "prob_x", "=", "sparse", ".", "csr_matrix", "(", "(", "prob_x", ",", "col_idx", ",", "row_ptr", ")", ")", "\n", "", "return", "(", "prob_y", ",", "prob_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.commonutil.evaluations_scipy": [[68, 94], ["len", "pv.sum", "ty.sum", "TypeError", "len", "len", "ValueError", "scipy.errstate", "float", "float", "float", "isinstance", "isinstance", "float"], "function", ["None"], ["", "def", "evaluations_scipy", "(", "ty", ",", "pv", ")", ":", "\n", "\t", "\"\"\"\n\tevaluations_scipy(ty, pv) -> (ACC, MSE, SCC)\n\tty, pv: ndarray\n\n\tCalculate accuracy, mean squared error and squared correlation coefficient\n\tusing the true values (ty) and predicted values (pv).\n\t\"\"\"", "\n", "if", "not", "(", "scipy", "!=", "None", "and", "isinstance", "(", "ty", ",", "scipy", ".", "ndarray", ")", "and", "isinstance", "(", "pv", ",", "scipy", ".", "ndarray", ")", ")", ":", "\n", "\t\t", "raise", "TypeError", "(", "\"type of ty and pv must be ndarray\"", ")", "\n", "", "if", "len", "(", "ty", ")", "!=", "len", "(", "pv", ")", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"len(ty) must be equal to len(pv)\"", ")", "\n", "", "ACC", "=", "100.0", "*", "(", "ty", "==", "pv", ")", ".", "mean", "(", ")", "\n", "MSE", "=", "(", "(", "ty", "-", "pv", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "l", "=", "len", "(", "ty", ")", "\n", "sumv", "=", "pv", ".", "sum", "(", ")", "\n", "sumy", "=", "ty", ".", "sum", "(", ")", "\n", "sumvy", "=", "(", "pv", "*", "ty", ")", ".", "sum", "(", ")", "\n", "sumvv", "=", "(", "pv", "*", "pv", ")", ".", "sum", "(", ")", "\n", "sumyy", "=", "(", "ty", "*", "ty", ")", ".", "sum", "(", ")", "\n", "with", "scipy", ".", "errstate", "(", "all", "=", "'raise'", ")", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "SCC", "=", "(", "(", "l", "*", "sumvy", "-", "sumv", "*", "sumy", ")", "*", "(", "l", "*", "sumvy", "-", "sumv", "*", "sumy", ")", ")", "/", "(", "(", "l", "*", "sumvv", "-", "sumv", "*", "sumv", ")", "*", "(", "l", "*", "sumyy", "-", "sumy", "*", "sumy", ")", ")", "\n", "", "except", ":", "\n", "\t\t\t", "SCC", "=", "float", "(", "'nan'", ")", "\n", "", "", "return", "(", "float", "(", "ACC", ")", ",", "float", "(", "MSE", ")", ",", "float", "(", "SCC", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.commonutil.evaluations": [[95, 127], ["zip", "len", "commonutil.evaluations_scipy", "len", "len", "ValueError", "float", "float", "float", "scipy.asarray", "scipy.asarray", "float"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.commonutil.evaluations_scipy"], ["", "def", "evaluations", "(", "ty", ",", "pv", ",", "useScipy", "=", "True", ")", ":", "\n", "\t", "\"\"\"\n\tevaluations(ty, pv, useScipy) -> (ACC, MSE, SCC)\n\tty, pv: list, tuple or ndarray\n\tuseScipy: convert ty, pv to ndarray, and use scipy functions for the evaluation\n\n\tCalculate accuracy, mean squared error and squared correlation coefficient\n\tusing the true values (ty) and predicted values (pv).\n\t\"\"\"", "\n", "if", "scipy", "!=", "None", "and", "useScipy", ":", "\n", "\t\t", "return", "evaluations_scipy", "(", "scipy", ".", "asarray", "(", "ty", ")", ",", "scipy", ".", "asarray", "(", "pv", ")", ")", "\n", "", "if", "len", "(", "ty", ")", "!=", "len", "(", "pv", ")", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"len(ty) must be equal to len(pv)\"", ")", "\n", "", "total_correct", "=", "total_error", "=", "0", "\n", "sumv", "=", "sumy", "=", "sumvv", "=", "sumyy", "=", "sumvy", "=", "0", "\n", "for", "v", ",", "y", "in", "zip", "(", "pv", ",", "ty", ")", ":", "\n", "\t\t", "if", "y", "==", "v", ":", "\n", "\t\t\t", "total_correct", "+=", "1", "\n", "", "total_error", "+=", "(", "v", "-", "y", ")", "*", "(", "v", "-", "y", ")", "\n", "sumv", "+=", "v", "\n", "sumy", "+=", "y", "\n", "sumvv", "+=", "v", "*", "v", "\n", "sumyy", "+=", "y", "*", "y", "\n", "sumvy", "+=", "v", "*", "y", "\n", "", "l", "=", "len", "(", "ty", ")", "\n", "ACC", "=", "100.0", "*", "total_correct", "/", "l", "\n", "MSE", "=", "total_error", "/", "l", "\n", "try", ":", "\n", "\t\t", "SCC", "=", "(", "(", "l", "*", "sumvy", "-", "sumv", "*", "sumy", ")", "*", "(", "l", "*", "sumvy", "-", "sumv", "*", "sumy", ")", ")", "/", "(", "(", "l", "*", "sumvv", "-", "sumv", "*", "sumv", ")", "*", "(", "l", "*", "sumyy", "-", "sumy", "*", "sumy", ")", ")", "\n", "", "except", ":", "\n", "\t\t", "SCC", "=", "float", "(", "'nan'", ")", "\n", "", "return", "(", "float", "(", "ACC", ")", ",", "float", "(", "MSE", ")", ",", "float", "(", "SCC", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.commonutil.csr_find_scale_param": [[128, 151], ["isinstance", "x.min().toarray().flatten", "x.max().toarray().flatten", "print", "x.min().toarray", "x.max().toarray", "sum", "x.getnnz", "x.min", "x.max"], "function", ["None"], ["", "def", "csr_find_scale_param", "(", "x", ",", "lower", "=", "-", "1", ",", "upper", "=", "1", ")", ":", "\n", "\t", "assert", "isinstance", "(", "x", ",", "sparse", ".", "csr_matrix", ")", "\n", "assert", "lower", "<", "upper", "\n", "l", ",", "n", "=", "x", ".", "shape", "\n", "feat_min", "=", "x", ".", "min", "(", "axis", "=", "0", ")", ".", "toarray", "(", ")", ".", "flatten", "(", ")", "\n", "feat_max", "=", "x", ".", "max", "(", "axis", "=", "0", ")", ".", "toarray", "(", ")", ".", "flatten", "(", ")", "\n", "coef", "=", "(", "feat_max", "-", "feat_min", ")", "/", "(", "upper", "-", "lower", ")", "\n", "coef", "[", "coef", "!=", "0", "]", "=", "1.0", "/", "coef", "[", "coef", "!=", "0", "]", "\n", "\n", "# (x - ones(l,1) * feat_min') * diag(coef) + lower", "\n", "# = x * diag(coef) - ones(l, 1) * (feat_min' * diag(coef)) + lower", "\n", "# = x * diag(coef) + ones(l, 1) * (-feat_min' * diag(coef) + lower)", "\n", "# = x * diag(coef) + ones(l, 1) * offset'", "\n", "offset", "=", "-", "feat_min", "*", "coef", "+", "lower", "\n", "offset", "[", "coef", "==", "0", "]", "=", "0", "\n", "\n", "if", "sum", "(", "offset", "!=", "0", ")", "*", "l", ">", "3", "*", "x", ".", "getnnz", "(", ")", ":", "\n", "\t\t", "print", "(", "\n", "\"WARNING: The #nonzeros of the scaled data is at least 2 times larger than the original one.\\n\"", "\n", "\"If feature values are non-negative and sparse, set lower=0 rather than the default lower=-1.\"", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "return", "{", "'coef'", ":", "coef", ",", "'offset'", ":", "offset", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.commonutil.csr_scale": [[152, 179], ["isinstance", "sparse.csr_matrix", "sparse.vstack", "len", "len", "print", "resize", "resize", "resize.reshape", "x.dot", "scaled_x.getnnz", "x.getnnz", "print", "len", "sparse.diags", "x.getnnz", "scaled_x.getnnz"], "function", ["None"], ["", "def", "csr_scale", "(", "x", ",", "scale_param", ")", ":", "\n", "\t", "assert", "isinstance", "(", "x", ",", "sparse", ".", "csr_matrix", ")", "\n", "\n", "offset", "=", "scale_param", "[", "'offset'", "]", "\n", "coef", "=", "scale_param", "[", "'coef'", "]", "\n", "assert", "len", "(", "coef", ")", "==", "len", "(", "offset", ")", "\n", "\n", "l", ",", "n", "=", "x", ".", "shape", "\n", "\n", "if", "not", "n", "==", "len", "(", "coef", ")", ":", "\n", "\t\t", "print", "(", "\"WARNING: The dimension of scaling parameters and feature number do not match.\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "coef", "=", "resize", "(", "coef", ",", "n", ")", "\n", "offset", "=", "resize", "(", "offset", ",", "n", ")", "\n", "\n", "# scaled_x = x * diag(coef) + ones(l, 1) * offset'", "\n", "", "offset", "=", "sparse", ".", "csr_matrix", "(", "offset", ".", "reshape", "(", "1", ",", "n", ")", ")", "\n", "offset", "=", "sparse", ".", "vstack", "(", "[", "offset", "]", "*", "l", ",", "format", "=", "'csr'", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "scaled_x", "=", "x", ".", "dot", "(", "sparse", ".", "diags", "(", "coef", ",", "0", ",", "shape", "=", "(", "n", ",", "n", ")", ")", ")", "+", "offset", "\n", "\n", "if", "scaled_x", ".", "getnnz", "(", ")", ">", "x", ".", "getnnz", "(", ")", ":", "\n", "\t\t", "print", "(", "\n", "\"WARNING: original #nonzeros %d\\n\"", "%", "x", ".", "getnnz", "(", ")", "+", "\n", "\"       > new      #nonzeros %d\\n\"", "%", "scaled_x", ".", "getnnz", "(", ")", "+", "\n", "\"If feature values are non-negative and sparse, get scale_param by setting lower=0 rather than the default lower=-1.\"", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "return", "scaled_x", "\n", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.load_model": [[22, 34], ["liblinear.load_model", "liblinear.toPyModel", "_cstr", "print"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.load_model", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.toPyModel"], ["def", "load_model", "(", "model_file_name", ")", ":", "\n", "\t", "\"\"\"\n\tload_model(model_file_name) -> model\n\n\tLoad a LIBLINEAR model from model_file_name and return.\n\t\"\"\"", "\n", "model", "=", "liblinear", ".", "load_model", "(", "_cstr", "(", "model_file_name", ")", ")", "\n", "if", "not", "model", ":", "\n", "\t\t", "print", "(", "\"can't open model file %s\"", "%", "model_file_name", ")", "\n", "return", "None", "\n", "", "model", "=", "toPyModel", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.save_model": [[35, 42], ["liblinear.save_model", "_cstr"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.save_model"], ["", "def", "save_model", "(", "model_file_name", ",", "model", ")", ":", "\n", "\t", "\"\"\"\n\tsave_model(model_file_name, model) -> None\n\n\tSave a LIBLINEAR model to the file model_file_name.\n\t\"\"\"", "\n", "liblinear", ".", "save_model", "(", "_cstr", "(", "model_file_name", ")", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.train": [[43, 160], ["liblinear.problem.set_bias", "liblinear.set_print_string_function", "liblinear.check_parameter", "isinstance", "liblinear.problem", "liblinear.parameter", "isinstance", "TypeError", "ValueError", "ctypes.c_double", "ctypes.c_double", "ctypes.c_double", "liblinear.find_parameters", "isinstance", "isinstance", "isinstance", "print", "liblinear.cross_validation", "commonutil.evaluations", "liblinear.train", "liblinear.toPyModel", "isinstance", "liblinear.parameter", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.problem.set_bias", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.commonutil.evaluations", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.train", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.toPyModel"], ["", "def", "train", "(", "arg1", ",", "arg2", "=", "None", ",", "arg3", "=", "None", ")", ":", "\n", "\t", "\"\"\"\n\ttrain(y, x [, options]) -> model | ACC\n\n\ty: a list/tuple/ndarray of l true labels (type must be int/double).\n\n\tx: 1. a list/tuple of l training instances. Feature vector of\n\t      each training instance is a list/tuple or dictionary.\n\n\t   2. an l * n numpy ndarray or scipy spmatrix (n: number of features).\n\n\ttrain(prob [, options]) -> model | ACC\n\ttrain(prob, param) -> model | ACC\n\n\tTrain a model from data (y, x) or a problem prob using\n\t'options' or a parameter param.\n\n\tIf '-v' is specified in 'options' (i.e., cross validation)\n\teither accuracy (ACC) or mean-squared error (MSE) is returned.\n\n\toptions:\n\t\t-s type : set type of solver (default 1)\n\t\t  for multi-class classification\n\t\t\t 0 -- L2-regularized logistic regression (primal)\n\t\t\t 1 -- L2-regularized L2-loss support vector classification (dual)\n\t\t\t 2 -- L2-regularized L2-loss support vector classification (primal)\n\t\t\t 3 -- L2-regularized L1-loss support vector classification (dual)\n\t\t\t 4 -- support vector classification by Crammer and Singer\n\t\t\t 5 -- L1-regularized L2-loss support vector classification\n\t\t\t 6 -- L1-regularized logistic regression\n\t\t\t 7 -- L2-regularized logistic regression (dual)\n\t\t  for regression\n\t\t\t11 -- L2-regularized L2-loss support vector regression (primal)\n\t\t\t12 -- L2-regularized L2-loss support vector regression (dual)\n\t\t\t13 -- L2-regularized L1-loss support vector regression (dual)\n\t\t-c cost : set the parameter C (default 1)\n\t\t-p epsilon : set the epsilon in loss function of SVR (default 0.1)\n\t\t-e epsilon : set tolerance of termination criterion\n\t\t\t-s 0 and 2\n\t\t\t\t|f'(w)|_2 <= eps*min(pos,neg)/l*|f'(w0)|_2,\n\t\t\t\twhere f is the primal function, (default 0.01)\n\t\t\t-s 11\n\t\t\t\t|f'(w)|_2 <= eps*|f'(w0)|_2 (default 0.0001)\n\t\t\t-s 1, 3, 4, and 7\n\t\t\t\tDual maximal violation <= eps; similar to liblinear (default 0.)\n\t\t\t-s 5 and 6\n\t\t\t\t|f'(w)|_inf <= eps*min(pos,neg)/l*|f'(w0)|_inf,\n\t\t\t\twhere f is the primal function (default 0.01)\n\t\t\t-s 12 and 13\n\t\t\t\t|f'(alpha)|_1 <= eps |f'(alpha0)|,\n\t\t\t\twhere f is the dual function (default 0.1)\n\t\t-B bias : if bias >= 0, instance x becomes [x; bias]; if < 0, no bias term added (default -1)\n\t\t-wi weight: weights adjust the parameter C of different classes (see README for details)\n\t\t-v n: n-fold cross validation mode\n\t\t-C : find parameters (C for -s 0, 2 and C, p for -s 11)\n\t\t-n nr_thread : parallel version with [nr_thread] threads (default 1; only for -s 0, 1, 2, 3, 11)\n\t\t-q : quiet mode (no outputs)\n\t\"\"\"", "\n", "prob", ",", "param", "=", "None", ",", "None", "\n", "if", "isinstance", "(", "arg1", ",", "(", "list", ",", "tuple", ")", ")", "or", "(", "scipy", "and", "isinstance", "(", "arg1", ",", "scipy", ".", "ndarray", ")", ")", ":", "\n", "\t\t", "assert", "isinstance", "(", "arg2", ",", "(", "list", ",", "tuple", ")", ")", "or", "(", "scipy", "and", "isinstance", "(", "arg2", ",", "(", "scipy", ".", "ndarray", ",", "sparse", ".", "spmatrix", ")", ")", ")", "\n", "y", ",", "x", ",", "options", "=", "arg1", ",", "arg2", ",", "arg3", "\n", "prob", "=", "problem", "(", "y", ",", "x", ")", "\n", "param", "=", "parameter", "(", "options", ")", "\n", "", "elif", "isinstance", "(", "arg1", ",", "problem", ")", ":", "\n", "\t\t", "prob", "=", "arg1", "\n", "if", "isinstance", "(", "arg2", ",", "parameter", ")", ":", "\n", "\t\t\t", "param", "=", "arg2", "\n", "", "else", ":", "\n", "\t\t\t", "param", "=", "parameter", "(", "arg2", ")", "\n", "", "", "if", "prob", "==", "None", "or", "param", "==", "None", ":", "\n", "\t\t", "raise", "TypeError", "(", "\"Wrong types for the arguments\"", ")", "\n", "\n", "", "prob", ".", "set_bias", "(", "param", ".", "bias", ")", "\n", "liblinear", ".", "set_print_string_function", "(", "param", ".", "print_func", ")", "\n", "err_msg", "=", "liblinear", ".", "check_parameter", "(", "prob", ",", "param", ")", "\n", "if", "err_msg", ":", "\n", "\t\t", "raise", "ValueError", "(", "'Error: %s'", "%", "err_msg", ")", "\n", "\n", "", "if", "param", ".", "flag_find_parameters", ":", "\n", "\t\t", "nr_fold", "=", "param", ".", "nr_fold", "\n", "best_C", "=", "c_double", "(", ")", "\n", "best_p", "=", "c_double", "(", ")", "\n", "best_score", "=", "c_double", "(", ")", "\n", "if", "param", ".", "flag_C_specified", ":", "\n", "\t\t\t", "start_C", "=", "param", ".", "C", "\n", "", "else", ":", "\n", "\t\t\t", "start_C", "=", "-", "1.0", "\n", "", "if", "param", ".", "flag_p_specified", ":", "\n", "\t\t\t", "start_p", "=", "param", ".", "p", "\n", "", "else", ":", "\n", "\t\t\t", "start_p", "=", "-", "1.0", "\n", "", "liblinear", ".", "find_parameters", "(", "prob", ",", "param", ",", "nr_fold", ",", "start_C", ",", "start_p", ",", "best_C", ",", "best_p", ",", "best_score", ")", "\n", "if", "param", ".", "solver_type", "in", "[", "L2R_LR", ",", "L2R_L2LOSS_SVC", "]", ":", "\n", "\t\t\t", "print", "(", "\"Best C = %g  CV accuracy = %g%%\\n\"", "%", "(", "best_C", ".", "value", ",", "100.0", "*", "best_score", ".", "value", ")", ")", "\n", "", "elif", "param", ".", "solver_type", "in", "[", "L2R_L2LOSS_SVR", "]", ":", "\n", "\t\t\t", "print", "(", "\"Best C = %g Best p = %g  CV MSE = %g\\n\"", "%", "(", "best_C", ".", "value", ",", "best_p", ".", "value", ",", "best_score", ".", "value", ")", ")", "\n", "", "return", "best_C", ".", "value", ",", "best_p", ".", "value", ",", "best_score", ".", "value", "\n", "\n", "\n", "", "elif", "param", ".", "flag_cross_validation", ":", "\n", "\t\t", "l", ",", "nr_fold", "=", "prob", ".", "l", ",", "param", ".", "nr_fold", "\n", "target", "=", "(", "c_double", "*", "l", ")", "(", ")", "\n", "liblinear", ".", "cross_validation", "(", "prob", ",", "param", ",", "nr_fold", ",", "target", ")", "\n", "ACC", ",", "MSE", ",", "SCC", "=", "evaluations", "(", "prob", ".", "y", "[", ":", "l", "]", ",", "target", "[", ":", "l", "]", ")", "\n", "if", "param", ".", "solver_type", "in", "[", "L2R_L2LOSS_SVR", ",", "L2R_L2LOSS_SVR_DUAL", ",", "L2R_L1LOSS_SVR_DUAL", "]", ":", "\n", "\t\t\t", "print", "(", "\"Cross Validation Mean squared error = %g\"", "%", "MSE", ")", "\n", "print", "(", "\"Cross Validation Squared correlation coefficient = %g\"", "%", "SCC", ")", "\n", "return", "MSE", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"Cross Validation Accuracy = %g%%\"", "%", "ACC", ")", "\n", "return", "ACC", "\n", "", "", "else", ":", "\n", "\t\t", "m", "=", "liblinear", ".", "train", "(", "prob", ",", "param", ")", "\n", "m", "=", "toPyModel", "(", "m", ")", "\n", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinearutil.predict": [[161, 280], ["options.split", "m.get_nr_class", "m.get_nr_feature", "m.is_probability_model", "commonutil.evaluations", "m.is_regression_model", "print", "isinstance", "liblinear.scipy.ascontiguousarray", "TypeError", "len", "liblinear.feature_node", "liblinear.feature_node", "isinstance", "len", "range", "range", "len", "liblinearutil.predict.info"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_nr_class", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_nr_feature", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.is_probability_model", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.commonutil.evaluations", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.is_regression_model"], ["", "", "def", "predict", "(", "y", ",", "x", ",", "m", ",", "options", "=", "\"\"", ")", ":", "\n", "\t", "\"\"\"\n\tpredict(y, x, m [, options]) -> (p_labels, p_acc, p_vals)\n\n\ty: a list/tuple/ndarray of l true labels (type must be int/double).\n\t   It is used for calculating the accuracy. Use [] if true labels are\n\t   unavailable.\n\n\tx: 1. a list/tuple of l training instances. Feature vector of\n\t      each training instance is a list/tuple or dictionary.\n\n\t   2. an l * n numpy ndarray or scipy spmatrix (n: number of features).\n\n\tPredict data (y, x) with the SVM model m.\n\toptions:\n\t    -b probability_estimates: whether to output probability estimates, 0 or 1 (default 0); currently for logistic regression only\n\t    -q quiet mode (no outputs)\n\n\tThe return tuple contains\n\tp_labels: a list of predicted labels\n\tp_acc: a tuple including  accuracy (for classification), mean-squared\n\t       error, and squared correlation coefficient (for regression).\n\tp_vals: a list of decision values or probability estimates (if '-b 1'\n\t        is specified). If k is the number of classes, for decision values,\n\t        each element includes results of predicting k binary-class\n\t        SVMs. if k = 2 and solver is not MCSVM_CS, only one decision value\n\t        is returned. For probabilities, each element contains k values\n\t        indicating the probability that the testing instance is in each class.\n\t        Note that the order of classes here is the same as 'model.label'\n\t        field in the model structure.\n\t\"\"\"", "\n", "\n", "def", "info", "(", "s", ")", ":", "\n", "\t\t", "print", "(", "s", ")", "\n", "\n", "", "if", "scipy", "and", "isinstance", "(", "x", ",", "scipy", ".", "ndarray", ")", ":", "\n", "\t\t", "x", "=", "scipy", ".", "ascontiguousarray", "(", "x", ")", "# enforce row-major", "\n", "", "elif", "sparse", "and", "isinstance", "(", "x", ",", "sparse", ".", "spmatrix", ")", ":", "\n", "\t\t", "x", "=", "x", ".", "tocsr", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "\t\t", "raise", "TypeError", "(", "\"type of x: {0} is not supported!\"", ".", "format", "(", "type", "(", "x", ")", ")", ")", "\n", "\n", "", "if", "(", "not", "isinstance", "(", "y", ",", "(", "list", ",", "tuple", ")", ")", ")", "and", "(", "not", "(", "scipy", "and", "isinstance", "(", "y", ",", "scipy", ".", "ndarray", ")", ")", ")", ":", "\n", "\t\t", "raise", "TypeError", "(", "\"type of y: {0} is not supported!\"", ".", "format", "(", "type", "(", "y", ")", ")", ")", "\n", "\n", "", "predict_probability", "=", "0", "\n", "argv", "=", "options", ".", "split", "(", ")", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "argv", ")", ":", "\n", "\t\t", "if", "argv", "[", "i", "]", "==", "'-b'", ":", "\n", "\t\t\t", "i", "+=", "1", "\n", "predict_probability", "=", "int", "(", "argv", "[", "i", "]", ")", "\n", "", "elif", "argv", "[", "i", "]", "==", "'-q'", ":", "\n", "\t\t\t", "info", "=", "print_null", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "\"Wrong options\"", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "solver_type", "=", "m", ".", "param", ".", "solver_type", "\n", "nr_class", "=", "m", ".", "get_nr_class", "(", ")", "\n", "nr_feature", "=", "m", ".", "get_nr_feature", "(", ")", "\n", "is_prob_model", "=", "m", ".", "is_probability_model", "(", ")", "\n", "bias", "=", "m", ".", "bias", "\n", "if", "bias", ">=", "0", ":", "\n", "\t\t", "biasterm", "=", "feature_node", "(", "nr_feature", "+", "1", ",", "bias", ")", "\n", "", "else", ":", "\n", "\t\t", "biasterm", "=", "feature_node", "(", "-", "1", ",", "bias", ")", "\n", "", "pred_labels", "=", "[", "]", "\n", "pred_values", "=", "[", "]", "\n", "\n", "if", "scipy", "and", "isinstance", "(", "x", ",", "sparse", ".", "spmatrix", ")", ":", "\n", "\t\t", "nr_instance", "=", "x", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t", "nr_instance", "=", "len", "(", "x", ")", "\n", "\n", "", "if", "predict_probability", ":", "\n", "\t\t", "if", "not", "is_prob_model", ":", "\n", "\t\t\t", "raise", "TypeError", "(", "'probability output is only supported for logistic regression'", ")", "\n", "", "prob_estimates", "=", "(", "c_double", "*", "nr_class", ")", "(", ")", "\n", "for", "i", "in", "range", "(", "nr_instance", ")", ":", "\n", "\t\t\t", "if", "scipy", "and", "isinstance", "(", "x", ",", "sparse", ".", "spmatrix", ")", ":", "\n", "\t\t\t\t", "indslice", "=", "slice", "(", "x", ".", "indptr", "[", "i", "]", ",", "x", ".", "indptr", "[", "i", "+", "1", "]", ")", "\n", "xi", ",", "idx", "=", "gen_feature_nodearray", "(", "(", "x", ".", "indices", "[", "indslice", "]", ",", "x", ".", "data", "[", "indslice", "]", ")", ",", "feature_max", "=", "nr_feature", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "xi", ",", "idx", "=", "gen_feature_nodearray", "(", "x", "[", "i", "]", ",", "feature_max", "=", "nr_feature", ")", "\n", "", "xi", "[", "-", "2", "]", "=", "biasterm", "\n", "label", "=", "liblinear", ".", "predict_probability", "(", "m", ",", "xi", ",", "prob_estimates", ")", "\n", "values", "=", "prob_estimates", "[", ":", "nr_class", "]", "\n", "pred_labels", "+=", "[", "label", "]", "\n", "pred_values", "+=", "[", "values", "]", "\n", "", "", "else", ":", "\n", "\t\t", "if", "nr_class", "<=", "2", ":", "\n", "\t\t\t", "nr_classifier", "=", "1", "\n", "", "else", ":", "\n", "\t\t\t", "nr_classifier", "=", "nr_class", "\n", "", "dec_values", "=", "(", "c_double", "*", "nr_classifier", ")", "(", ")", "\n", "for", "i", "in", "range", "(", "nr_instance", ")", ":", "\n", "\t\t\t", "if", "scipy", "and", "isinstance", "(", "x", ",", "sparse", ".", "spmatrix", ")", ":", "\n", "\t\t\t\t", "indslice", "=", "slice", "(", "x", ".", "indptr", "[", "i", "]", ",", "x", ".", "indptr", "[", "i", "+", "1", "]", ")", "\n", "xi", ",", "idx", "=", "gen_feature_nodearray", "(", "(", "x", ".", "indices", "[", "indslice", "]", ",", "x", ".", "data", "[", "indslice", "]", ")", ",", "feature_max", "=", "nr_feature", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "xi", ",", "idx", "=", "gen_feature_nodearray", "(", "x", "[", "i", "]", ",", "feature_max", "=", "nr_feature", ")", "\n", "", "xi", "[", "-", "2", "]", "=", "biasterm", "\n", "label", "=", "liblinear", ".", "predict_values", "(", "m", ",", "xi", ",", "dec_values", ")", "\n", "values", "=", "dec_values", "[", ":", "nr_classifier", "]", "\n", "pred_labels", "+=", "[", "label", "]", "\n", "pred_values", "+=", "[", "values", "]", "\n", "\n", "", "", "if", "len", "(", "y", ")", "==", "0", ":", "\n", "\t\t", "y", "=", "[", "0", "]", "*", "nr_instance", "\n", "", "ACC", ",", "MSE", ",", "SCC", "=", "evaluations", "(", "y", ",", "pred_labels", ")", "\n", "\n", "if", "m", ".", "is_regression_model", "(", ")", ":", "\n", "\t\t", "info", "(", "\"Mean squared error = %g (regression)\"", "%", "MSE", ")", "\n", "info", "(", "\"Squared correlation coefficient = %g (regression)\"", "%", "SCC", ")", "\n", "", "else", ":", "\n", "\t\t", "info", "(", "\"Accuracy = %g%% (%d/%d) (classification)\"", "%", "(", "ACC", ",", "int", "(", "round", "(", "nr_instance", "*", "ACC", "/", "100", ")", ")", ",", "nr_instance", ")", ")", "\n", "\n", "", "return", "pred_labels", ",", "(", "ACC", ",", "MSE", ",", "SCC", ")", ",", "pred_values", "\n", "", ""]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.feature_node.__str__": [[68, 70], ["None"], "methods", ["None"], ["def", "__str__", "(", "self", ")", ":", "\n", "\t\t", "return", "'%d:%g'", "%", "(", "self", ".", "index", ",", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.problem.__init__": [[159, 207], ["isinstance", "len", "liblinear.problem.set_bias", "TypeError", "isinstance", "liblinear.csr_to_problem", "enumerate", "isinstance", "enumerate", "isinstance", "addressof", "cast", "scipy.ctypeslib.as_array", "enumerate", "isinstance", "len", "len", "ValueError", "isinstance", "isinstance", "isinstance", "TypeError", "liblinear.gen_feature_nodearray", "max", "scipy.ctypeslib.as_array", "POINTER", "POINTER", "isinstance", "type", "len", "ValueError", "scipy.ascontiguousarray", "x.tocsr.tocsr.tocsr", "liblinear.problem.x_space.ctypes.data_as", "sizeof", "type", "POINTER"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.problem.set_bias", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.csr_to_problem", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.gen_feature_nodearray"], ["def", "__init__", "(", "self", ",", "y", ",", "x", ",", "bias", "=", "-", "1", ")", ":", "\n", "\t\t", "if", "(", "not", "isinstance", "(", "y", ",", "(", "list", ",", "tuple", ")", ")", ")", "and", "(", "not", "(", "scipy", "and", "isinstance", "(", "y", ",", "scipy", ".", "ndarray", ")", ")", ")", ":", "\n", "\t\t\t", "raise", "TypeError", "(", "\"type of y: {0} is not supported!\"", ".", "format", "(", "type", "(", "y", ")", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "\t\t\t", "if", "len", "(", "y", ")", "!=", "len", "(", "x", ")", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "\"len(y) != len(x)\"", ")", "\n", "", "", "elif", "scipy", "!=", "None", "and", "isinstance", "(", "x", ",", "(", "scipy", ".", "ndarray", ",", "sparse", ".", "spmatrix", ")", ")", ":", "\n", "\t\t\t", "if", "len", "(", "y", ")", "!=", "x", ".", "shape", "[", "0", "]", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "\"len(y) != len(x)\"", ")", "\n", "", "if", "isinstance", "(", "x", ",", "scipy", ".", "ndarray", ")", ":", "\n", "\t\t\t\t", "x", "=", "scipy", ".", "ascontiguousarray", "(", "x", ")", "# enforce row-major", "\n", "", "if", "isinstance", "(", "x", ",", "sparse", ".", "spmatrix", ")", ":", "\n", "\t\t\t\t", "x", "=", "x", ".", "tocsr", "(", ")", "\n", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "TypeError", "(", "\"type of x: {0} is not supported!\"", ".", "format", "(", "type", "(", "x", ")", ")", ")", "\n", "", "self", ".", "l", "=", "l", "=", "len", "(", "y", ")", "\n", "self", ".", "bias", "=", "-", "1", "\n", "\n", "max_idx", "=", "0", "\n", "x_space", "=", "self", ".", "x_space", "=", "[", "]", "\n", "if", "scipy", "!=", "None", "and", "isinstance", "(", "x", ",", "sparse", ".", "csr_matrix", ")", ":", "\n", "\t\t\t", "csr_to_problem", "(", "x", ",", "self", ")", "\n", "max_idx", "=", "x", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t", "for", "i", ",", "xi", "in", "enumerate", "(", "x", ")", ":", "\n", "\t\t\t\t", "tmp_xi", ",", "tmp_idx", "=", "gen_feature_nodearray", "(", "xi", ")", "\n", "x_space", "+=", "[", "tmp_xi", "]", "\n", "max_idx", "=", "max", "(", "max_idx", ",", "tmp_idx", ")", "\n", "", "", "self", ".", "n", "=", "max_idx", "\n", "\n", "self", ".", "y", "=", "(", "c_double", "*", "l", ")", "(", ")", "\n", "if", "scipy", "!=", "None", "and", "isinstance", "(", "y", ",", "scipy", ".", "ndarray", ")", ":", "\n", "\t\t\t", "scipy", ".", "ctypeslib", ".", "as_array", "(", "self", ".", "y", ",", "(", "self", ".", "l", ",", ")", ")", "[", ":", "]", "=", "y", "\n", "", "else", ":", "\n", "\t\t\t", "for", "i", ",", "yi", "in", "enumerate", "(", "y", ")", ":", "self", ".", "y", "[", "i", "]", "=", "yi", "\n", "\n", "", "self", ".", "x", "=", "(", "POINTER", "(", "feature_node", ")", "*", "l", ")", "(", ")", "\n", "if", "scipy", "!=", "None", "and", "isinstance", "(", "x", ",", "sparse", ".", "csr_matrix", ")", ":", "\n", "\t\t\t", "base", "=", "addressof", "(", "self", ".", "x_space", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "feature_node", ")", ")", "[", "0", "]", ")", "\n", "x_ptr", "=", "cast", "(", "self", ".", "x", ",", "POINTER", "(", "c_uint64", ")", ")", "\n", "x_ptr", "=", "scipy", ".", "ctypeslib", ".", "as_array", "(", "x_ptr", ",", "(", "self", ".", "l", ",", ")", ")", "\n", "x_ptr", "[", ":", "]", "=", "self", ".", "rowptr", "[", ":", "-", "1", "]", "*", "sizeof", "(", "feature_node", ")", "+", "base", "\n", "", "else", ":", "\n", "\t\t\t", "for", "i", ",", "xi", "in", "enumerate", "(", "self", ".", "x_space", ")", ":", "self", ".", "x", "[", "i", "]", "=", "xi", "\n", "\n", "", "self", ".", "set_bias", "(", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.problem.set_bias": [[208, 226], ["isinstance", "liblinear.feature_node", "liblinear.feature_node"], "methods", ["None"], ["", "def", "set_bias", "(", "self", ",", "bias", ")", ":", "\n", "\t\t", "if", "self", ".", "bias", "==", "bias", ":", "\n", "\t\t\t", "return", "\n", "", "if", "bias", ">=", "0", "and", "self", ".", "bias", "<", "0", ":", "\n", "\t\t\t", "self", ".", "n", "+=", "1", "\n", "node", "=", "feature_node", "(", "self", ".", "n", ",", "bias", ")", "\n", "", "if", "bias", "<", "0", "and", "self", ".", "bias", ">=", "0", ":", "\n", "\t\t\t", "self", ".", "n", "-=", "1", "\n", "node", "=", "feature_node", "(", "-", "1", ",", "bias", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "x_space", ",", "list", ")", ":", "\n", "\t\t\t", "for", "xi", "in", "self", ".", "x_space", ":", "\n", "\t\t\t\t", "xi", "[", "-", "2", "]", "=", "node", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "x_space", "[", "\"index\"", "]", "[", "self", ".", "rowptr", "[", "1", ":", "]", "-", "2", "]", "=", "node", ".", "index", "\n", "self", ".", "x_space", "[", "\"value\"", "]", "[", "self", ".", "rowptr", "[", "1", ":", "]", "-", "2", "]", "=", "node", ".", "value", "\n", "\n", "", "self", ".", "bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.parameter.__init__": [[233, 237], ["liblinear.parameter.parse_options"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.parameter.parse_options"], ["def", "__init__", "(", "self", ",", "options", "=", "None", ")", ":", "\n", "\t\t", "if", "options", "==", "None", ":", "\n", "\t\t\t", "options", "=", "''", "\n", "", "self", ".", "parse_options", "(", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.parameter.__str__": [[238, 247], ["map", "zip", "s.strip.strip.strip", "list", "liblinear.parameter.__dict__.keys", "getattr"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "\t\t", "s", "=", "''", "\n", "attrs", "=", "parameter", ".", "_names", "+", "list", "(", "self", ".", "__dict__", ".", "keys", "(", ")", ")", "\n", "values", "=", "map", "(", "lambda", "attr", ":", "getattr", "(", "self", ",", "attr", ")", ",", "attrs", ")", "\n", "for", "attr", ",", "val", "in", "zip", "(", "attrs", ",", "values", ")", ":", "\n", "\t\t\t", "s", "+=", "(", "' %s: %s\\n'", "%", "(", "attr", ",", "val", ")", ")", "\n", "", "s", "=", "s", ".", "strip", "(", ")", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.parameter.set_to_default_values": [[248, 267], ["float", "cast"], "methods", ["None"], ["", "def", "set_to_default_values", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "solver_type", "=", "L2R_L2LOSS_SVC_DUAL", "\n", "self", ".", "eps", "=", "float", "(", "'inf'", ")", "\n", "self", ".", "C", "=", "1", "\n", "self", ".", "p", "=", "0.1", "\n", "self", ".", "nr_thread", "=", "1", "\n", "self", ".", "nr_weight", "=", "0", "\n", "self", ".", "weight_label", "=", "None", "\n", "self", ".", "weight", "=", "None", "\n", "self", ".", "init_sol", "=", "None", "\n", "self", ".", "bias", "=", "-", "1", "\n", "self", ".", "flag_cross_validation", "=", "False", "\n", "self", ".", "flag_C_specified", "=", "False", "\n", "self", ".", "flag_p_specified", "=", "False", "\n", "self", ".", "flag_solver_specified", "=", "False", "\n", "self", ".", "flag_find_parameters", "=", "False", "\n", "self", ".", "flag_omp", "=", "False", "\n", "self", ".", "nr_fold", "=", "0", "\n", "self", ".", "print_func", "=", "cast", "(", "None", ",", "PRINT_STRING_FUN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.parameter.parse_options": [[268, 359], ["isinstance", "liblinear.parameter.set_to_default_values", "cast", "liblinear.set_print_string_function", "range", "isinstance", "len", "float", "options.split", "TypeError", "int", "float", "ValueError", "ValueError", "float", "float", "float", "int", "ValueError", "int", "argv[].startswith", "int", "float", "PRINT_STRING_FUN", "ValueError"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.parameter.set_to_default_values"], ["", "def", "parse_options", "(", "self", ",", "options", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "options", ",", "list", ")", ":", "\n", "\t\t\t", "argv", "=", "options", "\n", "", "elif", "isinstance", "(", "options", ",", "str", ")", ":", "\n", "\t\t\t", "argv", "=", "options", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "TypeError", "(", "\"arg 1 should be a list or a str.\"", ")", "\n", "", "self", ".", "set_to_default_values", "(", ")", "\n", "self", ".", "print_func", "=", "cast", "(", "None", ",", "PRINT_STRING_FUN", ")", "\n", "weight_label", "=", "[", "]", "\n", "weight", "=", "[", "]", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "argv", ")", ":", "\n", "\t\t\t", "if", "argv", "[", "i", "]", "==", "\"-s\"", ":", "\n", "\t\t\t\t", "i", "=", "i", "+", "1", "\n", "self", ".", "solver_type", "=", "int", "(", "argv", "[", "i", "]", ")", "\n", "self", ".", "flag_solver_specified", "=", "True", "\n", "", "elif", "argv", "[", "i", "]", "==", "\"-c\"", ":", "\n", "\t\t\t\t", "i", "=", "i", "+", "1", "\n", "self", ".", "C", "=", "float", "(", "argv", "[", "i", "]", ")", "\n", "self", ".", "flag_C_specified", "=", "True", "\n", "", "elif", "argv", "[", "i", "]", "==", "\"-p\"", ":", "\n", "\t\t\t\t", "i", "=", "i", "+", "1", "\n", "self", ".", "p", "=", "float", "(", "argv", "[", "i", "]", ")", "\n", "self", ".", "flag_p_specified", "=", "True", "\n", "", "elif", "argv", "[", "i", "]", "==", "\"-e\"", ":", "\n", "\t\t\t\t", "i", "=", "i", "+", "1", "\n", "self", ".", "eps", "=", "float", "(", "argv", "[", "i", "]", ")", "\n", "", "elif", "argv", "[", "i", "]", "==", "\"-B\"", ":", "\n", "\t\t\t\t", "i", "=", "i", "+", "1", "\n", "self", ".", "bias", "=", "float", "(", "argv", "[", "i", "]", ")", "\n", "", "elif", "argv", "[", "i", "]", "==", "\"-v\"", ":", "\n", "\t\t\t\t", "i", "=", "i", "+", "1", "\n", "self", ".", "flag_cross_validation", "=", "1", "\n", "self", ".", "nr_fold", "=", "int", "(", "argv", "[", "i", "]", ")", "\n", "if", "self", ".", "nr_fold", "<", "2", ":", "\n", "\t\t\t\t\t", "raise", "ValueError", "(", "\"n-fold cross validation: n must >= 2\"", ")", "\n", "", "", "elif", "argv", "[", "i", "]", "==", "\"-n\"", ":", "\n", "\t\t\t\t", "i", "=", "i", "+", "1", "\n", "self", ".", "flag_omp", "=", "True", "\n", "self", ".", "nr_thread", "=", "int", "(", "argv", "[", "i", "]", ")", "\n", "", "elif", "argv", "[", "i", "]", ".", "startswith", "(", "\"-w\"", ")", ":", "\n", "\t\t\t\t", "i", "=", "i", "+", "1", "\n", "self", ".", "nr_weight", "+=", "1", "\n", "weight_label", "+=", "[", "int", "(", "argv", "[", "i", "-", "1", "]", "[", "2", ":", "]", ")", "]", "\n", "weight", "+=", "[", "float", "(", "argv", "[", "i", "]", ")", "]", "\n", "", "elif", "argv", "[", "i", "]", "==", "\"-q\"", ":", "\n", "\t\t\t\t", "self", ".", "print_func", "=", "PRINT_STRING_FUN", "(", "print_null", ")", "\n", "", "elif", "argv", "[", "i", "]", "==", "\"-C\"", ":", "\n", "\t\t\t\t", "self", ".", "flag_find_parameters", "=", "True", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "\"Wrong options\"", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "liblinear", ".", "set_print_string_function", "(", "self", ".", "print_func", ")", "\n", "self", ".", "weight_label", "=", "(", "c_int", "*", "self", ".", "nr_weight", ")", "(", ")", "\n", "self", ".", "weight", "=", "(", "c_double", "*", "self", ".", "nr_weight", ")", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_weight", ")", ":", "\n", "\t\t\t", "self", ".", "weight", "[", "i", "]", "=", "weight", "[", "i", "]", "\n", "self", ".", "weight_label", "[", "i", "]", "=", "weight_label", "[", "i", "]", "\n", "\n", "# default solver for parameter selection is L2R_L2LOSS_SVC", "\n", "", "if", "self", ".", "flag_find_parameters", ":", "\n", "\t\t\t", "if", "not", "self", ".", "flag_cross_validation", ":", "\n", "\t\t\t\t", "self", ".", "nr_fold", "=", "5", "\n", "", "if", "not", "self", ".", "flag_solver_specified", ":", "\n", "\t\t\t\t", "self", ".", "solver_type", "=", "L2R_L2LOSS_SVC", "\n", "self", ".", "flag_solver_specified", "=", "True", "\n", "", "elif", "self", ".", "solver_type", "not", "in", "[", "L2R_LR", ",", "L2R_L2LOSS_SVC", ",", "L2R_L2LOSS_SVR", "]", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "\"Warm-start parameter search only available for -s 0, -s 2 and -s 11\"", ")", "\n", "\n", "", "", "if", "self", ".", "flag_omp", ":", "\n", "\t\t\t", "if", "not", "self", ".", "flag_solver_specified", ":", "\n", "\t\t\t\t", "self", ".", "solver_type", "=", "L2R_L2LOSS_SVC", "\n", "self", ".", "flag_solver_specified", "=", "True", "\n", "", "elif", "self", ".", "solver_type", "not", "in", "[", "L2R_LR", ",", "L2R_L2LOSS_SVC", ",", "L2R_L2LOSS_SVR", ",", "L2R_L2LOSS_SVC_DUAL", ",", "L2R_L1LOSS_SVC_DUAL", ",", "L1R_LR", ",", "L1R_L2LOSS_SVC", "]", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "\"Parallel LIBLINEAR is only available for -s 0, 1, 2, 3, 5, 6, 11 now\"", ")", "\n", "\n", "", "", "if", "self", ".", "eps", "==", "float", "(", "'inf'", ")", ":", "\n", "\t\t\t", "if", "self", ".", "solver_type", "in", "[", "L2R_LR", ",", "L2R_L2LOSS_SVC", "]", ":", "\n", "\t\t\t\t", "self", ".", "eps", "=", "0.01", "\n", "", "elif", "self", ".", "solver_type", "in", "[", "L2R_L2LOSS_SVR", "]", ":", "\n", "\t\t\t\t", "self", ".", "eps", "=", "0.0001", "\n", "", "elif", "self", ".", "solver_type", "in", "[", "L2R_L2LOSS_SVC_DUAL", ",", "L2R_L1LOSS_SVC_DUAL", ",", "MCSVM_CS", ",", "L2R_LR_DUAL", "]", ":", "\n", "\t\t\t\t", "self", ".", "eps", "=", "0.1", "\n", "", "elif", "self", ".", "solver_type", "in", "[", "L1R_L2LOSS_SVC", ",", "L1R_LR", "]", ":", "\n", "\t\t\t\t", "self", ".", "eps", "=", "0.01", "\n", "", "elif", "self", ".", "solver_type", "in", "[", "L2R_L2LOSS_SVR_DUAL", ",", "L2R_L1LOSS_SVR_DUAL", "]", ":", "\n", "\t\t\t\t", "self", ".", "eps", "=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__init__": [[365, 367], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "__createfrom__", "=", "'python'", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.__del__": [[368, 372], ["hasattr", "liblinear.free_and_destroy_model", "pointer"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "# free memory created by C to avoid memory leak", "\n", "\t\t", "if", "hasattr", "(", "self", ",", "'__createfrom__'", ")", "and", "self", ".", "__createfrom__", "==", "'C'", ":", "\n", "\t\t\t", "liblinear", ".", "free_and_destroy_model", "(", "pointer", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_nr_feature": [[373, 375], ["liblinear.get_nr_feature"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_nr_feature"], ["", "", "def", "get_nr_feature", "(", "self", ")", ":", "\n", "\t\t", "return", "liblinear", ".", "get_nr_feature", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_nr_class": [[376, 378], ["liblinear.get_nr_class"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_nr_class"], ["", "def", "get_nr_class", "(", "self", ")", ":", "\n", "\t\t", "return", "liblinear", ".", "get_nr_class", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_labels": [[379, 384], ["liblinear.model.get_nr_class", "liblinear.get_labels"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_nr_class", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_labels"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "\t\t", "nr_class", "=", "self", ".", "get_nr_class", "(", ")", "\n", "labels", "=", "(", "c_int", "*", "nr_class", ")", "(", ")", "\n", "liblinear", ".", "get_labels", "(", "self", ",", "labels", ")", "\n", "return", "labels", "[", ":", "nr_class", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_decfun_coef": [[385, 387], ["liblinear.get_decfun_coef"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_decfun_coef"], ["", "def", "get_decfun_coef", "(", "self", ",", "feat_idx", ",", "label_idx", "=", "0", ")", ":", "\n", "\t\t", "return", "liblinear", ".", "get_decfun_coef", "(", "self", ",", "feat_idx", ",", "label_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_decfun_bias": [[388, 390], ["liblinear.get_decfun_bias"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_decfun_bias"], ["", "def", "get_decfun_bias", "(", "self", ",", "label_idx", "=", "0", ")", ":", "\n", "\t\t", "return", "liblinear", ".", "get_decfun_bias", "(", "self", ",", "label_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_decfun": [[391, 395], ["liblinear.get_decfun_bias", "liblinear.get_decfun_coef", "range"], "methods", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_decfun_bias", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.get_decfun_coef"], ["", "def", "get_decfun", "(", "self", ",", "label_idx", "=", "0", ")", ":", "\n", "\t\t", "w", "=", "[", "liblinear", ".", "get_decfun_coef", "(", "self", ",", "feat_idx", ",", "label_idx", ")", "for", "feat_idx", "in", "range", "(", "1", ",", "self", ".", "nr_feature", "+", "1", ")", "]", "\n", "b", "=", "liblinear", ".", "get_decfun_bias", "(", "self", ",", "label_idx", ")", "\n", "return", "(", "w", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.is_probability_model": [[396, 398], ["liblinear.check_probability_model"], "methods", ["None"], ["", "def", "is_probability_model", "(", "self", ")", ":", "\n", "\t\t", "return", "(", "liblinear", ".", "check_probability_model", "(", "self", ")", "==", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.model.is_regression_model": [[399, 401], ["liblinear.check_regression_model"], "methods", ["None"], ["", "def", "is_regression_model", "(", "self", ")", ":", "\n", "\t\t", "return", "(", "liblinear", ".", "check_regression_model", "(", "self", ")", "==", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.print_null": [[53, 55], ["None"], "function", ["None"], ["def", "print_null", "(", "s", ")", ":", "\n", "\t", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.genFields": [[56, 58], ["list", "zip"], "function", ["None"], ["", "def", "genFields", "(", "names", ",", "types", ")", ":", "\n", "\t", "return", "list", "(", "zip", "(", "names", ",", "types", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.fillprototype": [[59, 62], ["None"], "function", ["None"], ["", "def", "fillprototype", "(", "f", ",", "restype", ",", "argtypes", ")", ":", "\n", "\t", "f", ".", "restype", "=", "restype", "\n", "f", ".", "argtypes", "=", "argtypes", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.gen_feature_nodearray": [[71, 118], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "enumerate", "enumerate", "len", "len", "isinstance", "isinstance", "len", "isinstance", "filter", "sorted", "TypeError", "len", "scipy.where", "xi.nonzero", "xi.keys", "isinstance", "filter", "scipy.where", "range", "len"], "function", ["None"], ["", "", "def", "gen_feature_nodearray", "(", "xi", ",", "feature_max", "=", "None", ")", ":", "\n", "\t", "if", "feature_max", ":", "\n", "\t\t", "assert", "(", "isinstance", "(", "feature_max", ",", "int", ")", ")", "\n", "\n", "", "xi_shift", "=", "0", "# ensure correct indices of xi", "\n", "if", "scipy", "and", "isinstance", "(", "xi", ",", "tuple", ")", "and", "len", "(", "xi", ")", "==", "2", "and", "isinstance", "(", "xi", "[", "0", "]", ",", "scipy", ".", "ndarray", ")", "and", "isinstance", "(", "xi", "[", "1", "]", ",", "scipy", ".", "ndarray", ")", ":", "# for a sparse vector", "\n", "\t\t", "index_range", "=", "xi", "[", "0", "]", "+", "1", "# index starts from 1", "\n", "if", "feature_max", ":", "\n", "\t\t\t", "index_range", "=", "index_range", "[", "scipy", ".", "where", "(", "index_range", "<=", "feature_max", ")", "]", "\n", "", "", "elif", "scipy", "and", "isinstance", "(", "xi", ",", "scipy", ".", "ndarray", ")", ":", "\n", "\t\t", "xi_shift", "=", "1", "\n", "index_range", "=", "xi", ".", "nonzero", "(", ")", "[", "0", "]", "+", "1", "# index starts from 1", "\n", "if", "feature_max", ":", "\n", "\t\t\t", "index_range", "=", "index_range", "[", "scipy", ".", "where", "(", "index_range", "<=", "feature_max", ")", "]", "\n", "", "", "elif", "isinstance", "(", "xi", ",", "(", "dict", ",", "list", ",", "tuple", ")", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "xi", ",", "dict", ")", ":", "\n", "\t\t\t", "index_range", "=", "xi", ".", "keys", "(", ")", "\n", "", "elif", "isinstance", "(", "xi", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "\t\t\t", "xi_shift", "=", "1", "\n", "index_range", "=", "range", "(", "1", ",", "len", "(", "xi", ")", "+", "1", ")", "\n", "", "index_range", "=", "filter", "(", "lambda", "j", ":", "xi", "[", "j", "-", "xi_shift", "]", "!=", "0", ",", "index_range", ")", "\n", "\n", "if", "feature_max", ":", "\n", "\t\t\t", "index_range", "=", "filter", "(", "lambda", "j", ":", "j", "<=", "feature_max", ",", "index_range", ")", "\n", "", "index_range", "=", "sorted", "(", "index_range", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "TypeError", "(", "'xi should be a dictionary, list, tuple, 1-d numpy array, or tuple of (index, data)'", ")", "\n", "\n", "", "ret", "=", "(", "feature_node", "*", "(", "len", "(", "index_range", ")", "+", "2", ")", ")", "(", ")", "\n", "ret", "[", "-", "1", "]", ".", "index", "=", "-", "1", "# for bias term", "\n", "ret", "[", "-", "2", "]", ".", "index", "=", "-", "1", "\n", "\n", "if", "scipy", "and", "isinstance", "(", "xi", ",", "tuple", ")", "and", "len", "(", "xi", ")", "==", "2", "and", "isinstance", "(", "xi", "[", "0", "]", ",", "scipy", ".", "ndarray", ")", "and", "isinstance", "(", "xi", "[", "1", "]", ",", "scipy", ".", "ndarray", ")", ":", "# for a sparse vector", "\n", "\t\t", "for", "idx", ",", "j", "in", "enumerate", "(", "index_range", ")", ":", "\n", "\t\t\t", "ret", "[", "idx", "]", ".", "index", "=", "j", "\n", "ret", "[", "idx", "]", ".", "value", "=", "(", "xi", "[", "1", "]", ")", "[", "idx", "]", "\n", "", "", "else", ":", "\n", "\t\t", "for", "idx", ",", "j", "in", "enumerate", "(", "index_range", ")", ":", "\n", "\t\t\t", "ret", "[", "idx", "]", ".", "index", "=", "j", "\n", "ret", "[", "idx", "]", ".", "value", "=", "xi", "[", "j", "-", "xi_shift", "]", "\n", "\n", "", "", "max_idx", "=", "0", "\n", "if", "len", "(", "index_range", ")", ">", "0", ":", "\n", "\t\t", "max_idx", "=", "index_range", "[", "-", "1", "]", "\n", "", "return", "ret", ",", "max_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.csr_to_problem_jit": [[126, 134], ["range", "range"], "function", ["None"], ["", "@", "jit", "\n", "def", "csr_to_problem_jit", "(", "l", ",", "x_val", ",", "x_ind", ",", "x_rowptr", ",", "prob_val", ",", "prob_ind", ",", "prob_rowptr", ")", ":", "\n", "\t", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "\t\t", "b1", ",", "e1", "=", "x_rowptr", "[", "i", "]", ",", "x_rowptr", "[", "i", "+", "1", "]", "\n", "b2", ",", "e2", "=", "prob_rowptr", "[", "i", "]", ",", "prob_rowptr", "[", "i", "+", "1", "]", "-", "2", "\n", "for", "j", "in", "range", "(", "b1", ",", "e1", ")", ":", "\n", "\t\t\t", "prob_ind", "[", "j", "-", "b1", "+", "b2", "]", "=", "x_ind", "[", "j", "]", "+", "1", "\n", "prob_val", "[", "j", "-", "b1", "+", "b2", "]", "=", "x_val", "[", "j", "]", "\n", "", "", "", "def", "csr_to_problem_nojit", "(", "l", ",", "x_val", ",", "x_ind", ",", "x_rowptr", ",", "prob_val", ",", "prob_ind", ",", "prob_rowptr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.csr_to_problem_nojit": [[134, 140], ["range", "slice", "slice"], "function", ["None"], ["", "", "", "def", "csr_to_problem_nojit", "(", "l", ",", "x_val", ",", "x_ind", ",", "x_rowptr", ",", "prob_val", ",", "prob_ind", ",", "prob_rowptr", ")", ":", "\n", "\t", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "\t\t", "x_slice", "=", "slice", "(", "x_rowptr", "[", "i", "]", ",", "x_rowptr", "[", "i", "+", "1", "]", ")", "\n", "prob_slice", "=", "slice", "(", "prob_rowptr", "[", "i", "]", ",", "prob_rowptr", "[", "i", "+", "1", "]", "-", "2", ")", "\n", "prob_ind", "[", "prob_slice", "]", "=", "x_ind", "[", "x_slice", "]", "+", "1", "\n", "prob_val", "[", "prob_slice", "]", "=", "x_val", "[", "x_slice", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.csr_to_problem": [[141, 153], ["scipy.empty", "x.indptr.copy", "scipy.arange", "liblinear.csr_to_problem_jit", "liblinear.csr_to_problem_nojit"], "function", ["home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.csr_to_problem_jit", "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.csr_to_problem_nojit"], ["", "", "def", "csr_to_problem", "(", "x", ",", "prob", ")", ":", "\n", "# Extra space for termination node and (possibly) bias term", "\n", "\t", "x_space", "=", "prob", ".", "x_space", "=", "scipy", ".", "empty", "(", "(", "x", ".", "nnz", "+", "x", ".", "shape", "[", "0", "]", "*", "2", ")", ",", "dtype", "=", "feature_node", ")", "\n", "prob", ".", "rowptr", "=", "x", ".", "indptr", ".", "copy", "(", ")", "\n", "prob", ".", "rowptr", "[", "1", ":", "]", "+=", "2", "*", "scipy", ".", "arange", "(", "1", ",", "x", ".", "shape", "[", "0", "]", "+", "1", ")", "\n", "prob_ind", "=", "x_space", "[", "\"index\"", "]", "\n", "prob_val", "=", "x_space", "[", "\"value\"", "]", "\n", "prob_ind", "[", ":", "]", "=", "-", "1", "\n", "if", "jit_enabled", ":", "\n", "\t\t", "csr_to_problem_jit", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "data", ",", "x", ".", "indices", ",", "x", ".", "indptr", ",", "prob_val", ",", "prob_ind", ",", "prob", ".", "rowptr", ")", "\n", "", "else", ":", "\n", "\t\t", "csr_to_problem_nojit", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "data", ",", "x", ".", "indices", ",", "x", ".", "indptr", ",", "prob_val", ",", "prob_ind", ",", "prob", ".", "rowptr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YihengZhang-CV_SeCo-Sequence-Contrastive-Learning.liblinear.liblinear.toPyModel": [[402, 413], ["bool", "ValueError"], "function", ["None"], ["", "", "def", "toPyModel", "(", "model_ptr", ")", ":", "\n", "\t", "\"\"\"\n\ttoPyModel(model_ptr) -> model\n\n\tConvert a ctypes POINTER(model) to a Python model\n\t\"\"\"", "\n", "if", "bool", "(", "model_ptr", ")", "==", "False", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"Null pointer\"", ")", "\n", "", "m", "=", "model_ptr", ".", "contents", "\n", "m", ".", "__createfrom__", "=", "'C'", "\n", "return", "m", "\n", "\n"]]}