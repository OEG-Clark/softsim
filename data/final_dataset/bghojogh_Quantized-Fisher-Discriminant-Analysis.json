{"home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.Plot_error_rate.main.main": [[21, 24], ["main.plot_error_MNIST_in_RDA"], "function", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.Plot_error_rate.main.plot_error_MNIST_in_RDA"], ["def", "main", "(", ")", ":", "\n", "    ", "dataset", "=", "\"Fashion_MNIST\"", "#--> ATT_glasses, Fashion_MNIST", "\n", "plot_error_MNIST_in_RDA", "(", "dataset", "=", "dataset", ",", "show_legends", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.Plot_error_rate.main.plot_error_MNIST_in_RDA": [[25, 37], ["matplotlib.subplots", "numpy.arange", "main.load_variable", "matplotlib.bar", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.load_variable"], ["", "def", "plot_error_MNIST_in_RDA", "(", "dataset", "=", "\"RDA\"", ",", "show_legends", "=", "True", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "63", "+", "1", ",", "1", ")", "\n", "path", "=", "'./values/'", "+", "dataset", "+", "'/'", "\n", "levels", "=", "load_variable", "(", "name_of_variable", "=", "\"best_number_of_levels\"", ",", "path", "=", "path", ")", "\n", "plt", ".", "bar", "(", "x", "=", "x", ",", "height", "=", "levels", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "xlabel", "(", "\"Frequency\"", ",", "fontsize", "=", "13", ")", "\n", "plt", ".", "ylabel", "(", "\"Optimum # quantization levels\"", ",", "fontsize", "=", "13", ")", "\n", "# if show_legends is not None:", "\n", "#     ax.legend()", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.Plot_error_rate.main.load_variable": [[38, 45], ["open", "pickle.load", "open.close"], "function", ["None"], ["", "def", "load_variable", "(", "name_of_variable", ",", "path", "=", "'./'", ")", ":", "\n", "# https://stackoverflow.com/questions/6568007/how-do-i-save-and-restore-multiple-variables-in-python", "\n", "    ", "file_address", "=", "path", "+", "name_of_variable", "+", "'.pckl'", "\n", "f", "=", "open", "(", "file_address", ",", "'rb'", ")", "\n", "variable", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "variable", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_FDA.My_FDA.__init__": [[18, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_components", "=", "None", ",", "kernel", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "U", "=", "None", "\n", "self", ".", "X_train", "=", "None", "\n", "self", ".", "S_W", "=", "None", "\n", "self", ".", "S_T", "=", "None", "\n", "if", "kernel", "is", "not", "None", ":", "\n", "            ", "self", ".", "kernel", "=", "kernel", "\n", "", "else", ":", "\n", "            ", "self", ".", "kernel", "=", "'linear'", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_FDA.My_FDA.fit_transform": [[29, 34], ["my_FDA.My_FDA.fit", "my_FDA.My_FDA.transform"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform"], ["", "", "def", "fit_transform", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "        ", "self", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "X_transformed", "=", "self", ".", "transform", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_FDA.My_FDA.fit": [[35, 94], ["my_FDA.My_FDA._separate_samples_of_classes", "numpy.asarray", "y.reshape.reshape.reshape", "list", "len", "numpy.zeros", "range", "X.mean", "mean_of_total.reshape.reshape.reshape", "numpy.zeros", "range", "numpy.zeros", "range", "print", "numpy.linalg.eigh", "set", "X_class.mean", "mean_of_class.reshape.reshape.reshape", "print", "X_class.mean", "mean_of_class.reshape.reshape.reshape", "range", "numpy.linalg.inv().dot", "eig_val.argsort", "y.reshape.reshape.ravel", "numpy.eye", "X_class.dot().dot", "print", "numpy.ones", "temp.dot", "str", "temp.dot", "numpy.linalg.inv", "X_class.dot", "str", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "        ", "self", ".", "X_train", "=", "X", "\n", "# ------ Separate classes:", "\n", "X_separated_classes", "=", "self", ".", "_separate_samples_of_classes", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "1", "]", "\n", "n_dimensions", "=", "X", ".", "shape", "[", "0", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ".", "ravel", "(", ")", ")", ")", "\n", "n_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "# ------ S_W:", "\n", "self", ".", "S_W", "=", "np", ".", "zeros", "(", "(", "n_dimensions", ",", "n_dimensions", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "# print(\"Calculating Sw: class \" + str(class_index))", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "H", "=", "np", ".", "eye", "(", "n", ")", "-", "(", "(", "1", "/", "n", ")", "*", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ")", ")", "\n", "self", ".", "S_W", "=", "self", ".", "S_W", "+", "X_class", ".", "dot", "(", "H", ")", ".", "dot", "(", "X_class", ".", "T", ")", "\n", "# ------ S_B:", "\n", "", "mean_of_total", "=", "X", ".", "mean", "(", "axis", "=", "1", ")", "\n", "mean_of_total", "=", "mean_of_total", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "S_B", "=", "np", ".", "zeros", "(", "(", "n_dimensions", ",", "n_dimensions", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n_samples_of_class", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "mean_of_class", "=", "X_class", ".", "mean", "(", "axis", "=", "1", ")", "\n", "mean_of_class", "=", "mean_of_class", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "temp", "=", "mean_of_class", "-", "mean_of_total", "\n", "S_B", "=", "S_B", "+", "(", "n_samples_of_class", "*", "temp", ".", "dot", "(", "temp", ".", "T", ")", ")", "\n", "# ------ M_c and M:", "\n", "", "S_W", "=", "np", ".", "zeros", "(", "(", "n_dimensions", ",", "n_dimensions", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "print", "(", "\"Calculating Sw: class \"", "+", "str", "(", "class_index", ")", ")", "\n", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n_samples_of_class", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "mean_of_class", "=", "X_class", ".", "mean", "(", "axis", "=", "1", ")", "\n", "mean_of_class", "=", "mean_of_class", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "X_class_centered", "=", "X_class", "-", "mean_of_class", "\n", "for", "sample_index", "in", "range", "(", "n_samples_of_class", ")", ":", "\n", "                ", "print", "(", "\"Calculating Sw: sample \"", "+", "str", "(", "sample_index", ")", ")", "\n", "temp", "=", "X_class_centered", "[", ":", ",", "sample_index", "]", "\n", "S_W", "=", "S_W", "+", "temp", ".", "dot", "(", "temp", ".", "T", ")", "\n", "# ------ Fisher directions:", "\n", "", "", "print", "(", "\"Calculating eigenvectors...\"", ")", "\n", "epsilon", "=", "0.0000001", "#--> to prevent singularity of matrix N", "\n", "eig_val", ",", "eig_vec", "=", "LA", ".", "eigh", "(", "inv", "(", "S_W", "+", "epsilon", "*", "np", ".", "eye", "(", "S_W", ".", "shape", "[", "0", "]", ")", ")", ".", "dot", "(", "S_B", ")", ")", "\n", "idx", "=", "eig_val", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# sort eigenvalues in descending order (largest eigenvalue first)", "\n", "eig_val", "=", "eig_val", "[", "idx", "]", "\n", "eig_vec", "=", "eig_vec", "[", ":", ",", "idx", "]", "\n", "# my_generalized_eigen_problem = My_generalized_eigen_problem(A=S_B, B=S_W)", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve()", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve_dirty()", "\n", "if", "self", ".", "n_components", "is", "not", "None", ":", "\n", "            ", "U", "=", "eig_vec", "[", ":", ",", ":", "self", ".", "n_components", "]", "\n", "", "else", ":", "\n", "# U = eig_vec[:, :n_classes-1]", "\n", "            ", "U", "=", "eig_vec", "\n", "", "self", ".", "U", "=", "U", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_FDA.My_FDA.transform": [[95, 100], ["my_FDA.My_FDA.U.T.dot"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "# X_transformed: columns are sample, rows are features", "\n", "        ", "X_transformed", "=", "(", "self", ".", "U", ".", "T", ")", ".", "dot", "(", "X", ")", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_FDA.My_FDA.get_projection_directions": [[101, 103], ["None"], "methods", ["None"], ["", "def", "get_projection_directions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "U", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_FDA.My_FDA.reconstruct": [[104, 113], ["U.T.dot", "U.dot"], "methods", ["None"], ["", "def", "reconstruct", "(", "self", ",", "X", ",", "scaler", "=", "None", ",", "using_howMany_projection_directions", "=", "None", ")", ":", "\n", "# X: rows are features and columns are samples", "\n", "        ", "if", "using_howMany_projection_directions", "!=", "None", ":", "\n", "            ", "U", "=", "self", ".", "U", "[", ":", ",", "0", ":", "using_howMany_projection_directions", "]", "\n", "", "else", ":", "\n", "            ", "U", "=", "self", ".", "U", "\n", "", "X_transformed", "=", "(", "U", ".", "T", ")", ".", "dot", "(", "X", ")", "\n", "X_reconstructed", "=", "U", ".", "dot", "(", "X_transformed", ")", "\n", "return", "X_reconstructed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_FDA.My_FDA.transform_outOfSample_all_together": [[114, 118], ["my_FDA.My_FDA.U.T.dot"], "methods", ["None"], ["", "def", "transform_outOfSample_all_together", "(", "self", ",", "X", ",", "using_howMany_projection_directions", "=", "None", ")", ":", "\n", "# X: rows are features and columns are samples", "\n", "        ", "X_transformed", "=", "(", "self", ".", "U", ".", "T", ")", ".", "dot", "(", "X", ")", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_FDA.My_FDA._separate_samples_of_classes": [[119, 145], ["numpy.asarray", "y.reshape.reshape.reshape", "numpy.column_stack", "list", "len", "range", "range", "set", "yX[].argsort", "numpy.empty", "numpy.vstack"], "methods", ["None"], ["", "def", "_separate_samples_of_classes", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X --> rows: features, columns: samples", "\n", "# X_separated_classes --> rows: features, columns: samples", "\n", "        ", "X", "=", "X", ".", "T", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "yX", "=", "np", ".", "column_stack", "(", "(", "y", ",", "X", ")", ")", "\n", "yX", "=", "yX", "[", "yX", "[", ":", ",", "0", "]", ".", "argsort", "(", ")", "]", "# sort array (asscending) with regards to nth column --> https://gist.github.com/stevenvo/e3dad127598842459b68", "\n", "y", "=", "yX", "[", ":", ",", "0", "]", "\n", "X", "=", "yX", "[", ":", ",", "1", ":", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ")", ")", "\n", "number_of_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "dimension_of_data", "=", "X", ".", "shape", "[", "1", "]", "\n", "X_separated_classes", "=", "[", "np", ".", "empty", "(", "(", "0", ",", "dimension_of_data", ")", ")", "]", "*", "number_of_classes", "\n", "class_index", "=", "0", "\n", "index_start_new_class", "=", "0", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "for", "sample_index", "in", "range", "(", "1", ",", "n_samples", ")", ":", "\n", "            ", "if", "y", "[", "sample_index", "]", "!=", "y", "[", "sample_index", "-", "1", "]", "or", "sample_index", "==", "n_samples", "-", "1", ":", "\n", "                ", "X_separated_classes", "[", "class_index", "]", "=", "np", ".", "vstack", "(", "[", "X_separated_classes", "[", "class_index", "]", ",", "X", "[", "index_start_new_class", ":", "sample_index", ",", ":", "]", "]", ")", "\n", "index_start_new_class", "=", "sample_index", "\n", "class_index", "=", "class_index", "+", "1", "\n", "", "", "for", "class_index", "in", "range", "(", "number_of_classes", ")", ":", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "X_separated_classes", "[", "class_index", "]", "=", "X_class", ".", "T", "\n", "", "return", "X_separated_classes", "", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.solution.solution.__init__": [[7, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "best", "=", "0", "\n", "self", ".", "bestIndividual", "=", "[", "]", "\n", "self", ".", "convergence", "=", "[", "]", "\n", "self", ".", "optimizer", "=", "\"\"", "\n", "self", ".", "objfname", "=", "\"\"", "\n", "self", ".", "startTime", "=", "0", "\n", "self", ".", "endTime", "=", "0", "\n", "self", ".", "executionTime", "=", "0", "\n", "self", ".", "lb", "=", "0", "\n", "self", ".", "ub", "=", "0", "\n", "self", ".", "dim", "=", "0", "\n", "self", ".", "popnum", "=", "0", "\n", "self", ".", "maxiers", "=", "0", "", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_kernel_FDA.My_kernel_FDA.__init__": [[18, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_components", "=", "None", ",", "kernel", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "Theta", "=", "None", "\n", "self", ".", "X_train", "=", "None", "\n", "if", "kernel", "is", "not", "None", ":", "\n", "            ", "self", ".", "kernel", "=", "kernel", "\n", "", "else", ":", "\n", "            ", "self", ".", "kernel", "=", "'linear'", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_kernel_FDA.My_kernel_FDA.fit_transform": [[27, 32], ["my_kernel_FDA.My_kernel_FDA.fit", "my_kernel_FDA.My_kernel_FDA.transform"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform"], ["", "", "def", "fit_transform", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "        ", "self", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "X_transformed", "=", "self", ".", "transform", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_kernel_FDA.My_kernel_FDA.fit": [[33, 84], ["my_kernel_FDA.My_kernel_FDA._separate_samples_of_classes", "numpy.asarray", "y.reshape.reshape.reshape", "list", "len", "sklearn.metrics.pairwise.pairwise_kernels", "sklearn.metrics.pairwise.pairwise_kernels.sum", "M_star.reshape.reshape.reshape", "numpy.zeros", "range", "numpy.zeros", "range", "my_generalized_eigen_problem.My_generalized_eigen_problem.My_generalized_eigen_problem", "my_generalized_eigen_problem.My_generalized_eigen_problem.My_generalized_eigen_problem.solve", "set", "sklearn.metrics.pairwise.pairwise_kernels", "sklearn.metrics.pairwise.pairwise_kernels.sum", "M_c.reshape.reshape.reshape", "sklearn.metrics.pairwise.pairwise_kernels", "y.reshape.reshape.ravel", "numpy.eye", "K_c.dot().dot", "numpy.ones", "K_c.dot"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_generalized_eigen_problem.My_generalized_eigen_problem.solve"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "        ", "self", ".", "X_train", "=", "X", "\n", "# ------ Separate classes:", "\n", "X_separated_classes", "=", "self", ".", "_separate_samples_of_classes", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "1", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ".", "ravel", "(", ")", ")", ")", "\n", "n_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "# ------ M_*:", "\n", "Kernel_allSamples_allSamples", "=", "pairwise_kernels", "(", "X", "=", "X", ".", "T", ",", "Y", "=", "X", ".", "T", ",", "metric", "=", "self", ".", "kernel", ")", "\n", "M_star", "=", "Kernel_allSamples_allSamples", ".", "sum", "(", "axis", "=", "1", ")", "\n", "M_star", "=", "M_star", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "M_star", "=", "(", "1", "/", "n_samples", ")", "*", "M_star", "\n", "# ------ M_c and M:", "\n", "M", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "n_samples", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n_samples_of_class", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "# ------ M_c:", "\n", "Kernel_allSamples_classSamples", "=", "pairwise_kernels", "(", "X", "=", "X", ".", "T", ",", "Y", "=", "X_class", ".", "T", ",", "metric", "=", "self", ".", "kernel", ")", "\n", "M_c", "=", "Kernel_allSamples_classSamples", ".", "sum", "(", "axis", "=", "1", ")", "\n", "M_c", "=", "M_c", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "M_c", "=", "(", "1", "/", "n_samples_of_class", ")", "*", "M_c", "\n", "# ------ M:", "\n", "M", "=", "M", "+", "n_samples_of_class", "*", "(", "M_c", "-", "M_star", ")", ".", "dot", "(", "(", "M_c", "-", "M_star", ")", ".", "T", ")", "\n", "# ------ N:", "\n", "", "N", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "n_samples", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n_samples_of_class", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "Kernel_allSamples_classSamples", "=", "pairwise_kernels", "(", "X", "=", "X", ".", "T", ",", "Y", "=", "X_class", ".", "T", ",", "metric", "=", "self", ".", "kernel", ")", "\n", "K_c", "=", "Kernel_allSamples_classSamples", "\n", "H_c", "=", "np", ".", "eye", "(", "n_samples_of_class", ")", "-", "(", "1", "/", "n_samples_of_class", ")", "*", "np", ".", "ones", "(", "(", "n_samples_of_class", ",", "n_samples_of_class", ")", ")", "\n", "N", "=", "N", "+", "K_c", ".", "dot", "(", "H_c", ")", ".", "dot", "(", "K_c", ".", "T", ")", "\n", "# ------ kernel Fisher directions:", "\n", "# epsilon = 0.00001  #--> to prevent singularity of matrix N", "\n", "# eig_val, eig_vec = LA.eigh(inv(N + epsilon*np.eye(N.shape[0])).dot(M))", "\n", "# idx = eig_val.argsort()[::-1]  # sort eigenvalues in descending order (largest eigenvalue first)", "\n", "# eig_val = eig_val[idx]", "\n", "# eig_vec = eig_vec[:, idx]", "\n", "", "my_generalized_eigen_problem", "=", "My_generalized_eigen_problem", "(", "A", "=", "M", ",", "B", "=", "N", ")", "\n", "eig_vec", ",", "eig_val", "=", "my_generalized_eigen_problem", ".", "solve", "(", ")", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve_dirty()", "\n", "if", "self", ".", "n_components", "is", "not", "None", ":", "\n", "            ", "Theta", "=", "eig_vec", "[", ":", ",", ":", "self", ".", "n_components", "]", "\n", "", "else", ":", "\n", "# Theta = eig_vec[:, :n_classes-1]", "\n", "            ", "Theta", "=", "eig_vec", "\n", "", "self", ".", "Theta", "=", "Theta", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_kernel_FDA.My_kernel_FDA.transform": [[85, 91], ["sklearn.metrics.pairwise.pairwise_kernels", "my_kernel_FDA.My_kernel_FDA.Theta.T.dot"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "# X_transformed: columns are sample, rows are features", "\n", "        ", "Kernel_train_input", "=", "pairwise_kernels", "(", "X", "=", "self", ".", "X_train", ".", "T", ",", "Y", "=", "X", ".", "T", ",", "metric", "=", "self", ".", "kernel", ")", "\n", "X_transformed", "=", "(", "self", ".", "Theta", ".", "T", ")", ".", "dot", "(", "Kernel_train_input", ")", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_kernel_FDA.My_kernel_FDA.transform_outOfSample_all_together": [[92, 97], ["sklearn.metrics.pairwise.pairwise_kernels", "my_kernel_FDA.My_kernel_FDA.Theta.T.dot"], "methods", ["None"], ["", "def", "transform_outOfSample_all_together", "(", "self", ",", "X", ",", "using_howMany_projection_directions", "=", "None", ")", ":", "\n", "# X: rows are features and columns are samples", "\n", "        ", "Kernel_train_input", "=", "pairwise_kernels", "(", "X", "=", "self", ".", "X_train", ".", "T", ",", "Y", "=", "X", ".", "T", ",", "metric", "=", "self", ".", "kernel", ")", "\n", "X_transformed", "=", "(", "self", ".", "Theta", ".", "T", ")", ".", "dot", "(", "Kernel_train_input", ")", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_kernel_FDA.My_kernel_FDA._build_kernel_matrix": [[98, 110], ["numpy.zeros", "range", "range", "kernel_func"], "methods", ["None"], ["", "def", "_build_kernel_matrix", "(", "self", ",", "X", ",", "kernel_func", ",", "option_kernel_func", "=", "None", ")", ":", "# --> K = self._build_kernel_matrix(X=X, kernel_func=self._radial_basis)", "\n", "# https://stats.stackexchange.com/questions/243104/how-to-build-and-use-the-kernel-trick-manually-in-python", "\n", "# X = X.T", "\n", "        ", "n_samples", "=", "X", ".", "shape", "[", "1", "]", "\n", "n_features", "=", "X", ".", "shape", "[", "0", "]", "\n", "K", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "n_samples", ")", ")", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "xi", "=", "X", "[", ":", ",", "i", "]", "\n", "for", "j", "in", "range", "(", "n_samples", ")", ":", "\n", "                ", "xj", "=", "X", "[", ":", ",", "j", "]", "\n", "K", "[", "i", ",", "j", "]", "=", "kernel_func", "(", "xi", ",", "xj", ",", "option_kernel_func", ")", "\n", "", "", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_kernel_FDA.My_kernel_FDA._radial_basis": [[111, 117], ["numpy.exp", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "_radial_basis", "(", "self", ",", "xi", ",", "xj", ",", "gamma", "=", "None", ")", ":", "\n", "        ", "if", "gamma", "is", "None", ":", "\n", "            ", "n_features", "=", "xi", ".", "shape", "[", "0", "]", "\n", "gamma", "=", "1", "/", "n_features", "\n", "", "r", "=", "(", "np", ".", "exp", "(", "-", "gamma", "*", "(", "LA", ".", "norm", "(", "xi", "-", "xj", ")", "**", "2", ")", ")", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_kernel_FDA.My_kernel_FDA._separate_samples_of_classes": [[118, 144], ["numpy.asarray", "y.reshape.reshape.reshape", "numpy.column_stack", "list", "len", "range", "range", "set", "yX[].argsort", "numpy.empty", "numpy.vstack"], "methods", ["None"], ["", "def", "_separate_samples_of_classes", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X --> rows: features, columns: samples", "\n", "# X_separated_classes --> rows: features, columns: samples", "\n", "        ", "X", "=", "X", ".", "T", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "yX", "=", "np", ".", "column_stack", "(", "(", "y", ",", "X", ")", ")", "\n", "yX", "=", "yX", "[", "yX", "[", ":", ",", "0", "]", ".", "argsort", "(", ")", "]", "# sort array (asscending) with regards to nth column --> https://gist.github.com/stevenvo/e3dad127598842459b68", "\n", "y", "=", "yX", "[", ":", ",", "0", "]", "\n", "X", "=", "yX", "[", ":", ",", "1", ":", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ")", ")", "\n", "number_of_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "dimension_of_data", "=", "X", ".", "shape", "[", "1", "]", "\n", "X_separated_classes", "=", "[", "np", ".", "empty", "(", "(", "0", ",", "dimension_of_data", ")", ")", "]", "*", "number_of_classes", "\n", "class_index", "=", "0", "\n", "index_start_new_class", "=", "0", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "for", "sample_index", "in", "range", "(", "1", ",", "n_samples", ")", ":", "\n", "            ", "if", "y", "[", "sample_index", "]", "!=", "y", "[", "sample_index", "-", "1", "]", "or", "sample_index", "==", "n_samples", "-", "1", ":", "\n", "                ", "X_separated_classes", "[", "class_index", "]", "=", "np", ".", "vstack", "(", "[", "X_separated_classes", "[", "class_index", "]", ",", "X", "[", "index_start_new_class", ":", "sample_index", ",", ":", "]", "]", ")", "\n", "index_start_new_class", "=", "sample_index", "\n", "class_index", "=", "class_index", "+", "1", "\n", "", "", "for", "class_index", "in", "range", "(", "number_of_classes", ")", ":", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "X_separated_classes", "[", "class_index", "]", "=", "X_class", ".", "T", "\n", "", "return", "X_separated_classes", "", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_generalized_eigen_problem.My_generalized_eigen_problem.__init__": [[8, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "# A Phi = B Phi Lambda --> Phi: eigenvectors, Lambda: eigenvalues", "\n", "        ", "self", ".", "A", "=", "A", "\n", "self", ".", "B", "=", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_generalized_eigen_problem.My_generalized_eigen_problem.solve": [[13, 26], ["my_generalized_eigen_problem.My_generalized_eigen_problem.eigen_decomposition", "Lambda_B.diagonal", "numpy.diag", "Phi_B.dot", "Phi_B.dot.T.dot().dot", "my_generalized_eigen_problem.My_generalized_eigen_problem.eigen_decomposition", "Phi_B.dot.dot", "numpy.nan_to_num", "numpy.linalg.inv", "Phi_B.dot.T.dot"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_generalized_eigen_problem.My_generalized_eigen_problem.eigen_decomposition", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_generalized_eigen_problem.My_generalized_eigen_problem.eigen_decomposition"], ["", "def", "solve", "(", "self", ")", ":", "\n", "        ", "Phi_B", ",", "Lambda_B", "=", "self", ".", "eigen_decomposition", "(", "matrix", "=", "self", ".", "B", ")", "\n", "lambda_B", "=", "Lambda_B", ".", "diagonal", "(", ")", "\n", "a", "=", "lambda_B", "**", "0.5", "\n", "a", "=", "np", ".", "nan_to_num", "(", "a", ")", "+", "0.0001", "\n", "# Lambda_B_squareRoot = np.diag(lambda_B**0.5)", "\n", "Lambda_B_squareRoot", "=", "np", ".", "diag", "(", "a", ")", "\n", "Phi_B_hat", "=", "Phi_B", ".", "dot", "(", "inv", "(", "Lambda_B_squareRoot", ")", ")", "\n", "A_hat", "=", "(", "Phi_B_hat", ".", "T", ")", ".", "dot", "(", "self", ".", "A", ")", ".", "dot", "(", "Phi_B_hat", ")", "\n", "Phi_A", ",", "Lambda_A", "=", "self", ".", "eigen_decomposition", "(", "matrix", "=", "A_hat", ")", "\n", "Lambda", "=", "Lambda_A", "\n", "Phi", "=", "Phi_B_hat", ".", "dot", "(", "Phi_A", ")", "\n", "return", "Phi", ",", "Lambda", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_generalized_eigen_problem.My_generalized_eigen_problem.solve_dirty": [[27, 33], ["numpy.linalg.inv().dot", "my_generalized_eigen_problem.My_generalized_eigen_problem.eigen_decomposition", "numpy.linalg.inv", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_generalized_eigen_problem.My_generalized_eigen_problem.eigen_decomposition"], ["", "def", "solve_dirty", "(", "self", ")", ":", "\n", "        ", "C", "=", "inv", "(", "self", ".", "B", ")", ".", "dot", "(", "self", ".", "A", ")", "\n", "epsilon", "=", "0.00001", "# --> to prevent singularity of matrix C", "\n", "C", "=", "C", "+", "epsilon", "*", "np", ".", "eye", "(", "C", ".", "shape", "[", "0", "]", ")", "\n", "Phi", ",", "Lambda", "=", "self", ".", "eigen_decomposition", "(", "matrix", "=", "C", ")", "\n", "return", "Phi", ",", "Lambda", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_generalized_eigen_problem.My_generalized_eigen_problem.eigen_decomposition": [[34, 44], ["numpy.linalg.eigh", "numpy.asarray", "numpy.diag", "eig_val.argsort"], "methods", ["None"], ["", "def", "eigen_decomposition", "(", "self", ",", "matrix", ")", ":", "\n", "        ", "eig_val", ",", "eig_vec", "=", "LA", ".", "eigh", "(", "matrix", ")", "\n", "idx", "=", "eig_val", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# sort eigenvalues in descending order (largest eigenvalue first)", "\n", "eig_val", "=", "eig_val", "[", "idx", "]", "\n", "eig_vec", "=", "eig_vec", "[", ":", ",", "idx", "]", "\n", "Eigenvectors", "=", "eig_vec", "\n", "eigenvalues", "=", "eig_val", "\n", "eigenvalues", "=", "np", ".", "asarray", "(", "eigenvalues", ")", "\n", "Eigenvalues", "=", "np", ".", "diag", "(", "eigenvalues", ")", "\n", "return", "Eigenvectors", ",", "Eigenvalues", "", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.main": [[27, 385], ["int", "int", "numpy.zeros", "numpy.zeros", "range", "list.astype", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "print", "my_QFDA.My_QFDA", "my_QFDA.My_QFDA.get_optimum_quantized_images", "list", "len", "range", "my_QFDA.My_QFDA", "my_QFDA.My_QFDA.fit_transform", "print", "my_QFDA.My_QFDA.get_padded_image_size", "range", "my_QFDA.My_QFDA.reconstruct", "range", "main.KNN_classification", "numpy.round", "numpy.round", "os.listdir", "pickle.load.ravel", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "numpy.asarray", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "numpy.asarray", "set", "range", "my_QFDA.My_QFDA", "my_QFDA.My_QFDA.fit_transform_justFDA", "my_QFDA.My_QFDA.transform", "my_QFDA.My_QFDA.transform", "my_QFDA.My_QFDA.get_projection_directions", "projection_directions[].reshape", "scipy.misc.imresize", "scipy.misc.imresize", "main.save_image", "projection_directions_inverseDCT[].reshape", "scipy.misc.imresize", "scipy.misc.imresize", "main.save_image", "X_reconstructed[].reshape", "scipy.misc.imresize", "scipy.misc.imresize", "main.save_image", "numpy.zeros", "range", "main.load_image", "skimage.transform.rescale", "skimage.transform.rescale.ravel", "str", "str", "scipy.misc.imresize.reshape", "scipy.misc.imresize", "scipy.misc.imresize", "main.save_image", "scipy.misc.imresize.reshape", "scipy.misc.imresize", "scipy.misc.imresize", "main.save_image", "scipy.misc.imresize.reshape", "scipy.misc.imresize", "scipy.misc.imresize", "main.save_image", "print", "my_QFDA.My_QFDA", "my_QFDA.My_QFDA.fit_transform", "my_QFDA.My_QFDA.transform", "my_QFDA.My_QFDA.transform", "main.KNN_classification", "my_QFDA.My_QFDA", "my_QFDA.My_QFDA.fit_transform_justKernelFDA", "my_QFDA.My_QFDA.transform_justFDA", "my_QFDA.My_QFDA.transform_justFDA", "str", "str", "my_QFDA.My_QFDA.get_projection_directions_justFDA", "scipy.misc.imresize.reshape", "scipy.misc.imresize", "scipy.misc.imresize", "matplotlib.subplots", "main.plot_components_by_colors", "str", "main.save_variable", "main.save_variable", "main.save_variable", "main.save_variable", "main.save_variable", "main.save_variable", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "numpy.asarray", "list.astype", "data[].ravel", "numpy.asarray", "list.astype", "data2[].ravel", "main.save_variable", "main.save_variable", "main.save_variable", "main.save_variable", "main.save_variable", "main.save_variable", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "my_QFDA.My_QFDA.transform_justKernelFDA", "my_QFDA.My_QFDA.transform_justKernelFDA", "matplotlib.subplots", "main.plot_components_by_colors", "main.plot_components_by_colors_withTest", "str", "open", "list", "open", "list", "str", "str", "str", "str", "str", "str", "str", "str", "str", "main.plot_components_by_colors_withTest", "str", "csv.reader", "csv.reader", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_optimum_quantized_images", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_transform", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_padded_image_size", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.reconstruct", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.KNN_classification", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_transform_justFDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_projection_directions", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.save_image", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.save_image", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.save_image", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.load_image", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.save_image", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.save_image", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.save_image", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_transform", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.KNN_classification", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_transform_justKernelFDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform_justFDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform_justFDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_projection_directions_justFDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.plot_components_by_colors", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform_justKernelFDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform_justKernelFDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.plot_components_by_colors", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.plot_components_by_colors_withTest", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.plot_components_by_colors_withTest"], ["x", "=", "np", ".", "arange", "(", "0", ",", "63", "+", "1", ",", "1", ")", "\n", "path", "=", "'./values/'", "+", "dataset", "+", "'/'", "\n", "levels", "=", "load_variable", "(", "name_of_variable", "=", "\"best_number_of_levels\"", ",", "path", "=", "path", ")", "\n", "plt", ".", "bar", "(", "x", "=", "x", ",", "height", "=", "levels", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "xlabel", "(", "\"Frequency\"", ",", "fontsize", "=", "13", ")", "\n", "plt", ".", "ylabel", "(", "\"Optimum # quantization levels\"", ",", "fontsize", "=", "13", ")", "\n", "# if show_legends is not None:", "\n", "#     ax.legend()", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "def", "load_variable", "(", "name_of_variable", ",", "path", "=", "'./'", ")", ":", "\n", "# https://stackoverflow.com/questions/6568007/how-do-i-save-and-restore-multiple-variables-in-python", "\n", "    ", "file_address", "=", "path", "+", "name_of_variable", "+", "'.pckl'", "\n", "f", "=", "open", "(", "file_address", ",", "'rb'", ")", "\n", "variable", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "variable", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.KNN_classification": [[386, 432], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "np.zeros.mean", "np.zeros.std", "numpy.array", "print", "np.zeros.mean", "np.zeros.std", "numpy.array", "np.zeros.mean", "np.zeros.std", "numpy.array", "main.save_np_array_to_txt", "main.save_np_array_to_txt", "main.save_np_array_to_txt", "main.save_np_array_to_txt", "main.save_np_array_to_txt", "main.save_np_array_to_txt", "sklearn.neighbors.KNeighborsClassifier", "sklearn.neighbors.KNeighborsClassifier.fit", "sklearn.neighbors.KNeighborsClassifier.predict", "sklearn.neighbors.KNeighborsClassifier.predict", "sklearn.neighbors.KNeighborsClassifier.predict", "print", "sum", "len", "sum", "len", "sum", "len", "str", "Y_train.ravel", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.convert_mat_to_csv": [[433, 439], ["scipy.io.loadmat", "scipy.io.loadmat", "numpy.savetxt"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.read_csv_file": [[440, 447], ["numpy.asarray", "open", "list", "csv.reader"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.load_image": [[448, 453], ["PIL.Image.open().convert", "numpy.array", "PIL.Image.open"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.save_image": [[454, 461], ["PIL.Image.fromarray", "img.convert.convert", "img.convert.save", "os.path.exists", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.show_image": [[462, 466], ["matplotlib.imshow", "matplotlib.gray", "matplotlib.show"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.plot_components_by_colors": [[467, 503], ["numpy.vstack", "list", "list.sort", "len", "range", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.show", "matplotlib.gca", "set", "main.get_spaced_colors", "labels_of_classes[].astype", "ax.plot", "ax.legend", "y_projected.ravel", "str", "str"], "function", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.get_spaced_colors"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.plot_components_by_colors_withTest": [[504, 555], ["numpy.vstack", "numpy.vstack", "numpy.asarray", "list", "list.sort", "len", "range", "range", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.show", "matplotlib.gca", "set", "main.get_spaced_colors", "labels_of_classes[].astype", "ax.plot", "labels_of_classes[].astype", "ax.plot", "ax.legend", "np.asarray.ravel"], "function", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.get_spaced_colors"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.get_spaced_colors": [[556, 562], ["int", "[].zfill", "range", "int", "int", "int", "hex"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.plot_components": [[563, 590], ["numpy.vstack", "ax.plot", "skimage.transform.resize", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "matplotlib.gca", "numpy.array", "range", "numpy.sum", "numpy.vstack", "matplotlib.offsetbox.AnnotationBbox", "ax.add_artist", "str", "str", "max", "numpy.min", "matplotlib.offsetbox.OffsetImage", "np.vstack.max", "np.vstack.max", "np.vstack.min"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.plot_componentsAndImages_with_test": [[591, 635], ["numpy.vstack", "numpy.vstack", "ax.plot", "ax.plot", "skimage.transform.resize", "skimage.transform.resize", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "matplotlib.gca", "numpy.array", "range", "numpy.sum", "numpy.vstack", "matplotlib.offsetbox.AnnotationBbox", "ax.add_artist", "str", "str", "max", "numpy.sum", "numpy.vstack", "matplotlib.offsetbox.AnnotationBbox", "ax.add_artist", "numpy.min", "matplotlib.offsetbox.OffsetImage", "np.vstack.max", "numpy.min", "matplotlib.offsetbox.OffsetImage", "np.vstack.max", "np.vstack.min", "dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.plot_componentsAndImages_2": [[636, 668], ["numpy.vstack", "Y_projected.ravel.ravel", "ax.plot", "ax.plot", "skimage.transform.resize", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "matplotlib.gca", "numpy.array", "range", "numpy.sum", "numpy.vstack", "ax.add_artist", "str", "str", "max", "numpy.min", "matplotlib.offsetbox.AnnotationBbox", "matplotlib.offsetbox.AnnotationBbox", "np.vstack.max", "matplotlib.offsetbox.OffsetImage", "matplotlib.offsetbox.OffsetImage", "np.vstack.max", "np.vstack.min", "dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.save_variable": [[669, 677], ["open", "pickle.dump", "open.close", "os.path.exists", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.save_np_array_to_txt": [[678, 686], ["numpy.set_printoptions", "os.path.exists", "os.makedirs", "open", "f.write", "numpy.array2string"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.load_variable": [[687, 694], ["open", "pickle.load", "open.close"], "function", ["None"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.read_facebook_dataset": [[695, 720], ["pandas.read_csv", "numpy.zeros", "enumerate", "numpy.zeros", "enumerate", "numpy.logical_and", "len", "len", "numpy.isnan().any", "numpy.isnan().any", "sklearn.preprocessing.LabelEncoder", "preprocessing.LabelEncoder.fit", "preprocessing.LabelEncoder.transform", "numpy.isnan", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.main.read_regression_dataset_withOneOutput": [[721, 738], ["pandas.read_csv", "numpy.zeros", "range", "numpy.delete", "sklearn.preprocessing.LabelEncoder", "preprocessing.LabelEncoder.fit", "preprocessing.LabelEncoder.transform"], "function", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform"], []], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.pso2.PSO": [[15, 109], ["solution.solution", "numpy.zeros", "numpy.zeros", "numpy.zeros.fill", "numpy.zeros", "numpy.zeros", "float", "numpy.zeros", "range", "numpy.zeros", "print", "time.time", "time.strftime", "range", "time.time", "time.strftime", "isinstance", "isinstance", "float", "print", "range", "range", "print", "range", "objf", "print", "range", "print", "numpy.random.uniform", "str", "numpy.clip", "pos[].copy", "pos[].copy", "random.random", "random.random", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "PSO", "(", "objf", ",", "lb", ",", "ub", ",", "dim", ",", "PopSize", ",", "iters", ")", ":", "\n", "# PSO parameters", "\n", "\n", "#    dim=30", "\n", "#    iters=200", "\n", "    ", "Vmax", "=", "6", "\n", "#    PopSize=50     #population size", "\n", "wMax", "=", "0.9", "\n", "wMin", "=", "0.2", "\n", "c1", "=", "2", "\n", "c2", "=", "2", "\n", "#    lb=-10", "\n", "#    ub=10", "\n", "#", "\n", "s", "=", "solution", "(", ")", "\n", "if", "not", "isinstance", "(", "lb", ",", "list", ")", ":", "\n", "        ", "lb", "=", "[", "lb", "]", "*", "dim", "\n", "", "if", "not", "isinstance", "(", "ub", ",", "list", ")", ":", "\n", "        ", "ub", "=", "[", "ub", "]", "*", "dim", "\n", "\n", "######################## Initializations", "\n", "\n", "", "vel", "=", "numpy", ".", "zeros", "(", "(", "PopSize", ",", "dim", ")", ")", "\n", "\n", "pBestScore", "=", "numpy", ".", "zeros", "(", "PopSize", ")", "\n", "pBestScore", ".", "fill", "(", "float", "(", "\"inf\"", ")", ")", "\n", "\n", "pBest", "=", "numpy", ".", "zeros", "(", "(", "PopSize", ",", "dim", ")", ")", "\n", "gBest", "=", "numpy", ".", "zeros", "(", "dim", ")", "\n", "\n", "gBestScore", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "pos", "=", "numpy", ".", "zeros", "(", "(", "PopSize", ",", "dim", ")", ")", "\n", "for", "i", "in", "range", "(", "dim", ")", ":", "\n", "        ", "pos", "[", ":", ",", "i", "]", "=", "numpy", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "PopSize", ")", "*", "(", "ub", "[", "i", "]", "-", "lb", "[", "i", "]", ")", "+", "lb", "[", "i", "]", "\n", "\n", "", "convergence_curve", "=", "numpy", ".", "zeros", "(", "iters", ")", "\n", "\n", "############################################", "\n", "print", "(", "\"PSO is optimizing  \\\"\"", "+", "objf", ".", "__name__", "+", "\"\\\"\"", ")", "\n", "\n", "timerStart", "=", "time", ".", "time", "(", ")", "\n", "s", ".", "startTime", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ")", "\n", "\n", "for", "l", "in", "range", "(", "0", ",", "iters", ")", ":", "\n", "        ", "print", "(", "\"PSO: iteration \"", "+", "str", "(", "l", "+", "1", ")", "+", "\"/\"", "+", "str", "(", "iters", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "PopSize", ")", ":", "\n", "            ", "print", "(", "\"PSO: particle \"", "+", "str", "(", "i", "+", "1", ")", "+", "\"/\"", "+", "str", "(", "PopSize", ")", ")", "\n", "# pos[i,:]=checkBounds(pos[i,:],lb,ub)", "\n", "for", "j", "in", "range", "(", "dim", ")", ":", "\n", "                ", "pos", "[", "i", ",", "j", "]", "=", "numpy", ".", "clip", "(", "pos", "[", "i", ",", "j", "]", ",", "lb", "[", "j", "]", ",", "ub", "[", "j", "]", ")", "\n", "# Calculate objective function for each particle", "\n", "", "fitness", "=", "objf", "(", "pos", "[", "i", ",", ":", "]", ")", "\n", "\n", "if", "(", "pBestScore", "[", "i", "]", ">", "fitness", ")", ":", "\n", "                ", "pBestScore", "[", "i", "]", "=", "fitness", "\n", "pBest", "[", "i", ",", ":", "]", "=", "pos", "[", "i", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "", "if", "(", "gBestScore", ">", "fitness", ")", ":", "\n", "                ", "gBestScore", "=", "fitness", "\n", "gBest", "=", "pos", "[", "i", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "# Update the W of PSO", "\n", "", "", "w", "=", "wMax", "-", "l", "*", "(", "(", "wMax", "-", "wMin", ")", "/", "iters", ")", ";", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "PopSize", ")", ":", "\n", "            ", "print", "(", "\"PSO: particle \"", "+", "str", "(", "i", "+", "1", ")", "+", "\"/\"", "+", "str", "(", "PopSize", ")", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "dim", ")", ":", "\n", "                ", "r1", "=", "random", ".", "random", "(", ")", "\n", "r2", "=", "random", ".", "random", "(", ")", "\n", "vel", "[", "i", ",", "j", "]", "=", "w", "*", "vel", "[", "i", ",", "j", "]", "+", "c1", "*", "r1", "*", "(", "pBest", "[", "i", ",", "j", "]", "-", "pos", "[", "i", ",", "j", "]", ")", "+", "c2", "*", "r2", "*", "(", "gBest", "[", "j", "]", "-", "pos", "[", "i", ",", "j", "]", ")", "\n", "\n", "if", "(", "vel", "[", "i", ",", "j", "]", ">", "Vmax", ")", ":", "\n", "                    ", "vel", "[", "i", ",", "j", "]", "=", "Vmax", "\n", "\n", "", "if", "(", "vel", "[", "i", ",", "j", "]", "<", "-", "Vmax", ")", ":", "\n", "                    ", "vel", "[", "i", ",", "j", "]", "=", "-", "Vmax", "\n", "\n", "", "pos", "[", "i", ",", "j", "]", "=", "pos", "[", "i", ",", "j", "]", "+", "vel", "[", "i", ",", "j", "]", "\n", "\n", "", "", "convergence_curve", "[", "l", "]", "=", "gBestScore", "\n", "\n", "if", "(", "l", "%", "1", "==", "0", ")", ":", "\n", "            ", "print", "(", "[", "'At iteration '", "+", "str", "(", "l", "+", "1", ")", "+", "' the best fitness is '", "+", "str", "(", "gBestScore", ")", "]", ")", ";", "\n", "", "", "timerEnd", "=", "time", ".", "time", "(", ")", "\n", "s", ".", "endTime", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ")", "\n", "s", ".", "executionTime", "=", "timerEnd", "-", "timerStart", "\n", "s", ".", "convergence", "=", "convergence_curve", "\n", "s", ".", "optimizer", "=", "\"PSO\"", "\n", "s", ".", "objfname", "=", "objf", ".", "__name__", "\n", "s", ".", "bestCost", "=", "gBestScore", "\n", "s", ".", "bestParticle", "=", "gBest", "\n", "\n", "return", "s", "", "", ""]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.__init__": [[22, 52], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_height", ",", "image_width", ",", "n_components", "=", "None", ",", "max_quantization_levels", "=", "255", ",", "quantization_type", "=", "\"uniform\"", ",", "search_method", "=", "\"subgradient_method\"", ",", "regularization_parameter1", "=", "1", ",", "regularization_parameter2", "=", "1", ",", "n_bootstrap", "=", "100", ",", "in_pixel_domain", "=", "False", ",", "kernel", "=", "\"linear\"", ")", ":", "\n", "        ", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "U", "=", "None", "\n", "self", ".", "U_justFDA", "=", "None", "\n", "self", ".", "X_train", "=", "None", "\n", "self", ".", "y_train", "=", "None", "\n", "self", ".", "max_quantization_levels", "=", "max_quantization_levels", "\n", "self", ".", "quantization_type", "=", "quantization_type", "\n", "self", ".", "search_method", "=", "search_method", "\n", "self", ".", "S_T", "=", "None", "\n", "self", ".", "S_W", "=", "None", "\n", "self", ".", "S_T_justFDA", "=", "None", "\n", "self", ".", "S_W_justFDA", "=", "None", "\n", "self", ".", "regularization_parameter1", "=", "regularization_parameter1", "\n", "self", ".", "regularization_parameter2", "=", "regularization_parameter2", "\n", "self", ".", "image_height", "=", "image_height", "\n", "self", ".", "image_width", "=", "image_width", "\n", "self", ".", "block_size", "=", "8", "\n", "self", ".", "padded_image_height", "=", "None", "\n", "self", ".", "padded_image_width", "=", "None", "\n", "self", ".", "max_of_range_array", "=", "None", "\n", "self", ".", "n_bootstrap", "=", "n_bootstrap", "\n", "self", ".", "bestCost", "=", "None", "\n", "self", ".", "best_number_of_levels", "=", "None", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "in_pixel_domain", "=", "in_pixel_domain", "\n", "self", ".", "X_padded_mean", "=", "None", "\n", "if", "search_method", "==", "\"exhaustive_search\"", ":", "\n", "            ", "if", "quantization_type", "==", "\"non-uniform\"", ":", "\n", "                ", "print", "(", "\"error: exhaustive_search is only for uniform quantization....\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.divide_image_into_blocks": [[53, 74], ["int", "int", "numpy.zeros", "range", "range", "block.reshape", "block.reshape.ravel"], "methods", ["None"], ["", "", "", "def", "divide_image_into_blocks", "(", "self", ",", "image", ")", ":", "\n", "# image: with size (self.padded_image_height, self.padded_image_width)", "\n", "# blocks_reshaped_forImage: reshaped blocks stacked column-wise", "\n", "        ", "n_blocks_in_height", "=", "int", "(", "self", ".", "padded_image_height", "/", "self", ".", "block_size", ")", "\n", "n_blocks_in_width", "=", "int", "(", "self", ".", "padded_image_width", "/", "self", ".", "block_size", ")", "\n", "blocks_reshaped_forImage", "=", "np", ".", "zeros", "(", "(", "self", ".", "block_size", "*", "self", ".", "block_size", ",", "n_blocks_in_height", "*", "n_blocks_in_width", ")", ")", "\n", "counter", "=", "-", "1", "\n", "for", "block_index_in_height", "in", "range", "(", "n_blocks_in_height", ")", ":", "\n", "            ", "for", "block_index_in_width", "in", "range", "(", "n_blocks_in_width", ")", ":", "\n", "                ", "counter", "=", "counter", "+", "1", "\n", "start_pixel_in_height", "=", "(", "block_index_in_height", "*", "self", ".", "block_size", ")", "\n", "end_pixel_in_height", "=", "(", "block_index_in_height", "*", "self", ".", "block_size", ")", "+", "self", ".", "block_size", "-", "1", "\n", "start_pixel_in_width", "=", "(", "block_index_in_width", "*", "self", ".", "block_size", ")", "\n", "end_pixel_in_width", "=", "(", "block_index_in_width", "*", "self", ".", "block_size", ")", "+", "self", ".", "block_size", "-", "1", "\n", "block", "=", "image", "[", "start_pixel_in_height", ":", "end_pixel_in_height", "+", "1", ",", "start_pixel_in_width", ":", "end_pixel_in_width", "+", "1", "]", "\n", "# plt.imshow(block, cmap='gray')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "block_reshaped", "=", "block", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "blocks_reshaped_forImage", "[", ":", ",", "counter", "]", "=", "block_reshaped", ".", "ravel", "(", ")", "\n", "", "", "return", "blocks_reshaped_forImage", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.concatenate_blocks_to_have_image": [[75, 97], ["numpy.zeros", "int", "int", "numpy.zeros", "range", "range", "block_reshaped.reshape"], "methods", ["None"], ["", "def", "concatenate_blocks_to_have_image", "(", "self", ",", "blocks", ")", ":", "\n", "# blocks: stacked column-wise", "\n", "# image: with size (self.padded_image_height, self.padded_image_width)", "\n", "        ", "image", "=", "np", ".", "zeros", "(", "(", "self", ".", "padded_image_height", ",", "self", ".", "padded_image_width", ")", ")", "\n", "n_blocks_in_height", "=", "int", "(", "self", ".", "padded_image_height", "/", "self", ".", "block_size", ")", "\n", "n_blocks_in_width", "=", "int", "(", "self", ".", "padded_image_width", "/", "self", ".", "block_size", ")", "\n", "blocks_reshaped_forImage", "=", "np", ".", "zeros", "(", "(", "self", ".", "block_size", "*", "self", ".", "block_size", ",", "n_blocks_in_height", "*", "n_blocks_in_width", ")", ")", "\n", "counter", "=", "-", "1", "\n", "for", "block_index_in_height", "in", "range", "(", "n_blocks_in_height", ")", ":", "\n", "            ", "for", "block_index_in_width", "in", "range", "(", "n_blocks_in_width", ")", ":", "\n", "                ", "counter", "=", "counter", "+", "1", "\n", "start_pixel_in_height", "=", "(", "block_index_in_height", "*", "self", ".", "block_size", ")", "\n", "end_pixel_in_height", "=", "(", "block_index_in_height", "*", "self", ".", "block_size", ")", "+", "self", ".", "block_size", "-", "1", "\n", "start_pixel_in_width", "=", "(", "block_index_in_width", "*", "self", ".", "block_size", ")", "\n", "end_pixel_in_width", "=", "(", "block_index_in_width", "*", "self", ".", "block_size", ")", "+", "self", ".", "block_size", "-", "1", "\n", "block_reshaped", "=", "blocks", "[", ":", ",", "counter", "]", "\n", "block", "=", "block_reshaped", ".", "reshape", "(", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ")", "\n", "# plt.imshow(block, cmap='gray')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "image", "[", "start_pixel_in_height", ":", "end_pixel_in_height", "+", "1", ",", "start_pixel_in_width", ":", "end_pixel_in_width", "+", "1", "]", "=", "block", "\n", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.uniform_quantization": [[98, 125], ["int", "int", "range", "X_dct[].reshape", "my_QFDA.My_QFDA.divide_image_into_blocks", "range", "my_QFDA.My_QFDA.concatenate_blocks_to_have_image", "my_QFDA.My_QFDA.reshape().ravel", "int", "int", "numpy.floor", "my_QFDA.My_QFDA.reshape", "numpy.sign", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.divide_image_into_blocks", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.concatenate_blocks_to_have_image"], ["", "def", "uniform_quantization", "(", "self", ",", "X_dct", ",", "n_quantization_levels_array", ",", "max_of_range_array", ")", ":", "\n", "# X and return: columns are samples, rows are features", "\n", "# https://stackoverflow.com/questions/38152081/how-do-you-quantize-a-simple-input-using-python --> I searched: python quantization", "\n", "        ", "n_blocks_in_height", "=", "int", "(", "self", ".", "padded_image_height", "/", "self", ".", "block_size", ")", "\n", "n_blocks_in_width", "=", "int", "(", "self", ".", "padded_image_width", "/", "self", ".", "block_size", ")", "\n", "n_images", "=", "X_dct", ".", "shape", "[", "1", "]", "\n", "for", "image_index", "in", "range", "(", "n_images", ")", ":", "\n", "            ", "image", "=", "X_dct", "[", ":", ",", "image_index", "]", ".", "reshape", "(", "(", "self", ".", "padded_image_height", ",", "self", ".", "padded_image_width", ")", ")", "\n", "blocks_reshaped_forImage", "=", "self", ".", "divide_image_into_blocks", "(", "image", "=", "image", ")", "\n", "for", "frequency", "in", "range", "(", "self", ".", "block_size", "*", "self", ".", "block_size", ")", ":", "\n", "                ", "n_quantization_levels", "=", "n_quantization_levels_array", "[", "frequency", "]", "\n", "max_of_range", "=", "max_of_range_array", "[", "frequency", "]", "\n", "DCT_values_for_that_frequency", "=", "blocks_reshaped_forImage", "[", "frequency", ",", ":", "]", "\n", "DCT_values_for_that_frequency", "[", "DCT_values_for_that_frequency", ">=", "max_of_range", "]", "=", "max_of_range", "\n", "DCT_values_for_that_frequency", "[", "DCT_values_for_that_frequency", "<=", "-", "1", "*", "max_of_range", "]", "=", "-", "1", "*", "max_of_range", "\n", "if", "n_quantization_levels", "%", "2", "==", "0", ":", "#--> if n_levels is even", "\n", "                    ", "temp", "=", "int", "(", "(", "n_quantization_levels", "+", "2", ")", "/", "2", ")", "\n", "temp2", "=", "-", "1", "*", "(", "temp", "-", "2", ")", "*", "(", "max_of_range", "/", "temp", ")", "\n", "DCT_values_for_that_frequency", "[", "DCT_values_for_that_frequency", "<=", "temp2", "]", "=", "temp2", "\n", "", "else", ":", "#--> if n_levels is odd", "\n", "                    ", "temp", "=", "int", "(", "(", "n_quantization_levels", "+", "1", ")", "/", "2", ")", "\n", "", "DCT_values_for_that_frequency", "=", "np", ".", "sign", "(", "DCT_values_for_that_frequency", ")", "*", "(", "max_of_range", "/", "(", "temp", "-", "1", ")", ")", "*", "np", ".", "floor", "(", "temp", "*", "np", ".", "abs", "(", "DCT_values_for_that_frequency", ")", "/", "max_of_range", ")", "\n", "blocks_reshaped_forImage", "[", "frequency", ",", ":", "]", "=", "DCT_values_for_that_frequency", "\n", "", "image", "=", "self", ".", "concatenate_blocks_to_have_image", "(", "blocks", "=", "blocks_reshaped_forImage", ")", "\n", "X_dct", "[", ":", ",", "image_index", "]", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ".", "ravel", "(", ")", "\n", "", "X_dct_quantized", "=", "X_dct", "\n", "return", "X_dct_quantized", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.test_functions": [[126, 149], ["numpy.random.seed", "my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.project_onto_constraint_set_integerValues", "my_QFDA.My_QFDA.calculate_rate", "print", "my_QFDA.My_QFDA.uniform_quantization", "my_QFDA.My_QFDA.inverse_DCT_blockwise", "input", "numpy.ones", "my_QFDA.My_QFDA.cost_function", "print", "input", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.project_onto_constraint_set_integerValues", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.calculate_rate", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.uniform_quantization", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.cost_function"], ["", "def", "test_functions", "(", "self", ",", "X", ",", "y", ",", "test_index", ")", ":", "\n", "        ", "self", ".", "X_train", "=", "X", "\n", "self", ".", "y_train", "=", "y", "\n", "np", ".", "random", ".", "seed", "(", "555", ")", "\n", "if", "test_index", "==", "1", ":", "\n", "            ", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "X", ")", "\n", "n_quantization_levels_array", "=", "15.4", "*", "np", ".", "ones", "(", "(", "64", ",", ")", ")", "\n", "# n_quantization_levels_array = 250 * np.ones((64,))", "\n", "n_quantization_levels_array", "=", "self", ".", "project_onto_constraint_set_integerValues", "(", "n_quantization_levels_array", "=", "n_quantization_levels_array", ")", "\n", "rate", ",", "max_of_range_array", "=", "self", ".", "calculate_rate", "(", "X_dct", "=", "X_dct", ",", "n_quantization_levels_array", "=", "n_quantization_levels_array", ")", "\n", "print", "(", "rate", ")", "\n", "X_dct_quantized", "=", "self", ".", "uniform_quantization", "(", "X_dct", "=", "X_dct", ",", "n_quantization_levels_array", "=", "n_quantization_levels_array", ",", "max_of_range_array", "=", "max_of_range_array", ")", "\n", "# print(X_dct_quantized.shape)", "\n", "# plt.imshow(X_dct_quantized[:, 0].reshape((self.padded_image_height, self.padded_image_width)), cmap='gray')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "X_quantized_inverse_dct", "=", "self", ".", "inverse_DCT_blockwise", "(", "X_dct", "=", "X_dct", ",", "display_inverse_images", "=", "True", ")", "\n", "input", "(", "\"hi........\"", ")", "\n", "", "elif", "test_index", "==", "2", ":", "\n", "            ", "n_quantization_levels_array", "=", "2.3", "*", "np", ".", "ones", "(", "(", "64", ",", ")", ")", "\n", "cost", "=", "self", ".", "cost_function", "(", "n_quantization_levels_array", ")", "\n", "print", "(", "cost", ")", "\n", "input", "(", "\"hi........\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_optimum_quantized_images": [[150, 168], ["X.copy", "my_QFDA.My_QFDA.zero_pad_if_necessary", "my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.load_variable", "my_QFDA.My_QFDA.load_variable", "my_QFDA.My_QFDA.uniform_quantization", "my_QFDA.My_QFDA.inverse_DCT_blockwise", "my_QFDA.My_QFDA._separate_samples_of_classes", "my_QFDA.My_QFDA._separate_samples_of_classes", "my_QFDA.My_QFDA._separate_samples_of_classes", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.zero_pad_if_necessary", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.load_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.load_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.uniform_quantization", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes"], ["", "", "def", "get_optimum_quantized_images", "(", "self", ",", "X", ",", "y", ",", "path_to_save_base", ")", ":", "\n", "        ", "X_", "=", "X", ".", "copy", "(", ")", "\n", "X_padded", "=", "self", ".", "zero_pad_if_necessary", "(", "X", "=", "X_", ")", "\n", "# ----------", "\n", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "X", ")", "\n", "path_to_save", "=", "path_to_save_base", "+", "\"/reg_par1=\"", "+", "str", "(", "self", ".", "regularization_parameter1", ")", "+", "\", reg_par2=\"", "+", "str", "(", "self", ".", "regularization_parameter2", ")", "+", "\"/\"", "\n", "best_number_of_levels", "=", "self", ".", "load_variable", "(", "name_of_variable", "=", "\"best_number_of_levels\"", ",", "path", "=", "path_to_save", ")", "\n", "max_of_range_array", "=", "self", ".", "load_variable", "(", "name_of_variable", "=", "\"max_of_range_array\"", ",", "path", "=", "path_to_save", ")", "\n", "X_dct_quantized", "=", "self", ".", "uniform_quantization", "(", "X_dct", "=", "X_dct", ",", "n_quantization_levels_array", "=", "best_number_of_levels", ",", "max_of_range_array", "=", "max_of_range_array", ")", "\n", "X_quantized_inverse_dct", "=", "self", ".", "inverse_DCT_blockwise", "(", "X_dct", "=", "X_dct_quantized", ",", "display_inverse_images", "=", "False", ")", "\n", "# ----------", "\n", "X_quantized_inverse_dct", "=", "X_quantized_inverse_dct", "+", "self", ".", "X_padded_mean", "\n", "# ----------", "\n", "X_quantized_inverse_dct_classes", "=", "self", ".", "_separate_samples_of_classes", "(", "X", "=", "X_quantized_inverse_dct", ",", "y", "=", "y", ")", "\n", "X_padded_meanAdded", "=", "X_padded", "+", "self", ".", "X_padded_mean", "\n", "X_padded_classes", "=", "self", ".", "_separate_samples_of_classes", "(", "X", "=", "X_padded", ",", "y", "=", "y", ")", "\n", "X_padded_classes_meanAdded", "=", "self", ".", "_separate_samples_of_classes", "(", "X", "=", "X_padded_meanAdded", ",", "y", "=", "y", ")", "\n", "return", "X_quantized_inverse_dct_classes", ",", "X_padded_classes", ",", "X_padded_classes_meanAdded", ",", "self", ".", "padded_image_height", ",", "self", ".", "padded_image_width", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.project_onto_constraint_set_integerValues": [[169, 178], ["numpy.ceil", "numpy.any"], "methods", ["None"], ["", "def", "project_onto_constraint_set_integerValues", "(", "self", ",", "n_quantization_levels_array", ",", "consider_uppder_bound", "=", "True", ")", ":", "\n", "# n_quantization_levels_array[n_quantization_levels_array > self.max_quantization_levels] = self.max_quantization_levels", "\n", "        ", "if", "consider_uppder_bound", ":", "\n", "            ", "mask", "=", "n_quantization_levels_array", ">", "self", ".", "max_of_range_array", "\n", "if", "np", ".", "any", "(", "mask", "==", "True", ")", ":", "\n", "                ", "n_quantization_levels_array", "[", "mask", "==", "True", "]", "=", "self", ".", "max_of_range_array", "[", "mask", "==", "True", "]", "\n", "", "", "n_quantization_levels_array", "[", "n_quantization_levels_array", "<", "2", "]", "=", "2", "\n", "n_quantization_levels_array", "=", "np", ".", "ceil", "(", "n_quantization_levels_array", "-", "0.5", ")", "\n", "return", "n_quantization_levels_array", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.cost_function": [[179, 201], ["my_QFDA.My_QFDA.project_onto_constraint_set_integerValues", "my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.copy", "my_QFDA.My_QFDA.calculate_rate", "rate.mean", "my_QFDA.My_QFDA.uniform_quantization", "my_QFDA.My_QFDA.quantized_Fisher_criterion", "my_QFDA.My_QFDA.inverse_DCT_blockwise", "my_QFDA.My_QFDA.inverse_DCT_blockwise", "my_QFDA.My_QFDA.zero_pad_if_necessary", "my_QFDA.My_QFDA.FDA_with_quantization", "my_QFDA.My_QFDA.FDA_with_quantization"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.project_onto_constraint_set_integerValues", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.calculate_rate", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.uniform_quantization", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.quantized_Fisher_criterion", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.zero_pad_if_necessary", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.FDA_with_quantization", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.FDA_with_quantization"], ["", "def", "cost_function", "(", "self", ",", "n_quantization_levels_array", ")", ":", "\n", "# --- making n_levels integer:", "\n", "        ", "n_quantization_levels_array", "=", "self", ".", "project_onto_constraint_set_integerValues", "(", "n_quantization_levels_array", "=", "n_quantization_levels_array", ")", "\n", "# --- DCT of image blockwise:", "\n", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "self", ".", "X_train", ")", "\n", "X_dct_", "=", "X_dct", ".", "copy", "(", ")", "\n", "# --- rate:", "\n", "rate", ",", "max_of_range_array", "=", "self", ".", "calculate_rate", "(", "X_dct", "=", "X_dct", ",", "n_quantization_levels_array", "=", "n_quantization_levels_array", ")", "\n", "rate_average", "=", "rate", ".", "mean", "(", ")", "\n", "# --- quantized Fisher criterion:", "\n", "X_dct_quantized", "=", "self", ".", "uniform_quantization", "(", "X_dct", "=", "X_dct", ",", "n_quantization_levels_array", "=", "n_quantization_levels_array", ",", "max_of_range_array", "=", "max_of_range_array", ")", "\n", "if", "self", ".", "in_pixel_domain", ":", "\n", "            ", "X_idct", "=", "self", ".", "inverse_DCT_blockwise", "(", "X_dct", "=", "X_dct_", ",", "display_inverse_images", "=", "False", ")", "\n", "X_idct_quantized", "=", "self", ".", "inverse_DCT_blockwise", "(", "X_dct", "=", "X_dct_quantized", ",", "display_inverse_images", "=", "False", ")", "\n", "X_padded", "=", "self", ".", "zero_pad_if_necessary", "(", "X", "=", "self", ".", "X_train", ")", "\n", "self", ".", "FDA_with_quantization", "(", "X", "=", "X_padded", ",", "X_quantized", "=", "X_idct_quantized", ",", "y", "=", "self", ".", "y_train", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "FDA_with_quantization", "(", "X", "=", "X_dct_", ",", "X_quantized", "=", "X_dct_quantized", ",", "y", "=", "self", ".", "y_train", ")", "\n", "", "criterion", "=", "self", ".", "quantized_Fisher_criterion", "(", ")", "\n", "# --- cost:", "\n", "cost", "=", "(", "-", "1", "*", "criterion", ")", "+", "(", "self", ".", "regularization_parameter1", "*", "rate_average", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.quantized_Fisher_criterion": [[202, 207], ["numpy.trace", "numpy.trace", "my_QFDA.My_QFDA.U.T.dot().dot", "my_QFDA.My_QFDA.U.T.dot().dot", "my_QFDA.My_QFDA.U.T.dot", "my_QFDA.My_QFDA.U.T.dot"], "methods", ["None"], ["", "def", "quantized_Fisher_criterion", "(", "self", ")", ":", "\n", "        ", "numerator", "=", "np", ".", "trace", "(", "(", "self", ".", "U", ".", "T", ")", ".", "dot", "(", "self", ".", "S_T", ")", ".", "dot", "(", "self", ".", "U", ")", ")", "\n", "denominator", "=", "np", ".", "trace", "(", "(", "self", ".", "U", ".", "T", ")", ".", "dot", "(", "self", ".", "S_W", ")", ".", "dot", "(", "self", ".", "U", ")", ")", "\n", "criterion", "=", "numerator", "/", "denominator", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.FDA_with_quantization": [[208, 256], ["my_QFDA.My_QFDA._separate_samples_of_classes_2", "numpy.asarray", "y.reshape.reshape.reshape", "list", "len", "numpy.zeros", "range", "numpy.linalg.eigh", "set", "numpy.eye", "X_quantized.dot().dot", "numpy.linalg.inv().dot", "eig_val.argsort", "y.reshape.reshape.ravel", "numpy.ones", "X.dot().dot", "numpy.eye", "X_quantized.dot", "numpy.ones", "X_quantized_class.dot().dot", "numpy.linalg.inv", "X.dot", "X_class.dot().dot", "X_quantized_class.dot", "X_class.dot", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes_2"], ["", "def", "FDA_with_quantization", "(", "self", ",", "X", ",", "X_quantized", ",", "y", ")", ":", "\n", "# X, X_quantized --> columns are samples, rows are features", "\n", "# ------ Separate classes:", "\n", "        ", "X_separated_classes", ",", "X_quantized_separated_classes", "=", "self", ".", "_separate_samples_of_classes_2", "(", "X", "=", "X", ",", "X_quantized", "=", "X_quantized", ",", "y", "=", "y", ")", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "n_dimensions", "=", "X", ".", "shape", "[", "0", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ".", "ravel", "(", ")", ")", ")", "\n", "n_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "# ------ S_T:", "\n", "n", "=", "X", ".", "shape", "[", "1", "]", "\n", "H", "=", "np", ".", "eye", "(", "n", ")", "-", "(", "(", "1", "/", "n", ")", "*", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ")", ")", "\n", "# self.S_T = X.dot(H).dot(X.T) + X_quantized.dot(H).dot(X_quantized.T) + (2 * X.dot(H).dot(X_quantized.T))", "\n", "self", ".", "S_T", "=", "X_quantized", ".", "dot", "(", "H", ")", ".", "dot", "(", "X_quantized", ".", "T", ")", "+", "(", "self", ".", "regularization_parameter2", "*", "X", ".", "dot", "(", "H", ")", ".", "dot", "(", "X_quantized", ".", "T", ")", ")", "\n", "# self.S_T = X_quantized.dot(H).dot(X_quantized.T)", "\n", "# ------ S_W:", "\n", "self", ".", "S_W", "=", "np", ".", "zeros", "(", "(", "n_dimensions", ",", "n_dimensions", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "# print(\"Calculating Sw: class \" + str(class_index))", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "X_quantized_class", "=", "X_quantized_separated_classes", "[", "class_index", "]", "\n", "n", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "H", "=", "np", ".", "eye", "(", "n", ")", "-", "(", "(", "1", "/", "n", ")", "*", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ")", ")", "\n", "# self.S_W = self.S_W + ( X_class.dot(H).dot(X_class.T) + (self.regularization_parameter2 * X_quantized_class.dot(H).dot(X_quantized_class.T)) + (2 * X_class.dot(H).dot(X_quantized_class.T)) )", "\n", "self", ".", "S_W", "=", "self", ".", "S_W", "+", "(", "(", "X_quantized_class", ".", "dot", "(", "H", ")", ".", "dot", "(", "X_quantized_class", ".", "T", ")", ")", "+", "(", "self", ".", "regularization_parameter2", "*", "X_class", ".", "dot", "(", "H", ")", ".", "dot", "(", "X_quantized_class", ".", "T", ")", ")", ")", "\n", "# self.S_W = self.S_W + ( (X_quantized_class.dot(H).dot(X_quantized_class.T)) + (1 * X_quantized_class.dot(H).dot(X_class.T)) )", "\n", "# ------ Fisher directions:", "\n", "# print(\"Calculating eigenvectors...\")", "\n", "# my_generalized_eigen_problem = My_generalized_eigen_problem(A=self.S_T, B=self.S_W)", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve()", "\n", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve_dirty()", "\n", "# print(\"Eigenvectors calculated.\")", "\n", "# idx = eig_val.argsort()[::-1]  # sort eigenvalues in descending order (largest eigenvalue first)", "\n", "# eig_val = eig_val[idx]", "\n", "# eig_vec = eig_vec[:, idx]", "\n", "\n", "# print(\"Calculating eigenvectors...\")", "\n", "", "epsilon", "=", "0.0000001", "#--> to prevent singularity of matrix N", "\n", "eig_val", ",", "eig_vec", "=", "LA", ".", "eigh", "(", "inv", "(", "self", ".", "S_W", "+", "epsilon", "*", "np", ".", "eye", "(", "self", ".", "S_W", ".", "shape", "[", "0", "]", ")", ")", ".", "dot", "(", "self", ".", "S_T", ")", ")", "\n", "idx", "=", "eig_val", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# sort eigenvalues in descending order (largest eigenvalue first)", "\n", "eig_val", "=", "eig_val", "[", "idx", "]", "\n", "eig_vec", "=", "eig_vec", "[", ":", ",", "idx", "]", "\n", "\n", "if", "self", ".", "n_components", "is", "not", "None", ":", "\n", "            ", "self", ".", "U", "=", "eig_vec", "[", ":", ",", ":", "self", ".", "n_components", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "U", "=", "eig_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.kernel_FDA": [[257, 342], ["my_QFDA.My_QFDA._separate_samples_of_classes", "numpy.asarray", "y.reshape.reshape.reshape", "list", "len", "print", "sklearn.metrics.pairwise.pairwise_kernels", "numpy.zeros", "range", "print", "numpy.zeros", "range", "print", "my_generalized_eigen_problem.My_generalized_eigen_problem.My_generalized_eigen_problem", "my_generalized_eigen_problem.My_generalized_eigen_problem.My_generalized_eigen_problem.solve", "set", "sklearn.metrics.pairwise.pairwise_kernels", "y.reshape.reshape.ravel", "g_sample.dot", "K_c.dot"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_generalized_eigen_problem.My_generalized_eigen_problem.solve"], ["", "", "def", "kernel_FDA", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "# ------ Separate classes:", "\n", "        ", "X_separated_classes", "=", "self", ".", "_separate_samples_of_classes", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "1", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ".", "ravel", "(", ")", ")", ")", "\n", "n_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "\n", "# # ------ M_*:", "\n", "# Kernel_allSamples_allSamples = pairwise_kernels(X=X.T, Y=X.T, metric=self.kernel)", "\n", "# M_star = Kernel_allSamples_allSamples.sum(axis=1)", "\n", "# M_star = M_star.reshape((-1, 1))", "\n", "# M_star = (1 / n_samples) * M_star", "\n", "# # ------ M_c and M:", "\n", "# M = np.zeros((n_samples, n_samples))", "\n", "# for class_index in range(n_classes):", "\n", "#     X_class = X_separated_classes[class_index]", "\n", "#     n_samples_of_class = X_class.shape[1]", "\n", "#     # ------ M_c:", "\n", "#     Kernel_allSamples_classSamples = pairwise_kernels(X=X.T, Y=X_class.T, metric=self.kernel)", "\n", "#     M_c = Kernel_allSamples_classSamples.sum(axis=1)", "\n", "#     M_c = M_c.reshape((-1, 1))", "\n", "#     M_c = (1 / n_samples_of_class) * M_c", "\n", "#     # ------ M:", "\n", "#     M = M + n_samples_of_class * (M_c - M_star).dot((M_c - M_star).T)", "\n", "# # ------ N:", "\n", "# N = np.zeros((n_samples, n_samples))", "\n", "# for class_index in range(n_classes):", "\n", "#     X_class = X_separated_classes[class_index]", "\n", "#     n_samples_of_class = X_class.shape[1]", "\n", "#     Kernel_allSamples_classSamples = pairwise_kernels(X=X.T, Y=X_class.T, metric=self.kernel)", "\n", "#     K_c = Kernel_allSamples_classSamples", "\n", "#     H_c = np.eye(n_samples_of_class) - (1 / n_samples_of_class) * np.ones(", "\n", "#         (n_samples_of_class, n_samples_of_class))", "\n", "#     N = N + K_c.dot(H_c).dot(K_c.T)", "\n", "# G_total = M", "\n", "# G_within = N", "\n", "\n", "\n", "# ------ G_total:", "\n", "print", "(", "\"hi1\"", ")", "\n", "Kernel_allSamples_allSamples", "=", "pairwise_kernels", "(", "X", "=", "X", ".", "T", ",", "Y", "=", "X", ".", "T", ",", "metric", "=", "self", ".", "kernel", ")", "\n", "G_total", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "n_samples", ")", ")", "\n", "for", "sample_index", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "g_sample", "=", "Kernel_allSamples_allSamples", "[", ":", ",", "sample_index", "]", "\n", "G_total", "=", "G_total", "+", "g_sample", ".", "dot", "(", "g_sample", ".", "T", ")", "\n", "", "print", "(", "\"hi2\"", ")", "\n", "# ------ G_within:", "\n", "G_within", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "n_samples", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n_samples_of_class", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "Kernel_allSamples_classSamples", "=", "pairwise_kernels", "(", "X", "=", "X", ".", "T", ",", "Y", "=", "X_class", ".", "T", ",", "metric", "=", "self", ".", "kernel", ")", "\n", "K_c", "=", "Kernel_allSamples_classSamples", "\n", "# H_c = np.eye(n_samples_of_class) - (1 / n_samples_of_class) * np.ones((n_samples_of_class, n_samples_of_class))", "\n", "G_within", "=", "G_within", "+", "K_c", ".", "dot", "(", "K_c", ".", "T", ")", "\n", "", "print", "(", "\"hi3\"", ")", "\n", "\n", "# ------ Fisher directions:", "\n", "# print(\"Calculating eigenvectors...\")", "\n", "# my_generalized_eigen_problem = My_generalized_eigen_problem(A=G_total B=G_within)", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve()", "\n", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve_dirty()", "\n", "# print(\"Eigenvectors calculated.\")", "\n", "# idx = eig_val.argsort()[::-1]  # sort eigenvalues in descending order (largest eigenvalue first)", "\n", "# eig_val = eig_val[idx]", "\n", "# eig_vec = eig_vec[:, idx]", "\n", "\n", "my_generalized_eigen_problem", "=", "My_generalized_eigen_problem", "(", "A", "=", "G_total", ",", "B", "=", "G_within", ")", "\n", "eig_vec", ",", "eig_val", "=", "my_generalized_eigen_problem", ".", "solve", "(", ")", "\n", "\n", "# print(\"Calculating eigenvectors...\")", "\n", "# epsilon = 0.0000001  #--> to prevent singularity of matrix N", "\n", "# eig_val, eig_vec = LA.eigh(inv(G_within + epsilon*np.eye(G_within.shape[0])).dot(G_total))", "\n", "# idx = eig_val.argsort()[::-1]  # sort eigenvalues in descending order (largest eigenvalue first)", "\n", "# eig_val = eig_val[idx]", "\n", "# eig_vec = eig_vec[:, idx]", "\n", "\n", "if", "self", ".", "n_components", "is", "not", "None", ":", "\n", "            ", "self", ".", "U_justFDA", "=", "eig_vec", "[", ":", ",", ":", "self", ".", "n_components", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "U_justFDA", "=", "eig_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.FDA": [[343, 386], ["my_QFDA.My_QFDA._separate_samples_of_classes", "numpy.asarray", "y.reshape.reshape.reshape", "list", "len", "X.dot().dot", "numpy.zeros", "range", "print", "numpy.linalg.eigh", "set", "numpy.eye", "numpy.linalg.inv().dot", "eig_val.argsort", "y.reshape.reshape.ravel", "numpy.ones", "X.dot", "numpy.eye", "X_class.dot().dot", "numpy.ones", "numpy.linalg.inv", "X_class.dot", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes"], ["", "", "def", "FDA", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X --> columns are samples, rows are features", "\n", "# ------ Separate classes:", "\n", "        ", "X_separated_classes", "=", "self", ".", "_separate_samples_of_classes", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "n_dimensions", "=", "X", ".", "shape", "[", "0", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ".", "ravel", "(", ")", ")", ")", "\n", "n_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "# ------ S_T:", "\n", "n", "=", "X", ".", "shape", "[", "1", "]", "\n", "H", "=", "np", ".", "eye", "(", "n", ")", "-", "(", "(", "1", "/", "n", ")", "*", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ")", ")", "\n", "self", ".", "S_T_justFDA", "=", "X", ".", "dot", "(", "H", ")", ".", "dot", "(", "X", ".", "T", ")", "\n", "# ------ S_W:", "\n", "self", ".", "S_W_justFDA", "=", "np", ".", "zeros", "(", "(", "n_dimensions", ",", "n_dimensions", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "# print(\"Calculating Sw: class \" + str(class_index))", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "H", "=", "np", ".", "eye", "(", "n", ")", "-", "(", "(", "1", "/", "n", ")", "*", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ")", ")", "\n", "self", ".", "S_W_justFDA", "=", "self", ".", "S_W_justFDA", "+", "X_class", ".", "dot", "(", "H", ")", ".", "dot", "(", "X_class", ".", "T", ")", "\n", "# ------ Fisher directions:", "\n", "# print(\"Calculating eigenvectors...\")", "\n", "# my_generalized_eigen_problem = My_generalized_eigen_problem(A=self.S_T_justFDA, B=self.S_W_justFDA)", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve()", "\n", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve_dirty()", "\n", "# print(\"Eigenvectors calculated.\")", "\n", "# idx = eig_val.argsort()[::-1]  # sort eigenvalues in descending order (largest eigenvalue first)", "\n", "# eig_val = eig_val[idx]", "\n", "# eig_vec = eig_vec[:, idx]", "\n", "\n", "", "print", "(", "\"Calculating eigenvectors...\"", ")", "\n", "epsilon", "=", "0.0000001", "#--> to prevent singularity of matrix N", "\n", "eig_val", ",", "eig_vec", "=", "LA", ".", "eigh", "(", "inv", "(", "self", ".", "S_W_justFDA", "+", "epsilon", "*", "np", ".", "eye", "(", "self", ".", "S_W_justFDA", ".", "shape", "[", "0", "]", ")", ")", ".", "dot", "(", "self", ".", "S_T_justFDA", ")", ")", "\n", "idx", "=", "eig_val", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# sort eigenvalues in descending order (largest eigenvalue first)", "\n", "eig_val", "=", "eig_val", "[", "idx", "]", "\n", "eig_vec", "=", "eig_vec", "[", ":", ",", "idx", "]", "\n", "\n", "if", "self", ".", "n_components", "is", "not", "None", ":", "\n", "            ", "self", ".", "U_justFDA", "=", "eig_vec", "[", ":", ",", ":", "self", ".", "n_components", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "U_justFDA", "=", "eig_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.FDA_version2": [[387, 446], ["my_QFDA.My_QFDA._separate_samples_of_classes", "numpy.asarray", "y.reshape.reshape.reshape", "list", "len", "numpy.zeros", "range", "X.mean", "mean_of_total.reshape.reshape.reshape", "numpy.zeros", "range", "numpy.zeros", "range", "print", "numpy.linalg.eigh", "set", "X_class.mean", "mean_of_class.reshape.reshape.reshape", "print", "X_class.mean", "mean_of_class.reshape.reshape.reshape", "range", "numpy.linalg.inv().dot", "eig_val.argsort", "y.reshape.reshape.ravel", "numpy.eye", "X_class.dot().dot", "print", "numpy.ones", "temp.dot", "str", "temp.dot", "numpy.linalg.inv", "X_class.dot", "str", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes"], ["", "", "def", "FDA_version2", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "# self.X_train = X", "\n", "# ------ Separate classes:", "\n", "        ", "X_separated_classes", "=", "self", ".", "_separate_samples_of_classes", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "n_samples", "=", "X", ".", "shape", "[", "1", "]", "\n", "n_dimensions", "=", "X", ".", "shape", "[", "0", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ".", "ravel", "(", ")", ")", ")", "\n", "n_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "# ------ S_W:", "\n", "self", ".", "S_W", "=", "np", ".", "zeros", "(", "(", "n_dimensions", ",", "n_dimensions", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "# print(\"Calculating Sw: class \" + str(class_index))", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "H", "=", "np", ".", "eye", "(", "n", ")", "-", "(", "(", "1", "/", "n", ")", "*", "np", ".", "ones", "(", "(", "n", ",", "n", ")", ")", ")", "\n", "self", ".", "S_W", "=", "self", ".", "S_W", "+", "X_class", ".", "dot", "(", "H", ")", ".", "dot", "(", "X_class", ".", "T", ")", "\n", "# ------ S_B:", "\n", "", "mean_of_total", "=", "X", ".", "mean", "(", "axis", "=", "1", ")", "\n", "mean_of_total", "=", "mean_of_total", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "S_B", "=", "np", ".", "zeros", "(", "(", "n_dimensions", ",", "n_dimensions", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n_samples_of_class", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "mean_of_class", "=", "X_class", ".", "mean", "(", "axis", "=", "1", ")", "\n", "mean_of_class", "=", "mean_of_class", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "temp", "=", "mean_of_class", "-", "mean_of_total", "\n", "S_B", "=", "S_B", "+", "(", "n_samples_of_class", "*", "temp", ".", "dot", "(", "temp", ".", "T", ")", ")", "\n", "# ------ M_c and M:", "\n", "", "S_W", "=", "np", ".", "zeros", "(", "(", "n_dimensions", ",", "n_dimensions", ")", ")", "\n", "for", "class_index", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "print", "(", "\"Calculating Sw: class \"", "+", "str", "(", "class_index", ")", ")", "\n", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "n_samples_of_class", "=", "X_class", ".", "shape", "[", "1", "]", "\n", "mean_of_class", "=", "X_class", ".", "mean", "(", "axis", "=", "1", ")", "\n", "mean_of_class", "=", "mean_of_class", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "X_class_centered", "=", "X_class", "-", "mean_of_class", "\n", "for", "sample_index", "in", "range", "(", "n_samples_of_class", ")", ":", "\n", "                ", "print", "(", "\"Calculating Sw: sample \"", "+", "str", "(", "sample_index", ")", ")", "\n", "temp", "=", "X_class_centered", "[", ":", ",", "sample_index", "]", "\n", "S_W", "=", "S_W", "+", "temp", ".", "dot", "(", "temp", ".", "T", ")", "\n", "# ------ Fisher directions:", "\n", "", "", "print", "(", "\"Calculating eigenvectors...\"", ")", "\n", "epsilon", "=", "0.0000001", "#--> to prevent singularity of matrix N", "\n", "eig_val", ",", "eig_vec", "=", "LA", ".", "eigh", "(", "inv", "(", "S_W", "+", "epsilon", "*", "np", ".", "eye", "(", "S_W", ".", "shape", "[", "0", "]", ")", ")", ".", "dot", "(", "S_B", ")", ")", "\n", "idx", "=", "eig_val", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# sort eigenvalues in descending order (largest eigenvalue first)", "\n", "eig_val", "=", "eig_val", "[", "idx", "]", "\n", "eig_vec", "=", "eig_vec", "[", ":", ",", "idx", "]", "\n", "# my_generalized_eigen_problem = My_generalized_eigen_problem(A=S_B, B=S_W)", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve()", "\n", "# eig_vec, eig_val = my_generalized_eigen_problem.solve_dirty()", "\n", "if", "self", ".", "n_components", "is", "not", "None", ":", "\n", "            ", "U", "=", "eig_vec", "[", ":", ",", ":", "self", ".", "n_components", "]", "\n", "", "else", ":", "\n", "# U = eig_vec[:, :n_classes-1]", "\n", "            ", "U", "=", "eig_vec", "\n", "", "self", ".", "U_justFDA", "=", "U", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.calculate_max_of_ranges": [[447, 456], ["my_QFDA.My_QFDA.project_onto_constraint_set_integerValues", "my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.calculate_rate", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.project_onto_constraint_set_integerValues", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.calculate_rate"], ["", "def", "calculate_max_of_ranges", "(", "self", ")", ":", "\n", "        ", "n_quantization_levels_array", "=", "15.4", "*", "np", ".", "ones", "(", "(", "64", ",", ")", ")", "#--> an example (not important what here)", "\n", "# --- making n_levels integer:", "\n", "n_quantization_levels_array", "=", "self", ".", "project_onto_constraint_set_integerValues", "(", "n_quantization_levels_array", "=", "n_quantization_levels_array", ",", "consider_uppder_bound", "=", "False", ")", "\n", "# --- DCT of image blockwise:", "\n", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "self", ".", "X_train", ")", "\n", "# --- rate:", "\n", "rate", ",", "max_of_range_array", "=", "self", ".", "calculate_rate", "(", "X_dct", "=", "X_dct", ",", "n_quantization_levels_array", "=", "n_quantization_levels_array", ")", "\n", "return", "max_of_range_array", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_transform": [[457, 463], ["my_QFDA.My_QFDA.fit", "my_QFDA.My_QFDA.transform", "my_QFDA.My_QFDA.transform"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform"], ["", "def", "fit_transform", "(", "self", ",", "X", ",", "y", ",", "path_to_save_base", ",", "load_previous_fit", "=", "False", ")", ":", "\n", "# X: columns are samples, rows are features", "\n", "        ", "self", ".", "fit", "(", "X", "=", "X", ",", "y", "=", "y", ",", "path_to_save_base", "=", "path_to_save_base", ",", "load_previous_fit", "=", "load_previous_fit", ")", "\n", "X_transformed", "=", "self", ".", "transform", "(", "X", "=", "X", ",", "y", "=", "y", ",", "transform_the_quantized", "=", "False", ")", "\n", "X_quantized_transformed", "=", "self", ".", "transform", "(", "X", "=", "X", ",", "y", "=", "y", ",", "transform_the_quantized", "=", "True", ")", "\n", "return", "X_transformed", ",", "X_quantized_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_transform_justFDA": [[464, 469], ["my_QFDA.My_QFDA.fit_justFDA", "my_QFDA.My_QFDA.transform_justFDA"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_justFDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform_justFDA"], ["", "def", "fit_transform_justFDA", "(", "self", ",", "X", ",", "y", ",", "path_to_save_base", ",", "load_previous_fit", "=", "False", ",", "version", "=", "1", ")", ":", "\n", "# X: columns are samples, rows are features", "\n", "        ", "self", ".", "fit_justFDA", "(", "X", "=", "X", ",", "y", "=", "y", ",", "path_to_save_base", "=", "path_to_save_base", ",", "load_previous_fit", "=", "load_previous_fit", ",", "version", "=", "version", ")", "\n", "X_transformed", "=", "self", ".", "transform_justFDA", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_transform_justKernelFDA": [[470, 475], ["my_QFDA.My_QFDA.fit_justKernelFDA", "my_QFDA.My_QFDA.transform_justKernelFDA"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_justKernelFDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform_justKernelFDA"], ["", "def", "fit_transform_justKernelFDA", "(", "self", ",", "X", ",", "y", ",", "path_to_save_base", ",", "load_previous_fit", "=", "False", ")", ":", "\n", "# X: columns are samples, rows are features", "\n", "        ", "self", ".", "fit_justKernelFDA", "(", "X", "=", "X", ",", "y", "=", "y", ",", "path_to_save_base", "=", "path_to_save_base", ",", "load_previous_fit", "=", "load_previous_fit", ")", "\n", "X_transformed", "=", "self", ".", "transform_justKernelFDA", "(", "X", "=", "X", ",", "y", "=", "y", ")", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_justKernelFDA": [[476, 486], ["my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.kernel_FDA", "my_QFDA.My_QFDA.save_variable", "my_QFDA.My_QFDA.load_variable", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.kernel_FDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.load_variable"], ["", "def", "fit_justKernelFDA", "(", "self", ",", "X", ",", "y", ",", "path_to_save_base", ",", "load_previous_fit", "=", "False", ")", ":", "\n", "        ", "self", ".", "X_train", "=", "X", "\n", "self", ".", "y_train", "=", "y", "\n", "path_to_save", "=", "path_to_save_base", "+", "\"/reg_par1=\"", "+", "str", "(", "self", ".", "regularization_parameter1", ")", "+", "\", reg_par2=\"", "+", "str", "(", "self", ".", "regularization_parameter2", ")", "+", "\"/\"", "\n", "if", "load_previous_fit", ":", "\n", "            ", "self", ".", "U_justFDA", "=", "self", ".", "load_variable", "(", "name_of_variable", "=", "\"U_justFDA\"", ",", "path", "=", "path_to_save", ")", "\n", "return", "\n", "", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "self", ".", "X_train", ")", "\n", "self", ".", "kernel_FDA", "(", "X", "=", "X_dct", ",", "y", "=", "self", ".", "y_train", ")", "\n", "self", ".", "save_variable", "(", "self", ".", "U_justFDA", ",", "'U_justFDA'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "# self.kernel_FDA(X=X, y=self.y_train)", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit_justFDA": [[489, 502], ["my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.save_variable", "my_QFDA.My_QFDA.load_variable", "my_QFDA.My_QFDA.FDA", "str", "my_QFDA.My_QFDA.FDA_version2", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.load_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.FDA", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.FDA_version2"], ["", "def", "fit_justFDA", "(", "self", ",", "X", ",", "y", ",", "path_to_save_base", ",", "load_previous_fit", "=", "False", ",", "version", "=", "1", ")", ":", "\n", "        ", "self", ".", "X_train", "=", "X", "\n", "self", ".", "y_train", "=", "y", "\n", "path_to_save", "=", "path_to_save_base", "+", "\"/reg_par1=\"", "+", "str", "(", "self", ".", "regularization_parameter1", ")", "+", "\", reg_par2=\"", "+", "str", "(", "self", ".", "regularization_parameter2", ")", "+", "\"/\"", "\n", "if", "load_previous_fit", ":", "\n", "            ", "self", ".", "U_justFDA", "=", "self", ".", "load_variable", "(", "name_of_variable", "=", "\"U_justFDA\"", ",", "path", "=", "path_to_save", ")", "\n", "return", "\n", "", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "self", ".", "X_train", ")", "\n", "if", "version", "==", "1", ":", "\n", "            ", "self", ".", "FDA", "(", "X", "=", "X_dct", ",", "y", "=", "self", ".", "y_train", ")", "\n", "", "elif", "version", "==", "2", ":", "\n", "            ", "self", ".", "FDA_version2", "(", "X", "=", "X_dct", ",", "y", "=", "self", ".", "y_train", ")", "\n", "", "self", ".", "save_variable", "(", "self", ".", "U_justFDA", ",", "'U_justFDA'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.fit": [[503, 551], ["my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.copy", "my_QFDA.My_QFDA.uniform_quantization", "my_QFDA.My_QFDA.save_variable", "my_QFDA.My_QFDA.save_variable", "my_QFDA.My_QFDA.save_np_array_to_txt", "my_QFDA.My_QFDA.save_variable", "my_QFDA.My_QFDA.save_np_array_to_txt", "my_QFDA.My_QFDA.save_variable", "my_QFDA.My_QFDA.save_np_array_to_txt", "my_QFDA.My_QFDA.save_variable", "my_QFDA.My_QFDA.save_np_array_to_txt", "my_QFDA.My_QFDA.load_variable", "my_QFDA.My_QFDA.load_variable", "my_QFDA.My_QFDA.load_variable", "numpy.random.seed", "my_QFDA.My_QFDA.calculate_max_of_ranges", "pso2.PSO", "print", "my_QFDA.My_QFDA.project_onto_constraint_set_integerValues", "print", "my_QFDA.My_QFDA.inverse_DCT_blockwise", "my_QFDA.My_QFDA.inverse_DCT_blockwise", "my_QFDA.My_QFDA.FDA_with_quantization", "my_QFDA.My_QFDA.FDA_with_quantization", "numpy.ones", "str", "str", "list", "list", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.uniform_quantization", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.load_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.load_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.load_variable", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.calculate_max_of_ranges", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.pso2.PSO", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.project_onto_constraint_set_integerValues", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.FDA_with_quantization", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.FDA_with_quantization"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "path_to_save_base", ",", "load_previous_fit", "=", "False", ")", ":", "\n", "        ", "self", ".", "X_train", "=", "X", "\n", "self", ".", "y_train", "=", "y", "\n", "if", "load_previous_fit", ":", "\n", "            ", "path_to_save", "=", "path_to_save_base", "+", "\"/reg_par1=\"", "+", "str", "(", "self", ".", "regularization_parameter1", ")", "+", "\", reg_par2=\"", "+", "str", "(", "self", ".", "regularization_parameter2", ")", "+", "\"/\"", "\n", "self", ".", "U", "=", "self", ".", "load_variable", "(", "name_of_variable", "=", "\"U\"", ",", "path", "=", "path_to_save", ")", "\n", "self", ".", "best_number_of_levels", "=", "self", ".", "load_variable", "(", "name_of_variable", "=", "\"best_number_of_levels\"", ",", "path", "=", "path_to_save", ")", "\n", "self", ".", "max_of_range_array", "=", "self", ".", "load_variable", "(", "name_of_variable", "=", "\"max_of_range_array\"", ",", "path", "=", "path_to_save", ")", "\n", "return", "\n", "", "if", "self", ".", "search_method", "==", "\"PSO\"", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "555", ")", "# Seeded to allow replication.", "\n", "# --- PSO 2 function:", "\n", "self", ".", "max_of_range_array", "=", "self", ".", "calculate_max_of_ranges", "(", ")", "\n", "lower_bound", "=", "2", "*", "np", ".", "ones", "(", "(", "self", ".", "block_size", "*", "self", ".", "block_size", ",", ")", ")", "\n", "upper_bound", "=", "self", ".", "max_of_range_array", "\n", "a", "=", "pso2", ".", "PSO", "(", "objf", "=", "self", ".", "cost_function", ",", "lb", "=", "list", "(", "lower_bound", ")", ",", "ub", "=", "list", "(", "upper_bound", ")", ",", "dim", "=", "self", ".", "block_size", "*", "self", ".", "block_size", ",", "PopSize", "=", "5", ",", "iters", "=", "10", ")", "\n", "history_of_bestCosts", "=", "a", ".", "convergence", "\n", "self", ".", "bestCost", "=", "a", ".", "bestCost", "\n", "print", "(", "\"best cost: \"", "+", "str", "(", "self", ".", "bestCost", ")", ")", "\n", "self", ".", "best_number_of_levels", "=", "self", ".", "project_onto_constraint_set_integerValues", "(", "n_quantization_levels_array", "=", "a", ".", "bestParticle", ")", "\n", "print", "(", "\"best number of levels: \"", "+", "str", "(", "self", ".", "best_number_of_levels", ")", ")", "\n", "# --- train quantized Fisher subspace for the best quantization levels:", "\n", "", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "self", ".", "X_train", ")", "\n", "X_dct_", "=", "X_dct", ".", "copy", "(", ")", "\n", "X_dct_quantized", "=", "self", ".", "uniform_quantization", "(", "X_dct", "=", "X_dct", ",", "n_quantization_levels_array", "=", "self", ".", "best_number_of_levels", ",", "max_of_range_array", "=", "self", ".", "max_of_range_array", ")", "\n", "if", "self", ".", "in_pixel_domain", ":", "\n", "            ", "X_idct", "=", "self", ".", "inverse_DCT_blockwise", "(", "X_dct", "=", "X_dct_", ",", "display_inverse_images", "=", "False", ")", "\n", "X_idct_quantized", "=", "self", ".", "inverse_DCT_blockwise", "(", "X_dct", "=", "X_dct_quantized", ",", "display_inverse_images", "=", "False", ")", "\n", "self", ".", "FDA_with_quantization", "(", "X", "=", "X_idct", ",", "X_quantized", "=", "X_idct_quantized", ",", "y", "=", "self", ".", "y_train", ")", "\n", "# xx = self.zero_pad_if_necessary(self.X_train)", "\n", "# # plt.imshow(xx[:, 0].reshape((self.padded_image_height, self.padded_image_width)), cmap='gray')", "\n", "# # plt.colorbar()", "\n", "# # plt.show()", "\n", "# self.FDA(X=xx, y=self.y_train)", "\n", "", "else", ":", "\n", "            ", "self", ".", "FDA_with_quantization", "(", "X", "=", "X_dct_", ",", "X_quantized", "=", "X_dct_quantized", ",", "y", "=", "self", ".", "y_train", ")", "\n", "# --- save variables:", "\n", "", "path_to_save", "=", "path_to_save_base", "+", "\"/reg_par1=\"", "+", "str", "(", "self", ".", "regularization_parameter1", ")", "+", "\", reg_par2=\"", "+", "str", "(", "self", ".", "regularization_parameter2", ")", "+", "\"/\"", "\n", "# path_to_save = \"./output/\" + str(self.search_method) +\"/reg_par1=\" + str(self.regularization_parameter1) +\", reg_par2=\" + str(self.regularization_parameter2) + \"/\"", "\n", "self", ".", "save_variable", "(", "self", ".", "U", ",", "'U'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "self", ".", "save_variable", "(", "history_of_bestCosts", ",", "'history_of_bestCosts'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "self", ".", "save_np_array_to_txt", "(", "history_of_bestCosts", ",", "'history_of_bestCosts'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "self", ".", "save_variable", "(", "self", ".", "bestCost", ",", "'bestCost'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "self", ".", "save_np_array_to_txt", "(", "self", ".", "bestCost", ",", "'bestCost'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "self", ".", "save_variable", "(", "self", ".", "best_number_of_levels", ",", "'best_number_of_levels'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "self", ".", "save_np_array_to_txt", "(", "self", ".", "best_number_of_levels", ",", "'best_number_of_levels'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "self", ".", "save_variable", "(", "self", ".", "max_of_range_array", ",", "'max_of_range_array'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "self", ".", "save_np_array_to_txt", "(", "self", ".", "max_of_range_array", ",", "'max_of_range_array'", ",", "path_to_save", "=", "path_to_save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform": [[552, 571], ["my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.uniform_quantization", "my_QFDA.My_QFDA.inverse_DCT_blockwise", "my_QFDA.My_QFDA.U.T.dot", "my_QFDA.My_QFDA.U.T.dot", "my_QFDA.My_QFDA.zero_pad_if_necessary", "my_QFDA.My_QFDA.U.T.dot", "my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.U.T.dot"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.uniform_quantization", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.zero_pad_if_necessary", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise"], ["", "def", "transform", "(", "self", ",", "X", ",", "y", ",", "transform_the_quantized", "=", "False", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "# X_transformed: columns are sample, rows are features", "\n", "        ", "if", "transform_the_quantized", ":", "\n", "            ", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "X", ")", "\n", "X_dct_quantized", "=", "self", ".", "uniform_quantization", "(", "X_dct", "=", "X_dct", ",", "n_quantization_levels_array", "=", "self", ".", "best_number_of_levels", ",", "max_of_range_array", "=", "self", ".", "max_of_range_array", ")", "\n", "if", "self", ".", "in_pixel_domain", ":", "\n", "                ", "X_idct_quantized", "=", "self", ".", "inverse_DCT_blockwise", "(", "X_dct", "=", "X_dct_quantized", ",", "display_inverse_images", "=", "False", ")", "\n", "X_transformed", "=", "(", "self", ".", "U", ".", "T", ")", ".", "dot", "(", "X_idct_quantized", ")", "\n", "", "else", ":", "\n", "                ", "X_transformed", "=", "(", "self", ".", "U", ".", "T", ")", ".", "dot", "(", "X_dct_quantized", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "in_pixel_domain", ":", "\n", "                ", "X_padded", "=", "self", ".", "zero_pad_if_necessary", "(", "X", "=", "X", ")", "\n", "X_transformed", "=", "(", "self", ".", "U", ".", "T", ")", ".", "dot", "(", "X_padded", ")", "\n", "", "else", ":", "\n", "                ", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "X", ")", "\n", "X_transformed", "=", "(", "self", ".", "U", ".", "T", ")", ".", "dot", "(", "X_dct", ")", "\n", "", "", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform_justFDA": [[572, 579], ["my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.U_justFDA.T.dot"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise"], ["", "def", "transform_justFDA", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "# X_transformed: columns are sample, rows are features", "\n", "# X_padded = self.zero_pad_if_necessary(X=X)", "\n", "        ", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "X", ")", "\n", "X_transformed", "=", "(", "self", ".", "U_justFDA", ".", "T", ")", ".", "dot", "(", "X_dct", ")", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.transform_justKernelFDA": [[580, 593], ["my_QFDA.My_QFDA.DCT_blockwise", "my_QFDA.My_QFDA.DCT_blockwise", "sklearn.metrics.pairwise.pairwise_kernels", "my_QFDA.My_QFDA.U_justFDA.T.dot"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise"], ["", "def", "transform_justKernelFDA", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X: columns are sample, rows are features", "\n", "# X_transformed: columns are sample, rows are features", "\n", "# plt.imshow(self.X_train[:, 0].reshape((self.image_height, self.image_width)), cmap='gray')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "        ", "X_train_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "self", ".", "X_train", ")", "\n", "X_dct", "=", "self", ".", "DCT_blockwise", "(", "X", "=", "X", ")", "\n", "Kernel_train_input", "=", "pairwise_kernels", "(", "X", "=", "X_train_dct", ".", "T", ",", "Y", "=", "X_dct", ".", "T", ",", "metric", "=", "self", ".", "kernel", ")", "\n", "X_transformed", "=", "(", "self", ".", "U_justFDA", ".", "T", ")", ".", "dot", "(", "Kernel_train_input", ")", "\n", "# Kernel_train_input = pairwise_kernels(X=self.X_train.T, Y=X.T, metric=self.kernel)", "\n", "# X_transformed = (self.U_justFDA.T).dot(Kernel_train_input)", "\n", "return", "X_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.calculate_rate": [[594, 655], ["numpy.random.choice", "int", "int", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "range", "X_dct_subset[].reshape", "my_QFDA.My_QFDA.divide_image_into_blocks", "blocks_reshaped_forSubset[].ravel", "max", "scipy.stats.gaussian_kde", "range", "abs", "abs", "int", "int", "scipy.stats.gaussian_kde.integrate_box_1d", "scipy.stats.gaussian_kde.integrate_box_1d", "blocks_reshaped_forSubset[].ravel.min", "blocks_reshaped_forSubset[].ravel.max", "blocks_reshaped_forSubset[].ravel", "math.log"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.divide_image_into_blocks"], ["", "def", "calculate_rate", "(", "self", ",", "X_dct", ",", "n_quantization_levels_array", ")", ":", "\n", "# https://en.wikipedia.org/wiki/Quantization_(signal_processing)", "\n", "# https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.html", "\n", "# https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.integrate_box_1d.html#scipy.stats.gaussian_kde.integrate_box_1d", "\n", "        ", "n_subset", "=", "self", ".", "n_bootstrap", "\n", "n_images", "=", "X_dct", ".", "shape", "[", "1", "]", "\n", "bootstrapped_images", "=", "np", ".", "random", ".", "choice", "(", "a", "=", "n_images", ",", "size", "=", "n_subset", ",", "replace", "=", "False", ")", "\n", "# X_dct_subset = X_dct[:, :n_subset]  #--> because of memory constraints (otherwise, gives memory error)", "\n", "X_dct_subset", "=", "X_dct", "[", ":", ",", "bootstrapped_images", "]", "# --> because of memory constraints (otherwise, gives memory error)", "\n", "n_blocks_in_height", "=", "int", "(", "self", ".", "padded_image_height", "/", "self", ".", "block_size", ")", "\n", "n_blocks_in_width", "=", "int", "(", "self", ".", "padded_image_width", "/", "self", ".", "block_size", ")", "\n", "blocks_reshaped_forSubset", "=", "np", ".", "zeros", "(", "(", "self", ".", "block_size", "*", "self", ".", "block_size", ",", "n_blocks_in_height", "*", "n_blocks_in_width", "*", "n_subset", ")", ")", "\n", "for", "image_index", "in", "range", "(", "n_subset", ")", ":", "\n", "            ", "image", "=", "X_dct_subset", "[", ":", ",", "image_index", "]", ".", "reshape", "(", "(", "self", ".", "padded_image_height", ",", "self", ".", "padded_image_width", ")", ")", "\n", "blocks_reshaped_forImage", "=", "self", ".", "divide_image_into_blocks", "(", "image", "=", "image", ")", "\n", "blocks_reshaped_forSubset", "[", ":", ",", "(", "image_index", "*", "n_blocks_in_height", "*", "n_blocks_in_width", ")", ":", "(", "(", "image_index", "+", "1", ")", "*", "n_blocks_in_height", "*", "n_blocks_in_width", ")", "]", "=", "blocks_reshaped_forImage", "\n", "", "rate", "=", "np", ".", "zeros", "(", "(", "self", ".", "block_size", "*", "self", ".", "block_size", ",", ")", ")", "\n", "max_of_range_array", "=", "np", ".", "zeros", "(", "(", "self", ".", "block_size", "*", "self", ".", "block_size", ",", ")", ")", "\n", "for", "frequency", "in", "range", "(", "self", ".", "block_size", "*", "self", ".", "block_size", ")", ":", "\n", "            ", "n_quantization_levels", "=", "n_quantization_levels_array", "[", "frequency", "]", "\n", "DCT_values_for_that_frequency", "=", "blocks_reshaped_forSubset", "[", "frequency", ",", ":", "]", ".", "ravel", "(", ")", "\n", "max_of_range", "=", "max", "(", "abs", "(", "DCT_values_for_that_frequency", ".", "min", "(", ")", ")", ",", "abs", "(", "DCT_values_for_that_frequency", ".", "max", "(", ")", ")", ")", "\n", "max_of_range_array", "[", "frequency", "]", "=", "max_of_range", "\n", "# print(DCT_values_for_that_frequency.mean())", "\n", "# print(DCT_values_for_that_frequency.std())", "\n", "# input(\"hiiiiiii\")", "\n", "PDF", "=", "stats", ".", "gaussian_kde", "(", "dataset", "=", "blocks_reshaped_forSubset", "[", "frequency", ",", ":", "]", ".", "ravel", "(", ")", ")", "\n", "entropy", "=", "0", "\n", "if", "n_quantization_levels", "%", "2", "==", "1", ":", "# --> n_quantization_levels is odd", "\n", "                ", "temp", "=", "int", "(", "(", "n_quantization_levels", "+", "1", ")", "/", "2", ")", "\n", "", "else", ":", "#--> n_quantization_levels is even", "\n", "                ", "temp", "=", "int", "(", "(", "n_quantization_levels", "+", "2", ")", "/", "2", ")", "\n", "", "for", "quantization_interval_index", "in", "range", "(", "temp", ")", ":", "\n", "                ", "start1_of_interval", "=", "quantization_interval_index", "*", "(", "max_of_range", "/", "temp", ")", "\n", "end1_of_interval", "=", "(", "quantization_interval_index", "+", "1", ")", "*", "(", "max_of_range", "/", "temp", ")", "\n", "start2_of_interval", "=", "-", "1", "*", "quantization_interval_index", "*", "(", "max_of_range", "/", "temp", ")", "\n", "end2_of_interval", "=", "-", "1", "*", "(", "quantization_interval_index", "+", "1", ")", "*", "(", "max_of_range", "/", "temp", ")", "\n", "# if n_quantization_levels % 2 == 1:  #--> n_quantization_levels is odd", "\n", "#     start1_of_interval = quantization_interval_index * (max_of_range / temp)", "\n", "#     end1_of_interval = (quantization_interval_index+1) * (max_of_range / temp)", "\n", "#     start2_of_interval = -1 * quantization_interval_index * (max_of_range / temp)", "\n", "#     end2_of_interval = -1 * (quantization_interval_index+1) * (max_of_range / temp)", "\n", "# else:  #--> n_quantization_levels is even", "\n", "#     start1_of_interval = quantization_interval_index * (max_of_range / temp)", "\n", "#     end1_of_interval = (quantization_interval_index+1) * (max_of_range / temp)", "\n", "#     start2_of_interval = -1 * quantization_interval_index * (max_of_range / temp)", "\n", "#     end2_of_interval = -1 * (quantization_interval_index+1) * (max_of_range / temp)", "\n", "if", "quantization_interval_index", "==", "temp", "-", "1", ":", "#--> last intervals", "\n", "                    ", "end1_of_interval", "=", "np", ".", "inf", "\n", "end2_of_interval", "=", "-", "1", "*", "np", ".", "inf", "\n", "", "if", "n_quantization_levels", "%", "2", "==", "0", ":", "#--> n_quantization_levels is even", "\n", "                    ", "if", "quantization_interval_index", "==", "temp", "-", "2", ":", "#--> one to the last interval (for negative values)", "\n", "                        ", "end2_of_interval", "=", "-", "1", "*", "np", ".", "inf", "\n", "# value_of_quantization = max_of_range * (quantization_interval_index / (temp - 1))", "\n", "", "", "p1", "=", "PDF", ".", "integrate_box_1d", "(", "low", "=", "start1_of_interval", ",", "high", "=", "end1_of_interval", ")", "\n", "p2", "=", "PDF", ".", "integrate_box_1d", "(", "low", "=", "end2_of_interval", ",", "high", "=", "start2_of_interval", ")", "\n", "p", "=", "p1", "+", "p2", "\n", "if", "p", "!=", "0", ":", "\n", "                    ", "entropy", "=", "entropy", "+", "(", "-", "1", "*", "p", "*", "math", ".", "log", "(", "p", ",", "2.0", ")", ")", "\n", "", "", "rate", "[", "frequency", "]", "=", "entropy", "\n", "", "return", "rate", ",", "max_of_range_array", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.DCT_blockwise": [[656, 685], ["my_QFDA.My_QFDA.zero_pad_if_necessary", "int", "int", "numpy.zeros", "range", "numpy.zeros", "range", "numpy.zeros.reshape().ravel", "range", "X_padded[].reshape", "my_QFDA.My_QFDA.get_2D_dct", "numpy.zeros.reshape"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.zero_pad_if_necessary", "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_2D_dct"], ["", "def", "DCT_blockwise", "(", "self", ",", "X", ")", ":", "\n", "# X, X_dct: columns are samples, rows are features", "\n", "        ", "X_padded", "=", "self", ".", "zero_pad_if_necessary", "(", "X", "=", "X", ")", "\n", "n_blocks_in_height", "=", "int", "(", "self", ".", "padded_image_height", "/", "self", ".", "block_size", ")", "\n", "n_blocks_in_width", "=", "int", "(", "self", ".", "padded_image_width", "/", "self", ".", "block_size", ")", "\n", "X_dct", "=", "np", ".", "zeros", "(", "X_padded", ".", "shape", ")", "\n", "for", "image_index", "in", "range", "(", "X_padded", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "dct_of_image", "=", "np", ".", "zeros", "(", "(", "self", ".", "padded_image_height", ",", "self", ".", "padded_image_width", ")", ")", "\n", "for", "block_index_in_height", "in", "range", "(", "n_blocks_in_height", ")", ":", "\n", "                ", "for", "block_index_in_width", "in", "range", "(", "n_blocks_in_width", ")", ":", "\n", "                    ", "start_pixel_in_height", "=", "(", "block_index_in_height", "*", "self", ".", "block_size", ")", "\n", "end_pixel_in_height", "=", "(", "block_index_in_height", "*", "self", ".", "block_size", ")", "+", "self", ".", "block_size", "-", "1", "\n", "start_pixel_in_width", "=", "(", "block_index_in_width", "*", "self", ".", "block_size", ")", "\n", "end_pixel_in_width", "=", "(", "block_index_in_width", "*", "self", ".", "block_size", ")", "+", "self", ".", "block_size", "-", "1", "\n", "image", "=", "X_padded", "[", ":", ",", "image_index", "]", ".", "reshape", "(", "(", "self", ".", "padded_image_height", ",", "self", ".", "padded_image_width", ")", ")", "\n", "# plt.imshow(image, cmap='gray')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "block", "=", "image", "[", "start_pixel_in_height", ":", "end_pixel_in_height", "+", "1", ",", "start_pixel_in_width", ":", "end_pixel_in_width", "+", "1", "]", "\n", "# plt.imshow(block, cmap='hot')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "block_dct", "=", "self", ".", "get_2D_dct", "(", "img", "=", "block", ")", "\n", "# plt.imshow(block_dct, cmap='hot')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "dct_of_image", "[", "start_pixel_in_height", ":", "end_pixel_in_height", "+", "1", ",", "start_pixel_in_width", ":", "end_pixel_in_width", "+", "1", "]", "=", "block_dct", "\n", "", "", "X_dct", "[", ":", ",", "image_index", "]", "=", "dct_of_image", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ".", "ravel", "(", ")", "\n", "", "return", "X_dct", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise": [[686, 718], ["int", "int", "numpy.zeros", "range", "numpy.zeros", "range", "numpy.zeros.reshape().ravel", "range", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.show", "X_dct[].reshape", "my_QFDA.My_QFDA.get_inverse_2D_dct", "numpy.zeros.reshape"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_inverse_2D_dct"], ["", "def", "inverse_DCT_blockwise", "(", "self", ",", "X_dct", ",", "display_inverse_images", "=", "False", ")", ":", "\n", "# X_dct, X: columns are samples, rows are features", "\n", "        ", "n_blocks_in_height", "=", "int", "(", "self", ".", "padded_image_height", "/", "self", ".", "block_size", ")", "\n", "n_blocks_in_width", "=", "int", "(", "self", ".", "padded_image_width", "/", "self", ".", "block_size", ")", "\n", "X", "=", "np", ".", "zeros", "(", "X_dct", ".", "shape", ")", "\n", "for", "image_index", "in", "range", "(", "X_dct", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "image", "=", "np", ".", "zeros", "(", "(", "self", ".", "padded_image_height", ",", "self", ".", "padded_image_width", ")", ")", "\n", "for", "block_index_in_height", "in", "range", "(", "n_blocks_in_height", ")", ":", "\n", "                ", "for", "block_index_in_width", "in", "range", "(", "n_blocks_in_width", ")", ":", "\n", "                    ", "start_pixel_in_height", "=", "(", "block_index_in_height", "*", "self", ".", "block_size", ")", "\n", "end_pixel_in_height", "=", "(", "block_index_in_height", "*", "self", ".", "block_size", ")", "+", "self", ".", "block_size", "-", "1", "\n", "start_pixel_in_width", "=", "(", "block_index_in_width", "*", "self", ".", "block_size", ")", "\n", "end_pixel_in_width", "=", "(", "block_index_in_width", "*", "self", ".", "block_size", ")", "+", "self", ".", "block_size", "-", "1", "\n", "image_dct", "=", "X_dct", "[", ":", ",", "image_index", "]", ".", "reshape", "(", "(", "self", ".", "padded_image_height", ",", "self", ".", "padded_image_width", ")", ")", "\n", "# plt.imshow(image_dct, cmap='gray')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "block_dct", "=", "image_dct", "[", "start_pixel_in_height", ":", "end_pixel_in_height", "+", "1", ",", "start_pixel_in_width", ":", "end_pixel_in_width", "+", "1", "]", "\n", "# plt.imshow(block_dct, cmap='hot')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "block", "=", "self", ".", "get_inverse_2D_dct", "(", "img_dct", "=", "block_dct", ")", "\n", "# plt.imshow(block, cmap='gray')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "image", "[", "start_pixel_in_height", ":", "end_pixel_in_height", "+", "1", ",", "start_pixel_in_width", ":", "end_pixel_in_width", "+", "1", "]", "=", "block", "\n", "", "", "if", "display_inverse_images", ":", "\n", "                ", "plt", ".", "imshow", "(", "image", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "X", "[", ":", ",", "image_index", "]", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ".", "ravel", "(", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_2D_dct": [[719, 724], ["scipy.fftpack.dct", "scipy.fftpack.dct"], "methods", ["None"], ["", "def", "get_2D_dct", "(", "self", ",", "img", ")", ":", "\n", "# Get 2D Discrete Cosine Transform (DCT) of Image", "\n", "# http://bugra.github.io/work/notes/2014-07-12/discre-fourier-cosine-transform-dft-dct-image-compression/", "\n", "# return fftpack.dct(fftpack.dct(img.T, norm='ortho').T, norm='ortho')", "\n", "        ", "return", "fftpack", ".", "dct", "(", "fftpack", ".", "dct", "(", "img", ".", "T", ")", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_inverse_2D_dct": [[725, 730], ["scipy.fftpack.idct", "scipy.fftpack.idct"], "methods", ["None"], ["", "def", "get_inverse_2D_dct", "(", "self", ",", "img_dct", ")", ":", "\n", "# Get inverse 2D Discrete Cosine Transform (DCT) of Image", "\n", "# http://bugra.github.io/work/notes/2014-07-12/discre-fourier-cosine-transform-dft-dct-image-compression/", "\n", "# return fftpack.idct(fftpack.idct(img_dct.T, norm='ortho').T, norm='ortho')", "\n", "        ", "return", "fftpack", ".", "idct", "(", "fftpack", ".", "idct", "(", "img_dct", ".", "T", ",", "norm", "=", "'ortho'", ")", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.zero_pad_if_necessary": [[731, 776], ["numpy.zeros", "range", "numpy.zeros.mean().reshape", "X[].reshape", "numpy.lib.pad", "image_padded.reshape.reshape.reshape", "image_padded.reshape.reshape.ravel", "numpy.zeros.mean().reshape", "int", "int", "int", "int", "int", "int", "numpy.zeros.mean", "int", "numpy.floor", "int", "numpy.floor", "numpy.zeros.mean", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "zero_pad_if_necessary", "(", "self", ",", "X", ")", ":", "\n", "# X: columns are samples, rows are features", "\n", "# https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.pad.html", "\n", "        ", "mod_for_height", "=", "self", ".", "image_height", "%", "self", ".", "block_size", "\n", "mod_for_height", "=", "self", ".", "block_size", "-", "mod_for_height", "\n", "if", "mod_for_height", "==", "0", ":", "\n", "            ", "n_pad_before_for_height", "=", "0", "\n", "n_pad_after_for_height", "=", "0", "\n", "", "elif", "mod_for_height", "%", "2", "==", "0", ":", "# --> mod_for_height is even", "\n", "            ", "n_pad_before_for_height", "=", "int", "(", "mod_for_height", "/", "2", ")", "\n", "n_pad_after_for_height", "=", "int", "(", "mod_for_height", "/", "2", ")", "\n", "", "else", ":", "# --> mod_for_height is odd", "\n", "            ", "n_pad_before_for_height", "=", "int", "(", "np", ".", "floor", "(", "mod_for_height", "/", "2", ")", ")", "+", "1", "\n", "n_pad_after_for_height", "=", "int", "(", "np", ".", "floor", "(", "mod_for_height", "/", "2", ")", ")", "\n", "", "mod_for_width", "=", "self", ".", "image_width", "%", "self", ".", "block_size", "\n", "mod_for_width", "=", "self", ".", "block_size", "-", "mod_for_width", "\n", "if", "mod_for_width", "==", "0", ":", "\n", "            ", "n_pad_before_for_width", "=", "0", "\n", "n_pad_after_for_width", "=", "0", "\n", "", "elif", "mod_for_width", "%", "2", "==", "0", ":", "# --> mod_for_height is even", "\n", "            ", "n_pad_before_for_width", "=", "int", "(", "mod_for_width", "/", "2", ")", "\n", "n_pad_after_for_width", "=", "int", "(", "mod_for_width", "/", "2", ")", "\n", "", "else", ":", "# --> mod_for_height is odd", "\n", "            ", "n_pad_before_for_width", "=", "int", "(", "np", ".", "floor", "(", "mod_for_width", "/", "2", ")", ")", "+", "1", "\n", "n_pad_after_for_width", "=", "int", "(", "np", ".", "floor", "(", "mod_for_width", "/", "2", ")", ")", "\n", "", "if", "n_pad_before_for_height", "==", "0", "and", "n_pad_after_for_height", "==", "0", "and", "n_pad_before_for_width", "==", "0", "and", "n_pad_after_for_width", "==", "0", ":", "\n", "            ", "self", ".", "padded_image_height", "=", "self", ".", "image_height", "\n", "self", ".", "padded_image_width", "=", "self", ".", "image_width", "\n", "return", "X", "#--> no pad", "\n", "", "X_padded", "=", "np", ".", "zeros", "(", "(", "(", "self", ".", "image_height", "+", "mod_for_height", ")", "*", "(", "self", ".", "image_width", "+", "mod_for_width", ")", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "image_index", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "image", "=", "X", "[", ":", ",", "image_index", "]", ".", "reshape", "(", "(", "self", ".", "image_height", ",", "self", ".", "image_width", ")", ")", "\n", "image_padded", "=", "np", ".", "lib", ".", "pad", "(", "image", ",", "(", "(", "n_pad_before_for_height", ",", "n_pad_after_for_height", ")", ",", "(", "n_pad_before_for_width", ",", "n_pad_after_for_width", ")", ")", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "# plt.imshow(image_padded, cmap='gray')", "\n", "# plt.colorbar()", "\n", "# plt.show()", "\n", "self", ".", "padded_image_height", "=", "image_padded", ".", "shape", "[", "0", "]", "\n", "self", ".", "padded_image_width", "=", "image_padded", ".", "shape", "[", "1", "]", "\n", "image_padded", "=", "image_padded", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "X_padded", "[", ":", ",", "image_index", "]", "=", "image_padded", ".", "ravel", "(", ")", "\n", "#-- removing the mean:", "\n", "# X_padded = X_padded - 128", "\n", "", "self", ".", "X_padded_mean", "=", "X_padded", ".", "mean", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "X_padded", "=", "X_padded", "-", "X_padded", ".", "mean", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "return", "X_padded", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_padded_image_size": [[777, 779], ["None"], "methods", ["None"], ["", "def", "get_padded_image_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "padded_image_height", ",", "self", ".", "padded_image_width", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_projection_directions": [[780, 786], ["my_QFDA.My_QFDA.inverse_DCT_blockwise"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise"], ["", "def", "get_projection_directions", "(", "self", ",", "also_get_inverse_dct_of_U", "=", "False", ")", ":", "\n", "        ", "if", "also_get_inverse_dct_of_U", ":", "\n", "            ", "U_inverse_dct", "=", "self", ".", "inverse_DCT_blockwise", "(", "X_dct", "=", "self", ".", "U", ",", "display_inverse_images", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "U_inverse_dct", "=", "None", "\n", "", "return", "self", ".", "U", ",", "U_inverse_dct", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.get_projection_directions_justFDA": [[787, 793], ["my_QFDA.My_QFDA.inverse_DCT_blockwise"], "methods", ["home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.inverse_DCT_blockwise"], ["", "def", "get_projection_directions_justFDA", "(", "self", ",", "also_get_inverse_dct_of_U", "=", "False", ")", ":", "\n", "        ", "if", "also_get_inverse_dct_of_U", ":", "\n", "            ", "U_inverse_dct", "=", "self", ".", "inverse_DCT_blockwise", "(", "X_dct", "=", "self", ".", "U_justFDA", ",", "display_inverse_images", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "U_inverse_dct", "=", "None", "\n", "", "return", "self", ".", "U_justFDA", ",", "U_inverse_dct", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.reconstruct": [[794, 803], ["U.T.dot", "U.dot"], "methods", ["None"], ["", "def", "reconstruct", "(", "self", ",", "X", ",", "scaler", "=", "None", ",", "using_howMany_projection_directions", "=", "None", ")", ":", "\n", "# X: rows are features and columns are samples", "\n", "        ", "if", "using_howMany_projection_directions", "!=", "None", ":", "\n", "            ", "U", "=", "self", ".", "U", "[", ":", ",", "0", ":", "using_howMany_projection_directions", "]", "\n", "", "else", ":", "\n", "            ", "U", "=", "self", ".", "U", "\n", "", "X_transformed", "=", "(", "U", ".", "T", ")", ".", "dot", "(", "X", ")", "\n", "X_reconstructed", "=", "U", ".", "dot", "(", "X_transformed", ")", "\n", "return", "X_reconstructed", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes": [[804, 830], ["numpy.asarray", "y.reshape.reshape.reshape", "numpy.column_stack", "list", "len", "range", "range", "set", "yX[].argsort", "numpy.empty", "numpy.vstack"], "methods", ["None"], ["", "def", "_separate_samples_of_classes", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# X --> rows: features, columns: samples", "\n", "# X_separated_classes --> rows: features, columns: samples", "\n", "        ", "X", "=", "X", ".", "T", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "yX", "=", "np", ".", "column_stack", "(", "(", "y", ",", "X", ")", ")", "\n", "yX", "=", "yX", "[", "yX", "[", ":", ",", "0", "]", ".", "argsort", "(", ")", "]", "# sort array (asscending) with regards to nth column --> https://gist.github.com/stevenvo/e3dad127598842459b68", "\n", "y", "=", "yX", "[", ":", ",", "0", "]", "\n", "X", "=", "yX", "[", ":", ",", "1", ":", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ")", ")", "\n", "number_of_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "dimension_of_data", "=", "X", ".", "shape", "[", "1", "]", "\n", "X_separated_classes", "=", "[", "np", ".", "empty", "(", "(", "0", ",", "dimension_of_data", ")", ")", "]", "*", "number_of_classes", "\n", "class_index", "=", "0", "\n", "index_start_new_class", "=", "0", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "for", "sample_index", "in", "range", "(", "1", ",", "n_samples", ")", ":", "\n", "            ", "if", "y", "[", "sample_index", "]", "!=", "y", "[", "sample_index", "-", "1", "]", "or", "sample_index", "==", "n_samples", "-", "1", ":", "\n", "                ", "X_separated_classes", "[", "class_index", "]", "=", "np", ".", "vstack", "(", "[", "X_separated_classes", "[", "class_index", "]", ",", "X", "[", "index_start_new_class", ":", "sample_index", ",", ":", "]", "]", ")", "\n", "index_start_new_class", "=", "sample_index", "\n", "class_index", "=", "class_index", "+", "1", "\n", "", "", "for", "class_index", "in", "range", "(", "number_of_classes", ")", ":", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "X_separated_classes", "[", "class_index", "]", "=", "X_class", ".", "T", "\n", "", "return", "X_separated_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA._separate_samples_of_classes_2": [[831, 862], ["numpy.asarray", "y.reshape.reshape.reshape", "numpy.column_stack", "list", "len", "range", "range", "set", "yX[].argsort", "numpy.empty", "numpy.empty", "numpy.vstack", "numpy.vstack"], "methods", ["None"], ["", "def", "_separate_samples_of_classes_2", "(", "self", ",", "X", ",", "X_quantized", ",", "y", ")", ":", "\n", "# X, X_quantized --> rows: features, columns: samples", "\n", "# X_separated_classes, X_quantized_separated_classes --> a list whose every element is --> rows: features, columns: samples", "\n", "        ", "X", "=", "X", ".", "T", "\n", "X_quantized", "=", "X_quantized", ".", "T", "\n", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "yX", "=", "np", ".", "column_stack", "(", "(", "y", ",", "X", ")", ")", "\n", "yX", "=", "yX", "[", "yX", "[", ":", ",", "0", "]", ".", "argsort", "(", ")", "]", "# sort array (asscending) with regards to nth column --> https://gist.github.com/stevenvo/e3dad127598842459b68", "\n", "y", "=", "yX", "[", ":", ",", "0", "]", "\n", "X", "=", "yX", "[", ":", ",", "1", ":", "]", "\n", "labels_of_classes", "=", "list", "(", "set", "(", "y", ")", ")", "\n", "number_of_classes", "=", "len", "(", "labels_of_classes", ")", "\n", "dimension_of_data", "=", "X", ".", "shape", "[", "1", "]", "\n", "X_separated_classes", "=", "[", "np", ".", "empty", "(", "(", "0", ",", "dimension_of_data", ")", ")", "]", "*", "number_of_classes", "\n", "X_quantized_separated_classes", "=", "[", "np", ".", "empty", "(", "(", "0", ",", "dimension_of_data", ")", ")", "]", "*", "number_of_classes", "\n", "class_index", "=", "0", "\n", "index_start_new_class", "=", "0", "\n", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "for", "sample_index", "in", "range", "(", "1", ",", "n_samples", ")", ":", "\n", "            ", "if", "y", "[", "sample_index", "]", "!=", "y", "[", "sample_index", "-", "1", "]", "or", "sample_index", "==", "n_samples", "-", "1", ":", "\n", "                ", "X_separated_classes", "[", "class_index", "]", "=", "np", ".", "vstack", "(", "[", "X_separated_classes", "[", "class_index", "]", ",", "X", "[", "index_start_new_class", ":", "sample_index", ",", ":", "]", "]", ")", "\n", "X_quantized_separated_classes", "[", "class_index", "]", "=", "np", ".", "vstack", "(", "[", "X_quantized_separated_classes", "[", "class_index", "]", ",", "X_quantized", "[", "index_start_new_class", ":", "sample_index", ",", ":", "]", "]", ")", "\n", "index_start_new_class", "=", "sample_index", "\n", "class_index", "=", "class_index", "+", "1", "\n", "", "", "for", "class_index", "in", "range", "(", "number_of_classes", ")", ":", "\n", "            ", "X_class", "=", "X_separated_classes", "[", "class_index", "]", "\n", "X_separated_classes", "[", "class_index", "]", "=", "X_class", ".", "T", "\n", "X_class", "=", "X_quantized_separated_classes", "[", "class_index", "]", "\n", "X_quantized_separated_classes", "[", "class_index", "]", "=", "X_class", ".", "T", "\n", "", "return", "X_separated_classes", ",", "X_quantized_separated_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_variable": [[863, 871], ["open", "pickle.dump", "open.close", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "save_variable", "(", "self", ",", "variable", ",", "name_of_variable", ",", "path_to_save", "=", "'./'", ")", ":", "\n", "# https://stackoverflow.com/questions/6568007/how-do-i-save-and-restore-multiple-variables-in-python", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_save", ")", ":", "# https://stackoverflow.com/questions/273192/how-can-i-create-a-directory-if-it-does-not-exist", "\n", "            ", "os", ".", "makedirs", "(", "path_to_save", ")", "\n", "", "file_address", "=", "path_to_save", "+", "name_of_variable", "+", "'.pckl'", "\n", "f", "=", "open", "(", "file_address", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "variable", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.save_np_array_to_txt": [[872, 880], ["numpy.set_printoptions", "os.path.exists", "os.makedirs", "open", "f.write", "numpy.array2string"], "methods", ["None"], ["", "def", "save_np_array_to_txt", "(", "self", ",", "variable", ",", "name_of_variable", ",", "path_to_save", "=", "'./'", ")", ":", "\n", "# https://stackoverflow.com/questions/22821460/numpy-save-2d-array-to-text-file/22822701", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path_to_save", ")", ":", "# https://stackoverflow.com/questions/273192/how-can-i-create-a-directory-if-it-does-not-exist", "\n", "            ", "os", ".", "makedirs", "(", "path_to_save", ")", "\n", "", "file_address", "=", "path_to_save", "+", "name_of_variable", "+", "'.txt'", "\n", "np", ".", "set_printoptions", "(", "threshold", "=", "np", ".", "inf", ",", "linewidth", "=", "np", ".", "inf", ")", "# turn off summarization, line-wrapping", "\n", "with", "open", "(", "file_address", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "np", ".", "array2string", "(", "variable", ",", "separator", "=", "', '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bghojogh_Quantized-Fisher-Discriminant-Analysis.QFDA_code.my_QFDA.My_QFDA.load_variable": [[881, 888], ["open", "pickle.load", "open.close"], "methods", ["None"], ["", "", "def", "load_variable", "(", "self", ",", "name_of_variable", ",", "path", "=", "'./'", ")", ":", "\n", "# https://stackoverflow.com/questions/6568007/how-do-i-save-and-restore-multiple-variables-in-python", "\n", "        ", "file_address", "=", "path", "+", "name_of_variable", "+", "'.pckl'", "\n", "f", "=", "open", "(", "file_address", ",", "'rb'", ")", "\n", "variable", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "variable", "", "", "", ""]]}