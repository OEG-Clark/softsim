{"home.repos.pwc.inspect_result.rezanmz_smgrl.src.inductive.inductive": [[20, 473], ["torch.device", "torch.device", "print", "utils.datasets.load_dataset", "print", "print", "numpy.setdiff1d", "data.subgraph", "print", "print", "utils.hierarchy.construct_hierarchy", "print", "print", "models.APPNP().to.train", "torch.optim.RMSprop", "torch.optim.RMSprop", "models.APPNP().to.train", "print", "print", "models.APPNP().to.load_state_dict", "models.APPNP().to.eval", "zip", "print", "print", "print", "print", "zip", "print", "print", "range", "print", "print", "len", "range", "print", "print", "len", "range", "print", "print", "torch.concat().detach().cpu().numpy", "torch.concat().detach().cpu().numpy", "torch.concat().detach().cpu().numpy", "torch.concat().detach().cpu().numpy", "torch.concat().detach().cpu().numpy", "torch.concat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "range", "print", "torch.where", "torch.where", "numpy.arange", "torch.tensor", "torch.tensor", "models.models.GraphSAGE().to", "models.APPNP().to.parameters", "torch.optim.RMSprop.zero_grad", "models.APPNP().to.", "torch.cross_entropy", "F.cross_entropy.backward", "torch.optim.RMSprop.step", "torch.cross_entropy", "data.edge_index[].t().detach().numpy", "enumerate", "utils.classify.classify", "len", "utils.classify.classify", "utils.classify.classify", "len", "utils.classify.classify", "utils.classify.classify", "len", "utils.classify.classify", "utils.classify.classify", "len", "utils.classify.classify", "torch.cuda.is_available", "torch.cuda.is_available", "int", "models.models.APPNP().to", "[].to", "models.APPNP().to.state_dict", "models.APPNP().to.", "gc.collect", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "enumerate", "set", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "subgraph[].append", "hierarchy[].append", "held_out_train_mask.append", "held_out_val_mask.append", "held_out_test_mask.append", "held_out_labels.append", "models.APPNP().to.", "gc.collect", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "enumerate", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "torch.concat().detach().cpu", "torch.concat().detach().cpu", "torch.concat().detach().cpu", "torch.concat().detach().cpu", "torch.concat().detach().cpu", "torch.concat().detach().cpu", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "torch.randperm", "torch.randperm", "models.models.GraphSAGE", "graph[].to", "data.edge_index[].t().detach", "[].add", "len", "len", "str", "utils.hierarchy.Node", "bool", "bool", "bool", "int", "graph[].to", "str", "range", "len", "data.subgraph.train_mask.detach().cpu().numpy", "data.subgraph.val_mask.detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "len", "data.subgraph.train_mask.detach().cpu().numpy", "data.subgraph.val_mask.detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "len", "data.subgraph.train_mask.detach().cpu().numpy", "data.subgraph.val_mask.detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "len", "data.subgraph.train_mask.detach().cpu().numpy", "data.subgraph.val_mask.detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "len", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.array", "numpy.array", "numpy.array", "len", "len", "models.models.APPNP", "[].to", "[].to", "len", "int", "[].add", "str", "torch.cat", "torch.cat", "data.x[].reshape().to", "data.train_y[].reshape().to", "data.val_y[].reshape().to", "[].detach().cpu", "len", "isinstance", "len", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "str", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "data.subgraph.train_y.argmax().detach().cpu().numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torch.concat().detach", "torch.concat().detach", "torch.concat().detach", "torch.concat().detach", "torch.concat().detach", "torch.concat().detach", "torch.cat().detach", "torch.cat().detach", "[].to", "[].to", "[].to", "[].to", "data.edge_index[].t", "numpy.argwhere", "int", "set", "set", "len", "data.subgraph.train_mask.detach().cpu", "data.subgraph.val_mask.detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.train_mask.detach().cpu", "data.subgraph.val_mask.detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.train_mask.detach().cpu", "data.subgraph.val_mask.detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.train_mask.detach().cpu", "data.subgraph.val_mask.detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "data.subgraph.test_mask.detach().cpu().numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.argwhere", "torch.tensor().to().reshape", "torch.tensor().to().reshape", "data.x[].reshape", "data.train_y[].reshape", "data.val_y[].reshape", "len", "[].detach", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "str", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "data.subgraph.train_y.argmax().detach().cpu", "str", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.cat", "torch.cat", "str", "int", "int", "data.subgraph.train_mask.detach", "data.subgraph.val_mask.detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.train_mask.detach", "data.subgraph.val_mask.detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.train_mask.detach", "data.subgraph.val_mask.detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.train_mask.detach", "data.subgraph.val_mask.detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "data.subgraph.test_mask.detach().cpu", "torch.tensor().to", "torch.tensor().to", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "data.subgraph.train_y.argmax().detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "data.subgraph.train_y.argmax", "torch.tensor", "torch.tensor", "data.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.train_y.argmax", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.train_y.argmax", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.train_y.argmax", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "data.subgraph.test_mask.detach", "torch.bitwise_or", "torch.bitwise_or", "torch.tensor", "torch.tensor", "len", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "data.subgraph.train_y.argmax", "len", "int", "numpy.argwhere", "numpy.array", "str"], "function", ["home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.load_dataset", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.construct_hierarchy", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify"], ["def", "inductive", "(", "\n", "dataset_name", ",", "\n", "held_out_fraction", ",", "\n", "coarsening_method", ",", "\n", "reduction_ratio", ",", "\n", "gnn_model", ",", "\n", "embedding_dim", ",", "\n", "full_graph_per_level", ",", "\n", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "# Load dataset", "\n", "print", "(", "'Loading dataset...'", ")", "\n", "data", ",", "num_classes", ",", "num_features", "=", "load_dataset", "(", "dataset_name", ")", "\n", "print", "(", "'Dataset loaded.'", ")", "\n", "print", "(", "'Removing held out nodes...'", ")", "\n", "# Shuffle and select held out nodes from the test set", "\n", "test_nodes", "=", "torch", ".", "where", "(", "data", ".", "test_mask", "==", "True", ")", "[", "0", "]", "\n", "held_out_nodes", "=", "test_nodes", "[", "torch", ".", "randperm", "(", "test_nodes", ".", "shape", "[", "0", "]", ")", "]", "[", ":", "int", "(", "\n", "held_out_fraction", "*", "test_nodes", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "# Remaining nodes", "\n", "remaining_nodes", "=", "np", ".", "setdiff1d", "(", "\n", "np", ".", "arange", "(", "data", ".", "num_nodes", ")", ",", "\n", "held_out_nodes", "\n", ")", "\n", "# Get the subgraph for remaining nodes", "\n", "remaining_data", "=", "data", ".", "subgraph", "(", "torch", ".", "tensor", "(", "remaining_nodes", ")", ")", "\n", "print", "(", "'Held out nodes removed.'", ")", "\n", "\n", "# Construct hierarchy", "\n", "print", "(", "'Constructing hierarchy...'", ")", "\n", "hierarchy", ",", "hierarchy_graphs", "=", "construct_hierarchy", "(", "\n", "remaining_data", ",", "\n", "coarsening_method", ",", "\n", "reduction_ratio", ",", "\n", ")", "\n", "print", "(", "'Hierarchy constructed.'", ")", "\n", "\n", "# Initialize the model", "\n", "if", "gnn_model", "==", "'GraphSAGE'", ":", "\n", "        ", "model", "=", "models", ".", "GraphSAGE", "(", "\n", "num_features", ",", "num_classes", ",", "embedding_dim", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "gnn_model", "==", "'APPNP'", ":", "\n", "        ", "model", "=", "models", ".", "APPNP", "(", "\n", "num_features", ",", "num_classes", ",", "embedding_dim", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Train the model on the coarsest graph", "\n", "", "print", "(", "'Training model on the coarsest graph...'", ")", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ")", "\n", "current_patience", "=", "EARLY_STOPPING_PATIENCE", "\n", "best_val_loss", "=", "None", "\n", "best_model", "=", "None", "\n", "model", ".", "train", "(", ")", "\n", "while", "True", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "logits", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "train_mask", "]", ",", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "train_y", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "train_mask", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "val_loss", "=", "F", ".", "cross_entropy", "(", "\n", "logits", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "val_mask", "]", ",", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "train_y", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "val_mask", "]", ")", "\n", "if", "best_val_loss", "is", "None", "or", "val_loss", "<", "best_val_loss", ":", "\n", "            ", "best_val_loss", "=", "val_loss", "\n", "best_model", "=", "model", ".", "state_dict", "(", ")", "\n", "current_patience", "=", "EARLY_STOPPING_PATIENCE", "\n", "", "else", ":", "\n", "            ", "current_patience", "-=", "1", "\n", "if", "current_patience", "==", "0", ":", "\n", "                ", "break", "\n", "", "", "", "print", "(", "'Training completed.'", ")", "\n", "# Evaluate", "\n", "print", "(", "'Generating embeddings for the remaining nodes (embedding1)...'", ")", "\n", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "level_nodes", ",", "level_graphs", "in", "zip", "(", "hierarchy", ",", "hierarchy_graphs", ")", ":", "\n", "        ", "if", "full_graph_per_level", ":", "\n", "            ", "_graphs", "=", "[", "level_graphs", "[", "-", "1", "]", "]", "\n", "", "elif", "not", "full_graph_per_level", "and", "len", "(", "level_graphs", ")", ">", "1", ":", "\n", "            ", "_graphs", "=", "level_graphs", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "_graphs", "=", "level_graphs", "\n", "", "for", "graph", "in", "_graphs", ":", "\n", "            ", "embedding", ",", "_", "=", "model", "(", "graph", "[", "'data'", "]", ".", "to", "(", "device", ")", ")", "\n", "# Release unused memory", "\n", "gc", ".", "collect", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "for", "node_idx", ",", "node", "in", "enumerate", "(", "graph", "[", "'nodes'", "]", ")", ":", "\n", "                ", "level_nodes", "[", "node", "]", ".", "embedding", "=", "embedding", "[", "node_idx", "]", "\n", "", "", "", "print", "(", "'Embeddings generated.'", ")", "\n", "\n", "# Find held out neighbors in the remaining nodes data", "\n", "print", "(", "'Adding held out nodes...'", ")", "\n", "held_out_connections_to_remaining_nodes", "=", "{", "}", "\n", "held_out_train_mask", "=", "[", "]", "\n", "held_out_val_mask", "=", "[", "]", "\n", "held_out_test_mask", "=", "[", "]", "\n", "held_out_labels", "=", "[", "]", "\n", "for", "held_out_node", "in", "held_out_nodes", ":", "\n", "        ", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "=", "{", "\n", "'neighbors'", ":", "set", "(", ")", ",", "'subgraph'", ":", "None", "}", "\n", "for", "e1", ",", "e2", "in", "data", ".", "edge_index", "[", ":", ",", "torch", ".", "bitwise_or", "(", "data", ".", "edge_index", "[", "0", ",", ":", "]", "==", "held_out_node", ",", "data", ".", "edge_index", "[", "1", ",", ":", "]", "==", "held_out_node", ")", "]", ".", "t", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ":", "\n", "            ", "if", "e1", "==", "held_out_node", "and", "e2", "in", "remaining_nodes", ":", "\n", "                ", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "[", "'neighbors'", "]", ".", "add", "(", "\n", "int", "(", "np", ".", "argwhere", "(", "remaining_nodes", "==", "e2", ")", ")", ")", "\n", "", "elif", "e2", "==", "held_out_node", "and", "e1", "in", "remaining_nodes", ":", "\n", "                ", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "[", "'neighbors'", "]", ".", "add", "(", "\n", "int", "(", "np", ".", "argwhere", "(", "remaining_nodes", "==", "e1", ")", ")", ")", "\n", "# Determine where the held out nodes are in the first level subgraphs (where they have most edges)", "\n", "", "", "num_connections", "=", "0", "\n", "for", "idx", ",", "subgraph", "in", "enumerate", "(", "hierarchy_graphs", "[", "0", "]", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "if", "len", "(", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "[", "'neighbors'", "]", "&", "set", "(", "subgraph", "[", "'nodes'", "]", ")", ")", ">", "num_connections", ":", "\n", "                ", "num_connections", "=", "len", "(", "\n", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "[", "'neighbors'", "]", "&", "set", "(", "subgraph", "[", "'nodes'", "]", ")", ")", "\n", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "[", "'subgraph'", "]", "=", "idx", "\n", "# Add the held out node to hierarchy", "\n", "", "", "if", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "[", "'subgraph'", "]", "is", "not", "None", ":", "\n", "            ", "if", "full_graph_per_level", ":", "\n", "                ", "subgraph", "=", "hierarchy_graphs", "[", "0", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "subgraph", "=", "hierarchy_graphs", "[", "0", "]", "[", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "[", "'subgraph'", "]", "]", "\n", "", "subgraph", "[", "'nodes'", "]", "=", "[", "str", "(", "node", ")", "for", "node", "in", "subgraph", "[", "'nodes'", "]", "]", "\n", "for", "neighbor", "in", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "[", "'neighbors'", "]", ":", "\n", "                ", "if", "str", "(", "neighbor", ")", "in", "subgraph", "[", "'nodes'", "]", ":", "\n", "                    ", "subgraph", "[", "'data'", "]", ".", "edge_index", "=", "torch", ".", "cat", "(", "(", "subgraph", "[", "'data'", "]", ".", "edge_index", ",", "torch", ".", "tensor", "(", "[", "\n", "len", "(", "subgraph", "[", "'nodes'", "]", ")", ",", "int", "(", "np", ".", "argwhere", "(", "\n", "np", ".", "array", "(", "subgraph", "[", "'nodes'", "]", ")", "==", "str", "(", "neighbor", ")", ")", ")", "\n", "]", ")", ".", "to", "(", "device", ")", ".", "reshape", "(", "2", ",", "-", "1", ")", ")", ",", "1", ")", "\n", "", "", "subgraph", "[", "'data'", "]", ".", "x", "=", "torch", ".", "cat", "(", "\n", "(", "subgraph", "[", "'data'", "]", ".", "x", ",", "data", ".", "x", "[", "held_out_node", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "to", "(", "device", ")", ")", ",", "0", ")", "\n", "subgraph", "[", "'data'", "]", ".", "train_y", "=", "torch", ".", "cat", "(", "\n", "(", "subgraph", "[", "'data'", "]", ".", "train_y", ",", "data", ".", "train_y", "[", "held_out_node", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "to", "(", "device", ")", ")", ",", "0", ")", "\n", "subgraph", "[", "'data'", "]", ".", "val_y", "=", "torch", ".", "cat", "(", "\n", "(", "subgraph", "[", "'data'", "]", ".", "val_y", ",", "data", ".", "val_y", "[", "held_out_node", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "to", "(", "device", ")", ")", ",", "0", ")", "\n", "subgraph", "[", "'nodes'", "]", ".", "append", "(", "f'held_out_{len(hierarchy[0])}'", ")", "\n", "hierarchy", "[", "0", "]", ".", "append", "(", "\n", "Node", "(", "\n", "f'held_out_{len(hierarchy[0])}'", ",", "\n", "parent", "=", "hierarchy", "[", "1", "]", "[", "held_out_connections_to_remaining_nodes", "[", "held_out_node", "]", "[", "'subgraph'", "]", "]", ",", "\n", ")", "\n", ")", "\n", "held_out_train_mask", ".", "append", "(", "bool", "(", "data", ".", "train_mask", "[", "held_out_node", "]", ")", ")", "\n", "held_out_val_mask", ".", "append", "(", "bool", "(", "data", ".", "val_mask", "[", "held_out_node", "]", ")", ")", "\n", "held_out_test_mask", ".", "append", "(", "bool", "(", "data", ".", "test_mask", "[", "held_out_node", "]", ")", ")", "\n", "held_out_labels", ".", "append", "(", "int", "(", "data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", "[", "\n", "held_out_node", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "", "", "print", "(", "'Held out nodes added.'", ")", "\n", "# Evaluate on the new hierarchy (including held out nodes)", "\n", "print", "(", "'Generating embeddings for the new hierarchy (embedding2)...'", ")", "\n", "for", "level_nodes", ",", "level_graphs", "in", "zip", "(", "hierarchy", ",", "hierarchy_graphs", ")", ":", "\n", "        ", "if", "full_graph_per_level", ":", "\n", "            ", "_graphs", "=", "[", "level_graphs", "[", "-", "1", "]", "]", "\n", "", "elif", "not", "full_graph_per_level", "and", "len", "(", "level_graphs", ")", ">", "1", ":", "\n", "            ", "_graphs", "=", "level_graphs", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "_graphs", "=", "level_graphs", "\n", "", "for", "graph", "in", "_graphs", ":", "\n", "            ", "embedding", ",", "_", "=", "model", "(", "graph", "[", "'data'", "]", ".", "to", "(", "device", ")", ")", "\n", "# Release unused memory", "\n", "gc", ".", "collect", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "for", "node_idx", ",", "node", "in", "enumerate", "(", "graph", "[", "'nodes'", "]", ")", ":", "\n", "                ", "if", "isinstance", "(", "node", ",", "str", ")", "and", "'held_out_'", "in", "node", ":", "\n", "                    ", "level_nodes", "[", "int", "(", "node", "[", "len", "(", "'held_out_'", ")", ":", "]", ")", "\n", "]", ".", "embedding2", "=", "embedding", "[", "node_idx", "]", "\n", "", "else", ":", "\n", "                    ", "level_nodes", "[", "int", "(", "node", ")", "]", ".", "embedding2", "=", "embedding", "[", "node_idx", "]", "\n", "", "", "", "", "print", "(", "'Embeddings generated.'", ")", "\n", "results", "=", "{", "}", "\n", "# Classify training nodes using embedding2", "\n", "print", "(", "'Classifying training nodes using embedding2...'", ")", "\n", "results", "[", "'training_nodes_embedding2'", "]", "=", "{", "}", "\n", "training_nodes", "=", "[", "node", "for", "node", "in", "hierarchy", "[", "0", "]", "\n", "if", "node", ".", "embedding", "is", "not", "None", "]", "\n", "classifiers", "=", "{", "\n", "aggregation_method", ":", "None", "\n", "for", "aggregation_method", "in", "AGGREGATION_METHODS", "\n", "}", "\n", "classifiers", "=", "{", "**", "classifiers", ",", "**", "{", "\n", "'level'", "+", "str", "(", "level", ")", ":", "None", "\n", "for", "level", "in", "range", "(", "len", "(", "hierarchy", ")", ")", "\n", "}", "}", "\n", "for", "aggregation_method", "in", "AGGREGATION_METHODS", ":", "\n", "        ", "pred_labels", ",", "classifier", "=", "classify", "(", "\n", "training_nodes", ",", "\n", "aggregation_method", "=", "aggregation_method", ",", "\n", "level", "=", "None", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "remaining_data", ".", "train_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "val_mask", "=", "remaining_data", ".", "val_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "=", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "embedding_type", "=", "'embedding2'", ",", "\n", "return_model", "=", "True", "\n", ")", "\n", "classifiers", "[", "aggregation_method", "]", "=", "classifier", "\n", "results", "[", "'training_nodes_embedding2'", "]", "[", "aggregation_method", "]", "=", "{", "\n", "'accuracy'", ":", "accuracy_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", ")", ",", "\n", "'f1_macro'", ":", "f1_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "average", "=", "'macro'", "\n", ")", ",", "\n", "'f1_micro'", ":", "f1_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "average", "=", "'micro'", "\n", ")", ",", "\n", "}", "\n", "", "for", "level", "in", "range", "(", "len", "(", "hierarchy", ")", ")", ":", "\n", "        ", "pred_labels", ",", "classifier", "=", "classify", "(", "\n", "training_nodes", ",", "\n", "aggregation_method", "=", "'level'", ",", "\n", "level", "=", "level", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "remaining_data", ".", "train_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "val_mask", "=", "remaining_data", ".", "val_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "=", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "embedding_type", "=", "'embedding2'", ",", "\n", "return_model", "=", "True", ",", "\n", ")", "\n", "classifiers", "[", "'level'", "+", "str", "(", "level", ")", "]", "=", "classifier", "\n", "results", "[", "'training_nodes_embedding2'", "]", "[", "f'level{level}'", "]", "=", "{", "\n", "'accuracy'", ":", "accuracy_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", ")", ",", "\n", "'f1_macro'", ":", "f1_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "average", "=", "'macro'", "\n", ")", ",", "\n", "'f1_micro'", ":", "f1_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "average", "=", "'micro'", "\n", ")", ",", "\n", "}", "\n", "", "print", "(", "'Classification completed.'", ")", "\n", "\n", "# Classify training nodes using embedding1", "\n", "print", "(", "'Classifying training nodes using embedding1...'", ")", "\n", "results", "[", "'training_nodes_embedding1'", "]", "=", "{", "}", "\n", "training_nodes", "=", "[", "node", "for", "node", "in", "hierarchy", "[", "0", "]", "\n", "if", "node", ".", "embedding", "is", "not", "None", "]", "\n", "results", "[", "'num_training_nodes'", "]", "=", "len", "(", "training_nodes", ")", "\n", "for", "aggregation_method", "in", "AGGREGATION_METHODS", ":", "\n", "        ", "pred_labels", "=", "classify", "(", "\n", "training_nodes", ",", "\n", "aggregation_method", "=", "aggregation_method", ",", "\n", "level", "=", "None", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "remaining_data", ".", "train_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "val_mask", "=", "remaining_data", ".", "val_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "=", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "embedding_type", "=", "'embedding1'", ",", "\n", "model", "=", "classifiers", "[", "aggregation_method", "]", "\n", ")", "\n", "results", "[", "'training_nodes_embedding1'", "]", "[", "aggregation_method", "]", "=", "{", "\n", "'accuracy'", ":", "accuracy_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", ")", ",", "\n", "'f1_macro'", ":", "f1_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "average", "=", "'macro'", "\n", ")", ",", "\n", "'f1_micro'", ":", "f1_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "average", "=", "'micro'", "\n", ")", ",", "\n", "}", "\n", "", "for", "level", "in", "range", "(", "len", "(", "hierarchy", ")", ")", ":", "\n", "        ", "pred_labels", "=", "classify", "(", "\n", "training_nodes", ",", "\n", "aggregation_method", "=", "'level'", ",", "\n", "level", "=", "level", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "remaining_data", ".", "train_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "val_mask", "=", "remaining_data", ".", "val_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "=", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "embedding_type", "=", "'embedding1'", ",", "\n", "model", "=", "classifiers", "[", "'level'", "+", "str", "(", "level", ")", "]", "\n", ")", "\n", "results", "[", "'training_nodes_embedding1'", "]", "[", "f'level{level}'", "]", "=", "{", "\n", "'accuracy'", ":", "accuracy_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", ")", ",", "\n", "'f1_macro'", ":", "f1_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "average", "=", "'macro'", "\n", ")", ",", "\n", "'f1_micro'", ":", "f1_score", "(", "\n", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "\n", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "pred_labels", "[", "remaining_data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "average", "=", "'micro'", "\n", ")", ",", "\n", "}", "\n", "", "print", "(", "'Classification completed.'", ")", "\n", "\n", "# Classify held out nodes using embedding2", "\n", "print", "(", "'Classifying held out nodes using embedding2...'", ")", "\n", "results", "[", "'held_out_nodes_embedding2'", "]", "=", "{", "}", "\n", "held_out_nodes", "=", "[", "node", "for", "node", "in", "hierarchy", "[", "0", "]", "\n", "if", "node", ".", "embedding2", "is", "not", "None", "and", "node", ".", "embedding", "is", "None", "]", "\n", "results", "[", "'num_held_out_nodes'", "]", "=", "len", "(", "held_out_nodes", ")", "\n", "for", "aggregation_method", "in", "AGGREGATION_METHODS", ":", "\n", "        ", "pred_labels", "=", "classify", "(", "\n", "held_out_nodes", ",", "\n", "aggregation_method", "=", "aggregation_method", ",", "\n", "level", "=", "None", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "np", ".", "array", "(", "held_out_train_mask", ")", ",", "\n", "val_mask", "=", "np", ".", "array", "(", "held_out_val_mask", ")", ",", "\n", "labels", "=", "np", ".", "array", "(", "held_out_labels", ")", ",", "\n", "embedding_type", "=", "'embedding2'", ",", "\n", "model", "=", "classifiers", "[", "aggregation_method", "]", ",", "\n", ")", "\n", "results", "[", "'held_out_nodes_embedding2'", "]", "[", "aggregation_method", "]", "=", "{", "\n", "'accuracy'", ":", "accuracy_score", "(", "\n", "np", ".", "array", "(", "held_out_labels", ")", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "pred_labels", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", "\n", ")", ",", "\n", "'f1_macro'", ":", "f1_score", "(", "\n", "np", ".", "array", "(", "held_out_labels", ")", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "pred_labels", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "average", "=", "'macro'", "\n", ")", ",", "\n", "'f1_micro'", ":", "f1_score", "(", "\n", "np", ".", "array", "(", "held_out_labels", ")", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "pred_labels", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "average", "=", "'micro'", "\n", ")", ",", "\n", "}", "\n", "", "for", "level", "in", "range", "(", "len", "(", "hierarchy", ")", ")", ":", "\n", "        ", "pred_labels", "=", "classify", "(", "\n", "held_out_nodes", ",", "\n", "aggregation_method", "=", "'level'", ",", "\n", "level", "=", "level", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "np", ".", "array", "(", "held_out_train_mask", ")", ",", "\n", "val_mask", "=", "np", ".", "array", "(", "held_out_val_mask", ")", ",", "\n", "labels", "=", "np", ".", "array", "(", "held_out_labels", ")", ",", "\n", "embedding_type", "=", "'embedding2'", ",", "\n", "model", "=", "classifiers", "[", "'level'", "+", "str", "(", "level", ")", "]", ",", "\n", ")", "\n", "results", "[", "'held_out_nodes_embedding2'", "]", "[", "f'level{level}'", "]", "=", "{", "\n", "'accuracy'", ":", "accuracy_score", "(", "\n", "np", ".", "array", "(", "held_out_labels", ")", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "pred_labels", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", "\n", ")", ",", "\n", "'f1_macro'", ":", "f1_score", "(", "\n", "np", ".", "array", "(", "held_out_labels", ")", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "pred_labels", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "average", "=", "'macro'", "\n", ")", ",", "\n", "'f1_micro'", ":", "f1_score", "(", "\n", "np", ".", "array", "(", "held_out_labels", ")", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "pred_labels", "[", "np", ".", "array", "(", "held_out_test_mask", ")", "]", ",", "\n", "average", "=", "'micro'", "\n", ")", ",", "\n", "}", "\n", "", "print", "(", "'Classification completed.'", ")", "\n", "\n", "# Classify all nodes using embedding2", "\n", "print", "(", "'Classifying all nodes using embedding2...'", ")", "\n", "results", "[", "'overall_embedding2'", "]", "=", "{", "}", "\n", "train_mask", "=", "torch", ".", "concat", "(", "(", "remaining_data", ".", "train_mask", ",", "torch", ".", "tensor", "(", "\n", "held_out_train_mask", ")", ")", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "val_mask", "=", "torch", ".", "concat", "(", "(", "remaining_data", ".", "val_mask", ",", "torch", ".", "tensor", "(", "\n", "held_out_val_mask", ")", ")", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_mask", "=", "torch", ".", "concat", "(", "(", "remaining_data", ".", "test_mask", ",", "torch", ".", "tensor", "(", "\n", "held_out_test_mask", ")", ")", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "(", "remaining_data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ",", "torch", ".", "tensor", "(", "\n", "held_out_labels", ")", ")", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "aggregation_method", "in", "AGGREGATION_METHODS", ":", "\n", "        ", "pred_labels", "=", "classify", "(", "\n", "hierarchy", "[", "0", "]", ",", "\n", "aggregation_method", "=", "aggregation_method", ",", "\n", "level", "=", "None", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "train_mask", ",", "\n", "val_mask", "=", "val_mask", ",", "\n", "labels", "=", "labels", ",", "\n", "embedding_type", "=", "'embedding2'", ",", "\n", "model", "=", "classifiers", "[", "aggregation_method", "]", ",", "\n", ")", "\n", "results", "[", "'overall_embedding2'", "]", "[", "aggregation_method", "]", "=", "{", "\n", "'accuracy'", ":", "accuracy_score", "(", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ")", ",", "\n", "'f1_macro'", ":", "f1_score", "(", "\n", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "\n", "average", "=", "'macro'", "\n", ")", ",", "\n", "'f1_micro'", ":", "f1_score", "(", "\n", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "\n", "average", "=", "'micro'", "\n", ")", ",", "\n", "}", "\n", "", "for", "level", "in", "range", "(", "len", "(", "hierarchy", ")", ")", ":", "\n", "        ", "pred_labels", "=", "classify", "(", "\n", "hierarchy", "[", "0", "]", ",", "\n", "aggregation_method", "=", "'level'", ",", "\n", "level", "=", "level", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "train_mask", ",", "\n", "val_mask", "=", "val_mask", ",", "\n", "labels", "=", "labels", ",", "\n", "embedding_type", "=", "'embedding2'", ",", "\n", "model", "=", "classifiers", "[", "'level'", "+", "str", "(", "level", ")", "]", ",", "\n", ")", "\n", "results", "[", "'overall_embedding2'", "]", "[", "f'level{level}'", "]", "=", "{", "\n", "'accuracy'", ":", "accuracy_score", "(", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ")", ",", "\n", "'f1_macro'", ":", "f1_score", "(", "\n", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "\n", "average", "=", "'macro'", "\n", ")", ",", "\n", "'f1_micro'", ":", "f1_score", "(", "\n", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "\n", "average", "=", "'micro'", "\n", ")", ",", "\n", "}", "\n", "", "print", "(", "'Classification completed.'", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.src.dmgrl.dmgrl": [[21, 185], ["print", "torch.device", "torch.device", "utils.datasets.load_dataset", "data.train_mask.detach().cpu().numpy", "data.val_mask.detach().cpu().numpy", "data.test_mask.detach().cpu().numpy", "data.train_y.argmax().detach().cpu().numpy", "utils.hierarchy.construct_hierarchy", "gc.collect", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "tqdm.tqdm", "range", "range", "models.APPNP().to.train", "torch.optim.RMSprop", "torch.optim.RMSprop", "models.APPNP().to.train", "models.APPNP().to.load_state_dict", "models.APPNP().to.eval", "zip", "range", "tqdm.tqdm.set_description", "len", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.std", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.std", "torch.cuda.is_available", "torch.cuda.is_available", "data.train_mask.detach().cpu", "data.val_mask.detach().cpu", "data.test_mask.detach().cpu", "data.train_y.argmax().detach().cpu", "models.models.GraphSAGE().to", "models.APPNP().to.parameters", "torch.optim.RMSprop.zero_grad", "models.APPNP().to.", "torch.cross_entropy", "F.cross_entropy.backward", "torch.optim.RMSprop.step", "torch.cross_entropy", "len", "utils.classify.classify", "[].append", "[].append", "[].append", "utils.classify.classify", "[].append", "[].append", "[].append", "range", "models.models.APPNP().to", "[].to", "models.APPNP().to.state_dict", "models.APPNP().to.", "gc.collect", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "enumerate", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "data.train_mask.detach", "data.val_mask.detach", "data.test_mask.detach", "data.train_y.argmax().detach", "len", "models.models.GraphSAGE", "graph[].to", "len", "len", "numpy.mean", "models.models.APPNP", "[].to", "[].to", "len", "data.train_y.argmax", "[].to", "[].to", "[].to", "[].to"], "function", ["home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.load_dataset", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.construct_hierarchy", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify"], ["def", "dmgrl", "(", "\n", "dataset_name", ",", "\n", "gnn_model", ",", "\n", "runs", ",", "\n", "embedding_dim", ",", "\n", "coarsening_method", ",", "\n", "reduction_ratio", ",", "\n", "full_graph_per_level", "\n", ")", ":", "\n", "    ", "print", "(", "\n", "f'DMGRL - Dataset: {dataset_name}, GNN Model: {gnn_model}, Embedding Dim: {embedding_dim}, Reduction Ratio: {reduction_ratio}, Full Graph Per Level: {full_graph_per_level}'", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "# Load dataset", "\n", "data", ",", "num_classes", ",", "num_features", "=", "load_dataset", "(", "dataset_name", ")", "\n", "train_mask", "=", "data", ".", "train_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "val_mask", "=", "data", ".", "val_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_mask", "=", "data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# Construct hierarchy", "\n", "hierarchy", ",", "hierarchy_graphs", "=", "construct_hierarchy", "(", "\n", "data", ",", "\n", "coarsening_method", ",", "\n", "reduction_ratio", ",", "\n", ")", "\n", "# Release unused memory", "\n", "gc", ".", "collect", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "scores", "=", "{", "aggregation_method", ":", "{", "\n", "'accuracy'", ":", "[", "]", ",", "\n", "'f1_macro'", ":", "[", "]", ",", "\n", "'f1_micro'", ":", "[", "]", ",", "\n", "}", "for", "aggregation_method", "in", "AGGREGATION_METHODS", "}", "\n", "\n", "scores", "=", "{", "**", "scores", ",", "**", "{", "f'level{level}'", ":", "{", "\n", "'accuracy'", ":", "[", "]", ",", "\n", "'f1_macro'", ":", "[", "]", ",", "\n", "'f1_micro'", ":", "[", "]", ",", "\n", "}", "for", "level", "in", "range", "(", "len", "(", "hierarchy", ")", ")", "}", "}", "\n", "\n", "pbar", "=", "tqdm", "(", "range", "(", "runs", ")", ",", "total", "=", "runs", ")", "\n", "for", "run", "in", "pbar", ":", "\n", "# Initialize model", "\n", "        ", "if", "gnn_model", "==", "'GraphSAGE'", ":", "\n", "            ", "model", "=", "models", ".", "GraphSAGE", "(", "\n", "num_features", ",", "num_classes", ",", "embedding_dim", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "gnn_model", "==", "'APPNP'", ":", "\n", "            ", "model", "=", "models", ".", "APPNP", "(", "\n", "num_features", ",", "num_classes", ",", "embedding_dim", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Train model on the coarsest graph", "\n", "", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ")", "\n", "current_patience", "=", "EARLY_STOPPING_PATIENCE", "\n", "best_val_loss", "=", "None", "\n", "best_model", "=", "None", "\n", "model", ".", "train", "(", ")", "\n", "while", "True", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "logits", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "train_mask", "]", ",", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "train_y", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "train_mask", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "val_loss", "=", "F", ".", "cross_entropy", "(", "\n", "logits", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "val_mask", "]", ",", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "val_y", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "to", "(", "device", ")", ".", "val_mask", "]", ")", "\n", "if", "best_val_loss", "is", "None", "or", "val_loss", "<", "best_val_loss", ":", "\n", "                ", "best_val_loss", "=", "val_loss", "\n", "best_model", "=", "model", ".", "state_dict", "(", ")", "\n", "current_patience", "=", "EARLY_STOPPING_PATIENCE", "\n", "", "else", ":", "\n", "                ", "current_patience", "-=", "1", "\n", "if", "current_patience", "==", "0", ":", "\n", "                    ", "break", "\n", "# Evaluate", "\n", "", "", "", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "level_nodes", ",", "level_graphs", "in", "zip", "(", "hierarchy", ",", "hierarchy_graphs", ")", ":", "\n", "            ", "if", "full_graph_per_level", ":", "\n", "                ", "_graphs", "=", "[", "level_graphs", "[", "-", "1", "]", "]", "\n", "", "elif", "not", "full_graph_per_level", "and", "len", "(", "level_graphs", ")", ">", "1", ":", "\n", "                ", "_graphs", "=", "level_graphs", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "_graphs", "=", "level_graphs", "\n", "", "for", "graph", "in", "_graphs", ":", "\n", "                ", "embedding", ",", "_", "=", "model", "(", "graph", "[", "'data'", "]", ".", "to", "(", "device", ")", ")", "\n", "# Release unused memory", "\n", "gc", ".", "collect", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "for", "node_idx", ",", "node", "in", "enumerate", "(", "graph", "[", "'nodes'", "]", ")", ":", "\n", "                    ", "level_nodes", "[", "node", "]", ".", "embedding", "=", "embedding", "[", "node_idx", "]", "\n", "\n", "# Classify", "\n", "", "", "", "for", "level", "in", "range", "(", "len", "(", "hierarchy", ")", ")", ":", "\n", "            ", "pred_labels", "=", "classify", "(", "\n", "first_level_nodes", "=", "hierarchy", "[", "0", "]", ",", "\n", "aggregation_method", "=", "'level'", ",", "\n", "level", "=", "level", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "train_mask", ",", "\n", "val_mask", "=", "val_mask", ",", "\n", "labels", "=", "labels", ",", "\n", ")", "\n", "scores", "[", "f'level{level}'", "]", "[", "'accuracy'", "]", ".", "append", "(", "\n", "accuracy_score", "(", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ")", ")", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_macro'", "]", ".", "append", "(", "\n", "f1_score", "(", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_micro'", "]", ".", "append", "(", "\n", "f1_score", "(", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "average", "=", "'micro'", ")", ")", "\n", "\n", "", "for", "aggregation_method", "in", "AGGREGATION_METHODS", ":", "\n", "            ", "pred_labels", "=", "classify", "(", "\n", "first_level_nodes", "=", "hierarchy", "[", "0", "]", ",", "\n", "aggregation_method", "=", "aggregation_method", ",", "\n", "level", "=", "None", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_levels", "=", "len", "(", "hierarchy", ")", ",", "\n", "train_mask", "=", "train_mask", ",", "\n", "val_mask", "=", "val_mask", ",", "\n", "labels", "=", "labels", ",", "\n", ")", "\n", "scores", "[", "aggregation_method", "]", "[", "'accuracy'", "]", ".", "append", "(", "\n", "accuracy_score", "(", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ")", ")", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_macro'", "]", ".", "append", "(", "\n", "f1_score", "(", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_micro'", "]", ".", "append", "(", "\n", "f1_score", "(", "labels", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "average", "=", "'micro'", ")", ")", "\n", "\n", "", "pbar", ".", "set_description", "(", "\n", "f'Run {run + 1}/{runs} - F1 Macro (Post-Hoc-Learned aggregation): {np.mean(scores[\"post_hoc_learned_weights\"][\"f1_macro\"]):.3f}'", ")", "\n", "\n", "", "for", "level", "in", "range", "(", "len", "(", "hierarchy", ")", ")", ":", "\n", "        ", "scores", "[", "f'level{level}'", "]", "[", "'accuracy_avg'", "]", "=", "np", ".", "mean", "(", "\n", "scores", "[", "f'level{level}'", "]", "[", "'accuracy'", "]", ")", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_macro_avg'", "]", "=", "np", ".", "mean", "(", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_macro'", "]", ")", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_micro_avg'", "]", "=", "np", ".", "mean", "(", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_micro'", "]", ")", "\n", "\n", "scores", "[", "f'level{level}'", "]", "[", "'accuracy_std'", "]", "=", "np", ".", "std", "(", "\n", "scores", "[", "f'level{level}'", "]", "[", "'accuracy'", "]", ")", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_macro_std'", "]", "=", "np", ".", "std", "(", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_macro'", "]", ")", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_micro_std'", "]", "=", "np", ".", "std", "(", "\n", "scores", "[", "f'level{level}'", "]", "[", "'f1_micro'", "]", ")", "\n", "\n", "", "for", "aggregation_method", "in", "AGGREGATION_METHODS", ":", "\n", "        ", "scores", "[", "aggregation_method", "]", "[", "'accuracy_avg'", "]", "=", "np", ".", "mean", "(", "\n", "scores", "[", "aggregation_method", "]", "[", "'accuracy'", "]", ")", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_macro_avg'", "]", "=", "np", ".", "mean", "(", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_macro'", "]", ")", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_micro_avg'", "]", "=", "np", ".", "mean", "(", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_micro'", "]", ")", "\n", "\n", "scores", "[", "aggregation_method", "]", "[", "'accuracy_std'", "]", "=", "np", ".", "std", "(", "\n", "scores", "[", "aggregation_method", "]", "[", "'accuracy'", "]", ")", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_macro_std'", "]", "=", "np", ".", "std", "(", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_macro'", "]", ")", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_micro_std'", "]", "=", "np", ".", "std", "(", "\n", "scores", "[", "aggregation_method", "]", "[", "'f1_micro'", "]", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.src.random_graphs.baseline_runtime": [[16, 56], ["print", "utils.datasets.random_graph", "torch.optim.RMSprop", "torch.optim.RMSprop", "time.time", "models.APPNP.train", "tqdm.tqdm", "time.time", "print", "models.models.GraphSAGE", "models.APPNP.parameters", "range", "torch.optim.RMSprop.zero_grad", "models.APPNP.", "torch.cross_entropy", "F.cross_entropy.backward", "torch.optim.RMSprop.step", "models.models.APPNP"], "function", ["home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.random_graph"], ["def", "baseline_runtime", "(", "\n", "graph_type", ",", "\n", "num_nodes", ",", "\n", "gnn_model", ",", "\n", "embedding_dim", ",", "\n", "num_epochs", ",", "\n", ")", ":", "\n", "    ", "print", "(", "\n", "f'Baseline - GNN Model: {gnn_model}, Graph Type: {graph_type}, Num Nodes: {num_nodes}'", "\n", ")", "\n", "# Load dataset", "\n", "data", ",", "num_classes", ",", "num_features", "=", "random_graph", "(", "\n", "type", "=", "graph_type", ",", "size", "=", "num_nodes", ")", "\n", "\n", "if", "gnn_model", "==", "'GraphSAGE'", ":", "\n", "        ", "model", "=", "models", ".", "GraphSAGE", "(", "num_features", ",", "num_classes", ",", "embedding_dim", ")", "\n", "", "elif", "gnn_model", "==", "'APPNP'", ":", "\n", "        ", "model", "=", "models", ".", "APPNP", "(", "num_features", ",", "num_classes", ",", "embedding_dim", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "# Time the training", "\n", "start", "=", "time", "(", ")", "\n", "\n", "# Train model", "\n", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "num_epochs", ")", ",", "total", "=", "num_epochs", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", "[", "data", ".", "train_mask", "]", ",", "\n", "data", ".", "train_y", "[", "data", ".", "train_mask", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "end", "=", "time", "(", ")", "\n", "\n", "baseline_time", "=", "end", "-", "start", "\n", "print", "(", "f'Baseline Runtime: {baseline_time}'", ")", "\n", "return", "{", "\n", "'time'", ":", "baseline_time", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.src.random_graphs.dmgrl_runtime": [[59, 135], ["print", "utils.datasets.random_graph", "time.time", "utils.hierarchy.construct_hierarchy", "time.time", "torch.optim.RMSprop", "torch.optim.RMSprop", "time.time", "models.APPNP.train", "torch.optim.RMSprop", "torch.optim.RMSprop", "tqdm.tqdm", "time.time", "tqdm.tqdm", "models.APPNP.eval", "models.models.GraphSAGE", "models.APPNP.parameters", "models.APPNP.parameters", "range", "torch.optim.RMSprop.zero_grad", "models.APPNP.", "torch.cross_entropy", "F.cross_entropy.backward", "torch.optim.RMSprop.step", "enumerate", "enumerate", "models.models.APPNP", "len", "len", "time.time", "models.APPNP.", "time.time", "[].append", "gc.collect", "tqdm.tqdm.set_description", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.random_graph", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.construct_hierarchy"], ["", "def", "dmgrl_runtime", "(", "\n", "graph_type", ",", "\n", "num_nodes", ",", "\n", "gnn_model", ",", "\n", "embedding_dim", ",", "\n", "num_epochs", ",", "\n", "reduction_ratio", ",", "\n", "coarsening_method", ",", "\n", ")", ":", "\n", "    ", "print", "(", "\n", "f'DMGRL - GNN Model: {gnn_model}, Graph Type: {graph_type}, Num Nodes: {num_nodes}'", "\n", ")", "\n", "# Load dataset", "\n", "data", ",", "num_classes", ",", "num_features", "=", "random_graph", "(", "\n", "type", "=", "graph_type", ",", "size", "=", "num_nodes", ")", "\n", "\n", "# Construct hierarchy", "\n", "start", "=", "time", "(", ")", "\n", "hierarchy", ",", "hierarchy_graphs", "=", "construct_hierarchy", "(", "\n", "data", ",", "\n", "coarsening_method", ",", "\n", "reduction_ratio", ",", "\n", ")", "\n", "end", "=", "time", "(", ")", "\n", "\n", "results", "=", "{", "\n", "'hierarchy_construction_time'", ":", "end", "-", "start", ",", "\n", "'coarse_level_training'", ":", "None", ",", "\n", "'hierarchy_eval'", ":", "{", "\n", "f'level{i}'", ":", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "hierarchy", ")", ")", "\n", "}", "\n", "}", "\n", "\n", "if", "gnn_model", "==", "'GraphSAGE'", ":", "\n", "        ", "model", "=", "models", ".", "GraphSAGE", "(", "num_features", ",", "num_classes", ",", "embedding_dim", ")", "\n", "", "elif", "gnn_model", "==", "'APPNP'", ":", "\n", "        ", "model", "=", "models", ".", "APPNP", "(", "num_features", ",", "num_classes", ",", "embedding_dim", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "# Time the training", "\n", "start", "=", "time", "(", ")", "\n", "\n", "# Train the model on the coarsest level", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "num_epochs", ")", ",", "total", "=", "num_epochs", ",", "desc", "=", "'Training'", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "train_mask", "]", ",", "\n", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "train_y", "[", "hierarchy_graphs", "[", "-", "1", "]", "[", "0", "]", "[", "'data'", "]", ".", "train_mask", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "end", "=", "time", "(", ")", "\n", "results", "[", "'coarse_level_training'", "]", "=", "end", "-", "start", "\n", "\n", "# Evaluate", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "hierarchy_graphs", ")", ",", "\n", "desc", "=", "'Evaluating'", ",", "total", "=", "len", "(", "hierarchy", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "level", ",", "level_graphs", "in", "pbar", ":", "\n", "        ", "if", "len", "(", "level_graphs", ")", ">", "1", ":", "\n", "            ", "_graphs", "=", "level_graphs", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "_graphs", "=", "level_graphs", "\n", "", "for", "i", ",", "graph", "in", "enumerate", "(", "_graphs", ")", ":", "\n", "            ", "start", "=", "time", "(", ")", "\n", "model", "(", "graph", "[", "'data'", "]", ")", "\n", "end", "=", "time", "(", ")", "\n", "results", "[", "'hierarchy_eval'", "]", "[", "f'level{level}'", "]", ".", "append", "(", "end", "-", "start", ")", "\n", "# Release unused memory", "\n", "gc", ".", "collect", "(", ")", "\n", "pbar", ".", "set_description", "(", "\n", "f'Evaluating - Level {level}, Graph {i}/{len(_graphs)}'", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.src.baseline.baseline": [[17, 94], ["print", "utils.datasets.load_dataset", "torch.device", "torch.device", "data.to.to", "tqdm.tqdm", "numpy.std", "numpy.std", "numpy.std", "range", "torch.optim.RMSprop", "torch.optim.RMSprop", "models.APPNP().to.train", "models.APPNP().to.load_state_dict", "models.APPNP().to.eval", "models.APPNP().to.", "logits.argmax().detach().cpu().numpy", "data.to.train_y.argmax().detach().cpu().numpy", "data.to.test_mask.detach().cpu().numpy", "scores[].append", "scores[].append", "scores[].append", "tqdm.tqdm.set_description", "sum", "sum", "sum", "torch.cuda.is_available", "torch.cuda.is_available", "models.GraphSAGE().to", "models.APPNP().to.parameters", "torch.optim.RMSprop.zero_grad", "models.APPNP().to.", "torch.cross_entropy", "F.cross_entropy.backward", "torch.optim.RMSprop.step", "torch.cross_entropy", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "models.APPNP().to", "models.APPNP().to.state_dict", "logits.argmax().detach().cpu", "data.to.train_y.argmax().detach().cpu", "data.to.test_mask.detach().cpu", "models.GraphSAGE", "numpy.mean", "models.APPNP", "logits.argmax().detach", "data.to.train_y.argmax().detach", "data.to.test_mask.detach", "logits.argmax", "data.to.train_y.argmax"], "function", ["home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.load_dataset"], ["def", "baseline", "(", "\n", "dataset_name", ",", "\n", "gnn_model", ",", "\n", "runs", ",", "\n", "embedding_dim", ",", "\n", ")", ":", "\n", "    ", "print", "(", "\n", "f'Baseline - Dataset: {dataset_name}, GNN Model: {gnn_model}, Embedding Dim: {embedding_dim}'", ")", "\n", "\n", "# Load dataset", "\n", "data", ",", "num_classes", ",", "num_features", "=", "load_dataset", "(", "dataset_name", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "\n", "scores", "=", "{", "\n", "'accuracy'", ":", "[", "]", ",", "\n", "'f1_macro'", ":", "[", "]", ",", "\n", "'f1_micro'", ":", "[", "]", ",", "\n", "}", "\n", "pbar", "=", "tqdm", "(", "range", "(", "runs", ")", ",", "total", "=", "runs", ")", "\n", "for", "run", "in", "pbar", ":", "\n", "# Initialize model", "\n", "        ", "if", "gnn_model", "==", "'GraphSAGE'", ":", "\n", "            ", "model", "=", "models", ".", "GraphSAGE", "(", "\n", "num_features", ",", "num_classes", ",", "embedding_dim", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "gnn_model", "==", "'APPNP'", ":", "\n", "            ", "model", "=", "models", ".", "APPNP", "(", "\n", "num_features", ",", "num_classes", ",", "embedding_dim", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "# Train model", "\n", "current_patience", "=", "EARLY_STOPPING_PATIENCE", "\n", "best_val_loss", "=", "None", "\n", "best_model", "=", "None", "\n", "model", ".", "train", "(", ")", "\n", "while", "True", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "logits", "[", "data", ".", "train_mask", "]", ",", "data", ".", "train_y", "[", "data", ".", "train_mask", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "val_loss", "=", "F", ".", "cross_entropy", "(", "\n", "logits", "[", "data", ".", "val_mask", "]", ",", "data", ".", "val_y", "[", "data", ".", "val_mask", "]", ")", "\n", "if", "best_val_loss", "is", "None", "or", "val_loss", "<", "best_val_loss", ":", "\n", "                ", "best_val_loss", "=", "val_loss", "\n", "best_model", "=", "model", ".", "state_dict", "(", ")", "\n", "current_patience", "=", "EARLY_STOPPING_PATIENCE", "\n", "", "else", ":", "\n", "                ", "current_patience", "-=", "1", "\n", "if", "current_patience", "==", "0", ":", "\n", "                    ", "break", "\n", "", "", "", "model", ".", "load_state_dict", "(", "best_model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "data", ")", "\n", "pred_labels", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_labesl", "=", "data", ".", "train_y", ".", "argmax", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_mask", "=", "data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "[", "'accuracy'", "]", ".", "append", "(", "accuracy_score", "(", "\n", "true_labesl", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ")", ")", "\n", "scores", "[", "'f1_macro'", "]", ".", "append", "(", "f1_score", "(", "\n", "true_labesl", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "average", "=", "'macro'", ")", ")", "\n", "scores", "[", "'f1_micro'", "]", ".", "append", "(", "f1_score", "(", "\n", "true_labesl", "[", "test_mask", "]", ",", "pred_labels", "[", "test_mask", "]", ",", "average", "=", "'micro'", ")", ")", "\n", "pbar", ".", "set_description", "(", "\n", "f'Run {run + 1}/{runs} - F1 Macro: {np.mean(scores[\"f1_macro\"]):.3f}'", ")", "\n", "\n", "", "scores", "[", "'accuracy_std'", "]", "=", "np", ".", "std", "(", "scores", "[", "'accuracy'", "]", ")", "\n", "scores", "[", "'f1_macro_std'", "]", "=", "np", ".", "std", "(", "scores", "[", "'f1_macro'", "]", ")", "\n", "scores", "[", "'f1_micro_std'", "]", "=", "np", ".", "std", "(", "scores", "[", "'f1_micro'", "]", ")", "\n", "\n", "scores", "[", "'accuracy_avg'", "]", "=", "sum", "(", "scores", "[", "'accuracy'", "]", ")", "/", "runs", "\n", "scores", "[", "'f1_macro_avg'", "]", "=", "sum", "(", "scores", "[", "'f1_macro'", "]", ")", "/", "runs", "\n", "scores", "[", "'f1_micro_avg'", "]", "=", "sum", "(", "scores", "[", "'f1_micro'", "]", ")", "/", "runs", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.classify.classify": [[9, 80], ["numpy.array", "torch.device", "torch.device", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.BoolTensor().to", "torch.BoolTensor().to", "torch.BoolTensor().to", "torch.BoolTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "models.Classifier().to.eval", "models.Classifier().to.argmax().cpu().detach().numpy", "torch.optim.RMSprop", "torch.optim.RMSprop", "models.Classifier().to.train", "models.Classifier().to.load_state_dict", "model.to", "np.array.append", "torch.cuda.is_available", "torch.cuda.is_available", "torch.FloatTensor", "torch.FloatTensor", "torch.BoolTensor", "torch.BoolTensor", "torch.BoolTensor", "torch.BoolTensor", "torch.LongTensor", "torch.LongTensor", "models.models.PostHocLearnedWeightsClassifier().to", "models.models.Classifier().to", "models.Classifier().to.parameters", "torch.optim.RMSprop.zero_grad", "models.Classifier().to.", "torch.cross_entropy", "F.cross_entropy.backward", "torch.optim.RMSprop.step", "torch.cross_entropy", "models.Classifier().to.argmax().cpu().detach", "numpy.mean", "np.array.append", "models.Classifier().to.state_dict", "hierarchy.aggregate", "numpy.concatenate", "np.array.append", "models.models.PostHocLearnedWeightsClassifier", "models.models.Classifier", "models.Classifier().to.argmax().cpu", "hierarchy.aggregate", "hierarchy.aggregate", "np.array.append", "models.Classifier().to.argmax", "hierarchy.aggregate", "models.Classifier().to."], "function", ["home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.aggregate", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.aggregate", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.aggregate", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.aggregate"], ["def", "classify", "(", "\n", "first_level_nodes", ",", "\n", "aggregation_method", ",", "\n", "level", ",", "\n", "num_classes", ",", "\n", "num_levels", ",", "\n", "train_mask", ",", "\n", "val_mask", ",", "\n", "labels", ",", "\n", "embedding_type", "=", "'embedding1'", ",", "\n", "return_model", "=", "False", ",", "\n", "model", "=", "None", "\n", ")", ":", "\n", "    ", "embeddings", "=", "[", "]", "\n", "for", "node", "in", "first_level_nodes", ":", "\n", "        ", "if", "aggregation_method", "==", "'mean'", ":", "\n", "            ", "embeddings", ".", "append", "(", "np", ".", "mean", "(", "aggregate", "(", "node", ",", "embedding_type", ")", ",", "axis", "=", "0", ")", ")", "\n", "", "elif", "aggregation_method", "==", "'concat'", ":", "\n", "            ", "embeddings", ".", "append", "(", "np", ".", "concatenate", "(", "aggregate", "(", "node", ",", "embedding_type", ")", ")", ")", "\n", "", "elif", "aggregation_method", "==", "'post_hoc_learned_weights'", ":", "\n", "            ", "embeddings", ".", "append", "(", "aggregate", "(", "node", ",", "embedding_type", ")", ")", "\n", "", "elif", "aggregation_method", "==", "'level'", ":", "\n", "            ", "embeddings", ".", "append", "(", "aggregate", "(", "node", ",", "embedding_type", ")", "[", "level", "]", ")", "\n", "", "", "embeddings", "=", "np", ".", "array", "(", "embeddings", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "x", "=", "torch", ".", "FloatTensor", "(", "embeddings", ")", ".", "to", "(", "device", ")", "\n", "train_mask", "=", "torch", ".", "BoolTensor", "(", "train_mask", ")", ".", "to", "(", "device", ")", "\n", "val_mask", "=", "torch", ".", "BoolTensor", "(", "val_mask", ")", ".", "to", "(", "device", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "model", "is", "None", ":", "\n", "        ", "if", "aggregation_method", "==", "'post_hoc_learned_weights'", ":", "\n", "            ", "classifier", "=", "models", ".", "PostHocLearnedWeightsClassifier", "(", "\n", "embeddings", ".", "shape", "[", "2", "]", ",", "\n", "num_classes", ",", "\n", "num_levels", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "classifier", "=", "models", ".", "Classifier", "(", "\n", "embeddings", ".", "shape", "[", "1", "]", ",", "num_classes", ")", ".", "to", "(", "device", ")", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "classifier", ".", "parameters", "(", ")", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "best_val", "=", "None", "\n", "best_model", "=", "None", "\n", "patience", "=", "EARLY_STOPPING_PATIENCE", "\n", "while", "True", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "out", "=", "classifier", "(", "x", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "out", "[", "train_mask", "]", ",", "labels", "[", "train_mask", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "val_loss", "=", "F", ".", "cross_entropy", "(", "out", "[", "val_mask", "]", ",", "labels", "[", "val_mask", "]", ")", "\n", "if", "best_val", "is", "None", "or", "val_loss", "<", "best_val", ":", "\n", "                ", "best_val", "=", "val_loss", "\n", "best_model", "=", "classifier", ".", "state_dict", "(", ")", "\n", "patience", "=", "EARLY_STOPPING_PATIENCE", "\n", "", "else", ":", "\n", "                ", "patience", "-=", "1", "\n", "if", "patience", "==", "0", ":", "\n", "                    ", "break", "\n", "", "", "", "classifier", ".", "load_state_dict", "(", "best_model", ")", "\n", "", "else", ":", "\n", "        ", "classifier", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "classifier", ".", "eval", "(", ")", "\n", "pred_labels", "=", "classifier", "(", "x", ")", ".", "argmax", "(", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "return_model", ":", "\n", "        ", "return", "pred_labels", ",", "classifier", "\n", "", "return", "pred_labels", "\n", "", ""]], "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.Node.__init__": [[10, 19], ["anytree.NodeMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.rezanmz_smgrl.models.custom_layers.MultiplicationLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_id", ",", "embedding", "=", "None", ",", "parent", "=", "None", ",", "children", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "Node", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "node_id", "=", "node_id", "\n", "self", ".", "embedding", "=", "embedding", "\n", "# embedding2 is used in inductive learning to store the embedding for the held-out nodes", "\n", "self", ".", "embedding2", "=", "None", "\n", "self", ".", "parent", "=", "parent", "\n", "if", "children", "is", "not", "None", ":", "\n", "            ", "self", ".", "children", "=", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.construct_hierarchy": [[21, 100], ["torch_geometric.utils.to_scipy_sparse_matrix", "graph_coarsening.coarsen", "graphs.append", "pygsp.graphs.graph.Graph", "torch.from_numpy().float", "range", "subgraphs.append", "graphs.append", "torch.tensor", "torch.tensor", "restriction_operator.mm", "restriction_operator.mm", "restriction_operator.mm", "restriction_operator.mm().mm", "restriction_operator.mm().mm.to_sparse().indices", "torch_geometric.data.Data", "hierarchy.append", "hierarchy.Node", "partitions[].append", "restriction_operator.mm.append", "restriction_operator.mm.append", "subgraphs.append", "torch_geometric.utils.to_dense_adj", "restriction_operator.t", "torch.from_numpy", "range", "range", "torch_geometric.data.Data.clone", "restriction_operator.mm", "restriction_operator.mm().mm.to_sparse", "torch.tensor", "torch.tensor", "hierarchy.Node", "op.todense", "torch_geometric.data.Data.train_y[].tolist", "torch.zeros_like().tolist", "torch_geometric.data.Data.val_y[].tolist", "torch.zeros_like().tolist", "torch_geometric.data.Data.subgraph().clone", "zip", "range", "bool", "bool", "range", "range", "restriction_operator[].argmax", "torch.zeros_like", "torch.zeros_like", "torch_geometric.data.Data.subgraph", "train_y[].sum", "range", "val_y[].sum", "range", "torch.tensor().long", "torch.tensor"], "function", ["None"], ["", "", "", "def", "construct_hierarchy", "(", "\n", "data", ",", "\n", "coarsening_method", ",", "\n", "reduction_ratio", ",", "\n", ")", ":", "\n", "    ", "adj", "=", "to_scipy_sparse_matrix", "(", "data", ".", "edge_index", ")", "\n", "_", ",", "_", ",", "restriction_operators", ",", "_", "=", "graph_reduction", "(", "\n", "gsp_Graph", "(", "adj", ")", ",", "\n", "r", "=", "reduction_ratio", ",", "\n", "method", "=", "coarsening_method", "\n", ")", "\n", "# Convert restriction operators to torch", "\n", "restriction_operators", "=", "[", "torch", ".", "from_numpy", "(", "\n", "op", ".", "todense", "(", ")", ")", ".", "float", "(", ")", "for", "op", "in", "restriction_operators", "]", "\n", "hierarchy", "=", "[", "[", "\n", "Node", "(", "node_id", "=", "node_id", ")", "\n", "for", "node_id", "in", "range", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "]", "]", "\n", "graphs", "=", "[", "]", "\n", "for", "restriction_operator", "in", "restriction_operators", ":", "\n", "# prolongation_operator = restriction_operator.transpose()", "\n", "        ", "partitions", "=", "[", "[", "]", "for", "_", "in", "range", "(", "restriction_operator", ".", "shape", "[", "0", "]", ")", "]", "\n", "train_y", "=", "[", "]", "\n", "val_y", "=", "[", "]", "\n", "for", "node", "in", "range", "(", "restriction_operator", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "partitions", "[", "restriction_operator", "[", ":", ",", "node", "]", ".", "argmax", "(", ")", "]", ".", "append", "(", "node", ")", "\n", "train_y", ".", "append", "(", "\n", "data", ".", "train_y", "[", "node", "]", ".", "tolist", "(", ")", "if", "data", ".", "train_mask", "[", "node", "]", "else", "torch", ".", "zeros_like", "(", "\n", "data", ".", "train_y", "[", "node", "]", ")", ".", "tolist", "(", ")", "\n", ")", "\n", "val_y", ".", "append", "(", "\n", "data", ".", "val_y", "[", "node", "]", ".", "tolist", "(", ")", "if", "data", ".", "val_mask", "[", "node", "]", "else", "torch", ".", "zeros_like", "(", "\n", "data", ".", "val_y", "[", "node", "]", ")", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "", "subgraphs", "=", "[", "]", "\n", "for", "partition", "in", "partitions", ":", "\n", "            ", "subgraphs", ".", "append", "(", "{", "\n", "'nodes'", ":", "partition", ",", "\n", "'data'", ":", "data", ".", "subgraph", "(", "torch", ".", "tensor", "(", "partition", ")", ".", "long", "(", ")", ")", ".", "clone", "(", ")", ",", "\n", "}", ")", "\n", "", "subgraphs", ".", "append", "(", "{", "\n", "'nodes'", ":", "[", "node", "for", "node", "in", "range", "(", "restriction_operator", ".", "shape", "[", "1", "]", ")", "]", ",", "\n", "'data'", ":", "data", ".", "clone", "(", ")", ",", "\n", "}", ")", "\n", "graphs", ".", "append", "(", "subgraphs", ")", "\n", "\n", "train_y", "=", "torch", ".", "tensor", "(", "train_y", ")", "\n", "val_y", "=", "torch", ".", "tensor", "(", "val_y", ")", "\n", "\n", "train_y", "=", "restriction_operator", ".", "mm", "(", "train_y", ")", "\n", "val_y", "=", "restriction_operator", ".", "mm", "(", "val_y", ")", "\n", "features", "=", "restriction_operator", ".", "mm", "(", "data", ".", "x", ")", "\n", "adj", "=", "to_dense_adj", "(", "data", ".", "edge_index", ")", "[", "0", "]", "\n", "adj", "=", "restriction_operator", ".", "mm", "(", "adj", ")", ".", "mm", "(", "restriction_operator", ".", "t", "(", ")", ")", "\n", "edge_index", "=", "adj", ".", "to_sparse", "(", ")", ".", "indices", "(", ")", "\n", "data", "=", "Data", "(", "\n", "x", "=", "features", ",", "\n", "edge_index", "=", "edge_index", ",", "\n", "train_y", "=", "train_y", ",", "\n", "val_y", "=", "val_y", ",", "\n", "train_mask", "=", "torch", ".", "tensor", "(", "[", "bool", "(", "train_y", "[", "i", "]", ".", "sum", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "adj", ".", "shape", "[", "0", "]", ")", "]", ")", ",", "\n", "val_mask", "=", "torch", ".", "tensor", "(", "[", "bool", "(", "val_y", "[", "i", "]", ".", "sum", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "adj", ".", "shape", "[", "0", "]", ")", "]", ")", ",", "\n", ")", "\n", "hierarchy", ".", "append", "(", "[", "\n", "Node", "(", "\n", "node_id", "=", "node_id", ",", "\n", "children", "=", "[", "hierarchy", "[", "-", "1", "]", "[", "child", "]", "for", "child", "in", "partition", "]", ",", "\n", ")", "\n", "for", "node_id", ",", "partition", "in", "zip", "(", "range", "(", "data", ".", "x", ".", "shape", "[", "0", "]", ")", ",", "partitions", ")", "\n", "]", ")", "\n", "\n", "", "graphs", ".", "append", "(", "[", "{", "\n", "'nodes'", ":", "[", "node", "for", "node", "in", "range", "(", "data", ".", "x", ".", "shape", "[", "0", "]", ")", "]", ",", "\n", "'data'", ":", "data", "\n", "}", "]", ")", "\n", "return", "hierarchy", ",", "graphs", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.hierarchy.aggregate": [[102, 115], ["embedding.append", "node.embedding.detach().cpu().numpy", "node.embedding.detach().cpu().numpy", "embedding.append", "node.embedding2.detach().cpu().numpy", "node.embedding2.detach().cpu().numpy", "node.embedding.detach().cpu", "node.embedding.detach().cpu", "node.embedding2.detach().cpu", "node.embedding2.detach().cpu", "node.embedding.detach", "node.embedding.detach", "node.embedding2.detach", "node.embedding2.detach"], "function", ["None"], ["", "def", "aggregate", "(", "node", ",", "embedding_type", "=", "'embedding1'", ")", ":", "\n", "    ", "embedding", "=", "[", "]", "\n", "while", "node", ".", "parent", "is", "not", "None", ":", "\n", "        ", "if", "embedding_type", "==", "'embedding1'", ":", "\n", "            ", "embedding", ".", "append", "(", "node", ".", "embedding", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "elif", "embedding_type", "==", "'embedding2'", ":", "\n", "            ", "embedding", ".", "append", "(", "node", ".", "embedding2", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "node", "=", "node", ".", "parent", "\n", "", "if", "embedding_type", "==", "'embedding1'", ":", "\n", "        ", "results", "=", "[", "*", "embedding", ",", "node", ".", "embedding", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "", "elif", "embedding_type", "==", "'embedding2'", ":", "\n", "        ", "results", "=", "[", "*", "embedding", ",", "node", ".", "embedding2", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.index_to_mask": [[8, 12], ["torch.zeros", "torch.zeros"], "function", ["None"], ["def", "index_to_mask", "(", "index", ",", "size", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "index", ".", "device", ")", "\n", "mask", "[", "index", "]", "=", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.random_mask": [[14, 32], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "datasets.index_to_mask", "datasets.index_to_mask", "datasets.index_to_mask", "indices.append", "torch.randperm", "torch.randperm", "index.size", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.index_to_mask", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.index_to_mask", "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.index_to_mask"], ["", "def", "random_mask", "(", "dataset", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dataset", ".", "num_classes", ")", ":", "\n", "        ", "index", "=", "(", "dataset", ".", "data", ".", "y", "==", "i", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "index", "=", "index", "[", "torch", ".", "randperm", "(", "index", ".", "size", "(", "0", ")", ")", "]", "\n", "indices", ".", "append", "(", "index", ")", "\n", "", "train_index", "=", "torch", ".", "cat", "(", "[", "i", "[", ":", "int", "(", "0.2", "*", "i", ".", "shape", "[", "0", "]", ")", "]", "\n", "for", "i", "in", "indices", "]", ",", "dim", "=", "0", ")", "\n", "val_index", "=", "torch", ".", "cat", "(", "\n", "[", "i", "[", "int", "(", "0.2", "*", "i", ".", "shape", "[", "0", "]", ")", ":", "int", "(", "0.4", "*", "i", ".", "shape", "[", "0", "]", ")", "]", "for", "i", "in", "indices", "]", ",", "dim", "=", "0", ")", "\n", "test_index", "=", "torch", ".", "cat", "(", "[", "i", "[", "int", "(", "0.4", "*", "i", ".", "shape", "[", "0", "]", ")", ":", "]", "for", "i", "in", "indices", "]", ",", "dim", "=", "0", ")", "\n", "dataset", ".", "data", ".", "train_mask", "=", "index_to_mask", "(", "\n", "train_index", ",", "size", "=", "dataset", ".", "data", ".", "num_nodes", ")", "\n", "dataset", ".", "data", ".", "val_mask", "=", "index_to_mask", "(", "\n", "val_index", ",", "size", "=", "dataset", ".", "data", ".", "num_nodes", ")", "\n", "dataset", ".", "data", ".", "test_mask", "=", "index_to_mask", "(", "\n", "test_index", ",", "size", "=", "dataset", ".", "data", ".", "num_nodes", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.load_dataset": [[34, 63], ["torch_geometric.datasets.Planetoid", "torch_geometric.datasets.Actor", "torch_geometric.datasets.Flickr", "torch_geometric.datasets.Reddit", "torch_geometric.datasets.Reddit2", "torch_geometric.datasets.AmazonProducts", "torch_geometric.datasets.Amazon", "torch_geometric.datasets.CitationFull", "datasets.random_mask", "torch.one_hot().float", "data.y.detach().clone", "data.y.detach().clone", "torch.one_hot", "data.y.detach", "data.y.detach"], "function", ["home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.random_mask"], ["", "def", "load_dataset", "(", "name", ")", ":", "\n", "    ", "if", "name", "in", "[", "'cora'", ",", "'citeseer'", ",", "'pubmed'", "]", ":", "\n", "        ", "dataset", "=", "datasets", ".", "Planetoid", "(", "root", "=", "'data/planetoid'", ",", "name", "=", "name", ")", "\n", "", "if", "name", "==", "'actor'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "Actor", "(", "root", "=", "'data/actor'", ")", "\n", "del", "dataset", ".", "data", ".", "train_mask", "\n", "del", "dataset", ".", "data", ".", "val_mask", "\n", "del", "dataset", ".", "data", ".", "test_mask", "\n", "", "if", "name", "==", "'flickr'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "Flickr", "(", "'data/flickr'", ")", "\n", "", "if", "name", "==", "'reddit'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "Reddit", "(", "'data/reddit'", ")", "\n", "", "if", "name", "==", "'reddit2'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "Reddit2", "(", "'data/reddit2'", ")", "\n", "", "if", "name", "==", "'amazon-products'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "AmazonProducts", "(", "'data/amazon-prodoucts'", ")", "\n", "", "if", "name", "in", "[", "'amazon-computers'", ",", "'amazon-photo'", "]", ":", "\n", "        ", "dataset", "=", "datasets", ".", "Amazon", "(", "\n", "root", "=", "'data/amazon'", ",", "name", "=", "'Computers'", "if", "name", "==", "'amazon-computers'", "else", "'Photo'", ")", "\n", "", "if", "name", "==", "'dblp'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "CitationFull", "(", "'data/dblp'", ",", "'dblp'", ")", "\n", "", "if", "'train_mask'", "not", "in", "dataset", ".", "data", ":", "\n", "        ", "dataset", "=", "random_mask", "(", "dataset", ")", "\n", "", "data", ",", "num_classes", ",", "num_features", "=", "dataset", ".", "data", ",", "dataset", ".", "num_classes", ",", "dataset", ".", "num_features", "\n", "if", "name", "!=", "'amazon-products'", ":", "\n", "        ", "data", ".", "y", "=", "F", ".", "one_hot", "(", "data", ".", "y", ",", "num_classes", ")", ".", "float", "(", ")", "\n", "", "data", ".", "train_y", ",", "data", ".", "val_y", "=", "data", ".", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "data", ".", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "del", "data", ".", "y", "\n", "return", "data", ",", "num_classes", ",", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.utils.datasets.random_graph": [[65, 97], ["torch.randn", "torch.randn", "torch.randint", "torch.randint", "torch.one_hot().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch_geometric.data.Data", "torch_geometric.utils.erdos_renyi_graph", "torch_geometric.utils.barabasi_albert_graph", "torch.one_hot", "int", "int", "int", "int"], "function", ["None"], ["", "def", "random_graph", "(", "\n", "type", ",", "\n", "size", ",", "\n", "edge_prob", "=", "0.015", ",", "\n", "num_edges", "=", "2", ",", "\n", "num_features", "=", "500", ",", "\n", "num_classes", "=", "10", "\n", ")", ":", "\n", "    ", "if", "type", "==", "'erdos-renyi'", ":", "\n", "        ", "edge_index", "=", "erdos_renyi_graph", "(", "size", ",", "edge_prob", ")", "\n", "", "elif", "type", "==", "'barabasi-albert'", ":", "\n", "        ", "edge_index", "=", "barabasi_albert_graph", "(", "size", ",", "num_edges", ")", "\n", "\n", "", "x", "=", "torch", ".", "randn", "(", "size", ",", "num_features", ")", "\n", "y", "=", "torch", ".", "randint", "(", "0", ",", "num_classes", ",", "(", "size", ",", ")", ")", "\n", "y", "=", "F", ".", "one_hot", "(", "y", ",", "num_classes", ")", ".", "float", "(", ")", "\n", "train_mask", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "train_mask", "[", ":", "int", "(", "size", "*", "0.8", ")", "]", "=", "1", "\n", "val_mask", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "val_mask", "[", "int", "(", "size", "*", "0.8", ")", ":", "int", "(", "size", "*", "0.9", ")", "]", "=", "1", "\n", "test_mask", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "test_mask", "[", "int", "(", "size", "*", "0.9", ")", ":", "]", "=", "1", "\n", "data", "=", "Data", "(", "\n", "x", "=", "x", ",", "\n", "edge_index", "=", "edge_index", ",", "\n", "train_y", "=", "y", ",", "\n", "val_y", "=", "y", ",", "\n", "train_mask", "=", "train_mask", ",", "\n", "val_mask", "=", "val_mask", ",", "\n", "test_mask", "=", "test_mask", "\n", ")", "\n", "return", "data", ",", "num_classes", ",", "num_features", "\n", "", ""]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.models.GraphSAGE.__init__": [[11, 15], ["torch.nn.Module.__init__", "torch_geometric.nn.SAGEConv", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.rezanmz_smgrl.models.custom_layers.MultiplicationLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "embedding_dim", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "SAGEConv", "(", "num_features", ",", "embedding_dim", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.models.GraphSAGE.forward": [[16, 23], ["models.GraphSAGE.conv", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "models.GraphSAGE.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "edge_index", "=", "data", ".", "x", ",", "data", ".", "edge_index", "\n", "embedding", "=", "self", ".", "conv", "(", "x", ",", "edge_index", ")", "\n", "logits", "=", "F", ".", "relu", "(", "embedding", ")", "\n", "logits", "=", "F", ".", "dropout", "(", "logits", ",", "training", "=", "self", ".", "training", ")", "\n", "logits", "=", "self", ".", "linear", "(", "logits", ")", "\n", "return", "embedding", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.models.APPNP.__init__": [[26, 31], ["torch.nn.Module.__init__", "torch_geometric.nn.APPNP", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.rezanmz_smgrl.models.custom_layers.MultiplicationLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "embedding_dim", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "APPNPConv", "(", "K", "=", "3", ",", "alpha", "=", "0.5", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "num_features", ",", "embedding_dim", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.models.APPNP.forward": [[32, 42], ["models.APPNP.conv", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "models.APPNP.linear1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "models.APPNP.linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "edge_index", "=", "data", ".", "x", ",", "data", ".", "edge_index", "\n", "embedding", "=", "self", ".", "conv", "(", "x", ",", "edge_index", ")", "\n", "embedding", "=", "F", ".", "relu", "(", "embedding", ")", "\n", "embedding", "=", "F", ".", "dropout", "(", "embedding", ",", "training", "=", "self", ".", "training", ")", "\n", "embedding", "=", "self", ".", "linear1", "(", "embedding", ")", "\n", "logits", "=", "F", ".", "relu", "(", "embedding", ")", "\n", "logits", "=", "F", ".", "dropout", "(", "logits", ",", "training", "=", "self", ".", "training", ")", "\n", "logits", "=", "self", ".", "linear2", "(", "logits", ")", "\n", "return", "embedding", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.models.Classifier.__init__": [[45, 48], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.rezanmz_smgrl.models.custom_layers.MultiplicationLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.models.Classifier.forward": [[49, 53], ["models.Classifier.linear", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.models.PostHocLearnedWeightsClassifier.__init__": [[56, 62], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "custom_layers.MultiplicationLayer", "range"], "methods", ["home.repos.pwc.inspect_result.rezanmz_smgrl.models.custom_layers.MultiplicationLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "num_classes", ",", "num_levels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "post_hoc_weights", "=", "nn", ".", "ModuleList", "(", "\n", "[", "MultiplicationLayer", "(", "embedding_dim", ")", "for", "_", "in", "range", "(", "num_levels", ")", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "embedding_dim", ",", "num_classes", ")", "\n", "self", ".", "num_levels", "=", "num_levels", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.models.PostHocLearnedWeightsClassifier.forward": [[63, 74], ["range", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "models.PostHocLearnedWeightsClassifier.linear", "torch.dropout", "torch.dropout", "transformed_embeddings.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "transformed_embeddings", "=", "[", "]", "\n", "for", "level", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "transformed_embeddings", ".", "append", "(", "\n", "self", ".", "post_hoc_weights", "[", "level", "]", "(", "x", "[", ":", ",", "level", "]", ")", "\n", ")", "\n", "", "post_hoc_learned_embedding", "=", "torch", ".", "stack", "(", "\n", "transformed_embeddings", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "out", "=", "self", ".", "linear", "(", "post_hoc_learned_embedding", ")", "\n", "out", "=", "F", ".", "dropout", "(", "out", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.custom_layers.MultiplicationLayer.__init__": [[6, 13], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["home.repos.pwc.inspect_result.rezanmz_smgrl.models.custom_layers.MultiplicationLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "weights", "=", "torch", ".", "Tensor", "(", "size", ")", "\n", "self", ".", "weights", "=", "nn", ".", "Parameter", "(", "weights", ")", "\n", "\n", "# Initialize", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "weights", ",", "-", "0.01", ",", "+", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rezanmz_smgrl.models.custom_layers.MultiplicationLayer.forward": [[14, 16], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "weights", "\n", "", "", ""]]}